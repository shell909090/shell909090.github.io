<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>emacs on Shell&#39;s Home</title>
    <link>//blog.shell909090.org/tags/emacs/</link>
    <description>Recent content in emacs on Shell&#39;s Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CC-BY-SA4.0</copyright>
    <lastBuildDate>Tue, 10 Apr 2012 06:50:56 +0800</lastBuildDate>
    
	<atom:link href="//blog.shell909090.org/tags/emacs/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>如何用tabbar插件做emacs的tab定位切换</title>
      <link>//blog.shell909090.org/blog/archives/2134/</link>
      <pubDate>Tue, 10 Apr 2012 06:50:56 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2134/</guid>
      <description>说明一下，定位切换的意思，是像chromium那样，用Atl-1-9直接切换tab。而不是用上一个下一个慢慢换。另外，是切换buffer，不是切换frame。
以下是实现部分：
;; 全部的buffer都分一组，否则这个修改是没任何意思的 (setq tabbar-buffer-groups-function (lambda () (list &amp;quot;All Buffers&amp;quot;))) ;; 去掉emacs自带的几个buffer (setq tabbar-buffer-list-function (lambda () (remove-if (lambda(buffer) (find (aref (buffer-name buffer) 0) &amp;quot; *&amp;quot;)) (buffer-list)))) ;; 切换到第N个buffer，1为第一个，负数表示从后数，注意0会出错，这里就不处理了 (defun switch-tabbar (num) (let* ((tabs (tabbar-tabs (tabbar-get-tabset &amp;quot;All Buffers&amp;quot;))) (tab (nth (if (&amp;gt; num 0) (- num 1) (+ (length tabs) num)) tabs))) (if tab (switch-to-buffer (car tab))))) ;; 不说废话，绑热键 (global-set-key [(meta 1)] (lambda () (interactive) (switch-tabbar 1))) (global-set-key [(meta 2)] (lambda () (interactive) (switch-tabbar 2))) (global-set-key [(meta 3)] (lambda () (interactive) (switch-tabbar 3))) (global-set-key [(meta 4)] (lambda () (interactive) (switch-tabbar 4))) (global-set-key [(meta 5)] (lambda () (interactive) (switch-tabbar 5))) (global-set-key [(meta 6)] (lambda () (interactive) (switch-tabbar 6))) (global-set-key [(meta 7)] (lambda () (interactive) (switch-tabbar 7))) (global-set-key [(meta 8)] (lambda () (interactive) (switch-tabbar 8))) (global-set-key [(meta 9)] (lambda () (interactive) (switch-tabbar 9))) (global-set-key [(meta )] (lambda () (interactive) (switch-tabbar -1)))  </description>
    </item>
    
    <item>
      <title>elisp的简单介绍</title>
      <link>//blog.shell909090.org/blog/archives/1661/</link>
      <pubDate>Sat, 25 Dec 2010 20:16:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1661/</guid>
      <description>emacs是利用elisp写成的，而elisp是lisp的一个方言。lisp语言是出名的优美和晦涩，当然，更出名的是括号。。。
emacs利用elisp作为上层抽象。首先，emacs提供了基本的编辑器框架，包括文件操作函数API，buffer，frame，windows的API。而后，emacs附带了很多函数实现，并且和按键一一绑定。例如Ctrl+N（简写为C-N）就被绑定到“换到下一行”这个API上。于是，我们按下Ctrl+N的时候，就会触发“换到下一行”这个函数的执行。dired等插件也是基于类似的原理写成。
我们可以用类似的方法，来编写自己的函数，扩充emacs的功能。下面我们看一个例子：
(defun popup-term () (interactive) (apply &#39;start-process &amp;quot;terminal&amp;quot; nil popup-terminal-command))  首先先说明一下，elisp的基于规则是利用括号匹配的s表达式，通过特定规则计算表达式。每个表达式由多个原子构成，一个原子可以是符号，对象（数字或者字符串），序对，表（包括空表），树，以及他们的嵌套。求值的时候，第一个原子做动词，先求值第一个原子，直到得到一个对象，再根据第一个原子的特性决定正则序和应用序。应用序的先对每个后续原子求值，再调用第一个原子对应的对象。正则序直接交给第一个原子对应对象处理。上文那个表达式，最外层的是(defun)列表，defun是函数定义函数，popup-term是符号。这部分混合起来，就是定义(interactive) (apply &amp;lsquo;start-process &amp;ldquo;terminal&amp;rdquo; nil popup-terminal-command)为一个函数，并在上层框架空间内把内容赋值给popup-term这个符号。说的更直白一点，就是定义函数。
当我们执行popup-term这个函数的时候（M-x加上函数名就可以手工调用），首先执行interactive过程。这个函数可以在这里（http://www.gnu.org/software/emacs/manual/html_node/elisp/index.html）查到，基本上，可以认为执行了这个函数，才能够和前台交互。而后是apply函数，这个函数将后面的几个值作用于紧跟着的那个符号所对应的函数。用python语言来描述，大概是这个样子。
def apply(func, \*param): return globals()\[func\](\*param)  这个函数真正的部分，是从start-process到括号结束。其意义是启动一个子进程，名为terminal，没有对应的buffer（熟悉emacs的应该知道这是什么），命令为popup-terminal-command。这个命令在windows下和linux下有不同定义，所以我将这个定义放在了emacs-win.el和emacs-linux.el里面。在linux下，他是这么定义的。
(setq popup-terminal-command &#39;(&amp;quot;x-terminal-emulator&amp;quot;))  setq是设定一个全局变量。整句合起来的意思是，在执行popup-term的时候，启动一个子进程，执行x-terminal-emulator。最后，将popup-term绑定到keymap上。
(global-set-key \[(control c) (s)\] &#39;popup-term)  现在，在任何一个buffer中按下C-c s，就可以弹出当前目录对应的term了。
我们在emacs中所做的所有配置，插件安装，其实本质上是写代码控制其他代码的载入，变更环境变量。只要有合适的文档，或者有时间阅读源码，我们就可以对其他程序进行扩充。下面介绍一个对dired进行扩充的例子，我们向dired中加入copy-from和rename-from，还有dired-open功能。dired的copy和rename必须在源目录中，选择文件，按C，输入目标路径。有的时候我们在某个目录工作到一半，突然需要从另外一个目录复制一个文件过来。这时候打开对方目录进行复制动作太繁琐，因此我编写了两个函数，分别绑定到r和c上。dired-open则是另外一个文件，有时我们需要通过其他程序打开某个文件，例如播放电影。在dired中直接用&amp;amp;可以实现这个目标，但是需要自行输入播放命令，而且会新开一个buffer。以下是代码。
(defun dired-open-file (&amp;amp;optional arg) (interactive) (apply &#39;start-process &amp;quot;dired-open&amp;quot; nil (append (split-string (read-shell-command &amp;quot;command: &amp;quot; (dired-guess-cmd (dired-get-filename)))) (list (dired-get-filename))))) (defun dired-copy-from (&amp;amp;optional arg) (interactive) (let ((source-path (read-file-name &amp;quot;filepath: &amp;quot;))) (copy-file source-path (file-name-nondirectory source-path)))) (defun dired-rename-from (&amp;amp;optional arg) (interactive) (let ((source-path (read-file-name &amp;quot;filepath: &amp;quot;))) (rename-file source-path (file-name-nondirectory source-path)))) (add-hook &#39;dired-mode-hook (lambda () (define-key dired-mode-map &amp;quot;b&amp;quot; &#39;dired-open-file) (define-key dired-mode-map &amp;quot;c&amp;quot; &#39;dired-copy-from) (define-key dired-mode-map &amp;quot;r&amp;quot; &#39;dired-rename-from) (define-key dired-mode-map \[(control c) (g)\] &#39;dired-etags-tables)))  如上文一样，我们定义了dired-open-file函数，这个函数的核心部分是start-process，但是在命令上，我们的命令是这个。</description>
    </item>
    
    <item>
      <title>在各个平台上启动emacs的技巧</title>
      <link>//blog.shell909090.org/blog/archives/103/</link>
      <pubDate>Fri, 12 Mar 2010 23:06:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/103/</guid>
      <description>今天在推上，一帮人讨论了emacs如何启动的问题。这个问题我是这么解决的。
这个配置针对三个上下文起作用。Windows，Linux图形，Linux+SSH。在Windows下，不使用alias，因为emacsclient会在找不到server的时候自动启动一个新的emacs。将emacsclient加入到注册表中，就可以对任意文件“使用emacs打开”。
Linux和Linux+SSH中，需要使用alias技巧，因为emacsclient不会在没有server的时候自动启动emacs。过程如下：
首先在系统相关的配置中，加入server-start，以便启动server服务。系统选择上，linux和windows加，console不加，因为后者没什么意义。然后，在系统中加入alias设定。
alias emacsclient=&amp;quot;emacsclient -a emacs&amp;quot;  这样，当系统中没有emacs启动的时候，就会启动一个。当有emacs启动后，就会调用这个emacs来打开文件。
在ssh环境下，需要开启x forward。这样就会打开远程emacs。这是比较慢的用法，快的方法是直接在本地emacs上使用tramp。</description>
    </item>
    
    <item>
      <title>emacs配置系统</title>
      <link>//blog.shell909090.org/blog/archives/100/</link>
      <pubDate>Wed, 03 Mar 2010 16:51:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/100/</guid>
      <description>emacs是个超级复杂的程序，尤其在配置问题上。贝壳的emacs要跨越三个环境。环境一，WindowsXP+Emacs23。环境二，Debian Testing + Xfce4。环境三，CentOS + Ssh。而整个的操作方式，个性设定需要保持一致。因此，引出一个问题。配置如何设置，跨平台，同步。
首先解决配置的同步问题，贝壳建立了一个svn仓库，用于存储该配置系统。然后在各个系统中co出这个仓库，当有需要调整时ci就可以保持同步了。Linux下可以使用ln连接文件，Windows下比较麻烦点，NTFS格式(大多都是NTFS格式了吧)可以去sysinternals下一个叫做junction的工具，以建立目录的工具链接，当然，.emacs文件只能手工拷贝了。
然后是配置的切分问题，如果只有一个文件，即使使用了版本控制，意义也不大。同时，将配置切割成不同的部分，控制载入过程，也可以跨平台和加速。以下是贝壳的.emacs文件。
;; .emacs profile, written by shell.xu ;; load other set (add-to-list &#39;load-path &amp;quot;~/.emacs.d/&amp;quot;) (add-to-list &#39;load-path &amp;quot;~/.emacs.d/auto-complete/&amp;quot;) (add-to-list &#39;load-path &amp;quot;~/.emacs.d/plugins/&amp;quot;) (load &amp;quot;emacs-setup&amp;quot;) (load &amp;quot;emacs-redef&amp;quot;) (load &amp;quot;emacs-plugin&amp;quot;) (cond ((not (boundp &#39;initial-window-system)) (load &amp;quot;emacs-console&amp;quot;)) ((memq initial-window-system &#39;(x w32)) (cond ((memq system-type &#39;(windows-nt cygwin)) (load &amp;quot;emacs-win&amp;quot;)) ((memq system-type &#39;(gnu/linux)) (load &amp;quot;emacs-linux&amp;quot;))))) (load &amp;quot;emacs-keymap&amp;quot;)  从上可以看出，我们先设定了.emacs.d作为默认加载路径——大多数文件都是放在这里。plugins是各种第三方程序的安装路径，这样这些程序就无需在各个平台上各自安装一次。而auto-complete单独拆出来纯粹是因为文件太多了。而后，我们加载了setup，这个文件内定义了emacs的基本配置，redef文件内定义了各种自定义函数和变量，plugin内控制了需要加载的各个插件和配置。
下面就有点复杂，简单来说，设定无Windows系统的时候加载emacs-console文件，有Windows的情况下，在windows下加载emacs-win，在linux下加载emacs-linux。这是实现跨平台设置的核心。
最后是keymap，经过上面复杂的设定，按键设置是统一的。
setup文件就不细说了，大家按照自己的习惯设定就好。下面我说几个redef中定义的函数。
(defun switch-windows-buffer () (interactive) (let ((this-buffer (window-buffer))) (switch-to-buffer (window-buffer (next-window (selected-window)))) (switch-to-buffer-other-window this-buffer) (other-window 1)))  这个函数的目标是用热键交换两个窗口的位置。如果你经常用C-x 3分栏，并且在两者间跳来跳去的话，有的时候往往希望两者的位置换一下。通常都是C-x b切换当前的窗口，然后C-x o切到隔壁去再换。这个太繁琐了。</description>
    </item>
    
    <item>
      <title>emacs简介</title>
      <link>//blog.shell909090.org/blog/archives/48/</link>
      <pubDate>Wed, 17 Dec 2008 11:14:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/48/</guid>
      <description>emacs一定是我梦想中的编辑器，设计者一定是个超级的混蛋。
emacs是一种多平台的编辑器，具有非常古老的历史，和vi一起并称为黑客常用两大编辑器（在贝壳学习linux后，就“顺带”学习了vi——因为根本没有其他选择）。作为编辑器来说，他只接受文本编辑，但是却具有收发邮件，编译软件，调试程序，甚至煮咖啡等各种诡异的非正经功能。很多人疯狂的热爱他，认为他是人工智能的结晶，化妆成编辑器的操作系统。但也有人疯狂的咒骂他，认为这东西纯粹就是折磨人用的。贝壳这次的blog，就是侃侃emacs到底是什么。
说emacs是人工智能平台，其实这个说法并没有错。emacs的运作机理和我们通常的编辑器都有不同。通常来说，一个编辑器可能有多个windows啦，frame啦什么的，但是最终作用于一个文本。你可以添加，删除，修改，或者标记一段文本，进行剪切，复制，粘贴等动作。设计比较完善的还有回退和重做。让我们专注于其中一个任务，例如，删除，看看我们的编辑器是如何工作的。
以notepad++为例吧，在选中一段文字删除的时候，你可以用键，同样，如果没有选中文字，这个键作用于当前光标后面的一个文字。（在此我们不讨论和前后删除的关系）这很简单，一个内容，按删除，就没了。但是你是否注意了这个过程本身，为什么按下是删除，为什么不是按下键或者键？
按照程序员的思维来说，编辑器的基础是一个文本内容和一个光标（或者说一个position），我们通过修改数据结构变更这两者以达到某种目的，这个过程被称为操作。例如，作为删除操作，我们移除（remove）了文本内容的position处的字符。而后，我们将这个操作（也可以称为函数）绑定到键上。于是，我们在按下键的时候，触发了删除函数，导致内容被删除。这个是能够删除文本的核心过程。从正常人思维的角度来说，一般我们都会将这个功能绑定到上面，而不会是或者，或者其他更疯狂的键。同样的机理，我们按下，文件存盘，是因为存盘的功能被绑定到了这个键上。好的编辑器一般带有键绑定修改功能，notepad++就可以自行修改热键。而emacs则更进一步。
emacs允许你自行编写扩充函数，并且将这些新的函数绑定到键上，这样就赋予了编辑器无限的可能性。例如，你可以写一个过程，每次触发就在当前光标处插入当前时间对应的纽约时间。或者你可以写一个过程，自动根据一个预定义的数据表格补充你输入人名的头衔。可以想象，当你需要重复单一工作时，这种扩充能力是非常重要的。你可以免除记忆一堆领导的详细头衔，免除重复输入，免除繁重的劳动，只要你编写一次扩展程序，并且绑定到某个键上。然而现在编辑器的趋势是，我们使用编辑器从事各种不同的工作。有的时候，我们用编辑器记事，有的时候用来写程序，有的时候用来看源码。因此我们对编辑器的个性化能力和强大都没有要求，反之对编辑器的标准化要求很高。说的更通俗点，我们不需要自行扩充一个插件来省事，但是我们一定要用来复制，用来粘帖。因为我们（指普通用户，而非以电脑为生的专业用户或者是变态的geek）不会程序，或者不喜欢为了某个目地花费时间来编写程序，毕竟现在不是70年代，当时接触电脑的都是智力最高的一帮变态。现在接触电脑的都只是普通用户而已，我们不需要强大的扩充，但是我希望我用一个编辑器的时候，这些基本功能在另外一个编辑器上不会产生区别。从这点来说，emacs差劲透了。
emacs的键绑定是根据上世纪70年代unix下（那时候linus都没出生，何况linux）的键盘来的，因此emacs假定你有一个Meta键。这个键在今天的电脑上已经找不到了，我们用Atl来替代。但是同志们，Atl是系统键，这么替代是有副作用的。例如自动补齐的函数热键是M-Tab，但是请试试在windows下按Atl+Tab。亲爱的，你会跳到另外一个程序上。那是windows切换程序的热键。还有我们经常用来复制，来退回。可是在当时的linux下，代表终止程序运行，代表挂起程序到后台。emacs当然要避免这两个热键，于是——你自己试试在emacs下按这两个热键的结果吧。
从热键约定的角度说，emacs是当之无愧的最差编辑器。不过这个很难怪罪emacs，毕竟他出生的年代不用说windows，连dos都没有出生，cp/m还只是个样品。要怪只能怪windows的设计人员在考虑热键的时候根本没有考虑emacs的现有标准，自己瞎设计一通（尤其是最常用的，虽然从人机工程角度这个是最合适的键）。
emacs更强大的特性是，可以根据当前文件的特征鉴定文件类型，并且采用正确的模式。例如，我可以在python模式下编写python程序，在C++模式下编写C++程序。对于用户来说，这两种模式看不出区别，然而他们本身有着非常多的细节不同。例如，在C++模式下，/**/是注释，而python下，#才是注释。灵活的模式允许你使用同样的方法操作不同类型的文件，并且还具有各种扩充。对于C++，他可以编译，对于python，他可以校验。并且有一些比较常用的超级扩充，例如etags。这个程序可以用来生成一些文件，帮助你找到一个符号的位置。利用这个扩充，你可以快速的寻找符号位置，自动完成，等等。这些近几年才在VSIDE和eclipse里面出现的特性，早在数十年前就出现在了emacs里面。
如果你有程序基础，并且长期从事相似的工作，例如写程序，写文档，并且有很多重复的工作，希望解放自己的劳动力，那么推荐你使用emacs。如果你是个找酷的新新人类，希望找一个很少人用的编辑器，具有真正酷的特性，被很多人称赞，那么建议你用emacs。除此外的人，请珍爱生命，远离emacs——这东西太容易上瘾了。~~~~~~~~~~~~</description>
    </item>
    
  </channel>
</rss>