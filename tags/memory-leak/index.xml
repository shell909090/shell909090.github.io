<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>memory-leak on Shell&#39;s Home</title>
    <link>//blog.shell909090.org/tags/memory-leak/</link>
    <description>Recent content in memory-leak on Shell&#39;s Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CC-BY-SA4.0</copyright>
    <lastBuildDate>Thu, 31 Jan 2008 19:21:06 +0800</lastBuildDate><atom:link href="//blog.shell909090.org/tags/memory-leak/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Process Explorer的潜在内存泄漏</title>
      <link>//blog.shell909090.org/blog/archives/426/</link>
      <pubDate>Thu, 31 Jan 2008 19:21:06 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/426/</guid>
      <description>贝壳最近碰到一个郁闷到死的问题。机器经常出现硬盘狂转，系统响应延迟。系统弹出一个错误，然后死机。贝壳开始猜测是硬盘驱动问题，升级驱动N次，无效。然后再猜测是ext2fs的问题(贝壳用这个驱动挂载linux下面的盘的)，看来看去，不是。最后，贝壳确定了，这是内存泄漏了～～～
问题是，这时候可没人跳出来推荐喝什么口服液的。贝壳系统中永远挂着一个procexp，看内存状态的。这东西是sysinternals的产品，后来被微软收购了。功能强大，很多系统调试，杀马都需要用到。于是贝壳就用这个工具看哪个程序的内存泄漏，可是看来看去看不到。准确说，是没等贝壳看到，系统就先死透了。最后贝壳多次尝试，发现了一个死机的规律。当mysql开启的时候，procexp就会随时发生异常死机。这是一个重要的提示，要么mysql内存泄漏了，要么procexp内存泄漏了。究竟是哪个呢？贝壳用了同属于sysinternals开发的pstools系列工具，仔细检查了异常发生时候的内存状态，确定，Process Explorer存在内存泄漏的风险！
看来sysinternals被微软收购后，旗下的工具也出现了微软的一贯特色。以下是一次内存泄漏后，终止mysql服务后抓下来的内存状态输出。如果不终止mysql，不等我抓系统就挂了。
Process memory detail for HOME-B2326348D0:
Name Pid VM WS Priv Priv Pk Faults NonP Page
Idle 0 0 28 0 0 0 0 0
System 4 800 52 0 0 10120 0 0
smss 772 3748 48 172 1648 223 0 5
csrss 828 68132 1464 2304 3768 13748 6 144
winlogon 856 61528 580 8536 8684 5143 39 96
services 900 37724 804 2256 2404 2740 7 65</description>
    </item>
    
    <item>
      <title>内存泄露检测简说</title>
      <link>//blog.shell909090.org/blog/archives/359/</link>
      <pubDate>Wed, 07 Feb 2007 22:48:13 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/359/</guid>
      <description>我们首先从一段代码说起。
#define _CRTDBG_MAP_ALLOC #include #include class test { public: test () { lpBuffer = new char[0x1000]; }; \~test () { delete lpBuffer; }; void *operator new (size_t s) { return malloc (s); }; void operator delete (void *pvMem) { if (pvMem != NULL) free (pvMem); }; void *operator new[] (size_t s) { return malloc (s); }; void operator delete[] (void *pvMem) { if (pvMem != NULL) free (pvMem); }; char *lpBuffer; }; test &amp;amp; tt () { static test t; return t; } //test t; void process () { test tf; // _CrtDumpMemoryLeaks (); } int _tmain (int argc, _TCHAR * argv[]) { // test tf; test* tp=new test(); _CrtSetReportMode (_CRT_WARN, _CRTDBG_MODE_FILE); _CrtSetReportFile (_CRT_WARN, _CRTDBG_FILE_STDERR); _CrtSetDbgFlag (_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF); process (); // printf(&amp;quot;hello, world.</description>
    </item>
    
  </channel>
</rss>
