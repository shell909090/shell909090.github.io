<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Uncategorized on Shell&#39;s Home</title>
    <link>//blog.shell909090.org/tags/uncategorized/</link>
    <description>Recent content in Uncategorized on Shell&#39;s Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CC-BY-SA4.0</copyright>
    <lastBuildDate>Mon, 02 Feb 2015 11:43:54 +0800</lastBuildDate>
    
	<atom:link href="//blog.shell909090.org/tags/uncategorized/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>vpn不要走tcp协议</title>
      <link>//blog.shell909090.org/blog/archives/2722/</link>
      <pubDate>Mon, 02 Feb 2015 11:43:54 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2722/</guid>
      <description>和大家唠叨一件小事。
vpn不要走tcp协议。
我原本以为这是个常识。因为当网络发生丢包时，vpn的那个tcp会等到超时，然后重发。但是vpn里面封装的tcp链路多半也超时了，也要重发。所以一旦发生丢包，整个链路上就会突然一下子变拥堵了。
那么能不能调整链路超时重发机制呢？这个比较困难。链路的超时重发是靠RTT(round-trip time)来工作的，因此VPN的RTT一定小于里面所封装tcp的RTT。如果你的vpn工作在一根很好的链路上，而tcp链路的对端要通过一个延迟非常高的网络。那么vpn的重发对tcp链路的影响并不大。但是我看到的大部分情况下，vpn是穿越互联网(而且大多是跨国或者跨洲网络)的，而vpn的双端都落在内部网络里。因此vpn构成延迟主体。这时候，vpn的RTT和里面所封装tcp的RTT几乎相差无几，两者会几乎同时超时。
什么时候会发生丢包呢？最常见的理由是带宽跑满。当路由器来不及处理数据的时候，就只有丢包了。例如某出国网络丢包三成，这就是拥塞爆了。当然我们也不否认其他理由，例如无线，天生就是有丢包的。即便没有上述理由，有的时候就是运气不好，无理由的发生一下丢包，也完全不需要奇怪。
所以，在大部分网络上，丢包是常态。而丢包后，内外两层tcp同时超时会引起严重的重传问题。所以tcp协议不是特别适合做vpn。
结果某vpn居然被配置到了tcp模式，而且还不能改。。。郁闷啊。。。</description>
    </item>
    
    <item>
      <title>context切换测试——调用开销有关部分请求review</title>
      <link>//blog.shell909090.org/blog/archives/2690/</link>
      <pubDate>Thu, 30 Oct 2014 16:10:28 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2690/</guid>
      <description>函数调用开销 使用s_call来测试性能，循环1G次。
2.35,0.00,17,0,0,0,99% 2.34,0.00,13,0,0,0,99% 2.34,0.00,10,0,0,0,100% 2.35,0.00,10,0,0,0,99% 2.34,0.00,14,0,0,0,99% 2.34,0.00,6,0,0,0,99%  统计结果如下：
 time mean = 2.34 time var = 0.000022  每次call的开销为2.34ns，约7个指令周期。当然，这些并没有考虑调用压栈和数据返回。
内核调用开销 使用s_syscall来测试性能，循环1G次。这里特意选用了一个不可能失败的内核函数，getpid，来衡量每次进入getpid的开销。
4.37,0.00,76,0,0,0,99% 4.34,0.00,43,0,0,0,99% 4.37,0.00,124,0,0,0,99% 4.37,0.00,63,0,0,0,99% 4.36,0.00,48,0,0,0,99% 4.36,0.00,47,0,0,0,99%  统计结果如下：
 time mean = 4.36 time var = 0.00011  这里可以看到，纯粹的内核进入开销小到非常惊人，只有4.36ns，约合13个指令周期，而且这里还要进行数据的查询和返回。所以内核调用开销在下面的测试中全部忽略不计。</description>
    </item>
    
    <item>
      <title>送书</title>
      <link>//blog.shell909090.org/blog/archives/2678/</link>
      <pubDate>Thu, 04 Sep 2014 11:32:08 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2678/</guid>
      <description> 最近清理家中藏书，打算送掉一部分纸质书。于是顺手列了一批自己需要，但是可以外借的书。
送人的部分，如果你需要，两个月内联系我，自己想办法拿走（例如H4，或者直接上门）。逾期我就直接送去资源回收了。借阅的部分，记得好好保管图书，不管借阅多久，记得回头还我。
送人  delphi 5.0 开发多媒体应用 ISBN 7-5084-0470-X C++语言程序设计 ISBN 7-302-03926-7 计算机绘图 ISBN 7-313-01482-1/TP.273 borland C++ windows程序设计 ISBN 7-115-05265-4/TP.117 最新C++语言精华 ISBN 7-5053-3975-3/TP.1731 C++语言程序设计 ISBN 7-302-04504-6 C++使用手册 ISBN 7-5053-2890-5/TP.959 microsoft visual C++ .net技术内幕 ISBN 7-302-08931-0 操作系统教程 ISBN 7-04-012664-8  借阅  模式识别 ISBN 7-121-02647-3 深入解析Windows操作系统 ISBN 978-7-121-03969-0 计算机网络 ISBN 7-302-08977-9 深入浅出MFC ISBN 7-900614-93-1 Python源码解析 ISBN 978-7-121-06874-4 数据结构与算法（Java语言版） ISBN 7-111-11902-9 网络渗透技术 ISBN 7-121-01035-6 密码编码学与网络安全 ISBN 7-5053-9395-2 人工智能及其应用 ISBN 7-302-02127-9 神经网络原理 ISBN 7-111-12759-5  </description>
    </item>
    
    <item>
      <title>架构师</title>
      <link>//blog.shell909090.org/blog/archives/2669/</link>
      <pubDate>Wed, 13 Aug 2014 10:16:43 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2669/</guid>
      <description>一个好的架构师至少要做到四点：
 识别甚至提前预测到程序不同阶段的性能瓶颈，并以合理的代价消除。 识别束缚程序员生产力发展的瓶颈，并合理的消除。 解决组里面的尖端问题。 成为组员的精神支柱和旗帜。  他不应该：
 总结需求。这是产品经理的事，除非他兼任。 评估工作时间，并保证工作进度。这是项目经理的事，除非他兼任。 召集，协调工作细节。这个随企业有不同划分，理论上是行政领导干的。有的企业是技术系的来做行政领导，有的是PM。 亲自写程序。除了初创，架构师亲自冲上去写大段大段的程序是找死的先兆。 预测技术的发展方向，并做出技术决策。您让CTO干什么去？ 政治斗争。架构师也来搞这个，要么被搞死，要么根本没心思做事。  但是架构师应该理解办公室政治，并且能够基本掌握情况。一点办公室政治都不懂的架构师肯定被搞死。</description>
    </item>
    
    <item>
      <title>又是性能问题？扯淡</title>
      <link>//blog.shell909090.org/blog/archives/2655/</link>
      <pubDate>Wed, 02 Jul 2014 12:51:29 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2655/</guid>
      <description>http://www.donews.com/net/201406/2812175.shtm
为啥TMD说扯淡？扔掉支付宝，用户直接跑上来就能支撑的住了？多少用户就有多少量，不会随着用不用第三方平台减少的——除非这帮人不用电子支付改成线下付费。
如果说定时查询造成的问题。合作都合作了，查询量大不会改成回调么？查询是几次，回调是几次？这点技术上是个事么？早干嘛去了？
明显付费通就不想带支付宝玩了，以为这么搞能抢到用户。结果支付宝淡淡的来一句，没事，哥已经直接接到大部分商户上去了，用不着付费通。只有几家搞不定，哥不要了。祝你一路顺风，早死早投胎。
对了，补充一点。如果是正常公司，我觉得第一反应是限制调用速度。你丫调用过快要死死自己去。就算你拿着证据说我限制，我也可以说我们对每个商家的调用速度是有限制的没有错，你有什么问题么？——这是正常流氓。
所谓连脸皮都不要的流氓，就是不管你限不限制调用速度，我都不让你用了。非但不让你用，而且还声明，这是你的责任。
不要把TM政治问题扔到码农身上。谢绝扯淡，谢谢。</description>
    </item>
    
    <item>
      <title>核聚变？</title>
      <link>//blog.shell909090.org/blog/archives/2648/</link>
      <pubDate>Thu, 26 Jun 2014 13:34:41 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2648/</guid>
      <description> 最近看到一篇文章極限DIY之核融合反應爐。昨天和朋友吐了不少槽，我总结一下。
真实性 首先，我不会质疑这篇文章的真实性。因为如果要评价一个实验的话，最基础的，这个实验的基础原理必须公开以供复现。他的基础原理是什么？聚变反应方程是什么？是否能够复现？文章本身，一点细节都没说，发布者也不是什么国际知名单位。这种情况下，质疑这篇文章的真实性是徒劳的——因为你都不知道从哪里入手。
先说明一点。我对核物理完全一窍不通。如果以下有错误，请指出。
按照原料为重水，没有提到氚，我推测聚变是D-D反应。D-D是经典的聚变方程，但是其反应式有两个，产物分别是32He + 10n和31H + 11p，分别放出质子和中子。但是两者的反应条件，质量损失均有不同。
由于不知道聚变原理（作者说是电场陷阱，但是不知道如何产生的，强度多大），所以这个系统的基本特性无法评价——就算不要求输出大于输入，最起码输出/输入比，反应速率是必须的。而且正常来说，做了实验，最起码测试一下质子和中子强度。对比装置对质子和中子的吸收水平，推断原本的辐射强度，倒过来计算两个反应的反应速率。这应当是一个完整实验必须做的。
有了放射强度的测定（完善的还得计算测定精度），计算出来的反应速率，就可以推算出理论输出值。配合上输入值（这个计算需要了解作者的电场陷阱原理），大概就能推算出理论输入/输出比。然后对比实际的输入/输出比，能够对装置运作的基本情况给出一个评价。
是否因为知识产权保护所以封闭细节 他又没做到输出大于输入，有什么知识产权保护的必要呢？写成paper发才是正常的做法吧。
为什么这么罗嗦 因为科学的基础必须是严谨，可复现。
很多人以为万有引力就是牛顿头上砸了一个苹果，然后感慨自己为啥没这个运气。当然有不少人脑子还比较清楚，小时候脑袋上砸了不少东西也没想出什么来，改为感慨自己为啥没这个天分。其实苹果的故事最多只能作为传说而已。
万有引力的基石，是第谷(1546-1601)的海量天文学观测数据。有了这些观测数据，开普勒(1571-1630)的行星运动定律才站的住脚。有了开普勒的行星运动定律，万有引力(牛顿，1643-1727)才能作为一种学说被提出来，并且有机会得到验证。否则要凭借想象想到，物质间实际上是具有非常微弱但是强大的引力的——对人类的想像力实在是太大的挑战了。即便有人能想到，也绝无可能说服大多数的人。甚至有机会进入实证。
当然，万有引力最具说服力的支持，是卡文迪什(1731-1810)的引力常数测试实验。卡文迪什以那个年代近乎艺术性的测量精度，将这一量精确的测定了出来——顺带一提，即便在现代，万有引力常数的精确度依然是所有物理常数里面最差的。
所以呢？我想说什么？
高精度的定量测量，才是物理学的生命。物理学家毕竟不是在玩弄数学技巧，整出一个漂亮好看的方程，就完事了。
我在感慨什么 我不知道作者是天才还是民科。但是我看到无数人在那里叫好——你在叫好之前，难道就不知道简单看一下作者讲的细节么？他又不是没贴。
如果看了一下仍然叫好，我觉得纯属一点科学精神都没有了。上来就酸“怎么可能”，“你算老几”我觉得到也不必——毕竟作者也没有公布细节，就凭作者个人能力否定成果未免鲁莽。但是我绝对不认同，仅仅因为“精神可嘉”，就无视物理学基本精神，在没有技术支持和复现前，对一项实验大加赞赏。
我也顺带吐槽一下作者的文，说这是实验文不如说这是软文。通篇到头就在讲装置怎么难做，自己怎么困难。一没说基本原理，二没计算过程，三没测试数据，四没装置的设计制造图。说国外看到类似的设计，可是reference完全看不到。这些都算了——连装置的设计目的和输入输出功率都没有。你真的是在说技术么？
下面会发生什么 如果是正常情况，大概会有同行复现。能复现的发文说OK我复现了，不能的就开始联系和质疑。
以作者的名望，大概不会有学者认真的想去复现。不知道作者有没有意思主动联系同行做复现。如果有的话，同行复现一下结果就出来。如果没有的话，大概会变成主流学界不搭理，作者感慨自己受到冷遇，然后网友们就是就是两句——这样子。
参考  核聚变 第谷·布拉赫 约翰内斯·开普勒 亨利·卡文迪什 艾萨克·牛顿  </description>
    </item>
    
  </channel>
</rss>