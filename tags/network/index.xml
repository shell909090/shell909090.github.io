<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>network on Shell&#39;s Home</title>
    <link>//blog.shell909090.org/tags/network/</link>
    <description>Recent content in network on Shell&#39;s Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CC-BY-SA4.0</copyright>
    <lastBuildDate>Mon, 08 Apr 2013 11:18:57 +0800</lastBuildDate><atom:link href="//blog.shell909090.org/tags/network/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>什么叫做网桥</title>
      <link>//blog.shell909090.org/blog/archives/2362/</link>
      <pubDate>Mon, 08 Apr 2013 11:18:57 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2362/</guid>
      <description>下面简述的只是linux下的brctl创建出来的玩意，和网桥的学术定义什么的没有关系。
想像你有一块网卡，接上网线，OK，能上网了。
现在，你有一台物理的机器，和一台虚拟机，都需要上网。但是网卡和网线只有一块，怎么办？
如果你能够物理的触摸到虚拟机，你也许会这么干。
找一个交换机来，把物理设备的网卡用网线连接到上面，把虚拟机的网卡连接到上面，再把外网网线接上去，OK，齐活了。
brctl创立出来的网桥就是这么工作的。
你原本的物理网卡，例如eth0，我们直接为他分配IP，进行通讯。结构大概是这个样子的。
system -- eth0 -- network 接入网桥这个假的交换机后，eth0依然负责向外通讯，但是没有自己的IP了。网桥和宿主所在的机器的连接叫做br0（或者br1，以此类推）。
system -- br0 -- eth0 -- network 然后，我们可以为这个交换机接入很多的设备。
system -- br0 -- eth0 -- network | vethXX | virtual -- eth0 / 其中，eth0和vethXX是一对设备。一个在宿主里，一个在虚拟机里。互相连通。
所以，当虚拟机发生通讯时，eth0上可以看到数据流，但是br0上看不到。而如果虚拟机和宿主通讯时，eth0看不到数据流，br0上可以。</description>
    </item>
    
    <item>
      <title>2012年4月12日断网的技术记录</title>
      <link>//blog.shell909090.org/blog/archives/2142/</link>
      <pubDate>Mon, 16 Apr 2012 02:24:40 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2142/</guid>
      <description>4月12日上午, 大约北京时间10点(UTC02:00前后),
中国大部分地区发生了一次断网. 这次断网我有幸正好在使用网络, 因此跟踪调试了整个过程.
网络开始中断 当时我在公司里面用ssh调整一台国外的机器, 同时用另一台机器作为ssh跳板访问google. 问题发生的时候, 很多国外网站都无法打开, ssh指令不能工作. 我的第一反应就是, GFW针对ssh做了拦截.
鉴于其他可能, 我登录回了家中, 从家里的机器直接ssh到国外的跳板, 一切正常. 莫非只是我这里的ssh发生了断路? 我正在这么猜测的时候, 家里的ssh也随即断开. 我kill了当前进程, 重新连接后, 恢复了对家里服务器的控制, 但是境外的ssh跳板已经不能连接.
至此, 可以确定中国出国网络逐步发生中断, 针对什么协议, 机制如何尚不清楚.
但是, 我同时用同一台机器打开了openvpn, openvpn会提供一个内网接口.
我偶然的用这个内网iface访问了一下, 一切正常. 再尝试了一下, openvpn上网正常. 这说明问题可能局限在ssh上.
这不是一个个例, 这是大规模断网 既然我对境外服务器还有控制能力, 我就更换了一个ssh端口, 但是问题并没有解决. 这似乎说明封锁不是针对端口(port), 而是针对协议(protocol)的. 为了确证这点, 我对通讯过程做了抓包, 但是结果出乎我的意料. 问题并不出现在ssh握手的时候, 而是tcp第二步的syn-ack回包彻底消失. 这表明封锁并不针对ssh协议, 而是tcp协议栈!
这非常疯狂, 如果是这样的话, 大部分基于tcp的网络协议将无法工作, 包括境外大部分网站的http协议. 我从twitter上看到, 很多人的各种工具都相继失效, 并且境外很多的http(而非https)确实无法访问, 这和我的判断相一致. 这是针对tcp协议栈的大规模拦截.
为什么特殊 通常而言, GFW有三个常见工作模式.
dns污染
ip封锁
深度包过滤(关键字拦截)
其中dns封锁只对域名有效, ip封锁只对ip有效, 只有深度包过滤才是最麻烦的.
但是通常深度包过滤是使用旁路过滤的方式, 在连接出现问题时发出rst包干扰tcp工作. 而本次的模式是将境外向境内的tcp包直接丢弃, 而非rst.</description>
    </item>
    
    <item>
      <title>tcp连接的建立和释放</title>
      <link>//blog.shell909090.org/blog/archives/2074/</link>
      <pubDate>Sun, 29 Jan 2012 02:03:43 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2074/</guid>
      <description>大家新年好，新年第一博，我们来写一点干货。
建立tcp为什么是三次握手？
从两军问题说起太远了，三次握手的假定是一条双工线路的每个方向，要么持续通，要么持续不通。就好比一个电话，你和对方可以同时说话，所以是双工线路。你说了对方能听到，这叫单方向。单方向上，要么通，要么不通。
如果从一个不保证稳定的电话线上（例如移动电话，这是典型例子），你怎么确定你们通话是正常的？
假如你首先说“喂”，这时候你什么都不知道，对方能听到，他就知道你到他这里的电话是好的。他会说“喂，我听到了”。你听到了，会知道他到你这里的电话是好的。
事情结束了么？没有呢，他还不知道你能听到他讲的东西，所以你还要回“我听到了”，然后开始说正事。
回想一下自己打电话的经历，是不是往往漏掉了最后一个“我听到了”呢？这样会使得对方无法确认你能听到他说的东西。不过一般来说，当你开始滔滔不绝的时候，他会假定你听到了那句“喂，我听到了”。因为通常没有人会没听到对方的回应就开始说话说个不停。这个模式在tcp中也是可以做到的，在最后一个ack上附加数据。
为什么由发起方开始？因为我们必须要假定有一个方向开始，任意开始就需要处理碰撞问题（就是同时开始）。接通socket总是由发起方开始传输第一个包，你不觉得直接在这个包上面开始测试连通会比较合理一些么？
电话为什么由被叫方开始说话？因为主叫方打电话后，被叫方决定了电话什么时候接通。电话接通的时候，被叫直接就可以说话了（假如电话稳定的话），而主叫要等到下一个“嘟”不出现才能有所反应。所以通常都是被叫先开口。当然，也有被叫方接起电话来等着主叫说话的情况。
另外提一句，如果你使用手机拨打的话，当听到对方“喂，这里是XX，您好”之类的信息的时候，应当先说“喂，我是XX，您好”。等对方确认能听到了，再开口说正事。因为手机有不算太小的几率，双方都听不到，或者单方向听不到。如果不巧是后者，很容易引起不必要的误会和麻烦。例如你滔滔不绝的说，对方作为反应，说了几句。然后你什么都听不到，继续说。对方当然会生气，对不对？
OK，现在我们来说说挂电话。
tcp的fin机制，其实是要解决这么一个问题。当你说“再见”后，能够马上把电话放下么？
不行的，因为对方可能还有一些重要的事情还没说。你一说再见就挂断，这个会造成问题。从简单的思考上，我们会得出一个结论。当你说了“再见”后，对方可能还需要说一些事情。当对方也说了“再见”后，你就可以挂电话了。
可是且慢，对电话而言这个模型成立，我们得稍作修改才符合网络——当你挂下电话机后，对方不会出现忙音。于是，当你说再见，对方说再见，你必须再说一次再见，对方才能确定你听见了再见。而且这次，事情非常符合两军问题——你们永远也无法就什么时候挂机达成一致。这个问题再折衷回来，也是一个三次模型，对方说再见，你说完你要说的话，然后说再见，对方再见，挂机。
被动关闭上，这个模型基本是正确的。当你收到“再见”后，把你要说的事情说完，然后再见。这时候不能挂电话，因为你不确认对方听到你的“再见”了。如果你的“再见“对方没收到，那么对方会死等到天荒地老。至于为什么对方可以肯定你收到了他的再见，是因为刚刚你说的那堆废话里，应该已经包含了“我知道你要挂电话了，我会尽快说完”的意思。所以，你需要等对方的“再见”回来。
当然，在tcp的实现上说，所有对对方的回应，都在ack里面。所以是FIN FIN-ACK ACK，关闭。最后一个ACK前，叫做LAST ACK状态。如果ACK丢失，会造成被动方挂断有问题，因此这里需要一个超时机制。用电话术语来说，就是最后一个再见没听见，你就要等到天荒地老，因此当对方首次再见完成的时候，你说再见，如果一定的时间等对方的最后一个再见等不到，就别等了，直接挂机。这个时间比等不到对方任何消息而挂机，要来的短。tcp标准设定为两倍最大生存周期，即2MSL。当然，如果等到了最后一个ACK，就直接删除连接数据结构。
主动关闭的时候，情况会更加复杂一点。为什么？因为刚刚的超时机制。我们从你说再见之前开始说起，这次你是主动告别一方。
你首先说了一个再见，然后进入FIN_WAIT1状态，换成电话术语，就是等对方说再见。tcp机制上，对方的ACK先到，就是FIN_WAIT2。对方的FIN先到，就是CLOSING——这种情况不多见，只在双方同时想挂断的时候发生。如果对方的FIN-ACK一起发送，那就直接保送上TIMED_WAIT。无论是哪种先，最后会收到一个ACK和一个FIN，并且发送一个ACK。换成电话术语，就是你说了再见，对方一定会说知道了和再见，并且你会说知道了。差别在于tcp需要用多个状态来表示哪个事情先，哪个事情后，打电话就不要这么麻烦了。
最复杂的事情，在于说了最后一个再见之后。当你说完最后一个再见，就可以直接挂电话么？电话可以，但是作为tcp，却不可以。因为某些情况下，对方的FIN包没有到就会进入TIMED_WAIT状态。另外一些情况下，对方的LAST_ACK等不到你的ACK，会把他的FIN重发一遍。如果直接销毁连接结构，那么最后一个FIN包可能对新的连接造成干扰，而且会阻碍对方关闭连接。所以，作为主动挂断一方，你有一点很不利的是，无论如何，你必须等这个2MSL的时间。这个值在linux中一般是60s，更进一步可以查看rfc1337。
刚刚解说的最后一个情况，就是很多机器TIME_WAIT很高的原因——因为你的服务器主动关闭了连接。作为本质解决方案，你需要理解为什么会发生这件事情，服务器端关闭连接是否正常。如果正常，那么加一些内存，并且启用tcp_tw_recycle来减缓这个问题。注意，这个参数不应当在NAT后的机器上被启用。具体可以查看rfc1323。</description>
    </item>
    
    <item>
      <title>家庭网关，三网融合</title>
      <link>//blog.shell909090.org/blog/archives/2012/</link>
      <pubDate>Mon, 12 Dec 2011 10:24:48 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2012/</guid>
      <description>Sunny Sunny&amp;laquo;sunnyboyme@gmail.com&amp;raquo;:
要做一个关于home gateway的论文，讨论不同服务下的 Service Level Agreement （SLA），带宽，延时，数据包 schedule 策略 等等。不知大家有什么好的 想法/Question/Hypothesis，或者 以往的使用体验。
希望来个 头脑风暴，呵呵 ～～
shell:
我好像全都部署了，就是不整那么多名词而已，不知道你要干啥。
出口是光纤，20M下行/1M上行。路由器是dir-825，上面部署iptables arptables 还有tc。可以控制端口进出，还有控制机器的访问权。tc负责控制QoS。
后面主要是两台机器，一台atom，上面放2T硬盘，作为NAS/开发服务器/电视的长期支撑设备/家里的定时通知机器/闹钟/将来准备接个摄像头做更好玩的应用。
另一台amd x955 8G，两个人用。一个DVI连接显示器，一个HDMI连接电视，可以看看高清电影，开发也很舒服，一般开虚拟机干各种应用。
其余设备都走了网线或者无线，最近考虑装一个网络电话。
电视是三星的，上面集成了一个简单的android，就是app market是专用的，里面没有vnc/rdp客户端，否则我连atom都不需要登录就可以直接访问各种服务器了，更方便。
电话，电视，网络，全部走在了ethernet上面，不知道算不算三网融合。不过我吐槽过一篇文章，这年头不知道要电视和电话干吗用。给我视频网站和手机就能很high了。
在 11-12-11，Sunny Sunny&amp;laquo;sunnyboyme@gmail.com&amp;raquo; 写道：
哇咔咔,不错不错,可以拿来当模板用~~
不知道你的电视和电话走网路时候用的是什么协议?或者说,用的哪家公司的服务?
电视走网络(IPTV?)会带来巨大流量,相比普通电视/数字电视有什么优势?
在 2011年12月12日 上午9:16，Stone Zhang&amp;laquo;kelxzhang@gmail.com&amp;raquo;写道：
其实，我感觉三网融合现在最大的问题是，在三层没有连上的时候，如果可以打电话。
就是说，在断网时（就是物理连上，但拿不到IP
）普通用户如何能够打电话。 还是就是收费问题。
何必走专用协议呢？现在中国没有一家服务是大到可以称为标准协议的。
电话我还在考虑，用SIP还是skype。前者有很多现成的网关，也很容易和普通电话通话。后者看样子也不差。反正我手头有atom服务器，用skype长期开机也是没什么问题的。
电视更简单，直接上youku/tudou/verycd搜索就好。其实你本心的想一想，我们到底是为了解决问题而发明标准还是为了制造问题而发明标准？使用目前已经存在的服务能解决需求就好了。这些点播唯一的缺陷是还缺少一些连续播放的视频DJ/选材制作，我在吃饭的时候看节目往往还要自己挑。所以目前我吃饭的时候都在看电影，atom机器一天能下N部高清下来，就是我怕现在的导演们没那么多时间去拍。。。
视频走网络有什么好处？论广播能力，格式兼容性，不如RF。论节目，也比电视台差了很多。但是电视走网络胜在制式可以几乎无限上升，目前我看1024x768已经觉得不够清楚了。你觉得目前的IPTV，就算加上数字电视机顶盒，能够到多少分辨率？
至于电话问题，断网是极端情况。虽然网络比电话线不稳定，但是也不是天天断的。有网络用网络，没网络用手机。android加上sipdroid也可以当作sip客户端用。如果手机都走不了，那问题就不在三网融合的设计上了。
你可以想想，网络电话到底有什么优势？电话到底干吗用的？在我们业务类型大幅变化的时代，讨论如何将上个世纪的业务完全不差的照搬到网络时代真的有帮助么？我们真的需要在网络时代，等待一个前向兼容的标准么？实话说，这是中老年业务。我家里没有普通电话，外婆和岳母说要装一个，我和老婆都没什么兴趣。因为除了多交钱，没有任何帮助。要找我们，手机总能找到。手机找不到，电话也找不到。
传统认为，使用可以容忍的语音标准，提供持续而稳定的服务是电话服务的第一要素。实话说，在网络时代，这个可能要改为低成本，高可用性。网络（尤其是中国网络）已经把我们训练的很有抵抗力，对无法服务的系统基本可以接受，只要这个系统大部分时候能跑通。让我选择十年保证故障在1小时以内的普通电话服务，我宁可选择一年保证故障在五小时以内的网络电话服务，只要这个电话服务可以：
1.大部分时候打的通，比移动/联通打不通的机会低。
2.便宜，我可以和远程一聊数小时，甚至干脆保持一两天不断线。
3.功能集成，例如视频电话？多人电话？
为什么不选择后者呢？我正在准备把老婆家里的设备做一下定制，让她的电脑可以很方便的视频保持和我服务器的连接。这样岳母可以通过她家里的电脑和我这里保持持续通讯几个小时，甚至可以一边吃饭一边聊天，双方还能互相可见——免费。我不觉得普通电话业务能够提供这种优势，更不提昂贵的话费。
另一个例子是我一个朋友，也在shlug里面。他十月去日本，带的是一台iTouch。在日本可以很容易的连上wifi，速度还很快。通过skype打电话回家，价格便宜服务稳定。如果是我，我更希望带一个3G设备，直接用当地的3G接入保持持续通讯。你觉得带传统手机出国然后办理套餐需要多少手续和多少钱？这是一个移动电话被网络服务比下去的例子。也许有人说中国的网络没这么好——好吧，看看五年前的网络，看看今天的，想想看五年后，这个论点还有没有优势。
同样，在网络时代抱着电视不放也将会是种无谋。目前网络视频还是替换不了普通电视，不过这天总会来的。</description>
    </item>
    
    <item>
      <title>拨号的几个简化</title>
      <link>//blog.shell909090.org/blog/archives/2004/</link>
      <pubDate>Tue, 06 Dec 2011 11:41:59 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2004/</guid>
      <description>1.pptp client
安装pptp-linux，使用pptpsetup，按照man来。使用pon configname启动，poff关闭，plog看日志。
2.3g网卡拨号
应当使用usb_modeswitch进行编码转换，然后用wvdial拨号。MF190而言，至少我这里modeswitch会自动转换的。后者直接编辑/etc/wvdial.conf，然后输入wvdial开始拨号。wvdial有个包装叫做gnome-ppp，依赖很少，在其他桌面也可以用。我还没有研究出来怎么玩。
附，MF190使用的usb_modeswitch配置（debian自带）:
######################################################## # ZTE devices DefaultVendor= 0x19d2 DefaultProduct= 0x2000 TargetVendor= 0x19d2 TargetProductList=&amp;quot;0001,0002,0015,0016,0017,0031,0037,0052,0055,0063,0064,0066,0091,0108,0117,0128,2002&amp;quot; MessageContent=&amp;quot;5553424312345678000000000000061e000000000000000000000000000000&amp;quot; MessageContent2=&amp;quot;5553424312345679000000000000061b000000020000000000000000000000&amp;quot; MessageContent3=&amp;quot;55534243123456702000000080000c85010101180101010101000000000000&amp;quot; NeedResponse=1 CheckSuccess=20 附，MF190可用的wvdial.conf:
[Dialer Defaults] Modem = /dev/ttyUSB2 Init1 = ATZ Init3 = ATE0V1 Init5 = ATS0=0 Init6 = AT+CGDCONT=1,&amp;quot;IP&amp;quot;,&amp;quot;uninet&amp;quot; Init7 = AT+CFUN=1 Modem Type = USB Modem Baud = 460800 New PPPD = yes ISDN = 0 Phone = *99# Password = any Username = any Stupid Mode = 1 3.</description>
    </item>
    
    <item>
      <title>python conf 2011无线组网总结和分享</title>
      <link>//blog.shell909090.org/blog/archives/2002/</link>
      <pubDate>Mon, 05 Dec 2011 10:44:38 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2002/</guid>
      <description>这次python conf 2011结束了，具体成败sting去总结。我主要负责网络部分，把网络部分的总结一下吧。总体来说，网络不算成功也不算失败。在现有条件下，资源没有都发挥出来。但是万幸的是，关键部分还没有掉链子。下面是具体总结。
1.没在场地里面拉好线并且实地测定过所有地点信号的不算部署完毕。
这次的会场平时不允许进入，只能在工作日去，所以只能在会议前一天跑现场。而且进入时没有长网线，墙壁上也没有网线接口。因此是会议前一天先根据具体环境完成了设定，支支下午去买了线，第二天早上部署的。这留下一个严重隐患，我把设备间当成了贵宾室，凭经验估计信号覆盖范围的时候出了错，信号没有覆盖到贵宾室，而且没有考虑门口。第一天的嘉宾和志愿者们，是否感觉信号像渣一样（尤其是杨毅涛）。其实这主要就是因为根本没有考虑到信号覆盖的问题所致的。
要解决这个问题，必须先知道会场结构，包括贵宾室，设备间，签到处等等重要但是部署时又不容易想起来的地方。然后估算需要多少个多强的AP才能覆盖。例如本次的贵宾室，最佳方案是拉40米网线到贵宾室，然后再架一个AP。会场往往没有线，需要自带网线。因此最好是有人知道会场大致结构（手绘亦可，但是标注一下承重墙），然后计算AP位置和网线长度，再去购买。或者直接买一箱网线，配上水晶头打线剪自己做。会议前至少一天去部署，用android测试每个点的信号强度，最好都达到-70db以上。完成后把电线和网线都用胶带封在地上，以防绊倒。
2.足够的AP和信号。
在估算AP和信号的时候，这次经验是，多一个天线，信号强10db。支支的三天线AP信号明显强于我的双天线AP。AP的信号是和距离的立方成反比的，一个AP保证20-30米的无阻挡会场是没问题的。但是每穿一道墙，信号就会下降大约20db。低于-70db就开始出现大量掉包了，-80db的时候tcp重传严重，导致基本无法使用。
一个AP可以接入的客户端是有限的，按照我看下来，大约在50上下（TP-LINK）。这个和事先估计一致。本来我想用6个AP，但是很难凑够这么多，而且带宽不足，就没借这么多。预定就是需要一些人没有设备或者接不上去的，否则就是所有人都不能顺利上网了。结果有一个AP在连接10个设备后就会崩溃，所以等于无法容纳用户。大部分用户都拥挤在同一个AP上，导致踢掉非常严重。会场峰值时刻，300人，有120个设备试图获得IP或者已经获得成功，但是AP在线只有20/50（AP1/AP2），即40%左右的设备被踢掉或者自动断开了Wifi（部分手机为了省电会发生这样的事情）。如果三个AP完好，120人在线刚刚好支撑的起来（20/50/50），但是这样的话连线设备可能还要多一些。
下次部署的时候，除了要考虑信号覆盖问题，还要考虑预留一些AP作为备用。因为会场AP都是民用过去支持，这些设备以前也没有做过大容量测试。我只能说TP-LINK的两台机器很给力，说到50就到50，多了就不能支撑，但是不死机。有台机器就频频死机，这样就需要备机更换。
另外，我们这次最高三个AP，因此分别设定为1/6/11频道就行了。如果AP还要多，请注意让同样频段的设备分到会场的远端。
3.世界真的很麻烦，有的时候有位置却没有电源。
这次电源还算给力，从墙上引出了不少拖线板，基本满足组委需求。至于普通听众就抱歉了，自带拖线板坐到边上的，互相交错给便携设备还能充个电。中间听众只有依靠地接。偏偏地接基本都拉给了组委的摄像机，周围一圈的人可以沾沾摄像机拖线板的光，其他人就只能相信电池续航了。
我们的AP3，第二天搬到了贵宾室那个方向。反正上面只能接不到10个人，给贵宾室小规模用用还可以。结果线只有30米，拉不到贵宾室。合适的位置又没有电源。只好委屈在后门口接了一下，把贵宾室的信号提高了不到10db。
据说有的会场更恶心，只有一两个电源接口。这种会场就必须带够插线板和移动设备来保证电力。
3.留出会议运营所需资源。
这次还算成功的一点，是为大会组委和志愿者/嘉宾保留了一路AP。大会的签到系统，嘉宾演讲都需要Wifi支持，为了让听众上网导致演讲失败就本末倒置了。为嘉宾保留的是AP1，上面还有一些比较活跃，或者着急使用网络的普通听众，一般大约20人左右，相对比较空。可是这个AP又不敢开放给听众使用，一使用就怕嘉宾没法演讲了。
wifi管理者比较怕的问题，主要就是有人使用wifi下载比较大的内容。因此开始的时候，会议需要网络的时候，我都用平板监控网络使用状况。如果有人正在使用大流量，就准备踢人。幸好，大家都很安分（或者是AP上不来）。后来也就放松警惕了，结果老外演讲的时候延迟很厉害，我差点就跑去拔掉AP2的电源了。这会断开所有人的网络，但是演讲者的使用就通畅了。
按照雨苍说的，组委wifi组一个重要任务往往就是封锁各个debian/ubuntu镜像的下载。我们这次没有出现这么恶劣的问题，谢天谢地。
4.会场的网络使用有非常强的峰值效应
这次会议只有2M带宽，因此我一直担心不够。后来开始看看还不错。但是休息的时候一直接到wifi很慢的投诉，空下来一直测不出。我第二天休息的时候去测试了一下，我的天，带宽全满，延时超高。说明演讲者水准很不错，大家专心听会，不怎么用网络。一休息，得，网络不够了。
这个没法解决，要解决只有增加带宽，或者在不休息的时候再使用一些比较耗费流量的业务。一个缓解的办法是使用qos系统，但是这次dir-825没有前往会场，所以没机会调试qos系统。
相对来说，路由器的NAT让我很放心。TP-LINK普通路由器的NAT在支撑80-90人的极限在线的时候仍然很稳健，速度不快是带宽问题，路由器没有崩溃就是万幸。
5.根据具体情况配置。
WEP比较节约资源，所以我们开始配置的是WEP信号。但是测试下来，苹果系统对WEP的支持非常差，基本接不上去。所以就不要节约了，使用WPA/WPA2。
运营商的接入情况比较多变，而且很难控制。这次运营商给我们的是一个内网IP，192.168.1.2。他们已经有了一个路由器在前面。我使用了双重NAT方案，而且避开192.168.1.x网段，来避免修改它们的路由器（我们无权控制）。
这次我们使用的是192.168.0.1/24网段，三台AP的连接模式是一主多桥。一个主router负责DHCP和NAT，其余的全部当单纯的AP使用。从1到3分别分配0.1-3的IP，2/3的DHCP关闭，1的DHCP从20开始分配起，直到254，共计最高容纳234人在线。20以前的IP让组委的人作为静态IP预留。如果还要多，建议使用192.168.2.0/23网段，最高可以容纳500人不到，足够大部分的会展使用。如果再不够——你们考虑10网段吧。
最后的经验总结。
1.会前勘察真的很重要，尤其是会场平面结构，承重墙位置，会场部署，电源插座位置，一定要提前至少三天确认。提前一天的时候要配好所有AP，备件和网线到会场部署，然后测试信号。
2.会场带宽一定要大，万一实在不够大，想办法ban掉debian/ubuntu的镜像，然后做qos或者squid。
3.自带足够材料，如果没有胶带/接线板/剪刀，那很多事情就要抓瞎。
4.据说TP-LINK之类的路由器在人数多到一定程度的时候会自爆，推荐使用高级设备或者电脑来做NAT/DHCP。不过我至少肯定100人的时候还没问题。</description>
    </item>
    
    <item>
      <title>合用两个路由器的几种方案</title>
      <link>//blog.shell909090.org/blog/archives/1917/</link>
      <pubDate>Mon, 26 Sep 2011 12:03:30 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1917/</guid>
      <description>为什么用两个路由器？最常见的理由是延长信号。在超级大的场地中，中间放一个路由器，用四根线连接到周围的几个路由器上面，信号覆盖整个场地。这是最常见的理由。也有可能是因为你的主路由器LAN接口不足了。当然，也可能是因为蛋疼，或者其他原因。不论如何，为了在多个路由器上达到同时上网的目的，你有以下几个选项。桥接模式，路由模式，双层NAT模式。
我先解说一下一些基础的环境。我假定你有一个互联网线，有一个路由器的WAN口接到了互联网上面，这个路由器称为M。其他路由器分别称为S1,S2&amp;hellip;。直接连接到M的LAN口的电脑称为ML1,ML2&amp;hellip;，通过无线连接的就称为MW1,MW1&amp;hellip;。同样，连接到路由器S1的LAN和无线的分别叫做S1L1,S1W1，类推。
1.桥接模式
这是你第一个应当尝试的模式，连接方法是路由器S1的LAN口直接连接路由器M的LAN口。这个模式不一定能够配通，原因是因为要求路由器S必须支持桥接模式。基于某些理由，很多路由器并不支持桥接。一般来说，有可能LAN口支持桥接而WIFI不支持。因此S1L1支持桥接成功的概率比S1W1支持桥接成功的概率高。如果你需要一台支持桥接的路由器，TP-LINK的TL-WR*系列路由器好像大多支持。希望大家补充哪款路由器支持桥接或者不支持。
桥接是将路由器S完全的作为一个交换机使用，所以你的ML1和S1L1在同一个网段，两者可以互相ping通，发送各种包，也可以看到对方的广播。这种模式一旦连接成功，连接模式是透明的。因此，应当关闭DHCP，只启用一台路由器的DHCP功能。或者最好手工分配IP。
严格来说，只有S是一个无线路由的时候，这个模式才叫做桥接。如果只做有线连接，这个模式应当叫做交换模式。
2.路由模式
路由模式，是一个比桥接复杂，效果好，但是用途相对比较窄的方案。接法是路由器S1的WAN口连接路由器M的LAN口，并且为S手工指定IP，再关闭S的NAT功能。M的网段和S的网段必须不为同一个网段，例如M配置为192.168.0.0/24网段，S配置为192.168.1.0/24网段。S的WAN口手工指定为192.168.0.2。然后在M1上配置人工路由，将192.168.1.0的所有包交由路由器192.168.0.2处理。并在S1上配置默认路由为192.168.0.1(M的地址)。
这个模式是将路由器S和M作为路由器使用。当S1L1发送包时，会被S1转发到M去处理。而M收到要发送给S1L1的包时，会交由S1处理。这一模式能够工作的基础是你能够控制M的路由表，并且S可以关闭NAT。通常情况下，这个S最好是OpenWRT/DDWRT。这也是为什么用途比较窄的原因，毕竟支持桥接的路由器好找，OpenWRT/DDWRT就相对小众了。
当这个模式连接完成后，ML1和S1L1在不同网段，但是两者可以互相ping通，发送各种包，却无法看到对方的广播。因此这种模式的效果比桥接好一些，因为地址范围更大，而且很容易隔离广播风暴。这种模式一旦连接成功，连接模式是透明的。
3.双层NAT模式
如果上两种模式都不工作，你就必须使用双层NAT模式。这种模式保证一定工作，但是在使用上比较麻烦，需要用户自行计算访问规则。
接法是路由器S1的WAN口连接路由器M的LAN口，并且将S配置为DHCP。M的网段和S的网段必须不为同一个网段，例如M配置为192.168.0.0/24网段，S配置为192.168.1.0/24网段。
S的数据包会被NAT两次再发到互联网上，要进行端口转发也必须配置两次。性能相对比较差，而且无法做NAT穿透。
当这个模式连接完成后，ML1和S1L1在不同网段，S1L1可以ping通ML1，但是反过来不行。因此，S1L1可以主动连接上ML1，而反过来不行。这种模式不是透明的，两者进行连接时必须考虑网络转换和端口转发。</description>
    </item>
    
    <item>
      <title>悲崔的六类线</title>
      <link>//blog.shell909090.org/blog/archives/1913/</link>
      <pubDate>Wed, 21 Sep 2011 15:39:45 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1913/</guid>
      <description>大家知道，贝壳家里用的是千兆交换机对吧？最近贝壳在装修（好吧，回头看情况，也许有装修手册出来），所以——布线的时候打算用六类线。
先普及一下常识，六类线和超五类的区别在哪里？
百兆网使用的是五类和超五类线，最大长度100m，接线规范使用EIA-768B，实际使用1236四根线进行通讯，频率100MHz。考虑双工后，可以在整根线上提供100Mbps的速率。而千兆网使用六类线，接线规范也是EIA-768B，但是实际使用了12364578全部接线（所以六类线必须全部连通，否则掉速，不要用五类的经验想当然）。频率250MHz，在整根线上可以提供1000Mbps的速率（别看我，我也觉得有点问题，资料来源wikiCAT-5CAT-6）。
为了在中间没有四根地线作为缓冲的情况下支持高速的数据传输，六类线通常使用22-23AWG的铜芯制作。尽管标准上允许24AWG的六类线出现，但是这通常是不堪使用的。而五类线和超五类大部分都是24AWG的线芯，粗细是0.51mm。23AWG线芯粗细0.57mm，22AWG粗细0.64mm。而为了隔离串扰，六类线中心通常有旋转的十字龙骨，将四对缠绕线分割在四个区域，防止电容效应干扰。
OK，有了基础常识，我们可以讲一下京东的问题了。他们提供的线问题其实很简单。有一箱线在中间有部分区域十字龙骨缺失。
如果我买的是普通线就算了，5元多一米的秋叶原线，在京东这种商城，居然会在中心位置龙骨缺失。我很怀疑我埋下去的另一箱是否也有类似问题呢。
更郁闷的是，我打给京东，他们的客服不道歉就算了，也没个活人出面解释一下这个是什么问题。就只有“你可以退货阿”，“你这样就可以退货拉”，的提示。退退退退你妹阿，尼玛另一根线回头出了问题我得重新埋线呐。更可气的是有个客服脑子堪比芙蓉姐姐，给我一个厂家电话，让我打给厂家。我说如果厂家不予解决呢？她说，你可以再打4006065500转3。我说那不就是你们的电话么？她说，你可以再打4006065500转3。我说是不是再打到你们这里？她说，你可以再打4006065500转3。。。尼玛你是鹦鹉阿，直接说再打我们电话不就完了么。再说了，你给我的方案就是打给厂家，厂家不解决，再打给你，你再咋办？哦，对了，这时候就不是你办了。真是好办法。
可见在天朝这种地方，产品质量是完全不用关心的，有退货就是最大的慈悲了。至于产品造成了后果，赔偿什么的。售后经理笑脸迎人，可以阿，有检验结果我们就赔。问题是TMD国家质检中心不给力阿，不但价格贵，而且很多事情根本不检。你不信在07年拿瓶三聚氰胺奶过去，就算清清楚楚的告诉他们有什么问题，得到的答复还是——抱歉，我们没这个检验项目。再说检验通过，厂家立刻变脸，抱歉，这个我们有规定，只能赔偿多少。然后你只能进行漫长的“调解-仲裁-一审-二审”过程。厂家有的是时间精力，不怕玩不残你。就算你侥幸通过，终于能获得赔偿，听上去天价的赔偿还不够你的时间成本。更不谈有些事情，损失十多万，按国家规定赔偿只有不足千元——“因为国家就是这么规定的”。</description>
    </item>
    
    <item>
      <title>再论openvpn的搭建</title>
      <link>//blog.shell909090.org/blog/archives/1797/</link>
      <pubDate>Thu, 12 May 2011 10:22:55 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1797/</guid>
      <description>从概念上说，openvpn类似于一根网线，或者一台交换机。你拨上vpn，差不多相当于给自己的机器装一个虚拟的网卡，从上面拉一根线到服务器的虚拟网卡上。所以，vpn的配置大概和网络配置差不多，分为几个大类。
一类是第二层交换，即虚拟网卡和真实网卡组成网桥。这样可以把虚拟网络上的设备引入真实网络，让虚拟网卡获得真实网络的地址，或者反之。坏处是配置复杂，稳定性差。
例如你家里是192.168.0.0/24网络段，你决定用tap配置一个网桥，就需要新建一个br0设备，将eth0和tap0设备加入网桥。这样，一台IP为192.168.0.10的家庭机器，在访问IP为192.168.0.110的远程机器的时候，所发出的ARP请求会被转发到远端，然后ARP响应转发到本地。通过这种方式，10就会直接把MAC报文发送到中转机上，然后再转发远端。可以看出，由于ARP请求往来非常费时，在子网内机器多的时候，会消耗不少时间和带宽进行ARP转包，以及各种链路级开销。所以通常除了两个安全封闭子网因为管理理由必须这么玩，并且两者间又都有服务器和高速链接的时候，其他时候我不推荐这种玩法。
更何况，在debian系统下配置网桥需要额外脚本，不如路由那样，可以使用默认脚本启动，然后动态修改路由表。
大部分是三层交换，即将服务器作为路由器使用。这又分为两种情况，网络地址转换，和网关互通。
网络地址转换是最常见的情况，这个又叫做NAT。网关在转发你的包的同时，会将地址转换成自己的地址。从而避免修改路由的行为。
同样是192.168.0.0/24举例，远程网络假如叫做192.168.1.0/24。当你拨号上远程网络时，你就拥有了一个远程IP和一个本地IP。你可以配置路由表，让哪些IP从远程走（这就是地址段选择翻墙的原理）。大多数情况下，会被配置为默认都从远程IP走，除了几个特定地址（例如VPN服务器地址，这个也走虚拟网络会引起循环的）。而远程的网关，假定是192.168.1.1，开启了NAT。这时候你的所有网络流量就都从远程的VPN服务器上发出和接收了，如同你正坐在远程服务器后面的小网络内一样。
网关互通是更复杂的一类情况，通常是小型企业为了多个连通多个地点办公子网而设计的。理论上说大型企业也适用，但是大型企业有钱，IT部为了防范责任问题，通常会直接采购Cisco之类大公司的产品直接使用。基本概念是将虚拟网络和真实网络配置成两个子网，两个子网可以互相访问。
还是192.168.0.0的例子，我们假定另外有一个子网叫做192.168.1.0/24。现在我们需要连通两个子网，或者，更进一步，多个子网。
我们首先配置一个虚拟子网叫做192.168.254.0，然后架设一台共用服务器。这是比较简单的模型。更复杂的可以将其中一个子网的某个服务器映射出去作为核心，配置就更加复杂，不过可以依照同样原理推导。架设好共用服务器后，我们需要在每个子网的网关上下手，否则就无法做到透明路由。修改这个网关的路由表，将192.168.0.0/16全部转发到虚拟网关（即共用服务器的虚拟IP）上去（当然，除去本网段不转发）。在OpenVPN上面可以配置，当某条链路拨接上来后，就在服务器上加入一条路由，将其后面的网段加入网关路由表。于是，当192.168.0.100的某台服务器希望直接访问192.168.1.100。首先这台主机会检查自己的路由表，发现这个需要由网关192.168.0.1转发，就先转到了192.168.0.1。192.168.0.1检查路由表，发现192.168.1.100需要被转发到虚拟网关，即192.168.254.1。于是通过虚拟网络，该网关做出转发。当192.168.254.1接收到后，他会依照上面的路由表，检查到这条链路是否已经拨接上来，拨接上的话对应的虚拟IP是多少，然后转发过去。最后是目标网关，192.168.1.1，转发给192.168.1.100的过程。整个过程复杂无比，不过实现起来都是自动化的。
在配置文件中，有ca certkey三项，这三项分别对应不同作用。cert和key是用于向客户端验证服务器身份的。客户端那里有一个ca.crt，服务器这里的cert和key必须是那个ca.crt签署过的。这样，客户端就可以验证服务器是否是可信任的。而服务器这里的ca则是验证客户端身份的，客户端那里同样也有cert和key，必须由服务器端的ca.crt签署过。通常，我们用同一套ca.key签署两个cert，分别部署在服务器端和客户端，就可以工作了。
另外一点需要注意的是，ns-cert-typeserver这个参数。在debian的默认系统中有这个参数，一旦指定，openvpn就会检验服务器证书上是否有server的选项。对于easy-rsa签署的证书，这个肯定是有的。但是如果自己用openssl签署，就要记得做ext，否则检验不通过会报错。</description>
    </item>
    
    <item>
      <title>新时代新媒体</title>
      <link>//blog.shell909090.org/blog/archives/137/</link>
      <pubDate>Mon, 30 Aug 2010 11:56:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/137/</guid>
      <description>刚刚在看美国高法要案中的水门案件，说到尼克松败于肯尼迪，其实很大成分是输在了新出现的电视辩论前面。乍然想起，其实我们也处于一个新传媒开始的年代。网络传媒正在很大程度上的改变和补充我们获得信息的方式。
网络作为传媒的特性，不必多说，有无数引论论证网络的特殊性。互联网络最主要的几个特性有，即时性，广泛性，非中心特性。当然，针对中国传媒，还有非审查性，这个特征针对其他传媒并不明显。
所谓即时性，即信息在网络上的传播速度非常快。在报纸时代，我们传递一条消息的时间大约是一天。报纸需要用一天时间来完成信息采集到发行传递到个人手中的过程，这在当时已经是惊人的进步。电视时代，大约是4-6小时，一次新闻的采集编排和合适的发送过程大约需要这么长时间。而网络时代，尤其是准设备（手机，便携网络设备）的大规模普及，使得事件出现到信息传递完成大约只需要2分钟。911，最早的网络信息传递时间据说是15分钟。汶川地震，发生到贝壳得知（由于没有震感，所以当时没发现）总共用了6分钟。国外有漫画笑称，twitter上地震消息传播的比地震波还快（地震波的速度并不快），但是推友们看到地震消息的第一反应是回推。其效率增长了240倍，很多基于原定系统和环境的传媒策略就需要作出相应调整。例如克林顿丑闻，就是由网络媒体率先公开，并炒大的。
所谓广泛性，是网络传媒的一大标志性特征。网络上，我们认识很多我们一生中原本无法认识的人，这些人的具体身份信息根本无法得知，其分布也非常广泛。当我们发送或转发一个信息的时候，按照原本的途径，只有我们熟悉的人可以得知。逐级传播到最后，被新闻媒体得知，才公示天下。其传播途径就好象一滴墨水滴入水中，会逐步的渲染开。然而，我们切断新闻媒体，对个体实施控制，是可以有效的抑制信息的传播的。但是网络时代，我们的信息会传播到不特定位置，不特定身份的人，好象奶酪中的空洞，看似微小，却无处不在。这带来两大特性，控制信息的传播非常困难，和信息在不同环境中的传播有了交换。后者更通俗点，举例来说，原本只有汽车工人知晓并关心的问题，完全可能引发全国争议。
所谓非中心特性，则更为特殊。通常我们的讨论，是基于少数几个点的。针对某个问题，你的言论只有几个朋友亲戚知晓。如果你要让更多人知晓你的言论，则必须通过电视台，报纸的栏目回馈，让栏目主持看到，再由主持摘选“观众来信”。于是全部的讨论都基于几个特定点。这样的讨论当然不可能让所有人发表意见，更没有机会让不同民众接触持异议者的意见，从而造成持不同意见的民众缺乏沟通。网络的特性使得针对某个问题的讨论不局限于几个官方的论坛，更可以自行组织论坛，乃至在无关综合论坛上发表意见。由于来自各个行业的人充分发表意见，因此容易汇集不同观点，形成折衷。
例如09年杭州的欺实马案，针对被告是否适用“以危险方法危害公共安全罪”，就有两个不同意见。一方认为被告行为性质严重态度恶劣，以一般“交通肇事罪”审判不足以平民愤，而且不足以对其他潜在犯罪者形成警告。认为应当对被告判以“以危险方法危害公共安全罪”。另一方认为“以危险方法危害公共安全罪”，仅适用于特定情况下的特定人。检察院必须证明被告当时有“危害公共安全的主管故意”，否则容易扩大执法，造成其他案件的执法随意。建议该案件以“交通肇事罪”判处，并进行人大立法。双方的观点都有一定根据和理由，这种情况正是最适合非中心讨论的情况。
在网络传媒时代，以前我们所用的一些传播控制途径，例如新闻管制，禁止讨论，都很难实施。现在网络越来越容易进行端对端加密通讯，因此多个人的私密讨论，越来越难以禁止。这些技术原本被美国视为国家机密，可见其安全程度绝非轻易可以破解。而网络时代惊人的传播速度更是使得新闻管理缺少了执行的空间。往往是一条新闻，审查机构还没到手，全国都有人知道了。这时即使切断传播，最多也只能禁止后续消息的传递。原本已经知道的人通过面对面相互传递已经无法阻止，而且足以将新闻扩大到相当水准。很多本来能够掩盖的事情，就是在这种情况下弄到不得不公开的地步的。
如何管理网络，成了越来越多政府的一个心病。美国社会有广泛的言论自由，因此很难通过什么网络新闻禁令来进行管理。因此美国网络的大头问题是诽谤和版权问题。而中国对新闻传播有管制，因此如何继续管制网络是个很头大的问题。其中比较有成效的几个方案是GFW，责任制和五毛。
GFW是国家防火墙的简称，其方案是通过国家建立的网络自动审查系统防止民众访问国外网站。当然，前提是打着反色情反盗版的旗号的。责任制是针对国内的，对不听话的论坛，切断其服务器访问，并追究登记人责任。实话说这两个方案效果还是不错的，然而网络的特性并不容易受到压抑。如果这种方案继续下去，估计中国就会有组织开始做分布式互联网了。技术上说，一个服务器所能提供的所有服务和所需要的所有资源，可以分布到数百乃至数万用户的电脑中。这时除非断开整个网络或者删除所有人电脑中的数据，否则无法清除和控制信息。
五毛是一个更好的思路，其原理是根据互联网的广泛性特性，你不可能查证每个人的信息。因此利用大量被收买的人，在网络上发布各种信息，扰乱正常信息的传递。然而现在兴起的SNS和基于SNS的系统是这种方案的最大克星。SNS系统的核心是人和人的关系，或者说，一般我只信任我认识的人。对于刚认识的人，我可以作为朋友交流，然而未必信任。这样，当五毛发挥作用，发出虚假信息时。接收信息的每个人，会评判他的信息有效程度。显然，五毛的信息有效程度是非常低的，一次两次可以生效，然而多来几次就导致接受者均快速断开关系，虚假信息传不出去。以开心网为例，在上面发表强国强军之类的帖子还有大量转贴。然而针对某个特定事件进行恫吓，发表虚假声明根本无人理会。
因此，五毛实际上会转变成一个更复杂的东西――新闻操纵和传媒操纵技术。就是现在网络上俗称的推手。通过分析观众观点，组织合适的人写文章引导观众论点，从而营造言论。然而实话说，这种东西的效果和会造成的影响就小了很多。一个言论要能被引导，首先要有一定的言论市场。跑上去说欺实马无罪的人结局多数是被骂一顿然后丢出去。其次，言论诱导的有效程度是和民众受教育的程度成反比的。受教育越多，我们越能够分辨新闻引导。
然而不得不说，网络新闻能取得的效果和民众的素质有很大的关系。中国网民的一大特点就是平均受教育程度低，知识和素质明显不足。例如，在国外综合论坛上不是看不到骂人，但是相对少，而且一旦讨论过激都有管理员出来阻止。中国论坛上不但骂人语言满天飞，而且半天不见管理员，整个骂人帖就悬尸版顶，大家口水来去。其次，讨论方法经常落入诡辩范畴，不但动辄喊口号，拿政治策略逼对方闭嘴。而且经常出现质疑对方动机的情况。这简直不叫辩论，叫打架。
我们站在历史和历史的边缘上，搞不好一翻身就进教科书了。这时候的话，还是得小心点说。</description>
    </item>
    
    <item>
      <title>网络性能测试和标准</title>
      <link>//blog.shell909090.org/blog/archives/324/</link>
      <pubDate>Sat, 30 Sep 2006 22:46:28 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/324/</guid>
      <description>前两天弄有线通的事情弄的郁闷了，所以就研究了网络性能测试。以后不用也是浪费，大家需要就看看吧。
1.目标
测试目的往往是测试清楚几个值，包括:IP包传输往返时延(RTT)，IP包时延变化(抖动)，IP包丢失率(Lost rate)，IP业务可用性，还有带宽(Bandwidth)。
2.适用标准
RFC 1242， RFC1944， RFC2285， RFC2432。
** 中华人民共和国信息产业部令第36号(http://www.chinanetcom.com.cn/mj/dxsc.asp?Unid=3810)
** IP网络技术要求&amp;ndash; 网络性能参数与指标(YD/T 1171-2001)
3.测试平台和工具
我们假定基于POSIX兼容平台测试，演示用的例子来自Debian Etch/Kernel 2.6.17-2-686。Windows下所需要工具可以参考移植工具。
iperf 网络带宽测试工具
paratrace 被动路由测试工具
hping2 网络联通和时延测试工具
wireshark(ethereal) 抓包分析工具
p0f 被动指纹分析工具
4.测试对象，方法，和结果分析
以下为实例测试，参数需要根据具体情况变化。
4.1.测试网络带宽
在服务器端运行iperf -s。
在客户端运行iperf -c 192.168.0.2
100Mbps网络环境下，得到结果为92.6Mbps，折合为11.5MB/s。即数据极限传输速度。
4.2.测试网络IP包传输往返时延(RTT)和IP包时延变化(抖动)
分主动被动方法，被动方法用wireshark抓包分析。下面主要介绍主动方法：
运行hping2 www.google.com -p 80。得到
56 packets transmitted, 56 packets received, 0% packet loss round-trip min/avg/max = 242.5/269.9/381.1 ms 即在主动建立的到www.google.com的TCP连接中(默认为TCP，可以使用UDP，ICMP，IP，具体请看hping2 &amp;ndash;help)，丢包率为0。平均传输延迟为269.9，抖动为138.6。
注：按照《**中华人民共和国信息产业部令第36号》，**往返时延平均值≤200毫秒，时延变化平均值≤80毫秒。此处已经超标。但因为测试环境和适用条件不完全吻合，因此无法作为有效证据。
4.3.IP包丢失率(Lost rate)
也分主动方法和被动方法，主动方法见上。被动方法是用wireshark抓包后，通过tpc.analysis.lost_segment标志分析丢包数量和总体数量。具体为。
用wireshark抓包。
用( tcp.srcport == 7007 || tcp.</description>
    </item>
    
    <item>
      <title>上海有线通网络封锁解析</title>
      <link>//blog.shell909090.org/blog/archives/320/</link>
      <pubDate>Tue, 12 Sep 2006 09:01:16 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/320/</guid>
      <description>OK，今天贝壳稍微辛苦了点。给用有线通的朋友们准备了份礼物。
贝壳今天解析了有线通的抓包，发现了有线通限制P2P的方法，那就是，丢包。
TCP传输的时候，会有一定几率的丢失部分或者全部传输的数据，对方会根据你的SEQ和checksum来分析是否接收到了所有的包，并且返回一个包，告诉你报文状况。一般来说，丢包率都是很小的，大约是0.1%以下。丢包太多往往意味着各种网络异常，例如抢占MAC的sniffer方式就会有大量的丢包。这里是丢包率的详细解释。
贝壳刚刚截取了32秒的数据，总共传输3082个，丢包率是ED数据丢失119个，其余总共丢失2个，总丢包率3.9%。图片内有相应的截图，并且贝壳可以提供多次的抓包分析证明。
贝壳又做了一次分析，这次贝壳从skycn.com上面下载directx9c，同时保持ED通信。ED是7K上传40K下载的样子，HTTP是15K的样子。在60秒内总共是16763个包，其中ED相关丢包321个，非ED相关丢包13个，丢包率1.99%。
通过这个就可以证明，即使不说有线通封锁P2P的问题，有线通的网络服务质量也存在硬性问题。</description>
    </item>
    
    <item>
      <title>有线通封锁变通办法</title>
      <link>//blog.shell909090.org/blog/archives/317/</link>
      <pubDate>Sat, 09 Sep 2006 05:27:34 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/317/</guid>
      <description>虽然决定不用有线通了，但是还是要熬到年费结束。所以稍微研究了有线通的封锁方法，看看有没有变通方案。根据我上面的研究，有线通浦东地区封锁的是协议。所以我实验打开了BT和ED两个协议。结果证实，这两个协议同时打开对于单个协议的速度稍微有影响，估计是TCP的优先相应问题。不过总体速度比单个协议高了很多。昨天打开的时候，ED是30下载5上传，没有BT。今天同时打开的结果是BT45下载10上传，ED17下载10上传。总体来说有62下载20上传左右，高了很多。
其中针对BT说一句。之所以有这么高的速度，主要因为打开了BT中的加密协议头优先。这样在某些传输中就被当作HTTP连接，这个速度就是赚到的。不过现在不多，因此也没有太高的提升。不过总体下来不无小补，所以提供给继续要受到有线通荼毒的人士用用。
另外，有线通对HTTP下载不限速。大家可以把HTTP下载速度降低到不影响P2P连接的水平(例如用flashget的限制速度功能)，慢慢下。这样你的总体平均流速是最大的，同时对于有线通的杀伤也是最大的。</description>
    </item>
    
    <item>
      <title>上海有线通，不爽</title>
      <link>//blog.shell909090.org/blog/archives/315/</link>
      <pubDate>Tue, 05 Sep 2006 22:07:46 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/315/</guid>
      <description>最近贝壳要换ISP了。大家知道，贝壳用了5年多的上海有线通。虽然速度不快，偶尔还有降到半速的现象，但是总体来说还是不错的。TTL跃点主要在12到16上下(经过12-16个路由器)，极限上传一般在55K/s上下。虽然说和标称有一定区别，不过考虑IP封包头问题，也还可以。只是最近有线通不怎么像话，封了P2P不说，还不告知。去询问，又不承认。幸好贝壳两个月后包年到期，到时就跑了结束。
开始(8.30左右)贝壳的ED速度突然从50K/s持续上传下跌到7K/s持续上传。贝壳以为是电信故障维修，造成数个连线失效，路由重生成后形成瓶颈。这现象照理不会在电信这种大公司发生。不过按照莫菲定律，什么坏事都可能发生。就随他去了。24小时以后，贝壳打电话到96877报修。对方开始说会不会是系统问题，windows新出病毒云云。贝壳两台电脑，平台不一样(Intel和AMD64)，系统不一样(WindowsXP和Debian/GNU Linux)，所用软件不一样(eMuleVC，BC0.70和aMule)。不会都是出这个问题吧？再说windows出病毒，关linux啥事情？
维修人员看看没法说的通，换了口风。说这种问题不能算是问题，他需要“提交”一下。OK，你本身做维护的，还向谁提交问题？我也不管他，这几天忙，没空和他唠叨。说好好，你提交下看看。
过两天空了，看问题照旧，贝壳坐不住了。莫非我碰到了P2P封锁？贝壳先查看了网络上的评论，说上海有线通有这问题，已经有人在315网上提交了抱怨。贝壳下面做了几个测试。
首先将eMule复制一份，保留原先的配置。然后关闭所有共享，只共享一个文件。名字起的奇怪点，这样就没有别的下载客户了。然后找一个朋友来做下载，速度是5K上下，而且一般有下没上。
然后贝壳打开apache2，共享同一个文件，打开端口映射(ED等软件的端口映射也是做好的，经EtherReal核查没有问题)。下载速度是50K上下，一般有上没下。
再打开BT，勾选其中“加密数据包头”为“优先”。然后在传输测试中，多数客户的速度是2K-3K，但是一个也是BC0.70的客户，本地发起连接，速度高达50K。后面偶尔也会出现这样的客户，估计是因为不是所有BT客户端全支持加密数据包头的。
最后，测试Debian/GNU Linux从ftp.linuxforum.net下载更新的速度。这是ftp和http混用协议，一般在70K以上，最高甚至达到120K。
至此，基本可以下结论，有线通封锁了P2P类软件的使用。
最可笑的是，我再次打电话过去。他们的服务人员开始还跟我念叨机器问题等等。然后我把测试方法一说，他们立刻改口，说从不保证任何P2P类软件的稳定。只保证Http协议的传输速度。什么时候宽带还有条款，说只能保证Http协议的速度了？如果说只衡量HTTP协议速度，那条款应该重新修订。如果说网络速度，一般都是指IP封包的传输速度。或者放松说，底层网络封包的传输速度。有线通此举就是明显的侵权。上述电话可以向有线通查询的，工号7061。
任何愿意起诉有线通的同志，贝壳这里免费提供技术支持，提供有线通的网络数据统计(ntop统计结果)。大家高兴起诉的，贝壳提供声援和支持。并且贝壳郑重表示，有生之年，见到用有线通的就游说用别的宽带，即使他道歉并且解除封锁也不例外。自10月底有线通到期后，贝壳即抽空银行资金，签订解约协议，改用ADSL。</description>
    </item>
    
  </channel>
</rss>
