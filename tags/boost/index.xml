<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Boost on Shell&#39;s Home</title>
    <link>//blog.shell909090.org/tags/boost/</link>
    <description>Recent content in Boost on Shell&#39;s Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CC-BY-SA4.0</copyright>
    <lastBuildDate>Sat, 06 Sep 2008 22:50:00 +0800</lastBuildDate>
    
	<atom:link href="//blog.shell909090.org/tags/boost/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>C&#43;&#43;下的Variant</title>
      <link>//blog.shell909090.org/blog/archives/32/</link>
      <pubDate>Sat, 06 Sep 2008 22:50:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/32/</guid>
      <description>所谓C++语言，是一种强类型语言。即是说，C++种的某个变量，在使用时类型是已经确定的。这个并不是设计者的喜好或者是偏心，而是C++中的变量都会被翻译成准确的内存地址和大小，如果类型不确定是不可能处理的。但是在事实中，我们经常要处理一种&amp;rdquo;变类型&amp;rdquo;。例如，我们可能需要解析表达式，这个时候我们可能用一个或者两个栈来解决这个问题。可栈里面塞的东西就精彩了，对象，函数，数据，都在里面。这时候，如果是python，我们可以直接用list，他是弱类型的。但是C++怎么办？
一般来说，我们会使用Variant类型来解决这个问题。这是C++面对对象机制和算子机制所派生出来的产物，能够让用户自行定义对象的行为。如果一个对象，可以表现的像这个又像那个，那不就解决问题了？因此在COM中就有一个variant。不过贝壳看过机制，是一堆东西的集合，非常的不美丽。今天贝壳又看到一个variant的实现，漂亮多了。
废话少说，上代码。
#include using namespace std; #include using namespace boost; int _tmain(int argc, _TCHAR* argv[]) { any a; a = 10; printf (&amp;quot;%s: %dn&amp;quot;, a.type ().name (), any_cast(a)); a = 10.5; printf (&amp;quot;%s: %fn&amp;quot;, a.type ().name (), any_cast(a)); a = string (&amp;quot;str&amp;quot;); printf (&amp;quot;%s: %sn&amp;quot;, a.type ().name (), any_cast(a).c_str ()); return 0; }  当类型错误时，出现bad_cast exception。</description>
    </item>
    
    <item>
      <title>链接上的问题</title>
      <link>//blog.shell909090.org/blog/archives/10/</link>
      <pubDate>Mon, 07 Apr 2008 18:34:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/10/</guid>
      <description>贝壳最近在用库上吃了不少苦头，先是crypto++5.52。编译后怎么也链接不上。后来发现需要用/MT参数编译为多线程。后来又在STLport上又吃一次苦头，可见VC2003的默认单线程模式确实不得人心。
下面说一下STL的编译手记。下载STLport，解压。运行vcvars32.bat设置环境变量,去build/lib下面，运行 configuare -c msvc71(如果你是2003，否则按configuare &amp;ndash;help察看你的编译器类型)。然后运行nmake -f msvc.mak install。可以看到有两个目录被建立了，bin和lib。把bin的复制到windows/system32下面，把lib的复制到系统目录下面。 安装就OK了。
上述和boost都差不多，然而和boost不一样的是，编写程序的时候，需要手工指定stlport的头文件路径。boost的可以以&amp;lt;&amp;gt;来引入，因此boost的头可以复制到系统里面去。然而stlport的必须以手工方式指定，否则就要覆盖默认的stl 了。</description>
    </item>
    
    <item>
      <title>Boost</title>
      <link>//blog.shell909090.org/blog/archives/335/</link>
      <pubDate>Thu, 14 Dec 2006 23:18:24 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/335/</guid>
      <description>谢天谢地，好久没有正常的用blog了。无论哪里都是能看不能改，痛苦死我。
先写个技术文，关于Boost库的。
首先，你得装Vs2003.net。VC++6的编译器在支持列表里面一片血红，用那个不如用Linux跑GCC。如果有MSVC8(不要脑子转不过来，就是Vs2005.net)，那就比较完美了。基本和Linux下的GCC4.1平分秋色。下面是按照Vs2003.net+windows的例子来讲的。
然后，下载一个boost的库源代码，解压安装，没有一点困难。好的很。
接下来，请在PATH里面确认添加C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\bin;C:\Program Files\Microsoft Visual Studio .NET 2003\Common7\IDE;或者等效路径，关键是要能将cl.exe，link.exe，vcvars32.bat，mspdb71.dll纳入搜索路径。然后切换到boost的目录boost_1_33_1libs\regex\build，运行vcvars32.bat，再运行nmake -f vc71.mak，或者等效的指令(其实就是71还是70 80)。再运行nmake -f vc71.mak install，向VC的lib目录里面添加库。至此boost库的regex组件库算是编译好了能用，如果你不用正则表达式，抱歉，上面的话在耍你。
然后是用法，倒不难。
cmatch what; regex reg(&amp;quot;^abc$); if(regex_search(str.c_str(), what, reg)){ .... }  what里面会保存从正则表达式里面匹配出来的东西。
利用这个库可以很好的做字符串拆分，验证的操作，弥补了C++没有正则表达式的缺憾。
我写了一个类，可以从流里面获得每行，然后做匹配，然后派发到相应函数里面去。有需要的可以联系我。</description>
    </item>
    
  </channel>
</rss>