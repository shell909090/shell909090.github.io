<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Regex on Shell&#39;s Home</title>
    <link>//blog.shell909090.org/tags/regex/</link>
    <description>Recent content in Regex on Shell&#39;s Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CC-BY-SA4.0</copyright>
    <lastBuildDate>Thu, 21 Dec 2006 20:04:02 +0800</lastBuildDate>
    
	<atom:link href="//blog.shell909090.org/tags/regex/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>正则表达式解析文本</title>
      <link>//blog.shell909090.org/blog/archives/339/</link>
      <pubDate>Thu, 21 Dec 2006 20:04:02 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/339/</guid>
      <description>最近碰到这么个问题，一个文本，每行都是乱糟糟的东西，要从里面解析出东西来。行匹配铁定是用正则表达式，我用了Boost，不会的看我前两天的blog去。
下面是按行解析问题。简单来说，写一个类继承Lister，然后实现里面的三个纯虚方法。maxSeqence返回最大可以支持的表达式，registe_regex返回表达式文本，seqenceProcess返回相应函数的指针。其实可以写成直接调用seqenceProcess加上匹配序号，然后让用户在函数内部做switch-case的。不过这样用户代码量稍微有点多，所以干脆玩一把技术。然后是几个非纯虚函数，nextSeqence可以根据当前状态来控制下一个要匹配的表达式，默认是+1，一个一个全部匹配。beforeProcess和afterProcess分别是处理前后，可以调整输入流。noMatch是一个比较常用的虚函数，用于响应没有匹配时的状态。
匹配的结果在cmatch &amp;amp; what中，详细请看boost::regex。不过what[0].str()可以获得整句的string型返回，what[1]开始就是正则的匹配结果。
&amp;mdash;&amp;mdash;&amp;mdash;2006-12-25&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
原来的结果删除，我重写了一个。
主要有两个问题，一个是getline的效率问题，我会撰文说明的。还有就是两处细节不大好。
为了修正这两个问题，我突然发现整个的构架不大好了——怎么办？重写吧——
下面是新的，一个类line_regex，直接继承就好。line_buffer是用于解决getline效率不高的问题的，当然我偷了个懒，实现代码用了WIN32API，所以是不可移植的。而且数据是一次读取，最多256M。不过相信这种级别的问题还难不倒大家。line_buffer类中的函数都很清晰明了，就不介绍了。
Process (tistream &amp;amp; is)和Process (line_buffer &amp;amp; lb)是两大入口，同时支持自有的输入方法和流输入。当然流输入清晰明了标准化程度高。不过效率差的一塌糊涂。继承类初始化的时候，记得设置pfTable为入口列表，然后调用注册函数完成注册。nextSeqence和上面一样，可以定制下一个匹配式。noMatch用于无匹配的时候。beforeProcess和afterProcess分别会在某行开始和结束匹配后用，返回-1结束运行。其中beforeProcess返回正数会导致本行跳过，可以作为过滤器。
---------------------LineRegex.h-------------------- #include #include #include #include #include #include #include using namespace std; using namespace boost; typedef basic_stringtstring; typedef basic_regextregex; typedef match_resultstmatch; typedef basic_istream &amp;gt;tistream; #ifndef_LINE_REGEX_H_ #define_LINE_REGEX_H_ class line_regex; typedef int (line_regex::*ProcessFunction) (const tmatch &amp;amp; what, int line); class line_buffer { public: line_buffer(); ~line_buffer(); intopen(LPCTSTR lpPath); voidclose(); LPTSTRgetline(); longsize(); protected: UINTFileSize; LPVOIDlpFile; TCHAR *lpNow, *lpNext; }; class line_regex { public: line_regex(); ~line_regex(); virtualintnextSeqence(int seqence); virtual intnoMatch(LPTSTR strLine, int line); virtual int beforeProcess (LPTSTR strLine, int line); virtual int afterProcess (LPTSTR strLine, int line); voidregiste_expression(LPCTSTRexps[]); int Process (tistream &amp;amp; is); int Process (line_buffer &amp;amp; lb); protected: intProcessLine(LPTSTR strLine, int line); longmaxSeqence; ProcessFunction*pfTable; tregex*expressions; tmatchwhat; }; #endif//_LINE_REGEX_H_ ---------------------------------------------------- ----------------------LineRegex.</description>
    </item>
    
  </channel>
</rss>