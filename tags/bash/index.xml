<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bash on Shell&#39;s Home</title>
    <link>//blog.shell909090.org/tags/bash/</link>
    <description>Recent content in Bash on Shell&#39;s Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CC-BY-SA4.0</copyright>
    <lastBuildDate>Tue, 04 Dec 2007 05:44:52 +0800</lastBuildDate>
    
	<atom:link href="//blog.shell909090.org/tags/bash/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>wc、sort介绍</title>
      <link>//blog.shell909090.org/blog/archives/421/</link>
      <pubDate>Tue, 04 Dec 2007 05:44:52 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/421/</guid>
      <description>首先声明一点，我介绍的小软件系列都是Linux下的，在Windows下可以找Gnuwin32里面提供的移植包。因此多数人都是可以使用的，只是高兴不高兴用的问题而已。
其次我得道歉。本来说好了每周介绍一些小软件的，结果MSN空间不稳定，加上贝壳又忙。所以现在才介绍第二个，大家理解理解吧。
这次介绍的对象是wc，不是厕所，也不是世界杯，而是一个字符统计软件。这个软件的目的是统计出一个文件内的行数，单词数，字符数。行数是按照硬回车来统计的，单词是按照分割符号来统计的，字符么就不说了。这个和Word的字符统计很像，不过用起来并不那么方便。也许有人奇怪，这种软件有什么用呢？主要是在脚本程序内使用来统计一些数据，也有用来统计程序的代码行数的。平时大家一般都是分开统计行数，这次可以wc -l *.cpp *.h。就可以得到所有文件的行数和总行数。
而后我补充介绍一个东西，sort。这东西也很简单，就是把输入的内容按照一定的法则排序输出。一般来说，排序法则是alpha法则，当然也有数字法则等等。这个软件主要是从输出中排除一些重复数据，或者把输出过滤。例如我们可以和上面的联合使用，wc -l *.c *.h | sort。就可以得到当前所有的文件的行数，并且排序。</description>
    </item>
    
    <item>
      <title>查找重复文件</title>
      <link>//blog.shell909090.org/blog/archives/348/</link>
      <pubDate>Mon, 15 Jan 2007 07:39:52 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/348/</guid>
      <description>算是介绍一个奇淫巧技吧。查找重复的文件，这个应该有很多软件都可以做的。不过在Linux里面，利用系统工具，一句语句查找应该就比较少见了。
$find . -name &amp;quot;*&amp;quot; -type f -size +0 -exec md5sum {} ; | sort | uniq -d -w 32  原理是这样的，先用find查找当前所有文件。我们加上限定类型必须是文件，目录不要。限定大小不为0，空文件不要。然后对所有满足条件的执行md5sum，获得md5和文件的列表。然后排序，再针对md5的部分做唯一限定。就得到了所有md5相同的文件的列表。
问题是，这时候我们得到的还只是一堆重复的文件的md5。我们可以把以上步骤拆开来获得完整的输出。
$find . -name &amp;quot;*&amp;quot; -type f -size +0 -exec md5sum {} ; | sort &amp;gt; file_md5 $cat file_md5 | uniq -d -w 32 $grep &amp;quot;...&amp;quot; file_md5  相信大家都看出是怎么回事情了，就不赘言了。
Windows下以前我总是执行不出，原因在于要这么写。
find . -type f -size +0 -exec md5sum {} ; | sort &amp;gt; report.txt  差一个转义，因为不需要。
总结一下，我们可以用一个脚本来处理这些问题。
--------------------------fine_rep------------------------------ find $1 -type f -size +0 -exec md5sum {} ; | sort &amp;gt; &amp;quot;file_md5&amp;quot; cat &amp;quot;file_md5&amp;quot; | uniq -d -w 32 | cut -d&amp;quot; &amp;quot; -f1 | while read x do grep &amp;quot;$x&amp;quot; file_md5 echo &amp;quot;&amp;quot; done echo &amp;quot;done&amp;quot; rm &amp;quot;file_md5&amp;quot; ------------------------------------------------------------  </description>
    </item>
    
    <item>
      <title>X system 配置文件执行流程分析</title>
      <link>//blog.shell909090.org/blog/archives/319/</link>
      <pubDate>Mon, 11 Sep 2006 21:47:55 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/319/</guid>
      <description>1.startx启动流程
/usr/bin/startx +-&amp;gt;/etc/X11/xinit/xinitrc |-&amp;gt;/etc/X11/Xsession |-&amp;gt;~/.xinitrc |-&amp;gt;/etc/X11/xinit/xserverrc |-&amp;gt;/usr/bin/X11/X -&amp;gt;~/.xserverrc
startx脚本会分析用户主目录下是否存在特殊配置文件，如果不存在则使用系统默认脚本。默认脚本分两个部份，xinitrc启动客户端部份，xserverrc启动服务器端部份。
xserverrc内容仅为启动X。xinitrc会执行/etc/X11/Xsession，而后进入session分析。
2.Xsession
/etc/X11/Xsession -&amp;gt; /etc/X11/Xsession.d/*
/etc/X11/Xsession和/etc/init.d/rc很类似，是用来循环依次启动其他脚本的控制脚本。他负责启动/etc/X11/Xsession.d/下的所有文件。其中50xfree86-common_determine-startup文件会依次检测以下3个文件，并且设置到STARTUP变量中。x-session-manager;x-window-manager;x-terminal-emulator;最后99xfree86-common_start文件会执行exec $STARTUP;完成整个系统的启动过程。
3.gdm
gdm服务被/etc/init.d/gdm启动，而后读取/etc/gdm/gdm.conf配置自身。后面是基于理论分析，没有加以验证。
|-gdm---gdm-+-Xorg | `-x-session-manag-+-scim | `-ssh-agent  上面是pstree的结果，第1个gdm是/etc/init.d/gdm，第2个gdm是/usr/bin/gdm。gdm先启动一个X作为服务端，否则自身也无法以图形方式显示登录界面。而后gdm成为此X界面的唯一用户，显示登录系统。在用户登录后，gdm启动/etc/gdm/Xsession。这个脚本的内容和/etc/X11/Xsession非常类似，我怀疑为什么他们不用链接的方式(可能是因为包的关系？)。这时整个启动活动就结束了。</description>
    </item>
    
    <item>
      <title>Linux配置文件测序</title>
      <link>//blog.shell909090.org/blog/archives/318/</link>
      <pubDate>Mon, 11 Sep 2006 06:44:44 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/318/</guid>
      <description>CopyRight:
Written by Shell.E.Xu. Published under GPL.
KeyWord:
Linux bash profile 配置文件。
Abstract:
利用变量声明次序测定多个配置文件是否被调用以及调用的次序。
环境：
Debian/GNU Linux starg 3.1
Kernel:2.6.16-686-2
测定方法，加入变量TEST=XXX。此方法可能被某些变量解除函数解除，因此不予执行的反应未必是真，不过执行次序一般假不了。
1.tty登录时
/etc/environment;/etc/profile;~/.bash_profile-&amp;gt;~/.bashrc-&amp;gt;/etc/bashrc;
/etc/environment;/etc/profile;~/.bash_login
/etc/environment;/etc/profile;~/.profile
当上级启动过程中文件不存在时，才进行下面的过程。
2.GDM登录时
/etc/environment
3.新启动bash时
/etc/bash.bashrc;~/.bashrc-&amp;gt;/etc/bashrc;
4.~/.inputrc
根据文档，这个函数在readline函数初始化时启用。
5.结论
如果需要有效执行命令，需要同时修改/etc/profile和/etc/bash.bashrc。因为GDM登录的时候不执行登录脚本顺序，所以仅仅修改/etc/profile会造成对GUI下面开的term无效。虽然/etc/bashrc在理论上也有效，但是一旦~/.bashrc中没有引用，则无效(例如Debian中的root，由于安装系统的时候没有copy skel，所以缺少很多.XX文件)。如果仅仅是设定变量，可以用/etc/environment。该文件没有找到资料，其中仅可以设定变量(不用export，应当是被某程序作为配置读取而非脚本执行)，据分析是登录时当即起效。</description>
    </item>
    
    <item>
      <title>音乐文件转换技巧和脚本</title>
      <link>//blog.shell909090.org/blog/archives/316/</link>
      <pubDate>Fri, 08 Sep 2006 01:50:47 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/316/</guid>
      <description>好久没动手写啥东西了，最近在准备LPIC1考试。Will everyone keep finger cross 4 me?嘿嘿——
这个题目是个大家伙，反正每天写一点，也不忙在一时。大家有啥需要了解的，也可以问在下面。我会更新的。
copyright:
本文所提到各种软件版权归各个软件开发者所有。文章内容及所有附属脚本为独创，按照GPL发布。
keyword:
音乐 格式 转换 脚本 标签 bash shell script mp3 midi ape flac cue
toc
directory:
1.文件格式解说
1.1.mp3/ogg
1.2.midi
1.3.ape
1.4.flac
1.5.cue/toc
1.6.wav
1.7.iso
2.文件转换
2.1.wav/mp3
2.2.wav/ape
2.3.wav/flac
2.4.midi2wav
2.5.iso/wav
3.转换细节问题
3.1.按照cue切割
content:
1.1.mp3/ogg
这两个是非常有名的音乐压缩文件，其中MP3是mepg II layer
3。不要以为是mpeg
III。一般来说，MP3都被认为是一种小巧但是音质比较差的格式。不过事实上，要指摘MP3的音质前，你先自己找找是否满足了一定条件。周围是否安静，没有噪音。音源是否高清晰（拿MP3还原出来的CD是没意义的）。声音设备是否足够好（至少也要是高质量的音响或者高档耳机，耳塞或者200－300的所谓音箱根本不用说）。如果没有上述条件，那么MP3的音质也算过的去的。MP3格式的压缩比值大约是10：1，和wav相比。另外，如果有CD的话，最好使用lame进行适当压缩。而不要为了方便随便使用一个压缩工具。压缩最好使用VBR格式。这种格式本质上没有什么变化，只是在信息流高的地方使用高的编码格式，以获得最高的质量/空间比值。ogg具体情况没有研究，不过使用上和MP3没有区别。
1.2.midi
midi是所有格式中唯一不记录音频数据的音乐格式。midi记录的实质上是发声事件，简单来说就是什么时候鼓响了一下，什么时候钢琴的哪个键被按下了。因此midi也是没有立体声效果的。除非你使用特殊的软件指定某个乐器演奏时候的位置，然后根据环境生成出相应的音乐文件。midi文件在当前主要是两个用途。一个是midi记录了乐手演奏时候的指法细节，也记录了曲子的曲谱。midi本质上就是谱子。另外一个是midi的超小体积使得在某些嵌入系统（例如手机）上面可以作为背景音乐。
1.3.ape
ape是一种无损压缩格式，你可以把ape看成是一种只能对wav作用的zip文件。压缩比一般是2:1。
1.4.flac
flac和ape基本差不多。
1.5.cue/toc
cue/toc不是音乐文件，他们是用于flac/ape等光盘的音轨定义。一个CD可以有多个音轨，iso会记录下音轨的切分方式。但是ape就不行了。于是eac等抓轨软件生成cue来切分音乐文件。往往看到ape的发行方式是一个ape和一个cue，直接打开ape往往是一首非常长的歌曲。其实切分信息在cue里面。虚拟光驱使用的bin文件也是一样，会有配套的cue文件。两者可以用cuetools和mkcue互相转换。
1.6.wav
wav文件又叫做PCM编码格式。这是一切音乐的基础。无论你是哪种格式，最后都会被还原成wav的某种格式或者变形，才能够从声卡中播放出去。当然，midi的情况特殊，不在此列。
1.7.iso
iso也不是音乐文件，但是和音乐的关系非常密切。大家都知道iso是光盘的镜像，其实说的还不确切。iso本身就是光盘内容严格1字节比1字节复制的结果。至于有的为什么有其他格式。那就涉及光驱设备工作和数据流／加解密的问题了。
另外说一个iso的问题，大家知道linux下面挂载iso的指令是
# mount -t iso9660 -o loop file /mnt  这其实是两个步骤，一个是</description>
    </item>
    
    <item>
      <title>论linux引导过程</title>
      <link>//blog.shell909090.org/blog/archives/308/</link>
      <pubDate>Thu, 13 Jul 2006 23:36:57 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/308/</guid>
      <description>keywords
引导过程, initrd, init, rc
copyright
Shell.E.Xu撰写，按GPL发布。
abstract
简要介绍了引导流程的流转。
main
1.grub&amp;amp;lilo
引导的第一步，是启动引导管理器。这个种类非常复杂，从最早的MBR+专用引导扇区到现在的NTLDR,LILO,GRUB，大小和功能都有非常大的变化。但是主要来讲目的都是一样的。当今引导程序一般都分两个部分，引导扇区和主引导模块。NTLDR来说，C:NTLDR文件即是主引导模块。GRUB的主引导模块在/boot/grub/stage2，至于引导扇区，不用太过关心的。
主引导模块在加载后都会读取引导配置文件，当代流行引导管理器其实都有命令交互功能，可是你总不能指望每次启动都先敲堆命令吧。GRUB来说，配置文件是/boot/grub/menu.lst。注意，GRUB是在启动的时候读取配置的，但是LILO是根据配置来安装的。所以LILO在改变配置的时候需要重新安装。
2.vmlinuz&amp;amp;initrd
引导管理器会自动的将vmlinuz安置在内存中，然后寻找initrd传给vmlinuz。在没有initrd的情况下也可以引导，不过当下的趋势是将引导过程用脚本管理，放置在initrd中。这样引导参数解析，模块加载，设备管理都纳入了脚本的范围内。用linux哪能不会脚本，因此linux引导就有非常强的可以定制特性。
initrd分两种，cpio-initrd和ramfs。这里主要介绍
cpio-initrd。cpio-initrd的建立方法很简单，我上篇文章中有介绍。大致来说，就是把一些内容打包备份而已。vmlinuz会启动根下面的init脚本，我下篇文章会专门解析debian中配置的initrd.img的init脚本。现在大致说下。
init首先建立两个目录，建立/dev系统，并且建立null和console文件，否则udev的运做会出错。然后解析引导参数，解析到每个变量。而后依次运作init-top,init-premount,init-bottom（这些目录内的文件）。在init-bottom运行前会运行包含指定的脚本，这个脚本由BOOT参数指定，并且内部包含mount函数。这样可以通过指定BOOT参数定制mountroot的过程。最后是迁移大部分的系统过去（主要是/sys和/proc），最后通过run-init直接chroot和init。
3.init&amp;amp;rc
init运行的开始，会寻找inittab。其中指定了系统的很多特性，最主要的是runlevel。首先是寻找/etc/init.d/rc并且运行，并且把运行级别作为第一参数传递。然后rc会寻找/etc/init.d/rcS和/etc/default/rcS，如果有的话则包含或者运行。然后rc会以参数S运行自身，过程和正常启动一样。这个作为基础启动参数，无论你以何种级别运行都会运行rcS.d里面的脚本。
4.service
service启动的时候，是用rc?.d的脚本启动的。多数会用start-stop-daemon作为另外一个身份启动成守护进程。
5.bash&amp;amp;gdm
6.conf files
reference:
[1].</description>
    </item>
    
  </channel>
</rss>