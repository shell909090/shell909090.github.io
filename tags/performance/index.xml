<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Performance on Shell&#39;s Home</title>
    <link>//vlt1.shell909090.org/tags/performance/</link>
    <description>Recent content in Performance on Shell&#39;s Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CC-BY-SA4.0</copyright>
    <lastBuildDate>Wed, 27 Aug 2008 22:18:00 +0800</lastBuildDate>
    
	<atom:link href="//vlt1.shell909090.org/tags/performance/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>python的性能问题</title>
      <link>//vlt1.shell909090.org/blog/archives/31/</link>
      <pubDate>Wed, 27 Aug 2008 22:18:00 +0800</pubDate>
      
      <guid>//vlt1.shell909090.org/blog/archives/31/</guid>
      <description>贝壳最近在一个朋友的网站上看到了关于SICP零钱兑换问题的python求解，使用了记忆机制，然后他给出了代码。然而他的代码计时上有点小问题，也没有用包装器(奇怪的是，有写)，而且python的栈深度有限。因此贝壳做了几个修改的版本，需要测试下性能，下面就是关于性能的几个问题和过程。
本文详细论述了python语言下和C++语言下使用各种方法测试代码性能的方法，以及粗略的关于两种语言不同算法性能对比。
原始的python代码是这样的：
def change_coins(money): first_denomination = { 1: 1, 2: 5, 3: 10, 4: 25, 5: 50, } def cc(amount, kinds_of_coins): if amount == 0: return 1 elif amount &amp;lt; 0 or kinds_of_coins == 0: return 0 else: kind = cc(amount, kinds_of_coins - 1) kind += cc( amount-first_denomination[kinds_of_coins], kinds_of_coins) return kind print(&amp;quot;change_coins return %s&amp;quot; % cc(money, 5)) change_coins(300)  利用记忆原理包装后是这样的：
def memoiza(fun): cache = {} def proc(*arg): if arg in cache: return cache[arg] else: x = fun(*arg) cache[arg] = x return x return proc def decorator_change_coins(money): first_denomination = { 1: 1, 2: 5, 3: 10, 4: 25, 5: 50, } @memoiza def cc(amount, kinds_of_coins): if amount == 0: return 1 elif amount &amp;lt; 0 or kinds_of_coins == 0: return 0 else: kind = cc(amount, kinds_of_coins - 1) kind += cc( amount - first_denomination[kinds_of_coins], kinds_of_coins) return kind print(&amp;quot;decorator_change_coins return %s&amp;quot; % cc(money, 5)) decorator_change_coins(300)  不记忆，利用栈模拟递归展开是这样的：</description>
    </item>
    
    <item>
      <title>EPS转BMP和代码优化</title>
      <link>//vlt1.shell909090.org/blog/archives/340/</link>
      <pubDate>Fri, 22 Dec 2006 17:53:13 +0800</pubDate>
      
      <guid>//vlt1.shell909090.org/blog/archives/340/</guid>
      <description>EPS转BMP(我用的是PNG，不过还是一回事情)。EPS内部有两种图片，一个是TIF，位置和大小在头32个字节中描述。具体可以看EPS文档，在lp[5]保存位置，lp[6]保存大小。还有就是%%BeginBinary:
后面跟一个大小，然后跟beginimagex0D。在前文中应当有大小，自己找找看去，最后是一堆数据。存放方法是一位一位的像素连续存放，先存放一行C，然后是一行M，然后是Y，然后是K。当这4者全部存放完后，向后跳空一端区域，到本行开始的4字节对齐处，开始下一行的存放。
例如3个像素宽的图片(好简单——)存放方法就是，在0字节的最高三位(7,6,5位)，存放了这三个像素的C值。次三位(4,3,2位)，存放了M值。然后Y值存放在0字节的两位(1,0位)和1字节的一位(7位)。最后K值存放在1字节的次三位(6,5,4位)。然后跳空对齐，在4字节的位置开始描述下一行。
了解这个过程了，就应该发现，要转换到BMP需要大量的位操作。前置过程不说了，假定数据在内存里面(我当然不会用读取这种方法，用的是文件内存映射啦)，然后目标是GDI+的BitmapData对象。
BYTE getBit (PBYTE lpInData, int bit) { bit*=n; BYTE rslt; rslt = lpInData[bit / 8]; rslt &amp;gt;&amp;gt;= (7 - bit % 8); return rslt &amp;amp; 0x1; } for (y = 0; y &amp;lt; tgtData.Height; y++) { line_start = lpOut + l * n * Stride; for (x = 0; x &amp;lt; tgtData.Width; x++) { c = 1 - getBit (line_start, x); m = 1 - getBit (line_start, x + tgtData.</description>
    </item>
    
    <item>
      <title>网络性能测试和标准</title>
      <link>//vlt1.shell909090.org/blog/archives/324/</link>
      <pubDate>Sat, 30 Sep 2006 22:46:28 +0800</pubDate>
      
      <guid>//vlt1.shell909090.org/blog/archives/324/</guid>
      <description>前两天弄有线通的事情弄的郁闷了，所以就研究了网络性能测试。以后不用也是浪费，大家需要就看看吧。
1.目标
测试目的往往是测试清楚几个值，包括:IP包传输往返时延(RTT)，IP包时延变化(抖动)，IP包丢失率(Lost rate)，IP业务可用性，还有带宽(Bandwidth)。
2.适用标准
RFC 1242， RFC1944， RFC2285， RFC2432。
** 中华人民共和国信息产业部令第36号(http://www.chinanetcom.com.cn/mj/dxsc.asp?Unid=3810)
** IP网络技术要求&amp;ndash; 网络性能参数与指标(YD/T 1171-2001)
3.测试平台和工具
我们假定基于POSIX兼容平台测试，演示用的例子来自Debian Etch/Kernel 2.6.17-2-686。Windows下所需要工具可以参考移植工具。
iperf 网络带宽测试工具
paratrace 被动路由测试工具
hping2 网络联通和时延测试工具
wireshark(ethereal) 抓包分析工具
p0f 被动指纹分析工具
4.测试对象，方法，和结果分析
以下为实例测试，参数需要根据具体情况变化。
4.1.测试网络带宽
在服务器端运行iperf -s。
在客户端运行iperf -c 192.168.0.2
100Mbps网络环境下，得到结果为92.6Mbps，折合为11.5MB/s。即数据极限传输速度。
4.2.测试网络IP包传输往返时延(RTT)和IP包时延变化(抖动)
分主动被动方法，被动方法用wireshark抓包分析。下面主要介绍主动方法：
运行hping2 www.google.com -p 80。得到
56 packets transmitted, 56 packets received, 0% packet loss round-trip min/avg/max = 242.5/269.9/381.1 ms  即在主动建立的到www.google.com的TCP连接中(默认为TCP，可以使用UDP，ICMP，IP，具体请看hping2 &amp;ndash;help)，丢包率为0。平均传输延迟为269.9，抖动为138.6。
注：按照《中华人民共和国信息产业部令第36号》，往返时延平均值≤200毫秒，时延变化平均值≤80毫秒。此处已经超标。但因为测试环境和适用条件不完全吻合，因此无法作为有效证据。
4.3.IP包丢失率(Lost rate)
也分主动方法和被动方法，主动方法见上。被动方法是用wireshark抓包后，通过tpc.analysis.lost_segment标志分析丢包数量和总体数量。具体为。
用wireshark抓包。
用( tcp.srcport == 7007 || tcp.</description>
    </item>
    
  </channel>
</rss>