<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>debian on Shell&#39;s Home</title>
    <link>//blog.shell909090.org/tags/debian/</link>
    <description>Recent content in debian on Shell&#39;s Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CC-BY-SA4.0</copyright>
    <lastBuildDate>Wed, 23 Jan 2013 16:57:03 +0800</lastBuildDate><atom:link href="//blog.shell909090.org/tags/debian/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>修正问题，让debian testing使用lxc</title>
      <link>//blog.shell909090.org/blog/archives/2329/</link>
      <pubDate>Wed, 23 Jan 2013 16:57:03 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2329/</guid>
      <description>目前debian testing里面的lxc是无法运作的。原因是live-debconfig这个包只在sid中存在，而lxc是借助这个包来做系统初始化设定的。没有设定就结束初始化会挂掉系统。
解决方法如下：
dget -x http://ftp.de.debian.org/debian/pool/main/l/lxc/lxc_0.9.0~alpha2-4.dsc 可能因为没有key而无法解压，用dpkg-source -x解压开内容即可。
aptitude install autotools-dev docbook2x libapparmor-dev libcap-dev linux-libc-dev 然后进入目录，dpkg-buildpackage -rfakeroot -d进行编译。
退出目录，dpkg -i lxc&amp;hellip;进行安装。
到/usr/share/lxc/packages/，wget http://ftp.cn.debian.org/debian/pool/main/l/live-debconfig/live-debconfig_4.0~a15-1_all.deb。
然后再执行常规操作。
lxc-create -n vm0 -t debian lxc-start -n vm0 启动正常了。
在debian wheezy 3.2.0-4-686-pae下测试通过。</description>
    </item>
    
    <item>
      <title>选择哪个linux发行</title>
      <link>//blog.shell909090.org/blog/archives/2242/</link>
      <pubDate>Thu, 27 Sep 2012 14:07:46 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2242/</guid>
      <description>选择哪个linux发行 很多人问我，哪个linux发行版更好。这不是个伪命题，而是个蠢命题。哪个发行版更好取决于你要做什么。我们首先把linux发行版分为四大类，deb家族，rpm家族，源码家族，其他。
假如你要稳定部署 所谓稳定部署，就是你没什么机会对系统升级打补丁。听上去很傻X，系统不打补丁？实际上这样的系统非常多。大型跨国公司的ERP，托管在企业封闭机房内的核心业务系统。这些系统的升级成本是非常惊人的，一次升级动辄数天策划，弄一套备用系统来放着，然后再顶着XX的损失停机几个小时。
这种级别的系统，建议你直接上RHEL。不要怕花钱，出问题的损失远远比RHEL的服务费高的多。
假如你要持续更新 对于持续更新的系统，你可以选择debian/ubuntu。这两个系统都具有很强的滚动更新能力。虽然RH系统可以通过yum进行升级，然而RH的追求稳定策略，使得仓库的升级频率要比deb系小的多。
deb的系统有非常简单的配置和升级方案，而且大多保持稳定。ubuntu的策略比debian激进很多，所以软件有更多的新特性——当然，也有更多的死机。
假如你要高度定制 高度定制的系统只有使用源码安装，任何发行版都不会帮你把每个开关组合全部编译一遍。
源码家族中最出名的两个是gentoo和lfs，不过除非你的蛋在燃烧，否则一般是不会用lfs作为自己的应用系统的。大多是使用gentoo来做支持。
假如你只是自己想用用 你是一个彻底的新手 我建议你从debian家族的knoppix开始，或者ubuntu livecd也不错。这两个都是livecd系列，就是可以直接从光盘启动系统并使用，不需要在硬盘上安装，也不需要虚拟机。相反，他们自带虚拟机，可以虚拟一个windows出来供你偶尔用一下。
你是一个有过一定经验的人 那你熟悉什么就用什么。
不过作为一般性使用，我推荐ubuntu。他们针对桌面用户做了很多定制，打造了一个非常不错的环境。在我所知的发行版中，ubuntu的桌面用户是最多的，针对新手的答疑也是最友善的。
当然，文档最好的还是gentoo。
你是一个专家 很感谢你看完这篇文章，你太无聊了。</description>
    </item>
    
    <item>
      <title>debian wheezy下以uwsgi安装graphite</title>
      <link>//blog.shell909090.org/blog/archives/2200/</link>
      <pubDate>Mon, 09 Jul 2012 08:45:28 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2200/</guid>
      <description>abstract graphite是一个python写的性能监控系统。这个系统是由多个分离的部分组成的。
graphite-web: 由django写的web界面系统。 carbon: 数据收集的守护进程。 whisper: 一种python写的数据库，类似rrd，便于大量的性能日志数据收集和处理。上两个组件会调用这个库。 collectd: 数据收集守护进程，向carbon中喂数据的数据源。 另外，有一点黑色幽默的就是，graphite的意思是石墨，是炭(carbon)的一种同素异形体。因此在graphite项目中，多次出现carbon这个名字。当然，另两个同素异形体是钻石(diamond)和足球烯(footballene)，你就暂时别指望看到他们的身影了。
另一个用python写的，以元素命名的著名软件是mercurial。化学元素中的汞，俗称水银，符号hg。因此mercurial的命令行简写才是hg。
以上几个的结构大概是这样的：
collectd(source) -network-&amp;gt; carbon -&amp;gt; writing-&amp;gt; whisper
database -&amp;gt; reading-&amp;gt; graphite-web
下文描述了在debian wheezy下，以nginx+uwsgi模式安装graphite的过程。之所以用这个模式，是因为我的大部分系统都是python写的，同样安装在uwsgi下面。一事不烦二主。
carbon carbon有对应的debian包，可以很简单的安装。
sudo aptitude install graphite-carbon 默认的数据端口是2003，默认的数据路径是/var/lib/graphite/，这个在下文需要用到。
graphite virtual graphite有部分需要安装到系统中，因此最好用virtualenv进行安装。
cd /var/web/ sudo aptitude install python-virtualenv virtualenv --system-site-packages graphite 我假定你的安装路径是/var/web/graphite，这个在下面要反复用到。
install 在安装路径下，执行以下内容
source bin/activite pip install graphite-web --install-option=&amp;quot;--prefix=/var/web/graphite&amp;quot; --install-option=&amp;quot;--install-lib=/var/web/graphite/webapp&amp;quot; 注意，/var/web/graphite需要根据上面的设定自行修改，webapp是你的django基础路径。
configure 在/var/web/graphite/webapp/graphite下面，执行以下内容
cp local_settings.py.example local_settings.py 然后编辑local_settings.py
GRAPHITE_ROOT = &#39;/var/web/graphite&#39; WHISPER_DIR = &#39;/var/lib/graphite/whisper&#39; DATABASES = ... 注意databases，不要在settings.</description>
    </item>
    
    <item>
      <title>首次bsp日记</title>
      <link>//blog.shell909090.org/blog/archives/2158/</link>
      <pubDate>Wed, 02 May 2012 03:09:03 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2158/</guid>
      <description>第一次参加BSP，还不错拉。因为以前没参加过，所以等搞明白了这个是干吗的再和大家说。
BSP是bug squeeze party的简称，简单来说就是修错会。debian马上要发行7了，在此之前有很多的bug没有修复。其中有一种是RC bug，即运行就会出大问题的bug，或者干脆没法编译。无论哪个，都会导致这个包不能进入最新的发布。有些bug很麻烦，需要maintainer和author沟通，这个没有办法。但是有些问题解决起来很简单，只是因为后果很严重，作者又暂时没空处理，导致包无法进入stable，实在很无谓。BSP的目的，主要是以非维护者上传(non-maintainer upload)的方式修复这类bug。因为包不是自己的，所以礼貌上，只修复半个月以上的rc级别bug，其他的留给maintainer来处理。
BSP的主要目的，就是这么一个苦力会。没有挂名，最多只有一条changelog记录，还要大量寻找和修复bug。不过BSP相当重要，因为很多maintainer往往有一段一段的不活跃时间。这时候即使再简单的问题也不会处理。按照debian的规则，别人也不会帮他处理。除了BSP，很少有一批人会专门找这种简单的Bug来修正。如果没有BSP，debian stable发布的时候一做RC冻结，就要少掉很多有用的包。BSP更大的目的是，交流和传授debian打包和除错的经验，唤起人们的关注。也许在会后，如果有人看到一些简单bug，会使用nmu的方法给与修正。不过BSP到确实是有一个额外加成的好处——基本变成了签名会。昨天估计是中国大陆地区首次DD数量接近其他人数量，我一下弄到了5个签名，2个DD一个Ubuntu员工。加上原来就有的zigo签名，我就有3个DD签名了。
本地BSP是在thomas的公司举行，欧特家博士匹萨厂商赞助了我们两天的午餐——微波食品匹萨。第一天来的人比较多，很多都是纯新手，大概有20多人。Zigo倒是在网络上说会帮助新手，但是纯新手看到debian打包系统根本无从下手，所谓指导什么的也无从说起。很多人一天一个bug都修不掉，甚至都看不懂，很有挫折感，估计有不少有热情的人在第二天就这么默默退散了，第二天只来了15个左右。
我主要是以修复自己的问题为主，python-snappy和python-formalchemy都升级到了最高级，并且修复了自己以前打包的一个问题。至于RC bug么，我修了一个。两个包在python中命名冲突了，所以在debian中需要声明为conflicts。另外我评审了一下，最终还是决定关闭了python-libmemcached的ITP。虽然对douban很不好意思，还让他们修了一下。但是python-libmemcached依赖于libmemcached，而后者已经逐步升级到了1.0.X版本，但是douban为了稳定使用，是sticky在0.4版上的。因此当更新的debian发行时，实际上python-libmemcached和系统中的libmemcached不是一回事。因此，我不能依赖libmemcached的维护者，而是需要自己去维护后者——没办法，我就是怂了。python-libmemcached的爱用者，还是自己打包吧。我倒是可以公开打包文档。
另外，我在想是否要集合一批python/debian的用户，来做投票。例如，python的一个容器——flup，在debian中实际上已经orphon了。如果有足够的人投票，我愿意为flup做接手维护工作。不过目前debian下问下来的结果，大家对flup没什么太大兴趣。</description>
    </item>
    
    <item>
      <title>vps上应当装什么</title>
      <link>//blog.shell909090.org/blog/archives/2144/</link>
      <pubDate>Tue, 17 Apr 2012 07:00:21 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2144/</guid>
      <description>假定你有一台debian vps，上面需要装一些东西来——你懂。你应该装一些什么呢？
基础部分 ssh 没啥好多说，没有ssh，你甚至无法管理机器。不过注意，安全的ssh方式应当只允许使用key登录，禁止一切密码登录。而且对于没必要登录的某些用户，需要在/etc/passwd中将shell改为/bin/false。至于端口改不改，这个不重要，看你心情。
vim debian默认装的是vim-tiny，很不好用。建议改为vim，改配置的时候让自己舒服点。
安全部分 iptables-persistent 这是debian内用于iptables规则持久化的工具，你可以编辑/etc/iptables/rules.v4来修改防火墙规则。注意，目前debian stable(squeeze)中的版本还没有4/6区分，你可以弄一个testing(wheezy)中的来装。
一般来说，你的规则中至少要包含以下内容：
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT -A INPUT -i lo -j ACCEPT -A INPUT -i tun+ -j ACCEPT -A INPUT -i ppp+ -j ACCEPT -A INPUT -p tcp -m multiport --dport 22,xxx,xxx,xxx -j ACCEPT -A INPUT -p udp -m multiport --dport xxx,xxx,xxx -j ACCEPT 而且强烈建议，先保存一个没问题的iptables，然后直接修改iptables，再保存。这样的好处是，当你脑残改错了导致你自己都无法管理的时候，只要重启就可以恢复vps工作，而不用更麻烦的动作。
denyhosts 这是ssh的连接防御进程，用python编写。如果有人试图尝试你的ssh密码，这个程序就会踢掉他的ip。
如果你已经用了我说的，通过key的连接方式，你可以一次就直接踢掉对方ip。
管理部分 ifstat ifstat是用于网络流量管理的工具，可以告诉你网络目标的流量是多少。
dnsutils dnsutils里面包含了不少用于管理dns的工具，包括我们常用的nslookup，还有相对少用的dig。
mtr-tiny mtr是一个traceroute工具，比后者好用很多。这个工具可以快速跟踪路由。
vnstat vnstat是用于跟踪网卡流量的工具，尤其对于每个月都有限额的vps，这个工具更有意义。</description>
    </item>
    
    <item>
      <title>mirrors.geekbone.org软件仓库镜像站将于4月中旬下线</title>
      <link>//blog.shell909090.org/blog/archives/2140/</link>
      <pubDate>Fri, 13 Apr 2012 01:38:56 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2140/</guid>
      <description>原文在此我用了5年多的cn99和geekbone两大镜像终于全部下线。
需要通告的一点关键问题即是, 由于tux下线早于新一个版本的debian发行,
因此目前mirrors.geekbone.org还是已经发行的debian安装盘的官方源之一.
请大家在安装debian6的时候不要再选择geekbone, 并请通告其他debian用户.
在09年加入shlug之初，就知道当年用了很久的geekbone服务器是shlug管理维护的。当时就很惊讶，以捐助方式运作一台镜像服务器，这个是相当不容易的。包括募集，管理，账目，在中国要做整套过程需要相当心力。而且geekbone还是在debian有注册的镜像站之一。可以看Debian 全球鏡像站。
大约在11年，中科大的ustc服务器上线后。在一次和lightning的闲聊中，lightning就谈到了tux服务器的问题。当时tux的服务器硬盘已经不足，最多在数月后就会满额。lightning删除了部分上面的无用数据，让服务器可以稍稍多工作一些时日。我当时就建议不要全面镜像所有的debian镜像，毕竟当时中国已经有anheng和ustc两个全面源，其中ustc还在申请大陆一级源(他们的资源投入确实不错，镜像速度相当快)。tux毕竟是老服务器，可以转做i386和amd64两个主要镜像。国内大部分人用的都是这两个arch，sohu的部分镜像也是针对这部分的。lightning表示看看再说。
今天，看到了shlug通告，tux服务器准备下线。想想也的却是，tux已经在超期服役，而国内已经有了ustc, anheng, sohu, bjtu四个镜像.
再进行一次募捐让tux恢复服役看来是没什么必要了.
在此, 感谢一下shlug服务器维护团队, 谢谢你们的努力让我五年来得以享用快速的源服务. 祝tux一路走好, 愿电脑诸神与它同在, enter.
另外, 提一点我们和欧美的工业水准差距. 我曾经撰文说过, 中国要追赶美国还有很长的路要走. 当时列举的证据就是dd和debian mirror lists. 当时我们也是4个源, 目前加入了bjtu, tux退出, 还是4个源.
相比美国那个深不见底, 鼠标滚轮滚好几下都没看到头的列表, 实在是太差距了.
这个差距不仅体现在源少, 更体现在用户少. 用户少就是源少的原因.
如果用户增长一个数量级, 目前这些源肯定会发生不足, 然后吵着让各个大学再开一两个镜像出来. 我倒是觉得这样不错, 至少sjtu有机会露个脸.
其实sjtu也是有自己的源的](http://ftp.sjtu.edu.cn/debian/)%E7%9A%84), 只是没有对普通网络用户开放, 访问速度缓慢而已.</description>
    </item>
    
    <item>
      <title>empathy的无聊问题——记一次排错</title>
      <link>//blog.shell909090.org/blog/archives/2132/</link>
      <pubDate>Mon, 09 Apr 2012 03:55:40 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2132/</guid>
      <description>废话不说，debian testing，装了empathy后没法用account，等于废物。
先看bug report，开reportbug，看empathy的bug，有一个“Accounts window does not open”，估计就是我要的。
在浏览器中打开，http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=594945&amp;amp;archived=False&amp;amp;mbox=no，里面说了大致情况，和我这里非常类似。
第一个意见，killall -9 empathy-account，无效。
第二个意见，需要装CM。
跑去看看，一个都没装。跟着看说明，应该在recommand里面的。OK，我这里有这个配置。
shell-deb:\~\# cat /etc/apt/apt.conf.d/20norecommanded APT { Install-Recommends 0; }; 这是对付很多无聊包把recommand当作suggest用的，结果这次中标。其实这次的recommand应当放入dep里面的。
OK，完事。
PS.虽说如此，记得把telepathy重启一下，否则jabber协议看的到但是无效。</description>
    </item>
    
    <item>
      <title>简易debian livecd打造手册</title>
      <link>//blog.shell909090.org/blog/archives/2094/</link>
      <pubDate>Thu, 16 Feb 2012 01:10:21 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2094/</guid>
      <description>废话不说，上干货。先装一下syslinux，genisoimage，kvm，debootstrap，squashfs-tools。
$ mkdir debcd $ cd debcd $ mkdir isoroot $ cp/usr/lib/syslinux/isolinux.bin isoroot/ $cat &amp;gt; isoroot/isolinux.cfg &amp;lt;&amp;lt; &amp;quot;EOF&amp;quot; prompt 0 default linux label linux kernel vmlinuz append initrd=initrd.img EOF $ cp /boot/vmlinuz-3.2.0-1-amd64 isoroot/vmlinuz 完成上述步骤后，你就准备好了一个基础的iso镜像文件系统，并有了一个基础的引导模块和内核。现在，我们尝试把这玩意烧到iso上，并且测试一下。
$genisoimage -o output.iso -b isolinux.bin -c boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table isoroot/ $ sudo kvm -cdrom output.iso -m 512 如果没法装kvm，换成qemu。屏幕会停在内核引导过程中——因为你没有initrd.img，所以在isolinux.cfg中指定的initrd就不正确。下面我们会设法弄一个initrd.img。
$ cp -a /etc/initramfs-tools/ initramfs $ mkinitramfs -d initramfs -o isoroot/initrd.img $genisoimage -o output.iso -b isolinux.bin -c boot.</description>
    </item>
    
    <item>
      <title>Progress Linux</title>
      <link>//blog.shell909090.org/blog/archives/2092/</link>
      <pubDate>Mon, 13 Feb 2012 01:56:41 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2092/</guid>
      <description>别紧张，我不是要progressLinux，这是一种新的distribution（算是吧）。http://progress-linux.org，是一个基于Debian的dist。
为什么要有这个dist？其实严格意义上说，这不是一个完整的dist。不同于Ubuntu，这个dist可以完全的寄生在Debianstable(squeeze)上面。你不需要真的去官网上下载一个ISO，然后安装。只需要安装Debianstable，然后加入
Progress-Linux的source就好了。如果你胆敢在Ubuntu上这么干，只会把系统弄的一团糟。当然，直接下载Progress-Linux的安装ISO也是可以的，这个ISO基于Debian Live，作者(Daniel Baumann)本人也是DD，是Debian Live的主要作者之一。
为什么要这样？因为Debian是以严谨到变态而闻名的系统。例如，mdadm这个包有一个很小的不便。每个月当检查RAID的时候，会发一封mail。如果你有一堆电脑需要管理，这件事情就非常烦人了。要修正这个问题，只需要在其中一个脚本中加入参数-q。但是Debian修这个bug修了9个月。因为具体的包维护者并不是很关心这个事情（低优先级），而Release
Term需要确保这个bug必须先在Sid中修复，确认没事了（基本是没问题的，只加一个-q而已），再修复testing的，最后修复stable的。于是，你的邮箱要被一堆垃圾持续淹没9个月。
Progress-Linux就快多了。
但是为什么要做成dist呢？
Debian的模式设计，是方便fork，而严格控制release的。Debian的版本库更新要很多条件，例如符合DSFG（也就意味着符合一系列的开源授权协议），更新的时候首先作用于SID，Release
Term说了算等等。DD也没有权利要求更新Debian
stable中的包，他必须申请Release
Term批准。想想也能明白，如果真的每个DD都能直接更新包，那才天下大乱了。我们不能绕过Release
Term去解决问题，也不想让这些问题留着。
那么怎么办？只有自己做一个仓库。Debian鼓励这么做（有很多dist就是这么做的），但是这时就不能用Debian的名字，因此作者才做了一个新的dist。DSFG这时变成了一个优势，Debian的所有包，都满足DSFG的第8条，“不仅仅对Debian授权”，可以直接应用。
因此，其实Progress-Linux是一个基于Debian的改进。更快的bug
fix，更多的backport，更少考虑版权问题。当然，限于作者关心的包。另一个激动人心的特点是，
Progress-Linux的包和backport包不会碰撞，因此使得stable可以简单的安装很多新的包。如果你喜欢，可以在安装系统后加入他的source，作为系统的改进。但是不要指望有什么实质性变化，都是一些细节改进而已。如果你希望知道几个例子，可以看这个页面（http://www.progress-linux.org/project/about/）。
也许你希望使用一个中国区的mirror来做这个事情（这样更快，也省去中间的一些其他麻烦），http://mirrors.ustc.edu.cn是debian中国区域的主镜像(即http://ftp.cn.debian.org)，这个节点已经完成Progress-Linux的镜像。
Relax, I don&amp;rsquo;t mean to progress Linux, it&amp;rsquo;s a new distribution (kind of). http://progress-linux.org, a new dist based on Debian.
Why people made this dist? Technically, it is no a fully dist. Unlike Ubuntu, this dist can totally on the top of Debian stable(squeeze). You don&amp;rsquo;t need to download a ISO from website and install.</description>
    </item>
    
    <item>
      <title>lfs under debian注记</title>
      <link>//blog.shell909090.org/blog/archives/2088/</link>
      <pubDate>Thu, 09 Feb 2012 07:04:06 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2088/</guid>
      <description>1.严格按照说明做，少看一点无关内容后面就一堆err了。
2.新分区大点，4G不够的，最小用8G。我用了20G的，硬盘不值钱。另外说一句，并不是4G不能够做到，而是你可能被迫删除不少有用东西，或者是移到其他位置，增加复杂度。
3.每次你进入一个section，以前针对这个包进行解压，打补丁，并修改的source都作废了。直接删除它们，然后重新解压。lfs不依赖于以前解开的源码，在任何一节的开始都不需要翻以前怎么处理（解压，打补丁，修改）源码的。你在任何一节都可以（并且必须）独立操作源码。
4.mawk会出错，装一个gawk。
5.yacc没有的时候，装bison，it&amp;rsquo;s works。
6.如果碰到见鬼的tar.xz，用tar Jxf。或者更简单的，现代tar都支持xf直接解压，不用再自己选择zjJ。
7.chapter5的流程？先用系统的编译器编译了binutils，gcc和glibc，然后再用刚刚编译好的再编译这三个，这样编译系统就统统连接到了/tools上。然后用/tools的连接编译了一堆编译用工具，bash啦，make啦。这样，就完成了编译环境的建立，/tools是一个独立于主系统的，完整而可用的编译系统。用这个编译系统编译任何东西的结果应当是相对可控的。
8.如果我是你，在chapter5完成的时候会tar czf ~/tools.tar.gz /tools。这样会让你在chapter6中犯错的时候不至于血本无归。
9.chapter6的流程？用chapter5的编译系统，编译了新系统的编译系统。当然，这个不容易，因为刚刚的编译系统所有指向都是/tools。所以lfs指导你做了不少patch。然后重复chapter5的过程，逐步把源码编译安装到正式系统中。
10.lfs真TMD的辛苦，连source code的typo都需要在书中指出和fix。。。而且lfs自己还有errata。
11.lfs的56两章看起来像是两个人写的，风格习惯不一致。chapter5用``，chapter6用$()。还有gcc-pass2的时候，cp -v XXX{,.tmp}; sed XXX.tmp &amp;hellip; &amp;gt; XXX。而chapter6的binutils则是sed -i.bak。当然，有可能是因为有些系统的sed不支持-i，例如redhat的系统始终不支持netstat -nlp46，I hate it。BTW，我喜欢sed -i。
12.编译过程真心傻X，大部分都是解开源码，configure &amp;ndash;prefix=&amp;hellip; &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make check &amp;amp;&amp;amp; make install。这些过程好像可以用一个不知道啥脚本来简化，建议不要手工干这堆事情，没意思的。相反，倒是很多调整有些意思。</description>
    </item>
    
    <item>
      <title>如何写基于google code的watch file</title>
      <link>//blog.shell909090.org/blog/archives/2078/</link>
      <pubDate>Wed, 01 Feb 2012 04:06:39 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2078/</guid>
      <description>google code很好用，可是他的下载页面很恶心，很难跟，而且还改过一次。debian打包党要做watch file的时候，估计会很郁闷。
去http://googlecode.debian.net/，然后提交你的包名，你会得到一个url（其实自己猜也可以猜到）。每次访问这个url的时候，他会代你解析google code，告诉你有没有更新。</description>
    </item>
    
    <item>
      <title>PXE模式使用openwrt网络安装debian</title>
      <link>//blog.shell909090.org/blog/archives/2076/</link>
      <pubDate>Tue, 31 Jan 2012 03:14:14 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2076/</guid>
      <description>废话不说，上干货。
首先，禁用arptables。当然，如果你没开这个防火墙，那么没必要。其次，注意你的openwrt必须有udisk，否则空间相差太多，根本没有实现的可能。
然后，如果你用的是新版的rom，应该在/etc/init.d/dnsmasq里面看到，dnsmasq()这个函数里面有。
append_parm &amp;quot;$cfg&amp;quot; &amp;quot;tftp_root&amp;quot; &amp;quot;--tftp-root&amp;quot; append_parm &amp;quot;$cfg&amp;quot; &amp;quot;dhcp_boot&amp;quot; &amp;quot;--dhcp-boot&amp;quot; 如果没有，加一下，有的话说明原生支持。下面可以直接修改。
dnsmasq是一个dhcp/dns双重服务器，而pxe引导的第一步就是支持bootp协议。这个选项在/etc/config/dhcp里面。config
dnsmasq一节上，增加。
option &#39;dhcp_boot&#39; &#39;pxelinux.0&#39; 重启dnsmasq，完成bootp准备。
然后，安装tftpd-hpa，opkg update，opkg install
tftpd-hpa。这是一个tftp服务器，默认不启动。如果你打算让pxe引导模式持久化，那么就改为默认启动，同时永久关闭arp防火墙。在/var/tftpd-hpa里面，可以看到tftpd的根路径。从参考3的的连接里面，你可以找到合适的一个下载路径，下载netboot.tar.gz到这个文件。解压后，可以看到pxelinux.0，这个和上面的pxelinux.0相对应。这是pxelinux的组件，隶属于syslinux项目，可以用来完成启动。
这样，就完成了安装的所有准备工作。你可以找一个设备实验一下，应当可以完成网络安装的步骤。
另外，如果需要启动选择amd64或者是i386，或者更进一步定制。那么需要下载其他镜像，自己生成pxelinux.cfg这个目录中的内容。
PXEhttp://wiki.debian.org/PXE
NetbootPXEhttp://wiki.debian.org/DebianInstaller/NetbootPXE
netinsthttp://www.debian.org/distrib/netinst
配置pxe，安装debian和ubuntuhttp://my.unix-center.net/~whtbie/wordpress/?p=290</description>
    </item>
    
    <item>
      <title>从python-support改为dh_python2的方法</title>
      <link>//blog.shell909090.org/blog/archives/2016/</link>
      <pubDate>Thu, 15 Dec 2011 11:00:46 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2016/</guid>
      <description>在debian/rules里面，将这个：
%: dh $@ 改为这个：
%: dh $@ --with python2 其余看这里。</description>
    </item>
    
    <item>
      <title>uwsgi under debian</title>
      <link>//blog.shell909090.org/blog/archives/1919/</link>
      <pubDate>Tue, 27 Sep 2011 10:28:02 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1919/</guid>
      <description>好了，debian官方的uwsgi总算出来了。包已经到了testing，stable暂时别指望了，等下一次release吧。这次打的包，比贝壳打的复杂多了。贝壳自己只打了python专用的包，debian官方的包将多个语言分别打成了plugins。
下面说说，使用debian官方的包如何做uwsgi发布，还是vhost模式哦。
首先安装uwsgi，uwsgi-plugin-python这两个包。uwsgi-plugin-greenlet-python也可以考虑，装不装看你的需求。
然后在/etc/uwsgi/apps-available/sites.xml下面写一个文本文件，内容如下：
&amp;lt;uwsgi&amp;gt; &amp;lt;vhost/&amp;gt; &amp;lt;no-site/&amp;gt; &amp;lt;/uwsgi&amp;gt; 再从/etc/uwsgi/apps-enabled/sites.xml链接过去，重启uwsgi服务，事情就搞定了。
默认的配置在/usr/share/uwsgi/conf/default.ini，可以看看是否都满意了。一般来说，master和no-orphans都建议打开，chmod-socket最高660，改成600应该也可以工作。贝壳的机器负载小，只用一个worker就够了，所以完整的配置是这样的：
&amp;lt;uwsgi&amp;gt; &amp;lt;plugins&amp;gt;greenlet,ugreen&amp;lt;/plugins&amp;gt; &amp;lt;workers&amp;gt;1&amp;lt;/workers&amp;gt; &amp;lt;reload-on-as&amp;gt;128&amp;lt;/reload-on-as&amp;gt; &amp;lt;vhost/&amp;gt; &amp;lt;no-site/&amp;gt; &amp;lt;/uwsgi&amp;gt; nginx里面如此设定：
location /asdf { include uwsgi\_params; uwsgi\_param UWSGI\_PYHOME /usr; uwsgi\_param UWSGI\_CHDIR /var/web/hosts; uwsgi\_param UWSGI\_SCRIPT main; uwsgi\_pass unix:/run/uwsgi/sites/socket; } 其中，我的程序放在/var/web/hosts底下，使用系统环境来运行（而不是virtualenv），主脚本（带applications那个）是main.py。unix
socket和上文default.ini里面的socket正好对应上。
同理，我们其实还可以开多个uwsgi应用，只要放置多个xml配置就好。不过既然都采用了vhost模式，何必还开多个呢？这毕竟不是虚拟网站，要给其他人使用的。</description>
    </item>
    
    <item>
      <title>debian打包的一些细节补充</title>
      <link>//blog.shell909090.org/blog/archives/1895/</link>
      <pubDate>Fri, 26 Aug 2011 15:52:30 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1895/</guid>
      <description>如果前面有人接手了，你最好和前任联系一下，看看是否可以获得他的帮助，或者跟着他的思路继续做下去。
debian有一个比较变态的规定，你的打包内容，必须遵循FHS。有些程序写的数据放到了程序路径下面，你需要进行人工分离（这个花了我整整两天）。
求RFS比ITP难多了&amp;hellip;
&amp;hellip;.
&amp;hellip;&amp;hellip;.
求RFS。</description>
    </item>
    
    <item>
      <title>第一个debian官方包请求出来</title>
      <link>//blog.shell909090.org/blog/archives/1891/</link>
      <pubDate>Tue, 23 Aug 2011 16:47:24 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1891/</guid>
      <description>贝壳的第一个为debian官方贡献的包出炉了，地址在这里。之前也发过一个ITP，结果发现莫名其妙有人在做了。不知道为什么没有在wnpp中发现，结果弄的好不尴尬。
大概说一下，为debian官方贡献打包，你需要了解这个包的基本情况。例如用哪种语言写的，有什么依赖关系，是什么授权，等等。尤其是授权，debian有所谓的dsfg方针（不知道的看这里，这里，这里）。如果你打出来的包包含dsfg不许可的内容，你的包会被紧急移除，直到修复这个问题。尤其值得注意的是，debian要求文件级的授权，就是说，即使有一个文件不符合授权要求，整个包也会不通过，哪怕包本身声明为开源授权。之前ibus还是fctix，因为用了拼音加加的词库，就享受了一把这个待遇。另外，如果可以的话，最好征求一下上游维护者的意见（一般就是作者）。因为debian的bug系统中的问题是你需要解决的，而这些问题通常没有上游维护者是很难搞定的。当然，如果你觉得自己搞的定，或者可以出了问题再联系，那也可以。
当你搞明白这些问题后，通常需要先发一个ITP（Intent To Adoption）出来，表示你要打包，别人不要抢。通常是用reportbug来进行提交，汇报wnpp（Work-Needing and Prospective Packages）这个包的bug。然后程序会问你确定？确定的话，会要求你选择是哪种报告，其中就有ITP。当你的ITP通过后，你会收到一个bugnumber，这个bugnumber会在changelog中用到。
另外说明一下bts(bug tracking system)的基本用法。你需要给control@bugs.debian.org发送一封邮件，内容是bts的控制指令，每行一条。碰到无法识别的指令时，bts停止解析。通常习惯在最后写一个thanks来停止解析，也表示礼貌。指令系统可以参考[3]。
然后开始干活。干活的方法参考Debian 新维护人员手册。其中注意在changelog中填入你刚刚申请到的ITP，这样当包通过后，会自动关闭你的ITP。提交的包需要是lintian clean的，即自动检查程序没有发现错误。通常你可以在本地系统安装lintian进行检查。
当你完成打包工作（没法详述，太复杂了，自己看文档吧），你需要上传到mentors系统，然后让DD审查你的包。你首先要在http://mentors.debian.net拥有一个账户，这个账户的email将来会用于给你发送bug通知之类的东西。当你完成账户创建，你会在页面上看到要求上传一个gpgkey。gpg创建key都会吧？记得做4096位密钥。另外填写姓名的时候，用最好真实姓名作为名称，网名进nickname，尤其是大部分中国人都有一个拼音姓名和一个英文姓名的时候。。。
然后，你的主页上有一个说明，会让你复制一些数据到你的~/.dput.cf中。dput是用来上传源码包的工具。如果你按照说明去复制，那么你就可以用dput debexpo.changes来上传你的包。其中有几点需要注意的，一个是debexpo不能丢，否则会默认传到ftp.debian.org上去，然后失败。另外changes和dsc必须经过你上传那个公钥对应的私钥的签署，否则签名验证失败，你的包上传行为就会失败。如果你的系统中有多个private key，那么dpkg-buildpackage会不知道如何打包。用-k参数加上你的私钥id，就可以指定使用哪个私钥进行签署。
当你的包完成上传后，你可以在my packages下面看到。注意服务器检查结果，本地通过lintian的包在远程还是可能爆出错误，所以再检查一下。
如果一切都没有问题。你可以将package中的Needs a sponsor改为Yes，然后等DD注意到你的包。当然，还可以向debian-mentors@lists.debian.org发送一封RFS（Request For Sponsor）的邮件，提醒DD的关注。具体的内容模板在成功上传的邮件中会提示你，一般是http://mentors.debian.net/package/rfs/[package name]这种格式。打开url，里面就是你的RFS邮件规范的目标地址，标题，还有内容。
OK，最后总结一下，整个过程中我们用到了三个系统。第一个是debian bts，通过提起bug来表示你准备打包。第二个是mentors.debian.net，通过注册来上传包。第三个是debian-mentors@lists.debian.org，通过maillist来提醒DD检查你的包。过程有一点小繁琐，不过熟悉之后还不算繁琐。如果真的觉得繁琐，debian在包检测和打包过程中的一堆事情更是会烦死人的。
Reference: [1].Debian 缩略语http://www.cnblogs.com/lidaobing/archive/2010/05/21/1740508.html
[2].软件如何进入 Debianhttp://www.cnblogs.com/lidaobing/archive/2010/05/02/1726138.html
[3].Introduction to the bug control and manipulation mailserverhttp://www.debian.org/Bugs/server-control</description>
    </item>
    
    <item>
      <title>使用uwsgi搭建python应用</title>
      <link>//blog.shell909090.org/blog/archives/1811/</link>
      <pubDate>Wed, 25 May 2011 11:08:38 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1811/</guid>
      <description>wsgi是python的一个标准web服务接口，具体去google pep文档，不解释。在李木头的忽悠下，贝壳试用了一下uwsgi搭建python服务器，感觉还不错。 首先，贝壳将uwsgi打包成deb包，因为这东西和python基本没什么关系，就是一个标准的系统守护服务程序。其中贝壳测试了一下，uwsgi编译的时候是依赖版本的。所以请教了一下thomas，打了uwsgi2.6和uwsgi2.7两个包。没办法，mercurial对python2.7的支持不是很好，每次都出问题。具体的可以加贝壳的repos: https://home.shell909090.org/debian/ testing，然后通过一下贝壳的key，就可以直接安装uwsgi2.6了。当然，不通过key也可以，只是每次安装升级都有警告。 贝壳写了一个很简单的init.d，使用&amp;ndash;vhost来启动uwsgi为服务模式。这种模式的好处是，uwsgi的具体执行的应用都是由nginx来确定的，因此所有的映射只需要修改nginx配置就好。uwsgi参数很多，包括可以指定内存限制，工作进程/线程，定时重启工作进程，多解释器等等。是一个高效的，功能强大的服务器。具体可以自己参考调整。最好的的地方是，uwsgi还支持virtualenv，你可以给不同的应用建立不同的工作环境，从而在环境中使用指定的包，而不是系统包。 下面是一个nginx配置的例子。 location /ticket { include uwsgi_params; uwsgi_param UWSGI_PYHOME /usr; uwsgi_param UWSGI_CHDIR /home/shell/workspace/hg/thost; uwsgi_param UWSGI_SCRIPT main; uwsgi_pass unix:/var/run/uwsgi.socket; } location /mlocate { include uwsgi_params; uwsgi_param UWSGI_PYHOME /usr; uwsgi_param UWSGI_CHDIR /home/shell/workspace/hg/thost; uwsgi_param UWSGI_SCRIPT main; uwsgi_pass unix:/var/run/uwsgi.socket; } location /hg { include uwsgi_params; uwsgi_param UWSGI_PYHOME /usr; uwsgi_param UWSGI_CHDIR /home/shell/workspace/hg; uwsgi_param UWSGI_SCRIPT hgweb; uwsgi_param SCRIPT_NAME /; uwsgi_param SERVER_NAME hgweb; uwsgi_pass unix:/var/run/uwsgi.socket; } 这里面设定了三个应用。由于贝壳不需要virtualenv，所以PYHOME设定了/usr。第一二个应用的基础路径在/home/shell/workspace/hg/thost，脚本叫做main.py。第三个应用的基础路径在/home/shell/workspace/hg，脚本叫做hgweb.py。需要注意的是，uwsgi会以模块方式导入这些脚本，然后使用其中的application对象作为wsgi处理函数。所以不要把application对象赋值放在if __name__ == &amp;lsquo;__main__&amp;lsquo;里面，那没用的。第三个应用指定了SCRIPT_NAME和SERVER_NAME，是因为hg的wsgi模块没有SCRIPT_NAME不工作，而这个应用和前两个不在一起，所以如果不指定SERVER_NAME会导致覆盖冲突。 这种部署模式的好处是，我可以使用一个宿主来管理所有的应用，而不必每个应用启动一个宿主，省去了多个宿主管理的麻烦。而多进程，压力分布等等问题都被uwsgi的配置系统搞定了。于是应用程序宿主做到了彻底的免管理，即装即用，只用调节性能匹配即可。具体程序配置下放到nginx中，要修改映射关系只用管理一个位置。</description>
    </item>
    
    <item>
      <title>debian中文初学者引导——中文化</title>
      <link>//blog.shell909090.org/blog/archives/1809/</link>
      <pubDate>Tue, 24 May 2011 10:36:10 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1809/</guid>
      <description>讲了半天废话，都是在介绍你应该用什么应该用什么，基本没讲到中文用户最关心的一个问题，中文化和输入法。
其实没讲是有原因的，因为debian的中文实在太简单了。在你安装的时候选择中国地区和中文，装出来应该就是中文的。如果不是，或者你安装的时候忘记选择了，可以先运行dpkg-reconfigure locales，出现一个很长的语言列表。其中选择中文的几项，常见的有zh_CN GBK(不推荐18030，多出来的字很少用到，生成时间极长)，zh_CN UTF-8，zh_HK UTF-8(香港地区编码，不用可以不选)，zh_TW BIG5，zh_TW UTF-8(后两者为台湾地区编码，不用可以不选)。选择好后，确定，推荐zh_CN UTF-8为默认编码。然后就是漫长的生成，完事。试试看重启后你的env | grep LANG有没有变成zh_CN.UTF-8？过去就对了，没有的话，手工修改/etc/default/locale加入也一样。其实dpkg-reconfigure locales就是修改了/etc/default/locale和/etc/locale.gen，然后locale-gen一下。
不过这不代表你能正确的使用中文，只是你的满屏看不懂的东西变成了一堆方块而已。因为，你还没装字体。当linux不支持该种语言的时候，出现的是满屏的乱码。如果支持了但是没有字体，则是一个个方块。下面是我常用的一堆字体，保证不含windows，大家可以选择自己喜欢的用。ttf-arphic-bkai00mp，ttf-arphic-bsmi00lp，ttf-arphic-gbsn00lp，ttf-arphic-gkai00mp，ttf-arphic-ukai，ttf-arphic-uming，ttf-wqy-zenhei。其中最后一个就是赫赫有名的文泉驿正黑。安装方法都很简单，aptitude install就好。如果你还不满足，非要自己安装字体。那就在/usr/share/fonts下面新建个目录，把你的字体复制进去（符号链接也可以），然后在这个目录中运行mkfontscale，mkfontdir。全局运行fc-cache。
OK，中文支持快走到最后一步了。你现在应该可以看到满屏的中文，可是，可是——你还什么都输入不进去。恩，没装输入法吧。debian的特点是什么东西都是自己来装，而不是系统帮你装好。所以，你需要自己装输入法。简体中文而言，比较流行的有三种，fcitx（传说中的小企鹅），scim，ibus。下面就要根据你的具体配置选择了。ibus是我用过的比较好的输入法，但是相对比较费cpu，在低端机器（例如netbook）上老是丢字，scim对这种情况略好些。如果你安装了一个以上，可能你还需要im-switch来切换输入法。这个软件会调整/etc/alternatives/xinput-zh_CN的链接指向，这是debian的alternative系统，细节不说。
另外说一句额外的提示，做完上面的步骤，你应当可以阅读和输入中文，但是你看到的软件还是满眼的鸟语，对不对？这是因为软件的语言在软件书写的时候就确定了，他不会随着你的内容改变而改变。但是这并不是说常见软件没有中文版。例如你安装一下iceweasel-l10n-zh-cn这个包，再跑iceweasel (firefox)看看？</description>
    </item>
    
    <item>
      <title>debian中文初学者引导——上网</title>
      <link>//blog.shell909090.org/blog/archives/1806/</link>
      <pubDate>Fri, 20 May 2011 13:46:38 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1806/</guid>
      <description>上网是linux系统的一大强项，除了那个变态的QQ外。
通常而言，上网指的是网络三大基础应用，浏览器，IM工具，电子邮件。最后一个我们介绍过了，那么我们就集中介绍一下linux的两大杀手级浏览器。firefox和chrome。
firefox是debian内置的，不过用的是开放分支，iceweasel。其实主要就是改个名字换个图标做做兼容性测试打几个下游补丁什么的，内核还是一样的，版本号和firefox都保持一致。目前testing下的firefox还是3，不过估计很快就会升到4。firefox下有很多插件，你可以挑选部分来安装，改善浏览器特性。记得linux是一个多用户系统么？对了，你在firefox下安装的插件(addons)都是针对个人起效的。所以，你老婆安装了一堆插件，对你不会构成任何干扰。如果你打算全局安装，可以用apt-get来安装部分插件。
用firefox的话，你可能疑惑flash插件怎么装。系统会给你默认安装拉，不过那个非常不好用。你需要用non-free版本的flashplugin-nonfree，直接从仓库中可以下到。注意这个组件是x86 only的，如果你用64好像要自己装ia32来做模拟，否则无法生效。如果连这个都说版本太老，就去adobe的网站上弄个最新linux版本回来，for debian或者for ubuntu都可以，自己装。
chrome的安装使用就比firefox简单很多了，直接去这里( http://www.google.com/chrome/ )下载合适的包，安装后，你的系统/etc/apt/sources.list.d/位置下会多出一个google-chrome.list，每次update的时候会检查google的仓库，跟随升级。这点chrome做的非常无缝，你基本没有感觉。
另外就是IM软件的选用。国内装机量最大的是QQ，不过鉴于我对企鹅这厮没什么好感，我强烈不推荐你用QQ。整个开源社区做QQ兼容做了不下三次(QQ for pidgin, luma, eva)，还都是在未公布资料的黑盒情况下做的。每次都被腾讯改协议给封掉。自己出了个linuxqq，做的烂不说，还多年不升级，也不管客户反应。微软就算讨厌开源，也好歹没有封杀开源办公软件兼容他的文件格式。既然这厮不打算支持开源，那么开源也不打算支持他。你非要用，可以用webqq，或者很痛苦的用linuxqq。有不支持的功能，请打电话给腾讯吧。
linux下用的比较多的IM还是gtalk,msn和skype三种。不得不感慨大中华局域网的威力，国内和国外的东西都不一样的。国外好用的东西就是进不来，国内的山寨货大家玩的不亦乐乎。首先是最多的gtalk，这个东西什么都不支持。没有定制表情，不一定能传输文件，没有远程协作。那为什么列为第一推荐IM呢？因为这个东西就是为了随时通讯而生的。支持gmail内置客户端，可以在无客户端的情况下用网页使用（这也就是为什么不一定能传输文件的原因）。支持几乎所有的第三方客户端，支持手机，强安全通讯。（腾讯的另外一个问题是，在同一个网段内的人可能可以获得你的聊天记录）并且，这是我所知唯一能同时在多个地点登录的IM工具。你可以在地铁上通过手机聊天，到了公司后直接登录，不必担心手机和电脑互相提下线的问题。电脑关机，手机持续在线。
MSN是老牌IM，不过微软逐步淡化了这个系统。某个版本后居然需要安装100M+的客户端，我就没在windows下继续使用。但是linux下的pidgin可以同时支持gtalk(协议是jabber)和MSN，开一个软件可同时登录多个账户，也不需要一个超级庞大不知道干了点啥的客户端，非常方便。skype是国外知名的IM工具，特点是音频支持能力，说白了基本当电话来用的，在国内发行的版本有记录聊天记录的问题。linux下要使用skype需要独立下载软件，pidgin-skype这个东西居然要skype在运行才能使用，这不是扯淡么？贝壳的repos里面有skype的安装包，你也可以去下载官网的安装包，应该没什么问题。不过最近这厮被微软收购了，也不知道将来命运如何。</description>
    </item>
    
    <item>
      <title>debian中文初学者引导——办公</title>
      <link>//blog.shell909090.org/blog/archives/1805/</link>
      <pubDate>Thu, 19 May 2011 09:49:49 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1805/</guid>
      <description>作为一台中国的电脑，最重要的三大功能就是上网，办公和游戏。当然，linux下你需要暂缓考虑游戏。不过最基础的，办公功能应当还得有。
首先要说明的一个问题是，linux下对微软的office系列的支持并不好。这当然不是linux的过错——你让微软打开odp或者tex文件看看？不过鉴于现在office满天飞的现状，你总要支持doc系列文件，否则办公就直接出局。这部分的是为什么只有程序员才用linux的原因——在IT公司里，用office的是异类。我们公司里，老大带头用openoffice。对于没有这种幸运的人，我的建议是安装libreoffice这个包，这个的前身是sun的openoffice，不过开源社区做了一个完全自由的分支。后来sun杯具了，debian下的头号办公系统就是他了。大部分的文件打开，使用和保存都是没问题的。如果光论正常文档，文字的编辑，段落编排，libreoffice的功能都不会和office差太多。不过高阶功能开始，libreoffice就会变的很不顺手。这是当然的，office用户众多，发掘出的用法和资料不知凡几。libreoffice用户不但少，而且多数还是老外。
当然，作为一个linux用户，通常都抱有一个观点。平文本(plain text)比复杂的办公软件好用多了。大多数情况下，这都是对的。当你写毕业论文的时候，内容比你排版技巧更加重要。当你给上司做一份汇报材料的时候，内容比排版技巧更加重要。平文本的简单编排，libreoffice还是可以比较好的兼容掉office的。如果这些工作上，公司的要求是排版技巧更加重要，那你可以考虑换一个公司。有少部分情况下，排版技巧会比内容更加重要。例如客户PPT展示，公司报纸美编，这些工作不要使用办公软件来完成，你应当做的是寻找合适的软件来做到完美，而不是用一个不专业的软件在那里折腾，然后抱怨不好用。记得我们开始说的么？要懒，而且有创造力。
除了office系列，另一个办公上常用的东西是pdf文档。debian下可以用的选择就比较多了，闭源的有foxit reader，开源的有epdfview，mupdf，xpdf，evince等等一堆。个人比较推荐foxit reader，基本可以解决大部分情况下会让你比较烦恼的中文看不见问题。如果要生成和处理pdf，选项更多。linux下大部分办公软件都可以直接输出PDF。即使不可以，也可以像windows那样，装一个虚拟的打印机，然后输出pdf来。
提到PDF不能不提的就是打印，这点上debian做的并不太好，当然，也不算太差。在windows下的行为通常是，连接打印机，安装驱动，在打印机设备中出现新设备，配置打印机，并标记为默认，然后就可以工作了。在debian下需要先安装cups包，启动服务。再安装合适的驱动，例如hplip-cups。连接打印机，然后用浏览器访问http://localhost:631/来访问管理界面。新建打印机，再选择合适的配置。对于不大熟悉的人，通常会在驱动选择和管理界面上花费不少功夫。这里（ http://zh.wikipedia.org/wiki/CUPS ）介绍了常见系统下的管理工具，能减轻一些负担。不过实话说，直接用web管理并不繁琐。
办公中还有一个比较重要的功能就是收发邮件。作为初学者，我建议你用thunderbird开始，debian下需要安装icedove这个包，这是thunderbird的开放分支。基本简单配置后就可以直接收发邮件了，没什么值得好讲的。不过既然你选择了linux，我建议你好好学习一下gnupg和签名技术。你要知道，通常的电子邮件安全性和明信片背后写的祝福大致相当，以这个作为办公基础实在是一件相当危险的事情。</description>
    </item>
    
    <item>
      <title>debian中文初学者引导——安装</title>
      <link>//blog.shell909090.org/blog/archives/1802/</link>
      <pubDate>Tue, 17 May 2011 10:25:58 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1802/</guid>
      <description>这篇主要讲安装。所以，请去这里（ http://www.debian.org/CD/http-ftp/#stable ）下载一张stable光盘。如果你对testing和unstable比较感兴趣，没问题，装好了可以改的。但是对于初学者，我建议你从stable开始玩起。在选择了合适的架构后，你会被引导到光盘镜像服务器上。作为国内玩家，我建议你别用官方服务器，那个在美国，很慢。个人推荐中科大服务器（ ftp://ftp.cn.debian.org/debian-cd/ ）去下载合适镜像，服务器是电信联通教育网三线路的，无论是学生还是商业人士都很合适。目前而言，我推荐你下载debian-6.0.1a-i386-netinst.iso作为安装镜像。这个镜像只安装最小部分，而且在安装时无须联网，适合大多数场合。注意，如果你的机器只有无线网络，请不要使用这张镜像，因为难度太高了。
好吧，下面我假定你有镜像了，你有三种常见的安装模式，刻录光盘安装，liveusb安装，虚拟机直接使用镜像。刻录光盘没什么好多说的，虚拟机直接使用就看你会不会用虚拟机，liveusb就有点复杂。具体参考我写的这篇文章（ http://blog.shell909090.org/blog/archives/1646 ）。无论从哪里开始，你都必须保证开机启动的是你的debian安装镜像。所以发生例如debian安装时进入了硬盘上的windows这种问题别来问我，直接去google BIOS设定。
很多人经常问的一个问题，是关于如何安装linux和windows共存。其实这种模式并不好，至少我知道的使用这种模式学习linux的人都失败了。因为你平时会经常进入windows，然后懒得出来了。最好的方法是，彻底告别你的windows，然后下定决心用linux解决所有问题。如果你觉得底气不足，可以用虚拟机运行一个小实例，至少我觉得这比共存模式方便。因此，我不会介绍windows和linux共存的有关问题——这些问题太复杂了，虽然技术上说并不难，但是会占用大量篇幅。
单独安装linux也需要划分分区。通常的建议是/ /usr /var /home /tmp swap全部可以考虑分开。不过作为初学者，我建议你用一个分区/就够了。如果内存在1G及其以上，也不一定需要用swap。减少麻烦不是什么值得羞耻的事情，制造麻烦才是。如果你看了半天，搞不懂这段话什么意思，我建议你先看看下一篇《系统管理》中关于linux文件组织结构的介绍。如果你觉得有些不安，常见的方法是/ /home swap。这通常用于大型机器上，分离的home会让你在重装时无须额外的做数据保留操作，swap则提供更高的内存使用率。文件系统的建议是全ext3，这个会减少你很多的管理麻烦。如果你想尝试一些新的文件系统，最好不要在/上面尝试。
安装过程没什么好多说的，安装完成后，才是一系列最艰难的地方。debian-netinst是不带X系统的，所以如果你想使用图形界面，安装完成后的配置才是最关键的。通常你的电脑可以联网，因为安装的时候会自动配置你的网卡。如果你是无线网卡，请先连一根有线。如果不行，那就不是初学者课程了——你需要自行安装wpasupplicant，iw和相关依赖包，然后手工建立config文件。通过config连接合适的ap，再手工dhcp获得地址。总之，这些问题初学者就不要想了，请直接拉一根网线，接上，启动机器（次序不要反），你的机器就联网了。如果不是，找人求助吧。
第一件事，请先去/etc/apt/source.list下面，修改你所选用的镜像。如果你希望用testing或者unstable，直接修改此处就可以了。通常我们需要安装contrib和non-free部分，所以在main后面加上contrib和non-free。这里有些重要的商业程序，例如sun-java，rar/unrar，flashplugin等等。另外就是名称。通常镜像后面的名称是lenny这类的代号，建议改成stable这样的代号。当debian升级，版本切换的时候，你的系统会自动的升上去。当然，商业级别的服务器反之，不要用stable这样的代号，因为会造成稳定性问题。
当你修改完source后，执行aptitude update，然后再执行aptitude install vim slim xfce4。当然，如果你喜欢用gnome，那就是aptitude install vim gdm gnome。然后重启？你的机器应当出现了一个可爱的，花里胡哨的界面。啧啧，简直俗毙了。不过鉴于新手都比较习惯图形界面，我还是继续从图形界面开始介绍吧。</description>
    </item>
    
    <item>
      <title>debian中文初学者引导——系统管理</title>
      <link>//blog.shell909090.org/blog/archives/1800/</link>
      <pubDate>Mon, 16 May 2011 10:08:01 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1800/</guid>
      <description>装什么系统就要能玩什么，如果你安装的是windows，也需要解决几个最简单的管理工作——文件存放，如何联网，安装软件。不过幸好，用debian的好处是，你暂时不用担心病毒了。
在进行管理工作前，我先说明一个事实。平时你在windows下，可以随便进行的系统管理工作，在debian下面不是谁都能干的。如果linux也像windows那样允许所有用户都修改系统，那早就天下大乱了。为了修改系统关键部分，你需要root权限。如果在命令行下（多数系统管理都是命令行完成的），那么用su-来变成root，或者在执行具体命令的时候在前面加上sudo，如果你已经配置了sudo工具的话。需要特别注意的是，我不建议新手随时都顶着root权限做事，这很危险。在windows下我们很容易修改系统导致出错和崩溃，原因之一就是我们随时都可以拥有系统最高权限。所以，当你需要root权限的时候，开一个root的命令行来管理，不要一直用root命令行做日常工作。
首先是文件存放，这和windows有基础概念区别。windows的文件组织结构继承了DOS的特征，使用A-Z的分区号标示每个物理设备。而linux的文件组织结构继承了unix的特征，所有数据都在一颗单根树下。就是说，系统只有一个根目录。每个物理设备，都被“挂载”在特定的目录下。在windows下，我们把光盘放入光驱，就可以在F盘上面看到一颗目录树。如果在linux下，我们需要将光盘“挂载”在某个目录下。这个目录下的原本内容就消失不见（放心，没有被物理的删除），取而代之的是光盘的目录结构。当然，debian下面通常有自动挂载程序会帮你完成检测到光盘插入后自动挂载的过程。
文件存放的结构也和windows大有不同。windows下的程序安装和文件组织遵循“同包内聚”的结构特征。即是说，只要属于同一个软件，这些文件就被放到一起。大家可以看看programfiles下面一堆堆的目录，每个都属于一个软件。而linux则基于FHS结构，大部分的时候是“功能内聚”，即是说，同类功能的文件被放到一起。例如可执行代码基本放置在/usr/bin和/usr/sbin，前者是普通用户可执行代码，后者是特权用户可执行代码。当你执行ls的时候，其实是调用了/bin/ls。这样的好处是路径设定及其简单，你不信可以对比windows的path设定和linux的path设定。当然，坏处是无法通过直观的文件删除来删除所有包。
这当然不代表debian卸载软件比windows更费力。实际上，是更简单。debian提供了dpkg工具来管理包，和apt工具来管理仓库。你可以很简单的用apt-get install 包名，来安装一个包。用apt-get purge包名来彻底删除包。purge和remove的区别相当于windows中的“是否删除注册表”，如果是purge，是不会保留你自己修改和定制的配置文件的，除非这些数据存在于你的HOME目录下。你可以用aptitude update来追踪系统升级，不过这个不会自动的未你下载最新包。update只是检查服务器上有没有新的包出现，然后通知你，有新东西了。升级是upgrade的事情，不过我建议手工进行升级，具体要多读debian参考手册，也要有几次搞坏系统的准备。
最后一个问题是如何联网。debian是一种很网络化的系统，你的系统升级，使用，都是通过网络的。乃至于我每天用系统的时候，一多半时间都在透过ssh来管理不同的设备。对于这种系统，如何联网是一个很重要的问题。如果你是有线网络，由于不大可能断线，我建议通过/etc/network/interfaces来配置。方法在debian参考手册里面，根据你是dhcp还是static配置好，重启，基本就固定下来不用动了。如果是无线网络，建议直接安装NetworkManager，并且注释掉/etc/network/interfaces中的所有内容。nm的使用很简单，你看着办就好。</description>
    </item>
    
    <item>
      <title>debian中文初学者引导——总论</title>
      <link>//blog.shell909090.org/blog/archives/1798/</link>
      <pubDate>Fri, 13 May 2011 10:39:45 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1798/</guid>
      <description>上次写了篇debian中文争议问题，结果发现好多人都在搜debian中文，我估计他们对debian中文名没什么兴趣。纯粹想玩玩debian，但是却难于入手。由于此类人中中文使用者居多，对于debian良好的资料无法使用。所以我准备写这篇debian中文初学者引导，来让更多的人可以玩玩这个系统。
在开始玩debian之前，请确定你是适合使用linux的人群。当然，这里并不是说linux只适合程序员。我认识的人里面，使用linux的还有金融工作者，大学教师（非计算机专业），初中学生。他们使用linux完成日常工作，没有什么太大的问题。如果你希望学习linux，首先，你不能是重度游戏爱好者。linux下的游戏无论从数量还是质量，和windows都不在一个级别。其次，你需要一定的英语水准。当然其实不需要太好，贝壳自己连四级都没过。你只需要能认识基础的指令和提示，照抄到网络上即可。如果您是初中未毕业，26个字母尚有困难，建议还是别用了。最后，也是最重要的一点，你需要热爱折腾，总觉得现有软件满足不了自己，但是又没有什么好办法。当然，如果您热爱折腾又有办法，那估计是个程序员。程序员就别废话了，完全没学过linux的程序员不算是完整的程序员。
我的目标是，尽量让你从最简单方式安装一台系统出来，然后普通使用三个月以上，期间基本不用windows。当然，鉴于中国国情，有些网站是永远的IE，所以要用到windows是难免的。实际上，如果你的学习能力不算太差，大约在一周以后，使用linux的不舒服感就会减少，甚至消失，出现问题无法搞定的几率也会降低。大约在一个月后，就会开始自己折腾各种配置。差不多从你开始折腾自己的配置开始，你就会无可救药的爱上linux。
学习linux最重要的几件事情是——合作，创造，懒惰，不满足。
当你学习linux时，最重要的就是和其他人合作，包括看文档和问问题。所以，首先请学会自己查看常见文档，包括man和google，来解决一些简单的问题。例如ls的哪个参数能够列出目录详细信息这种问题就不要问出来。次之，你需要学会《提问的智慧》（http://bbs.csdn.net/IndexPage/SmartQuestion.aspx），请不要问出愚蠢的问题来。其中最愚蠢的就是，为什么linux不能XXX，windows可以。唔，为什么老虎不能拉车呢？驴可以。最后，尽量认识几个linux玩的不错的，又比较有空的人，这对解决你的燃眉之急很有帮助。
作为linux玩家，你必须是懒惰而具有创造力的。通常linux玩家不喜欢太“勤劳”的人。自己辛辛苦苦的在一个文件的所有行头部加上行号是一个很愚蠢的行为——作为一个懒人，你应该想——这个是不是有人做过了，有没有什么比较省力的方法？要能够懒惰，你必须很有创造力。见没见过用光驱不断弹出收入来晃动婴儿床的想法？恩，这家伙很懒，我很欣赏。
作为开始使用linux的基础，请把这个网址（http://www.debian.org/doc/manuals/debian-reference/）收入你的收藏夹。里面说了很多实用的东西，足可引导一个人正常的使用整个系统完成工作。其次，专门准备一台电脑，不用太好，用来安装debian。如果没有，那就用虚拟机。尽量不要多分区混合安装，因为你不会记得去用linux的。现在一台专门的电脑并不贵，一般人家里都有几台很老的电脑，用那个就好，通常还免去了最新硬件无法驱动的烦恼。
如果上面的东西你都看过了，确定自己需要学习使用debian，那么，请慢慢看接下来的文章。</description>
    </item>
    
    <item>
      <title>vmware-workstation 7.1.2 source for linux-image 2.6.38</title>
      <link>//blog.shell909090.org/blog/archives/1781/</link>
      <pubDate>Wed, 20 Apr 2011 09:51:17 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1781/</guid>
      <description>I&amp;rsquo;m running a vmware-workstation under debian testing. Last week I update kernel from 2.6.32 to 2.6.38, then vmware don&amp;rsquo;t work.
Searching for patch with kernel modules, finally I got those.
http://blog.shell909090.org/vmware-source.tar.gz
http://blog.shell909090.org/vmware-7.1.2-2.6.38-1-generic.patch.gz
Source is tested under debian testing, but should work for all dist which use 2.6.38 as kernel. Patch is not tested.
Here is how to make it.
#cd /usr/lib/vmware/modules/source
#for file in *; do tar xvf $file; done</description>
    </item>
    
    <item>
      <title>approx无法升级问题的解决</title>
      <link>//blog.shell909090.org/blog/archives/1749/</link>
      <pubDate>Wed, 23 Mar 2011 09:47:38 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1749/</guid>
      <description>approx最近不知道怎么回事，无法升级。每次aptitude update都无任何升级提示。而直接指向mirrors是可以升级的。
其实，去缓存目录下删除Release和Release.gpg就好了，通常是在/var/cache/approx下面的debian/testing/下面，testing是你的/etc/apt/source.list中指名的发行。</description>
    </item>
    
    <item>
      <title>debian是什么</title>
      <link>//blog.shell909090.org/blog/archives/1739/</link>
      <pubDate>Sun, 20 Mar 2011 23:19:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1739/</guid>
      <description>debian是一种开源的操作系统，其内核理论上是可变的，主要有linux/freebsd/hurd三种。但是目前为止，主要被采用的都是linux内核，大部分都是基于i386或x86_64编译。
debian系统使用一种被称为deb的打包格式，这种格式中声明了依赖性问题，但是没有解决。所谓依赖，是指一个包内不包含运行所需的所有组件。例如特定版本的lib，辅助配置程序等。将依赖分离有助于多个包共享一份被依赖程序，并且几个组件可以独立升级。windows中通常将依赖包加入安装包内部，但是这样往往不利于被依赖程序的升级。(windows的二进制兼容性做的并不很好)如果没有打入安装包，windows中通常表现为安装一个程序的过程中提示你需要安装某个东西，请去哪里下载。debian的依赖是依靠一套被称为apt的系统解决的。在这套系统中，你可以指定一个源(debian mirror)，或者多个源。apt系统会自动将上面所有软件的目录下载下来供你查阅安装。如果有依赖性问题会自动安装依赖的包。因此，配置好的apt系统相当于一个软件仓库，里面有很多程序。你可以选择其中的一部分，安装使用，而无须忧心安装过程。
apt的更新分为三部分，一部分是这个源中有哪些包，这些包的元信息(meta info)。包括这些包的名字，版本，所依赖程序的版本等。当一个源获得了新的软件的时候，就会更新这个列表，或者叫目录。客户端更新目录后就可以发现，有哪些包需要更新或者下载。而另一部分则是这些包文件本身。最后一部分是以上内容的签名。在元信息上有包文件的校验，而元信息本身则被一个非对称密钥签名。这个签名由apt的管理者签署，从而保证只有受到管理者认可的包会被客户安装，其他恶意插入的包都会被警告。
debian系统默认是没有图形界面的，也没有ssh操作界面，debian的基础系统甚至没有一个可启动的内核。基础系统中只包含了一个文件结构，和被简单配置能够自我管理的apt系统。最精简系统在基础系统之上，安装了内核和引导管理器，从而保证在某个系统上可自启动和自引导。debian的businesscard安装包包含了一个建立其他精简系统所需的所有工具的集合，而netinst安装包则增加了建立最小系统所需的镜像。两者的区别在于，businesscard必须联网以下载最小系统所需的所有安装包，而netinst可以从光盘上获得这些包。
当然，这离一个完整的系统还差很远。作为服务系统，必须安装ssh以便于远程管理。作为桌面系统，需要安装X，WM，还有其他应用程序。甚至，作为网络系统，基础的网络配置组件都是默认不完整安装的。你必须设定网络，设定源，然后更新列表，而后安装合适的程序。这一切对于初学者非常不友好，所以debian还有一种gnome标准安装包，在光盘上放了建立一个标准系统所需的所有包。你可以在不联网的情况下，自动建立起一个标准的桌面。
debian的特性是非常强的自我定制，虽然从根本上说，gentoo的定制方式才是极限。但是长期滚动编译对维护而言是一个非常大的挑战(debian的维护方式都会让很多公司感到不舒服)。debian可以很方便的直接定制一个特制化系统，而跳过编译过程。这对于自己需要一定程度定制的高级linux用户非常有吸引力。</description>
    </item>
    
    <item>
      <title>社区的基础规则和原因</title>
      <link>//blog.shell909090.org/blog/archives/1735/</link>
      <pubDate>Sat, 19 Mar 2011 22:03:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1735/</guid>
      <description>1.社区中的常规事务由个人申请，申请到的人全权处理问题。
2.在申请前，需要在社区公共平台呼叫请求。大致类似于&amp;quot;我要做某事了，有没有人在做或者能够提供帮助，请联系我&amp;quot;。
3.如果有人对贡献者所做的工作有异议，可以请求修改或者复议。
4.如果仍旧不满意，可以申请替换贡献者。经过全社区成员投票后就会变更贡献者。
5.如果不能明确归属的事情，或事情本身就比较重要，则由全社区成员投票。
6.如果具体操作者在不确定做法的时候，可以发起讨论和投票，获得社区意见。
为什么社区通常具有以上工作模式？
首先，社区的原则是自愿。通常社区是不会为个人的工作支付薪酬的。因此，谁愿意做什么事情，做到什么质量，完全是不可控制的。这也就是为什么社区事务是由个人申请的，因为并不能向社区中的具体人员指派工作。当一个问题比较严重的时候，也只能由资深社区人员呼吁有没有人志愿解决，而不能强行分派。这是社区为各个软件公司所诟病的特性之一。
为什么申请前需要在公共平台呼叫请求？这样首先防止了工作冲突。尤其是上游发行一个新包的时候，如果没有呼叫请求(debian社区好像叫做ITP)，就会出现两个打包者重复工作的问题。其次，如果前任因为某些因素放弃了继续处理，也许他能给你一些额外的帮助。尤其是兼容性问题上的帮助，这样比较有助于保障一致性。
为什么通常事务由申请到的人全权负责？因为一个事务会牵涉到非常多和复杂的细节问题。例如一个包的临时文件位置是使用/tmp还是/var/tmp，依赖库是使用gcc4.1还是gcc4.4。这些细节问题要一一搞定，社区没有那么多时间。如果志愿者是个熟练的人，往往问题的决策会采用比较通用的方案，社区会无条件接受志愿者的方案。当志愿者的方案比较糟糕，或者至少说有待推敲的时候。如果有人用的不爽，就会提出异议，或者更进一步提出解决方案。如果没人关心，那就让他去了。
为什么对于仍旧不满意的问题，只能替换贡献者，而不能强迫贡献者接受方案呢？因为，上文阐述了，贡献者是出于自己的自愿，来帮助社区的。强迫他们接受某个他们所不习惯的想法首先并不尊重他们，招致他们的强烈反感。其次，这些方案可能扰乱他们的工作思路。所以从这个角度来说，当志愿者愿意接受你的方案时自然好说。而如果万一他不接受，要使得自己的想法实现只有让全社区基本同意，你，或者其他人接替这个志愿者的部分工作。
为什么社区在决定性的问题上，采取贡献者民主投票的方式呢？因为，如前我们看到，社区的发展是每个贡献者提供自己的力量共同发展的。这样的社区一定会有不协调的情况。而让冲突升级，导致社区分裂，是不利于社区发展的。可以看到，社区是要讨好贡献者的。更多，更强力的贡献者，社区就能够有更好的发展。所以，采取民主投票的方式，是征求最多贡献者的同意，让他们支持社区，愿意继续为社区作出贡献。并且期待不同意的贡献者，能够理性的作出一定妥协，接受社区的大多数意见。
当然，由于意见未能统一而倒置社区分裂的情况常有发生，尤其是社区同时拥有两位强势的领导的时候，并且他们的意见碰巧相左的时候。但是在大多数时候，贡献者会考量，自己是否值得为了某个意见放弃整个社区。考量的结果往往是接受社区的结论，但是保留自己意见。这种行为会保留社区中最多的人，并且可以期待剩下的人能够接受。这一原则，我们称为&amp;quot;尊重大多数贡献者&amp;quot;。而社区中，部分事物自主可决定的规则，只是因为社区假定你的行为会被大多数贡献者接受。
我们可以看到，社区在发展中采取了很多自主判断假设和市场机制。社区需要假定你的行为是被大多数贡献者所能接受的。社区假定你能够分辨什么是&amp;quot;比较重要&amp;quot;的事情，从而需要征求多数意见。什么是你不需要劳动社区帮忙的事物。在正常的世界中，我们的假定通常都是成立的。debian社区大部分打出来的包并没有人提出异议。对于社区中文名定名或者下一开发版代号之类的问题，通常也是社区协商确定后再行处理的。因此，我们的社区通常工作良好。但是在某些特例下，例如有人无法理解什么问题是重要问题，哪怕大多数的人对这个问题的认识并没有困难。或者，更进一步说，有人捣乱。在这些特例下，社区往往会陷入一种比较混乱的状态。国外经常有所谓&amp;quot;民主效率低于专制&amp;quot;的结论，就是这个现象的集中爆发和体现。</description>
    </item>
    
    <item>
      <title>debian社区争论摘抄</title>
      <link>//blog.shell909090.org/blog/archives/1731/</link>
      <pubDate>Fri, 18 Mar 2011 21:12:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1731/</guid>
      <description>jobinson &amp;lt;jobinson99@gmail.com&amp;gt;
强烈反对这种所谓的尊重说
1、这是人身攻击，攻击他人人品，不是在认真讨论问题
2、我并没有违规。我的作为，是符合debian维基本身规则的，如果这样你还认为我违反规则，不尊重别人，那么，首先的问题就是你拉大旗扯虎皮，把你的个人观点强加在整个debian社区之上，这才是更大的不尊重社区。
也就是说，在目前维基规则未变的情况下，我并没违规，上面几个认为我不尊重人的人，其实才是真正的违规者。
3、请不要以贡献来论我的对错，这是道德绑架，虽然我对debian目前官方社区的贡献有限，但在其他地方的贡献，请不要在不清楚的情况下肆意抹杀，然后试图以玩道德绑架的方式让我闭嘴。
4、单纯讲翻译问题，debian社区确实太多文档老久了，以至于我都不知道debian中文翻译团队是否活着，这是谁的问题？如果按贡献论，是不是原有社区的人都该被论罪？这显然会激起众怒，如果楼上认为贡献论可行，那么接下来激怒社区的责任楼上要负全责。
5、如果debian是世界性的，那么debian就应该容纳得了中文、英文、德文、日本、西班牙文……，而不是只能使用英文。现在这种情况，连个中文名都起不了，还谈什么世界性，简直就是狭隘英文中心主义。
6、请不要回避问题，老左躲右闪的，以贡献啊、尊重啊、其他更需要啊之类的来搪塞对问题的真正讨论。要不干脆关闭这个讨论，要不就不要躲躲闪闪，认真对待。
还有，就是存在众多莫名其妙的所谓公认规则，结果一认真，才发现不过是个人意见，强加给这个社区的，这样的个人规则，请不要再秀出来，这才是真正对社区其他人的极大不尊重！
其实，我也不想纠结在这些名词上，但如果连这么个名词都容纳不下，我不觉得还能容纳下什么别的东西，我不知道英文社区是否也是如此。
Aron Xu &amp;lt;happyaron.xu@gmail.com&amp;gt;
2011/3/17 jobinson &amp;lt;jobinson99@gmail.com&amp;gt;
&amp;gt;
&amp;gt; 强烈反对这种所谓的尊重说
&amp;gt; 1、这是人身攻击，攻击他人人品，不是在认真讨论问题
也许有些人的话确实说的不怎么恰当，这是说话人的问题，呵呵。
&amp;gt; 2、我并没有违规。我的作为，是符合debian维基本身规则的，如果这样你还认为我违反规则，不尊重别人，那么，首先的问题就是你拉大旗扯虎皮，把你的个人观点强加在整个debian社区之上，这才是更大的不尊重社区。
&amp;gt; 也就是说，在目前维基规则未变的情况下，我并没违规，上面几个认为我不尊重人的人，其实才是真正的违规者。
你的操作没有违反权限（否则没权限你无法编辑），但是违反了在社区活动的一条基本准则：做自己的事不要给别人带来麻烦。现在你私自改了东西就给很多人带来了麻烦。
像项目名称这样重大的决定应该是团队的共同意志，如果你直接不经说明就私自改了，那么你忽略了其他人的意见，这的确是不尊重他人。社区中不是你有权限编辑的地方就可以随意编辑，赋予你权限是对你的信任，相信你能够和其他人好好地合作，共同把项目做好。如果说有了权限就觉得自己什么都可以做，那就辜负了社区对你的信任。
3、请不要以贡献来论我的对错，这是道德绑架，虽然我对debian目前官方社区的贡献有限，但在其他地方的贡献，请不要在不清楚的情况下肆意抹杀，然后试图以玩道德绑架的方式让我闭嘴。
何必把这个问题升级到对与错呢（大家都停止说这个对错，^_^）。我觉得只是你做事方法不对，现在不应该在这里讨论这个名字如何如何，而是尊重大家的意见暂时不使用它，并且通过主流媒体做出更正。
昨天我联系 cnbeta.com 等两三个站点删除了文章，LUPA等社区还发了一些更正。希望大家能到 cnbeta 等地方投稿更正这个事情。
4、单纯讲翻译问题，debian社区确实太多文档老久了，以至于我都不知道debian中文翻译团队是否活着，这是谁的问题？如果按贡献论，是不是原有社区的人都该被论罪？这显然会激起众怒，如果楼上认为贡献论可行，那么接下来激怒社区的责任楼上要负全责。
Debian 文档翻译在 Squeeze 周期里没有怎么更新 installation-guide，重译了 maint-guide。网页翻译匆匆地赶出来了一个 release-notes。
如果你要参与，非常欢迎，这个团队现在可以说基本只有个别人做零星贡献。自由软件社区里，每个人都是自由的，行为上第一条是不给别人捣乱，第二条是交接好工作。翻译上一直没人接手，如果谁愿意来可以到这里先询问一下情况——比如你现在问，这个团队是否活着。
5、如果debian是世界性的，那么debian就应该容纳得了中文、英文、德文、日本、西班牙文……，而不是只能使用英文。现在这种情况，连个中文名都起不了，还谈什么世界性，简直就是狭隘英文中心主义。
这种说法有些偏激，和中国中央电视台不能称为CC{T,A}V有一拼了（笑）。当然，Debian和中文名之间并非完全和CCTV那个情况相同。
Debian不是不能有中文名，而是现在还没有让众人觉得确实最好的名称。过去常说的&amp;quot;大便&amp;quot;显然不雅，&amp;ldquo;蝶变&amp;quot;某种意义上讲是个不错的候选，但还是有很大反对的声音。
不管好与不好，想出来的都是&amp;quot;候选&amp;rdquo;，不能直接改 Wiki 强迫别人接受你的意志，哪怕你解释说只想做个实验。
这样的实验是不合适的，就好像说某国核电站出了问题，事后说我只想实验它出了问题能有多大影响，这显然不对。
6、请不要回避问题，老左躲右闪的，以贡献啊、尊重啊、其他更需要啊之类的来搪塞对问题的真正讨论。要不干脆关闭这个讨论，要不就不要躲躲闪闪，认真对待。
其实讨论能展开这么久，你回避了最关键的问题。现在是你做得不对，未经讨论滥用了社区赋予的权限，为啥还在说别人呢。
争论的话说多了，谁都可能说出赶劲的话，这时候大家坐下来喝杯茶冷静下，呵呵。
还有，就是存在众多莫名其妙的所谓公认规则，结果一认真，才发现不过是个人意见，强加给这个社区的，这样的个人规则，请不要再秀出来，这才是真正对社区其他人的极大不尊重！
这确实是公认的规则，难道赋予你的权利不是给你的信任吗？如果说，必须要精细地管着你的权限才舒服，那我在这里无话可说。可以随意编辑的分到一类，不可以随意编辑的再分到一类并锁定，我觉得那时候会有人大叫不公平。
其实，我也不想纠结在这些名词上，但如果连这么个名词都容纳不下，我不觉得还能容纳下什么别的东西，我不知道英文社区是否也是如此。
不想纠结就不说这些，赶快把给大家造成的麻烦处理掉。如果你想讨论社区的规则是怎样的，社区怎样才有包容性，再单独发主题，有兴趣的人会愿意和你讨论三百回合。:P
Tao Wang &amp;lt;dancefire@gmail.com&amp;gt;
说你不尊重社区，你还觉得有错了。还什么这论，那主义的，还论罪，我怎么恍惚觉得倒退了几十年，又看到了满眼红色的世界？
真是莫名其妙，看看jobinson都干了些啥：
http://www.udpwork.com/item/4522.html
http://www.freebsdchina.org/forum/topic_51353.html
http://www.freebsdchina.org/forum/topic_51346.html
http://zh.wikipedia.org/w/index.php?title=Debian&amp;amp;diff=15902934&amp;amp;oldid=15830869
http://zh.wikipedia.org/w/index.php?title=Linux&amp;amp;diff=15963993&amp;amp;oldid=15926795</description>
    </item>
    
    <item>
      <title>debian中文名的争议</title>
      <link>//blog.shell909090.org/blog/archives/1729/</link>
      <pubDate>Tue, 15 Mar 2011 17:31:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1729/</guid>
      <description>最近在debian社区上爆发了关于debian中文名问题的争议，我大致摘录一下，具体可以看debian maillist archive。毕竟这里不是wiki，我就不求全了。
起因是因为Jobinson在社区未达成一致的前提下，将wiki中debian的中文名称改为了&amp;quot;蝶变&amp;quot;。而后，wenheping告知了LIDaobing。后者是DD。LIDaobing将wiki还原，并且发起了社区讨论。他们之间的原文贴录如下：
(03:37:51 PM) Atlas Jobinson: 我想问你个问题，你是什么时候知道这维基被改的？通过什么途径知道的？ (03:38:01 PM) LI Daobing (李道兵): 很晚 (03:38:11 PM) LI Daobing (李道兵): 因为我没有 subscribe 那个页面 (03:38:22 PM) LI Daobing (李道兵): wenheping 告知的 (03:38:29 PM) Atlas Jobinson: 你可以看看我最早翻译于什么时候 (03:38:37 PM) LI Daobing (李道兵): 看到了 (03:38:40 PM) Atlas Jobinson: 2011-03-04 (03:38:42 PM) LI Daobing (李道兵): 10天前 (03:38:52 PM) Atlas Jobinson: 那说明什么问题？ (03:39:06 PM) LI Daobing (李道兵): 说明你在没有取得社区共识前 (03:39:09 PM) Atlas Jobinson: 还有，那个wenheping，是我在freebsd上得罪他了 (03:39:12 PM) LI Daobing (李道兵): 就修改了 wiki 页 (03:39:23 PM) Atlas Jobinson: 错，说明debian中文的参与者都不关心 (03:39:30 PM) LI Daobing (李道兵): 罗伯特议事法则 (03:39:34 PM) Atlas Jobinson: 连被人改了都不知道 (03:39:38 PM) LI Daobing (李道兵): 不要追究动机 (03:39:47 PM) LI Daobing (李道兵): 我们关心的是 ibus, fcitx, scim 的 bug (03:39:50 PM) LI Daobing (李道兵): 不是这个 (03:40:04 PM) Atlas Jobinson: 是，我也更关心那些 (03:40:27 PM) Atlas Jobinson: 但实际上，这个修改已经过了十天，才有反应，都快两周了 (03:40:35 PM) Atlas Jobinson: 快成既定事实了都 (03:40:44 PM) LI Daobing (李道兵): Debian 的运作不需要 wiki (03:40:45 PM) Atlas Jobinson: 那假设我在其他地方修改呢？ (03:41:05 PM) Atlas Jobinson: 那你还那么看重维基的修改？ (03:41:08 PM) LI Daobing (李道兵): Debian 的核心在于打包人员, DM, DD, ftp-master (03:41:13 PM) Atlas Jobinson: 我知道 (03:41:15 PM) LI Daobing (李道兵): 那是错的 (03:41:17 PM) LI Daobing (李道兵): 我知道了 (03:41:23 PM) LI Daobing (李道兵): 我去纠正他 (03:41:28 PM) LI Daobing (李道兵): 仅仅如此而已 (03:42:02 PM) Atlas Jobinson: 如果两周是个争议期，恐怕这两天我都不会让你安心的，呵呵 (03:42:42 PM) LI Daobing (李道兵): 我真不知道你能跟谁合作 (03:42:53 PM) Atlas Jobinson: 我仅仅是表达意见 (03:43:21 PM) LI Daobing (李道兵): 你为一个社区做贡献是因为你认同这个社区的理念 (03:43:29 PM) Atlas Jobinson: 而且这手段是合理的，并没有在规则外。 (03:43:56 PM) Atlas Jobinson:但谁能说他认同的观点就是该社区的观点呢？比如说debian不需要炒作？ (03:44:03 PM) Atlas Jobinson: 这是光晕效应 (03:44:14 PM) LI Daobing (李道兵):如果你不认同这个社区的理念，个人建议还是创建自己的社区比较好 (03:44:30 PM) Atlas Jobinson:可能你认同其他观点，但这个观点很可能是你个人观点强加给社区的 (03:44:33 PM) LI Daobing (李道兵): 比如在 维基百科 (03:44:55 PM) LI Daobing (李道兵): 如果这个观点有问题，你可以在 maillist 上讨论啊 (03:44:59 PM) LI Daobing (李道兵): 有何不可 (03:44:59 PM) Atlas Jobinson: 因为我没在debian社区中找到这一条 (03:45:14 PM) Atlas Jobinson: 也没人公开宣称这一条 (03:45:21 PM) LI Daobing (李道兵): 如果这个观点有问题，你可以在 maillist 上讨论啊 (03:45:55 PM) Atlas Jobinson: 那么，此条很可能就是你自己过于想当然的想法。 (03:46:08 PM) Atlas Jobinson: 观点是你的，是你应该发起这个讨论，而不是我 (03:46:21 PM) LI Daobing (李道兵): 好的 (03:46:42 PM) LI Daobing (李道兵): 我直接把这些聊天记录发到 maillist 吧 (03:46:46 PM) Atlas Jobinson: 而你不也是没经过讨论就宣称：debian不需要炒作的么？你这不也首先违规在先了？ (03:46:49 PM) LI Daobing (李道兵): 你订阅了 maillist 么？ (03:46:59 PM) Atlas Jobinson: 我刚刚订了 (03:47:02 PM) LI Daobing (李道兵): OK</description>
    </item>
    
    <item>
      <title>linux社区规模估量</title>
      <link>//blog.shell909090.org/blog/archives/1725/</link>
      <pubDate>Sun, 13 Mar 2011 11:25:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1725/</guid>
      <description>debian是一种重要的linux发行，基于其上有很多衍生，其中最知名的就是ubuntu。debian的包是通过ftp mirrors来进行发布的，因此一个国家的镜像数量，大概能够反映出这个国家debian社区的规模。也大概的，能够说明这个国家开源软件社区的发展。
debian的所有官方镜像有一个列表，具体在这里（http://www.debian.org/mirrors/list）。我利用wget下载了这个镜像，然后写了一个简单的脚本来处理这个文件。文件发布在这里(http://blog.shell909090.org/debmircnt.py)。以下是结果。
United States 48 Germany 32 France 28 Taiwan 13 Australia 12 Japan 11 Great Britain 11 Canada 11 Portugal 9 Italy 9 Russia 8 Sweden 8 Spain 8 Czech Republic 8 Brazil 8 Austria 7 Bulgaria 7 Poland 7 Turkey 7 Netherlands 7 Hungary 5 Greece 5 Ukraine 5 Belgium 5 Thailand 5 Croatia 4 Finland 4 Lithuania 4 South Africa 3 Romania 3 Switzerland 3 Denmark 3 China 3 Korea 3 Slovakia 3 Latvia 2 India 2 Mexico 2 New Zealand 2 Indonesia 2 Chile 2 Slovenia 2 Iceland 2 Belarus 2 Israel 2 Argentina 2 Ireland 2 Nicaragua 1 Colombia 1 Uzbekistan 1 Kazakhstan 1 Estonia 1 Luxembourg 1 Moldova 1 New Caledonia 1 Hong Kong 1 Bosnia and Herzegovina 1 Venezuela 1 El Salvador 1 Singapore 1 Algeria 1 Norway 1 French Polynesia 1 Costa Rica 1 Malta 1 Bangladesh 1 360 这个列表有几个有趣的数据。首先是中国的排名，不算太差，三个镜像，在第30名上下，比香港的一个镜像好多了。不过考虑到香港的人口和中国的人口，让人有点笑不起来。其次是俄罗斯的排名，以8个镜像居于11位。这也不难理解，因为俄罗斯不使用英文，所以在俄罗斯流行的不是常见的英文发行版本。德国比法国多出四个镜像居于第二位，美国是debian的发源地，以48个镜像的惊人数量居于第一。世界全部镜像是360个，光是前三位的镜像数量就占了将近三分之一。台湾地区以13个镜像居于第四，这到让人很是意外，居然比日本还多。</description>
    </item>
    
    <item>
      <title>如何建立自己的debian repository</title>
      <link>//blog.shell909090.org/blog/archives/1710/</link>
      <pubDate>Mon, 28 Feb 2011 16:36:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1710/</guid>
      <description>首先，感谢zigo的大力支持，并且贡献出他的源码，我才得以完成本文。其次，技术文，该散的可以退散了。
很多时候，我们对某些东西比较有兴趣，所以会安装一下。debian系统下最熟悉的安装系统就是dpkg了。作为debian用户，我想用deb包来安装这些东西。这样会有以下的好处：
1.便于在多个系统上重复安装。如果是源码包编译，就必须每台系统安装好环境来configure/make install了。
2.便于拆除。如果是make install，能不能拆就看你的运气了。
3.系统可以管理依赖。包括自动安装缺失的依赖包，以及保持依赖包的固定等。
关于打包，请看debian新维护人员手册（ http://www.debian.org/doc/maint-guide/index.zh-cn.html）。本文主要是说一下如何将这些包变成一个自己的仓库。
变成仓库，你将拥有以下好处。
1.不必自己去复制包，然后手工安装。
2.当仓库更新后，目标机器在update后可以发现。
3.你可以向仓库中加入自己定制编译的，更加新版本的软件。替换掉系统的同名软件，而不改变操作特性（除了没加key会碰到不安全提示）。
其实debian的主系统是一个超级大仓库，通过ftp和rsync同步提供服务。我们的包如果够重要，也会享受到这种待遇。然而debian官方仓库的要求比较严格，你必须在文件级别搞清楚每个文件的授权，并且核对这些授权是否符合dsfg协定。你的包必须足够重要，有可能的潜在用户。多数时候，我们自己写的产品/库还没有这种待遇，因此只有自己做一个仓库了。
zigo提供了他的打包代码，比我的功能全多了，大家可以参考这里（http://git.gplhost.com/gitweb/?p=mgmt-scripts.git;a=blob;f=scripts/scan_archive;h=db7647732b989b35ae7d8a48c80a48ecf67e4612;hb=0ff8fd7d0ba1991d552376f8beca0b46bfaa32e3）。我根据这个脚本，自己实现了一个，放在这里（http://shell909090.3322.org/debian/scan_deb.py）。下面，我简述一下用法和原理。
首先，你需要建立一个pool目录。在其中建立一些release目录。举例来说，wheezy是一种release，testing也是。但是目前testing是wheezy的别名，你用ln -s做链接指向就可以了。在release目录下，你需要建立category目录。例如main是一种category，contrib和non-free也是。
在指定一个deb仓库的时候，release和category是必须指定的，可以被看作是一个仓库地址的一部分。
建立完三级目录后，将你的包放在对应目录下。
全部文件放好后，在根目录下执行python scan_deb.py。如果你需要自动签名，将最后一行的False改为True。在此前请准备好私钥。如果缺少某种架构，请修改脚本architectures一行。
系统的基本原理是，在某个release, category, architecture下，对于pool/release/category目录执行dpkg-scanpackages操作，生成Packages文件到dists目录下，并且再生成一个压缩版本。
对所有目录执行过操作后，使用apt-ftparchive来生成一个Release文件，这个文件指名了有哪些Packages文件，以及他们的MD5各是多少。
客户端获得了Release，就可以知道某种release的特定几个category是否需要更新。更新到了Package，就知道有什么包，他们的meta信息是多少。最后对Release文件进行签名，就可以防止作假了。</description>
    </item>
    
    <item>
      <title>U盘安装debian的技巧</title>
      <link>//blog.shell909090.org/blog/archives/1646/</link>
      <pubDate>Fri, 10 Dec 2010 10:43:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1646/</guid>
      <description>翻译文，原文看这里。
首先，去一个足够好的镜像（有些二级镜像会没有iso等安装文件的镜像的，具体可以看这里）下载debian/dists/lenny/main/installer-i386/current/images/下面的boot.img.gz文件，然后执行：
zcat boot.img.gz &amp;gt; /dev/sdX sdX是你的U盘设备。再然后，下一个businesscard文件放到目标盘上，这时候/dev/sdX是一个fat格式的文件系统。重启后，businesscard就会自动运行，如同被刻了一张光盘一样。
简要说一下businesscard，netinst，和完整光盘的区别。businesscard上没有任何安装包，所以你所需的所有安装包必须从网络上抓。这种安装方式下，没有网络就无法安装。netinst上有最小系统所需的安装包，大概100M上下。在无网络的情况下，可以安装出一个字符界面的可联网系统，用于进一步配置。而完整安装光盘把600M多的软件包全打了上去，即使没有网络，你也可以装出一个标准的图形界面可工作系统。2张DVD的那种安装光盘把i386的所有安装包都打了进去，你要装什么都不用上网了。
装大量机器的时候，建议使用businesscard加上缓存代理。</description>
    </item>
    
    <item>
      <title>软件自由英雄谱</title>
      <link>//blog.shell909090.org/blog/archives/78/</link>
      <pubDate>Mon, 14 Sep 2009 13:53:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/78/</guid>
      <description>谨以此缅怀那些为了今日软件事业的自由做出贡献的先辈们。(注1:多数人没牺牲，谢谢)(注2: 排名不分先后)(注3: 科普作品，大家别怕)
我在撰写这篇文章的时候，避免使用自由软件这个词，而改为更普遍意义上的软件自由。因为自由软件是RMS提出的一个专有词语，指软件的开源，复制，协作等
特质。而我试图通过软件自由这个词，表达人们在使用软件上的自由，以及使用软件来为我们获取自由。我们拥有知道软件一切内幕的自由，我们拥有修改软件的自由，我们拥有思考的自由，我们拥有挑战老系统的自由，我们拥有拒绝通过软件收费的自由，我们拥有通过软件获得信息的自由，我们拥有不受任何人，包括政府监控的自由。为了这种自由而付出的，不仅是自由程序的拥护者，也有商业程序的拥护者。
Richard Matthew Stallman 大名鼎鼎的RMS，GNU的核心人物，自由软件的布道者。要是在这个列表上没有他的名字，那我不知道还有谁能留在这张表上。具体可以看这里(http://zh.wikipedia.org/zh-cn/%E7%90%86%E6%9F%A5%E5%BE%B7%C2%B7%E6%96%AF%E6%89%98%E6%9B%BC)。简单来说这家伙最大的几个成就：创立了GNU和FSF，为自由软件的传播奠定了基础。制作了emacs，当今黑客世界两大编辑器之一(另一个是VIM)。制作了GCC，世界上使用最广泛的编译器。
RMS的核心想法是，因为软件而收费是罪恶的，这种人是撒旦(当然，Bill Gates是其中最大的那个)。他认为软件应当自由分享，程序员从中收取的应当是服务费。今天，RedHat正是继承了这一模式。通过免费的软件和收费的服务来进行持续的开发。
2.Linus Benedict Torvalds
常常和RMS并提的一个家伙，具体在这里(http://zh.wikipedia.org/zh-cn/%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%89%98%E7%93%A6%E5%85%B9)。
一个低调又火爆的家伙，没有什么太多言论，但经常语出惊人，最有名的是以“一群自慰的猴子”(OpenBSD crowd is a bunch of masturbating monkeys)来形容OpenBSD的团队。最大的成就就是写了个操作系统——没错，就是叫Linux的那个。
3.Donald Ervin Knuth
哈，这个人就不像上两个那么广为人知了。他(可不能叫这家伙，得敬老)有个中文名字，叫高德纳，页面在这里(http://zh.wikipedia.org/zh-cn/%E9%AB%98%E5%BE%B7%E7%BA%B3)。
最大的成就是写了本书，叫做《计算机程序设计艺术》。有意思的是，写到一半的时候，觉得现在(那是上世纪80年代的事情)的排版软件不爽——于是自己下手，写了一个叫做Tex的排版系统——然后再回来继续写书。这本书算起来已经写了30多年了，估计成书时间和《浮士德》有的一拼。而Tex是当今高端排版中最流行的系统(多数都不是直接拿来用，而是用了LaTex之类的包装)，如果有向国际期刊投稿过的应该有印象。Tex也是被誉为最接近完美的程序，它的介绍在这里(http://zh.wikipedia.org/zh-cn/TeX)。%E3%80%82)他的版本号是以圆周率为基准的，头一个版本叫3，后一个叫3.1，以此类推。目前的版本号是3.1415926，刚好是祖冲之的密率。高伯伯曾表示，等他死之后，版本号就改为π，剩下的bug就作为程序的功能放在那里。
有一个未经证实的故事。据说上世纪Internet还没出现的时候，美国军方找人设计了TCP/IP协议，他们希望有人为他们实现基于Unix的TCP/IP协议栈。于是他们花了四千万美金，找人写了一个协议栈，并且拿到高伯伯的学校去用。对此高伯伯非常不满意——别误会，我指的是实现的效果。于是就自己花了点时间写了一个，结果比原版的协议栈更快速而稳定。美国军方觉得非常困惑，问他是怎么做的。高伯伯说，读你们的协议，然后编码。
4.Andrew Stuart Tanenbaum
这个知道的人也不会太多，当然，职业玩家例外。当初AT&amp;amp;T禁止UNIX7的代码公布，因此大学里面都没什么实际产品可以用来教操作系统这门课。
于是，有个叫AST的老师就怒了，你不让我干，我自己干。于是写了一个叫做Minix的系统，并且还写了本书，叫做《操作系统：设计和实现》。后来有个学生，觉得这个系统改改能干别的，于是给AST去信。AST说，改什么改，我写这东西是拿来教书的。于是这个学生就自己写了一个系统——对了，这个学生就是上面的Linus，而那个系统，就是大名鼎鼎的Linux。
时至今日，Minux已经发展到了第三版(他的版本号是跟着书走的，第一版，第二版，第三版&amp;hellip;)，是大多数大学里面教授操作系统基础原理的标准教材。
同时，也在嵌入式系统等领域有非常大的应用。但是，由于AST还是坚持他的教学和精简原则，因此在桌面和服务器领域就别指望了。关于AST，大家可以看这里(http://en.wikipedia.org/wiki/Andrew_S._Tanenbaum)。
5.Ian Murdock
这个人很多人都听过，不过看着名字还是认不出来。他是Debian系统的作者，具体可以看这里(http://en.wikipedia.org/wiki/Ian_Murdock)。
Debian有什么特殊呢？其实就本身来说，Debian并不算特别成功。但是Debian有庞大的衍生系统群，更有Ubuntu这样充满活力的发行。
Linux世界有所谓三大发行，四大包管理系统之说。其中三大发行指三个在世界上最广泛用于服务器的发行版本，即RedHat Enterprise Linux，SuSe，Debian，其中只有Debian是无服务商支持的。而四大包管理系统就是指RH的RPM系统，Debian的APT系统，arch的PCMAN系统，和Gentoo的emerge系统。
6.Ken Thompson
有没有听说过？至少看着眼熟吧。这家伙是贝尔实验室的，最大成就就一个：Unix作者。详细内容请看这里(http://en.wikipedia.org/wiki/Ken_Thompson)。
7.Dennis Ritchie
没听说过？也很眼熟？这家伙和上面那位是朋友，最大成就也就一个：给上面那位提供了基础语言，C语言。详细内容请看这里(http://en.wikipedia.org/wiki/Dennis_Ritchie)。
8.Bjarne Stroustrup
又是一个怎么看怎么眼熟的家伙？那当然。他和上面两位不怎么熟，不过他们都是一路的。他是C++的作者，详细内容请看这里(http://en.wikipedia.org/wiki/Bjarne_Stroustrup)。
9.Phil Katz
这个就很少有人知道了吧，不过大家肯定天天和他打交道。大家用记事本打开任意一个ZIP文件，开始的两个字肯定是PK，这就是Phil Katz，具体请看这里(http://en.wikipedia.org/wiki/Phil_Katz)。
这是一个有点悲剧的人物。在上个世纪的时候，大家还在BBS上混。由于速度有限，因此下载站的资源都是压缩提供的(当然，直到今天肯定还是如此)。最初的压缩格式大多是ACE的，这是一家商业公司，直到今天还活着。由于PK不满意这家公司的压缩软件，压缩率低，速度慢，而且还不断提出高昂的收费。因此他决定自己写一个压缩软件，就是最初的PKZIP。由于软件免费提供使用，压缩率高，解压速度快，因此很多站长自发的将数据格式转换为ZIP。后来PK就干脆开了PKWARE软件公司，免费发行压缩程序代码，同时提供方便使用的图形界面版本。
但是非常可悲的，由于格式开放，因此这个软件有个非常大的竞争者，winzip。我想有些Win95时代的老用户还记得这个软件。PK在软件开发上很有天分，但是在市场策略上却不很成功。WinZip对ZIP格式的熟悉其实比不上PK(那当然，人家是原作者)，然而WinZip却拥有很多用户友好的特性，右键菜单解压，虚拟解压(将压缩包的内容临时虚拟成一个目录，用户可以无缝的使用，XP中集成了这个功能，但是WinZip的虚拟解压很容易撤销)。所以最终PK的软件公司破产了。他本人在2000年4月14日因饮酒过度，在一家小旅馆内死去。
至于WinZip呢？碰到了一个更强大的对手，WinRar。功能类似，但更简洁，最主要是支持大多数流行的压缩格式。因此目前压缩软件领域还是WinRar占据着主流，市场就是这么残酷。
10.Phil Zimmermann
这个人基本没人知道，但是却是这张表里面最典型和突出的一个人。他是PGP的作者，具体可以看这里(http://en.wikipedia.org/wiki/Philip_Zimmermann)。他的成就很难用一句话说明，要阐明他的成就，就必须从美国的国家安全出口管制说起。
在上个世纪，美国政府有一种观点，他们需要能随时随地的窃听任何一个人和其他人的通讯。同时，作为延伸，他们制定了国家安全出口法案，将密码产品作为军用管制品，限制出口。这其实是很荒谬和不合逻辑的，任何公开的算法都可以被多个人独立的实现。只要算法是公开的，即使产品不允许出口，国外也可以没有任何阻碍的实现出来。而如果算法是不公开的，则会出现两个弊端。一个是阻碍密码学的交流和进步，更麻烦的是，根据密码学的内在逻辑，这样的系统，由于验证不完全，因此比公开的系统更加不安全。
在1991年前后，PZ制作了PGP软件，用于保障当时备受争议的电子邮件的安全(小常识:电子邮件默认是明文的，安全程度和你写在明信片背面寄给你父母的句子差不多)。这个软件使用了1980年以来提出的现代密码系统几大密码系统，实现了签名安全和秘密安全。这里我们小小的讲解一下电子邮件的两大安全系统，对此无爱的人自行跳到下一段。签名安全就是指，你收到一个邮件的时候，能够确信，这个信的内容是原始发件人的真实意思表示，而不是被篡改过的。秘密安全就是指，当你收到一个信的时候，你能够确信，除了你没有别人能够偷看到内容。对此，一般采用公钥系统来实现两者的安全。所谓公钥系统是这样一种系统，用公钥加密必须用私钥解密，用私钥加密必须用公钥解密，私钥很容易计算出公钥，公钥非常难计算出私钥。当你要签名安全的时候，将邮件内容用自己的私钥加密再发送一次(实际是将内容hash了再加密的)，接收者解密后对比。由于篡改者只有公钥，因此虽然可以拦截和修改内容，但是无法伪造出一对匹配的内容，用公钥解密后刚好一致。而秘密安全则是用对方的公钥加密。对于更高层级的要求，你的公钥不仅要求公布，而且必须在国家认可的部门公布，这样就由国家认定了你的公钥和你的身份的一致性。当你对一个内容签署的时候，只要能用公钥验证签名，就可以认定内容是你的真实意思表述，并被法律所承认。
当时的PGP当然还没有这么复杂，但是对于当时缺乏任何安全性特征(当时连TLS都没有)的电子邮件来说，是非常必要的补充。可是我们上文说了，美国禁止出口这些产品。于是，PZ免费的将软件的最初版本散发给同事和其他人使用，而这些人又可以免费的分发出去——这和自由模式非常的吻合，除了我找不到具体信息标明当时PZ是否从授权上同意他们做这个事情。法律上说，PZ并没有“出口”密码产品，但是实际上，是他实现并且向全世界推广了高强度的电子邮件安全系统。从某种意义上说，PZ可以说是叛国者。非法散布军用管制品，危害美国的国家安全(这还不像中国那种含糊不清的指控，这里的军用管制品定义是明确的，并且是由国会制定的)。于是，PZ受到了三年的官司和五年的调查，直到96年的时候，克林顿签署了新的法案，放松了密码产品的出口限制。其实也没松多少，从40位到56位——大概就是从5个字符到7个字符的区别。反之，我们改变观点，从世界的角度说，由于他的勇气和决心，我们每个人从中受益匪浅。
EDIT 2016-09-08: 按照我听到的更新消息，PZ当时实际上是出版了一本书，这个书里面就是完整的源码。他虽然没有“出口”这些源码，但是实际上任何人都可以在书店里买一本，然后带去海外，照着源码keyin一遍。美国政府虽然希望禁止这本书的出版，但是禁止个人出版图书违反宪法第一修正案——言论自由。当时政府还不能因为国家安全因素就随意禁止公民出版书籍（这都是911之后的事了），所以只能用官司和调查来整PZ。
必须得说，其实这一改变很大程度上并不是PZ个人努力或者公民运动的结果，其中有巨大的商业力量。IBM，微软和Lotus之类的跨国软件巨头在出口产品的时候，由于受到出口限制，因此在海外产品上的安全性一直很成问题。很多时候他们因为这个问题受到了巨大的挑战。在这一问题上，他们有足够的理由去游说白宫，改变出口限制的要求。关于这个案件的其他资料，可以参考这里(http://cyberlaw.stanford.edu/~prz/ZH/faq/index.html和这里(http://www.techcn.com.cn/index.php?doc-view-130949)。
在今日，PGP仍旧是一个非常强大的加密系统，并且是开源的——理所当然，如果不开源，我们会担心其中是否有漏洞和后门继续危害我们的安全。并且，从密码学内在的逻辑来说，不公开的系统是不安全的。不过他仍旧受限于美国国家安全出口管制条例，原因是因为由于今日强大的计算能力，因此密钥通常的长度是1024，2048，4096位长的——远远超过美国国家限制数十倍。因此这一软件的强密钥版本只有英文版，因为不用考虑出口。对于海外人士来说，我们更推荐OpenPGP，同样是开源的，而且基于开源模式开发的GNU自由软件。能够充分保证你的信息安全。</description>
    </item>
    
    <item>
      <title>debian live</title>
      <link>//blog.shell909090.org/blog/archives/307/</link>
      <pubDate>Tue, 11 Jul 2006 09:10:46 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/307/</guid>
      <description>准备做debian
live了，期间有什么东西都会写在这里。大致来说就是打算实践一个项目。
copyright
Shell.E.Xu撰写，按GPL发布。
abstract
用debian3.1testing为基础建立live cd。128M以内，无X系统，无交换区和/tmp，使用内存盘。
target
用于挂载ext3 ntfs vfat文件系统，实施文件系统管理和修复，访问文件系统内容并修改。
注：准备特别针对3721，yahoo助手之类类似rootkit的东西实施扫描清理。
environment
debian 3.1 starg testing（貌似是废话）
grub stage2_eltorito支持光盘启动
linux-kernel-2.6.15-8 直接使用deb包中内容
initrd 在kernel包中包含
step by step
1.建立基础文件系统并且复制所需文件
建立~/syscd/boot/grub/，复制menu.lst stage2_eltorito文件过去。
复制vmlinuz system.map config到~/syscd/boot中，注意ISO9660格式中文件名不能过长（多少记不清了）。
复制/lib到~/syscd/lib，并且调节内容。（我个人在其中添加了我需要的nVIDIA显卡驱动）
2.grub和iso
cd \~ mkdir initrd #关于initrd的原理生成和使用后面讲 mkdir root #这个是用于内存的镜像内容 mkdir cramfs #这个是只读镜像内容 vi \~/testsyscd ------------------我是邪恶的分割线-------------------- #!/bin/bash qemu -no-kqemu -cdrom \~/syscd.iso -boot d &amp;gt;/dev/null ------------------我是邪恶的分割线-------------------- chmod 755 \~/testsyscd vi \~/mksyscd ------------------我是邪恶的分割线-------------------- #!/bin/bash COMPRESS_MODE=-9 cd \~ # block of create initrd.</description>
    </item>
    
    <item>
      <title>debian的桌面研究（二）－－完美桌面</title>
      <link>//blog.shell909090.org/blog/archives/295/</link>
      <pubDate>Fri, 31 Mar 2006 19:46:43 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/295/</guid>
      <description>一个系统好不好，不是看他崩溃频率（除非崩溃得比9X还欢），也不是看精美程度（除非比MAC还夸张比windows还花哨看界面就像在看美国大片），而是看功能，看应用程序的多少。linux下面要流畅的工作，大致需要以下几个软件。
firefox gaim lumaqq azureus xmule xmms office eclipse
下面逐个讲解安装过程：
firefox：著名的浏览器，功能强劲方便安全
1.aptitude里面找，安不上的纯粹RPWT。
2.debian里面firefox的最新版本是1.0.2,不过网络上面出到1.5了，而且还是比较稳定的。如果要自行升级的请看下面流程，当然，首先先下个firefox的包。
tar -zxvf OOXX.tar.gz chmod -R 755 firefox/ mv firefox /usr/share gedit /usr/share/applications/firefox [Desktop Entry] Encoding=UTF-8 Name=firefox Exec=/usr/share/firefox/firefox Icon=/usr/share/firefox/..#你自己看什么合适吧 Terminal=false Type=Application Categories=Application;Network; StartupNotify=true gaim：聊天程序，要上msn/icq的找他
aptitude里面找，安不上的纯粹RPWT。
lumaqq：聊天程序，上QQ4linux的
安装比较麻烦，首先要安装java4linux。下面我要装eclipse，所以用的是jdk，用jre的也差不多处理。
xmms：音频播放，linux下面的winamp
aptitude里面找，安不上的纯粹RPWT。
PS，gnome的菜单包是menu-xdg，放置位置/usr/share/applications，模版如下
[Desktop Entry] Encoding=UTF-8 Name=程序名称 Exec=执行代码 Icon=图标 Terminal=false Type=Application Categories=Application;Network;Develope; StartupNotify=true 根据需要修改添加就可以了。
PS，其实还有两个，realplay和mplayer，不过这两个程序正常debian用的话有点小问题，所以放到下篇说了。</description>
    </item>
    
    <item>
      <title>debian的桌面研究（一）－－精简安装</title>
      <link>//blog.shell909090.org/blog/archives/294/</link>
      <pubDate>Fri, 31 Mar 2006 19:18:10 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/294/</guid>
      <description>debian应该算是一个比较方便的OS，100M的安装盘就可以自动安装。不过最近debian出了点小小的bug，所以安装过程也要有点技巧的好。下面所说的所有系统都指debian3.1sarge，去年五月出品，是目前最新的版本。
问题出在一个系统核心的更新上，如果默认安装的话就全部都会失败。所以应该在安装的时候中断所有安装更新动作，不安装任何桌面和服务，直接完成安装进入系统。然后更改/etc/apt/source.list加入所有你想要的源（这样安装的速度会比原来快很多），然后运行aptitude -o APT::Force-LoopBreak=1。update一下，有什么可以更新的全部更新上，再选中最新的合适使用的内核和源码（对stable和testing来说，debian的最新发布内核已经没有什么瑕疵可能存在了），然后安装。这个过程大约要下载70-100M的东西，端看你什么时候跑的安装。我这里大约是三刻钟就跑完了下载安装。重启下，用最新内核启动，然后卸载旧内核（不重启的话会非常罗嗦，而且不安全）。这样整个可用系统的最小版本就出来了，装机大约是一个钟头。
然后是桌面环境了，在aptitude里面，选择以下包vim gnome mc x-system-core im-switch gaim选中，然后再选择所有中文桌面和环境（不要用的输入法可以去掉点），这样大约有350M上下的文件需要下载，整个过程约会持续三个钟头。其中设置就不具体说了，不过系统还需要做以下更改。
首先在/etc/X11/xorg.conf里面将mouse类型改成ImPS/2，模拟三键去了。然后修改/etc/X11/xinit/xinput.d/default文件，加入以下内容。
GTK_IM_MODULE=SCIM XIM=SCIM XIM_PROGRAM=&amp;quot;/usr/bin/scim&amp;quot; XIM_ARGS=&#39;-d&#39; 这样基本来说系统就ok了。</description>
    </item>
    
    <item>
      <title>debian上配置基于apache2的resin</title>
      <link>//blog.shell909090.org/blog/archives/266/</link>
      <pubDate>Tue, 29 Nov 2005 00:26:52 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/266/</guid>
      <description>别的不说了，先用debian自带的apt安装apache2,记得安装dev部分，还有libapr0,libapr-dev,libapr0-dev。千万别忘记安装后面的部分，否则你在下面编译的时候就要出现问题。
拿到resin，放在目标目录下面，然后tar -jxvf。完成后用ln -s做一个链接上去，使用resin的名字，这样可以方便的替换版本。然后在主目录下面运行./configure，make一下。一般来说，会出不少错误，最后生成一个libresin.so放到libexec下面，并且更新了resin的主执行程序。这个so很具有迷惑性，开始贝壳就被他骗了。这个so貌似是resin在本地平台下的加速程序，而不是嵌入到apache系列服务器中的整合插件。其中最大的差异是没有caucho_module导出符号，在apache加载的时候肯定会失败。
跑到src/c/plugins/apache2下面运行make。可能会报错，可能没有。贝壳这里报了错，不过贝壳运行configure的时候没有加任何参数，也许加了参数就正常了。如果不正常，出错的代码可能分别是httpd.h找不到或者apr_time.h找不到。运行vi Makefile，看到有INCLUDE的目录吗？那里面要包含/usr/include/apache2和/usr/include/apr-0两个目录，没有就肯定出错。好了，修改然后重新make。得到的文件是mod_caucho.so。将它cp到$RESIN_HOME/libexec下面，这个动态库导出了caucho_module符号。
在/etc/apache2/httpd.conf里面编辑一下，添加这个内容。
LoadModule caucho_module /usr/resin/libexec/mod_caucho.so &amp;lt;IfModule mod_caucho.c&amp;gt; CauchoConfigFile ......../resin.conf &amp;lt;Location /caucho-status&amp;gt; SetHandler caucho-status &amp;lt;/Location&amp;gt; &amp;lt;/IfModule&amp;gt; 在/usr/resin/conf/resin.conf里面，添加这些内容。
&amp;lt;doc-dir&amp;gt;/var/www/htdocs&amp;lt;/doc-dir&amp;gt; &amp;lt;war-dir id=&#39;/var/www/htdocs&#39;/&amp;gt; 在/etc/apache2/sites-available/default中可能要修改如下配置。
DocumentRoot /var/www/htdocs/ &amp;lt;Directory /var/www/htdocs/&amp;gt; 然后注销
RedirectMatch ^/$ /apache2-default/ OK，这样就基本完成了整个系统的整合配置。</description>
    </item>
    
    <item>
      <title>Debian GNU/Linux下安装Oracle 9i</title>
      <link>//blog.shell909090.org/blog/archives/262/</link>
      <pubDate>Mon, 21 Nov 2005 21:58:01 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/262/</guid>
      <description>最近因为工作需要，在Debian GNU/Linux安装了Oracle 9i。Debian代号sarge，版本号release 3.1，testing发行。Oracle代号9ir2,版本号9.2.0.4。安装文件名称为ship_9204_linux_disk1.cpio.gz ship_9204_linux_disk2.cpio.gz ship_9204_linux_disk3.cpio.gz。需要一个补丁，文件名为p3006854_9204_LINUX.zip。Oracle 9i安装的是Enterprise Datebase。
先执行以下脚本：
#! /bin/bash #变更内核参数 cd /proc/sys/kernel #1G内存状况，按照需要调整 echo 4294967295 &amp;gt; shmmax touch /etc/rac_on #增加一个link，debian需要 apt-get install libstdc++-glibc ; 或者使用aptitude cd /usr/lib ln -s libstdc++-libc6.2-2.so.3 libstdc++-libc6.1-1.so.2 #增加用户 cd /home mkdir oracle groupadd dba useradd -g dba -d /home/oracle -s /bin/bash oracle #注意-s参数，如果不指定下面的初试化脚本不一定跑的起来 passwd -d oracle chown -cR oracle:dba oracle cd /usr mkdir oracle chown -cR oracle:dba oracle cd /var mkdir oracle chown -cR oracle:dba oracle #增加初试化脚本 cd /home/oracle echo &amp;quot;export DISPLAY=&#39;&#39;&amp;quot;&amp;gt;.</description>
    </item>
    
    <item>
      <title>精简debian和服务器</title>
      <link>//blog.shell909090.org/blog/archives/249/</link>
      <pubDate>Mon, 31 Oct 2005 19:36:26 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/249/</guid>
      <description>最近在用单位的1G电脑跑debian，不开gnome的情况下真是快啊。长期安装debian（其实才几个月），所以对debian的安装有点心得。准备精简打包一个最小debian，用于拯救和安装。然后cache一个pool做移动使用。这样以后用起来应该方便点。
debian上面装别的问题不大，但是装oracle的时候头痛的要死。难怪oracle一般要和solaris一起安装，而DB2一般捆绑在AIX上面。这种东西换个系统简直就是要了命了。</description>
    </item>
    
  </channel>
</rss>
