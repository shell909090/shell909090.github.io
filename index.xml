<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shell&#39;s Home</title>
    <link>//blog.shell909090.org/</link>
    <description>Recent content on Shell&#39;s Home</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>CC-BY-SA4.0</copyright>
    <lastBuildDate>Tue, 23 Apr 2024 01:04:07 +0800</lastBuildDate><atom:link href="//blog.shell909090.org/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python3下dict和list的线程安全性分析</title>
      <link>//blog.shell909090.org/blog/archives/2895/</link>
      <pubDate>Tue, 23 Apr 2024 01:04:07 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2895/</guid>
      <description>简述 很多人说python的list和dict对象是线程安全的。呵呵我不信。
首先我们把线程安全定义一下，省得抬杠。线程不安全有以下几种形态。如果发生其中之一，则肯定是线程不安全的。以下是充分非必要条件。
多个线程竞争访问时，发生内存访问异常。 多个线程竞争访问时，发生异常。 多个线程竞争访问时，数据某种程度上不一致。 其中三的争议比较大。到底什么是数据不一致，我们下面会给出细节解释。但是线程不安全的前提是读-写。如果是“纯读取”，则肯定不发生线程不安全。这点以下不再强调。
思路 Python的线程安全，其实是指GIL。GIL会在一个P指令的周期内，锁住解释器。除去少数代码，大部分P指令在执行时，均不会发生上下文切换。因此一般语言访问内部数据结构不一致所引发的内存访问异常，在Python内均不会发生。这是“Python的list和dict线程安全”这个断言的源头。
这个断言本身，其实并没有排除“组合不安全”的可能。例如a[k] += 1，其实是a[k] = a[k] + 1的缩写（两者在P代码层面有细微差别，但是不重要）。在多线程状态下，这个操作可能引起+1丢失问题。不过这个概率非常低，而且这是“预期中的不安全问题”。如下一节所演示的。下面希望阐述的，是每个调用都是原子调用，最终产生线程不安全的结果。
这类结果，最大可能是发生在keys/values/iterms调用上。这三个调用，在Python2的时代，返回的是容器类对象。虽然有复制开销，但是一劳永逸避免竞争问题。Python3大量改为iterator后，这里就隐藏了一个风险。
组合不安全问题的例子 代码。由于太难触发，因此加time.sleep来扩大问题。
import time, threading def add(d): for _ in range(1000): i = d[1] + 1 time.sleep(0.000001) d[1] = i def main(): d = {1: 0} ths = [threading.Thread(target=add, args=(d,)) for _ in range(2)] for th in ths: th.start() for th in ths: th.join() print(d[1]) 结果：
注释掉time.sleep，确定的2000。 启用time.sleep，有时为1000，有时为1001。 key数量发生增减的形态 代码
import time import threading def daemon(d): time.</description>
    </item>
    
    <item>
      <title>核电废水排放</title>
      <link>//blog.shell909090.org/blog/archives/2894/</link>
      <pubDate>Wed, 30 Aug 2023 19:05:28 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2894/</guid>
      <description>辐射类型 一般我们讲有影响的辐射都是电离辐射。非电离辐射对人类影响很小，要影响人类需要很大功率。电离辐射主要是能穿透并打断人体内化学键，从而导致蛋白质或DNA链断裂，DNA复制出错，引发细胞凋亡（急性）或癌变（慢性）。从原理上就能看出，辐射影响最大的人体细胞是分裂比较剧烈的一些细胞，例如骨髓细胞，上皮细胞（包括皮肤和肠黏膜），生殖细胞。
电离辐射主要类型：
Alpha辐射：两个质子和两个中子组成的原子核。 Beta辐射：高能电子或正电子。 Gamma辐射：高能光子，或者从光子能量来看，高频电磁辐射。 质子辐射：高能质子流。 中子辐射：高能中子流。 其他高能粒子。 其中特别注意中子辐射。中子辐射穿透力强，具有诱导放射能力，因此很难处理。
所谓感生放射性，指物体在放射性射线的辐照下，由不具备放射性转变为具有放射性的过程。理论上所有的电离辐射都可能产生感生放射性，包括Gamma辐射，也可能产生光致蜕变。但是大部分感生放射性主要来自中子活化。中子辐射可能击打原子核使得原子转变为同质子数但中子数不同的同位素，即放射性同位素。
辐射强度 辐射的主要计量单位是Sv，以前也用过rem。这个单位的物理学意义是能量密度等效单位，经常和另一个单位Gy混淆。每千克物体接受1焦耳的辐射，即为1Gy。这是吸收剂量，和辐射位置，辐射类型没有关系。但实际辐射对人体的影响不止和能量有关，和什么部位，辐照类型也有很大关系。Sv计算辐射对人类的影响，公式是H=DQN。Q是品质因素，衡量辐射种类。N是修正因素，衡量不同生物部位。在Q=1，N=1的情况下，1Gy=1Sv。
Beta和Gamma辐射，Q=1。Alpha辐射，中子，质子，Q从5到20不等。
皮肤，N=0.01。肺，骨髓，N=0.12。全身，N=1。
因此很容易想到，那些手里拿个仪器宣称当地辐射是多少Sv的，都不怎么靠谱。因为Sv和被辐射部位有关。他们测的要么是Gy，要么假定全身受辐射，N=1，然后根据不同辐射水平加权计算等效剂量。如果是监测环境辐射的话，确实问题不大。因为全身受辐射。但有很多情况是局部辐射。这时候用仪器测多少Sv就有不是那么严谨。
简单来计算的话，人平均受辐射水平（背景辐射）大约是2.5mSv/yr，职业辐射应小于20mSv/yr。折合到每小时水平，背景辐射大约&amp;lt;0.29uSv/h，职业辐射平均值小于2.28uSv/h。注意职业辐射平均值没有意义，因为职业辐射都是瞬时值比较大。
放射性同位素 其实辐射源不只是同位素。但废水里显然不会有伦琴管。所以废水里的辐射主要来自放射性同位素。此时就涉及到两件事。同位素放射强度和类型。
放射源的活性计量单位是Bq。其定义为1秒有一个原子发生衰变，则放射活性为1Bq。特别注意其计算公式。R=N*ln2/t，其中N是物质的量，单位是mol，t是半衰期。也就是说，半衰期越长的物质，其放射性活性也就越小。相同的物质的量下，三天衰变一半的放射性要远强于三万年衰变一半。这和我们常规说到的放射性同位素污染正好相反。长半衰期物质所带来的放射性污染，主要都来自于其巨大的物质的量。Pu-239的放射系数是I-131的1.1M倍之多。也就是1.1吨的Pu-239和1g的I-131放射性活性一样。但后者过半年就几乎可以忽略不计了，前者要完全失活需要近10万年。
另一个有点冷僻但完全可以理解的事情是，大部分核电站的中间核素，都是短或中半衰期的同位素。反而是原料，大多是长半衰期的同位素。这也很好理解。因为核燃料一定是易裂变材料，否则无法维持链式反应。而如果该材料的半衰期很短，在地球45亿年的时间里早就衰变完了，无法大规模开采使用。目前主流使用的材料有两种，U-235和Pu-239。前者半衰期7亿年，后者半衰期2.4万年。从道理上说，如果一块U-235尚未反应，不包含中间核素，你可以用手去拿，而不需要辐射防护（毒性是另一回事）。
需要注意的是，放射性活性和辐射强度没有直接关系，两者也无法直接换算。
裂变，衰变 核电站采用裂变，而且是有中子撞击的链式裂变。原子核吸收一个中子，分裂成两个原子核，再放出数个中子。只要放出的中子数大于吸收的，反应就能持续下去。由于中子放出后并不一定会击中下一个原子，所以中子有损耗率。材料所放射出的中子越多，辐照材料越多，那么击中下一个原子核的概率就越高，损耗率就低。材料中杂质越多，被其他材料吸收而发生“不放出中子的裂变”的概率越高，损耗率就高。当放出中子数乘以损耗率大于1的时候，反应就可以持续进行。这个“损耗率大于1”的条件，被称为临界质量。从原理上看，临界质量和材料质量，纯度，杂质有直接关系。纯度越高，临界质量越小。
大家有兴趣可以算一下看看，一个各向同性纯材料构成的理想球R，发生中子俘获的概率为a，那么临界物质的量应当是多少。
如果向一个裂变中的核电站反应堆，插入一堆强烈吸收中子的材料。核反应就会迅速停止。
衰变指不稳定同位素的原子核放出自发放出辐射的现象。这一现象的发生不受原子核所处的物理和化学状态的影响。
核电站为什么不能马上停机？因为裂变反应中产生了很多放射性同位素。这些同位素在不停的发生衰变。这个过程无法以化学或者物理方式停止。唯一的办法是不停的冷却，带走衰变产生的热。同时，由于衰变放出的辐射包括了中子，因此用来冷却的介质和容器，也就变成了低放射性污染物。核燃料在燃烧结束后，会在乏燃料池里面浸泡降温一段时间，最后被收集到核废料处置装置里面，深埋地底。
如果这个过程被突然终止了，那么无处宣泄的热量就会烧干介质，最终导致堆芯溶解。这就是为什么核电站不能立刻停机。
福岛核废水的来源 福岛核灾难主要是因为日本311关东震灾破坏了福岛核电站的电机系统。核电站虽然停止工作，但是放射性核素衰变持续进行。最后烧干了核心的纯净水，被迫引入海水进行冷却。由于海水进入核岛，因此携带中间核素成为了放射性污染物。后续包括泄漏到建筑内的污染物，污染的地下水等等，也同样是放射性污染物。这些水被储存在福岛附近的大型储水罐中。
由于核心冷却活动持续进行，核岛放射性始终强劲，而且始终破损开放无法修补。因此进入的自然水体会持续变成放射性核污水。正常乏燃料池会循环使用冷却水，不会持续产生污水。但福岛的核岛显然做不到百分百拒绝外来水，因此污水越来越多。福岛核心的放射性过强，因此也无法搬动到隔绝自然的循环池里，停止外来水体进入。因此储存罐里的水越积越多。
福岛核废水的放射性同位素组成 根据引用[1]，按照日方计划，福岛的处理后核污水排放计划中会移除63种放射性同位素（ALPS，Advanced Liquid Processing System），但是氚和C-14除外。因为氚是氢的放射性同位素，要从水中提取氚（或者氘）的最好办法是同位素浓缩，也就是电解水。这一过程耗能巨大。而正常核电站的废水中也含有氚。既然正常核电站的废水排放也含有氚，那么把福岛视为一个正常核电站去管理就好了。
而在正常核电站里，一般会分为两路循环。中心是高压循环，水在高压循环里不会泄漏进入自然界。第二路用中心循环带出来的热量烧开水，推动蒸汽轮机发电，最后再引入自然水体冷却。水在低压循环里也不会泄漏进入自然界。最后是用于冷却冷却水。一般核电站大量排放的就是冷却水。
由上面的原理我们可知，冷却水一般不会携带放射性同位素。放射性同位素从一级回路基本不向二级回路扩散，何况是冷却水。但中间介质水却可能因为中子活化导致间接携带放射性。因此核电站无论如何，都是要向自然界排放放射性同位素的。这里主要就是氚。
氚的化学和物理性质 氚是氢的同位素，也是唯一的不稳定同位素，半衰期为12.5年。氚没有生物富集效应[2]，不会随着高等海洋生物富集最终被过度。同时，氚的衰变基本为单一的Beta衰变。放射出的电子很难穿透皮肤，因此比Gamma衰变更为安全。不是特别多的氚被排放到自然界后，只会轻微的增加天然本底辐射，不会对公众环境产生特别大的影响——从我个人的观点来看，比汽车对公众寿命的影响更小。
中国的核电厂排放标准 核动力厂环境辐射防护规定[3]，2011年实施。
对于滨海厂址，槽式排放出口处的放射性流出物中除氚和碳 14 外其他放射性核素浓度不应超过 1000Bq/L；对于内陆厂址，槽式排放出口处的放射性流出物中除氚和碳 14 外其他放射性核素浓度不应超过 100Bq/L，并保证排放口下游 1km 处受纳水体中总 β 放射性不超过1Bq/L，氚浓度不超过 100Bq/L。如果浓度超过上述规定，营运单位在排放前必须得到审管部门的批准。
表 1 气载放射性流出物控制值
轻水堆 重水堆 惰性气体 6×10^14 Bq/a 碘 2×10 10 Bq/a 粒子（半衰期≥8d） 5×10^10 Bq/a 碳 14 7×10^11 Bq/a 1.</description>
    </item>
    
    <item>
      <title>redis三种高可用部署</title>
      <link>//blog.shell909090.org/blog/archives/2893/</link>
      <pubDate>Fri, 18 Aug 2023 17:30:53 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2893/</guid>
      <description>主从模式 最简单的模式。
master啥都不用配置。
slave如下配置。
replicaof [master ip] 6379 replica-serve-stale-data no 启动后就可以形成主从集群。一写多读模式，适用于少写多读的应用，同时对一致性没有强要求，例如缓存。
docker验证 我用如下命令开docker容器做的测试。
export TAG=7-alpine export FLAGS=-d --restart=always docker run ${FLAGS} --name master -p 6379:6379 -v $PWD/master/:/data/ redis:${TAG} redis-server redis.conf docker run ${FLAGS} --name slave -p 6378:6379 -v $PWD/slave/:/data/ redis:${TAG} redis-server redis.conf 当前目录下分别开master和slave目录，里面放redis.conf，启动容器即可形成集群。
用如下命令验证：
docker run -it --rm redis:7-alpine redis-cli -h [master ip] -p 6379 info replication docker run -it --rm redis:7-alpine redis-cli -h [master ip] -p 6378 info replication docker run -it --rm redis:7-alpine redis-cli -h [master ip] -p 6379 set abc def docker run -it --rm redis:7-alpine redis-cli -h [master ip] -p 6378 get abc sentinel模式 复杂且不好用。</description>
    </item>
    
    <item>
      <title>仙本那潜水信息</title>
      <link>//blog.shell909090.org/blog/archives/2892/</link>
      <pubDate>Sun, 23 Jul 2023 22:00:59 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2892/</guid>
      <description>大致情况 仙本那(Semporna)是个海边镇子，从斗湖机场坐车一个半小时。马步岛(Mabul)在南，旁边是卡帕莱(kapalai)，开过去大概一小时船程(估计40km)。Timba Timba和Mataking在东。水面平静也是1小时左右。水面浪大就要一个半小时。Sipadan是一个特殊的潜点，特别管制，每天限120人。在马步岛南边30分钟船程的地方。
住 住是和潜水密切相关的。如果住镇子上，每天就是坐船来返各个潜点。好处是能自由选择吃喝玩乐，还能多跑跑不同潜点。坏处是每天要折腾来回2小时船。
马步岛和卡帕来有水屋可以直接住（而且看起来很漂亮）。Timba Timba和Mataking不确定，好像没有。仙本那码头出去还有一些水屋。我们碰到了一对夫妻住顺顺水屋的。住一天挺新鲜的，住多也就那样。水屋的吃喝玩乐都是绑死在水屋里面的。
马步岛边上有钻井平台可以订，算是个特殊住宿点。跳下去就能潜钻井平台，非常方便。
镇子上主要就是海边的海鲜一条街，以及紧邻海鲜一条街的三横四竖几条商业街。由于吃和玩都在这几条商业街，出船都在码头。因此靠近这几个地方都算是好的住宿地点。
玩 Timba Timba和Mataking有大片浅礁区，适合浮潜和自由潜。经常能看到海龟。如果流大，水色会很不错。
Mabul的水色永远浑浊。水下有一些人工礁石可以玩。水下其实是有杰克风暴甚至海狼风暴的，虽然不大。如果不是这个能见度，真的是个不错的潜点。只是上面一旦住人，能见度就真的控制不了。
Sipadan就不多说了。Barracuda point和South point应该是永远的神。不过建议去Sipadan还是不要AOW刚毕业就去。我去的时候居然同船潜友腰带掉了导致人直接飞了上去。看得我吓傻在了那里。幸好已经快到了5米3的时候，而且是当天第二潜。第三潜只能回Mabul，不能潜就不能潜吧。所以Sipadan两潜都没错过，算是损失不大。不然第一潜下水就会直接被禁止下水&amp;hellip;
吃 镇子上的海鲜一条街永远是人头攒动。各家都有海鲜卖。街尽头的海鲜市场还能现买找人加工。马步岛也有巴瑶人会问你们要不要椰子要不要海鲜。注意不是所有餐厅都愿意帮你加工海鲜的。而且很多贝类的毒性不是加热就能清除的。所以看自己能力量力而行。
肥妈虽好，但是永远要等，这就不多说了。
除开海鲜，我比较推荐鱼片，干炒河粉，三巴炒饭，三杯鸡。还有肥妈和隔壁家的水果奶昔。我特别喜欢西瓜奶昔。
商店街里有一些水果店，25RM能买一板的榴莲。比海鲜街推着卖的便宜。那边100RM一个。但是25RM一板的，不消说，个小核大。榴莲最便宜的地方居然是在国内&amp;hellip;这我也是没想到的。
最后还有热热苏多的鱼丸粉，味道独特。有兴趣的可以去试试。
按摩 海鲜街最东边有一家老佛爷，泰式无精油按摩1小时75RM。
Shopping 商业街最外侧有一家大型超市。二楼有一些土特产卖。肉骨茶包榴莲干拉茶白咖啡。自己挑就行。
特别提示 来潜水前一定要带好四样东西。腹泻药晕船药创可贴晒伤修复。别问我怎么知道的。
把防晒霜从潜水员包包里拿走。把自己包起来更好用。</description>
    </item>
    
    <item>
      <title>日本关西旅游信息更新</title>
      <link>//blog.shell909090.org/blog/archives/2891/</link>
      <pubDate>Tue, 27 Jun 2023 01:52:40 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2891/</guid>
      <description>宇治 车站有coin locker，但只吃100的硬币。请自己找钱去。大柜子一次600，不退钱。 抹茶饺子和拉面就是噱头。但是抹茶冰激凌真好吃。 如果说每个城市都有一部城市宣传动漫的话。京都大概是“有顶天家族”，宇治就是“京吹”。 奈良 奈良的大部分核心景点，都在大宫通这条线上。国立博物馆，春日大社，奈良公园，东大寺，都有车可到达，不要傻傻走路。 奈良的另两批景点，斑鸠町的法隆寺，唐招提寺和药师寺，也可以在大宫通换乘到。法隆寺要换大和线路坐到斑鸠町去，再换公交，比较费钱费时间。 吃的大多集中在近铁奈良附近的商店街那里。 就是因为大宫通上的线路密集，商业设施又多。所以居住便利程度可以简单认为“越靠近大宫通越方便”。 柿叶寿司别试了。我试下来很一般。 喂鹿可以往里面一点。奈良博物馆的鹿根本不屑于吃煎饼，东大寺门口的围着你要煎饼吃，我们酒店门口的鹿都在吃草了。 药师寺的和尚落语讲的不错，日文还行的话可以去听听——虽然名义上是正儿八经的宣讲(在东僧坊)。 神户 牛排很好吃。不要怕花钱，4000JPY上下的铁板烧就能吃到不错的神户牛肉了。当然要吃好的是没有上限的。 神户的动漫是“fate”。 推荐香草园。可以当植物园玩+远眺神户景观。 推荐“磯丸水產”。品质稳定价格不贵。尤其推荐蟹壳烧。 City loop三宫车站改过位置。南北向都改过。所以google map信息不准。看清楚了再候车。 姬路 姫路城很赞。漂亮就不说了。1000JPY能爬上去看，而且人还不算多(比起大阪城来)。 好古园的活水轩，料理味道不错。主要是方便。顺手看个园，顺便把饭吃了。 谷歌地图出包。回去的公交站不在地图显示的位置，在公园靠近姫路城那一侧。自己找找能找到。 舞子站下来，能看海景，还能去“明石海上大桥”上面观光。 有马 有马温泉里有放射能泉，介意不要来。同位素类型应该是氡，长期影响不大。 很多旅店有温泉票打折。就算提前到了没住进去，也可以先买票打折，不要花冤枉钱。 六甲-有马缆车运行时间不定，看天气的。 小地方，很多店家晚上关门极早。有些店晚上还需要预约。如果没地方去，可以去温泉街上的铁板烧店“一休”。他们关店相对晚且无需预约。再晚只有门口便利店了。 早上去大阪的班车是9点半左右发车。有些信息说8点半的，你坑我。 大阪 大阪城人太多了。从外面打眼一看就像一群猴子关在笼子里，外面还有一群排队要进去。我们就压根儿没往里进。 但是护城河很壮观，值得去看看。 梅田住起来超级贵。心斋桥附近就便宜多了。也就三站地铁。 </description>
    </item>
    
    <item>
      <title>马来西亚签证自助申请情况更新</title>
      <link>//blog.shell909090.org/blog/archives/2890/</link>
      <pubDate>Mon, 29 May 2023 23:25:53 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2890/</guid>
      <description>长话短说。
eNTRI状态不确定。有说继续有效，也有说停止了。我们申请的eVisa。 windowmalaysia没了。现在都是马来西亚移民局。原本windowmalaysia的注册用户好像还是有效，只要找回密码就行。 imi网站会根据你的来源IP来确定你的当前居住国家。所以使用代理的朋友，请先关闭代理访问。特别注意：如果你已经开着代理访问了，请先登出，清除cookie中的sessionid，然后再用合适的IP登陆。你就能看到你的国家了。 所有的文件都必须小于2M，所有的机票都要合并到一个文件里去，所有的酒店也是如此。 文件名不能有异常字符。最好就是a.jpg，b.pdf这种直接上传。 验证码区分大小写。 证件照有机会调整一下大小，不合规自动就不接受。 </description>
    </item>
    
    <item>
      <title>菲律宾出入境及薄荷岛潜水简报</title>
      <link>//blog.shell909090.org/blog/archives/2889/</link>
      <pubDate>Sun, 07 May 2023 23:03:47 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2889/</guid>
      <description>菲律宾入境签证情况 我看到和听到的消息是，个人旅游签已经很难办理。目前携程上的菲律宾个人旅游签都是2500以上的费用，还是15-35天出签，且都是三个月旅游签。小道消息是，办理个人签证黄牛价格炒到2W以上。团签跑一个，旅行社扣2W保证金。
反正我碰到的，无一例外都是日签或者美签7天入境。条件是携带护照（如果美签在老护照上，老护照需要一起携带），护照页和签证页复印件两份。实际出入境的时候我完全没用上，但是请不要不带。
出入境准备 出境前48小时内填写“旅客指尖服务”，并对结果二维码截图保存。在过海关的时候，入口有工作人员会检查。 入境菲律宾三天内在https://etravel.gov.ph填写入境申请，并对结果二维码截图保存。在入境菲律宾时，检疫局会扫绿码并检查。 入境菲律宾有以下条件。 在入境申请中选择了接种两针以上疫苗的。携带中英文接种证明。 在入境前48小时做了核酸检测的。携带中英文核酸证明。 落地快速抗原（这个渠道据说有，但是我没看到有人走）。 出境菲律宾前也需要填写申请，但是我没有碰到人检查。 入境中国前48h内填写“旅客指尖服务”。登机前，航司检查了我们入境中国的二维码。（这点很奇怪） 入境中国理论上需要做快速抗原。很多地方抗原昂贵，最好一个人带两个抗原盒子随行。万一遇到用上，能省不少钱不少事。 菲律宾航班状况 五一票价昂贵，所以没啥好说的。我回来查了一下直挂panglao，和以前一样MNL转机就行，还是隔天。
菲航的国内比国外忙碌的多。巧合的是，中国也是如此。
薄荷潜水情况 这次潜的是Balicasag和Napaling。Balicasag的原本有漂亮的杰克风暴和海龟。现在我下去，找不到杰克风暴，海龟倒是非常多，起码5-6只。运气好还看到了Barracuda Storm。
Napaling本来是以沙丁鱼风暴而出名的。现在沙丁鱼风暴直接没了，只能算沙丁鱼小雨吧。海底生物多样性也是大大不如。据当地朋友说，因为没有游客，都被抓来吃掉了。悲&amp;hellip;
Alona情况 壹莲小馆没了，懿莲还在，但是他家的性价比大家了解。
茉莉小馆还在。吃串公司倒闭了。7-11对面那个美食广场倒闭了（就是有牛骨饭的那个广场）。</description>
    </item>
    
    <item>
      <title>k8s中如何用DaemonSet在大量节点上执行脚本</title>
      <link>//blog.shell909090.org/blog/archives/2888/</link>
      <pubDate>Wed, 26 Apr 2023 10:34:16 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2888/</guid>
      <description>如何使用DaemonSet执行特权代码 简单点说，最低有三个条件。
spec.hostPID is true. spec.containers.securityContext.privileged is true. 镜像里有nsenter. 条件1主要是为了让你能找到host的mnt namespace，然后你用条件3里的nsenter来在这个namespace里执行代码。就像这样。
/usr/bin/nsenter -m/proc/1/ns/mnt bash /runOnHost.sh host上如何执行脚本 nsenter在host namespace下执行的时候，是不访问容器内文件系统的（或者很麻烦）。所以在host上执行脚本，最简单的办法就是拷过去。
cp /srv/runOnHost.sh /host/runOnHost.sh /usr/bin/nsenter -m/proc/1/ns/mnt bash /runOnHost.sh rm /host/runOnHost.sh 这就引出了一个新要求。如果要复制文件，pod需要挂载host文件系统。
containers: volumeMounts: - mountPath: /host name: host-mount volumes: - hostPath: path: / type: &amp;#34;&amp;#34; name: host-mount 如何访问网络 注意，虽然我们进入了host的mnt namespace，但是network用的还是容器的。如果你的代码不需要网络，或者容器网络就能工作，那很好。如果需要host网络，那么需要设置spec.hostNetwork为true。
最简化镜像 很幸运的是，ubuntu官方镜像带了bash和nsenter，因此不单独pack一个image来执行脚本是可能的。
使用ubuntu镜像。 用文件目录创建一个ConfigMap。 在DaemonSet里引用这个ConfigMap并且mount。 containers: volumeMounts: - mountPath: /srv name: scripts volumes: - configMap: defaultMode: 0755 name: rce-testing name: scripts Put all together runOnHost.</description>
    </item>
    
    <item>
      <title>如何在colab上用whisper识别语音</title>
      <link>//blog.shell909090.org/blog/archives/2887/</link>
      <pubDate>Fri, 24 Mar 2023 20:40:39 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2887/</guid>
      <description>Abstract 简述了使用whisper识别语音的方法，以及如何使用colab的GPU加速runtime来识别语音内容。
Whisper whisper是OpenAI开源的工具，你可以在这里找到介绍。在这里下载源码。中文的指引可以参考这篇。
Linux上运行Whisper的准备 ffmpeg: linux上很容易安装。 git: linux上很容易安装。 pytorch: 上pytorch.org，选择合适的发行，复制代码，安装。 whisper: pip install git+https://github.com/openai/whisper.git pip install &amp;ndash;upgrade &amp;ndash;no-deps &amp;ndash;force-reinstall git+https://github.com/openai/whisper.git 4.2那步我看不懂为啥要reinstall，不过反正照做了。
3步那里，有GPU选择GPU安装，没有GPU选择CPU安装。
使用 time whisper --language Chinese --model medium [filename]
如果没有模型，会现场下载。文件位置在~/.cache/whisper/。
注意，执行时内存要求巨大。small大约需要3G，medium没有8G就别试了。我本来想打个docker版，结果被带崩了N次，放弃了。要打docker版，起码得是直接在宿主机上直接安装docker。
效果对比 small和medium对比过一下，small我基本无法接受，medium基本就能接受了。
small的pt文件大约500M。medium的pt文件1.5G。所有关联包1.3G左右。
速度对比 对一个22分钟的电话录音，进行识别。Colab的GPU版本耗时约8分钟，我的电脑（i3-9100，4cores4.2G）执行118分钟。性能差距15倍。基本上GPU耗时约原始语料的1/3，CPU耗时约原始语料的5倍。
在Virtualenv里安装工具链 其实很简单。用apt安装python3-virtualenv，再用virtualenv安装pip下的所有工具就行。ffmpeg和git用apt单装。
Docker上运行Whisper Webservice 参考这里。
CPU版本：
docker run -d -p 9000:9000 -e ASR_MODEL=base onerahmet/openai-whisper-asr-webservice:latest
Colab Colab是Google推出的&amp;quot;类Jupyter&amp;quot;计算平台。最大的好处是可以选择GPU机型，上面搭载了16G显存，可以做一些简单计算。具体可以看这里。
注意，Colab虽然是免费的，但大量使用昂贵的节点进行计算（尤其是GPU）会消耗你的计算单元。当计算单元消耗到一定程度的时候，就会受到一些限制。如果你希望大量执行GPU运算，最好直接买Colab的计算单元，或者干脆租用一台GPU型的机器。
在Colab上进行Whisper识别 没啥好多说的。
!nvidia-smi !pip3 install torch torchvision torchaudio !pip3 install git+https://github.com/openai/whisper.git !pip3 install --upgrade --no-deps --force-reinstall git+https://github.</description>
    </item>
    
    <item>
      <title>wifi有关的一些问题</title>
      <link>//blog.shell909090.org/blog/archives/2886/</link>
      <pubDate>Mon, 29 Aug 2022 20:34:34 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2886/</guid>
      <description>abstract 讲一点wifi通讯的杂七杂八的问题。关于无线网络问题的诊断，可以回看之前文章。
技术标准 技术标准：802.11a/b/g/n/ac/ax，也叫wifi4/5/6。粗略讲起来，wifi4=802.11n，wifi5=802.11ac，wifi6=802.11ax。 频率：wifi传输数据所用的无线电频率。wifi只能使用ISM频率。一般就是使用2400MHz-2500Mhz这一块，还有5100MHz-5800MHz附近一块。这两块俗称2.4GHz和5Ghz频率。注意5GHz不是5G通讯协议那个5G。 频宽：在频率许可范围内，占用多少范围内的频率。一般来说，在技术标准许可的范围内，频宽翻倍，速度大约翻倍（一般是翻倍多一点，也有翻倍）。如果两个AP的频宽重叠，那么会产生干扰。 MIMO：简单来说，几根天线。在标准许可的范围内，一倍的天线增加一倍左右的速度（一般是翻倍）。 为什么技术标准有两套名字？简单来说Wifi联盟（注意不是英雄联盟）认为，技术标准的名字叫802.11ax太拗口了，不利于宣传。所以直接冠以wifi6的名字。前面的a/b/g/n/ac，自然就变成了1/2/3/4/5。就这么简单。
如果你大概看了上面的介绍，就应该知道，技术标准是一切的核心。技术标准规定了能用几根天线，多少频率，多少频宽。例如，如果你自己来的话，你可能希望有100根天线，整个路由器就像麻辣烫似的一捆，速度爆炸。但是很不幸，技术规定限死最多3MIMO，也就是三根天线。而且，即便规定了三根天线，也要收发双方都支持才行。例如你可以从这里查到MBP各款的天线数量。大部分都是2MIMO，17-19款的有3MIMO。所以MBP19之后款的其实不支持3MIMO，哪怕路由器支持也没用。
不过苹果去掉3MIMO还真不是骗钱。因为11ac和11ax最高都只有2MIMO。所以3MIMO这东西只有11n用&amp;hellip;
关于每个版本的协议，支持哪些参数，提供多少速率。可以看这里。
特别注意。11ac不支持2.4G。这导致很多路由器的2.4G频率停留在11n标准上。该标准对应的最大速率是450Mbps，所以好多路由都标自己2.4G是450Mbps。实际从上面的表可以看出。这种路由器在碰到新款MBP的时候，最多跑到300Mbps。
“穿墙” 先说重点。2.4G绕射能力好，所以“穿墙”性能好。5G反之。所谓穿墙，其实穿不过去。是wifi信号通过一些非阻挡物的穿透，再绕射到被钢筋水泥挡住的死角里。2.4G在绕射能力明显优于5G。但是从通讯角度来看，穿墙能力好不一定是优点。如果你用一个穿墙能力非常好的方案，能穿整个地球。那么理论上你的手机上会显示出地球上所有AP的名字&amp;hellip;
那还用个P，是吧。
另外2.4G由于优秀的通用性，所以被各种地方普遍使用。门铃也是2.4G的，无绳电话也是2.4G的，蓝牙也是2.4G的。这些都算了。微波炉也是2.4G的。所以在家打开AP会让家里字面意义上的变成微波炉&amp;hellip;
幸好功率不够。
由于2.4G绕射性能良好，且用途广泛，所以你的2.4G频率经常会被干扰。这就是这个频率最大的缺点。5G频率反之。站在路由器直射区，速度感人。一跑远，很快就渣。而且由于上面说的11ac不支持2.4G问题，因此很多家庭AP的2.4G性能严重差于5G。如果你恰好是这种AP，不妨给2.4G和5G起不一样的名字，手工选择看看。
MIMO和天线 通常来说，多MIMO代表多天线。如果是典型的2MIMO双频路由器，那就是4根天线。
推荐一个摆法。把5G的两根天线，一根垂直一根水平放置。2.4G也是如此。最好不要全平行放置。如这里所说。
频率频宽和合法性 另一个是频率/频宽/合法性问题。我们用2.4G作为例子，讲点形象的东西。
2.4G频率的ch1，中心频率是2412MHz。使用20MHz频宽的时候，频率范围是2402-2422MHz。但是ch2中心频率是2417MHz，ch3中心频率是2422MHz，每个ch中心频率互相差5MHz。这些都会和ch1x20MHz的组合冲突。实际上你可以很容易算出，理论上ch5中心频率2432MHz。频宽20MHz情况下，下边缘2422MHz，刚好和ch1x20MHz重叠。所以ch1和ch6在20MHz模式下不冲突，ch2和ch7不冲突，以下类推。最直接结论就是，ch1-ch11里，最多可以塞下三个互不冲突的20MHz通讯带。即ch1/ch6/ch11。如果一个办公室里有三个AP。一个AP一个频率，正好互不冲突。
如果改成40MHz频宽，情况就更加糟糕。ch1肯定不能用，最低是ch3，中心频率2422MHz，上边缘2442MHz。而ch11的中心频率2462MHz，下边缘一致。其实这已经发生了轻微冲突。所以2.4G频率在40MHz频宽下，只能塞下一个互不重叠的AP。第二个一定会和第一个发生冲突。如果此时办公室里有三个AP，它们就会有部分频率冲突，影响效率。
至于80MHz频宽。11ac根本不支持2.4G，11ax才重新支持，所以一定是11ax的标准。80MHz频宽下，ch根本没法选。只有ch7，中心频率2442MHz，2402MHz-2482MHz，正正好塞到整个频率里。如果办公室里此时有三个AP，他们的通讯将会正面冲突。而且下面我们会说到，2.4G其实根本不支持80MHz频宽。
为什么2.4G不支持80MHz频宽？为什么不能用足2400-2500MHz的范围呢？这就是是另一个问题——合法性。中国的规定是2400MHz-2500MHz都归属ISM用。（参考无线电频率划分规定）香港规定2400-2483.5MHz归ISM，2483.5-2500MHz归卫星。所以wifi的普适性产品，最多有13个ch。而美国更夸张，ch12已经违法了——算一下就知道，频率上边缘大约是2475MHz左右。所以美国恰好塞不进80MHz——这可能是11ac干脆不支持2.4G的在重要原因——兼容性频宽不足。
比较完整的世界各国信道一览可以看这里。长话短说，中国在5GHz频段，有以下ch可用。
ch38, 5190MHz，40MHz，5170-5210MHz。注意ch38=ch36+ch40，下同。 ch46，5230MHz，40MHz，5210-5250MHz。 ch54，5270MHz，40MHz，5250-5290MHz，DFS。所谓DFS是碰到雷达波避让。因为这个频率里，ISM是次要业务。 ch62，5310MHz，40MHz，5290-5330MHz，DFS。 ch151，5755MHz，40MHz，5735-5775MHz。 ch159，5795MHz，40MHz，5775-5815MHz。 可以看到，5G的频谱和2.4G不同，是不连续的。大致分为5170-5330MHz和5735-5815MHz这两段，分别配有160MHz和80MHz的总频宽。和2.4G相比，哪怕是中国，5G的频宽分配也远远比2.4G充足（大约是3倍吧）。这对于160MHz频宽非常重要。因为5G只能塞下一个160MHz，而2.4G压根儿没戏。
有一点细节要注意。从11ac标准开始支持160MHz频宽，和之前的20/40/80有所不同。之前的20-40频宽变化，速度都是翻倍多一点儿。40-80也是基本如此。但是80-160频宽变化，速度标标准准翻倍。其中有一个因素就是，由于频率割裂，所以160MHz规范有连续160MHz和80+80MHz两种模式。
顺便一提，中国合法的ISM频率分别是：
13553-13567kHz 26957-27283kHz 40.66-40.70MHz 902-928MHz 2400-2500MHz 5150-5350MHz 5725-5875MHz 24-24.25GHz 参考：
中华人民共和国无线电频率划分规定 工业和信息化部关于加强和规范2400MHz、5100MHz和5800MHz频段无线电管理有关事宜的通知 速度计算 下面我们假定有个设备，是2MIMO，支持2.4G和5G频率，支持/不支持wifi6标准。来算算理想通讯速度。
不支持wifi6 2.4G，11n标准，理想速度40MHz下300Mbps。 5G，11ac标准，理想速度80MHz下866Mbps。（不考虑wave2中160MHz） 一般来说，这路由器会宣称自己是1200M路由器（300+866，余数不要太认真）。当然，不支持wifi6中的顶格路由器是3x2.4G+2x5G天线。1300M（450+866）。 支持wifi6 2.4G，理想速度40MHz下601Mbps。 5G，理想速度160MHz下2.4Gbps。 所以这就是3000M路由器。 </description>
    </item>
    
    <item>
      <title>为什么浮点运算不精确</title>
      <link>//blog.shell909090.org/blog/archives/2885/</link>
      <pubDate>Sat, 09 Jul 2022 11:36:12 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2885/</guid>
      <description>验证 &amp;gt;&amp;gt;&amp;gt; 0.3-0.2 0.09999999999999998 &amp;gt;&amp;gt;&amp;gt; 0.2-0.1 0.1 深入一点验证 首先写工具。写一个函数来显示64位8字节的二进制数据。
import struct def byte2bin(s, g=8): o = [] for i in range(0, len(s), g): sub = s[i:min(i+g, len(s))] o.append(&amp;#39; &amp;#39;.join((f&amp;#39;{c:08b}&amp;#39; for c in sub))) return &amp;#39;\n&amp;#39;.join(o) print(byte2bin(b&amp;#39;abcdefghijklmnopqrstuvwxyz&amp;#39;)) 输出如下。
01100001 01100010 01100011 01100100 01100101 01100110 01100111 01101000 01101001 01101010 01101011 01101100 01101101 01101110 01101111 01110000 01110001 01110010 01110011 01110100 01110101 01110110 01110111 01111000 01111001 01111010 随后将数据转换为二进制数据，注意大小端问题。
print(byte2bin(struct.pack(&amp;#39;&amp;gt;h&amp;#39;, 16385))) print(byte2bin(struct.pack(&amp;#39;&amp;gt;h&amp;#39;, -16383))) 输出如下。
01000000 00000001 11000000 00000001 最后再次验证。</description>
    </item>
    
    <item>
      <title>tls,http2,grpc的拦截分析</title>
      <link>//blog.shell909090.org/blog/archives/2884/</link>
      <pubDate>Tue, 05 Apr 2022 17:21:51 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2884/</guid>
      <description>wireshark抓解tls报文 方法1：导出shared secret 很简单，设定环境变量SSLKEYLOGFILE为一个文件，然后启动浏览器。浏览器就会把中间的所有shared secret写入这个log文件里。然后在wireshark的Perferences里，把TLS的&amp;quot;(Pre)-Master-Secret log filename&amp;quot;，设定为这个文件。随后wireshark就可以解开tls流量。
参考：
NSS Key Log Format 方法2：安装证书进行MITM fiddler和mitmproxy都行，我选mitmproxy。主要是linux下面好装。
mitmproxy是需要客户端设定代理的，代理类型http代理。有个关键步骤是装证书，大致可以参考下面的参考2。Chrome有个细节是，进入&amp;quot;Manage certificates&amp;quot;之后，要跑去Authorities下面，import一本cer证书。我开始去了&amp;quot;Your certificates&amp;quot;，那个是给你装客户端证书的，p12格式。两回事。
理论上说，mitmproxy结合安卓安装证书，加透明代理，可以调试安卓的通讯。不过这个我没试过，就不多说了。
参考：
Getting Started About Certificates Install System CA Certificate on Android Emulator 方法3：mitmproxy+wireshark 这个方法有点无聊。mitmproxy也是支持SSLKEYLOGFILE的，所以它可以导出key供wireshark分析。
参考：
Wireshark and SSL/TLS Master Secrets wireshark抓解http2协议 注意一点。
TLS层，Client Hello报文里，ALPN(application_layer_protocol_negotiation)里面应该有h2。ALPN带有h2是客户端想连接http2协议的标志。理论上说，缺失这个标志的Client Hello就不应该跟PRI * HTTP/2.0。同样，服务器端的Encrypted Extensions报文里，也应该带有ALPN标志，且里面包含h2。双方ALPN协商一致后，客户端发出的明文报文就可以是PRI * HTTP/2.0。
原则上说，http2还有一种非TLS模式。客户端在启动时在头部带上Upgrade: h2c，服务器端经过正确响应，之后的通讯数据就是http2数据了。当然，此时http2的数据会跑在非加密连接上。但是我实测下来这种模式没跑通过。curl的客户端可以构造出这种请求，方法是curl -v --http2 http://[host]...。然而，当我用这个请求向我自己的nginx和google分别请求时，两者都像是没有看见Upgrade头一样，直接该给我返回啥就返回啥。反倒是另一种http2的非TLS我跑通了。在grpc时，用grpc.WithInsecure()来Dial。此时整个客户端就没有什么HTTP/1.1握手升级上来的事情了。它会像使用TLS连接一样使用TCP连接。
grpc协议解析 一个请求开一个stream。请求时POST到一个和Interface/Function同名的URL。 调用参数用请求的data frame发送，格式为protobuf。如果是stream，那么会有多个data frame。 返回结果用响应的data frame发送，格式同样为protobuf。stream同理。 最后一个header frame会关掉stream。 参考：
从实践到原理，带你参透 gRPC mitmproxy脚本开发 基本参照mitmproxy文档里的example就能搞，推荐addons写法。API参考上面的API文档。
参考：
Addon Examples Event Hooks &amp;amp; API </description>
    </item>
    
    <item>
      <title>css cascade算法</title>
      <link>//blog.shell909090.org/blog/archives/2883/</link>
      <pubDate>Fri, 25 Mar 2022 21:33:42 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2883/</guid>
      <description>基础 https://developer.mozilla.org/zh-CN/docs/Web/CSS/Specificity https://www.w3.org/TR/selectors/#specificity https://developer.mozilla.org/en-US/docs/Learn/CSS/Building_blocks/Cascade_and_inheritance https://www.jianshu.com/p/1c4e639ff7d5 问题 顺序是否影响优先级。 link和&amp;lt;style&amp;gt;是否影响优先级。 优先级算法对“继承”，“important”，LVHA的规定。 环境 Mar 2022 Debian Linux bullseye Chrome 99.0.4844.74 Experiment &amp;lt;div class=&amp;#34;div1&amp;#34; id=&amp;#34;div1&amp;#34;&amp;gt; &amp;lt;ul class=&amp;#34;ul1&amp;#34; id=&amp;#34;ul1&amp;#34;&amp;gt; &amp;lt;li class=&amp;#34;li1&amp;#34; id=&amp;#34;li1&amp;#34;&amp;gt; a &amp;lt;/li&amp;gt; &amp;lt;li class=&amp;#34;li2&amp;#34; id=&amp;#34;li2&amp;#34;&amp;gt; b &amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; &amp;lt;/div&amp;gt; 顺序影响为，后引入优于前引入。写入div ul li两个，始终是后一个生效。
&amp;ldquo;&amp;gt;&amp;ldquo;和&amp;rdquo; &amp;ldquo;不改变优先级。写入div&amp;gt;ul&amp;gt;li和div ul li各一个。无论其顺序如何，始终是后一个生效。
link和style不改变顺序行为。写入div ul li两个，一个在css文件中，link进来。一个在style标签中。通过调换顺序，确认始终是后者生效。
important可覆盖内联样式。取一个节点设定style=&amp;quot;color: #00ff00;&amp;quot;。当上面css未加!important时，内联样式生效。上面加!important后，定义样式生效。
直接样式+低优先级vs继承样式+高优先级，直接样式生效。写入#div1 #ul1和div ul li各一条。div ul li生效。
直接样式+低优先级vs继承样式+important，important也不覆盖直接样式。例子同上，给继承样式条目加!important也不生效。</description>
    </item>
    
    <item>
      <title>业余无线电入门攻略</title>
      <link>//blog.shell909090.org/blog/archives/2882/</link>
      <pubDate>Sun, 06 Mar 2022 09:38:31 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2882/</guid>
      <description>最近花了点时间拿了业余无线电执照。下面写一下攻略。
业余无线电入门中的入门，指你能够合法的用手台在144MHz和430MHz进行收发。为了完成这个目标，你需要一系列的过程。按顺序来依次是。
考操作证 购买手台 注册手台和取得呼号 下面我们依次说明每个环节的具体流程和细节。
考操作证 考试本身没啥难度。如果你考操作证都有问题，我建议你还是别玩无线电。考试内容完全局限于300多道题，硬背都能过关。考题可以从这里下载到。实在不行，还有中国 A 类业余无线电台操作证快速复习指北来帮助你。你也可以用官方app来模拟考试。
下载“智谱”app，点“特别入口”，“业余无线电”-“业余无线电爱好者”-“进入”，选择“模拟考试”。然后“披挂上阵”，“开始考试”。最后你看成绩是多少。30道题40分钟，25及格。
我强烈建议下载官方app，因为考试报名最快的方式就是app。不建议去折腾那个网站。再次进入“业余无线电爱好者”界面，选择“考试报名”，“新建报考”，然后选择你想要的地点和场次，填写个人信息就行。手机里需要提前准备好免冠证件照和身份证正反面照片。拍好看点。这张照片会被印到你的操作证上。
地点和场次是个重点，因为不是随时都能考试。以上海来说，A类证书考试一年大概8-9次，平均一两个月一次，每次90人。而一般来说，开放报名的半小时内就没了。你可以关注“上海市业余无线电协会”微信公众号。他们晚上会推通知，第二天开放报名。然后设上闹钟准点报名。
考试本身没啥好说的。报名后有考试地点，一般是在天宝路。提前打印纸质准考证，进去后按照准考证上的序号找座位。记得带铅笔和圆珠笔。圆珠笔用来写考卷名字。我看了通知就记得带铅笔了，结果还是找考官借笔写的名字。考卷填答题卡的时候从左到右依次是ABCD，这个没在答题卡上写出来。
考试结束后大概一两周，就能从微信公众号上看到考试通过人员名单。如果你通过的话，再一两周就可以去拿证了。注意拿证地点在人民路，不在天宝路。当然，你也可以叫个快递取回来。
简单来说，上海的操作证还是挺容易拿的。这里推荐一篇攻略，里面讲的很详细，攻略也很新。
购买注册手台和取得呼号 入门手台强烈建议先买一个宝峰的UV-5R。主要是这货太便宜了，玩丢也不心疼。如果你上手买个八重洲，那就一头扎进去多个祖宗了。
之所以先买手台，是因为你注册时需要提供设备信息，所以获得设备一定在注册设备之前。因此购买和等证可以并行。
买的时候请注意。如果你的设备没有无线电发射设备型号核准证，没有CMIIT号，那么可能要面临验机问题。所以最好先和卖家沟通确定有CMIIT号。如果有的话，机身后面一般会有一张贴纸，上面写着CMIIT号和SN号。记住这几个数据。在注册设备的时候，你需要提供的手台信息有：
型号 CMIIT SN 频率和对应频率的发射功率 首先我们说取得呼号。网上各种路数一堆，其实很多都过时了。例如让你跑去经信委，或者去经信委网站。实际上现在这个业务已经合并到了一网通办。
申请呼号的业务名称叫做“无线电台（站）识别码核发”，子业务当然是“新办”。链接在这里。需要提供的材料有身份证正反面和居住证（如果不是上海户籍）。特别注意，提交的地方只能提交一张证件。你要么把正反面PS到一张照片上。要么像我一样卡bug提交两张照片。
注册电台的业务叫做“设置、使用无线电台（站）许可”，子业务也是“新办”，链接在这里。需要提供的材料也是身份证正反面和居住证（非上海户籍）。然后你需要填写“两种表格”（这是一道操作证考题）。
《业余无线电台设置（变更）申请表》（国无管表17） 《业余无线电台技术资料申报表》（国无管表19） 如果你的设备没有核准证，你还需要多填写一份“关于合法设置使用业余无线电台（站）（发射设备无型号核准）的承诺书”。我拿的都是有核准证的设备，所以不确定这个承诺书填写的同时，还要不要线下去验机。</description>
    </item>
    
    <item>
      <title>linux迁移和全盘加密</title>
      <link>//blog.shell909090.org/blog/archives/2881/</link>
      <pubDate>Thu, 16 Dec 2021 23:02:51 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2881/</guid>
      <description>系统迁移 迁移挺容易的。启一个live系统。把原始系统照样子mount好，把目标盘分区分好，照着你想的样子mount起来。然后对拷数据就行。我踩的一个坑是忘了清理.cache下面各种文件，结果这里复制了好久，我差点以为死机了。Ctrl+C断下来，干掉.cache后速度就快多了。等全部复制好了。umount掉原始系统，然后chroot到新系统里面去，加上以下四个文件系统。[1]（其实应该是两个在chroot前做，两个在chroot后做）
$ sudo mount --bind /dev /mnt/dev $ sudo mount --bind /run /mnt/run $ sudo chroot /mnt/ $ sudo mount --types=proc proc /proc $ sudo mount --types=sysfs sys /sys 然后你就可以在目标系统里跑grub系列指令了。grub-install和update-grub2一下。整个迁移就完事了。
EFI 其实grub的重点压根不在install上，而在于引导链条的工作机制。以我这种情况来说，我建议别犹豫，直接上UEFI。让你感觉到无比的轻松。
EFI的引导机制是从磁盘上的EFI分区开始的。当然，你的分区表需要是GPT格式的。EFI分区使用fat32文件格式，里面会存放N个代码文件。以前主板不认识文件系统，所以只能取磁盘第一个分区加载到7C00的方式来引导。因此通行做法是在这个扇区里放一个启动管理器，由管理器加载系统。现在BIOS可以认识文件系统了，因此完全没必要这么干。一个盘上有两个系统的话，就在EFI分区里放两个启动代码，再在BIOS里写两个引导表项。启动的时候你选哪个表项，BIOS就会读取对应的文件来继续引导。如果你有多个盘，每个盘又有多个系统，也可以这么干，只是会形成多个启动表项。所以引导管理就变得非常简单。
对于这样一种结构，我有以下建议：
基础系统不要跨设备。什么意思呢？以linux为例，你的root和boot最好在一个物理硬盘上，EFI也就安装在这个物理盘上。为什么呢？因为如果这三个跨了多个盘，任意一个盘的丢失都会导致系统挂掉。这等于把问题放大了一倍。如果你做了lvm和分区镜像。也请确保不是任意一个盘丢失你的系统就无法启动了。至于后续mount的各种分区，那到无所谓。反正你有一个基础的系统了，很多问题比较容易修复。 如果你有多个系统，最好的办法是一个系统一块硬盘。最多是每个盘切出一块来，给对方系统作为数据盘。这个方案同时适配传统引导和EFI引导。这么做的话，每个系统都认为自己独占了硬盘。他的分区结构之类的，是接近最简单设计的。 主系统最好用SSD。应用程序和主系统的读取频率高，写入频率低，但是对速率的影响很明显。因此我建议你把系统放SSD。数据盘反倒是用不用SSD自己斟酌。 但是如果你接受了建议3，那么在多数情况下，你就不大会接受建议2了。因为你不大会买两块SSD，一个系统一块。多半就是两个系统合用一个SSD，然后看要不要上HD了。这种情况下，请保证存储空间是够的。一个系统请最少保留不少于500G的存储空间。当然，Linux其实有个4G存储就能玩的很欢快了。500G是保证你在机器上开虚拟机/docker，也能流畅执行无需腾挪。Windows的系统就要保留100G。打游戏的话，500G只多不少。所以SSD要玩双系统，最低就是1T起。现在价格，600上下吧，不算太贵。你的时间比这点空间费用值钱。 引导链条 然后我们说回引导链条。对于EFI，我们一般会用grub-efi-amd64。这个模块装到EFI上的过程大约是，grub-install把EFI有关的文件都复制到/boot/efi/下面去。所以你首先需要把磁盘的对应EFI分区挂载到这里。然后grub-install会写BIOS的表项，产生一项指向那个位置的项目。你可以用efibootmgr -v查看。
随后，grug-install会更新efi下面的grub.cfg配置。里面有一个search.fs_uuid uuid root。这个指向boot或者root，用来指明efi模块被引导之后，接着读哪个盘。请检查这是不是你想要的boot/root。如果是的话，下面的配置会驱动它去读grub/grub.cfg文件，来进入grub stage 2。
grub stage 2的主要配置很复杂。Debian的配置其实是从系统里生成的。主要的生成配置在/etc/default/grub。一般你不需要改动这个文件。但是你需要看一下生成出来的/boot/grub/grub.cfg文件对不对。最主要就是search后面跟的uuid，是不是boot的uuid。如果是的话，grub2就能找到kernel。然后再看kernel启动参数后面的root参数，uuid是不是root。
如果都没问题的话，你开机应该能进入系统了。
这一圈核对对一般系统是没必要的。一般系统没这个烦恼。但如果是系统迁移，原系统又没有umount掉就开始装新系统的grub。一个搞不好哪里的uuid就指向了原来的。然后就怎么引导就是回到老系统上去。此时就要沿着引导链条排查。
全盘加密 最后我们要说到全盘加密的设计实现。全盘加密的困难处是需要先加载kernel才能解密全盘。但是kernel又在盘里面。所以完整的全盘加密需要grub支持luks。
我没搞那么极端。我分出来一个/boot分区未加密，这样就不需要grub支持luks了。当然，原则上来说，这样攻击者可以插入恶意代码来获得我的密码。例如替换掉我的kernel，插入他的恶意代码。但是EFI方案的问题之一就是，EFI上面的引导代码本身就是可被攻击的。攻击EFI引导代码和攻击kernel没有区别（除了会稍微麻烦一点）。要防御这个需要构成可信引导链条。要构成可信链条，需要EFI验证引导代码被签署，引导代码验证kernel被签署，etc。但是linux本身就不鸟这个思路，因为没一家BIOS接受grub的签署。大家一般也就是支持微软的签署，苹果自己支持自己的签署。所以，这东西没有任何开放意义，只能在微软自家里面用。用Linux的话就别被人近身吧。就这样。
kernel这层呢，需要安装cryptsetup-initramfs。这个工具会把/etc/crypttab这个文件打包到initrd.img里去。这个文件最新的版本不是很好解开。你需要先下载binwalk这个工具，然后查到里面的gzip数据块。再用cpio这个工具解开这个数据块[2]。大致指令是。
binwalk initrd.img-5.10.0-9-amd64 mkdir initrd cd initrd dd if=../initrd.img-5.10.0-9-amd64 bs=N skip=1 | gunzip | cpio -idmv 然后你就能看到crypttab这个文件的存在。</description>
    </item>
    
    <item>
      <title>2FA的选择和设计</title>
      <link>//blog.shell909090.org/blog/archives/2880/</link>
      <pubDate>Fri, 05 Nov 2021 22:09:09 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2880/</guid>
      <description>2FA简介 说是2FA，其实包含了MFA。也就是在登陆过程中采取两种或者两种以上的因素进行身份认证。一般来说我们懂，第一身份认证方式永远是密码。因此第二身份认证方式就不能是密码。而且为了增强安全性，一般2FA还有以下要求。
2FA的认证系统，和登陆系统，最好不在同一台机器上。因为第二因素认证主要就是为了防止密码被窃取导致用户身份窃取。如果两者可能同时泄漏，那2FA就肯定不合格。 2FA的认证中，如果采用输入数据方式的，输入的数据最好具备时效性。即两次登陆所传输的数据不同，且上次传输的数据不能用于下次登陆。这主要是为了防止重放攻击。 常见的2FA认证方式 RFC6238 非常流行的验证方式。下载个验证器，例如Aegis（我不大推荐Google Authenticator，那个不开源）。然后扫描一个QR码。验证器和服务器就会共享一个密钥。两者根据时间和密钥能算出一致的验证码（默认6位数）。验证时输入验证码即可认证身份。而由于时间参与运算，因此验证码30秒一换。一般系统会认可当前时间，30秒前，和30秒后的验证码，以免手机存在时间不一致的现象。因此一个验证码最长有效时间1分半，一般有效时间30秒到1分钟。攻击者单次得到验证码后一般无法重复使用。当然，能在半分钟内完成攻击的攻击者RFC6238无法防御。
U2F Key 比较新的验证方式。U2F是一个独立的硬件，一般插入USB，或者用NFC通讯。硬件内有CPU，使用时分两步。
注册。用户将某个U2F设备绑定到某个系统。此时设备会为这个系统生成一个新的公私钥对，并且把公钥发送给系统。系统要储存这个公钥以备后续验证。 验证。系统通过公钥验证用户是否持有私钥。这个步骤一般会要求你触摸物理设备以防攻击者趁你插着U2F设备偷偷做验证。 由于整个过程不需要传递私钥，因此私钥可以（理论上）只保存于U2F设备内不可提取。由此来保护U2F不可复制。
有兴趣的可以看一下Yubico的设备实现细节。Yubico并没有存储所有的私钥。它其实使用内置密码，随机数和网站名来哈希生成私钥的。随机数会被丢给网站保存，下次验证时再从网站取回来。由于不传递内置密码，因此即便获得随机数也算不出私钥。而由于有网站名参与生成私钥，因此对每个网站他的私钥都不相同。
物理Token/验证器/动态口令牌 这三个说的都是同一个东西，就是一个物理的令牌卡，里面装着电池。按一下，或者输入密码（准确说是pin），里面会给出验证码。一般一个验证器对应一个网站。你可以认为是一个定制的RFC6238专用设备。其中需要输入密码的形式强度比较高一些。
Token还有个变形是系统会给出挑战码。你需要输入挑战码才能得到验证码。这个形态用起来更加不好用一点。
定制令牌 这种就是类似于招行U盾之类的东西。也是一个独立硬件，插USB口上。初始化会写入证书和私钥，后续私钥无法读取，以此来保护不可复制。一般会用一个密码来保护硬件设备，以防丢失。
定制令牌其实可以视为一个OpenPGP接口的smart card，但一般接口不通用。其安全性和U2F相仿，但是由于没有&amp;quot;摸一下&amp;quot;这个步骤，因而容易被MITM攻击。通俗点说就是有人可以趁你插上设备解密后，偷偷装作是你使用设备。因此定制令牌在不使用的时候都需要拔下。
短信和电话 基于SIM的验证方式。发个验证码或者打个电话给你。输入验证码完成验证。
从抗丢的角度来说，电话验证要比短信弱一点。因为锁屏一般也可以接电话，但是未必能看到短信。但是从系统拦截的角度来说，拦截短信要比拦截电话并识别语音内容要简单的多。
SIM的优点是容易找回。一般你不会用一个一次性的，不和身份绑定的手机卡做验证，对吧。因此不会出现硬件丢失导致系统进不去的问题，了不起补办SIM卡。缺点就是，一，智能手机系统可能拦截验证信息。二，运营商和政府能很容易的拦截验证码。
邮件 SIM卡验证的邮件版本。由于邮件系统先天不加密，所以邮件的安全性是所有系统里最差的。如果看到某个系统把&amp;quot;邮件&amp;quot;列为可选2FA，我建议你干脆关了吧。但是邮件在通知和取证合法性上是最好的。很多网站会在你做了安全操作后给你发邮件通知确认。
很多网站可以通过邮件验证来找回密码。此时邮件就承担了密码等同的功能。这是很危险的，安全性全赖邮件系统不泄漏，而且是发送方邮件系统和接收方邮件系统均不泄漏。因此千万别用小厂邮箱做身份绑定。一方面泄漏风险大，另一方面，万一关门了也够烦的。注意这里不但指邮箱系统不要用小厂的。如果你用自定义域名，域名供应商也要一并考虑。
对于SIM卡和邮件来说，我建议你的&amp;quot;验证系统&amp;quot;和&amp;quot;日常系统&amp;quot;分离。例如手机弄两张SIM卡。日常用一张，验证用一张。邮箱同理。最好验证用的SIM卡和手机都是专用的。这台手机上干脆别装什么其他应用。
专用App/QR扫码辅助登陆 专用App指Okta那种。需要提前登陆。登陆后有个功能，按一下就可以认可后续的登陆。这种系统安全性和RFC6238差不多，秘密的安全性取决于系统和软件。相对于RFC6238，专用App的优点是使用快捷一按就得，缺点是通讯要求网络稳定。
QR码就是不按按钮，通过扫描系统提供的QR码来确认你的身份。专用App一旦能扫码，就能为其他网站提供身份认证，因而可以视作一种SSO系统。在国内，微信就大量被用作这种SSO系统。
上面两者的机制不同，但是效果很类似。
备用码 对所有&amp;quot;丢失后无法找回&amp;quot;的辅助认证系统来说，一定要有备用码的功能，或者你要做好丢失硬件后无法访问系统的准备。备用码是一种预先发给你的代码，在验证硬件丢失的情况下，可以用来重设2FA。当然，由于它有这个效力，因此也可能在丢失的情况下威胁系统安全。千万不要把备用码存放在登陆的电脑上，否则不如放弃2FA。
比较蛋疼的是。备用码发给你的过程，本身就要在登陆系统上完成。因此只能假定你在收到备用码的时刻，电脑并没有被入侵。否则备用码机制会使得2FA失去效用。
很多人喜欢用手机拍照保存备用码。这种情况下记得两点。一，不要开启照片云同步。二，保存数据的手机和验证手机不能是同一台。
安全性分析 我们首先把2FA验证机制分为两类。需要通讯的验证机制和不需要通讯的验证机制。所谓通讯是指2FA的系统和目标系统通讯，不是你的登陆电脑和目标系统通讯。上面的各种方法中，RFC6238，Token，定制令牌和U2F不需要通讯。严格来说备用码也不用，但我们不把它视为一种2FA。
不需要通讯的认证方式 不需要通讯的验证方式比需要通讯的验证方式更加快捷稳定。例如，相对于手机。在验证码发送服务商忙碌的时候，可能你恨不得砸了手机。不需要通讯的认证方式就没有这个烦恼。 RFC6238，Token，定制令牌和U2F都拥有&amp;quot;秘密&amp;quot;。因而其安全性取决于如何保守这些&amp;quot;秘密&amp;quot;。这方面显然Token，定制令牌和U2F要强于RFC6238。因为后者往往需要一台智能手机作为基础，而手机可能存在各种漏洞导致密码/密钥被窃取。 在抵抗物理盗窃方面，RFC6238，Token和定制令牌则要强于U2F。U2F上一般都不会配备二次验证装置，常规就是在需要验证时让你摸一下。但是物理盗窃后是无力抵抗的。而前几个一般都会配备二次验证装置。手机可以上锁，Token一般带有pin，定制令牌带有密码。因此丢失后依然可以抵抗盗用。从这个角度说，U2F应当带指纹。但是这样会更贵。 使用便利性上，RFC6238，Token和定制令牌由于需要二次验证，一定会比U2F难用。 因此首选推荐U2F和RFC6238。前者便利好用且强抵抗密钥复制，缺点是怕物理窃取。后者抵抗物理盗窃且很多系统都有实现，缺点是秘密的安全性取决于系统和软件。Token和定制令牌的最大缺点是太少有系统配置。一般常见于安全产品和银行产品。 需要通讯的认证方式 由于邮箱的安全性隐患，因此实践上SIM卡一般比邮箱强一点。但其实是强点有限。因为验证码在运营商那里还是透明的。只是手机运营商一般比邮箱运营商更专业，因而能带来一些实践上的保护作用。 从法律上讲，手机运营商没有给你任何额外的安全性承诺。如果你的账户依赖于手机或邮箱的安全性，在出问题的情况下无法向这两者索赔。这在银行系统里是很重要的。与之对应的，如果你能证明你的钱被偷是因为银行Token或令牌的缘故，银行是要对你负责的。 无论是邮箱，SIM卡，还是专用App，都无法保护你对抗政府。 大部分基于通讯的认证方式优点是天然抗物理盗窃。但与之相对的，你需要对自己的终端负责一点。手机开密码或指纹保护，SIM卡开启pin码。锁屏通知要隐藏内容。手机千万别root。如果笔记本能自动收邮件，那么笔记本本身就要带密码，而且记得勤锁屏。 强度上来说，专用App和SIM卡很难说。我个人倾向于专用App更强一些。因为专用App的安全性只依赖于你的系统和软件的安全性。SIM卡的安全性不仅依赖于系统和软件，还依赖于运营商系统。但是相对的，专用App的密码安全性就要足够强。 结论 推荐上来说。我首推U2F。使用简单但要注意防止丢失。不支持U2F的，建议采用RFC6238。再次之选择专用App/QR扫码。再次之选择SIM卡。最差选择邮件。</description>
    </item>
    
    <item>
      <title>几个保护存款安全的小建议</title>
      <link>//blog.shell909090.org/blog/archives/2879/</link>
      <pubDate>Thu, 28 Oct 2021 01:38:46 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2879/</guid>
      <description>安全信息千万不能泄漏 安全信息包括密码，印章，信用卡号码+CVV+有效期，U盾，等等。
但凡是你自己泄漏的安全信息导致丢钱，银行一概不赔。
货币市场基金(money market func)的风险不是零 货币市场基金(下简称MMF)很像活期存款。他可以以T+0或者T+1的方式存取转换为活期，并且有一个比活期高得多的利息——今天的利息约是年化2.8-3.0。因此很多人把MMF当作活期存款(cheque account)来用。但MMF不是活期存款，它至少有两大风险。首先，虽然可能性很小，但是MMF是会亏损的。08年的时候雷曼兄弟坑过不少MMF。其次，MMF不受PBOC的存款保险制度保护。所以如果银行倒闭，MMF的价值是否存续并不确定。
但MMF是非常有价值的。大多数情况下，人们需要准备一定的流动资金。这些流动资金无法参与固定期限投资，存活期又太吃亏。此时MMF就是一个不错的选择。只是不要把你的全部积蓄都投到MMF上去。
PBOC的存款保险上限50万 简单来说，一个人在一个银行的各种存款之和大于50万的话，在倒闭的情况下就不能保证拿到所有存款。如果你的资产大头是存款，又超过50万。建议分多家银行存。
银行的风险不是零 中国倒闭过两家银行，海发行和包商。包商的个人存款是全额兑付的，但是企业存款没有全额兑付。我相信未来一定会出现个人存款不全额兑付的银行倒闭案。因此为了你的资金安全，请把主要资金放在足够安全的银行，并保持单一行存款不大于50万。
银行安全性排名 其实是国内系统重要性银行排名。但考虑到后果，这批出事会优先救，相对安全性也就好一点。
最高的是工农中建。第二档交通招商兴业。第三档浦发中信民生邮储。这三档包括六大国有行(工农中建交邮储)。五大股份行，招商兴业浦发中信民生。我建议你把资金存在这11家银行。
顺便一提，第四档平安光大华夏广发宁波上海江苏北京。四个股份制四个城商行。这批也勉强能用。
其余最好少来往。
银行安全只代表银行本身的稳定性，并不代表你的资金安全 主要说的就是存款消失问题。
我翻阅了很多相关报道，发现这个问题即便六大国有行也无法避免，而且有时不需要你配合。所以没有太多可以做的事情。大概来说有这么几点。
别乱签银行给你的任何文件，自己大致读一下。有的柜员会给你一份保单，你看都不看签了，大概这辈子就看不见这笔钱了。银行会说是你同意购买保险的。 所有操作必须在银行柜面和理财柜面，和穿着制服的人做。这些地方摄像头多，且银行必须负责。不要相信工作人员的私下承诺，更不要去私下签合同，或者由工作人员帮你代办你的业务。工作人员把你拉到僻静的角落什么的一看就是诈骗的开头。 开通存款变动通知，并且时不时的检查通知有效，存款正常。 </description>
    </item>
    
    <item>
      <title>肺结节切除</title>
      <link>//blog.shell909090.org/blog/archives/2878/</link>
      <pubDate>Mon, 09 Aug 2021 15:07:15 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2878/</guid>
      <description>起因 这一大摊子事的起因是我去年8月感冒了。当时不是新冠么？所有人都拉去做CT。我当时还颇为腹诽。结果做出来，右肺上叶有小块磨玻影，大小0.8*0.8。我当时就傻了。
诊断流程 后来很快挂了仁济的号，呼吸外科专家意见是，先等三个月。倒推的话，估计是排除了小细胞肺癌（SCLC）。小细胞肺癌一般长在肺的中央。我的磨玻影靠近胸膜。非小细胞肺癌一般长起来没那么快，正好可以看看是不是别的什么，例如感染。 11月，又来了一张CT。确定没有吸收。所以不是结节就是肺癌。医生建议切除，原因是紧邻胸膜。 咨询了一下外国专家意见。结论是可以随访。 和我妈说了一下。她说她的胸平片上也有个阴影，医生建议随访。我说你别不当回事啊。 4月，又拍了一张CT。这次是呼吸内科门诊，结论也是切。 5月，田田抽了管血做标志物分析。结果是不能确定也不能否定。 5月，我妈做了个CT，结果医生直接说，赶紧切吧，多半是腺癌。 6月，我妈做了个手术。全称应该是单孔胸腔镜下肺楔型切除术。切完一周我去看了一眼，精神状态良好。 6月底，手术的冰冻病理结果出来，确认是腺癌。ALK阴，EFGR阳性。然后我就决定，尽快切除。 过程 前一周 看医生，拍CT，确认有手术指征。医生当时直接安排了住院。然后让我查了一个PCR。介时凭住院单，PCR报告，和CT报告，住院。CT报告当时还没出，但是片子能马上看到。
周一 疫情期间上海陪同规则统一为，一个病人允许一位家属陪护。陪护人员进病房前需要3天内核酸报告和14天行程码。出病房后需要重新提供核酸报告和行程码。 上午，抽血，做检查。 一个动脉血气，抽的挠动脉。腹股沟肉太厚，反而不好抽。 一个静脉血，抽了7管，查了7个不同项目。甲乙丙艾梅，血常规，血型，凝血，肝肾功。顺便查了一下鳞状细胞癌抗原和神经元特异性烯醇化酶。前5个是手术常规项目，后两个是抗癌项目。 ECG，心脏彩超，超声探查腹腔。最后做了个呼气测试，简单来说肺活量（FVC）4.39L。腹腔探查主要是确认是否存在内脏和淋巴转移，ECG和心脏彩超主要探查心功能，确认麻醉耐受能力。呼气测试主要是手术会使用单侧通气，确认肺功能能够支撑。 周二 出了血型报告，居然TM熊猫血。Rh阴性O型，简写O-。在中国人群中出现的概率为千分之三。我前面还有Aspirin停药不到10天。一下子就觉得开车不系安全带。 抽血，交配血。这步主要是防备一些稀有血型捣乱。例如孟买型就经常被查出来是O型。通过交配血，可以最大程度避免这个问题。当然，我要是碰到Rh阴性孟买型，就彻底完蛋了。以后只能自体输血。 下午和麻醉医生谈话，签知情同意书。 晚上备皮。就是把两侧腋窝全剃光。话说，为啥要剃另一侧？ 晚上8点禁食，10点禁水。阿片类会有呕吐作用，手术的时候又上着肌松。万一误吸就完蛋了。 10点左右灌肠，然后拉了一堆甘油出去。感觉肠子被清空。 周三 早上先送去定位。前一个老太可能太紧张，定位完了就手脚麻痹瘫掉了。医生判断肌张力正常。做了个CT确认没事，平床送走了。我上去定位，CT下照完之后不能动，让医生在同一个位置穿刺。穿刺前还是会打利多卡因的。穿刺时有点难受，但是还可以接受。穿刺结束还想走回去。被护士要求坐轮椅推回去以防出事。 10点前后喝了一瓶流食。据此推算大概12点之后手术。 11点半有医生推平床让我上去。然后穿过长长的走廊到手术室。感觉有点慌，但是好手好脚，问题也不大。 进去先做中心静脉导管穿刺。这个还好，有利多卡因局麻，不难受。但是因为后几天我脖子不敢转，导致脖子僵住了，现在脖子还是处于转动困难的状态。 等了半天，推进手术室。麻醉医生说，先等等把，医生去吃饭了。我说算算时间也正常。然后给我接上CVC，上了舒芬太尼。麻师还问上没上，我说肯定上了，我都开始晕了。麻师说牛奶等等，我要给你打个椎旁阻滞。牛奶推完了我弄不动你。我说行把，咋整？就转半圈身，在背后脊椎旁边打了一些药物进去，再转回去躺好。这个药物管了大概24个小时。 麻醉医生说回头应该会插个导尿。我说这个是清醒插还是麻醉？麻醉医生说肯定麻醉啊，有肌松方便多了。我想想也是。结果做好出来发现没插导尿。 后面转回来，我肯定还说了啥，但是就不记得了。牛奶应该会产生逆行性遗忘。再有知觉就是旁边有人喊，醒醒，手术做好了。我说我好困让我再睡会。再稍微清醒已经是下午三四点，在自己病床上了。 接了一个胸管引流，一个CVC补液，还吸上了氧。但是没有尿管，也没有镇痛泵。这是个大失误。 手术结束后的当晚，人还是比较舒服的。呼吸的时候能感到胸内隐痛，但是不明显。当时舒芬太尼其实已经代谢的差不多了，是锥旁在起效。舒芬太尼镇痛效果很好，就是代谢太快。快的数分钟，慢的也就半小时到一小时。 请了个护工，还是很给力的。否则老婆还要辛苦。很多动作她做不动。其实换我的话我有力气，但是也不懂方法。护工能解决不少问题。 晚上8点禁食，10点禁水，第二天抽血。 周四 胸管引起剧烈疼痛，从早上9点开始一直持续。椎旁打了之后大概起效了20个小时。后面就越来越痛。 和医生抱怨后无法解决。无奈，让老婆赶紧赶过来。 做了个床旁CT，一切正常。 抽了个血，做肝肾功，血常规。结果肯定有白细胞升高。不知为何又查了一遍丙肝(hep C)。还查了七种自身抗体。没一种有反应的。 每天吊两次针，做两次雾化。吊的内容大致是，头孢（抗感染），凯纷（止痛），沐舒坦（化痰），耐信（抑制胃酸）。抑制胃酸可能是因为止痛的凯纷是NSAIDs，容易造成胃溃疡。还有一种我也不是很熟悉的补血药剂，听说是铁合剂。 冰冻的快速报告出来了。右上肺叶倾向微浸润性腺癌。右下采样倾向良性。下面就看有没有侵犯胸膜了。TNM评估里，无侵犯胸膜的话，大小评级是Tis或T1。如果侵犯胸膜，则是T2a。分期上一个是IA期，一个是IB期，差别还是很大的。 床旁死活尿不出，也没有尿管。最后解开胸管固定，拎着胸瓶去厕所解决的。 疼痛问题反复交涉后结论如下： 手术下来时不带镇痛泵的，后续就不给装了。 现在已经输止痛药了。我看了一眼止痛药，凯纷，NSAIDs类。大概意思就是，加强版散列痛。 疼痛主要是胸管和肺摩擦导致，有呼吸就痛。调整体位可能有帮助。 我开始研究如何缩短呼吸时间。这个不就是自由潜的呼吸调整技巧么？ 明天拔管后就好了。 忍到晚上9点，实在无法忍受，上了一支杜冷丁。医生特意强调，这支打完24小时内就没有麻毒方药物了。效果大概是1-2小时。11点半又开始痛了。所幸之前趁着杜冷丁尚有效调整了一下体位，还能忍受。后续就硬忍着等到了第二天早上，一直无法入睡。估计调整前7-8级疼痛，调整后4-5级。 杜冷丁无法持续用的原因是，代谢产物具有强神经毒性。打多了会有依赖性，且人是真的会变笨的。 周五 忍到10点，拔管。拔完了输上凯纷，顿时人就舒服了。还痛，但是可以忍了。 当天开始把流食换为普食了。 护士开始宣教，包括一个月内伤口别碰水，半年别坐飞机（自然，一年内也别想潜水了），三个月后复查。 周六 早上医生来看看一切正常。 护士站让我们留一下快递方式，回头把冰冻病理报告给我们邮过来。 输最后一次凯纷。CVC拆除，一身轻松。 吃完午饭准备跑人。走路的时候感觉在飘，但是还能自己走，不需要扶。 去文峰好好洗了个头，然后理了个头。 禁食两天，加两天流食，还一直躺着，肠道没有充分运动。所以周六排便的时候受了大罪。拉起来非常费力。所幸一次就好了，后面都是正常的。开始排便的时候味道真的是恐怖。一两次之后就和正常大号没有区别了。 周日和后续 疼痛和麻痒，但是吃止痛药的情况下可以控制。 只有一个手能动。另一只手灵活，但是肘以上不能动，动会牵扯皮肤，引发疼痛。也不能往下支撑。使用肋间肌，也会疼痛。 伤口不能碰水。贴一块大号敷料，用胶带固定。 洗头要坐着用盆浇，下半身完全靠老婆洗。 脖子酸痛无比，比伤口还厉害。伤口并不怎么痛，反倒是肩膀偶尔疼痛难忍。根据我的经验，这个是内脏牵涉痛。 反思 其中问题最大的是镇痛泵。谁知道这玩意下了手术台就没机会装啊。早知道我就在麻醉医生谈话时强烈要求安装。后续我可能要跟进投诉这个问题，胸科手术后下胸瓶不给镇痛泵居然不告知签字的么？ 次之是导尿。有导尿能解决不少问题。不过不构成重大影响。也就是多拎着胸瓶跑几次厕所，比较麻烦也比较痛苦。 家属陪护一定要去。就算之前谈话的时候自己好手好脚，等做完手术一定要有个亲人在。护工不能代表你解决问题。例如这次，如果我老婆不去，最后很可能就差一支杜冷丁。里外就要多痛2个小时，外加由于不敢翻身导致后续持续疼痛。一般来说，每天来几个小时也够了。有需要可以随时过来就行。疫情期间不能进出比较麻烦。 入院前要理个短发，方便不少。 护工能帮很大忙，不要舍不得。 住院出来的人手里常常会拿着个盆——记住，这是有原因的。不要以为你有台盆用不着脸盆。等你坐在床上做雾化，嘴里苦的一塌糊涂，护工拿水给你漱口的时候，台盆一点用处都没有。 特需病房很方便。最后我，我老婆，护工，三个人睡一个房间。普通病房就麻烦的很。特需一个房间一张床，旁边就是一张陪床。这样才勉强睡的下。 手术结束后，血压上升很慢。由于手术中禁食水，所以降压药一直没吃。血压现在（停药后120小时）在95/140这个水平。比常人略高，但是远低于之前的三级高血压，120/160。我怀疑是副肿瘤综合症，但是不像是小细胞肺癌，且当时检查皮质醇水平一切正常。 熊猫血的事还需要跟进。包括复查确认，检查RhD抗体是否存在，检查Rh其他抗原（即CcE），检查RhD放散型血型。 感谢 首先要谢谢我老婆。谢谢她这么久的照顾。谢谢她及时赶过来，要到了一针关键的杜冷丁。也谢谢她支持我的整个决策和手术过程。</description>
    </item>
    
    <item>
      <title>给年轻人的几个理财建议</title>
      <link>//blog.shell909090.org/blog/archives/2877/</link>
      <pubDate>Tue, 15 Dec 2020 22:49:25 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2877/</guid>
      <description>最近研究了一把理财，想了想，打算给年轻人一点建议。
储蓄 如果赚的不多，就多存点钱，尤其是现钞。至少够你失业在家安安稳稳呆一年吧。这两年经济形势变幻莫测，失业其实不是一个太远的威胁。
理财尽量选保本的。毕竟信仰在逐渐被打破，投个理财就能无脑赚钱的时代已经过去了。投非保本收益大于风险可以博一把，但一定要知道自己在干嘛。
如果只是研究低风险产品，没个几百万就别折腾了。百万资产一年的无风险收益3W左右。改低风险产品改来改去也就多个一两万。对大多数人来说，抵不上研究理财的投入。至于高风险产品，请一定要知道自己在干嘛。
现在保本理财除了定存，还有结构化存款和国债。一年期定存大约是1.75。结构化存款最差1.2-1.5，最好4左右，平均水平大约3出头，而且周期只要三到六个月。流动性更强收益更高。当然国债流动性更强，但是收益受利率影响。如果看不准，就买快到期的。地方政府债要小心，城投债别碰。
无论怎么投资理财，先保持自己的流动性充足。可以大致统计一下平均月花销。保险起见，要做到半夜能拿出一个月花销，5天内能拿出一年花销。多出来的钱，再说保本理财之类带锁定期的产品。
谈流动性的时候别以为你能问朋友借到钱。搞不好他可能还要管你借。也别把信用卡算进去。下一节我们会专门说信用卡。
流动性比较强的产品有几种。一个是各大行都有的&amp;quot;XX宝&amp;quot;类现金管理产品。一般是T+1赎回，附带1W左右即时赎回额度。这个产品的底层一般是各行自己的T+1理财。你不如直接找T+1理财买，搞不好能找到收益更高的品种。R0风险，目前收益在3-3.2之间。另一个是T+0理财，工作时间当场赎回，非工作时间有5W额度限制。R0风险，收益在2.7-3之间。
当然，万一使用到这种即时取出额度是有代价的。首先是会损失几天的收益。其次，如果是大额赎回逃风险，那是赎不出来的。但是如果是半夜要突然付一笔钱（尤其是医药费）。这个方法非常合适。
建议花销不多的，找合适的T+1产品买。附带的1W即时赎回就够满足即时资金流动性了。花销多的，可以在两个银行分别找一款（为什么是两个行我下面会说），那就是2W流动性了。再多，加买T+0产品。两个行叠上去最高可达12W。一个月花销超过12W的土豪爸爸请忽略这个建议。
R0级风险其实也不保险。因为R0级也不是“保本”。但绝对保本大流动性产品只有国债。而一般国债在半夜都是抛不掉的。所以绝对保本的方案只有活期存够一个月花销，国债买够一年花销。这个方案收益很低。尤其是短期真的要抛国债了，会亏手续费。所以可以考虑承受一下R0的风险。
如果满足流动性后有余钱，可以考虑R1的产品，也可以不考虑。R1一般带锁定期，收益在3.7-4。T+1的R0都3.2了。100W的资金从T+1的R0换R1，一年也就多出个5000-8000。性价比有点低。换我的话就直接扔国债了。3-3.2的年化，几乎随时可流动(T+1/2)，而且保本。
房子可以买，房贷要谨慎。买房请自己评估会不会给自己带来便利。一般来说，能给你带来便利的房才有增值空间。贷款是个高风险操作，因为失业了压力很大。建议手里保底存一年开销（包括房贷）。这样有时间做调整。
如果还在用小行，地方行，城商行。你最好把资金转移到国有六大，或者至少股份制银行里。城商行的安全性比城投债好点，用做资金进出通道没问题。但是存资金就不好说了。银保监规定每个人在每个行的唯一一张普卡不得收账户管理费，所以留着卡也不用担心银行找你要钱或者卡作废。如果是金卡以上，考虑降卡。
万一不幸碰到银行爆雷，要分清情况。各种产品只要目标公司没关门就没事。活期和定存在50W以下的，央行可以托底。所以不要在一个行存超过50W的存款。也不要听说某行会爆雷就赶着去取钱——这是大爷大妈干的事。请在之前把活期资金安排在两家银行里。如果爆了一家，你可以用另一家的活期资金，然后慢慢等待政府安排。当然，最好就别碰城商。省事，不找麻烦。如果连六大国有都爆雷了，那你也就不用持有人民币了。
总之，多存钱，少借债——无论是借人还是问别人借。有的时候不是老朋友想赖帐，而是他以为他还的上。存款也是一样，谁能打包票一定不会失业呢？
以上内容不构成理财建议。请自行考虑实施。
信用卡 用卡最重要的是薅羊毛而不被割。
信用卡的第一条优点，就是提供最长50天宽限期(或者叫免息期)。所谓宽限期，指你从消费开始，直到最终付钱的日期。注意有些行也有个宽限期，意思是从你应当还钱开始，还能再拖几天。两个意思不一样。我下面说的宽限期，都指免息期。
不妨想一下。如果你每月刷卡1W。这些钱放在银行里，每日收益就是0.82元。推迟30天，等于每个月送你24。一年等于白送你288。
信用卡的第一个缺点，是卡息超高(16-18)。甚至超过国家规定的最高借贷利率。所以千万不要逾期，千万不要循环。你去借个小贷还卡都用不了这么多钱。至于逾期，很多卡逾期第一天时，会把整个宽限期的利息都算上。所以逾期只要一天就会花很多钱。顺便一提。如果你真的不幸欠了钱。优先借便宜的钱还贵的钱。像信用卡这种超出最高借贷利率的钱。你怎么着都要借别的钱来把它填上。
信用卡的第二个优点，就是提供一份完整的消费报告。对一般人来说，有两个消费报告口径。手机党可以选择支付宝+微信。两个消费通道合起来应该能够还原你的大部分消费。我这种还有单独刷卡的，就是信用卡+借记卡流水。一样能还原消费记录。
消费记录是你检查自己有没有大额非必要开支的重要工具。可能大部分人拿到消费记录都是没用的。每个开支都是必须的。但是有可能有些人拿到消费记录就会发现。啊，什么上面花钱太多了。不知不觉的。所以半年检视一次消费记录报表，尤其注意分类别报表。防止有些不必要开支始终存在。
信用卡的第二个缺点。不必要的额度。往往一个月薪1W的，发卡行就敢下额度给2W。两个发卡行就给了四个月工资。储蓄率50%的家庭需要八个月才能还上本金。更不提利息多少钱。其实那么高额度是要干嘛呢？能买车还是能买房？你算算每个月正常必要消费多少，把额度人工降到两个月消费，并坚持不随便调上去。能很大程度抑制不必要消费和循环透支。如果你的卡额度还不到两个月额度，就不用给自己设卡了——多搞点额度是正经事。
另外，半夜里紧急手术这种储备，最好以现金流动性储备，而不是信用储备。因为信用是许可，不是权力。万一碰到很忖的情况，银行有权拒绝刷卡。
调整额度注意一个事。招行为例，有两种卡额度的方法。一个是限定卡额度。这个不管循环和分期，也可以随时调高。另一个是调整信用额度。调低了就不保证能调高了。请TM务必使用第一种方法。主要是为了防止盗刷和避免超支消费，不是为了让银行少给你点额度。用一个朋友的话说。额度永远是有用的。你可以限制不用，但是别拒绝拥有。
信用卡的第三个优点，有羊毛。很多信用卡有各种积分活动什么的。如果用的上，可以够一下。用不上要放平心态。用不上的权益就像登月旅行前提供的免费贵宾室一样——看起来物超所值，实际上P用没有。
信用卡的第三个缺点。容易被盗刷。这里有三个小办法。
一，很多行有盗刷免赔，但是方案细节要自己去问。招行根据卡级别会给予一定盗刷免赔。我的大概是1W。所以我就把自己卡的额度锁在1W。满足了上面限制额度的要求，也不怕盗刷。然后绑定手机和微信的信用卡消费通知。在盗刷24小时内通知银行并报警。至于浦发，我是买的盗刷免赔服务。我现在在考虑是不是必要。
二，很多行下卡后会自动设定密码。有密码情况下的盗刷视同本人消费。我特别打电话问过招行，可以关闭刷卡验密功能。之后的消费看签名。这点银行不会告诉你，需要你自己打给银行确认并录音。我特别的关闭了所有刷卡验密功能。
三，银行也有换卡服务。但是信用卡的换卡涉及物理更换整套信用卡信息，包括实体卡。所以一般会收50元。有很多行现在推出了虚拟信用卡。招行要绑定app，我不是特别喜欢。我这里特别推荐浦发ego虚拟信用卡。没有实体卡，纯网络消费，换卡0费用，而且各大网站都能把他当作一张普通信用卡去刷。缺点就是，风险很大。除非你刷一次卡换一次。这也是为什么我要买浦发的盗刷免赔的原因。
最后是用卡最关键的一个问题——卡债是要还的。不管你是用宽限期/免息期，分期，循环，还是refinance。最后这些消费不会消失不见，还是要本人偿还。如果你没有偿还能力，早晚会被这些债务压死。所以务必请根据本人收入和支出水平，合理安排卡债。千万别出现过度负债。因为一旦进入负债状态，退出将极为困难。
有个财务指标来衡量是否超额借贷的——短期流动性充足率。简单来说就是现金，支票账户（活期账户）类的总金额，所有可以在7天内变现的资产（例如T+0/T+1现金理财产品，国债），额度加一起。比上短期负债，例如信用卡债或其他三月内负债。这个指标表明你短期内流动性是否足够。通俗的说你的1元短期欠款有多少短期资金在后面准备着。一般流动性充足率最好在2以上。即活期的钱要比卡债多一倍。最低最好别低于1——这说明你的活期还卡债已经不大够了。如果小于0.8，你要赶快想办法安排短期流动性。
这个指标的优点是非常清晰。只要你的活期始终能还卡债，就没有过度借贷。缺点是，他只管过度借贷不管过度消费。你月入1W，卡里有10W，花8W买了个八星八钻智能机。一算流动性充足率，1.25，良好。
记住，千万别套信用卡的钱。即便生活有压力也尽量别这么干。更千万别套出来做投资。根据信用卡规定，信用卡内的资金不可用于投资用途。凡是用信用卡内资金做投资用途被发现的，轻则降额，重则归零。即使是AB卡循环额度套现还账单，一旦被风控也会降额度。这个最惨。一降额AB卡整个就转不下去了。转不下去又还不起钱会正面撞上高息信用卡债。你索性直接问银行贷一笔消费贷可能都好一点。首先利率低。其次，银行一旦贷款发出去，很少会要求提前还债的。
21年的总体形势，就是抗风险。</description>
    </item>
    
    <item>
      <title>How it feels like to see a doctor for fever in Shanghai</title>
      <link>//blog.shell909090.org/blog/archives/2876/</link>
      <pubDate>Tue, 18 Aug 2020 20:25:27 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2876/</guid>
      <description>Last Thursday I felt uncomfortable. Stuffy nose, coughing, tearing. Feels like a cold. I took my body temperature, it was 37.4 (99.3 F). Given the current situation, I don&amp;rsquo;t wanna make trouble in the beginning. So I chose to stay at home for one day. Keep myself from others and see how it goes.
Next day, it went worse. Joint pain, feel fever, tearing, runny nose. Took body temperature again, 38 (100.</description>
    </item>
    
    <item>
      <title>在上海看感冒是种什么体验</title>
      <link>//blog.shell909090.org/blog/archives/2875/</link>
      <pubDate>Tue, 18 Aug 2020 20:25:24 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2875/</guid>
      <description>上周四我感冒了。早上起来浑身不舒服。鼻塞，咳嗽，流泪。以我的经验来看，应该是感冒了。量了一下体温，37.4。介于有事没事之间。不过鉴于现在的疫情，有些麻烦能免则免。万一不是呢？所以我就没去看医生。只请了个病假在家休息——虽然我没觉得很严重，但万一传染了事情就大了。为了以防万一，还是在家呆着好了。
第二天，问题更严重了，浑身酸痛，发热感，流泪，流鼻涕。再量了一次，38。看来是免不了麻烦了。
在去医院之前，我先查了一下现在就诊的一些说明，例如是不是需要救护车上门收治之类的。前台说我想多了，自己打个车过去，注意个人防护，别坐公共交通就行。
发热门诊在仁济东院一栋专门的楼里，和正常门诊分开。正常门诊在北门这边，发热门诊在东门进去，一栋小楼的后门位置。相邻的两个门。一个是发热门诊，一个是CT室。就诊流程是先量体温，然后填写发热门诊申报卡，还有发热门诊就诊同意书。发热门诊申报卡是扫码手机填写，没微信的估计会很惨。主要是填写是否接触过新冠患者，是否去过外地，怎么来的医院，紧急联系人联系方式等等。就诊同意书告诉你，现在发热门诊有很多强制项目（大多和COVID-19有关），价格都很贵，不想看现在转身就走。
量体温没啥好说的，但是居然是舌下温度计。门口一群患者摘了口罩叼着个温度计坐的远远的，你看我我看你，都怕的要死。我知道红外体温计不是很准，但是一群发热患者摘了口罩坐在一起也有点&amp;hellip;
填完申报卡，挂号交6元（医保copay，我特意看了一眼，医保支付21）。然后不看医生，先做化验。扎手指采血一份。然后自己拿一根粗棒子在鼻子里转圈采样一份。医生说这个是甲乙流采样。还有一个是新冠PCR采样，要由护士来做。估计是自己不好下这个狠手。两根细细的软棒，一根在鼻腔里转一圈采样，一根在口腔靠近咽喉的位置转圈采样。实话说挺难受的。鼻腔采样的时候总想打喷嚏，口腔采样则是差点吐出来。
至于费用。我特意看了一眼单子。CT 250CNY，CBC 20CNY，新冠抗体80CNY，PCR 120CNY，还有耗材60，总计532CNY。医保全额支付，没有copay。
采样结束，提交全部样本后。医生让我去拍个CT。实话说我挺头疼的。一个CT的辐射量差不多就是一年的安全辐射值了。不过没办法，情况比人强。我要是不做扭头就走，搞不好后面就是谁来找我了。CT没啥好说的，就是躺在台子上看机器转圈圈。做完CT，等20分钟，全套报告就出来了。全血化验(CBC)结果，新冠IgM，IgG阴性，白细胞，中心粒细胞升高。甲乙流阴性。看化验单基本就是细菌性感冒。不过医生跟我说，急查只有新冠抗体。PCR要等至少一天。明天可以在微信公众号上查到报告。
查好刚好是中午，医生去吃饭了。所以我就多坐了一会。大概半小时，医生吃饭回来（也够苦逼的，一顿饭才半小时功夫，还要扣掉走路），看了一眼报告。结论细菌性咽炎，开了点抗生素和退烧药，再加一盒双黄连。我特意看了一下价格。头孢地尼50mg*12pc，两盒，一盒45.84CNY。氨酚伪麻美芬12pc，两盒，一盒9.69CNY。这个奇怪的名字应该是组合缩写，对乙酰氨基酚，盐酸伪麻黄碱，氢溴酸右美沙芬。像英文那样缩写一下，就变成了像咒语一样的新词。双黄连12pc，两盒，一盒50CNY。感觉双黄连最贵，估计也最没用。全部总计211.06，自负18.5(copay部分)。
总的来说，发热门诊还是不错的。有医保的情况下，价格不贵。没有医保的话就太蛋疼了，770CNY。没有免费检查。当然，如果说整个过程有哪里不满意的话，就是一大堆发热患者坐在诊室门口，摘了口罩叼着温度计你看我我看你&amp;hellip;</description>
    </item>
    
    <item>
      <title>我们要操作系统做什么</title>
      <link>//blog.shell909090.org/blog/archives/2874/</link>
      <pubDate>Wed, 22 Jul 2020 02:02:47 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2874/</guid>
      <description>今年有个话题一直很热，就是操作系统国产化的问题。这个问题从我开始学电脑就开始争论，到现在也有20多年了吧。这些年国产系统已经说不清是屡败屡战，还是屡战屡败。总之一点，就没赢过。很多人感慨，说这么多年了，中国都没有自己的操作系统。我其实也一直疑惑，我们要操作系统做什么？
要操作系统做什么，其实并不是一个反问。这是一个实际问题，而且可能是关于操作系统争论中最重要的一个问题。20年前，这个问题并不清晰。我们谈到操作系统时，说的更多都是桌面操作系统。服务器操作系统大多数人都没有接触过，也无意中忽视了这块——大部分服务器任务，其实Windows上装个软件也不是不能用嘛。但是今天，这个问题其实非常明显。目前操作系统三到四分天下。桌面领域Windows占据绝对优势，服务器操作系统领域Linux独领风骚，手机类由Android和iOS相持。如果中国要做一个自己的操作系统，那么第一个问题就是，做什么？是专攻某个领域，还是全领域开花？
这个问题可能各人有各人的理解。但，如果你的答案是上面任何一个领域，或者其叠加，恐怕中国的操作系统就注定了败亡的结局。这个错误，我们早在20年前就犯过，但似乎失败的经验并没有传承。
做一个操作系统不难，难的是为操作系统定下准确的生态位(niche)，并建设相应的生态系统。
什么叫生态位？什么叫生态系统？Wiki百科是这么解释生态位的：“一个物种所处的环境以及其本身生活习性的总称”。“每个物种都有自己独特的生态位，借以跟其他物种作出区别”。在系统角度来说，一个系统所适应的需求方向，决定了系统自身应当具有什么特性。而具有的特性，又决定了系统适应什么需求方向。两方互相影响，决定了一个需求领域。最适合这个领域的系统特性大致相近。例如桌面领域，Linux为何不能替代Windows？原因很多，但最致命的是两点。一，在早期Linux搞不定花样百出的硬件驱动。大部分硬件都只为Windows编写驱动。而这些驱动又无法通过开源协作搞定。早期用过Linux的人应该有体会，经常不是显卡驱动有问题，就是无线网卡驱不起来。最后虽然有一些能搞定，但所需的技术能力远远超出“一般用户”这个级别。二，没有适合当时桌面的应用。在1998-2008，桌面系统最火的10年里，其主要应用领域又细分为三个主要方向。以各种游戏为主的游戏主机方向，以Office为主的办公方向，以上网/看电影/写信/听音乐为主的轻娱乐方向。这三个方向里，游戏是Windows的重头领域，Windows吸引了相当多的游戏开发商。微软甚至还专门出了游戏业务和游戏机硬件。这点上，Linux上虽然不是没有游戏，但远远不能抗衡。而Office直到今天仍然占据办公市场的主流，地位无可替代。Linux下的替代品OpenOffice也好，WPS也好，都只能跟在后面亦步亦趋，远远称不上及格。在轻娱乐方向，Windows和Linux表现相差不多。Windows下的软件更加好看一些，Linux下的软件更专业一些，但不是绝对无法替代。然而坑爹的是网页浏览方面，Microsoft有一个绝对标准——IE6。IE6的统治甚至催生了一批不是标准但却通行的“HTML标准”。综合上述三个领域，一台Windows可以满足办公/游戏/轻娱乐的所有需求，一台Linux只能拿来听歌看电影，而且还要先解决驱动问题。除非用户每天大量工作必然用到Linux，否则Windows是一个自然而然的选择，无可争议。这也是为什么很多程序员选择Linux，而其他用户觉得他们在装X。其实只是这些程序员每天工作的大部分时间都是在Linux下做各种开发，主要工作软件同时有Linux和Windows版，甚至Linux版更好用的关系。
而微软一旦取得相对优势，就很难被超越。时至今日，Linux桌面其实并不是一个那么不切实际的选项。首先，当前很多硬件已经有了驱动，甚至是发行内置驱动。其次，大量内容的网页化，使得系统只要能运行浏览器就差不多。而两款主流浏览器，Chrome和Firefox，都有Linux版。IE已经不再是主流浏览器了。最后，游戏方面，Steam有Linux支持，并且可以运行相当数量的游戏。微软自身也因为Windows下游戏破解和盗版过于严重，导致相当比例的游戏流失到主机领域。主机不限定电脑使用什么系统，因此Linux桌面其实只差办公软件生态。然而，即便是一个并不使用Windows办公的人，也会选择安装Windows，而非Linux。因为首先，支持Windows的服务人员多，社区支持也更好一些。其次，也是最重要一点。Windows用习惯了。
为什么一个领域，在存在一个系统的情况下，都很难做出一个新的操作系统？因为目前已经有一个生态系统占据了。在新的生态系统挑战原本生态系统时，原本生态系统中的一切都会参与反抗，甚至用户都会参与反抗。例如Linux抢占桌面市场时，显卡厂商就很难配合。因为显卡和游戏关系紧密，而Linux下又没有足够的游戏份额，所以显卡厂商兴趣缺缺。而Linux要吸引游戏厂商？先不提一个开源的，用户有足够黑客精神的操作系统对游戏厂商来说意味着什么（想想Windows下游戏被破解的情况吧，Linux只会更严重）。单是份额问题，就足够没有吸引力了。更糟糕的是，大量用户已经熟悉一个系统的前提下，推出一个功能大致相仿的新系统大家根本没动力追。花成本学习了老系统的技术人员更没有动力去跟。到不如说他们只会产生阻力。新系统必须要提供远远超出原有系统的功能才有吸引力，与此同时，又要防备老系统跟进。一个成熟领域哪有那么多功能可以推出？因此在一个生态位已存在一个操作系统生态的情况下，后来者很难超越并占据主动。历史上的操作系统超车，基本是两种情况。一，原系统作死，二，占据新的生态位。前者例如Unix。如果Unix不出现版权问题，调整为限制性开源。那么就没有后面Linux的事了。即便Linux依然能出现，现在的影响力恐怕比Unix要小的多。大概率会成为一种小众的，不是那么主流的服务器操作系统。而占据新的生态位，最典型就是Android和iOS。Windows其实并不是输在了操作系统上，而是输在了“移动设备超越了桌面设备”上。我可以顺便说。如果Office不努力适应移动办公环境，那么Office一样早晚会被某种新的办公系统所超越。
那么，为什么Windows不能适应新的生态位呢？或者换个说法。为什么不能将Windows做一定修改，移植到移动设备上，凭借Windows上庞大的现存程序，打败iOS呢？
其实这件事，微软也不是没有干过。微软很早就出过平板。后来还基于WinCE出过很多移动设备。我在05年的时候就用过一款WinCE的PDA。在毕业前夕，宿舍电脑运回家的情况下，替代桌面使用了很久，完全没有问题。当时我觉得，这个就是移动设备的未来了。直到Mac家的设备出来后，我发现自己太天真了。移动设备和桌面相比，有很多不同的特性。例如移动设备要更多考虑驻留和激活问题。移动设备的内存（注意，我说的是真的内存，不是手机里“机身存储空间”的意思）更小，存储访问速度更慢，算力和电力更加宝贵。做不到所有应用都铺在内存里，然后用内存交换来解决切换。而移动应用的驻留需求更强。也不像Windows那样，主要程序就一两个，其他程序不开也行。用手机的应该可以理解，如果微信一退就没法收消息，这台手机基本就没法用了。而如果你要用的（连带通知在内）所有程序都在内存里，那么这手机也基本没法用了。这只是当时面对的众多问题中的一个。在新生生态位中，微软携带的庞大软件生态是其优势。但是已存机制是个庞大的负担。微软要保留现有软件生态，就不大可能抛弃现有概念去和新生系统竞争，必然要带着“窗体”，“缩放”这些在移动设备上没什么意义的概念战斗。因此就给了新生系统弯道超车的机会。
回到我们原本的话题。如果我们要发展自己的操作系统，那么目标和定位究竟如何？如果要——按照某些人说的——摆脱美国霸权。那么我们需要做一个或者多个操作系统，全面覆盖上面的游戏/办公/上网/轻娱乐/服务器/移动开发/嵌入式等多个领域。首先我不大相信一个操作系统能在全领域做的很好，或者我们能同步发展N个操作系统覆盖全领域。其次即便开发出来，也不可能推行到全球使用。仅仅是重新培训技术人员就几乎是一个不可能完成的任务，何况还有政治因素掺杂在里面。即便只是在国内自己用，也不大可能。在任何一个子领域，通过行政手段干掉世界主流操作系统，等于斩断全世界在这个领域已经形成的积累，以一个国家的力量重新做一遍。这个性价比之低，可谓不言而喻了吧。这并非没有先例。日本凭借PC-98系列，和世界脱节十多年。结果03年停产。手机上也类似，日本凭自己独特的软硬件一体设计，走和世界分离的路线。结果在iOS进入日本后，一泻千里。
那么中国是否可能有自己的操作系统呢？还是有可能的。有三种比较可能的途径。
一，任意一个原本的操作系统霸主犯错。而且还是动摇根本的大错。这种是运气，我们先暂且不提。 二，在一个独特的现存生态位，因为时间的进步，原本的主流和实际需求有微妙的脱节。同时这个生态位的系统生态环境比较小。例如Cisco的ios系统（是的，也叫ios，但是OS不大写）。之前的路由器和现代需求有微妙的脱节，SDN需求强势加入了路由器领域。同时路由器操作系统的生态并不广阔，上下游硬件并不是通过系统独有API和路由器交互的。而是通过配置和网络标准协议。在这个领域，如果有中国公司（例如华为）做一个自己的操作系统，整一套软硬件体系，全面替换Cisco。还是可能的事。Cisco的路由器生态系统虽然庞大，但还比不上操作系统生态（尤其是Windows操作系统生态）那么大。华为要全实现一遍的可能性更大一点。当然，目前由于政治因素，华为即便做出来了，也没有可能在世界范围替代ios。 三，占据新的生态位。这就意味着中国公司需要自身结合技术，形成新的需求和体系。但目前来看，中国公司生成新的需求的能力比较差。中国互联网界很火，但是实际能输出到国际的基本只有抖音/TikTok。外卖的世界翻版Grab发展一般，Wechat更多是为了和国内通讯才发展起来，支付宝也是需要对接国内游客才申请。而TikTok没有独立的操作系统需求。
那么有人就会说了，你这个是“造船不如买船，买船不如租船”的新买办主义，还和我举出五眼联盟。实际上，虽然五眼联盟确实存在，但是对大多数人而言，只是无伤大雅的小事——如果你真的很在意隐私问题的话，首先就应该卸载所有商业应用，再把手机卖掉。因为几乎所有商业应用，无一例外都在做数据监控和挖掘。不止国产应用，外国主流厂商也在做这些事，其程度远非五眼联盟可比。五眼联盟最多关心你是不是参加了恐怖主义。要关注你财务动向首先你得是成功人士，否则连被监视的资格都没有。你说你一个一没离岸账户二没七位数存款的人，人家关心你财务状况干嘛？而主流厂商则关心你生日，关心你血型，关心你交友情况，关心你婚姻状态。一切的一切都是为了能够从中获得利益。我毫不怀疑，未来某一天，你正在开车，突然车窗被飞过来的棒球打碎。你靠边停车。刚停好，手机就响了起来。上面二三十个通知如烟花般绽放：“先生没受伤吧。受伤可来我们医院，地址xxxxx”，“先生有参加保险么？我们提供合适保险，点击以下链接购买xxxxxx”，“先生要修车么？我厂4s店提供拖车服务，最近门店联系电话xxxxxx”，“太太没受伤吧&amp;hellip;.”。嗯？？太太？？你想起上周让女朋友连接了一下车辆蓝牙&amp;hellip;
我始终认为，特别安全问题要特别解决，不能为了部分人的安全问题，绑架所有人使用一个不合用的系统。我曾经去某部委办事，当时旁边工作人员在讨论技术问题（姑且算技术问题吧）。他们的网络是内外断线的，控制很严。但是工作人员在讨论是否可以用Gmail来收发单位信件。我当时就不好了——你们一个涉密单位用一套总部在美国的邮件方案？在我来看，为了防止五眼集团开发自己的操作系统，甚至不惜以行政手段强推就类似这个情景。不过正好反过来。为了防止部分涉密人员用Gmail收发单位邮件，要求全国都必须使用同一套保密邮件系统。这无疑是另一个角度的矫枉过正。</description>
    </item>
    
    <item>
      <title>安全协议的设计</title>
      <link>//blog.shell909090.org/blog/archives/2873/</link>
      <pubDate>Thu, 09 Jul 2020 20:33:26 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2873/</guid>
      <description>设计安全协议前，请先思考一个问题，设计安全协议的目地是什么，为什么需要一个独立的安全协议。如果经过分析，你的答案是，需要一个全功能的安全协议。请转回头去，使用TLS。设计安全协议前，请务必问过自己上面这个问题，并在过程中牢记于心。在设计过程中，经常会有的一种现象是，觉得协议已经实现了自己所需的基本功能，跳一下就能实现一些更酷的功能。这时候，请退出来，再看一遍最上面的话。如果TLS已经变得更适合的话，你前面的工作就是沉没成本，不值一提。因此，请在你自己的协议里专注于解决你自己的问题。
安全协议的基础构成 安全协议最小有两个目标，安全性和可靠性。安全性是说数据不会泄漏，可靠性是说数据不可更改。如果只考虑安全性，最简单的实现是对数据流进行加密。再考虑可靠性的话，可能需要内容验证算法。这是一个安全协议的最简构成。脱离这个构成的话，协议就很难讲是一个“安全协议”。
加密算法 加密算法包括两部分，算法和模式。我们先说算法，再说模式。
算法可选的其实不多。主流的算法中，DES/3DES已经实际废弃，而且跑的比AES还慢。实际可以选的只有AES(128/192/256)和chacha20/xchacha20两种。建议都支持，不会太麻烦的。一种适用于CPU支持AESNI的场合，另一种相反。
再说模式。对流进行加密的最简单办法就是流式加密算法，最出名的就是CFB/OFB/CTR这三个。
不幸的是，流式算法没有验证，对篡改的抵抗力比较差，容易受到KPA/CCA/CPA这类攻击的影响。如果只是用于简单加密场合还凑合，对于比较严肃的场合来说就不是很严肃了。
然后有什么选项？CCM模式很出名。但从密码学建议来说，AEAD应该是当今首选。
AEAD要注意一个问题。道理上说，每次使用的nonce都需要不同。因此如何设计nonce就是个很有技巧的事。这篇文章简介了TLS各个版本的nonce方案。对TCP来说，TLS1.3的方案是最合适的。TCP不会发生乱序，因此序号是可推测的。对UDP来说，只能选择TLS1.2的方案。注意如果选择发送nonce的话，4字节的空间只有2^32。按照1000Mbps，一个报文1K算一下。只需要9.5小时就会发生回转。因此序列增长的nonce长度不能小于8字节。随机nonce来说，12bytes的nonce只能取2^32次，大致保证不发生碰撞。所以随机nonce应该至少24bytes。(也就只有xchacha20可选了)
压缩 速度先不论，加密协议本身最好不要压缩。
如果在加密前压缩，选择内容就可能影响压缩结果或压缩速度，造成侧信道攻击。如果在加密后压缩，原则上就应该没有压缩空间了。如果一个加密算法在完成加密后还能大幅压缩，说明这个算法大概率出了问题。因此，最好不要在协议内设计压缩。
隐藏头部 AEAD+record的设计有个比较麻烦的问题。AEAD的nonce是暴露在外的。使用随机nonce还好说。如果使用序列，那么nonce就成为一个明显的record分隔提示。如果头部中又明文包含了长度，这个问题会更加明显。
要对此进行防护，最简单的办法就是对头部再来一个AES128。16bytes足够覆盖8bytes头部+8bytes nonce。这个方法挫了点，但是好在这个AES不用做安全防御，只要保证头部无特征就好。
shared secret 以上算法的诸多参数中，有一些是可以通过发送协商的，另一些则不能。例如加密算法的key，是不能通过网络发送的。iv一般也不行。nonce可以通过网络发送，但建议双方对通过网络传输的nonce进行再处理(例如xor上相同的数据)。这些不能通过网络发送的内容，就叫做shared secret。而如何解决shared secret，就是安全协议的重头戏。
最简单的方法叫PSK(Pre-Shared Key)。通过预设的Key来通讯。这个方法的好处是简单，坏处是不保证前向安全性。所谓前向安全性，是说，如果攻击者保留了你的通讯数据，在未来key泄露的情况下，是否能解出你当时的通讯数据？很显然，PSK一旦获得key，就可以解开过去所有的通讯。
握手 为了保证通讯安全，建议所有shared secret都现场协商解决。这类协商算法，叫做Key eXchange算法，简称Kx。
Kx类算法实际上主要就两类，DH和ECDH。我偏好ECDH，长度比较短一点。其中偏好25519这条曲线，不解释。
KDF ECDH获得的secret一般不长，25519为例，255bits。上面secrets最长可以吃掉60bytes数据，因此有两类方法。握手加宽和KDF。
所谓握手加宽，是将握手数据的宽度加倍，就如同在一个过程里同时做两个独立的Kx算法。最后得到的有效secrets长度就是翻倍的。
对于大多数情况来说，握手加宽没有必要（尽管不增加RTT，只增加报文长度）。256bits高质量随机数已经是个无法枚举的强度，用KDF展开就行。KDF保证即便一个key泄漏，也不会导致所有key一起出问题。当然，KDF的另一个目标——保护原始seed，对我们来说意义不大。因为我们的原始seed是握手结果，是临时的。
另外，KFD有两大类。hkdf和pbkdf2。对于seed质量足够高的情况来说，hkdf已经够用。pbkdf2多次循环，除了增加数据离散度外，另一重目标是减慢从seed到key的速度，使得穷举类攻击的成本变高。这个更针对人类输入的密码，对我们意义不大。
MITM 握手一个绕不开的问题就是MITM防御。MITM防御的基本思路是认证。常见有这么几种方案。
双方share key，发送方使用psk对kx请求数据做HMAC签署。 一方有多个用户名/key，另一方拥有一个用户名/key。基本过程同1，请求时带上用户名。 一方拥有另一方公钥。私钥签署，公钥认证。 对于服务器来说，1是不能选择的。服务器不能让所有客户共享一样的shared key。原因很简单。你也许能保证自己不泄漏PSK（也许这点都很难保证）。但是你一定不能保证所有其他用户都不会泄漏PSK。一旦PSK泄漏，攻击者就可以对所有用户实施MITM。
2的话，做客户端验证还可以，做服务器验证就比较罗嗦了。道理上说，双向的PSK最好不同。所以服务器和客户端同时选用方案2会造成一个用户两个密码。因此我会选择服务器用3做验证，客户端用2做验证。而非对称签署算法要快速安全密钥短的话，ECDSA是首选。ECDSA pubkey，在TLS中能够预植入CA。在我们自己的体系里，只能PSK。但是这个PSK是不怕泄漏的。
当然，客户端认证并不一定需要在安全协议里做。如果保持协议的精简性的话，这部分可以留给上层协议。届时可以使用challenge-response或time-sign做。不过在上层协议没有内置考虑的情况下，客户端认证会多出一个RTT来。所以这点请自行权衡。
握手隐藏 握手报文也有一定格式，因此也需要做隐藏。当然，靠谱的方法同样是AEAD。但是这次AEAD无法用AES来覆盖头部，因为反而可能加速暴露PSK。因此这里我们选择发送全部nonce。因此，如果我们选用12bytes的nonce，照理说我们只能握手2^32次。虽然说握手这么多次也是挺不容易的，但我们没必要折腾自己。选用xchacha20-ploy1305的话，可以使用24bytes的nonce。照理说是永不碰撞的。
另一个小技巧是，可以用上面的ECDSA pubkey作为PSK。首先，这个值双方一定都有。其次，足够随机。第三，重要性不高。即使被攻击出来，最多使得协议可被侦测，还是不能发起MITM解出协议内容。
一定不要做的事 比起怎么做，一定不要做更重要。
协议兼容，算法协商。这个对大规模部署是个必需品，但是对我们来说一定不能做。如果你已经在折腾这俩了，请再看本文第一段，然后考虑要不要用回TLS。 可插拔机制。即上面的那堆AEAD啦，KDF啦，Kx啦，可更换。实际上这个功能没啥用，最多内容的AEAD算法可更换，用来适配CPU。其余算法都是没得选的。Kx算法想短，只能用ECC类。再扔掉NIST的几个曲线，基本只有X25519。ECC签署同样也只有ed25519可用。HMAC靠谱又短的只有HMAC-SHA256和HMAC-SHA512-256。安全性和速度都是后者好，直接选后者就行。Kx的AEAD只有xchacha20可选，其余都有nonce碰撞的困扰。record隐藏头部的block算法，实际上只有AES可选。chacha20依赖nonce，又会绕回来。DES/3DES又不靠谱。这里千万别看TLS有上百种算法可以选，眼馋，觉得跳一下能够上。跳了，就不如用回TLS了。 签署链。同样，对大规模部署是个必需品，对我们来说一定不能碰。你自己想想，你部署服务的时候用过中间证书么？不都是ca直接签客户证书完事了。没OU，中间证书就用不到。更进一步说，没有同中心授权的多服务器，连ca都用不到。因为上面非对称签署只出现在服务器端认证这里。你自己装1,2,3,4,5几个机器。要么相信都不会漏，大家用同一个prikey。漏了大家一起死。要么相信隔离，然后给客户端的时候需要服务器1，给个域名给个pubkey。5个服务器5个pubkey。这俩都能接受，犯不着非搞个ca，然后给1,2,3,4,5一个个做sign。反正都是你自己，怎么？ca就不会漏么？如果你非要搞ca，不如跳回本文第一段再看一遍。 </description>
    </item>
    
    <item>
      <title>各种防疫措施分析</title>
      <link>//blog.shell909090.org/blog/archives/2872/</link>
      <pubDate>Sun, 15 Mar 2020 23:00:42 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2872/</guid>
      <description>我之前有篇blog简单说到了防疫的各种措施，今天这篇主要就是想列举一下各种措施，以及现在看下来的效果。
首先我需要说明两个观点。
一，措施的效果有两个评判维度。一个是对疾病控制有没有绝对效果。另一个则是措施的费效比。实际上措施的费效比可能要比绝对效果更加重要。例如我们知道，武汉的严格封城模式能够最大程度的阻止疾病传播。然而这个模式肯定无法持久。
二，措施并没有好或者不好。每个国家或地区采取自己的措施，需要结合当地情况具体分析。新冠是一个新爆发疾病，信息可能是不充分的，每个措施的效果都是未知的。事后我们回顾可能知道清楚知道有没有效果，然而在事发时很难给出一个准确理性的判断。因此，我们只能说措施有效没效，却很难说好不好。
封锁 中国讲的“封城”其实包含了一系列不同级别的措施。不同级别的措施，粒度不同，代价和效果就不同。下面我们逐个展开讲。
注意，封锁本身不阻止患者增长。它只保证在封锁粒度内，要么有患者，要么没有患者。如果封锁粒度是一个家庭，那么会出现“要么没事，要么灭门”的现象。如果是一个城市，会出现，要么全城没事，要么全城感染。因此封锁粒度越细，能保全越多人。这也是我说“封城”没用的理由之一——因为我们等不到全城感染停止增长。
如果在封锁的时候复合上交叉，情况就会变得非常复杂。即便不考虑公共场所感染，在多个封锁区域内交叉也会导致感染扩散。例如孩子上学。一个父亲感染，导致一个孩子感染，再导致一个学校感染，最后可能就是封锁中的数百个家庭感染。这也是为什么上班和上学是高危操作的原因。
封城 这个小节里，我想讨论的是“封锁城市并限制人员进出”这个措施。意大利在Mar 7所发布的北部城市封锁，实际上就是这么一个单纯的封锁措施。这个版本甚至并没有完全禁止人员进出，只是加以很强的限制而已。
我仔细的想了一下，单纯的“封城”措施，实际上对控制疾病并没有帮助，只有负面影响。因为传染疾病的是人员聚集和接触。在做好防疫的前提下，人员进出城市并不产生聚集和接触。相反，封城阻止了人员流动，阻止了市民自行外出求医，也就阻止了生病人员在多个城市间的自行平衡，以及物资在多个城市间的平衡。这点我们可以参考韩国的情况。
要维持城市间人员流动，需要一定的防疫。最好的方法，莫过于自驾。在出门到目标地之间，所有人不下车。在乘坐飞机/火车时，口罩和消毒液可能就是必备物品。座位之间也需要拉大距离。事后还需要消毒。但总体来说，在风险不大的前提下维持城市间交通是可能的。
中国实施封城，有着现实性的考量。一，中国跨城交通的大头是火车/飞机。以中国的现状，要维持防疫几乎不可能。二，虽然国家号称新冠费用全免，但现实上不大可能足额下发经费。每个地方要用到当地税收/社保/医疗资源在所难免。跨区域流动很可能引起地区间的互相仇视。
边境控制 边境控制可以视为封城的国家版本。常见的有三到四种范围：
不进行边境控制 对湖北护照游客进行控制 对中国游客进行控制 对曾到访中国的所有人进行控制 控制手段也分为三种，居家隔离，指定隔离，和拒绝入境。居家和指定隔离的区别在于，是否需要直接到政府指定的场所进行隔离。指定隔离场所会比较专业，风险小，而且不造成恐慌。缺点是操作费用比较大，不利于长期维持。
日本的模式是湖北游客拒绝入境，中国游客自行申报。 新加坡模式是所有曾到访中国的人自行居家隔离。 意大利模式是中国游客拒绝入境。当然，他们也停了直飞飞机，来往乘客需要过第三国转机。 美国模式是到过中国的人拒绝入境。 从结果来看，意大利的限制看似严格，但是却没用。因为虽然限制了中国游客，停止了航班，但是本国国民依然可以经第三国返回，从而带回病毒。更悲剧的是，意大利是欧盟成员，他无法阻止旅客从欧盟其他国家入境后途径意大利。相反，新加坡管理的是所有曾到访中国的人，无论是来返还是过境，一律居家隔离。这说明限制范围必须是“曾到过中国的人”，而不是特定国民。
至于拒绝入境，我觉得没有必要。从新加坡的实践来看，强制居家隔离足矣。但是新加坡可以比较好的控制居家隔离，不代表这个方案合适所有国家。有些国家的情况，指定隔离可能比较好。我不大喜欢拒绝入境模式，因为这种模式固然解决了问题，但成本太高。不能实施太久，范围也不能太广。这样不大方便将范围扩大到足够大。例如，在意大利爆发后，美国很晚才禁止欧洲入境。这实际上是增大了风险。如果是居家隔离的话，这个压力就会小很多，估计二月份就可以发布禁令了。
另外我顺便说一下我对费用的看法。原则上本国国民因意外回国被指定隔离的，费用应由国家承担。因为他们在去之前并没有被警告说可能有这样的风险。外国居民或是本国国民在旅行警告发布后仍然前往疫区的，费用应自行承担。
关闭公共场所 公共场所的分类也比较复杂，至少包括：
学校 寺庙/教堂 娱乐场所/健身房 非必要商场 必要商场一般指超市/食品商店和药房。其他都属于“非必要商场”。非必要商场也属于公共场所的一部分，因此我们不分开讨论。
一般来说，首先关闭的是学校。但以我收集的信息来看，关闭学校有比较大的副作用。要么家长需要回去带孩子，要么孩子会出去玩，又产生了很多社会流动和接触。所以关闭学校如果不能搭配一些缓解措施，那么就会陷入高成本或无效的两难中。在线教育是个很好的缓解方案。然而国内也有报道，在线教育所需的手机，对于某些家庭属于奢侈品。从而导致了新的不公平。即使不考虑成本，国外也有家庭孩子的数目比手机多，又不方便当场购置手机。因此在线教育在实施上尚有很多细节要考虑。
关闭公共场所需要解决的另一个问题是无家可归者。很少有城市能摆脱无家可归者，日本，意大利，加拿大都没解决这个问题。在关闭公共场所的时候，警察会驱散无家可归者。这些人需要一个适当的庇护场所，并且同样要小心传染问题。
另一个问题是关闭场所的地租问题。地租有三种承担模式，业主/租户/政府。从道理上说，政府下令关闭的场所，就应当承担其后果。然而实践中，很少可能由政府来承担这么一笔费用。同时，这也会从费用上阻止政府采取有效措施。所以一般我们只剩下两个选项，业主/租户。地租主要是地所在经营属性产生的价值。如果场所被封锁，经营属性消失，那么地租应当减免甚至取消。很多人可能会说，很多业主也是贷款买的地，如果没有地租会怎么怎么样。然而，租户也不是租来好玩的，租户破产一样很严重。所以我的结论是，希望减免地租，同时国家给予这部分损失一定年限的退税。
取消大型活动 取消大型活动和关闭公共场所的意图差不多，但更加一次性。取消大型活动对阻止病毒至关重要。然而，大型活动筹备期长，投入高。阻止大型活动的经济后果往往非常严重。从这个角度看，组织大型活动的费效比可能并不高，甚至在政治上无法办到。例如我们可以明显看到，日本政府对于停办奥运非常挣扎。国内因两会而导致病例申报困难，也是属于这类情况。
TODO
社区控制进出/社区禁止进出 社区控制进出俗称“封小区”，其目标是防止居民串门。社区禁止进出俗称“封门”，其目标是彻底阻止居民流动。但是这两个策略相对比较侵犯人权。目前只有中国大范围实施过这两种策略。韩国曾对某栋具体建筑封过门，但没有大范围实施。意大利有报道年轻人去女友家结果被罚款，也可以视作部分的封小区策略。目前尚不清楚这个策略的效果如何。
关闭必要商场 关闭必要商场后，居民就会失去基本的食品医药供应。因此要搭配政府指定配送，不然就要饿死人了。这个措施一般是在控制社区进出之后实施的。其意图主要是，将上街购买必需品的人群，从无防护的市民，转变为经过训练和防护的政府工作人员，从而进一步减少感染。同样，这个措施只有中国实施过。目前尚不清楚这个策略效果如何。
医疗 疫苗及药物 目前医疗其实解决不了疾病。疫苗和药物目前无进展。医疗的所有目地，就是维持病人生命，减少医护感染，增加医院容量。如果政府措施没法解决疾病，那么医疗崩溃导致大量死人在所难免。
然而，疫苗和药物才是解决问题的最终途径。不过细节上我比较悲观。基于人道主义因素，研究者不大可能获得治疗方案的专利，阻止其他人用这个研究成果救命。因此商业化研究的路子走不通。政府拨款呢？相当于是给全球搭便车。因此这个这个研究如果不能快速出成果，很容易陷入费用不足的状态。
两级/三级医疗制度 两级/三级医疗制度是指，将轻症/疑似从医院中移到医院外的一个制度。其目地是为了保持医院内都是需要重症患者，需要医院力量维持生命。这个措施能在总体上极限扩展医院容量。几乎所有疫情爆发下的地区，都会自觉不自觉的实行两级/三级医疗制度。差别只是名字，策略和程度各自不同。在中国，实行的是方舱，将轻症移到医院外。在新加坡，实行的是专门诊所（当然，这个制度还能维持其他疾病的诊疗能力，等会我们会说到）。意大利准备改造米兰世博中心，也是类似的打算。
这里提一个细节。中国的方舱制度中，当患者痊愈后会直接回家。这本身不是一个太合理的措施。原则上应当将不需要维持生命的轻症患者移回方舱，确定一切正常后离开。
战地医院/临时医院 战地医院指类似于小汤山，雷神山，火神山这种。尽管从模式上说，方舱更接近于战地医院。但是在武汉，方舱并没有什么实际的医疗能力。当然，你也可以叫他们临时医院。
临时医院的意图和多级诊疗制度一样，意图扩充医院容量。然而这个措施有个限制——必须有相对的医护和设备才能支撑，光盖楼没有任何意义。中国是调用了其他省市的资源，欧洲各国可能要跨国借用资源了。而且考虑欧洲在整体大爆发，各国之间互相扣押口罩。看起来不大像能进行欧洲内借调的样子。加之全球大爆发，美国也转向孤立主义。因此这个方案的效果虽好，却未必能在欧洲实施。
如果不考虑医疗人员的疲劳的话，中国可能可以输出部分医疗人员进行支援。
维持其他疾病诊疗的手段 这个手段意图是维持其他疾病的正常治疗。看过前两篇blog的人，可能对两个case记忆深刻。一个是“我住”报道中，一位在日本为中国筹集口罩的先生，他的朋友因为无法做透析而死。另一个是在湖北封城时，在桥上哭了一个小时的白血症患者的母亲。实际上，在新冠爆发后期，微薄的求助就逐渐从“得了新冠求收治”变成了“没得新冠但是其他疾病需要尽快治疗”。
我们需要注意一点。新冠爆发时的死亡病例，是不将这些“其他疾病引起的死亡”计算在内的。即便这些死者是因为新冠导致无法得到医疗资源而死。因此我们从数字上很难看到这些到底有多少，多残酷。然而维持对其他疾病的治疗，必然是对减小损害有一定益处。
维持正常治疗，首先得保证医疗系统不崩溃。如果三级医疗制度还不能缓解医护不足，那么要空出资源来维持正常疾病治疗就是一件不可能的事了。新冠爆发时最高死亡率7%，重症患者死亡率超过30%。如果替换一名正常患者进来，治疗活动至少要为这名患者提供40%以上的生存收益才行。除了急诊外，很少有什么正常医疗活动能有这么大的预期。很多癌症的治疗成功率都不足40%。
要维持正常医疗，除了要隔离部分医院作为新冠外疾病指定诊疗医院外，还需要注意正常患者的感染问题。大家非常熟悉的李文亮医师，其本职就是一位眼科医生。然而急诊中很难顾虑到这么多。这也是一个值得注意的问题。
筛查策略 下面我们讲到最重要的一个话题，筛查策略。筛查策略主要指如何检测，更精确就是如何使用核酸检测资源。从韩国经验来看，更积极的使用核酸检测能够有效抑制疫情。问题是如何有效使用。韩国在每日检测12000份以上的同时，保持了平均3%以上的检出率。这是由于韩国爆发的特点——群集式感染。因此顺着患者找到集群后，就对集群做隔离测试，这个策略非常有效。对于一般国家，有这么几个选项。
有疫区接触史 有流感类症状 有确诊者密切接触史 我们首先提一个人，岩田健太郎。他在视频中明确的指出，对无症状者进行测试意义不大。因为无症状者大概率在咽喉等部位找不到足够载量的核酸，因此检验阴性并不代表并未感染。所以以上选项的正解都是，通过隔离排查无症状者，只检测出现症状者。由于无症状感染者的存在，因此如果我们对某人有怀疑并进行了隔离，在隔离解除前，可以做一次核酸检测，以减少无症状者被放走带来的风险。
随后我们还需要注意到年初发生在武汉的问题。武汉将测试条件设定为“华南海鲜市场接触史”，这个限定导致了人传人在监测范围外发生。很遗憾的是，这个错误在意大利又发生了一遍。因此，将“疫区接触史”作为检测条件之一是非常危险的。
与上面相反，我想分享一点日本的检测数据和结果。日本一般的检测量都是几百，查的一般是密切接触。但是3月4日这天，日本检查了3800份样本。我查了一下，没有什么特别的事发生。大概率是日本或者日本局部放松了检测条件，将检测推广到了一般“有流感症状”的人。然而，那天，包括那天之后，检出率人数都是平平无奇。样本阳性率从原本的15%降低到了0.4%。很好理解——最近冬天，正是流感爆发季。因此患者中，真正有效的患者数量一定是不足的。做流感类广泛筛查，一定会导致有效效果骤降。然而与之相反的问题是，如果不筛查流感类患者，那么在疾病最开始的时候，实际就只剩下了“疫区接触史”作为筛查条件（因为国内没有患者，也就没有“密切接触者”）。因此，在筛查能力有余力的前提下，尽量筛查流感患者会相对比较安全。尽管这么做的费效比比较差。举例来说，韩国实施的就是，在医师评估后，患者可以得到免费测试。否则可以自行决定是否需要测试。
说到测试，我们就不得不提到韩国。测试是韩国的主要防疫策略。测的足够快，就不需要其他策略。颇有一种“天下武功，唯快不破”的感觉。韩国的测试很多都是drive-thru，因此不需要对采样间消毒，测试速度足够快。测试到拿到结果只要几个小时，每天可以测试12000-15000份。患者在刚开始出现症状，具有最大传染力的时刻，就可以被有效的甄别出来。加上回朔措施，其他之前被传染的人就直接被隔离。因而不需要对所有人进行集体强制隔离，也就是各种封锁措施。当然，这个方案的基础就是，大多数人都会遵从在家隔离的指令。</description>
    </item>
    
    <item>
      <title>Something you should know about COVID-19</title>
      <link>//blog.shell909090.org/blog/archives/2871/</link>
      <pubDate>Wed, 11 Mar 2020 21:52:42 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2871/</guid>
      <description>What is COVID-19, is it dangerous? COVID-19 is a coronavirus that has been found in Wuhan 2019. Generally speaking, it&amp;rsquo;s not dangerous to a person. The average death rate of COVID-19 is about 1%. It&amp;rsquo;s approximately 10 times higher than H1N1 influenza. As a comparison, the death rate of the SARS outbreak that happened 17 years ago, is approximately 10%.
The reason it is so dangerous is because it creates more &amp;ldquo;critically patient&amp;rdquo; than flu, about 10%.</description>
    </item>
    
    <item>
      <title>隔离</title>
      <link>//blog.shell909090.org/blog/archives/2870/</link>
      <pubDate>Sun, 23 Feb 2020 20:02:10 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2870/</guid>
      <description>隔离，英文为Quarantine。源于意大利方言，意思是“四十天”。这是十四世纪预防黑死病的做法。船只停泊前，需要在禁区中度过30天。后来威尼斯人将这个时间延长到了四十天，最后演变成了现在的“隔离”。
隔离的原理是针对传染条件。一般来说，传染病的传播途径往往是飞沫，虫媒，动物，粪口等。这些传染媒介的传染能力往往和距离成反比。很好理解。如果有人在纽约打个喷嚏，东京就有人会生病。那这种疾病没有毁灭世界才是一件奇怪的事。因此，如果我们能够将染病的人和健康的人分开，减小两者的接触，自然就能保全大多数人。
在显微镜发明前，人类对传染病只有概念性的认识。血吸虫被认为是“水毒”，因为往往通过疫水传染。疟疾被形容成“瘴气”，因为蚊虫总是和林中污浊的空气如影随行。虽然人们并不清楚传染病的根源是什么，但这并不妨碍人们了解传染病的特点。当然，基于这个认识，隔离大多数时候只能让多一点的人活下来。其本质上还是一个概率游戏。例如黑死病。如果黑死病就是鼠疫的话，那么将病人隔离在村外就是一件很徒劳的事。因为鼠疫耶尔森氏菌是一种虫媒传染病，借助老鼠身上的跳蚤传播。病人虽然被隔离了，然而老鼠没有。因此这种隔离方法效果很差。这种状况，直到我们认识到了各种微生物才是传染病的本源，才有了根本性的改善。
在我们充分了解了各种传染病的病原体和传染特性后，我们的隔离措施变得更加精准，效果更好，也更加能适应不同场合。例如，在面对烈性传染病时（例如上面提到的鼠疫），医生会穿着隔离衣，患者也会住在专门的负压病房。这个隔离的距离，往往只有数米。而时间，是治愈即止。疾病的严重性不同，传染力不同，传染渠道不同，病程不同，隔离的目地不同，手法就会完全迥异。但今天的隔离措施，往往代价更小，而效果更好。这是我们今天的隔离，不同于十四世纪的差异。
那么，我们接下去就要谈谈COVID-19，以及各国的措施。
Quarantine 「隔離檢疫」的由來 钻石公主号 钻石公主号是隔离失效的典型案例。这里我不重复事情的整个细节，仅摘抄一些防疫有关的策略。
2月3日晚上，钻石公主号在日本东京横滨港大黑端口头靠岸，厚生劳动省登船，为120名有发热或咳嗽的人，及153名与该港男有接触的乘客进行采验。wikipedia中没有写的是，日本政府对剩下的3300多人，决定船上隔离14天，随后就可自行离去。 2月7日，日本官方表示停靠在日本横滨港外的钻石公主号邮轮再新增41宗确诊新型冠状病毒肺炎病例，其中包括21位日本籍、8位美国籍、5名澳大利亚籍、5名加拿大籍、1名英国籍、1名阿根廷籍，至此被列为检测对象的273人已全部检测完毕，船上新型冠状病毒肺炎患者累计达61例。 2月9日，再多6人確診受感染新型冠状病毒肺炎，累計增至70人，另外有逾百人感到身體不適。 2月10日，厚生劳动省公布，钻石公主号新增65人确诊[54]，邮轮检查了439人，累计135人感染新型肺炎。 2月12日，1名曾在船上檢疫的檢疫人員確診感染。 2月17日，美国国务院包租两架卡利塔航空（Kalitta Air）的货机，从羽田机场载回船上380名没有确诊且有意愿提早下船返国的美国公民（登机前其中14名公民就被确诊，但依旧载回国），抵达美国后将在空军基地隔离14天。同日，日本厚生劳动省发布数据表明，在“钻石公主”号上对504人进行了病毒核酸检测，已经确认有99例新增病例，包括85名乘客和14名机组人员，其中有70人没有表现出症状。这意味着在此船上总共检查了1723名乘客和船员，确认感染的有454人。 OK，看出问题了么？问题在于，2月3日，日本宣布只检查273名有症状或有接触者，其余人在船上隔离。这包含了假定，船上没有日本无法处理的爆发性感染，而且船上隔离可以达到隔离的效果。然而，9日，最迟10日，日本政府就应当知道，船上要么爆发了聚集性感染，要么隔离失效，疾病还在发展。（实际上早在7/8日，船上就有大量物资不足管理混乱导致乘客向外求援的消息）12日，更是应当可以看出，船上无论有没有爆发聚集性感染，隔离肯定是失效的。否则检疫人员不会被感染。这种情况下，依然无所作为，直到17日美国忍无可忍开始撤侨。可以说，日本的处理一开始并无大错，然而设定了隔离，设定了隔离的完美结束条件，执行却出了问题，而且没有设计隔离的失败的条件和处理预案。以至于后续处理仿佛在梦游。谁都知道隔离肯定有问题了，然而日本仍然在很严肃的做着隔离，压根不管有没有用。
至于原因，我听到有说法是说日本官员很死板，很怕担责。当初预订了隔离14天放走，就算出问题也要给他做下去。不然就是承认自己当初做的隔离有问题。当然，这种说法也仅仅是一家之言。至于船上到底为什么隔离会失效。到底是船只设计问题（例如换气/排便）还是防疫人员流程问题。这要等事情结束后专家接手分析才能得出结论。现在猜测还为時过早。
马后炮一下。整件事里，日本政府的上策是直接拒绝钻石公主号入境。然后基于人道主义原则，收取隔离有症状和直接接触的273人。再对钻石公主号撤侨，在陆地上隔离。其余乘客，要求各国自行组织撤侨，日本政府对港口到机场转运提供配合。如果不愿撤侨，等钻石公主号回到海上后，由注册国英国接手处理。中策是允许各国选择撤侨或在日本领土上隔离。下策是在海上隔离，但每日抽检30-50人。发现船上有聚集性感染时，果断宣布隔离失败。各国可以自行撤侨，或委托日本政府治疗。至于发现了隔离无效却仍在努力完美的做到隔离，这就更等而下之了。
当然，日本政府可能面临一些实际的难处。然而无论面临何种难处，一把坑这么多国家的国民，引来国际愤怒，总是一件很厉害的事。
2019冠狀病毒病國際郵輪疫情#钻石公主号 日本和新加坡的防疫政策对比 我现在比较担心的事情，就是日本在本土防疫策略上，继续这种死脑筋的做法。对于防疫而言，放过一两个个体并不是大错。但总体防疫方针出错，或是执行出错才是大问题。
目前日本的防疫策略是入境控制。主要就是拒绝湖北地区和曾经到过湖北地区的人入境。实际上，由于后者是自行填报，因此很难验证是否有效。即便我们不讨论这个防疫方针的有效性，不讨论入境的每个人是否诚实。只要我们仔细看一下日本的具体数据（这些都是公开的），看一下各个地区发生的医源性感染和群聚感染案例，再看一下日本的国内新增曲线。我们就很容易得出这么一个结论。日本的传染已经从传入感染转变为国内感染，而且正处于增长期。但政府仍然坚持入境控制作为主要防疫方案，对国内宣传不足。这恐怕会使得日本变成疫区，甚至影响奥运会的举办。而且不只是我，日本也有专家，早在15日就得出了这种结论（参看2019冠狀病毒病日本疫情#防疫不力）。
作为对比，我们可以看新加坡的防疫方案。新加坡开始同样是以入境控制作为主要方案。但在2月7日，新加坡就将疫情提高到橙色。这个级别包含了一系列的国内防疫措施，包括：
取消或推迟大型活动 雇员定期测量体温 学校假期暂停活动 建议不要握手 店家拒绝身体不适的顾客 身体不适应呆在家中，必要外出时应戴口罩 这一系列措施降低了国内进一步传播的可能性。更难得的是（随后我们会知道哪里难得），考虑到了当地的情况，避免恐慌性歧视性行为，并且没有造成过大的社会负担。握手导致传播这点，恐怕是中国人很少考虑到的，因为我们不常握手。店家被指示拒绝身体不适的顾客，这点避免了商业场所群聚传播，同时避免了店家被讨论是否歧视。与之对比的是，日本有店家表明谢绝中国游客，从而引发了是否是歧视的讨论。至于外出戴口罩这点。虽然我听说日本或是被北美的习惯也是相同，不舒服的人戴口罩，普通人不戴。这样可以减少口罩使用量。但日本和北美是习惯，新加坡是防疫政策。
我这里引用数据作为对比。
2月1日，日本20例，新加坡18例 2月8日，日本26例，新加坡40例 2月15日，日本53例，新加坡72例 2月18日，日本73例，新加坡81例 2月22日，日本135例，新加坡89例 可以看到，疫情早期，新加坡发展的远比日本迅速。但是在15-22这一周内，局势迅速翻转。考虑到15-22这一周的新增，都是在8日前后感染的。虽然很难排除其他可能。但是我个人认为，日本在8日左右的防疫策略未及时调整，可能是一切的根源。如果这点是正确的，考虑到日本15-22这周仍未调整国内防疫策略，日本的国内病例数猛增还将持续至少一周时间。
不过，日本人口基数大，医疗水平高，患者基数又小。如无意外的话，即便是一周内激增5-10倍，患者密度仍远小于北京上海。后期调整防疫策略后，问题应该不会进展到湖北那么严重。但如果在未来一两周内未能调整防疫策略，恐怕就会造成大灾难了。
2019冠狀病毒病日本疫情 2019冠狀病毒病新加坡疫情 新加坡發布：新冠病毒與SARS同級「橙色警戒」 2019冠狀病毒病疫情相關排外及種族主義#日本 中国的防疫策略 中国的防疫策略经过了至少三个阶段的摆动。
第一阶段：掩耳盗铃 从去年12月底到今年1月20，是中国防疫策略的第一阶段。这个阶段里，主要的防疫策略就是，不许造谣。
这一阶段我不能评论，明不明白？
第二阶段，全面隔离 这一阶段的开始，是从1月23日武汉封城开始的。随后各地纷纷开始封城，最后以2月10日北京和上海封城做结。在这一期间，思路基本是两条。
减少城市和城市间的交通往来。尤其严防武汉/湖北方向的人员往来。 城市内部以小区为单位，自我封闭管理。 这实际上就是一个非常严密的大范围隔离。隔离，无论出于多么完美的动机，有着多么优异的效果。归根到底，是一项侵犯人权的行为。各种隔离歧视问题由来已久。黑死病盛行的年代，人们总是对异乡人报以异样的眼光。伤寒玛丽最后的结局是在医院度过了人生的最后20年——而且这个处置从未经过法院审查。那么，这次新冠肺炎的隔离，到底是“侵犯人权”，还是“快速反应”呢？
在近代，关于隔离有个指导性原则，叫做“西拉库萨原则”（The Siracusa Principles）。算是人们对人权和公众安全权衡后的一个总结吧。当然，这是个非限制性原则。这个原则指出，尽管为了防止传染病而限制人权是必须的，但是这个限制必须合法，有必要，符合比例原则，并且渐进。简单来说，就是在合法的前提下追求人权和总体健康的平衡点。
那，如何理解这个原则呢？我们从正反两方面来说明。首先是正面，追求合法性始终考虑必要性。这里要举一个日本的例子：
1月28日，日本政府將新型冠狀病毒肺炎定為“指定感染症”，2月7日生效，生效後患者可被強制入院。1月31日，因應世界衛生組織宣告肺炎疫情是國際關注的公共衛生緊急事件，將生效日期提前至2月1日。 1月29日，首架載着日本國民從武漢撤離的飛機上午8時45分在東京羽田機場落地東京，機上有206名日本人。 注意到这个时间点。由于第一班撤侨航班落地时，指定感染者尚未生效，因此第一班航班有两名乘客拒绝测试直接回家。这是完全合法的。事情的最后，这两人（可能迫于舆论的压力）同意回到隔离设施并接受检测。最终两人都是阴性。反过来说，即便两人都是阳性，当时依然没有任何办法可以强制将两人隔离，除非打算违法。这样的例子在日本还有很多。
至于反面，则是最近的中国。我们在20天内，封了几乎国内所有城市。有网友评论说，这件事情在日本根本不可能发生。我引用这条推如下: https://twitter.com/arion_h/status/1231405631703154688
明天开始东京人全部停工停学，不许出门这种事是没办法发生的，因为没这条法律，想要立个法？等立完出来病毒怕自己都消停了，社会主义铁拳“优势”在于“红头文件不是法律”，却具备法律效用 我们快速的封锁所有城市，对抑制疫情起了相当大作用。如果不是这么快反应的话，恐怕事情会更加严重。然而，与之相对的，就是经济上的“巨大代价”：
武汉菜价飙升。肉价很贵，而且非常稀缺。参看下面“湖北农村12口之家断粮了，把小木急得团团转，先看看邻居家有没有【土家小木】”和“武汉的菜价”。 武汉中百趁机上下其手。也就是网上最近很火的“汉骂”。 有养殖户抱怨血本无归。参看下面“上万只鸡再过两天断粮了，怎么办？”。 有其他病患权益受到影响。参看下面“听听武汉人最真实的独白，武汉真实情况！”，“在日募集物资的武汉人，向买不到口罩的日本出租车司机道歉【我住疫情特别篇】”。 企业承压，公司裁员或倒闭。参看下面“老板告诉我公司没了”。 其实，如果我们审视很多细节，就会发现我们根本没有对这场全球独一无二的，隔离了世界五分之一人口长达一个月的大隔离做好充分准备。我们充其量是订好了一个目标，随后一头挤进了这个目标。至于达成这个目标中的所有代价和细节，则往往靠社会所有主体自己想办法解决或者消化。某个地区，如果成员团结，实力强，官员也比较有能力。那么政策往往比较有可操作性，比较人性化。反之，则往往是乱七八糟，啼笑皆非。例如上面几个例子。养殖户这种“不可停工中小企业”也许还可以暂时忽略。然而其他病人的处置，还有基本的粮食供应，这到了隔离的底线了——隔离者必须提供被隔离者的基本需求，食物，水，安全的环境，以及必要的医疗。最起码，隔离的目标是活着对吧。如果连活着都不能保证，隔离就失去可操作性了。被隔离者根本不会配合，反而会设法逃离。这也是中世纪很多重大疾病中，隔离比监禁还难的原因。坐监狱不过是空耗几年，隔离在重疾隔离区往往九死一生。被隔离者逃跑的动力比犯人还足。有的时候，为了保证自己不会被歧视，或出于报复心理。有些人还会主动传播疾病，或者制造谣言。我个人观点，如果没有合适的支持，这其实不是隔离，而是自生自灭。我并不反对隔离，相反，这是我们处理这场瘟疫最有效的手段。然而同样在达到这个目地的情况下，我们必须调和一下其他方面的压力。否则就会演变成一场观众和受害者的直接战争。</description>
    </item>
    
    <item>
      <title>武汉肺炎</title>
      <link>//blog.shell909090.org/blog/archives/2869/</link>
      <pubDate>Tue, 18 Feb 2020 23:29:13 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2869/</guid>
      <description>这篇以武汉为题，并不是想责怪武汉人带来了病毒，更不是试图辱骂武汉人。而是希望在将来，我们仍能记住现在在武汉乃至湖北发生的事情，记住这篇土地所经受的创伤和牺牲。
时间线 2020年春节，大概是中国近40年来人们最印象深刻的一个春节了。和往常的春节一样，大街小巷人群稀疏，大人无所事事，小孩游手好闲。不同的是大人停止了拜年和赌博，小孩停止了游戏，都躲在家里惴惴不安，生怕瘟神上门。更特殊的是，这个春节，放了7天国定假，4天国家特别假日，6天地区特别假日。以及各地不同，从一周到三周的“在家办公”。
这个瘟疫，就是后来被定名为COVID-19的武汉肺炎。
我不重复内容，如果对武汉肺炎没有基础了解的话，请去看Wikipedia上的这篇2019新型冠狀病毒疫情。我摘录重点内容。
12月初，武汉医院陆续接诊不明原因的病毒性肺炎病人。 12月底，医生群里开始传播“武汉发生不明原因肺炎”。八君子因造谣被处理。我在此时获知有这么件事，但并未引起重视。 1月20日，钟南山发表讲话，正式承认武汉肺炎的存在，并承认可以人传人。此时消毒水开始疯抢，口罩成了期货。 1月23日，武汉封城。 1月24日，大年夜。湖北大部分县市封城。 1月25日，计划建造火神山医院。 1月27日，国务院延长春节至2月3日（原定1月31复工）。各地后来又调整了复工时间。上海调整为2月10日。 1月29日，日本撤侨。 1月30日，WHO宣布COVID-19为PHEIC（国际公共卫生紧急事件）。 1月31日，韩国撤侨。 2月1日，日本，澳大利亚入境管制。德国撤侨。钻石公主号离港驶向横滨。一位曾在船上呆了5天的老翁在香港被诊断出COVID-19。 2月2日，美国，新加坡入境管制。温州封城。 2月3日，钻石公主号抵达横滨，开始隔离。火神山医院启用。 2月4日，韩国，新西兰入境管制。杭州，南京，郑州，哈尔滨封城。 2月5日，青岛，济南，合肥封城。 2月6日，辽宁省，江西省，苏州市封城。 2月7日，湖北省，安徽省，天津市，广州市，深圳市，兰州市封城。八君子之一，李文亮医生病逝，民众高调纪念。 2月8日，元宵。雷神山医院启用。 2月10日，北京，上海封城。 2月12日，湖北省将临床诊断病例纳入确诊，确诊人数激增。十堰市开始实行战时管制。 2月13日，应勇替换蒋超良，任湖北省委常委、书记。王忠林替换马国强，任湖北省委常委、武汉市委书记。 2月14日，武汉实施小区封闭管理，禁止人员进出。 2月15日，武汉下雪了。 引用:
2019新型冠状病毒中国大陆疫区封锁措施 近期有关国家入境管制措施提醒（2020.2.5） 從數據來看，為什麼撤僑外國人的「武漢肺炎」感染率會比較高？ 现状 武汉 我听到的情况。武汉现状已经完全封闭，非相关人员不得进出小区。很多小区的门已经锁上了。小区封闭前，蔬菜水果都能买到，但是肉比较难买，也比较贵。小区封闭后，只能由社区向超市购买物品，运送到社区后再分。肉依然比较紧俏，而且这种“团购”成本比超市零售还高一点。而且很多非关键商品没有零售配送，例如烟酒。
目前没有听说武汉有断网，但是有居民担心小区停水停电。
【罗宾FC日记】买菜困难了 上海 上海状况一切正常。很多企业不复工，街上人也很少。但是公共交通运行正常，超市中大部分商品都不缺。当然口罩消毒水什么的就不要想了。春节时很多商品有短缺和涨价，但是幅度和往年春节差不多，并没有涨到天价。春节过后就完全正常了。饿了么还能运作，但是很多店不开门，送也只能送到小区门口桌上，要自己去取。京东的快递和盒马生鲜也一切正常，都是送到门口桌上。小区已经发了出入凭证，每户两三张，无证不得出入。
钻石公主号 钻石公主号是一艘邮轮。邮轮的模式一般是一个地方停两天，白天游客出去玩，晚上开船去下个地点。2月1日，钻石公主号从冲绳去横滨的时候，有个曾经在船上的老年人被确诊为感染者。这下不得了，整艘船在横滨被隔离起来。日本政府检查了所有身体不舒服的人和密切接触者，273人中发现了61名感染者。随后，日本政府宣布对剩下的人只隔离不检查。当时我就感觉这样会导致二次传播，从而使隔离无效。CBC采访了两位疾控方面的专家，一位也认为这样隔离毫无意义，另一人认为在没有任何历史数据和证据的情况下，可以先这么处理。随后感染人数不停攀升，17日时已经检测1723人，发现454名感染者，总感染比率超过四分之一。同日，美国从钻石公主号上面撤离了380名尚未确诊又愿意离开的美国公民。
为什么钻石公主号很典型呢？这个案例向我们展示了在人员密切接触的空间里，疾病传播到底有多快。如果我们认为隔离是有效的，自隔离后感染者就不再新增。从老翁推定发病的23日起，到2月3日隔离。短短12天，全船3600人推定感染了900人（3600*0.25）。爆增将近1000倍（log2(900)=9.813），倍增时间只有1.22天（12/9.81378）。如果按照这个速度，感染全人类也只需要40天（log2(7000000000)*1.22277）。即便按照下船检测的273人，其中感染61人计算。病毒倍增时间也不会长于两天（12/log2(61)=2.02）。
在如此紧密的空间内，存在一定可能无法隔离所有人。导致一批感染者下去了，新的一批感染者又传染了别人。添油战术，一批批的被移下去，一批批的被感染。当然，数据本身并不能证明或者否认这个假定。除非对船上相当比例的患者，分不同日期进行病毒基因亲缘性测定，否则很难验证这个假说。希望将来有一天有人能做这方面研究，并公开数据。这对邮轮这类密集接触场所是否适合作为隔离场所有非常重要的指导意义。
病原体和疾病周期 病原体的确定很快。在12月底，我看到一份网络上流传的通告里就提出，是SARS类病毒引起的传染性肺炎。后来公开的信息显示，病原体为(+)ssRNA，冠状病毒科的某种病毒。和SARS，MERS是同门兄弟。这个病毒，就是后来被命名为SARS-CoV-2的病毒。
和SARS不同的是，SARS-CoV-2的感染性更强，隐匿性更强，而死亡率更低。对人类来说，最糟糕的病毒不是Ebola那种死亡率超高的，那个反而没有那么可怕。最糟糕的病毒，是像流感一样容易传染，像HIV那样无药可救，以及不高不低的死亡率。本次的病毒，除了死亡率略低外，几乎就是灭世病毒的标配。
已知的信息。病毒传染后会进入潜伏期，期间病毒快速增殖复制。而后有可能先出现症状，也可能先出现传染性。这就是病毒的最大特点——隐匿传播。病人可能传染了很多人，而自身一无所知（参考傷寒瑪莉）发病后患者肺部首先受到攻击，出现毛玻璃影，大白肺。后期可能累及多个器官，心，肝，肾均可能受损。死亡率估算在0.6-1%之间，重症率估算在10%左右。当然，死亡率和重症率只是预估，可能随着时间的推移发生变化。精确数字要等事情结束后估算，甚至无法估算。
传染和防御 病毒在生死之间。它们既是死物，也是活动的恶魔。当病毒在体外的时候，它们就像灰尘和石头一样无害。而当这些无害的灰尘被吸入人体，进入细胞的时候，它们就展露出恶魔的一面。它们劫持细胞机制，快速复制，撑破细胞，释放出上亿个新的病毒颗粒。从某种意义上说，细胞乃至宿主的死亡，只是病毒的无意为之。它们的本意只是复制。杀死宿主它们既不会觉得难过，也不会觉得快意，它们只是灰尘而已。
每种病毒的传染机制各不相同，对于SARS-CoV-2，主要传播途径是飞沫。同时，也有黏膜，粪口，气溶胶，粪便气溶胶等传染途径。目前尚未排除所有其他途径。
为了直观起见，我们不妨这么想象。我们给病毒染色，使我们能看到病毒。它就像漫天的尘土一样飞舞，因此我们不妨把病毒想象成黄色的尘土。
某日，在一个不知名的地方，有人手上沾染了一些黄色的尘土，随后又摸了摸鼻子，打了个喷嚏。病毒就这样从自然界进入了人类世界。很快，病毒粒子就布满了这个受害者的肺部，但是他一无所知。每次他咳嗽，打喷嚏，甚至是呼吸，嘴里都喷出淡黄色的尘土。这些尘土附着在这个受害者吃饭时的桌子上，坐车时的扶手上，甚至刚从嘴里呼出，就被旁边的人毫无防备的吸入进去。于是，我们就有了一号，二号，三号病人。很快，这些人也开始咳嗽，打喷嚏。外面到处沾染着淡黄色的尘土。如果你能看到病毒的颜色的话，这大概就是世界的现状。
因此，我们也就知道了主要的传染防治方法——既然是尘土，那么就和防沙尘暴一样处理。口罩，面镜，加上一件包裹全身的衣物，以防灰尘沾染在毛发上。当然，不同的是，如果出去带了一身沙尘回来，回家抖抖衣服可能就没事了。但沾染了病毒尘后，抖抖衣物只会让家里布满病毒尘。正解是将衣物悬挂在日照通风处，等待病毒自行失活。或者干脆对整件衣物消毒处理。因此，回家后请先对双手消毒，再用双手脱下鞋子和衣服放置在日照通风处。再消毒双手并脱下护目镜和口罩。最后对双手进行最后一次消洗。
数据分析 数据分析是本文比较复杂的部分，里面有很多主观估量。数据最后可能出现百分比乃至倍数级别的误差，但数量级一般没问题。我们主要分析两个问题。
武汉/湖北到底有多少病人？ 估计死亡率到底是多少？ 武汉/湖北到底有多少病人？ 首先我们明确一点，武汉乃至湖北的数据必然是失真的。这一点可以得到多个方面的佐证：
湖北目前的死亡人数比患者比值高出其他地区太多。其他地区在0.5-1%左右，湖北最高达5%，现在总体仍高于2%。这可能是当地缺少医疗资源导致的，也可能来自于重症富集。即，只有重症患者有比较高的比例获得确诊和治疗，导致很多轻症状的隐匿感染者被统计漏掉了。 网上有很多声音，社区判断疑似后，缺乏诊断盒。无法诊断，因此大医院不收。大医院不收的情况下，更加排不到诊断盒。 各国撤侨的感染率比例偏高。 这种失真来自于数种可能的方面。首先就是我们提到过的缺乏诊断盒。其次，政府粉饰数字可能也是一个原因。最后就是由于人和人之间的猜疑，歧视，以及医疗资源的挤压。轻症感染者未必愿意去医院就医。而本次疾病有很多轻症乃至几乎无症状感染者。这也会导致感染人数低估。
我们有两种估量真实感染人数的方法。一种是假定死亡人数完全是由于重症富集引起的，因此湖北死亡比比其他地区高了4倍，就是有4倍的真实感染数。这种估量法的好处是简单，坏处也是简单。首先，死亡不一定完全来源于重症富集，也可能来自于缺少医疗资源。这会导致估计的人数过高。其次，真实的感染者，如果在确诊前就病死，会被排除在病死人数之外。这会导致估计的人数过低。因此，最终只能知道，真实感染人数可能和官方统计结果有差异，但是这个结论没有意义。
另一种就相对比较可信，即用各国撤侨作为一次对武汉乃至湖北的无偏采样。如果采样足够均衡，并且人数合适可以排除数据涨落，那么撤侨的感染检出率就是武汉的真实感染比例。这里我们再次引用從數據來看，為什麼撤僑外國人的「武漢肺炎」感染率會比較高？这篇文章的数据，其中日本的部分可以在2019新型冠狀病毒日本疫情中验证。我拿到的三次数据分别是3/206（有一人在后续才被检出），8/565（这个数据用的最多），13/763（来自Wikipedia）。比例分别为1.46%，1.42%，1.70%，比例非常接近。各国在2月1日前后撤侨，感染比例也均在1.5%左右。我假定这个就是武汉的真实感染率。武汉的人口，引新华社消息是1100万，后续有新闻是1400万，走了500万，还剩900万。即便以最低的900万计算，也可以得出，2月1日前后，武汉感染者高达13万5千。
回顾这个结果，首先由于病患数量并不大，可能会受到数据涨落的一定影响。但是各国总撤侨人数高达2000不止，总病例数超过40人。个体运气对于总体数据影响并不特别大。其次，精确度受到无偏性很大影响。由于实在无法追踪各国侨民在武汉活动的分布，因此我只能假定，采样是无偏的。实际上考虑到侨民主要在城市活动，而病毒的主要爆发地就是城区，因此这个比例可能略高一点，但不会太高。实际人数应在10万这个级别。
以上我们做的分析是针对武汉的，因为这是撤侨的主要范围。撤侨是一个针对武汉所剩900万人口，在2月初的一次无偏采样。但900万和走掉的500万，在之前经受一样的感染散布，之后又经历几乎相同的封城。所以大概率说，两者的发病概率应当一致。只是500万人中的感染者分散到各地，被各地人口作为分母一冲淡，数据并不明显而已。这500万人，大比例会留在湖北。如果我们把估计范围扩大到湖北的话。按照这个算法，整个湖北受到的冲击应当是1.5%乘以1400万，20万人左右。保守估计，感染量也应该超过了15万。
2月1日的官方数据是多少？确诊人数一万四千人。和估计数据差10倍。
引用：
截至2月1日24时新型冠状病毒感染的肺炎疫情最新情况 估计死亡率到底是多少？ 在回答这个问题之前，我们首先要解释一下死亡率和病死比的区别。死亡率指统计意义上，得病的人中最终会有多少病死。一般而言都是万分之几。例如流感通常是万分之十左右。这个数值需要等到所有人痊愈或病死才能算的出来。正在进行中的疾病，我们只能算病死比。病死比为，当前死亡人数除以总确诊数。如果只考虑当前确诊的人的话，死亡率一定是大于等于病死比的。因为对于目前确诊的人来说，尚未痊愈的可能死亡，但是死人不会复活。所以一般而言，病死比是死亡率的最低值。当疾病流行时间足够长，并且人数都比较平稳了，没有暴增。病死比会逐渐接近于死亡率。因为尚未死亡的患者相对总死亡人数来说就显得比较小了。</description>
    </item>
    
    <item>
      <title>相册</title>
      <link>//blog.shell909090.org/blog/album/</link>
      <pubDate>Wed, 23 Oct 2019 22:43:22 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/album/</guid>
      <description> 2023-Egypt&amp;amp;UAE 2023-Semporna 2023-日本 2023-bohol 2023-SJTU 2023-浙江 2023-乌鲁木齐 2022-稻城亚丁 2022-宁夏 2020-张家界 2020-泉州 2020-青海 2020-north america 2019-italy 2019-bohol 2018-SJTU 2018-canada 2018-taiwan 2018-tokyo 2017-similan 2017-boracay 2017-法国 2017-pg 2017-柬埔寨 2017-Disney 2017-广东 2016-俄罗斯 2016-新加坡 2016-大马 2016-三亚 2016-泰国 2016-世纪公园 2016-云南 2016-黄山 2015-印度 2015-山西 2015-山东 2014-北海道 2014-新疆 2014-潮汕 2014-良渚张家港 2014-世纪公园 2014-长白山 2013-甘肃 2013-西藏 2013-台湾 2012-四川 2012-西安 2012-maldive 2012-puhket 婚纱照 2010-厦门 2009 2008 2007-南京 2007 2006-香港 2006-牛栏山 2006 2005-无锡 2005 </description>
    </item>
    
    <item>
      <title>外设接口和供电的演化史</title>
      <link>//blog.shell909090.org/blog/archives/2868/</link>
      <pubDate>Tue, 21 May 2019 17:38:15 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2868/</guid>
      <description>这篇文章基本就是我根据自己的记忆翻旧帐讲古，大家随便看好了。
外设接口的上古时代 说是上古时代，我也不会从8259A级联这种地方开始讲起的。我们首先回顾的是上世纪末，我们还在用各种不同接口连接不同设备的时代。当时主流有这么几种设备和接口：
显示器：当年没有LED显示器，主流都是大屁股的CRT显示器。主流接口是VGA。大家要是用过投影仪对这个接口可能有印象，这个接口又被称为D型口，目前仍广泛存在于投影仪类设备。 音箱：音箱接口到今天都没怎么变化，主要接口是3.5mm接口，专业术语叫做TRS端子。 网卡：当年网卡还很稀罕，记忆中流行过一阵的同轴缆线。不过双绞线的标准一直没变过，使用RJ45。 鼠标键盘：最早年是AT接口，后来主流使用PS/2。 并口：主要是接打印机扫描仪什么的，扫描仪也是很后来才有。LPT。 串口：COM，和各种设备通讯。甚至可以接一根特殊的console线，对端变成RJ45去控制网络设备。这种线今天仍在使用(我手里还有一根)，不过串口在电脑上已经找不到了，所以要多一根USB2COM线。 最早声音，网络，视频都需要独立的卡来支持，甚至有出现过汉卡。每个独立的卡上附带一个或多个接口，用来和特定设备连接。但后来CPU越来越快，除了显卡外大多数卡大家就都没见过了。现在的音箱接口鼠标键盘都是集成在主板上的。
LPT接口和COM接口的一大问题是，没有内在支持热插拔。当然，热接线并不一定导致问题，或者无法使用。然而各种静电击穿，驱动不良引起的问题层出不穷。所以标准过程都是关机连线，先开外设后开机，先关机后关外设。其实当年最初也没有很多人有异议，DOS时代的开机很快的。直到后来大家渐渐用上了Win95，发现没有热插拔真难过。
以上大部分的接口，都是不供电的。PS/2和TRS带有一定供电能力。PS/2提供5V/275mA的电流。TRS直接连通的耳机，其中的电信号直接推动耳机单元发音。
USB时代的开端 微软很早就开始了对USB的推动，按照wiki所述，最早的1.0协议是96年发布，2.0则要到2000年。但是96年的时候，我们对USB还并没有什么太大听闻。直到2000年后，各种USB设备层出不穷，直接带领了一个时代。
USB研发的初衷是为了解决接口统一性问题和热插拔问题。接口大致分为两类情况。一类是直观接口，里面各引脚基本就是各种直观定义。例如TRS的几个引脚，基本就是耳机单元引出线。另一类则是通讯接口，主要功能是通讯，其逻辑含义需要根据信号定义解析。通讯接口实现复杂成本很高。然而既然模拟接口的引脚和直观定义绑定，那么驱动耳机的接口就和驱动键盘的接口永远统一不起来。如此一来，每一种外设计算机就要做一个接口，没有对应接口就用不了外设。这对计算机硬件的生产和维护非常不利。而且Windows开机那么慢，每次连接断开硬件都要重启，每天别干别的就重启了。所以一个接口，统一各种插头类型，支持热插拔，就成了个强需求。而为了达到这个目标，接口自身必然是个通讯接口，内在逻辑通过软件定义解决。而通讯接口中，LPT面临复杂的同步问题。因此点对点串行通讯的USB接口兴起就是一个必然。
USB是串行通讯模式，菊花链拓扑。所以HUB的大小永远是3n+1，例如4个，7个，etc。如果个数不对，可能就是hub自身用掉了几个接口。例如我手里一个HUB网卡二合一dock，就是三个3.0接口一个千兆网口。最初速率定义为1.5Mbps，2.0提高到了480Mbps。但是实际上只有大约30MB/s。最早的电流定义我记得是100mA/500mA两种，足够驱动大多数的小电流设备。
几乎从2000往后，键盘和鼠标的主流就全是USB的了。PS/2的键盘/鼠标偶尔还用于特殊场合，例如老设备支持，或是某些情况下诊断内核死机(因为PS/2的状态灯由内核直接控制，内核不死，按键开关状态灯基本都是可行的。而USB的状态灯需要更多业务逻辑，所以更说不准)。再往后，所有相机，打印机，扫描仪，游戏手柄，统统换去了USB。更出现了U盘和mp3这种妖怪玩意，几乎人手一个。在那个上网还要拨号的年代，mp3就是个人的便携文件袋+多媒体娱乐中心。
如果我没记错的话，USB的第一次电流提升起源于移动硬盘的兴起。mp3固然方便，但是容量往往太小。我的第一个mp3只有128M(是的，你没看错，单位是兆)，大概只能放20首歌。而移动硬盘一般可以做到200G以上的大小。所以大家纷纷开始区分使用，mp3就放歌，移动硬盘存数据，包括歌曲库。然后借助电脑来把移动硬盘上的歌拷去mp3里。然而，USB最初供电功率只有2.5W，很多移动硬盘功率不足，需要外接电源，用着很不习惯。所以后来逐渐兴起了1A供电的USB接口，免去了外接电源。我现在手里还有一块老式移动硬盘，320G大小，双USB供电或外接电源供电。对应的就是这个特殊的时代。
在这个时代，USB逐渐统一了各种外设，主流接口里面只剩下了显示接口，TRS端子，RJ45三种还没有被统一。显示接口是因为传输速率太高，USB支持不起来。TRS和RJ45其实也有USB版本，叫做外接声卡和外接网卡。然而由于这两个端口太过常用，往往主板上也会搭载，免得用户自己每次都要配套买两个外接件。直到今天，MBP上type-c一统天下，唯一不同的接口就是TRS。RJ45由于wifi的普及而早早下课了。至于并口串口，一般主板上也会有。但是很多主板，从买回来到报废那天，这两个接口都没用过。
手机充电的发展 和电脑独立发展的是手机的充电接口。最初手机的充电接口是专用口，用过Nokia早期手机的人应该都见过这类口。这类接口几乎无法相互借用，因此以前出门商旅人士，往往包里都背着自己专用的充电器。幸好这个时代的手机还很耐用，一周一充是正常现象，最过分也就是三天一充。至于今天，三天一充几乎就是个神话。
手机接口向着USB统一起源于Android。最早的几台Android机就是使用USB充电的。后来大家发现，USB充电可以用电脑直接给电，只用带线不需要充电器。而且这根线还能传输数据，把手机当作U盘用。这个更进一步影响了Android的流行，也让各种其他接口快速的消亡。时至今日，比较流行的自有接口定义貌似只有苹果一家了。
然而，大家也都是用手机的，应该知道，手机的电是个无底洞。一天一充，一充一天都是正常操作。这种情况下，USB电流发展也是越来越高。从一开始的5V/1A，到后来的5V/2A乃至各种奇葩协议。这是今天这篇主要说的另一个方向。
USB的各种接口和功率规范 USB接口大家应该都很熟悉。最常见的是A型，就是一般电脑上配的。手机常用的是Micro-B和更新的USB-C。其中type-c标准更新更紧凑而且双面可插拔。
至于功率规范，可能就不是每个人都熟悉了。上古时代的100mA我们就不说了，常见的经典功率规范有三种，5V/500mA=2.5W，5V/1A=5W，5V/2A=10W。今天大部分手机的充电功率，往往都在10W这个级别。这么说比较虚，我们形象点计算。以典型的手机电池，4.2V平均放电电压，3500mAh容量，80%逆变效率计算。总电池容量是4.2*3.5=14.7Wh。总充电时间为14.7/0.8/10*60=110.25分钟。加上手机在充电时还在使用，动辄充电两小时是正常现象。两小时放在功能机时代也算正常水平。然而功能机时代几天一充？功能机时代我们一天用几小时手机？今天很多人回到功能机时代首先就得饿死，因为手机用不了支付宝。电池容量上不去，我们就只能对快速充电提出越来越高的要求。就算不能一天一充，起码中午续命五分钟。
这里我们得插播一下电池性能。锂电池是一个比较优秀的电池，能量密度大，没有记忆效应。然而坑爹的是，锂电池有锂枝晶，导致电池容量会随着循环而减少，最后报废。从养护上说，最好当然慢慢充。可慢慢充满足不了我们的需要，快充又影响寿命。所以手机厂会平衡两者，设定一定的充电速率。这个速率一般是以C为单位衡量的，反映充电电流(注意，电池充电电压是不可随意变化的，一般略高于当前电池放电电压)。1C代表这块电池以这个电流1小时充满，2C就是半小时充满。反之，0.5C就是2小时。
我看到比较好的电池，基本都能做到1C充电，500次循环以上容量没有过多损耗。按照刚刚的容量计算，充电功率最小也是14.7W。随着电池容量进一步提升，这个值还会不断增大。可现在的充电功率已经达到了USB的最大功率。USB又迟迟不推出权威说法。因此各大厂家就蠢蠢欲动了。现在各大厂家都推出了各自的快充标准。其中又分了两派。
初中物理，电压电流电阻和功率的关系 这里我们要插播一点初中物理常识。功率等于电压乘电流。对于理想世界而言，USB已经锁死了电压，那么电流无限上调就好了。然而悲剧的是，在现实世界里，这需要考虑线阻。
以5V/2A的模式为例吧，简单计算就知道，等效电阻为2.5欧。因此线阻需要在0.x欧-0.0x欧这个量级，越小越好没有下限。一般来说，线越粗，接口越稳定，导电率越高。因此为了对应2A的电流，线就要开始往粗了做。所以很多支持2A充电的手机，USB线就不能随便来一根，要粗要硬，里面全是金属。而且线越长，接口越频繁插拔，线的质量就要求越高。线的标准有个规范叫做AWG。你看下面的性能表，AWG26的铜丝最大电流1.3A，最老的充电线为了省钱，往往是这个规格的铜丝。接口升级到2A后，最好要改用AWS24的铜丝，否则发热会从60升到75。如果要升级到5A这个级别，就需要AWG22的铜丝。从AWG26到AWS22，直径从0.405mm升级到了0.644mm，粗了59%，用料多了253%。所以线贵个三倍是正常操作。如果你正好有MBP，最新type-c接口的那种，他的充电线是3.25A的，应该用的是AWG22的线。观察一下苹果配的那根充电线，再找几根老的充电线，比较一下粗细软硬，心里大概就有个直观印象了。
既然现实世界限制了我们提升电流，那么只有提升电压了。然而这又有另一个问题。高压进入手机后，是不会以同等电压加到电池上的。一定有某个管理芯片进行降压扩流，同时根据电池状态计算充电电压和电流。这个管理芯片的发热，和降压差成正比。锂离子电池常见电压4.0-4.2，充电电压最高可以到4.3-4.4，和USB规定5V的电压差距并不大。然而提升电压充电，在降低线缆风险的同时，提升了手机芯片发热。
因此快充主体分为两类，一类是增压，一类是增流。
快充协议 另一方面，如果一个不支持快充的设备插上来，你不分青红皂白直接提高功率，结局就是对方设备烧坏。这还不如独立一个非USB接口。所以所有快充协议，都需要握手确认彼此的支持情况，再协商一个充电模式。协商的差异，使得快充协议分为了好几种。但无论怎么分，一个协议不是增压就是升流，或者两个都要。
QC协议：高通出品，时至今日仍然是外设最多的快充协议。细节如下： 主体为增压协议。 5V/3A=15W 9V/2A=18W: 最常见规格 12V/1.5A=18W QC自3.0起，支持灵活的电压调整 自4.0起，和PD3.0互相兼容 jd上搜&amp;quot;充电 QC&amp;quot;，结果大概5.2W件 PD协议：官方正统。细节如下： 5V/9V/15V/20V四个档位 普通线缆最大3A，以上电流需要专用5A线缆(貌似PD准备在AWG24上跑到3A，也就是75度这个级别) 某个电压档位*3A等于最大功率。功率只要支持，电压越低越好 15W以下使用5V，15-27W使用9V，27-45W使用15V，45-60W使用20V，60-100W使用20V+5A线缆 jd上搜&amp;quot;充电 PD&amp;quot;，结果大概5500件 其他快充： MTK的PE，增压。jd上找不到相关商品(毕竟是解决方案供应商) OPPO的VOOC，增流。修改USB引脚规则。jd上搜&amp;quot;充电 VOOC&amp;quot;，结果大概800件 华为的FCP/SCP，增流。jd上搜&amp;quot;充电 FCP&amp;quot;，结果大概200件。SCP结果大概100件。SuperCharge结果大概200件 协议兼容和配件选择 目前来看，总体趋势是QC向着PD过渡。毕竟QC目前是使用最广的快充协议，而QC4自己都和PD3兼容了。与其还在小众协议上坚持，不如选用支持这两大协议的配件就好。
然而PD有一些很让人烦恼的特性，其中之一就是必须在全type-c接口上才能启动。对于QC而言，你的手机和充电器/充电宝支持QC了，用传统的线接一接，就可以快速充电了。不论你的手机是type-c口还是micro-b口，充电输出端都是type-a(就是电脑上那种大的长方形口)。然而PD，必须是输出端type-c，手机type-c，双方都支持，最后用一根type-c对type-c来充电。这根线大多数人目前都没有(除了最新MBP配了一根)。这使得很多支持PD充电的设备卡在线上并没有发挥优势。
那么在这么一个过渡时代，如何选择配件系列呢？
我建议大家备这么几个东西：
电源选择 首先我们明确一个原则。原则上说，充电头应当能够支撑你出门在外所有设备的充电，最好还是快充。因此充电头的口应该多于你的充电设备，最好还是分类多于(type-a和type-c分类都多于)。不到不得已，尽量不要考虑转接转换一拖多。在此基础上，充电头越轻便越好。我推荐的常见充电头分这么几类：
大功率type-c输出，例如MBP充电器。不用讲，这一定是支持PD的。这个情况首选当然是苹果官配头。替代品可以用网易智造 65W。 type-a和type-c双输出的中功率充电器。一个PD，一个QC。总功率最好36W以上。这样可以分别做PD和QC快充，互不干扰。或者勉强带动MBP关机情况下充电。这个头主要是出门时轻便，或者MBP救急。这个情况首选我推荐这个，ROCK PD/QC3.0快充。 折衷头。一个大功率的type-a和type-c头。基本就是1和2的结合。这个情况我推荐ZMIHA832，紫米65W，一个45W type-c，两个type-a。 例如我手里一台QC快充手机，一台PD快充手机，一个充电宝，一个MBP。最低需要四个口。一个18W级PD，一个40-60W级PD，一个18W级QC，一个18W级什么口都行。要满足这个要求，看起来最简单的是ZMIHA832加随便一个头。然而遗憾的是，这是不行的。因为ZMIHA832的两个type-a同时使用时，不支持快充(在京东链接的Q&amp;amp;A里有)。所以并不能随便叠加一个头，而是必须叠加一个双口的充电器，例如ROCK那个。理想状态下，这两个头就能支撑所有的用电。而大多数普通人其实是QC手机/PD手机二选一，加充电宝和MBP。这种情况下1+2的组合就挺好。</description>
    </item>
    
    <item>
      <title>996</title>
      <link>//blog.shell909090.org/blog/archives/2867/</link>
      <pubDate>Mon, 15 Apr 2019 11:06:51 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2867/</guid>
      <description>也许很多人知道，最近有个挺火的项目，叫996.icu。这个项目主要是介绍了软件界常见的&amp;quot;996&amp;quot;加班模式，列举了相关法规和相关报道，并提出了抗议。域名的意义是，加班996，生病ICU。
这个网站在网上的讨论很热烈。我也算是在软件行业里混过一段时间。所以蹭个热点，说说个人看法。
一些基本知识 在说看法之前，首先我想把什么是正常工作，什么是996，以及关于996的一些事实情况(至少是我知道的情况)讲清楚了。否则后面讨论容易跑偏。
谈到996，首先我们需要说国家规定的理想工作状态。工作时间是一周五天，周休两天，每天八小时。当然，规定并没有说明八小时的涵盖内容，因此分为两种。一种解读是，工作八小时，午饭休息一到一个半小时，不计在内。因此9点上班的话，对应6点或者6点半下班。但是有很多福利不错的单位，午饭一小时涵盖在八小时内。因此就变成了朝九晚五的工作模式。很难想象吧。被我们嘲讽当作社畜象征的朝九晚五，其实几乎是最好的工作制。
关于加班，国家的规定是。一天最多可以加班3小时，一周最多加班8小时，一个月最多36小时(一个月4.5周计)。
关于加班工资，国家规定是。延长劳动时间，支付不低于正常工资的150%。休息日安排工作又不能补休，支付不低于正常工资的200%。法定假日安排工作，支付不低于正常工资的300%。当然，对所有公司来说，不低于都会被默认视为等于。
996和一些变种打法 讲清楚正常工作，和加班的法律规定，下面我们就可以对比一下IT圈的实际打法了。996的原始意义是，每天9点上班至9点下班，每周工作6天。按照全部工作时间计算可以看到，周工作时间是72小时。如果扣除午餐晚餐各一小时，工作时间是60小时。横竖都是超过最长工作时间的。当然，名义上叫996，实际上有不同的弹性制做法。例如10-10-6，也就是比996晚上班一个小时，总工作时间不变。这类变形统称996，代表7x小时级加班。在此之上，还有时间更长的997。工作时间70小时，累计的话是84小时，代表8x小时级加班。以及最高级007，代表168小时级加班。由于一周只有168小时，所以007也是工作时间的极限，没办法再长。这个加班制也被戏称为&amp;quot;License to kill&amp;quot;。
当然，007并不是说我们就无需睡眠了。我们可以简单计算一下一个人的时间分配。假设这个人一天睡眠7小时，吃饭两个小时，洗澡上厕所等必要的浪费时间一小时。那么一天有10小时时间是必然处于无法工作中的。因此极限状态下的加班，最长限度工作时间也就是14*7=98小时。大概就100小时，这还建立在吃住在公司的情况下。再加班，就需要压缩吃饭和睡眠时间了。软件行业赶工的情况下，有周工作时间120小时的极限情况。当然，这种状态是注定无法持久的，结束后需要一定时间的放松调整。
996一个隐性前提 其实在讨论之前，我们需要讲一个隐性前提。996认为，工作的产出和工作时间呈正比。所以为了提升产出，我们需要加班。对于现在的软件行业来说，这是一个正常假定，然而并不是一个必然。产出正比于劳动时间，这是工业化的结果。我们的软件行业，正试图将所有软件的生产流程变成一个标准化的工业制度。
然而很多软件生产过程，或者工业化大生产中的几个特殊职位，依然是依靠几个人的直觉，天赋和经验。脑子想清楚比努力干重要，机遇和灵感比脑子想清楚重要。在这些东西面前，劳动时间并没有用，或者帮不上什么大忙，或者反而有害。在这些特殊的场景下，必然是不需要加班或者996的。然而不能因为这些特殊情况的存在，而否认当前软件行业是个工业化大生产的行业(或者说要逐步进入工业化大生产)。
从这个角度说，艺术式的软件开发，既不会产生996(因为没用)，也对行业现状没有帮助。因为艺术式的软件开发，注定不能通过增加人手来获得更高的收益，因而不能吸纳劳动力。
分类讨论 讨论加班工资的时候，我们需要按照几个核心问题将情况分为几类。
员工是否在招聘前就知道可能面临加班，大致会是怎样一个加班量级。 员工是否能够收到加班的对价收益。(劳资溢价计入工资或加班后计入加班费都算，福利的话需要足额) 员工是否可以选择加班或不加班，而且基本不会因为这个选择受到除了加班费外的其他影响。 问题一讨论的是透明性，二讨论的是加班工资本身，三讨论的是公平性。一和二的关系非常紧密。有一就有二。很少有公司在招聘的时候大咧咧的说我们要加班，但是请你按照市面上不加班的工资和我们谈。而反过来，有二也很可能有一。很少有公司明明需要员工加班，也明明会足额给加班费，但是招聘的时候不说明白。因为给足加班费的情况下，唯一的问题就是员工本身适不适合(或者说想不想)加班了。隐瞒这个事实，招一堆不适合的人来再开除，也很少有公司这么无聊。这种情况下常见的是，公司自己也不知道下面会有一段惨烈的加班。
按照前两个问题，我将情况分为三类，最后再讨论第三个问题。一类是招聘的时候直接说明的公司。第二类愿意给足额或基本足额工资。第三类就是只有象征性补偿，或者只有福利，或者连福利都没有。为什么这么分三类呢？因为这三类的动机和影响各自不同。
招聘时讲明的公司 第一类的问题最小。在入职前告知，不侵犯知情权，也不套住人才。合同里说清楚996，并且把公平的对价补偿也写了进去。愿意来的可以来，不愿意的可以不来。很多朋友对这类的意见是，认真负责的好公司。
当然。严格来说，在合同里约定超过48小时每周的工作时间也是违法的。所以很多公司会有工作制告知，但是并不会体现在合同中。只要这个告知早于员工接受offer，那么就可以算为此类。
这类公司，加班的动机往往是程序行业的内在动机。可能很多圈外人不知道，软件行业的效率，和项目人数的平方成反比，随着参与人数的增加而迅速降低。这个观点是Frederick在人月神话中提出的核心观点。他的解释是，软件工作中，有一部分非常重要的工作就是沟通。程序员需要让彼此了解对方意思，才能写出一致无误的软件。而沟通很难群体进行，因而沟通的成本是和团队规模的平方成正比。因此实际践行中，一个团队的理想大小，会限制在10人上下。如果要再扩充规模，往往会虚胖。即团队内实际产生战斗力的人员仍然在10人上下，其余人就是围着干零活，感觉有力使不上。因此大型软件工作往往会采用横向或纵向的模式，来切分工作。例如将一个大型系统分为几个功能模块，约定好彼此的接口，分别开发，最后联调。这样做往往使得模块和模块间产生不少问题，甚至可能导致漏洞或逻辑问题而无法使用。然而从软件工程角度讲，仍然是一个非常好的提升总体速度的方法。当然，模块的切分也是有限的。模块越多，模块间的协调成本越高，总体质量变差的可能性越大。通过模块切分的方式，也无法实现无上限的加人。
那么，我们也就很容易理解这类加班的内在理由了。加班10%能解决的工作量，招人的话需要多招20%。这意味着更多的争抢，更大的人员流动性，更多的培训，磨合。而且加人还需要重新安排团队，更细化的切分项目，更频繁的沟通会议，更高的高级管理人员成本。就算能招到人，最后总成本上升可能远远超过20%。同理，996的加班高达50%-80%，如果招人的话，大概要招2-3倍以上的人，成本则可能高达3-4倍。就算按照加班工资实打实发，加班成本也就是2.2倍。作为管理者，有百分百的动机选择加班，而不是招人。对于他们来说，更实际的做法是入职的时候直接谈一个相对于不加班2-3倍之间的溢价package。员工也能赚钱，公司也能省钱。
愿意给予相当补偿的公司 第二类公司，起码还不算坑到底。如果是一般加班，老板的选择往往是强制结成年假，而不是支付加班工资。因为休一天损失100%工资，支付加班工资可要付150%-300%。然而996的加班往往太多。总不能一个部门半个房间都在休假吧。所以也有协商，部分结算，部分转为年假。
这类公司的理由往往是一般正常公司都有的，软件行业峰谷影响。例如，做2B的知道，年底的时候各种突击花钱，突击签单，争取用光预算。到了来年三月的时候，就变成了非常紧的项目压力了。然而到了下半年接近年底的时候，项目做的差不多验收了，往往单子又会跟不上。因此有些公司会选择以年为周期进行加班和调度。年初的时候多加一些班，到年底开始强制员工休假。如果休不了才进行加班结算。
特别注明一下。首先，这类年级调度加班调休的公司，如果超出每周8小时也是违法的。其次，公司原因导致的停工，其实不需要计算为假期。如果员工不同意使用自己假期，原则上单位需要照发工资和加班补贴。让不让员工干活随意，但是钱必须发。然而，很少有员工和单位这么对着干。
基本无补偿，甚至无福利的公司 这类公司是最常见的，其基本想法就是压低工资或是降薪，或者又干脆裁员。
压低工资很好理解，这似乎是劳动力密集型行业的通病。和员工谈的时候只谈工资，招进来就往最大工作时间利用。为了让员工不走，甚至会使用押金或迟发工资这类手段。这类事情员工通常得不到政府的救济。毕竟农民工欠薪这种事都要总理亲自去要。只是加班而已，似乎也就不那么严重了。一家两家如此做，多了之后，劳方也不管你们加班不加班了，总之就按照加班的开薪资。资方说不加班，劳方不敢信。一来二去，逆向选择，不加班的公司不好混，大家就都开始加班。而一旦成为行规之后，劳方更是不会相信什么不加班的事情。其实这个情况和招聘时讲明很类似，差别在于大家对加班与否的认知不统一。劳方认为我就是值这么多钱的，不加班就是这么高工资，所以公司没有加班费，属于违法违规。公司则认为，员工根本不值这么多钱。之所以给这么高溢价，就是因为要加班。最后就很容易发生纠纷。
我常见的情况是，如果是劳方市场，员工选择权更多，资方往往倾向于招聘时讲明白。因为一旦员工入职后发现劳方和事实相差太大，可以自行离职，不怕找不到工作。那么资方就要承担成本了。而如果是资方市场，通常就是大家都揣着明白装糊涂。反正入职后跑不了。
其实程序员现在也不笨，如果是大公司的话，一般也会找人打听打听是否在加班，面试的时候也会问。但是你可以看到各大公司对加班的态度，大部分对公开媒体的态度都是粉饰加班的，只强调要求员工全情投入。实质上我们知道这个说法也就是说说，不信你试试入职后问你老板，我的工作态度端正绝对全力投入，但是我就是不加班，行不行。
降薪和裁员是大家意见最大，也是反弹最大的。毕竟996相当于公司宣布降薪一半以上，不可能没反应。这个主要是因为软件行业景气状态有波动。仔细观察毕业生薪资就能发现，往往是一年出现天价，第二年就跌穿地板。软件行业的发展不全是线性的。一旦不景气，老板就有压缩成本的动力。压缩成本两个思路，一个是降薪，一个是裁员。然而降薪不好听，裁员补偿极高。怎么办呢？两个问题有同一个解决方法，996。如果同意的话，就是变相降薪了。不同意就无补偿离职了。这个思路有个尤其恶心的实现，就是年底的时候宣布996。这时候走人，连年终奖都省了。
实话说，这种手段叫杀人一千自伤八百。因为肯放弃年终奖和赔偿的主要理由，最主要是因为有一个不错的潜在机会。与其在这里熬着，还不知道拿不拿的到。不如在新工作的margin里找回来。相反，如果没有潜在机会，那不妨先混着。然而能很快找到不错的机会的人都是什么样的人？所以这种策略下最先走的，往往都是公司里的精英。反而是公司想开掉的平庸者更有动力留下来。
公平性的影响 所谓公平性，就是员工能够自己选择是否参与996。因为从道义上说，除了上面的第一种情况，员工和公司的合同只涵盖了40小时工作时间。国家标准也只涵盖了最多48小时每周的工作时间。除此之外的时间，员工并没有义务来工作，给没给够工资都没这个义务。加班费给够了，愿意来，是自愿选择。给够了，还是不愿意来，那是个人选择。不愿意来就给穿小鞋，在bonus和升迁上刁难，甚至威胁开除，这就是逼迫了。
然而现状是，很少有公司敢于说自己是公平的，甚至很少有公司意识到这个问题。大部分公司在考评的时候，都会有一项，工作积极性。其中不愿意加班的人，这项肯定不会太好看。然而细想的话，用员工下班后的表现，考评员工的工作积极性，这是个什么道理呢？
一个隐性的问题 996是不是好事？当然不是，对于大多数人都不是。首先第一点无可反驳的理由。这个行为违法。要相信国家，相信法律嘛。然而法律为什么规定40个小时呢？是不是太保守了？一周最高98个小时，干个70小时不过分嘛。
996对于个人来说，既是个机遇，也是个障碍。短期来说，会有一份非常不错的收入。而且996能为程序员提供很好的上升机会。因为学东西的速度是和工作时间相关的，而上升通道是和毕业年限反相关的。一个机会，同样水平的人，一个毕业一年，一个毕业五年，当然是先选择毕业一年的，因为潜力更大。996能够极大提升新手的机会。
然而当程序员进入30后，后遗症就接踵而至。首先，996会减少员工和家人朋友相处的时间。会做程序员的人本来普遍就不会特别善于交际。相处时间进一步减少后，就很少能有足够的时间谈恋爱。所以程序员单身狗的名号不是白来的。虽说结不结婚是个私事，然而从国家总体角度来看，这当然是个坏事。都没结婚，哪里来的二胎？靠女装么？其次，996普遍减少学习的时间。这使得程序员除了公司相关技术外，自己学的东西很少。软件行业又是个更新换代非常快的行业。最后，当技能没有更新的程序员，和愿意996的竞争者竞争的时候，往往就会被淘汰。因此常有个说法，程序员过了35做不下去。这对个人和行业来说都不是个好事。
所以总体来看，最好是30岁之前996，30岁之后正常工作。然而工作制度的事情并不是随个人想法而改变的。对于行业来说，如果规定至少150%工资，那就是150%。没有人会多给。对于行业来说，一周标准是50小时，那坚持工作40小时的程序员就会失业。之所以要确定行业标准是因为，企业一定会在标准范围内最大限度的利用资源。如果没有统一的行业强制标准，会出现这么一个现象。某个企业提出加班到一周50个小时，另一个企业提出加班到60小时。25岁的程序员说我可以接受70小时，22岁的说我可以接受80小时。这么搞下去的结局是地狱。
这个问题，即便是第一类公司，也没有解决。他们能做的只有，给员工足够的工资，足够的晋升平台。但是他们却不能说给行业做了个好榜样，甚至不是一个好的竞争者。他们的成功，无疑鼓励所有公司尽情加班，只要给钱。无疑限制了程序员行业只能牺牲年轻的肝，让他们在35之后面对茫茫的未来。同时也限制了软件行业的总供给，因为35后的都转行了。
因此，国家制定了各种规章。即便牺牲总体效率，也要限制无底线的加班竞争。而且这一点不仅限制没给够补偿的公司，也要限制给够了补偿的公司。然而很遗憾的，这些规章非但没有贯彻，甚至不被理解。
主人翁意识 很多老板提到主人翁意识，提到拼搏奋斗。拼搏奋斗当然是对的，然而主人翁意识就要看员工在整件事里的收益了。我们不常提，然而又无法避免的一件事是，员工和老板很多时候不是一条心的，甚至往往是对立的。员工不是企业的拥有者，不在企业的获益里有分成(或者说不是所有员工都有分成，有也不一定是对等分成)。要求一个不从整件事里获益的人，为这件事拼搏，本身并不合逻辑。这个问题更扩大点，国家也要求每个公民有主人翁意识。为啥各位大老板不能者多劳一点，把每年的盈利全上缴国家呢？主人翁意识的前提，就是员工从整件事里获得合理的收益。而合理收益的最直观体现，当然是加班费。连加班费都没给够的公司，我们又如何能相信公司能为员工提供足够的分成呢？
事实上，主人翁意识本身就是个悖论。如果员工真的有将企业当作自己的事业来干的干劲和能力，那么他为什么不自己创业呢？现在社会，技术不是壁垒，资本不是壁垒。创业可以说是最好的时机。从这点来推论，大部分在企业内就业的人，要么是不会将自己视为企业的主人，要么就是将要创业的。
有什么可以做的 最简单的，请慎重考虑996的度，以及对人生的影响。有些公司996是因为真的临时有问题。这种公司虽然短期内不合法，但是我仍然认为值得一去。然而多短，多大程度的加班才是可接受的。这个加班又会如何影响你的人生呢？请自行仔细考虑。起码，我不希望我的读者因为996而去世。如果你觉得无法容忍，最低限度的，你应该离开。
其次，我希望大家都提升效率，更有效的工作，并离开996的公司，参与规范工作的公司。这不仅对你有帮助，而且能够帮助整个行业。因为如果做事规矩的公司，因为你而可以对抗施行996的公司，那么会给市场上多一些选项，给其他人多一点希望。
最后，我们希望大家帮助劳动法落地实施。劳动法并不是一部闲的没事干的法律，尤其是劳动时间限制这块。我们有很多法律缺失，然而加班这块法律实际存在，却没有实际实施。所以希望大家在面对权益损害的时候，能够勇敢的合法对抗。至少国家现在也在宣传依法治国，那么实践一下总没错吧。即便不想亲自对着干，也可以考虑支持或给予方便。最低限度，希望大家理解支持并同情权益受损的人。毕竟这些人，可能是你的昨天或明天。
其他行业的一点情况 当然，最后我要说的是，程序员是一个特殊的群体。我们毕竟有高收入，可能无法，但是也可能可以弥补我们加班逝去的青春。我们有发声渠道。社会还能听见我们的声音。然而社会上还有很多行业，加班程度远远超过程序员。例如出租车司机。就我了解，这个行业的特性是做一休一，24小时交班。计算一下就知道，周工作84小时，追平997。但是这是司机的日常。一年365天，连春节都要上班，还得面对程序员写的打车软件的竞争。你看出租车司机有开11365.icu吐槽一下么？又例如医生。在住院医阶段，就是住在医院里的。这个位置的意思就是007，一周98小时。而且医生需要压缩睡眠，工作时长甚至超过007，持续还得持续一年。你又看谁说我们医生太辛苦了，我们把医院关了吧。或者医生收入太低了，我们把诊费和工资翻个倍吧。
我写这些例子，并不是说大家都是这么过来的，你们程序员贱人就是矫情。我是说我们有很多不公平的工作制度，在伤害个人，在伤害行业和整个社会的未来。我们在经济大发展的年代，一切都要跑步前进，没有停下好好看路，也就罢了。现在经济不景气，大家日子都不好过。在这个时候还疯狂加班，是想干什么呢？不如趁机把这些事情扳一扳。毕竟，很多事情再不扳，就来不及了。</description>
    </item>
    
    <item>
      <title>关于抵制洋节</title>
      <link>//blog.shell909090.org/blog/archives/2866/</link>
      <pubDate>Mon, 24 Dec 2018 19:50:41 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2866/</guid>
      <description>其实这事没什么好多说的。不过节日这件事本身有点意思，所以展开说说。
节日的分类 首先，节日分为两种。法定节日和其他节日。法定节日的特殊性在于国家的承认。其中又有一类比较特殊的，公休节日，主要就是放假。很多人其实搞不清节日和假日的关系。简单点说就是节日不一定放假，例如植树节，也是我国承认的节日，但不放假。按照我国的法定假日列表，我们总共放11天假。春节和国庆各放三天，元旦，清明，劳动，端午，中秋各一天。这里我插一句，在两岸四地中，大陆放的算比较中等的。大家可以参考这张两岸四地节假日列表。大陆正常放假11天，妇女多半天，不满14岁儿童多一天，14岁以上青年多半天，军人多半天。台湾13天公休，劳工多一天。香港17天，澳门20天，但是周六只放半天，全年比台湾大陆要少26天假期。综合算下来，台湾休假最多。
如何界定一个节日 现实情况中，其实有非常多的节庆混杂的情况。有来历一致但是其他都不一样的，有时间一样来历和名目不一样的。还有其他都一样但是时间不一样的，例如圣诞节在东正教这里就是1月7日。又例如日本新年。虽然日本新年和中国春节的来历一致，但是习俗不一致。更过分的是，日本新年用的是公历，所以是在每年一月一号。还有香港的冬至和圣诞，是混在一起过的，这个也很难分清楚到底算不算传统节日。
那么，什么标志一个节呢？
一个节有几个基本属性。名称，来历/起源，习俗，时间。其中最容易不一样的就是习俗。我国各地春节习俗不一，但不能说他们就不是一个节日了。至于名字，一个节日多个名字倒是常态。关键是起源和时间，哪个能界定一个节日的唯一性呢？
我个人看法是，追溯来历一致。如果来历一致但是时间发生变化，例如中国春节和日本新年，基督教和东正教的圣诞，均归为一个节日。而如果时间一致而来历不同，例如香港冬至和圣诞，则归为两个节日。
什么叫洋节？ 什么叫洋节呢？我们狭窄点定义。凡是1911年之前存在的，非中国传统节日，统统算洋节。1911年之后算新兴节日或纪念日。之所以按照1911算，是因为1911清朝结束。之后的建党建军之类的节日不会被算成洋节。
我们法定的节日里，元旦和劳动节是洋节。春节，清明，端午，中秋是传统节日。国庆是新兴节日。
哪些洋节我们不过？ 我们可以对比美国节日。其中大部分节日我们都是不过的。和中国大众交集最大的有三个，元旦，圣诞，感恩节。加上流行节日里的情人节，愚人节，母亲节和万圣节，总计七个。其中只有元旦是法定节假日，其余不是法定节日，更不放假。
顺便一提。美国总计放假12天半。独立日三天，圣诞节一天半。比大陆好点，和台湾水平差不多。
这里要特别说一下美国的劳动节。美国劳动节不在五一，庆祝的事件也不一样。但是庆祝的目标是一样的。遵循上面的原则，我将其归位不同节日。
哪些传统节日我们不过？ 那么中国传统有哪些节日呢？这个比较多。细表可以看汉族传统节日。其中比较大的有这么几个。春节，元宵，清明，端午，七夕，中秋，重阳，冬至。其中我们不过的节日有四个，元宵，七夕，重阳，冬至。
过节到底在过什么 实际上，近些年来过节的庆祝和纪念意味已经越来越淡。端午节变成粽子节，中秋节变成月饼节，春节都有不会去团圆的了。随着近代城市化进程，节日的宗教和纪念意义正在逐渐屈服于生活现状。拿清明为例吧。住的近的还能去爷爷奶奶坟上看一看，老家远真没办法跑个一天回去，就为了在坟上慎终追远一番，然后再一天跑回去。只能春节回去花半天上个坟。随着年轻人跑到城市里打工，家族长辈的影响力也是逐渐在减弱的。也许再过二十年，一个大家族的孙辈就不怎么回去了。这种情况下，要提倡复兴传统节日，实际上是有困难的。
洋节的本质问题 那洋节呢？为什么洋节那么火？这里我们要提出一个洋节的本质性问题。实际上我们过圣诞，并不是真的在当圣诞过。大家在圣诞夜里会去教堂么？我们过的所谓圣诞，感恩，情人，愚人，等等这些节日，本质上是一种节日，促销节。洋节会火，实际上来源于我们对他们的不了解。我们知道圣诞节有圣诞老人送礼物的传说，但是很少知道圣诞节有很多宗教活动。情人节，实际上变成了约炮节。以至于我们所过的每个中国和外国节日，基本都是，礼物，礼物，礼物。这种情况下，要扯一个我们熟悉的节日有什么和消费有关的传统比较困难。例如端午，说破天也就是吃粽子。要扯什么，我们要拿粽子丢来丢去，丢你老母啊。至于清明，促销能去促销套套么？这是要坟头蹦迪，给祖宗现场即兴表演的意思？而我们没听过的情人节，显然就有更多玩法，例如日本人搞出来的白色情人节。很明显就是促销节。更著名的应该是光棍节促销，每年都能创下网络购物的记录。所以在扯淡促进消费上，传统节日不及洋节，洋节不及新兴节日。
能不能抵制洋节？ 彻底抵制的话，实际上是很难的。要彻底抵制洋节的话，就涉及到两个国定节假日，元旦和劳动节。这两个节日都是国家强制放假的。如果要彻底抵制洋节，那么就要在这四天继续上班，并且主动放弃加班费。毕竟，你都不拿他当节日了，还继续放假，或者拿三倍加班费，说不过去。所以如果是全年加班的岗位的话，那还有点基础。
如果说非彻底抵制。国家放假我还是放，但是不参与不纪念。其余非法定节假日也不参与不纪念。那么除了单身狗在情人节会有点麻烦外，和现在现状也差不多。毕竟我们现在，也就是不参与不纪念，放假和消费而已。</description>
    </item>
    
    <item>
      <title>恒春潜水记录</title>
      <link>//blog.shell909090.org/blog/archives/2865/</link>
      <pubDate>Mon, 20 Aug 2018 00:02:44 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2865/</guid>
      <description>地点在恒春的后壁湖，岸潜4次，船潜12次。岸潜地点在核电站出水口左侧右侧和软珊瑚区域（潜点就叫这个名字，俗吧）。深度都不怎么深，但是越过一堆礁石比较困难。有鞋子保护好歹脚不痛，但是这双鞋子防滑性能一般，我差点在岸边溜冰。
船潜地点在外侧的几个礁石，深度都比较大。独立礁（瞧瞧这名字起的）悬崖部分深度超过30。我有几支用了EAN32，下不了32米的深度。至于其他人，他们基本都没有DD的证，本来就不能下去。
在垦丁附近潜水，最大的风险来自于低温和大流。我本来还和潜导说我就水母衣下吧，反正水温都在29-30左右。潜导说你碰到斜温层就知道厉害。垦丁这里有很多斜温层，底层温度会骤降5度左右，我记录的最低温度是22度，3mm的湿衣冻成狗。比我在PG外岛碰到的斜温层强大的多。最大的流在3节左右。负浮力下水后还没动作抓绳，先被大流压到了梯子上。比我在泰国碰到的流还猛。比较值得欣慰的是，基本都是横流，很少有垂直流或洗衣机。不过同时也有个坏消息。垦丁这边有很多的浮潜，水上摩托和香蕉船。这几个活动的危险性就先不去说了，水上船只频繁运动的情况下，是很容易撞到的——尤其是没有SMB的情况下。
垦丁的能见度不高，一般只有5-10左右。但有趣的是，在斜温层下方，能见度反而更好。往往有10米以上。肉眼可见的原因是因为斜温层的温度有利于浮游生物的生长。不过这也造成一个问题。在垦丁水下拍照，是一定要补光的。因为上方自然光都被表层海水吸收了，底层虽然能见度不错，但光线不足。
物种多样性来说，还不错，经常能看到蓝点鳐，厚唇石鲈。我还看到了龙虾，海蛇和海龟。有看到一只豆丁海马，不知道照没照清楚。出水口左侧的软珊瑚区里，有一堆海胆正在搬家。在核电出水口附近，照道理说，水温会比较高，可能引起珊瑚白化。但实际上珊瑚还不错，偶尔见到白化。
上次在垦丁浮潜，有严重的水下垃圾问题。这次无论是船潜还是岸潜都没有看到特别严重的垃圾问题。有见过几张纸，一次见到塑料袋。比起其他国家来说没有明显糟糕。后来我考虑了一下，水下垃圾估计是因为沉没在水下的部分无法在净滩中清理。浮潜和深潜业者当然有动力去清理他们看到的垃圾（毕竟关系到他们的饭碗），但是这并不能覆盖全部海滩。因此这次我的活动范围可能被清理过，而上次的活动范围则是问题比较大的部分。
在潜水间隔和船长聊过，他们其实是渔船，属于娱乐渔业。每次出海的时候，是要有海政属的人来点人头的。这也间接造成了船的大小很大，每次出海成本很高。我这次是一条船出海一次潜两支，1000NTD。上面往往就三五个人，很多时候教练都比客人多。其他国家经常是一条小船就出去，船上也是三五个人。这样的成本差异接近数倍。
最后说说交通和生活基础设施。恒春没有通铁路，只能通过垦丁快线（巴士）来返。从恒春到左营大约是两小时左右。但是去的时候最近一班车没票，回的时候正常车都没票，最后在等加班车。可见总体运力并不是很足。住宿方面，恒春老城里有很多民宿，可选择空间很大。我很喜欢乡村鸭肉冬粉家的卤味（不是他家冬粉），和对面的洋葱冰淇淋（是的，洋葱冰激凌，恒春产洋葱）。基本来说，你可以认为，这里除了可以讲中文外，基本和你去的其他潜点没什么区别（主力语言还不是普通话，而是闽南语，大部分人聊天的时候，我感觉和东南亚没啥区别）。</description>
    </item>
    
    <item>
      <title>递归有关的几个小问题</title>
      <link>//blog.shell909090.org/blog/archives/2864/</link>
      <pubDate>Thu, 14 Jun 2018 15:08:52 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2864/</guid>
      <description>引子 在加密系列里突然出这么一个问题，确实有点怪。我犹豫了一下，还是先写了再说。
这个问题的提起，是公司老大kay提出一个问题。在反转链表的时候，如果有环怎么办。然后我们就现场写各种解环算法。这个问题本身不难，我们先看一下原始问题和解，还有带环反转。
Scheme反转链表 想了想，还是先写Scheme版本。这个版本实现简单概念清晰，个人觉得非常典型。而且对后面理解Python版本很有帮助。如果看不懂的话，可以直接去看Python版本。Python版本看不懂了再回本章来，去看Scheme入门教材。
Scheme的正解版本只有一个，就是带复制TCO版本。
(define (reverse-tco ll rslt) (if (eq? ll &#39;()) rslt (reverse-tco (cdr ll) (cons (car ll) rslt)))) 这个版本体现了Scheme的几个特点。
递归比迭代好使。 强制要求TCO。 cons操作起来非常方便。 Python递归反转链表 def reverse_tco(ll, rslt): if not ll: return rslt return reverse_tco(ll[1], [ll[0], rslt]) 这是链表最简单的问题，也是递归论最基本的问题。注意这里采用list来模拟了lisp中的cons，不用tuple主要是后面还有环，需要修改数据。如果你不明白，可以先看Scheme版本的代码。
递归转迭代 写到这个水平，其实有一半的被面人就挂了(好水)。但是这个水平其实也就是入门水平。最低限度，也要知道上面这个递归是可转写为迭代的。更进一步的，要知道这个递归是个尾递归。下面我们把这个代码转写为迭代形态。
def reverse_iterate(ll): rslt = None while ll: rslt, ll = [ll[0], rslt], ll[1] return rslt 或者非生成节点版本。
def reverse_iterate(ll): rslt = None while ll: rslt, ll[1], ll = ll, rslt, ll[1] return rslt 这里的区别，其实是SICP第24页所说的“递归计算过程”和“递归过程”的区别。具体请直接参考原书，我就不打字摘抄了。</description>
    </item>
    
    <item>
      <title>openssl证书相关</title>
      <link>//blog.shell909090.org/blog/archives/2863/</link>
      <pubDate>Sat, 12 May 2018 11:19:23 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2863/</guid>
      <description>鸣谢和前言 首先感谢Ivan Ristić。本篇很多内容可以从他的这本书里读到。大家如果有钱，可以买来支持一下。没钱但是英文好的话，也可以直接读一下(这本书在网上是公开的)。本文没有直接复制，引用，或是完全写成读书笔记。所以原则上是不受书的版权限制的。不过如果作者有异议的话，我愿意下线这篇文章。
First of all, I wanna say thank you to Ivan Ristić. I got a lot of help from this book. You can buy one if you want, or read it personally (it&amp;rsquo;s public). This is really a good book.
In this article (I mean the one you are reading currently), I don&amp;rsquo;t copy or reference directly from that book. So as far as I know, it shouldn&amp;rsquo;t have any copyright problem.</description>
    </item>
    
    <item>
      <title>openssl基本密码学操作</title>
      <link>//blog.shell909090.org/blog/archives/2862/</link>
      <pubDate>Sun, 01 Apr 2018 11:19:20 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2862/</guid>
      <description>openssl的基本检查 使用以下命令检测版本，-a可以提供完整数据。
openssl version openssl version -a speed test speed测试是openssl为你跑一下不同算法在你机器上的实际执行速度，这项测试在openssl中是一项非常有指导意义的测试。一方面，他给出了你选择算法的依据，通过实际数据告诉你每个算法能跑多快。另一方面，他可以用来评估不同硬件对算法的加速能力。如果仅仅是给出了选择算法的能力，我们一般都可以得到一个一般性结论，例如chacha20比AES快。但实际上很多CPU带有AESNI指令集，这种情况下AES的执行速度反而会更高。所以运行性能是和执行平台紧密相关的。关于这部分，可以参考Intel对OpenSSL的性能优化。
具体的测试方法是
openssl speed 后面可以跟算法，只测试特定的算法集。
我这里跑了一遍全集，挑几个重点算法说一下性能吧。
hash算法
sha256，标杆性hash算法，64字节小数据140M/s，8k大数据353M/s。sha512，170/470。hash算法的内部状态越长，在连续计算时的速度越快。 sha1，251/768。 md5，243/575。(你没看错，md5比sha1还慢) rmd160比sha256还慢，whirlpool比sha256慢。最快的是ghash，小数据4222/9732。但是见鬼的是，我查不着这是TMD什么算法(openssl list -digest-algorithms的输出里没有)。 最合适的算法，应该就是sha-512/256了吧。很安全，速度比sha256快，长度也不算太长，还能防御LEA(Length extension attack)。 对称算法
aes-128-cbc，标杆算法，120/125(M/s)。aes-192，93/103。aes-256，86/88。aes的内部状态越长，在连续计算时的速度越慢。这点和hash正好相反。 camellia128，138/167。camellia192，110/128。camellia256，109/124。这是一种大批量数据计算非常优越的算法，AES在计算大批量时性能上升并不快。 des比aes慢的多，只有66M/s。3DES更慢，只有25M/s。 没有chacha20。 不考虑chacha20的情况下，最好的算法应该是camellia128。当然，工业标杆是aes-128-cbc。 非对称算法
rsa 1024/2048/3072/4096的sign效率分别是8698/1351/453/206(个/s)，verify效率分别是131847/46297/22970/13415。rsa也是随着内部状态上升效率下降的，而且下降非常快。而且verify效率远高于sign。 dsa 1024/2048的sign效率分别是9836/3280，verify的效率分别是10584/3616。 ecdsa 192/224/256/384的sign效率分别是12696/12672/21016/4383，verify效率分别是3200/5630/9994/1019。能很明显看出来，sign效率比verify高。256位的时候由于某种效应性能达峰，后续直接断崖下跌。 ecdh 192/224/256/384的效率为3642/8339/15094/1183。同样能看出这种效应。 rsa和ecc不具有互换性。rsa参数选择建议2048，ecc参数选择建议256。 对称加解密 openssl支持多种对称加密算法，可以直接对文件加解密。在使用前，我们首先列出系统上支持的算法。
openssl enc -ciphers 输出很复杂，不列举。我们直接讲我的机器上分析后的结果。
第一段是密码算法。在我这里，支持以下算法：aes, bf, blowfish, camellia, cast, chacha20, des, des3, desx, id(ea), rc2, rc4, seed。 最后一段有可能是模式。在我这里，支持以下模式：ECB，CBC，CFB，OFB，CNT。其中CFB，OFB和CTR(CNT)是可流式的，其余都是块式的。关于加密模式，可以看这篇。 在enc的manpages里明确说了，enc不支持CCM或是GCM这类的authenticated encryption。推荐是使用CMS。 例如我们使用比较流行的chacha20来加密一个文件src，里面可以随便写一句话。
openssl enc -chacha20 &amp;lt; src &amp;gt; dst 注意dst应该会比src大。因为默认情况下，openssl会为密码加一个salt，然后把salt保存到加密结果上去。再从passwd+salt里推导出key和IV（默认sha256）。默认的salt为8bytes，合64bits。key为32bytes，合256bits。IV为16bytes，合128bits。具体情况可以用openssl enc -P -chacha20来打印。</description>
    </item>
    
    <item>
      <title>密码学基本原理</title>
      <link>//blog.shell909090.org/blog/archives/2861/</link>
      <pubDate>Thu, 08 Mar 2018 17:38:12 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2861/</guid>
      <description>Digest 摘要为一个函数H。对任意数据d，有h=H(s)。同时至少满足下面特性1。其余特性为额外要求。
对相同的数据d1=d2，计算得到h1=H(d1)和h2=H(d2)，必然有h1=h2。但不要求h1=h2的情况下，必然有d1=d2。 根据h计算任意一个可能的d极其困难。（安全性） d服从随机分布的情况下，h的分布足够随机。（均匀性） hash系列函数 hash系列中最著名的即MD5，其后继者为SHA1，SHA2，SHA3等。但实际上这几个都是密码学hash函数。非密码hash常用于快速计算均匀散列值（例如hashtable），代表有CRC （实际上CRC主要的目地是校验，而不是散列）, FNV，Murmur。这几个非密码hash函数的对比可以看这里。
hash函数需要注意长度。一般来说，长度越长越安全（越难被找到一个碰撞值）。但是过于长的值会在保存和使用上产生困难。
Rainbow table Rainbow table是一种通过预先计算来碰撞的手段。
从粗略的角度来说，你可以认为这就是一个巨大的反向hash表，保存了所有计算过的hash和对应的碰撞数据。但是通过计算可知，这样的反向表会占用巨大的存储空间。彩虹表采用巧妙的算法缩减了空间消耗。
其基础思想是，对某个碰撞数据，计算其hash，随后通过某个算法R，将这个目标hash再映射到另一个碰撞数据上去。通过这种方式，一个碰撞数据可以持续的计算出一串不同的hash。假设这个长度为n，我们最后保留最终一个hash和最初一个碰撞数据。
在检索某个hash的原始碰撞数据时，我们可以利用R将其映射为碰撞数据(但不是我们需要的那个碰撞数据)，进而计算hash串并检测是否在反向表里。如果表里存在这个hash的碰撞数据，那么在生成n步的hash串的过程中，必然能在反向表里发现命中。而当发现命中后，就可以通过原始碰撞数据算出整个碰撞链，从而找到该hash的对应碰撞数据。
从算法分析的角度来说，这是一个空间换时间和时间换空间同时存在的巧妙算法。利用反向表计算原始碰撞是用空间换时间，用hash串来压缩空间消耗是用时间换空间。
另一个细节是hash链的碰撞。当hash链在某个节点相同，后续链条必然完全相同。这大大降低了hash串的效率。因此彩虹表采取了一个变形。算法R在n步中每一步都各不相同(实际一般是将n当作参数)，这样使得hash碰撞只发生在一个点上。由于算法在每个步骤上各自不一，因而得名彩虹表。
KDF 密钥生成算法( KDF )是一类算法的统称，用于将一个密码/密钥变换成另一个(或多个)密码/密钥。在这个过程中，会提供很多额外特性。例如符合特定格式，防御暴力穷举攻击，保存后难于破解原始密码，等。
KDF的最知名场景，就是密码保存问题。用户的密码不应直接保存，这样在万一数据库泄漏时就会泄漏原始密码。而单纯hash会导致用户密码遭受彩虹表攻击。一般解决这个问题的方法是对密码加盐。但是盐是加在前面还是后面呢？以我个人的分析来看，似乎是没有区别的。即s+salt和salt+s都能保证安全。当然，更好的方法是用scrypt或bcrypt。他本身就有专门的函数保证密码安全保存，这可比加盐好使多了。
最佳实践 现在已经2018年了，我相信大部分读者都应该知道MD5和SHA1不安全的事了吧。这两者虽然还能完成摘要的用途，但是并没有安全保证了。如果你需要一个安全的hash算法，我推荐sha2。sha3目前并没有进入主流系统，而且执行速度还是略慢。
另外，如果有的选择的话，在sha2算法族里我推荐SHA-512/256或SHA-512/224。这两个算法有助于避免长度扩展攻击。
Encryption and Decryption 对称加密解密为一对函数，加密为E，解密为D。对任意数据d和密钥p，满足下面要求1和2。
加密为e=E(d, p)，解密为d=D(e, p)。 攻击者得知E，D，e的情况下，无法反推d和p。 在条件2的基础上，攻击者能得知d和对应e的情况下，无法反推p。（已知明文攻击） 在条件2的基础上，攻击者能构造d并得知对应e的情况下，无法反推p。（选择明文攻击） 对称加密有几种可能的变形情况，例如E和D为同样的函数，一次加密第二次解密。或者由生成算法构造出密钥p和解密密钥p&amp;rsquo;。在其中密钥p可以推算变换为解密密钥p&amp;rsquo;。但这其实仍然符合上面的描述。因为解密时可以使用d=D(e, p&#39;)，而p&#39;=G(p)，因此d=D(e, G(p))，即可认为d=D&#39;(e, p)。对于密钥p无法推算出解密密钥p&amp;rsquo;的情况，请参考下面的“非对称加密”。
DES/AES加密解密算法 加密算法中最有名的是DES和AES。关于这两个，我们不赘述。
密码模式 加解密算法一般都是以块模式运作的。即每个加密算法都有一个特定的长度，他只能处理这个长度的数据。块密码模式算法将基于某个特定的块算法，将其应用于流上。
最简单的用法是重复进行加密。取明文的前N字节加密，得到N字节密文。重复直到得到最后一块数据，数据的长度必然大于0小于N。对尾部的数据补足0。最后将所有密文联合起来，得到最终密文。这种模式叫做ECB模式。
ECB模式的好处是简单，但是ECB并不能防御内容替换攻击。攻击者可以通过某种方式获得一个数据的加密形式（选择明文）B&amp;rsquo;，然后将某个加密后的块B&amp;rsquo;替换原始块B。以此，虽然攻击者并不知道原始内容，但是可以替换其中的部分内容。
人们对ECB做了一点改进，使用上一个块的加密结果，对下一个块做干扰（具体使用XOR）。如此一来，对任意一个块的变更会导致后续块全部都无法解密。第一个块没有上一个块，也就没有加密结果。所以CBC需要一个初始向量IV来初始化干扰。而先加密上一个块的结果，再和当前数据XOR的算法，被称为CFB。CFB和CBC仅仅顺序上有区别，但是CFB可以用于流式加密，而CBC不行。因为CBC必须得到一个完整块，才能计算加密。而CFB预先算出mask，用XOR获得结果。
CFB再略变化一点，就可以构成OFB。OFB取的是XOR前的结果，因此加密序列并不受明文的影响，只受IV和key的影响。你可以想像，OFB是一个由IV和key已经决定好的，无限长的mask，逐步XOR到明文上。
但是CFB和OFB都有一些缺陷，例如明文和密文的异或对应性。在确定模式为CFB或OFB的前提下，对某些特定位置遍历所有可能空间，就能在不了解解密结果的前提下遍历所有明文可能性。这个问题被用于ss的主动探测上。
密码模式具体可以看这里。
Salsa20 Salsa20原来叫Chacha20，是一种经过特别设计的密码系统，在未经优化的CPU上拥有非常快的执行速度。
最佳实践 可能和大家想像的相反，一般没事不推荐直接使用加密函数本身，而是推荐使用AEAD算法。这里有一份2015年密码学最佳实践，按照推荐，是使用AES-GCM或Chacha20-Poly1305最好。这两种都是AEAD，具体下面有介绍。
如果一定要用加密算法，而非AEAD的话。推荐使用NaCl。它的加密算法默认选择是XSalsa20/20(Salsa20的一个变形)。
Message authentication code 消息验真，不同于摘要，要求的是拦截者无法伪造。其前提条件是发送者和验证者有一个共同的秘密p。本质上看，这个就是签署(sign)。但是一般我们讲sign都是指非对称的sign，MAC是对称式的。对称签署为两个函数，签署为S，校验为V。对任意数据d和密钥p。
对于签署获得的v=S(d, p)，可以用V(d, v, p)来检验d和v是否成对。 攻击者在得知S，V，v，d的情况下，无法反推p。 签署算法经常和摘要算法合用，即对数据d先使用摘要H得到摘要，再计算签署。即v=S(H(d), p)。验证时使用V(H(d), v, p)来验证。
主流消息验证算法往往会使用hash或加密算法来完成。</description>
    </item>
    
    <item>
      <title>similan船宿</title>
      <link>//blog.shell909090.org/blog/archives/2860/</link>
      <pubDate>Tue, 30 Jan 2018 17:06:17 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2860/</guid>
      <description>大致情况介绍 Similan archipelago，在Thailand，Phuket西北方一点的位置。要从Phuket坐一个多小时车，到一个叫做Khao Lak的地方。然后再坐船出海，走大概两三小时。地图上看，在Thailand的外海，离海岸50公里以上。（这应当是公海了吧）
潜店和船 我们是让朋友报的船，到了才知道，潜店是这家Khaolak Scuba Adventures，船是三天三夜的一艘Manta Queen 5。船宽5米长26米，推荐容纳20人，实际容纳22人。推荐船员5人，实际7人。推荐潜导5人，实际7人（含manager）。
这艘船，怎么说呢，家吉一看就觉得很坑爹，我觉得还好吧，毕竟这个价格。船舱里面是上下铺的床，都是软垫铺一层床单，加一个枕头和被子。床很小，大约60-80公分宽，2米长。趟下去顶天立地，横向只够翻身，高度不够坐起。船舱里有空调，但是只有晚上打开。平时只有头上的一个风扇。幸好电倒是24小时提供，足以充手机和相机。然而这一路上都没有信号。
这也不难理解。Similan离最近的陆地超过50km，而普通手机信号只能传播20km左右。再加上按照地球弧度，50km造成的高度差会高达200m左右（6700*(1-math.cos(50/20000.0*math.pi))*1000，不知道我有没有算错），信号塔不在山上的话，无线信号会直接被海水阻挡住。所以整个船宿过程是没有信号的。
我们说回船。一层前半部是8个船舱，中间是三个浴室兼厕所，后部是潜水装备间。二层前半部是船长室和4个船舱，后部是公共空间，一般在这里做brief或者吃饭。三层是Sun deck，带一个顶棚。我们经常在潜水间隔跑去Sun deck那里晒太阳。冬天Similan的水还是有点冷（28左右吧），晒晒太阳有助于蒸发水分补充热能减少寒冷。
这里要说说厕所。船上的厕所都是直排的，你的排泄物会直接冲到海里。所以如果有什么可能导致问题的东西（例如，纸巾），必须丢到垃圾桶里。有一次某个客人的纸巾丟到马桶里了，结果一个厕所就无法使用了。我们还只有三个厕所，每个都是厕所/浴室/面盆的合体（地方也不是一般的小）。一旦碰到早上起床，潜水前后。厕所前排长队是意料之中。所以那次厕所出问题后，基本每次高峰时刻，厕所前面都会排上一个小时左右的队。
航程 我们是晚上9点左右上船的，经过一个简短的brief就开船了。Manager是一个俄罗斯妹子，声音比较沙哑。晚上经过两个多小时的晃悠，我们到了Similan群岛附近的一个地方停泊。
睡过一晚上后，早上6点起床做brief，下水check dive，吃早饭。休息一小时顺便换个地方，再下一支，起来吃午饭再休息一小时。下午下一支，起来休息两小时再吃个晚饭。晚饭后大家聊聊天，再下一次夜潜，第一天结束。
第一天我碰到了剧烈的头痛，推测是在第二或第三潜的时候上浮过快导致。一旦产生气泡，要消解起来就要好几小时的排氮。所以夜潜的时候都在头痛，直到夜宵结束后才逐步减轻。所以大家要小心上浮速度问题，非但不要超过18m/min，最好控制在9m/min以内，甚至短距离内也不要放松。
这次潜水我全程使用高氧，一支大概要150THB，合30CNY。全程总计300CNY，我觉得挺便宜。原则上说，这让我全程舒服很多。至于头痛，只能说大概我控制的还不够好。
潜点我就不一一列举了，反正你们也没得选。大致来说，1.1左右Similan水温28左右，不需要湿衣。天气晴，偶尔有小雨。海浪一般。大部分时候是没什么感觉的，只有一次例外。当然，开船的时候晃动还是比较猛烈的。
第二天就是晕船。早上起来，船长泊在一个面向波浪，靠近岛礁的地方休息，等待等会潜水。（海浪也是有传递方向的，一般船长会选择泊在岛背面，减少波浪）结果海浪加岸边的波浪反弹把我晃晕了。早上一支结束后，难受的生不如死，就吃了一颗晕船药，放弃一支潜水，躺在船舱里睡觉。他们上来后，船长就开始换地方，我继续睡觉。等突然就有船员很开心的敲门，Dolphin！我大概也好的差不多了，跑到Sun deck那就开始观望海豚。一群海豚追逐着我们和隔壁一艘潜水船，不断盘旋和跳出水面，大概跟了半个多小时。船长还特意偏出部分航线来追海豚。可惜跑的太快了，忘记把相机拿出来，结果没照片，只能等同船的人发给我（如果他们还记得的话）。
至于晕船，我了解到一点。不是我不会晕，只是海浪还不够大。后来我就聪明了。凡是这种有晕船可能性的情况，统统先吃再说。
第三天去北边的Koh Bon那。我们早上第一支下去的时候，有个团友就看到了Manta，但是他没有叮叮。潜到一半的时候，潜导把我们集体敲起来看Manta。我们集体连气泡都不敢吐，就看着一只巨大的Manta从我们头顶飞过。旁边还有几条大鱼（当然，和Manta本身大小比起来是大大不如）。上水之后，把同船的人羡慕坏了，我们Team直接变成了Manta Team。不过第二支的时候，我们在一个山脊侧面遇到1-2节的对向流。潜导看我们踢的很辛苦，就斜切避开了。后面几个Team就直接顶流，最后Drift。所以他们上水的位置比较靠外，我们是在Bay里面上水的。他们上水的时候又看到了Manta。
好吧，这样也是蛮公平的。
另外就是回程路上，我们最后一支是在回程一半的地方，Wreck Dive。尼马Wreck我见多了，但是这么多鱼的我还是头一次见到。能见度不高，只有10左右。但是整个行程基本都是在鱼类瀑布里面游动。就看到无数鱼围着你转圈圈。上来之后我们在那里吐槽，为啥海洋中间能见度那么差？那TM都是鱼类的粪便。
上陆地后事情就乏善可陈了。在Phuket住了一晚，早上坐L家的车到了Samui，晚上在Samui吃了点东西（下船的时候正好大雨，等我们住下，雨停了）。再一个早上坐另一艘船到了Koh tao。
Koh Tao Koh Tao算得上是我和家吉的老地盘了，这次还是到Crystal。他们的宿舍修好了，就在学校隔壁。很近不说，还有空调，1000THB一天。
这次去Crystal，是考Deep Dive。这次搞明白了一个问题。在AOW的时候，我们不是有五个专长么？其实在AOW的时候，我们并不是修完了5个专长，而是每个专长只上了一节课。所以AOW修完，我们是没有专长证的。但是在AOW时附修的EAN，是专门的两支，所以有专门的证。AOW的这五节课只给了我们两个好处：
部分的专长能力。例如深潜，AOW必修课，给我们30米深度许可。 在考对应专长的时候，能少上一次课。 所以，这次的深潜专长，经过三次大深度潜水（至少一次30米以上），和一次额外辅助减压（抱气瓶），许可我潜到40米深度。但是不得不吐槽一下，在仔细查过之后，我发现这个证并不是特别有用。因为：
很多保险并不支持40米深度。例如美亚，要求你在证件许可下，30米深度内活动。所以30米以下深度潜水是无保险的（而且可能会连累你之后的潜水全都没有保险）。 40米深度并不是谁都能去的。如果你的潜导，全组潜伴并不是都有这个证，你就下不去。 EAN下40米深度的配套很不友好。EAN32的最大深度是32-33米，要下40米深度，需要用EAN28。但是EAN的标准是32或36（左右），很多地方并没有28，例如Crystal。这导致这种大深度潜水反而必须使用空气，其实非常消耗No Dec。老潜水员知道，大部分高强度潜水的时候，No Dec才是瓶颈。 30-40米深度可见生物更少。这个深度生物体积更大，出现几率变少，基本都是博人品的重复潜水。 所以，如果考专长的话。你们可以考虑一下Deep Dive是不是值得考。以下是我觉得还不错的几个证，有机会可能会考：
Wreck。绑线进去的那种，汗。要求15以上，AOW。 Sidemount。15岁以上，OW。 Dry Suit。10岁以上，OW。这个在潜冷水的时候是必需品。 Rebreather。18岁以上，OW，EAN，最低25潜。这个要求挺复杂，但是主证到不用AOW（实话说EAN+25logs其实是超过AOW的）。CCR在大深度还是比较管用的，而且下去不会有气泡惊到鱼群。 其中，Sidemount，Drysuit，Rebreather都是需要考虑是不是能在潜店租到装备的。也欢迎考过上述几个证的朋友给予意见，是不是值得。起码EAN是非常值得的一个证。
另外两个非专长的课，我有计划去上的。
Rescue。要先考出EFR来。但是我挺不喜欢中红会。 GUE Fundamentals。俗称馒头课。从我看到的数据来说，PG就可以上。 最后说一下这次考证的几个细节。
Koh tao的水比较冷，而且能见度差。我们直接上了Wetsuit（之前都是泳装）。估重量的时候，都很乐观的加了1kg。结果一下水好冷，一放气发现轻了。抬头一看，连带家吉和教练，三只鸭子在扑腾。干脆一咬牙，吸气翻转，鸭式下沉。总算我们三个都有点底子，顺利完成一支。我从没一支的五米三分钟，做的如此艰难。因此告诫大家，在不明水域的第一支，重量加多1kg，不开玩笑。 Deep Dive要在水下算题，来检查氮醉情况。能见度不是不好么？教练比了一下，我重复比了一下确认，是这个题么？然后教练点点头就走了。我一脸懵逼。教练别走啊，你去哪啊，我还没做题呢。。。 同样是能见度问题。上水面的时候教练看了一眼船，靠，指南针方向反了。我看了一眼，靠。家吉看了一眼，还好啊。然后游到一半，他游偏了。我们指了正确的船之后，他也靠。多远我不知道，反正那天我的手表上显示，我在水面休息了13分钟。在冰冷的水里热如狗，在平缓的运动后喘如牛。。。 还是能见度。我们五米三分钟上来不是要抱着瓶子嘬五分钟么？教练给改成上到水面后重新下去嘬五分钟。因为水里会找不到瓶子。而且他用的二级头里有水，妈的我在混汤里嘬的那叫一个艰难。家吉还一脸茫然看着我，你有什么问题？ 总结 船宿还是很好玩的，下次可以计划再去。不过要找个好点的船舱，毕竟是去渡假的，不是去坑爹的。而且要全程吃晕船药，不要仗着当时没事就掉以轻心，谁知道下一刻船长会停哪。。。</description>
    </item>
    
    <item>
      <title>在云存储上叠加加密文件系统</title>
      <link>//blog.shell909090.org/blog/archives/2859/</link>
      <pubDate>Sun, 17 Dec 2017 11:29:29 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2859/</guid>
      <description>目标很简单。云存储上很多文件都挺私人的，直接放着很吓人。虽说云存储采用各种方法来保证你的安全，但是世界上没有绝对的安全。万一密码泄漏，或者更糟糕，云存储泄漏。此时你的各种文件就在网络上裸奔了。
最简单的解决方法是什么？在底层存储上套一层加密呗。不过由于是云存储，所以基于块设备的加密方案不能用，例如LUKS。否则你同步到云上的就是一个超级巨大的块文件，然后每次修改，云存储客户端都要找到差别上传。这太蛋疼了。正解是每个文件分别加密上传。但即便如此，对于超大文件进行加密后依然会影响上传效率，请提前考虑一下这个问题。
同时又要注意，云存储用的加密文件系统和普通的加密文件系统还有点差别。很多加密文件系统的daemon会认为自己是唯一一个会访问加密内容的进程，而云存储可能随时接收来自远程的修改。所以这会造成一些问题。
备选方案 我对比了四种方案，EncFS，CryFS，GoCryptFS，eCryptFS。对比的方法是用这四种分别建立一个加密目录，然后用不同的方法做写入测试，看他的各种参数。顺便说一句，如果你要看的话，其实看这份表格就好。我只是在自己的机器上复现了一下，顺便了解一下各家特点。
测试语句：
time dd if=/dev/zero of=test bs=1048576 count=1024 time dd if=/dev/zero of=test bs=1024 count=1048576 time tar xf linux-4.13.12.tar.xz 其中，在裸盘上直接解压内核源码耗时7.568s，空间使用870M。
数据对比 +---------+-------+-----+-------+-----+-------+-----+--------------+ | |time1 |size1|time2 |size2|time3 |size3|comment | +---------+-------+-----+-------+-----+-------+-----+--------------+ |EncFS |13.210s|1.1G |39.039s|1.1G |26.496s|894M | | +---------+-------+-----+-------+-----+-------+-----+--------------+ |CryFS |9.327s |1.1G |21.230s|1.1G |42.918s|2.5G |删除耗时2.804s| +---------+-------+-----+-------+-----+-------+-----+--------------+ |GoCryptFS|3.515s |1.1G |28.180s|1.1G |19.874s|918M | | +---------+-------+-----+-------+-----+-------+-----+--------------+ |eCryptFS |3.132s |1.1G |10.218s|1.1G |9.448s |1.4G | | +---------+-------+-----+-------+-----+-------+-----+--------------+ 解读 首先说怎么解读。time1是连续写入性能，time2是离散写入性能，time3是小文件写入性能，size3是大量小文件膨胀系统。size1和size2没啥用。
下面先看性能。从性能上看，最优秀的是eCryptFS。这是理所当然，因为这是唯一一个内核态而且和内核整合的系统。GoCryptFS次之。EncFS要慢上好多。至于CryFS，一开始写小文件就原型毕露了。何况这是唯一一个删除大文件时间超过1s的，达到2.8s。你看我其他系统测试里都没写。
然后是膨胀率。EncFS膨胀2.75%，CryFS膨胀近三倍，GoCryptFS膨胀5.52%，eCryptFS膨胀65%。相比起来，EncFS膨胀率最小，GoCryptFS次之，CryFS最糟糕。
安全性 下面是同一个人出的三份审计报告：
encfs的审计报告 gocryptfs的审计报告 ecryptfs的审计报告 根据报告可以得到这么几个意见。</description>
    </item>
    
    <item>
      <title>京都游记</title>
      <link>//blog.shell909090.org/blog/archives/2858/</link>
      <pubDate>Wed, 22 Nov 2017 14:59:15 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2858/</guid>
      <description>细节不说太多了，京都毕竟是一个挺现代化的城市了，又不是什么荒郊野外。我只说几个特别的建议吧。
京都公交一日卡非常便宜，只要500JPY。如果单独坐车，一次230JPY，所以三次回本。但是公交日卡和铁路日卡是分开的，一起买1200JPY。公交日卡地铁站就有卖，铁路日卡铁路那里没得卖，你最好趁早在京都站搞定。公交日卡不需要写日期，头次用会塞到机器里打印一个日期，第二次起直接给司机看就行。啊，对了，这些卡都有使用范围限制，具体查一下。
大部分公交都是后门上前门下，下车付费，不设找零(但是1000JPY以下有自动兑换机)。部分车上车的地方有个刷卡机，那就可以分段计费了。但除非是照顾对象，请不要坐优先席。
强烈推荐Hot Pepper这个应用。可以指定一个区域，搜索平均费用在什么区间的一个什么类型的饭店。我用这个找到了几个不错的店。不是说特别好吃，京都的店都不差，就算街上随便碰也都不错。而是说没有这个应用我找不到店，或者店不合适。例如仁和寺门口，有个挺便宜的小店，叫篝・喫茶，旁边还有个咖喱店。但是这要走两步。如果你没看到，直接进了门口的佐近，那就走的远了。我相信东西会好吃很多，可是价钱也会贵一些。
机场的商品种类不多，而且价格不一定便宜。有的便宜了，有的反而贵。最简单的办法是在市内的免税店把东西都买好，过机场的时候把免税单一交就行。
不要担心语言问题。只要有钱，你不说话都行。不过想省钱，还是把日语学学好。</description>
    </item>
    
    <item>
      <title>Boracay潜水攻略</title>
      <link>//blog.shell909090.org/blog/archives/2857/</link>
      <pubDate>Mon, 06 Nov 2017 18:43:10 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2857/</guid>
      <description>大致情况介绍 Boracay，菲律宾长滩岛。关于菲律宾的基础信息不介绍了，这篇里面都有。我们就说一点当地的东西吧。
我们主要在西边活动，东边没怎么去，据说不太平。Boracay西边有个贼长无比的海滩，一条繁华的海滩商业街就沿着那里展开。初此外还有一条主路。基本你就沿着这两条路走，一定能找到你要去的地方。海滩商业街上有很多店，基本都是餐饮，按摩，小商品，潜水，辫子，纹身。我们所说的大部分店，都在海滩边上。如果不在，我会特别指出。
潜店 Boracay的潜店一大堆，我随便走走都能看到10多家。但是在padi上注册过的并不多。我这里看到的idc有Calypso Diving School International和Sea World Dive Center。从padi上看，watercolors也是idc。但是他的注册位置和实际位置不大一样。其他的都不是idc，或者没有在padi上注册过。
Sea World我路过去看过。当时打着中文广告，我还以为是中国人开的，结果是韩国人开的。广告很NB，岛上唯一一家五星IDC。岛上究竟几家上面我都列出来了。不过不说别的，他们的位置和店面都很不错。而且店员会中文，这点对很多人很有用。
Boracay的价格基本都稳定下来了，FD标价都在1800PHP左右，偶尔能见到1900，比较贵。我选的一家是朋友推荐的，老板是韩国人（很帅的欧巴哦）。标价都是1800，去了才发现地方略偏，但是有好处的。除了两潜外，潜导都是1对1服务。不过最后一天我才发现，两个潜导一个SSI一个CMAS。幸好我有一支和老板一起下水了，所以让老板给我签个PADI的，好规避review问题。
最后说一点，DSD。岛上的DSD才是最大的潜种，而不像有些地方，基本都是FD。这很好理解，Boracay是一个休闲旅游岛，而不是一个专门潜水的岛。在我选的这家店里，有次我看到十多个人在那里做DSD培训(店里有人会中文)，出去的时候还要加十个左右的instructor(有负责照相的)。30个人浩浩荡荡两条船跑出去。
做DSD的(虽然我估计DSD不大可能来我的blog，会来的不是程序员就是老潜水员)请千万注意几个问题。DSD最主要的安全问题是什么？潜导不足潜导违规。只要配够instructor按规定操作，DSD几乎没有风险。说几乎是因为，就算平地走路都可能被雷劈死，跳到海里去潜水不会更加安全的。因此体验潜水一个强制要求是，instructor和潜水员比例不得超过1:2。
这两天闲聊的时候，我听到的范围里，所有潜店都坚持了这个比例配置。但是如果坚持这个比例，你就可以算出来，做DSD好像还没有FD赚啊(1:1的这种FD不谈)。所以很多DSD有一定的玩花样的成分。例如水下配个AOW下去给你照相，回头卖你相片。还有气不给打足，20多分钟就可以上来了。当然，万幸的是，好歹大家节操还比较足，不会出现耳压培训不做就踢下水，然后等你受不了升水的情况(三亚名产)。
潜点 Boracay通常流都不大，因为大部分情况下洋流都是东西向的，而岛是南北向的。因此在西面大部分时候都没有流，或者小流。在岛的最南和最北有大洋流，所以去的人很少。西面大部分时候都是南向北或者北向南的一节流。人类活动较多，水下能见度一般。
照片在这里。
Camia Wreck 11° 57.115&amp;rsquo; N, 121° 54.523&amp;rsquo; E
Max: 28.4, Avg: 19.5, Vis: 10+, Current: 1
海滩正对面的一个沉船，没啥好多说的。有几条非常大的鱼，品种搞不清楚。中间船舱有个地方能沉下去，然后穿过大约3-5米的封闭船舱(警告：这是潜水违规操作)，右转上升出舱。中间距离非常大，对脚法没有要求。这个点有种非常大的鱼，谁知道是什么？
Angol Point 11° 56.828&amp;rsquo; N, 121° 55.2&amp;rsquo; E
Max: 14.3, Avg: 7.9, Vis: 10+, Current: 0
海滩对面的浅点，非常容易。基本就在里面玩了一阵而已，没啥难度。照到了三个海兔排排坐。另外，下去之前我的reg的O-ring爆裂了。
Friday Rock 11° 58.083&amp;rsquo; N, 121° 54.263&amp;rsquo; E
Max: 17.4, Avg: 12.8, Vis: 10+, Current: 0</description>
    </item>
    
    <item>
      <title>golang安装和编译环境搭建</title>
      <link>//blog.shell909090.org/blog/archives/2856/</link>
      <pubDate>Wed, 01 Nov 2017 17:11:39 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2856/</guid>
      <description>我本来以为是个挺简单的问题，结果实践一下发现还是挺多人不明白的。所以我写一下。
安装 挺简单的。你在golang.org下载一个合适的安装包，回来之后找个地方解开——例如~/usr/share/go这个目录。
而后你需要调整两个变量，GOROOT和PATH。PATH是必须调整的，GOROOT原则上可以不管。当你使用了正确的go程序后，GOROOT会自动设定。但是我习惯先设定GOROOT，然后计算出PATH。像下面这样(注意环境变量里要用绝对路径，不要用~)。
export GOROOT=/home/user/usr/share/go export PATH=$GOROOT/bin:$PATH 一般我会将这个设定设在bashrc里，变成我私有的设定。这样不会对系统产生干扰。在经过这个设定后，你需要让所有bash载入这个设定。最快的是重启，不喜欢动静太大的可以source ~/.bashrc。载入完成后，你可以试试go version，看看是否生效，版本是否正确。
配置环境 golang的编译环境配置只需要配置一个变量，GOPATH。例如我将GOPATH设定到~/usr/，在bashrc中加入export GOPATH=/home/user/usr，那么源码路径就是~/usr/src。将来下载的所有包，都会根据这个位置自动计算路径。例如http2的包，名字叫做golang.org/x/net/http2，下载时的路径就会是~/usr/src/golang.org/x/net/http2。你可以用go get golang.org/x/net/http2来自动下载这个包。
如果你自己开了一个项目，那么你需要搞一个url，例如github。然后把你的项目放到对应路径——例如~/usr/src/github.com/username/project。然后在这个路径下做所有操作。最后你可以使用go build package编译它，非常容易。
install golang除了源码之外，还有很多的编译结果。例如go项目自己的源码在~/usr/share/go/src/下面，可执行文件在~/usr/share/go/bin/下面。而你和你下载的各种项目的编译结果就在~/usr/bin/下面——是不是觉得和linux的文件管理方式非常像？
所以上面的bashrc配置还需要做一点调整，以便让你除了能用go做编译外，还能直接使用go编译出来的项目。
export GOROOT=/home/user/usr/share/go/ export GOPATH=/home/user/usr/ export PATH=$GOROOT/bin:$GOPATH/bin:$PATH </description>
    </item>
    
    <item>
      <title>法国游记</title>
      <link>//blog.shell909090.org/blog/archives/2855/</link>
      <pubDate>Tue, 10 Oct 2017 00:04:27 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2855/</guid>
      <description>废话不多说了，讲点实在的吧。首先上照片。
常识 法国使用法语，通行欧元。对他们来说，英语是一种外语，学习难度和我们学日语差不多。旅游业有关的人，英语水平还是不错的。但是其他地方很可能碰到不会英语的人，尤其是列车上查票的小姐姐。大部分地区都能用信用卡，只有少数地方不行，例如地方集市上的小贩（因为他正职可能是个普通社员）。信用卡里Visa比较好用，Master就到处被歧视，至于JCB就不提了。目前EUR和CNY比例1:8左右，国内到处都能换，所以不要紧张。但是要注意，某些卡在非美元区会有额外手续费（例如招行的），法国当然不是美元区。手机供应商有好几家，我们用了一家德国的公司，漫游过来。根据某个法律，他们漫游是不收费的。（中国的运营商你们看看）电源插头是欧标，记得提前买。
衣 我们是10月去的，当时法国并不冷，和上海差不多。单长裤，上装长袖短袖都行。特别冷的地方需要加一件外套，不要太厚。当时猫说法国很冷，我就带上了贝加尔湖那套。从头到尾没用上，还在南法被热了个半死。
食 法国吃的很贵，因此要吃饱吃好是有点技巧的。
一般的法式餐饮，早餐是各种甜品和茶，午餐和晚餐是正餐，两道式或三道式的。两道是前菜加主菜，或者主菜加甜点，三道就是一起上。比比中国就弱爆了，随便上个餐馆都是两菜一汤呢。
价格各地不一样，三道式10-20欧不等。一般来说，巴黎比其他地方贵，景区比外面贵，好吃的店比不好吃的贵，米其林比上述都贵。如果时间不方便，或者没钱，法国街头并没有什么其他选择（是的，悲剧），不过还是有一些不得已的选项的。下面我们分三个方面细说。
超市 首先，我假定你比较穷。那么，超市将是你的大食堂。
我不是让你去买超市里做好的三明治，或者色拉。那个一份2-4EUR，根本吃不饱。再来一份就会变成6EUR，合CNY48。怎么想都太过分了吧。
你可以在超市里找香肠。能够直接吃的，2欧以下的香肠。我在法国各地的monoprix里，都找的到法兰克福肠，1.5EUR 6根，配上一条面包，能顶一顿饭。这不过是3EUR不到，可谓食肉动物最佳选择。有钱的还可以换2EUR 10根的更大包装。我还找到一种烟熏马鲛鱼，2EUR 200g，味道比较咸，配上面包更好。一般两人一顿饭就是一大条面包，加一包肠，加马鲛鱼，总计5EUR左右。算下来20CNY一人，可谓便宜到了头。
当然，我看不懂法国那堆复杂的香肠，法兰克福肠是经常吃的，比较保险。如果你比较有挑战精神，可以试试其他种类，有没有物美价廉的。我还看到加了大蒜的肠，类似哈尔滨肠那种。不过比较贵，4EUR。
超市里值得买的还有水。法国这里原则上是可以直接饮用自来水的。但是我们并不习惯，所以还是出来买水。一般超市放在外面的，都是500ml 2EUR的高价水。你往里找找，有一些饮料，柠檬或者橙子一类的。其中有很多味道比较淡，而价格又比较亲民。1EUR 1L左右。晚上买个两瓶，喝一晚，带一瓶，应该够用。不够就再找一次超市，应该不难。饮料分为有气的和没气的，要带的话建议没气比较好。
法国超市要注意两个问题，一个是周日多数不开。法国周日是家庭日，所以很多地方不开门。景点是否开放也要预先查一下。另一个就是，由于周日不开，因此周五六，周一晚上。尤其是周六晚上，人会非常多。要提前屯货，同时避开高峰。
小吃 法国街头基本没什么小吃，除了满地的kebab。我吃到的版本是一个大饼烤一下，里面塞上切下来的土耳其烤肉，再加点洋葱什么的。一般这么一个2EUR（南法物价）。加上一小盒薯条和一罐饮料3EUR（还是3EUR和4EUR？我记不清了）。反正不贵的情况下，也能把一顿饭对付过去。不过烤肉又油又咸，我家猫不很喜欢吃。
另一种则是可丽饼，也就是法国版本的山东杂粮煎饼，里面可以放甜的或咸的。随着放的东西不一样价格也不大一样，原味的1EUR，放点果酱就要2.5EUR的样子。据说法国人早上只吃甜的，而日间只吃咸的。这两种可丽饼叫法还不大一样的样子。不过可丽饼一般一个吃不饱，我们俩要吃三个。加各种酱料的话，搞不好一顿要超过8EUR，还是有点小贵的。
另外我们在小镇(Annecy)上买到过烤鸡腿，3EUR，味道很不错。在石头城本地集市上买到过烤肠，2.5EUR，西红柿汉堡，2.5EUR，鸡大腿肉，3.5EUR。不算便宜，但是风味很好，也算是物美价尚可的选择。不过Annecy的那个店中午关门了（？！！）。是的，吃饭时间呢，关门了。集市每周就开一早上。这些都是隐藏道具，碰到就碰到了，没碰到，就这样了。指望不住。
餐馆 在进餐馆之前，请确认一下您的钱包。没有一人20EUR的打算是不要坐进去的。大多数餐馆的两道或三道式也不算很多，吃菜是吃不饱的。虽说一般餐馆都会无限（我还没测试出限量多大，难道真要吃八个？）供应面包，但如果您进餐馆就为了吃面包吃个粗饱，为什么不直接选用超市呢？
我在法国吃过很多不同的东西。最贵的是米其林一星，两个人吃了70EUR（没留神，矿泉水被坑了10EUR）。照片在这里。 贵归贵，菜非常赞，服务也很好，餐馆和餐具都很漂亮，感觉非常超值。老婆点了一道法国蜗牛。我的主菜是一道蔬菜烧三文鱼什么的，不知道怎么搞的，三文鱼刚刚好熟透，却又非常嫩。做过的人应该都知道难度。强烈建议去吃一趟。不要点水，两个人60EUR就行了。500CNY级别的米其林一星啊。餐馆的名字是这家Benoit Paris
然后是法国附近的黑暗料理——fondue。我总共吃了两回。第一回想吃的是奶酪锅，但是点成了肉锅。把牛肉，鸡肉，鸭肉放在油里面炸。20EUR。实话说不是特别喜欢吃。第二回就更糟了，确实是奶酪锅，15EUR，用各种食材沾奶酪吃。但是食材本身都太咸，搞的我满口都是咸腥味。而且奶酪的味道比较重，吃不惯。建议大家先在本地试试改良版fondue。如果改良版都不是很有爱，还是不要去原版那里冒险了。
比较特殊的餐馆是这家Mirama。中文是美丽华酒家。这是一家中国菜。我家猫中国胃嘛，结果我们就去吃了两次，其实味道放在中国一般。正宗的广式厨房，没有改良的粤菜。牛腩面上面真是一大堆牛肉，对得起9.6EUR的价格。烤鸭（其实应该是烧鸭，这个和北京烤鸭不是一回事）也不错。放在中国大概是一家还算可以的街边小餐馆。当然，在法国也是，只是价格从60CNY变成了40EUR。
实话说，我一直觉得中国的吃的挺好的，便宜好吃。虽然顶级的料理，玩装逼和意境的那些还不如国际同行，但是各种日常餐饮实实在在能吊打大部分地区。你在欧洲能吃四菜一汤盘盘见肉么？你能天天吃四菜一汤顿顿不重翻一个月花样么？你能靠上班工资天天吃四菜一汤还有人管送么？上海一般小店里面，也就是150-200两个人，一天也就是300-350，老顾客还有折扣，一个人150上下，吃到翻过来。靠工资不是吃不起。法国，我按南法物价算好了，15EUR一顿，算上甜品还不到四道菜，普通人也勉强吃的起。可盘盘见肉吃到翻过来我就见了鬼了。我在法国感受最深的不是好吃，而是吃不饱。像日本菜似的，嘴一张一合，吃的没了，好像还缺点啥。严格说起来，应该不是东西不好吃，而是工资不够高，简称穷。
至于翻一个月花样就更呵呵了。你看看他们菜单上几个菜。按四道执行，差不多一天一家餐馆就没花样了，周围30家餐馆，还得不重样，鬼知道要跑多远。至于送，更是没得说。Thomas老婆没事就在和我感慨，你们厂赶紧来法国营业吧，我太怀念打个电话就有东西吃的日子了。我说可以啊，按照法国物价，你这地方10EUR肯送的都是铁哥们——成本都不够。上下山都得开汽车，小摩托不知道要开到猴年马月。而且汽车一趟来回一小时，一天最多送8趟。偏偏法国低保给力，不干活都有900EUR，一天开40EUR都不知道有没有人给你干，而且绝对工作不到8小时。一单10EUR是不是成本价？这地方要真执行，一单起码30EUR以上，运费比餐费还贵。她说50EUR肯来就不错了。他们水工，上门费200EUR，啥都不干。我说上海修电脑，上门费就100，还是人民的币。
住 法国酒店比上海贵的多，我们在Fontaine Saint-Michel旁边，订了一个超级小的酒店，800多一天。上海随便一个地方找个三星，要求不高的，也就400撑死了吧。
注意，法国还有个选择，Airbnb。Airbnb并没有便宜很多，但是对于自定行程来说，会方便一些。因为法国的酒店里一般不提供热水壶。是的，你没看错，我也没写错。Thomas家不算，我住了四个酒店。只有一个酒店提供了热水壶。但于此同时还提供了洗衣机洗碗机和厨房，所以这应该算Airbnb的待遇。如果你订Airbnb，可以使用很多设备，例如厨房和洗衣机。有厨房你就能用外面买的材料简单做一顿，这对中国胃来说太重要了。至于洗衣机，我就不说了。
行 法国的铁路很发达，巴黎地铁四通八达，居然地铁票能在Gare de Lyon换车去Fontainebleau这么个鬼地方。这就像上海地铁能把你从滴水湖送到昆山是一个概念。不过相对的，车票也很贵。一张票2EUR不到。你可以在售票机上直接买10张ticket+，15EUR。便宜一些。有朋友吐槽，为什么售票机上有8张和9张的选项呢？钱更贵票更少。我只能说，这是一个feature。
法国地铁支线众多，上车前一定要看明白这辆车是去哪的。例如同样是RER，分为RER A/B/C/D，这是不同线路。同一个RER A，还有分叉。最简单的办法是找站台上的一个大板，然后看你要去的站前面的那个灯有没有亮。亮了就可以放心上，没有就要再等等。
巴黎和里昂都有日票，里昂的日票是5EUR有效24小时。巴黎是按照zone算的，我们5zone的要13EUR(具体数字不是很确定，反正十几)。算起来也很贵。但是到Fontainebleau单程也没便宜几块。合理使用日票和通票能够有效减少你的车票费用。上海地铁也有类似的日票，单日18，只是很少有人知道。这里多扯一句日票的设计，一般都是遵循4次左右平衡。里昂是3次，上海是4.5次。如果你乘地铁次数会远高于这个值，可以考虑使用日票。而频繁乘坐地铁的，一般都是短距离场景。
法国的火车也很不错，火车分为TGV（高铁）和普通列车。TGV速度250公里/小时，和中国高铁是一个级别的东西，分分钟吊打印度“高铁”。但是法国地方比中国小，所以从南法回巴黎，穿越半个国家，只用了三个小时，还带换车。坐火车要注意电子票和纸质票。法铁上车时不剪票，上车后查票。票分为固定时间和可变时间的，车次分为固定座位和随便坐的。如果你是固定时间的，那么啥都不用做。电子票一般都是固定时间的。但如果是可变时间的，需要在进站前，在黄色的机器那里打一下卡。靠左插进去，咔咔一声，就能看到时间，这相当于剪票了。如果不打印时间的话，你这张票今天能坐，明天又坐一遍。如果查票的小姐姐发现这种情况，理论上会罚款20欧。我们就碰到了。不过运气很好，两个小姐姐认为我们是外国人第一次来，不知道规矩。所以直接用笔给我们写了时间，相当于补剪一下，没罚款。所以后来我们就所有票都咔咔一下。结果用巴黎通票去Fontainebleau的时候又出了问题。那个是小型票，肯定没法打。查票的小姐姐说，你们这张票没写时间哎。然后又用笔给我们补了时间。
感觉法国的车票管理比上海的难搞懂的多，也许是不大习惯。
巴黎 我们刚到法国，在机场买了博物馆通票。40EUR多点吧，4天，一大堆美术馆博物馆，非常合算。注意到手之后在上面写一下时间。然后坐RER地铁到我们住的地方。七绕八绕，从巴黎圣母院门口冒了出来。当时还不认得巴黎圣母院，也不知道自己在哪里。跟着导航走到了地方。最后一天转回去的时候发现，我们初次上来的地方就在法国测地原点旁边。
巴黎我们刷了这么几个地方：
Fontaine Saint-Michel 圣米歇尔喷泉 Musée du Louvre 卢浮宫 Cathédrale Notre-Dame de Paris 巴黎圣母院 Sainte Chapelle 巴黎圣礼拜教堂 Conciergerie 巴黎古监狱 Le Centre Pompidou 蓬皮杜中心 Église Saint-Merri Saint Merri Church Tour Eiffel 埃菲尔铁塔 Château de Versailles 凡尔赛宫 Panthéon 先贤祠 Musée d&amp;rsquo;Orsay 奥赛博物馆 Musée de l&amp;rsquo;Orangerie 橘园美术馆 Arc de Triomphe 凯旋门 Square Louise Michel 路易丝米歇尔广场 Sacré-Cœur 圣心堂 Le mur des je t&amp;rsquo;aime 爱墙 Moulin Rouge 红磨坊 Château de Fontainebleau 枫丹白露宫 在Conciergerie，我还被老婆带错了路，跑到了旁边的原顶建筑。人家问我们来干嘛，我们说观光。人家很奇怪的说，这是法院啊（Greffe du Tribunal de commerce de Paris 巴黎商业法院登记处）。好么，生平头一次给老婆送进法院。从法院出来，又进了监狱——Conciergerie。</description>
    </item>
    
    <item>
      <title>使用Debian作为Router</title>
      <link>//blog.shell909090.org/blog/archives/2854/</link>
      <pubDate>Mon, 28 Aug 2017 15:34:08 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2854/</guid>
      <description>设备是一台D525的多头主机，2G内存，4G电子盘，有4个网口，两个USB口，一个Serial口（很特殊吧），还有一个VGA口。原本预装是RouterOS的。最近给RouterOS整烦了，所以把路由器洗了换成Debian了。由于不想干掉原本的电子盘，所以新买了一块msata的电子盘。JD上大概80，自己买就行。
目标 我希望整个路由能够为家里的网络系统提供良好的基础。因此，我确立了一系列目标：
全家能够上网，并充分利用带宽。 能够映射外网地址到内网，提供一定的服务（例如通过https管理内部，或者做bt）。 能够分离两个区域，一个可信区域，一个只能上外网（guest网络环境）。 能够为家里的所有用户，包括guest，提供有限目标翻墙，例如只翻google。该机制不会使访问国内网络受影响，例如变慢。可以限制部分IP不翻，例如bt。 下面是一些可选目标。
能够直接通过机器名解析出DHCP地址。这样就无需为每个需要被访问的机器总是分配固定IP。 对guest网络提供配额限制。 对总体能做一定的QoS。 基础设施层面的防投毒/欺骗/攻击。 支持IPv6，家里每个设备至少一个IPv6地址，且外网可访问。 架构 首先是分离设计。用两个网口分别提供两个网段，作为可信区域和guest网络用。然后提供一个VPN，允许guest区域进入可信区域。对于可管理交换机而言，其实也可以用vlan技术。一个网口打到交换机上，然后在交换机上设定哪些是guest口。我这里没有可管理交换机，而桌面交换机有多。所以直接出两个口就好。核心路由是四口的，一个外网，两个内网，还有富裕。
以下是主要目标的工程清单：
多头主机，上防火墙，建立Serial和ssh双管理机制。 内网dnsmasq，外网NAT。最后测速。 DDNS，外网port mapping。 安装openvpn做vpn-in。 做vpn out，调整路由表。 多网段，内部互通限制。 安装 Debian的安装没什么好多说的，我直接用VGA安装的。stretch，目前stable版，没什么特殊的。等进入系统了，直接改grub配置，改成serial能够控制。这样将来路由器出问题的时候只要用Console线接上，就能登录系统排查问题了。具体方法搜一下就行，我是用这个页面，按照里面改了以下三个参数。
GRUB_CMDLINE_LINUX=&amp;quot;console=tty0 console=ttyS0,115200n8 quiet&amp;quot; GRUB_TERMINAL=serial GRUB_SERIAL_COMMAND=&amp;quot;serial --speed=115200 --unit=0 --word=8 --parity=no --stop=1&amp;quot; 然后再用putty访问就行，指令是putty -serial -sercfg 115200,8,n,1,N。注意速率要和设定一致。
安装过程中我注意到有一点坑。在上海电信这种环境，Router要上网需要PPPoE拨号。我找到了Debian官方的说明页面，里面提到了三个包，ppp，pppoe，pppoeconf。但是默认光盘里没有。说是有的，甚至还有篇文档叫做通过 PPP over Ethernet (PPPPoE) 来安装 Debian GNU/Linux。但是我按照Guide，修改了光盘的boot line，自动搜索DSL拨号配置的时候，直接失败了。幸好我早做了准备，把这几个包提前下载下来了，然后手工安装。但是比较坑的是，实现pppoe还需要一个额外的包，libpcap0.8。这个包wiki里没说，所以我就没下。但是想下的时候，原有Router又洗掉了。最后我是用手机下载传上去的，同样情况的朋友请自行注意。
初始化 进入系统后没啥复杂的，先设定PPPoE拨号，照着官方的说明页面就行。拨号成功后，首先先更新软件并重启。因为原本的系统和最新补丁会有一点时间的差异，而安装时我们没有网，所以没有安装更新补丁。
补丁升级完成并重启后，先下载iptables-persistent这个包。这个包会把你的防火墙配置固化下来并自动加载。没有这个，防火墙功能运作是缺失的。如果在无持久化的情况下安装了服务，你又需要重启路由器，就要先断开外网才能安全重启了。否则防火墙规则是空的，服务外网可访问。而且进系统后又得重新配置防火墙。所以比较简单的方法就是先装持久化包。至于防火墙，我的初始化配置是这样的。
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT -A INPUT -i lo -j ACCEPT -A INPUT -i ppp0 -j DROP -A INPUT -p tcp -m tcp --dport 22 -j ACCEPT 第一条允许已经建立好的连接访问，第二条允许ping，第三条不限制本地访问，第四条禁止外网访问，第五条打开OpenSSH端口，最后别忘了INPUT默认DROP。因此第二个包就是安装OpenSSH。安装完了这个包，再配置本地网口。接下去就可以把路由器复位，通过远程来控制，而不是serial了。</description>
    </item>
    
    <item>
      <title>riot.im简介</title>
      <link>//blog.shell909090.org/blog/archives/2853/</link>
      <pubDate>Mon, 24 Jul 2017 14:38:01 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2853/</guid>
      <description>riot是一个开源的去中心化聊天工具，提供了一个聊天的底线解决方案。
分布式 和大部分IM工具不同，riot的用户，是属于某个特定的服务器的。我们可以对比一下Email和QQ。Email里，你可以选用不同邮箱，不同邮箱之间是可以互相发送消息的。而QQ里，你的帐号必然只能在腾讯的体系里。前者，我们认为是一个分布的系统。用户分布在多个组织里，依靠协议互相通讯。后者，我们认为是集中的，供应商掌控一切。也许你会反驳说，QQ也分布在全国多个节点。这是对的，但是这是腾讯自己的分布，而不是用户的分布。用户对这事是没有感知的，也无权选择。
riot是一个用户分布式的IM系统。你需要找一个服务商，然后向他注册。就像你找一个邮箱供应商并注册一样。随后你会获得一个用户名和密码。配置用户名和密码，你就可以在各种地方登录。Windows，Mac，Linux，Android，iOS，web，我至少知道这几种客户端。登录之后，你可以找任何人聊天，哪怕他和你不在一个服务器。服务商会连接对方的服务器，并完成通话准备。如果你懒得找，riot.im官方也提供注册。你可以把他视为最大的供应商。
和印象相反，用户分布式的系统，听上去很高大上，其实是比集中式难用的。因为分布式系统依靠的是协议，而协议是很难更新的。只有大多数人跟进，一个特性才有用。就像反垃圾邮件，已经好几年了，推进仍然有限。而集中式体系则不然。只要供应商想，他们就可以不停升级协议。你现在还能用12年版的QQ协议么？不行了对吧。这样就使得一个新特性可以在很短时间内铺开。
那么分布式的好处在哪里？
分布式的用户体系，提供了一种可能性。即使在一个供应商出现种种问题的情况下，整个通讯系统依然不崩溃。你甚至可以换一家供应商，然后重新联系你原来的好友——只要你有好友的通讯录备份。这使得保持协议的同时更换供应商成为了可能——一种永远不可能在腾讯体系内实现的可能。
也许你会觉得，供应商会出什么问题？嘛，我们依然以腾讯为例。在中国，腾讯占有了很大的IM和游戏市场份额。作为腾讯的对手，你要警惕的不仅是企鹅帝国的挤压，还有，你要用什么IM作为办公工具。如果您依然认为QQ是个好选择，我只能祝愿您好运。当然，也许您会觉得，我们可以用钉钉。嘛，我也祝愿您好运。这是一个信仰问题，您开心就好。
riot的特性在此时就非常有用。你可以搭建一个自己的聊天服务器，自行维护。自然，此时就没有坑爹的国际线路问题，也没有企鹅运营问题。甚至，如果上下游的公司也选用了支持riot协议的体系，你们还能直接互相聊天。当然，在中国微信和QQ包打天下的格局下，这种情况基本是不大可能了。
类似的场景还有，如果你觉得企鹅家会在聊天记录里搞事。担心聊天记录泄密。严重洁癖甚至都不相信telegram。那么riot的纯开源自维护体系应该能让你感到满意。但是一切的一切，最关键的一点在于。只有你对聊天的供应商有选择权，供应商才会真正“听”你的话。在一个无法离开的体系里，只会变成：用户你好，我是你爸爸。
当然，使用riot要注意他的几个缺点。首先，riot的各个客户端维护的比较差。难看，功能有限，而且不稳定，修复时间长。其次，riot和现有的主流用户完全隔离，这对销售来说非常致命。
安全特性 riot的聊天是非加密的，对此你不应该感到意外。riot的安全是额外提供的，你必须手动打开。riot的加密系统非常有趣，不是基于用户的，而是基于设备。这种加密被称为E2E加密，意思是端到端。
手机在选项里拉到底，可以看到把对话转换为加密对话的选项。需要注意的是，打开E2E加密后，这个对话是不能转回去的。你可以开个新对话，把所有人都加进去。但是这个已经存在的对话本身是不能转换回去的。另外就是，由于E2E加密需要端点支持，所有web原则上是很难做出E2E的。因此web版本上这个功能基本是废的。
当你用一个新的终端登录，例如一台新手机连入的时候。所有人会看到你这个新终端，并选择是否信任你。如果他们信任你，那么你可以看到他们说的话，这个都能理解。如果他们不认可你呢？默认情况下也能看到。这是因为系统里有个选项，默认发消息给所有未信任终端。关闭之后，那些你不认可的人就看不到你讲的话了。当然，在进去的同时，你也会看到里面所有的端，并选择是否信任。
当你更换了一个客户端，例如换了一台手机。默认情况下，视同一个新手机登录，所有人都要重新信任，而且所有之前讲的话都会无法浏览。注意，哪怕在同一个手机上，当登出再登录时，也视同一个新客户端。所有人都要重新信任，之前所有会话无法浏览。如果要避免这个问题，你需要在登出前先导出自己的E2E密钥，登录后导入。
这里就要说一下用法问题了。首先，请关闭“发送消息给所有未信任终端”的选项。新用户无法查看之前的消息，但是能查看新的？这个简直了。其次，一开启E2E，就要导出密钥并妥善备份。否则每次都要重新认证终端，对其他人很不友好，而且不安全。第三，不要随便认证终端，一定要确保对方是本人。你可以问一些只有你们知道的问题，或者干脆看着他互相认证也行。
E2E加密的基本原理是，每个端携带一个密钥，进入聊天时把自己公钥发送出去。如果说话的人信任你这个终端，那么他就会认可你的公钥。客户端就会使用你的公钥加密发出去的信息，你在接受到之后就可以用自己的私钥解密。如果他不用你的公钥加密发出去的消息，那么你就看不到，或者说看不懂。
透过这个机制，我们可以理解上面如此设定的机理。当初次进入聊天时，虽然你可以从服务器端同步所有历史消息。然而由于这些消息都没有用你的key加密过，所以你看不懂。当对方开始用你的key加密消息了，你就可以看懂消息了。当登出时，未保存的E2E key会被丢弃。
E2E对抗的风险，就是服务器不可靠，例如被攻陷。或者用户不可靠，例如密码泄露。即便在服务器被攻陷，或者某个用户密码的情况下。E2E机制依然能让攻击者无法看到加密的消息（注意，这里前提就是你关闭了“发送消息给所有未信任终端”）。因为加解密都在客户端做，所有服务器端看到的消息本身就是一团乱码。攻击者拿到密码后，伪装客户终端进来。然而这个终端由于没有信任，因此既看不到历史记录，也看不到新消息。能够对付E2E机制的，只有导出的密钥备份丢失而且被破解，或者直接拿到终端。或者更干脆，聊天中某个人变节，把记录全部发了出去。</description>
    </item>
    
    <item>
      <title>Puerro Galera游记</title>
      <link>//blog.shell909090.org/blog/archives/2852/</link>
      <pubDate>Wed, 07 Jun 2017 14:09:42 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2852/</guid>
      <description>基本情况介绍 菲律宾通行货币是peso，缩写PHP（最好的语言，哈？）。去之前别忘了换一点PHP，带一些USD。PG那里我没找到ATM，上去都是换钱的。带着PHP回来只能再去菲律宾，带USD哪都能去。如果怕不安全的话，提前联系好中文潜店，商量好微信或者支付宝转账，再让他们帮你把房一起订了。这样你去的时候只用带上不多的钱就好。安全是一方面，同时也很方便。
交通 PG在马尼拉南边，从manila机场出来，不用过市区，直接往Batangas码头走，过海就到。坐大巴换公船的话，大概5个小时多点。
我这次来去都是找人拼的车船。去的时候16个人左右，100元包车船。回的时候5个人，价钱就到了200。但是反正我不觉得这是重点。毕竟你花了大几千的机票钱，飞到菲律宾，就想省个50，100的交通费？自己拼车船几个好处。一个是不用和人挤，车也好一点。另一个是车船中间的空档，如果是公船就必须留足时间以防没赶上。自己包的话到了就跑，省事的多了。
包车船的时候记得一点，先和老大讲好包不包高速费用，还有高架(sky way)。有的时候司机会问你要不要走高速，走的话费用自己掏。这样车船价格就贵了。你先讲明白了就OK了。
另外就是机场的住宿。T3有一个胶囊酒店，1000P一晚7个小时，就在麦当劳往里走一点的位置。如果你需要过夜，提前订好，带上自己的耳塞，住一晚，非常方便。这里推荐一个网站，http://www.sleepinginairports.net/，上面有非常多的机场住宿攻略。
方位 下船的地方叫Sabang。PG，即Puerro Galera，还在20分钟车程山路之外。我去PG看过，没Sabang繁华。所以你可以忘掉PG，只要考虑Sabang就好。如果有人给你推荐一个住宿在PG，不要犹豫，扇他就好。
Sabang坐南朝北，和Batangas的大灯塔隔海相望。西边是Big Lalaguna。去那鬼地方有三个方法：
码头上坐小船，200P就肯走了。有的时候会和你讲价，250P也死活磨半天什么的。一船能坐3-4个，我们这次坐了6个，还有我。感觉像个沙丁鱼罐头。 坐摩托车过去，50P。你给个100P能把你连人带行李搬过去。我就是这么搞的搬房间。注意，摩托不停沙滩，停在镇子的门口。你得穿过镇子里迷宫一样的道路才能到沙滩。反正经过几次之后，我觉得自己像一只白老鼠。 用脚。开始来的时候不知道，硬从沙滩上走过去的，15-20分钟，看脚程。 Sabang镇有个好处，吃的东西多，娱乐多。如果你打算天天往水里扎，起来就在房间里窝着，那就当我没说。不过如果你晚上还是想找个地方happy一下的，最好不要住Big Lalaguna。来去都有费用是一方面，另一方面是真心麻烦。
餐饮娱乐 说Sabang娱乐多，其实还是挺乏善可陈的。餐饮我点名这几家：
海明威，码头沿着沙滩往西去，过了Angelyn&amp;rsquo;s。建议别去。虽然并不难吃，但是性价比太低了。看攻略说还不错，去了发现有变化。 Tarmarine，就在Angelyn&amp;rsquo;s旁边。烧烤真心好吃，但是上菜一小时。而且服务员上来就告诉你，一小时。 TEQ&amp;rsquo;s，码头往山里方向（古堡那边）走，路左手有个牌子的。东西味道很不错，也不贵。但是第一次去，上菜一小时，还不提前说。第二次去，牛骨汤就给了一半。后面就再也不去了。 Sabang Fastfood。码头往山里方向（古堡那边）走，路右手。他们家的mongo shake真心顺滑，铁板亲子没有dong也不错(什么鬼？就是铁板鸡肉加鸡蛋啦)。 Capt&amp;rsquo;n Greggs。码头沿着沙滩，马上就能看到。他家牛排量超大，770P厚厚一大块。我们四个人吃两块吃的超级饱。Gin调的鸡尾酒也不错，超级大一壶，四个人根本喝不完(好吧，我不能喝)。 按摩。你随便找一家就得，400-500P。手法各自不同，略有差别。这个不贵，你开心就好。但是特别注意，深潜后原则上禁止按摩，容易诱发DCS。自己决定，别说我没提醒过。 更多介绍可以看这篇，上面的地图也不错。不过注意，我去的时候是17年5月，以我的经验来看，一两年后情况就完全不是一回事了。
潜店 好了，前面说了那么一堆，现在说最关键的问题，潜店。我所知道的有这么几家：
scandi，在Big Lalaguna。我开始就潜的这家。看攻略以为是一家很严谨的潜店，结果依然八个粽子放风筝，还有AOW应届生一起。这样根本对不起我27刀的FD费用啊，于是果断转店。15支批发价，25刀。装备一天14刀。 divingpark。就在scandi隔壁，看公开报价是28刀，也不便宜。这家中国人比较多，大概是中文教练多。scandi的中文教练好像就一个北京的姐们。 asiadivers。貌似是岛上最高大上的潜店。我没找到他的具体报价，但是印象基本就一个字，贵。 蓝鳍，在热浪的后面，美杜莎隔壁。我最后是在他们家潜的。价格还行，10支批量1000P一次，包装备。140多点，这个价格基本和停泊岛的差不多。老板是个上海人，做事精明不小气。我不知道10支的事，下了9支。他直接给了折扣价。 大家特别注意，潜店好不好，主要看装备是不是够新够好，还有潜导是几个对几个。不要特意省钱去8v1，这样很不安全，而且体验很差。如果有条件，尽量在4v1以内。如果你需要一定2v1或者4v1，最好先沟通，约定好（有可能还要加钱）。这次指望scandi能良心点给个4v1，结果。。。
8v1的最大问题是，buddy大多都是刚拼凑的，很少有默契和能力保持整齐的队形。结果就是潜导叮叮一指，一群人端着相机就围了上去，像是在开秘密会议。然后所有人就撞成一堆。潜导一游动，队形完全走样，路上就不停的撞车，被踢。你有事，潜导一回头，根本看不到你。如果你有熟悉的buddy，最好固定组队。照相的话，和大部队保持一点距离。你上去照相的时候，buddy帮你看着点潜导。这样大家都会玩的很开心。
住宿 说到最后，说说住宿。如果你住高大上的度假村，他们自己就有住宿。如果没有，也可以自己订。我这次住了两家，scandi和古堡。先说scandi。
scandi是一个典型的resort，他们的住宿和潜店是前后的，所以可以潜水完了回房间休息一下。但是等你洗洗弄弄结束，休息不了半小时，又得出去了。而且你中午吃饭也必须在scandi，没法跑去别处。娱乐选择相对就少一点。古堡呢，到哪都很方便，但是回来的时候衣服都是湿的。好坏就自己选择吧。
古堡特别说一点，不要住他们Deluxe的房，住Suite的。大小翻倍，而且Deluxe里面蚊子超级多，似乎还有跳蚤。费用嘛，也就是40刀变50刀而已。
大概来说，你可以参考这篇
潜点 PG附近的潜点，我完全没记住。反正名字都写在dive log里了，然而谁是谁还是分不清。我都是回来才查的潜点。水温一般都在29-30左右，可以水母衣直接下水。但是很多地方有盐温交错面。Verde Island下去的时候，一过交错面我直接就冻毙了，怀疑水温低到27度左右。在底下甚至能肉眼看到强烈的交错面乱流。
Ernie&amp;rsquo;s Point 13° 31.398&amp;rsquo; N, 120° 58.982&amp;rsquo; E
Max: 25, Avg: 15, Vis: Good, Current: Low
Sabang码头的东边，本岛潜点。本岛的点大多数都是从山上延伸向海里的一个斜坡，就是平缓各有区别。这支是大深度，潜导直接带去了30米的位置，我还没刹住。这个数据远远超过潜点记录上的最大深度。能见度很好，流很平缓。
M-V Alma Jane Wreck 13° 31.</description>
    </item>
    
    <item>
      <title>/proc/net/dev中bonding网卡的流量计算</title>
      <link>//blog.shell909090.org/blog/archives/2851/</link>
      <pubDate>Tue, 16 May 2017 11:29:52 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2851/</guid>
      <description>最近有需要，看了一下。我觉得还是讲一下，但是不讲太细了。以下代码是以4.4为基准的，不是的会特别指出。
/proc/net/dev的读取问题 procfs的代码在fs/proc/proc_net.c，但是基本没干点啥事。真正的核心代码在net/core/net-procfs.c:dev_seq_show，我这里是105行。这个函数会打印个头，然后调用上面的dev_seq_printf_stats。dev_seq_printf_stats则是取设备最新信息，并打印。
这里要注意的一点是，整个过程并没有锁，只是在fs/seq_file.c:seq_read上面上了一把锁。这把锁的目地更像是排斥两个进程同时读取同一个文件，而不是保证计数器正确。因此，实际上每个设备的性能计数都是单独读取的，而且读取时计数器还在持续递增。
结论是什么？对于/proc/net/dev里的多个设备，做bonding加和是不可靠的。你不能假定设备1和2做了bonding，那么设备1的计数加上2的计数精确等于bonding的计数——虽然实际上就是这么算的。
bonding的数据获取 我们再看dev_get_stats，这个函数里面实际上是用了ops-&amp;gt;ndo_get_stats来获得设备的数据。对于bonding来说，这个文件在drivers/net/bonding/bond_main.c:bond_get_stats。从下面的实现中，你能看到，实际上bonding网卡的计数就是用各个设备的加和。然而计算没有那么直接，用的是每个设备的当前值减去原来保存值，差值加到bonding的保存值上。换个说法就是，bonding的margin等于各个设备的margin。
这个特性是由这个补丁引入的：make global bonding stats more reliable，时间是2014年9月29日，版本是3.17.0-rc6。主要是解决bonding中去掉一块网卡的时候，计数器会掉下来的问题。在这个之前，还有两个补丁。
Enable 64-bit net device statistics on 32-bit architectures的引入时间是2010年6月8日，版本是2.6.35-rc1。这个版本首次引入了64位计数器（因此，RH6里面默认配置的2.6.32内核应当是32位计数器），但是写出了bug。 fix 64 bit counters on 32 bit arches的引入时间是2010年7月8日，版本同样是2.6.35-rc1。主要是解决补丁1在32位系统上非锁定读写64位计数器造成数据跨越总线宽度，导致多个CPU竞争读写时高低位被分别写入产生不一致的问题。 由这两个补丁，我们可以简单总结出bonding的问题历史。
在2010年，2.6.35之前，内核计数器只有32位，分分钟会出问题。实话说我完全不敢相信，有当时用过/proc/net/dev的朋友来讲讲么？ 2010年的时候，有短暂的bug，只影响2.6.35。这是一个开发内核，我们可以忽略。 2014年，3.17.0之前。去掉一块网卡的时候，bonding计数器会掉下来。 然而，其实问题并没有结束。如果你仔细看代码的话，会发现，bond_get_stats根本没加锁。如果两个context同时调用，有可能发生这么一个过程。
context1读取数据并计算，计算完成后，写入bond-&amp;gt;bond_stats数据前被switch out。 context2开始运算，完成计算并写入bond-&amp;gt;bond_stats。很明显，由于context2的启动时间比1晚，context2的数据结果比1大。 context1被switch in，写入bond-&amp;gt;bond_stats。 在随后的时间里，计数器的增长比context2和context1的差值大。 满足上述条件的话，bonding计数器就有可能倒涨。当然，里面还有其他竟态情况，可能导致各种问题。由于这是3.17.0内核引入的，因此只会发生在这个版本之后。
当然，有朋友可能会说，/proc/net/dev里有锁啊。问题是，dev_get_stats可不是只有/proc/net/dev会用，rtnetlink也有可能哦。
这个问题是这个补丁修复的：fix bond_get_stats，时间是2016年3月18日，版本是4.5.0-rc7。在补丁的说明里，说到了这个问题。
因此，我们延伸一下故障列表：
在2010年，2.6.35之前，内核计数器只有32位，分分钟会出问题。实话说我完全不敢相信，有当时用过/proc/net/dev的朋友来讲讲么？ 2010年的时候，有短暂的bug，只影响2.6.35。这是一个开发内核，我们可以忽略。 2014年，3.17.0之前。去掉一块网卡的时候，bonding计数器会掉下来。 2014-2016年，3.17.0到4.5.0之间。多个CPU同时读写时，会发生竞争出错。 2016年，4.5.0版本以上。未知。 另外注意。并不是说3.17.0之前没有竞争问题，而是由于没有写回状态，所以竞争问题并不产生明显影响。</description>
    </item>
    
    <item>
      <title>SI的七个基础单位</title>
      <link>//blog.shell909090.org/blog/archives/2850/</link>
      <pubDate>Sun, 23 Apr 2017 12:28:30 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2850/</guid>
      <description>大家上学的时候，也许听老师说过这么一句话。物理学里有七个基础单位，其他单位都是这七个基础单位推导的。我以前也没怀疑过，后来在看长度定义的时候看到这么一句话——一米等于光在多少多少秒里在真空中走过的距离。我突然想到，这其实是以秒来定义米啊。
后来我仔细想了一下，觉得七个基本物理单位这事有点不靠谱。我们先看一下七个基本物理单位和定义：
米：光在真空中于1/299792458秒内行进的距离定义为1米。 千克：存放于法国巴黎国际计量局的“国际千克原器”的质量定义为1千克。 秒：铯133原子基态的两个超精细能阶间跃迁对应辐射的9,192,631,770个周期的持续时间定义为1秒。 安培：在真空中相距为1米的两根无限长平行直导线，通以相等的恒定电流，当每米导线上所受作用力为2×10−7N时，各导线上的电流为1安培。 开尔文：水的三相点与绝对零度相差的1/273.16定义为1开尔文。 摩尔：所含基本微粒个数与0.012千克碳-12中所含原子个数相等的一系统物质的量定义为1摩尔。 坎德拉：给定一个频率为 540.0154×1012 Hz 的单色辐射光源（黄绿色可见光）与一个方向，且该辐射源在该方向的辐射强度为 1/683 W/sr，则该辐射源在该方向的发光强度为1坎德拉。 先特别注明一下，上述定义来自wiki国际单位制。下文就有一副图，把我下面要说的东西讲的非常清楚了。如果大家懒得看文字，可以去看图。但是个人觉得，那个图有点问题。
这七个基本物理量有什么问题呢？我们依次来看。
导出量 例如刚刚的米，本质上是用光速和秒来定义的。实际上米就是秒的导出量。
同样的还有安培。如果你仔细分析的话，1N = 1 kg.m/s2。所以定义本质上是用kg，m，s来导出A（更精确的说，这里也没有米什么事）。因此安培实际上是导出单位，而不是基本单位。
还有坎德拉。仔细分析一下定义，Hz实际上是1/s，W是m2.kg.s-3。sr是数学常数，一个全球面等于4π个球面度。
原器 千克的定义是，存放于法国巴黎国际计量局的“国际千克原器”的质量定义为1千克。
这个定义明显的过时了，人类在米上早就摆脱了原器制。随着测量能力的飞速上涨，千克居然还使用原器定义，这不能不说是和时代不符。更糟糕的是，如上面所说，安培和坎德拉也是千克的导出量，他们又构成了SI的整个世界。所以如果千克原器略略波动，全世界的仪器都要重新校正，不限于测重仪器。而且两个大学，校正时间不一样，对同一个实验的结果可能相差很远。这又干扰到了进一步的研究。
新国际单位制 由于上面的种种限制，因此新国际单位制被提出来。单位不再使用某人的手脚这种不靠谱的方法来定义，而是更多的采用自然现象（而且是无条件的自然现象，例如原子跃迁周期）和人为定义的常数来确定。使用这种方法来定义的单位，不需要原器，不随着时间和环境变化，能够多次产生，可以更好的反映事物的本质。
例如电流。国际计量委员会的新定义，使用电量来定义安培。因为一安培的电流，一秒流过的电量是一库仑。而一库仑的电荷数是确定的，即6.2415093×10^18个。因此，新的定义采用基本电荷和秒来定义电流，这就将安培和标准电荷这种根本性的东西挂钩起来。
新国际单位制下的基础单位 原本的七个单位里，刚刚已经说明了三个实际上是导出单位。因此我们还剩下四个单位：秒，千克，摩尔，开尔文。我们先说摩尔和千克。
摩尔实际上是阿伏伽德罗常数的倒数。对于给定的原子，阿伏伽德罗常数越大，摩尔数越小。如果改变摩尔的定义，一摩尔为一个原子，那么Na就会变成1。当然，由于未来的定义要同今日的定义相协调，因此新的定义可能会将Na定义为常数，从而固定mol为一个特定量。
而千克和摩尔的关系非常紧密。摩尔今日的定义实际上是从千克和C-12原子质量来推导Na（所以现在也是导出量，而且阿伏伽德罗常数目前会受到国际千克原器质量变动的影响）。将来mol被定义为基本量之后，kg看起来是从mol反推，即1mol的C-12重量为0.012kg（标准定义应该是XX mol的重量为1 kg，这里为了让大家看清，特意没调整）。当然，实践中采用的是硅原子球。
千克的另一个定义是从普朗克常数h推导。原谅我无法解说原理，因为我看了半天没看懂。基本理念是通过天平精密平衡质量受到的引力和电磁力，从而测量普朗克常数。电磁力的基本量纲中，米和秒都有定义。在千克固定在特定值的时候，测量得到的普朗克常数值和预订相符。此时质量即为1kg。
我之所以不理解是因为，从kg计算引力需要用到万有引力常数，这个常数是几大重要常数里最不精确的一个。拿这么不精确的常数来测量kg真的不要紧么？
然后我们再说开尔文。开尔文目前的定义是依据自然现象来确定的，新版想要修改为更加反应热能本质。具体来说，就是固定波尔兹曼常数成为定值（1.38064852×10^-23 JK-1）。由于波尔兹曼常数实际上联系着能量和温度，当波尔兹曼常数为定值后，给定能量即可给出温度。而能量J是SI的导出单位，等于m2.kg.s-2。因此K就成为了m.kg.s的导出单位。这一修改使得K和其他物理量之间的紧密联系更加清楚的暴露。
和其他单位相比，秒比较特殊。其他单位，要么是人为确定的值，和物理现象没有任何联系，例如mol。要么是通过固定的自然量从其他值中推导。例如m依据光速从s推导，kg依据原子质量从mol推导，A依据基本电荷从s推导。秒是依据特定的物理现象来测量，既不是人为定义，也不从其他物理量推导。
基础物理量和由其导出的整个世界 综合上面的信息，在我看来，基础的物理量有以下两个：
秒：基本物理量，由原子跃迁时间确定。 摩尔：人为认定数值，阿伏伽德罗常数个原子即一摩尔。 基本的导出物理量有这么三个：
米：基本物理量，通过光速，由秒导出。 公斤：基本物理量，通过由原子重量，由摩尔导出。 安培：基本物理量，通过基本电荷，由秒导出。 再导出的单位有这么两个：
开尔文：人为认定数值，通过波尔兹曼常数，由m.kg.s导出。 坎德拉：人为认定数值，由m.kg.s导出。（这里似乎缺一个常数） 总结以上数据，又能得到以下关键物理学常数：
原子跃迁时间。 阿伏伽德罗常数。 光速。 原子重量。 基本电荷。 波尔兹曼常数。 </description>
    </item>
    
    <item>
      <title>模拟网络丢包延迟和TC的使用</title>
      <link>//blog.shell909090.org/blog/archives/2849/</link>
      <pubDate>Thu, 02 Mar 2017 12:55:37 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2849/</guid>
      <description>iptables方案 这个方案纯基于iptables，不需要内核模块，对容器更加友好一些。
iptables -A OUTPUT -d xx.xx.xx.xx -m statistic --mode random --probability 0.1 -j DROP 但是这个方案有个副作用。ping的时候，能看到错误“不允许的操作”。
tc方案 tc方案相对比较复杂。我们先不说这些复杂的事情，先说结果。
tc qd add dev wlan0 root netem delay 100ms tc qd change dev wlan0 root netem loss 50% 一个是延迟一个是丢包，一个是设定一个是修改。netem还允许你做乱序和重复。方法就不细写了。删除是这么干。
tc qd del dev wlan0 root netem 你再用tc qd show看看是不是规则已经没了？
tc简述 tc是linux下面用来控制网络发包（注意是发包）的一套系统。基本的设计目标是确定优先级，限流，也有测试性的丢包之类的策略。可以配合iptables和route协同工作。
基本原理 包从进入tc开始，分为多个qd(qdisc)。每个qd可以包含多个子qd，qd彼此连接形成一颗树。每个qd上可以附加filter，选择进入哪个child。如果都没命中，那就看本身规则。
我们先从最简单的例子开始。将root qd改为prio。
sudo tc qdisc add dev eth0 root handle 1: prio 使用tc qd show查看变化。完成后使用sudo tc qdisc del dev eth root删除变化，还原为默认的pfifo_fast。</description>
    </item>
    
    <item>
      <title>两台机器上TCP状态不一致的排查</title>
      <link>//blog.shell909090.org/blog/archives/2848/</link>
      <pubDate>Fri, 24 Feb 2017 11:11:24 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2848/</guid>
      <description>简介 TCP状态不一致是一种常见故障。双方的机器上列出连接，其中一方连接存在，另一方则没有任何连接。如果连接存在的一方有数据正在发送，则存在两种可能性。一种是对方收到数据报文后发现这个报文没有socket对应，于是返回一个RST，导致连接存在的一方连接直接消失。这种情况下问题很难察觉。另一种是对方（或者中间方）收到报文后直接丢弃。发送方经过一定次数（tcp_retries2，一般来说就是15分钟左右）的重试后，认为连接已死，连接会自动消失。如果tcp连接打开了keep-alive，经过7200s（具体值看socket设定），即等于有数据发送。后同。
一般来说，有三种常见理由：
RST报文丢失。在RST报文丢失时，发送方连接直接消失，接收方由于没有任何消息，因此连接始终存在。 FIN报文丢失。FIN报文丢失和RST报文丢失情况类似，但是发送方会进入FIN_1状态，经过一定次数重发（tcp_orphan_retries）无回应后连接消失。 内核错误。 排障时，应当首先考虑RST报文和FIN报文丢失的情况。
排障 首先应排除三种常见场景：
场景一：接收缓冲区满。
当接收缓冲区满时，FIN报文会直接丢失。这常见于接收方处理上下文堵死导致不再处理新数据的情况。特征是发送方可以观察到一定量的FIN_1状态链接（常见于接收方不处理fin报文的情形下），接收方缓冲区满，可作为特异性标识。
确证方法：在接受方使用ss观察接收缓冲区。如果接收缓冲区极大而且基本不下降，配合发送方可见FIN_1状态，可以断定此场景。
场景二：RST报文丢失。
当中间有IDS之类（F5/SDN/firewall）的网络设备时，RST报文可能丢失。特征是发送方socket直接消失，接收方socket无任何异常。检查可见netstat -s中reset的发出和接收状况不一致，但是无法作为确证标准。
确证方法：双方抓RST包，无法对齐。
场景三：FIN报文丢失。
情况和场景二类似，网络中有IDS类设备。但是丢失的报文是FIN。这导致发送方可见FIN_1状态，接收方缓冲区没有异常。
确证方法：双方抓FIN包，无法对齐。
内核错误导致的TCP状态不一致很少见，建议升级到最新内核后重测。如无法复现可以合理推测这种可能性，但是无法确证。确证需要systemtap。
PS：FIN_1状态同时也受到tcp_max_orphans的限制。如果tcp_max_orphans被设定为0以清理TIME_WAIT状态的情况下，可能导致FIN_1状态很难察觉。可考虑恢复tcp_max_orphans或者干脆直接抓包诊断。</description>
    </item>
    
    <item>
      <title>Disney Shanghai信息</title>
      <link>//blog.shell909090.org/blog/archives/2847/</link>
      <pubDate>Mon, 20 Feb 2017 16:32:15 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2847/</guid>
      <description>这篇都不是攻略了，因为实在太“略”了。简单来说，就是我和老婆去了一趟Disney。
很近，从16号线换11号，大概半小时就能到。路上有一堆人卖雨衣什么的。别管他们，园区里雨衣10元一件。而且以我的惨痛经历来说，雨衣并没有什么卵用。雨衣只能防住上半身，我当天穿了一件冲锋衣，也能防住。可TM当天一个浪过来，直接打湿了大半裤子。这就尼马尴尬了。于是我就去他们的厕所里，弄了一堆擦手的纸巾擦了一下——半干。另外还有两个小伙子也是类似情况，纸巾居然瞬间就见底了。可见这种现象应该是相当频繁的。然后我就带着半湿的裤子在冬天的乐园里继续玩。。。
我的建议是。穿防水裤，并且尽量避开上去的那两个位置（就是开口最大的两个）。东西放在身上的时候，最好用塑料袋包一下。毕竟凡事都有万一。。。
乐园里的简餐没有传说中那么贵。当时一个牛肉卷（就是和老北京鸡肉卷很像的那种卷饼，里面是五方嫩牛的内容物），大约是55元。我没记错的话，五方嫩牛也要20多，而且这还是号称全中国最良心餐饮企业之一。在正餐餐厅里随便吃一点大约是50-70。我们点了个烤猪肋排。份量很大的三根肋排骨，酱汁非常入味，也只要98。我觉得在上海随便一家中档餐厅里吃饭大概也就是这个水准了。但是有一点很奇怪的是。我们中饭和晚饭在两家餐厅吃，两家餐厅类似价钱的食物量和味道可差了好多。中午在海盗湾吃的，味道和量都不错。晚上在Peter Pan旁边的餐厅，猪肉拉面能淡出鸟，量也明显小一截。。。
另外就是关于排队问题。我们去的几个地方都是一小时一小时的排队，玩其实也就几分钟。从性价比来说非常不值得。最好能搞到快速通道券。另外就是在晚上的时候，很多项目排队时间会突然缩短。我本来以为随着有些项目关门，时间应该变长的。老婆说这是因为熊孩子们被爸妈抓走了的缘故。反正晚上6点多的时候，急速光轮排队时间已经从巅峰的两小时降到15分钟了——基本就是走通道的时间。我们只在通道尽头等了两三分钟就被弹上了轨道。。。
晚上和朋友聊这事。我表示我头次知道tron原来是Disney的IP。他说他更无法接受星战被米老鼠收购的事。确实，一只米老鼠说，I&amp;rsquo;m your father，然后掏出光剑来开打。想想也诡异了点。。。
最后就是关于季度卡。我们很晚才知道季度卡的事，其实早知道的话会直接买季度卡。以季度周日卡为例。820左右，能去12次。就算各种因素不能每个周日都去，跑个六次不算多吧。合每次150不到。相当于花半小时跑一趟游乐园，150一次在里面玩到爽。而且如果玩这么多次的话，其实甚至可以等下午三点多出门，吃个晚饭去排15分钟一次的急速光轮，两个小时刷个6轮。。。
当然，我们得知的最新消息是，最近的季度卡到3.31日截止了，下面的活动没有消息。无论如何，对于住的近的人来说，这种折扣值得关注。
最后是一个个人问题，有人知道哪里有卖Disney的花栗鼠纪念品么？我们转了一圈只找到松鼠的。</description>
    </item>
    
    <item>
      <title>广东游记</title>
      <link>//blog.shell909090.org/blog/archives/2846/</link>
      <pubDate>Sun, 05 Feb 2017 15:19:50 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2846/</guid>
      <description>广东其实没啥游记可写。论大小，这是个大城市，去过的人成千上万。论各种景点和攻略，在地的人足足可以写出一本书来（我倒是一直很想写一本上海攻略）。论美食，那更是高明到不知道哪里去了。我一个外地人，才去玩几天，有什么可写的呢？
所以这次就简单记录一下广东的一些吃喝和见闻。也许不是顶好，您也就别挑剔了。这也就是一只懒猫春节没处去，随便跑了有美食的地方。如果您有什么好的馆子可以推荐在下面，一是方便读者，二是我们也许下次还有机会去。
第一天下飞机，先去的西朗。飞机是晚班的，到了睡一晚，第二天坐广佛线去的祖庙。
话说广佛线真是个好东西。要是有地铁能把上海苏州直接打通的话，那就方便的很了（据说规划中）。如果能再打通杭州的话，就更不得了了。高铁也很方便，但是一来票价很贵，二来要提前买票准点候车。哪像城铁这样说走就走，而且运力极大。这也亏得城市之间距离比较近，中国基建能力又足。
祖庙那里没什么好说的，吃了一点双皮奶，鱼角，糯米鸡什么的。看了一场醒狮，又去岭南天地吃了一碗毋米粥。本来想吃水蛇粥，结果水蛇没有，换了牛展粥。味道也相当不错。
下午去了一趟梁园，一趟南风古灶，乏善可陈。
晚上我们去的另一家“行运楼”，价格略贵，菜量比较大。更适合多人去吃。我们都不够点他最著名的脆皮烧鸡，只能点了半只葱油鸡。味道比喵烧出来的好。
晚上出去吃了个甜品，一杯冻鲜奶，一碗猪脚姜。冻鲜奶就是冻鲜奶，就是冰的牛奶，只是说广东这里都是用的水牛奶。我吃不出有什么区别。猪脚姜就是猪脚姜，就是猪脚烧姜。我不是很吃得惯。
第二天直接去的西樵山。我本来以为爬个山而已，没想到人越来越多。后来上去一看，山顶有个宝峰寺，还有个南海观音。这就对了。才过年，拜佛的地方能不人山人海才奇怪了。我们对拜佛没兴趣，对修建时间小于500年的佛教景观更没什么兴趣。所以直接从旁边岔出去，去桃花林看桃花，茶花了。
在路上的村子里有农家乐。我们看时间差不多了，素斋那里都被游客堆的人山人海的。索性在农家乐这里吃点算了。没想到这里的豉油鸡是我这几天吃的最对胃口的一顿。无他，肥鸡重油，豉油入味，对上北方人胃口，自然吃的很香。我几乎一个人吃掉了一整只鸡，猫在旁边撩了一些。
晚上回来，我们去的天海酒店。这家据说是佛山本地人吃的，价格便宜上一大截。其中一道烧钳鱼（又是重油重口味），还有一道煎青椒，味道不错。青椒不辣，去子，内部塞上鱼滑，再煎过。这个做法很特殊，别处不是很常见。
第三天早起去了顺德。顺德对吃很讲究，果然不假。我们去的时候不知就里，先看了清辉园再去吃饭。大家居然都收市了。好歹找了一家酒店，在西餐部吃了一点茶点，都不是顺德本地菜，十分可惜。其中一道沙姜蒸凤爪，和普通广式的凤爪味道不同，反倒有点像肉骨茶的味道。我们就在推测，肉骨茶料中就有山萘。另外就是去民信仁信转了转。两家双皮奶老店果然不同凡响，整个下午店里都是人头满满，根本没地方坐。最后好歹在美食街仁信的一个小店面里吃了一碟萝卜糕，一碗双皮奶。实话说我对双皮奶这种东西一直很腹诽，总感觉像是奶膏一样，不是很好吃。
第三天晚上直接回了广州，顺德到广州的高速很快，一个小时不到就下了车（订正一下网上的资料，有说两个多小时的）。晚上就在沙面的陶然轩里面随便吃了一点。他们的菜不是很有特色，碟子和茶具倒是这两天里看到最好的一套。旁边的柜子里还摆放着老的外销瓷。
第四天就在广州随便逛了一圈，石室圣心大教堂，南越王墓，北京路，还有陈家祠。这几个自己去就行，没有什么好讲。晚上我家喵念念不忘顺德美食，结果果然有了回响。在沙面有一家“有腥气”，算是顺德菜。我们在里面吃到了拆鱼粥，还有煎鱼嘴。鱼嘴更像是鱼头，也不知道正宗的顺德菜是不是这个样子。据喵说应该是小鱼。拆鱼粥很鲜。
好了，这几天吃的美食大概就这些。如果你有什么推荐，请在下面留言。注意请不要推荐一些特别知名特别贵的酒店，我知道他们好吃，但是我不去是有原因的。一个是口味可能和普通市民口味有所区别，另一个就是穷。我真心的建议大家只要记住前一个原因就好，推荐我一些符合当地人口味的餐厅——同时也会便宜一些。</description>
    </item>
    
    <item>
      <title>phuket旅游和潜水指南</title>
      <link>//blog.shell909090.org/blog/archives/2845/</link>
      <pubDate>Sun, 01 Jan 2017 22:46:46 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2845/</guid>
      <description>大致行程 简单来说，就是带着我家猫去普吉岛玩玩。一天潜水(diving)，一天浮潜(snorkeling)，一天jungle fly，剩下的时间就是吃吃吃买买买。
当然，执行下来完全不是这么回事。基本上每天都是满的，都是各种行程搭配。虽然就住在Jungceylon隔壁，却基本没有买买买的机会。吃吃吃倒是问题不大，各处都有不错的食物。不说精致，便宜好吃是起码的。更何况Jungceylon后门还有Banzaan Fresh Market，门口一到晚上就大开夜市。
哦，还有说到Jungceylon，这次来了才发现，这不就是上次逛的那个大市场么？连我拍某个卖玩具妹子的哈根达斯前面的四面神像都没变化。然后顺便回翻了一下游记，发现上次住的那个Blue Marine，就在我们住的地方到FantaSea的中间，能路过。
好么，净是熟人。
潜水行程 按照我的计划，第二天的行程是一整天的潜水，我家猫就去玩冲浪。
这次由于是圣诞-元旦行程，因此我比较担心人多，所以提前在网上订了行程。潜店选择是这家，原因是比较近。其实还有更近的All4Diving，在步行街上还能看到他们。但是事先咨询的结果，他们的船都是固定的，那天只有Phi Phi岛的行程。而我对Phi Phi岛的潜水又不是很感兴趣，所以还是选择了thailand divers。
他们家别的还不错，有在线的客服帮你讲解和指导，能通过paypal来支付费用，基本上是挺方便的。只有一个不大不小的问题——他们没告诉我，不能在游艇上付费。所以我付了一个定金后，本来打算在游艇上支付剩余费用。结果他们前一天下午写信过来告诉我现在就必须付钱。我说我人TM在FantaSea Show现场，手机都马上要寄存了，付个毛啊。他们说那没办法。然后就在FantaSea Show手机寄存排队的时候，赶紧输入各种信息来付账。一堆信息，还全是信用卡相关的，一个不留神就容易出现盗刷，手机上又很难查证。所以搞的非常紧张。这点让我感觉很不爽，其他的还算满意啦。
潜水船没什么好介绍的，双层普通潜水船，上层观光，下层内舱，后舱是四排气瓶，最后从尾部的平台上下。尾部有一个清水桶，供清洗相机什么的。两个淋浴头两个花洒，可以简单清洗或者下水前做个防雾什么的。比较有意思的倒是当天的同船。小一半是欧美人，我也分不大清楚都是哪里的。潜伴的小哥是东欧的，怀疑是俄罗斯人。因为潜导是个波兰妹子，和他用俄语聊了两句。好歹也去过一圈俄罗斯，虽然听不懂，但是大概也能分的出。船长是个泰国人，长的像是神盾里面那个独眼局长。戴一只耳环，说话泰国腔，但是很风趣。另一半则是东南亚人，以日本居多。一个很瘦的日本姐姐，拿一个超级巨大的水摄装备。三个很卡哇伊的日本妹子，清一色的涂着指甲，戴着tusa家的潜水表，估计是几个认识的朋友一起出来玩。一个日本超级帅哥，和一个没那么超级的帅哥，英语很流利。还有一对日本夫妻。中国人也不少，一对香港人，看样子是情侣或者夫妻，但是我不确定。说来好笑，日本帅哥以为船上就他们几个日本人，所以一群人在那里用日语聊天。偏偏我不会日语但是能听个大概，所以坐在旁边听他们聊斯米兰船宿。但是香港夫妇聊什么，虽然是中文，我可就完全听不懂了。另外还有三个，两女一男，看来是出来玩的朋友。男的自我介绍是教练，福建人，从新加坡过来的。
潜水基本情况简介 本次潜水主要在Andaman Sea水域，Chalong到Koh Phi Phi之间。环境洋流South to North，估计速度在2-4knots之间，部分区域可见极端高速洋流。天气晴朗（回程有雨），海面浪高0.5米左右。海水基本清澈，能见度10-20之间。
Koh Dok Mai 7° 47.786&amp;rsquo; N, 98° 31.85&amp;rsquo; E Max: 20.4, Avg: 13.4, Vis: 15, Current: about 1 knot
离码头大约20km的Andaman Sea洋面上，一个小的突出海礁。下面有垂直的海底岩壁。我们从南面下海，向东逆时针顺流绕行。原本计划是放流到北角升水，但是船长担心要在大流里升水比较麻烦，就改为顶流绕回南角升水。水下洋流还算平缓，水面流比较大。下水后可以见到成群的褐色鱼群形成瀑布，由于鱼群遮蔽岩石，无法估计规模。可见海兔(nudibranch)，海鳗(moray eel)。本次潜水因在未知海域首次潜水，配重6kg，RMV在15.7左右。
King Cruiser Wreck 7° 48.148&amp;rsquo; N, 98° 38.599&amp;rsquo; E Max: 25.6, Avg: 16.5, Vis: 10, Current: 3-4 knots
在Koh Dok Mai向东约15km的洋面上，一艘1997年沉默的双体渡轮。船体南北走向，潜水计划是从北面的浮标下水，抓绳上下，在船体中部游览，运气好的话可以到达舰桥。由于大深度潜水，需要严格安全停留。高速洋流环境下要稳定停留，最后必须回到北面浮标处升水。因此SPG+Computer双计数，NoDec&amp;lt;10mins || SPG&amp;lt;70bars开始折返。本次潜水配重降低到5kg。</description>
    </item>
    
    <item>
      <title>贝加尔湖旅游指南</title>
      <link>//blog.shell909090.org/blog/archives/2843/</link>
      <pubDate>Tue, 11 Oct 2016 13:54:05 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2843/</guid>
      <description>首先说明，这是一篇旅游指南，里面都是旅行相关信息。想看游记的可以退散了。废话不多说，上干货吧。
贝加尔湖（Baikal Lake，俄文：Озеро Байкал）位于俄罗斯的Irkutsk州（俄文：Иркутск）。一般来说，会直飞Irkutsk机场，然后再过去。Irkutsk在东八区，和北京没有时差。整个地区的通行货币是卢布（RUB，有时能看到py6一样的文字，руб，那个是俄语的卢布），兑人民币（CNY）汇率大约是1:10（1CNY = 10RUB）。整个地区通行语言是俄语。以我的体验来说，英语使用率比中国还低。这一路也算是商业旅游线路了，除了导游外，能流畅使用英语的人只有两个。大部分人只能勉强使用几个英语单词，好的可以说一下短语。所以在这个地区旅游，需要做好语言不通的准备。
这里我推荐google翻译。google翻译除了能够打字翻译以外，还能将图片上的文字实时的翻译出来（不过似乎只限于打印体）。这在买东西/看招牌的时候非常管用。不过就我测试，这个好像只能在俄文和英文间互相翻译。幸好以我和喵的英语来说，没什么大区别。当然，除了google翻译以外，最好还准备一些简单的俄语单词和沟通方法（比手画脚），以备不时之需（例如没有网络情况下无法翻译）。
我们已经提前买好了tele2的电话卡，在整个俄罗斯期间都可以顺利的上网和打电话，因此并不特别担心通讯问题。不过在前往Olkhon Island（俄语：Ольхон）的途中没有信号（是的，途中无信号，岛上反而有信号），有些偏远地方和地下室也是没有信号的。俄罗斯的手机很奇怪。区号是007，我们都是俄罗斯手机号，互相拨打是不加区号的。但是我们拨打别人电话的时候要加8，别人拨打我们电话的时候不要加8。非常复杂，容易搞错。我至今不理解为什么。
去往俄罗斯之前，最好准备好电话卡或者其他上网设备。这样可以查询在线翻译，避免一些尴尬问题。同时，俄罗斯有时比较冷（但是最热的时候居然有30多度），所以一定要注意保暖。衣服最好是大衣+室内穿着的组合。因为很多地方有暖气，所以进入室内后需要脱下大衣。不少景点有专门的衣帽间，可以帮你把衣服挂起来。挂的时候注意提前把值钱物品和证件从衣服里拿出来。
我们是报的跟团游，所以无需办理签证。后来我查了一下，中国公民团体游可以15日内免签。自由行乘客还是必须照旧出签。Irkutsk机场的出入境机构动作不是很快，普通游客可能要在移民大厅里面等很久。
Baikal以自然风光而闻名，最好的季节在冬季和夏季（是的，我们去的时候反而是淡季）。Irkutsk旁边有个小镇，叫做Listvyanka（俄语：Листвянка），大约有一个多小时车程。这个小镇在Baikal Lake和Angara River（俄语：Река Ангара）的分界口附近，是Baikal Lake的重要码头，以鱼市，潜水和观光闻名。我本来在Listvyanka报了潜水（干衣）。结果下雪，潜导在船上，没回来，就没潜成。同行的一些人报了小火车的线路，从Irkutsk坐车，换小火车沿着Baikal Lake转半圈。中间会停靠几站，让你下去拍拍照。然后再上车继续。火车最后会停靠在Baikal Bay（俄文：Байкал），换渡轮游览Baikal。最后也是从Listvyanka下的船，坐车回酒店。据去过的人说挺有趣，有兴趣的可以试试。
我们住在Irkutsk和Listvyanka之间的一个叫Elochka（俄语：Елочка）的松林别墅里面（说白了就是郊外，便宜）。出门100米就是Angara River的支流，窗外就是松树。路上能看到松鼠，麻雀和啄木鸟。一点都不怕人，赶都赶不走。有的时候松鼠还会跳到你身上来。但是基础设施超级差。没有饭店，只能定时去吃食堂。没有车来返市区，只能打出租。出租还算便宜，丰田的小皮卡，开到市中心半小时，也只有500RUB而已。
Irkutsk基本没有出租扬招，都是打电话预订出租，而且都是俄语。但是你可以在酒店或者游客中心找到会英语的前台帮你预订。室内交通主要都是Bus。同时，室内还有几条有轨电车在运行，有兴趣的可以试试，单次乘坐15RUB左右。
第三天开始，我们就从Irkutsk出发，上Olkhon Island。从Irkutsk到Olkhon Island大约是4-5小时车程，路上很多地方没有信号。窗外是大片的寒带草原，有的地方是草原和西伯利亚针阔混交林过渡区。地势连绵起伏。有的地方一马平川一望无垠，有的地方则高耸陡峭。但是战斗民族的修路很有特色。我们正常修路都是盘山，路不会是直的，以免刹车出问题。他们的路是笔直从高处冲下，又长又直，像是水上公园的滑梯。
去Olkhon岛的路上，就到了Buryat人（俄文：Буряад，蒙古文：ᠪᠣᠷᠢᠶᠠᠳ）的地盘。其实Baikal Lake应该是在Irkutsk和Buryatiya的中间。Buryat是蒙古的分支，原来称呼为林中百姓，或不里牙惕。当地特色食物是什么？包子！猪肉和牛肉混合馅，加上洋葱。吃的时候要加酱油，然后吸出汤汁，再吃包子。大致吃法和小笼包非常类似。
上Olkhon岛之前要坐渡轮，渡轮是人车混载渡轮。下船之后要坐当地特有的一种老式车“土坦克”（УАЗ）。岛上的路说是烂，不如说根本没有路。前面的车一压，就成了路。不过即使如此，这路况评价起来也好过去珠峰大本营的时候。
岛上地势东高西低，南缓北陡。北边地势高耸，都是高高的悬崖直冲入海。西边是个平缓的坡，Khuzhir村（俄语：Поселок Хужир）和Shaman Rocks（俄语：Шаман Скалы）就在这个地方。Shaman Rocks是萨满教的圣地，也是Olkhon Island的地标。岛上的基站架设在Khuzhir村，所以远离村子的地方是没有信号的。村子里面有一个小教堂，一个学校，一个博物馆，一个邮局。
他们的主路叫做ul Baykalskaya（俄语：Байкальская ул），东西走向，意思是贝加尔大街。实际上是一条尘土飞扬的烂路，而且没有铺设任何路面。西边直冲码头，铁栅栏上有个红色的五角星。导游说是因为原来这里是个捕鱼和加工厂，村子是围绕着鱼场建的。后来捕捞过量产量减少，加上自然生态保护。鱼场就被废弃了。
主路的中心是学校和邮局，博物馆在学校的里面（是的，里面）。我们去的时候翻译了一下告示，似乎是周末不开，于是就没进去。邮局就在学校南边一点。你可以在村子里买到各种明信片，然后在邮局购买邮票邮回来。到中国的邮费是35RUB。
博物馆西边一点，有个挺大的商店，店主是个亚洲人长相的女的，我怀疑是蒙古族（Buryat）。如果你到这家店的话，可以买一点鸡翅膀吃。我不会说俄语，所以不知道是什么的肉。不过我怀疑是火鸡肉。很好吃。同一家店里面还有格瓦斯（俄文：KBAC）。你可以稍微买一点尝尝。我家猫说和中国的版本差异很大，她喝不惯。
村子里有各种奇葩项目。例如坐船出海，或者坐飞机（是的，飞机）。还有更常见的骑马和租自行车环村。不过现在是淡季，很多项目终止了。我们打听到有船，但是看湖面上波涛汹涌，回忆了一下Koh Tao上坐大船还被摇到吐了的恐怖，再看看他们的船的大小。我们明智的放弃了这个活动。
常规旅游线路是南线和北线。北线包含在行程里面了，南线自费。我们跟着团去了北线。印象比较深刻的就是合波角（Cape Choboi，俄文：Мыс Хобой），整个岛的最北边。风大的能把人吹跑。我这么重的体重，居然有的时候控制不住会被吹的斜迈一步。另外就是午餐野炊的时候司机烧的鱼汤，非常鲜美。
这里特别说一点，Olkhon Island旅游始终是有比较大的生态争议的。主要是垃圾处理和当地居民违法使用木材。具体可以看这里。如果你对生态方面有特别的顾虑，请考虑这些问题。
我们在Olkhon Island呆了两天就又回到Irkutsk游览，下面就是一些Irkutsk的游览建议。Irkutsk比较市中心的地方在Spasskaya Tserkov(俄文：Спасская Церковь)附近。另外就是马克思大街(Karla Marksa St，俄文：ул Карла Маркса)和列宁大街(Lenina St，俄文：ул Ленина)。我们在两者交界的Figaro吃过一次午餐，两个人吃了3000RUB多，还是挺贵的（对当地物价来说）。沙拉量极大，两个人吃一份就够了。浓汤香气扑鼻，加上蒜香面包让人胃口大开。煎鱼和羊排都很上品。比起上海来说，到确实不算贵。毕竟上海要认真吃一顿，也差不多要这个价钱。
不过Irkutsk的中国菜就糟糕很多了。我们在ul Litvinova（俄文：ул Литвинова）吃的一家China Town Cafe（什么鬼），感觉上就是用马列主义指导的中国特色社会主义实践。在ul. Gorkogo（俄文：ул. Gorkogo）吃的Золотой гусь感觉上也差不多。搞笑的是他们的标语上还写，10月1,2,3，国庆大酬宾，全场八折。反倒是在Sovetskaya St（俄文：ул.Советская）附近（我没仔细记，不确定是不是这里了）的一家非常小的餐厅，中国菜做的非常地道。我们进去的时候好像看到有几个留学生在那里吃饭。
Irkutsk的博物馆和教堂都很多，很多值得一看。在列宁像（Monument to Lenin，俄文：Памятник Ленин）附近就有三个博物馆。地方志博物馆（Irkutskiy Oblastnoy Kraevedcheskiy Muzey Biblioteka），美术博物馆（Irkutskiy Oblastnoy Khudozhestvennyy Muzey im.</description>
    </item>
    
    <item>
      <title>生活中总有一些小精灵会来敲你的门</title>
      <link>//blog.shell909090.org/blog/archives/2842/</link>
      <pubDate>Sun, 25 Sep 2016 22:24:12 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2842/</guid>
      <description>今天家里来了个不速之客。
当时我和老婆吃过饭，正在无聊，不知道去哪里玩，结果听到细微的敲门声。老婆开门出去看看，结果发现是一只灰色的短毛猫。老婆当时就觉得很惊奇，拿出家里放着的猫粮来喂猫。（我们偶尔会下楼喂流浪猫，所以家里留着一点猫粮）可是这只猫根本不吃，反而大摇大摆的走进来巡视了一圈。然后捡了个避光的地方一趴。。。
。。。这霸气，您还真不认生啊。
这是一只灰色的短毛猫，全身的毛蓬松水滑。到底是英短还是美短，很多朋友有分歧。我老婆说是英短。鉴于我的猫咪知识比她差的太远，所以我们就当是英短吧。下腹有一丛白毛，颜色还是雪白的。肚子鼓鼓的，像是怀了孕。见到猫粮根本不馋，可见平时吃的都是高档猫粮，而且才吃饱。进人家家一点都不认生，转了一圈，却不会去床上或者垫子上。
这是一只有主的猫，而且从家里跑出来的时间不会超过半天。
基于这点，老婆很快下楼问了一下物业保安。保安说刚刚一个女的抱了这只猫过来，说是楼里走失的。放在物业就走了。保安也没办法，就锁在厕所。谁知道厕所窗户有条缝，它又顺着窗户跑了。
这身手，一定是从家里偷溜出来的。
那问题就比较麻烦了。如果再抱给物业，想必溜掉的可能性是百分百。要找主人，也不是今天能解决的事情。所以老婆让我先问问附近的朋友，我们附近小区有没有什么地区性网站。自己则是骑车去了超市，买个小盆和猫沙给它先用着。我趁着老婆出门的功夫，发了一条推和一条朋友圈。然后才有功夫仔细观察这只猫。
而这只猫趁我们刚刚在那里忙的功夫，在房间里乱转，到处乱翻，还翻倒了老婆养的花。我赶忙拿扫帚扫掉泥土，以免踩的乱七八糟的。然后唠叨了它两句，结果它坐下来，扒着我的裤子喵了一句。
不知为何，我瞬间明白了它想干什么，跟着汗就下来了。
女王大人您行行好，我老婆给您买猫沙去了，买来之前可千万忍住了啊。。。
然后它继续。。。在家里翻箱倒柜，还差点碰倒了老婆养的插花（底下盛水的那种）。我没办法，只能一路跟着女王大人跑。然后不知为何，想起了英国内阁首席捕鼠官Larry The Cat和它的跟班们。可是这回我可没办法唠叨了，长的好看就是有优势。何况人有三急，猫想必也有。
正尴尬中，老婆回来了。于是我们赶紧放好小盆，铺猫沙。女王大人一点不客气的坐了上去，然后开始刨。。。
没有刨猫沙了。它不小心弄翻了猫沙盆，看来这个厕所对它来说实在是太小了。
等三急落定，它又在屋子里转了一圈。看它这次的行动，像是找地方休息，而且特别偏爱有顶棚的阴暗空间。我猜它原来一定有自己的猫房子，只是我们这里没有，只能委屈它了。等它拣了个好地方趴下，我们稍微合计了一下下面怎么办。从朋友圈上面的反馈来看，很多朋友都很喜欢这只猫，甚至有朋友看到找主人三个字就直接来和我们说要养。我们倒是不担心它的去处，可是从他的种种细节来看，原主一定很宠它，现在应该很着急。可是大晚上的，就算要找也无从入手，所以先让它住着明天再说吧。
结果这只猫居然主动跑过来和我买萌了。我摸了摸它的背，然后摸了摸它的肚子。这个，好像。。。老婆你来摸摸看？老婆也摸了一圈。用一种不可置信的语气说。好像，难道。。。是太肥了？
卖过一圈萌，这只猫突然抬起头来四处张望。老婆没反应，我却觉得不对。细听外面，有喊人名字的声音。我赶快让老婆出去问是不是在找猫。
是。
什么颜色的？
灰色的。
好好，有平时的生活照么？进来给我们看看。
有。
老婆一看，就是这只。
主人进门，大喊一声阿呆（还真是呆，2333），眼圈整个红了。然后猫就蹭了上去。
看来是正主。
主人说，他们家在我们楼上两层，这只猫是扒开窗户缝自己跑出来的（果然是惯犯）。他回家发现猫不见了，就赶快出门找，一直找到现在。结合我们知道的消息。这只猫不知如何的，到了一楼。刚跑出楼去，就被一个女的抱了回来，交给了保安。随后它就从保安的厕所逃了出来。又不知怎么的，到了我家这层。在我家门口探头探脑的敲门，给我们瞧了个正着。
主人说，它运气真好。中间只要差一点点，它就很可能回不来了。我说这得说我们运气好。
恩？
不是每天，都有一个小精灵，带着一个完美的故事来敲门的。</description>
    </item>
    
    <item>
      <title>最近的阿里月饼事件</title>
      <link>//blog.shell909090.org/blog/archives/2841/</link>
      <pubDate>Thu, 15 Sep 2016 20:35:41 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2841/</guid>
      <description>相信大家都听说过了，原帖在这里。阿里的声明在这里。我简单说一些吧。
拿js秒杀抢一堆月饼是不好的，当事人也承认这点。不过哪里不好大家观点不一。当事人强调“代码错误”和“好奇测试”。从安全部的职位来说，不是说不过去。不过很明显公司不这么认为。这事扯不上价值观，也不能扯上价值观。如果要扯价值观的话，你就得想想。让一群做渗透出身，见墙上有个圈都要不信邪钻一下的人，去一个对内需要严格管理和反腐的公司。这本身三观里合了哪一观？至于提UC的同学，更是完全没提在点子上。秒杀好不好主要看杀的是谁，也就是所谓的立场决定态度。这才是核心价值观。其他价值观与此冲突者无效。
这件事本身是公司内务处置，事情还得回归到公司规章制度，岗位职责和合同上去。
先说最后一个被开掉的人。我不知道阿里的安全岗位有没有对内安全职责，但是一般来说，安全岗位是可以进行内部渗透的（而且这是岗位职责）。你雇了一个警卫过来让他负责安全，就不能因为人家试着从墙角的洞里面钻进来就把人家给开除——那是人家的工作。只是安全渗透通常需要协调很多事情，例如是否对线上造成影响，是否需要通知当事部门。最后那个哥们显然是没有经过协调。不过从事后并没有付钱来说，还是可以认定不是冲着月饼去的。因此事后有没有付钱这点非常重要。当事人讲法是没付，阿里的声明中未提到。
如果确实没付钱，看到内部秒杀系统似乎没做反刷，写个脚本测试一下。我不知道你们管这叫什么，反正我管这个叫内部测试。这最多只能叫做工作协调有问题，既扯不上价值观，也不违反大部分正常公司的规章。当然，阿里也有可能在安全组规范里面写明了——未经备报批准不得私自进行内部渗透。那这就叫活该了。只是如果安全组有这条规范，我很怀疑内测到底能测出些什么玩意来。你看，按照规范要求，你需要一个个产品线的和对方的老大去谈，获得许可后测试。可是基本最新的，出漏洞可能性最大的系统，全都是要求赶紧上线，没时间全面考量安全性的。可黑客不归阿里的安全组规范管啊。
前面一个哥们的行为则更不好说一点——他确实是冲着月饼去的——一盒。只不过由于程序故障，所以造成刷了一堆月饼出来。所以这里是两件罪——用脚本刷月饼，刷多了。
脚本刷月饼是不是道德，最近有一堆朋友反复论述过了，我这里就不赘述了。在我眼里看来，用脚本去刷一盒月饼不能叫不道德。如果自动化脚本代替人操作就能叫不道德的话，你把密码存在浏览器里面，不亲自填写登录信息是不是应该叫欺诈？你看，银行让你设定密码，是希望你（这个人）去输入密码来验证自己身份的。结果你到好，用一个自动化工具帮你输入密码，欺骗银行，让他以为是你输入的。这是不是欺诈？
对于程序员来说，写个脚本帮自己刷点什么太正常了。有些程序员写脚本，看到自己晚上9点后还登录在服务器上的话，就给老婆发封邮件说要加班今天回不去了。有的程序员写个程序，定期给老婆的朋友圈全部点赞。我有很多邮件甚至不是亲自读的——直接写个脚本爬下来，然后分析一下内容。有关键词才看，没有的话存档然后定期看一眼标题就行。程序员学得一身通天彻地的屠龙术，其实搞到头只有这点羊毛可以薅，你们还在那里大叫不公平。那我们每天晚上自己加码学这些技术的时候，怎么没听有人说，“这个得算加班”啊？
至于刷多了的问题，这叫程序有bug——可是程序有bug不能叫程序员道德败坏吧，否则阿里的反腐难道是在HR的主持下集体抓bug的工作？
当然，另一种可能就是，当事人确实是想多买几盒月饼。只不过后面事情闹大了，又不能推在临时工头上，所以只能说脚本有bug。不过据当事人声称，事后打过电话想退回多余月饼。如果这点属实，也可以排除想多刷月饼的可能。因此事后是否曾打电话要求退回月饼非常重要。同样，当事人讲法是打了，阿里的声明中未提到。
所以，此人可以以技术不过关的名义辞退，但是却不应以试图刷月饼的名义辞退。因为他确实在写程序时考虑不周，对线上业务造成了影响。这在安全组工作中属于过失。没错。
内务处理，很多时候只能看出发点和动机，甚至有时没什么可以参考的。要参考的话，内部多出来的月饼用秒杀，这又是合了哪条规了？要是软件公司每件事物都要参考规章来办事的话，索性还是关关门大家去应聘公务员来的快一点。很多时候本来就是没什么规章的情况下大家估摸着办，办好了就成了规章。办砸了，如果本人不是蓄意做砸的话，都属于还可以抢救一下的范畴。最多是技术不够/工作不够热情/协调能力不足/运气不好反正你办砸了怎么也得来个差评。惩治一下就行了，否则还有哪个愿意当这个出头鸟来办事？
整件事情上，个人观点，觉得惩罚出手太重了。一般来说，这种事情退回月饼，通报批评，扣除当年奖金已是重罚。开除已经是在严打了。开除加上对外点名。。。要知道所谓杀人不过头点地，今天你打倒在地还要踏上一只脚，叫他永世不得翻身。。。
总体结论，阿里系的安全恐怕要打个问号。即使现在没问题，将来也不排除这种可能。做内部涉安全测试的同学，就根本不能想测哪里测哪里。如果测砸了。OK，价值观不符，开除。测过了，没有线上影响，确实有bug，需要赶快修复。OK，等着你的不是嘉奖，而是仍旧价值观不符，开除。那什么最安全？当然是领导说要哪里安全就哪里安全，说要多安全就有多安全。多余的事情不要多问，不要多听，不要多想。这也确实是合了阿里的价值观，一个对内严格管理，加大力度反腐的公司，是不应当有一群看什么都不爽要亲自拆一下看看的猴子的。只是这样的安全组能起多大作用，自己想吧。
最后补一下合法问题。合法性上，不好说。毕竟阿里给出的台面理由是“价值观不合”。阿里有没有把“价值观”定义为劳动雇佣合同中的一部分，我没看过合同，所以不知道。这和fb的case有差别。因为fb是把企鹅定义成了竞争对手，所以带着竞争对手的人来公司参观是明显违反保密原则的。白纸黑字毋庸置疑。更不提这也违反了H1b签证要求。而如果阿里并没有将“价值观”定义为员工要件之一，这种情况就和以“八字血型和公司名字不合”解除合同一样，属于甲方无正常理由解除合同。理应给予补偿。</description>
    </item>
    
    <item>
      <title>使用Jupyter制作slides</title>
      <link>//blog.shell909090.org/blog/archives/2840/</link>
      <pubDate>Thu, 08 Sep 2016 12:06:15 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2840/</guid>
      <description>Jupyter是ipython notebook的新名字。可能很少有人知道，这个玩意居然还能制作slide。
可能有人有印象，我做过一个markdown to slides生成器，底下用的是reveal.js。今天才发现，jupyter也有类似的功能，底层也是reveal.js。不过用起来比我自己写的东西方便多了。
用法很简单。首先在View菜单里，使用Toggle Toolbar功能打开toolbar（如果已经打开就不用管）。在toolbar里能看到一项叫做Cell Toolvar的，后面一般是None。请转换为Slideshow。此时你能看到每个Cell都会多出一条来，上面有Slide Type。
Slide Type有六个选项，默认是啥都没有。后面依次是Slide，Sub-Slide，Fragment，Skip，Notes。Slide和Sub-Slide是主要的选项。在reveal.js里，Slide是指左右切换的那些页，而Sub-Slide则是你切到一个Slide后，按向下逐渐出现的一些页。这类似于章和节的关系。章和章之间左右切换，节和节之间上下切换。而如果选择为默认，那么就不开新页，跟在前面的页面里。
Skip的话，这个Cell会在Slide里跳过看不见。有很多时候，我们需要在Slide里嵌入Python代码。但是代码又有的时候需要做一些额外事情，我们不希望出现在Slide里面。如果将这些额外代码运行后删除，又恐怕下一次跑这个notebook跑不动。这时候就可以设定为Skip。
Notes原则来说是给slide里面加注释用的。照理说在页面上按s就可以跳出提示，但是我测试下来跳出来却是空的。看了一下页面源码，确实是有东西的。可能是因为我使用的是静态的文件，而没有开启服务的关系。
Fragment我也不知道干什么用的。看名字好像是代码碎片一类的，如果有知道的可以告诉我一下。
最后，用nbconvert就可以把结果转换为html来用。方法是：
ipython nbconvert --to slides --reveal-prefix &amp;quot;http://cdn.jsdelivr.net/reveal.js/2.6.2&amp;quot; ... 之所以要加reveal-prefix，是因为最新的reveal和jupyter生成的html不兼容。
生成过程需要使用nodejs，记得安装。
生成出来的Html就是个彻头彻尾的slide了。原则上，同一个ipynb也可以生成html或者pdf（借助reveal.js自身的pdf打印功能）。这样的话slide也有分发能力。
玩的愉快。</description>
    </item>
    
    <item>
      <title>CentOS 6下安装Python2.7</title>
      <link>//blog.shell909090.org/blog/archives/2839/</link>
      <pubDate>Wed, 24 Aug 2016 15:30:59 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2839/</guid>
      <description>我以为只有我不知道，不过看来大家都不知道。
很多时候，我们还得维护CentOS 6的设备。这件事很大程度上不是我们能决定的。但是CentOS 6的默认Python是2.6，很多最新的代码无法执行。例如Django，必须使用Python2.7/3.4/3.5。ansible好像也要求新版本Python。
作为CentOS管理员，第一个想法当然是编译。但是在CentOS 6下，不应该自行编译Python。因为Python的编译有很多坑，例如默认没有内置readline，没有内置sqlite。你不信编译了试试看？我直接从源码编译是不行的。
有的同学提出想法说，可以下在srpm包然后和Python2.7的source code做compatible。但是我要说一个比这个简单的多的官方方法——RHSCL。
RHSCL的全称是Red Hat Software Collections。旨在于在长期支持版本中提供最新版本的动态语言和数据库支持。这里是RHSCL支持的基础工具和版本。这里是说明性文档。具体方法如下：
# 1. Install a package with repository for your system: # On CentOS, install package centos-release-scl available in CentOS repository: $ sudo yum install centos-release-scl # On RHEL, enable RHSCL repository for you system: $ sudo yum-config-manager --enable rhel-server-rhscl-7-rpms # 2. Install the collection: $ sudo yum install python27 # 3. Start using software collections: $ scl enable python27 bash 一定要注意最后一条指令。RHSCL并没有将Python安装到系统路径下，因此需要用特别的指令来配置环境，启用python2.</description>
    </item>
    
    <item>
      <title>gpg pubkey ID碰撞</title>
      <link>//blog.shell909090.org/blog/archives/2838/</link>
      <pubDate>Wed, 20 Jul 2016 00:07:59 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2838/</guid>
      <description>昨天和朋友碰了个头，然后做了交叉签署。
朋友签署完了，还没上传签署的时候。我手贱（幸好手贱）去server上update了一下我的key。结果发现多出一支key回来。
纳尼？
上pgp.mit.edu去搜我的邮箱，一堆key。我废弃过不少key，这就算了。有一支2014年签署的key引起了我的注意，因为ID和我的KeyID完全一致，UserID也一样。显然这是撞出来的，不过我不记得自己有做过这样的事情。
下面是我的真实key的fp：
2276 57F3 6E16 9B90 4186 2EBF 29A9 7386 0914 A01A
这是有问题的那支key的fp：
875D 447A E720 9037 84A0 7888 909F 2614 0914 A01A
可以看到，两者最后部分完全一致，这导致两者有同样的KeyID。
我点进去看了一下，后面一支key完全不是我的，签的情况也乱七八糟。但是UserID显然一致。然后汗毛一竖赶紧通知朋友。朋友看了一眼，果然签错成那支假的了。
我擦，我给你写我的fp是签名留念用的吗？
一般来说，签名很难吊销。他要是签错了，那就麻烦大了。幸好他没上传。整个删除后重新签署，这个问题总算是顺利解决。
我继续追踪，发现有趣的事来了。
这个key被很多人签署，其中有个人和我的签署人KeyID和UserID又和我互相签署的某人一致。这相当于攻击者不但碰撞伪造了我和他的外观一样的Key，而且连我们的互相签署关系都伪造出来了。。。
我OO了个XX的，这是想干嘛？
然后，某位朋友给了我这个站点：Stop it with those short PGP key IDs!
里面提到了这种伪造碰撞的现象。
同时，里面也提到了解决方法。
首先，向你的gpg.conf里面加入keyid-format 0xlong，这样可以使你的ID变为64位的长ID。碰撞难度更高，当然，也更难一眼看明白谁是谁。
其次，在写程序的时候，不要使用ShortID来指明身份了，因为这种方法显然受到了攻击。继续使用ShortID可能为你程序未来的安全性埋下隐患。
最后，验证fp的时候一定要用纸质传递，签署的时候一定要验证完整fp。
验证fp的时候一定要用纸质传递，签署的时候一定要验证完整fp。
验证fp的时候一定要用纸质传递，签署的时候一定要验证完整fp。
因为很重要所以说三遍。</description>
    </item>
    
    <item>
      <title>更换blog声明</title>
      <link>//blog.shell909090.org/blog/archives/2837/</link>
      <pubDate>Wed, 22 Jun 2016 16:09:38 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2837/</guid>
      <description>在看blog的同学们应该发现了，Shell&amp;rsquo;s home整个变了个样子。
这个主要是因为，我的wordpress被黑了。
我的wordpress本来是托管在香港的一台主机上面，加上cdn之后，对国内外的访问效果都不错。我也一直挺满意的。在周一，我本来想把周末写好的关于潜水的blog贴出来。结果无法登录。所以我登录了cPanel去数据库里面修改密码，结果发现。。。
我的数据库，整。个。都。不。见。了。
WTF，这是三小？
首先可以肯定，这里出了什么问题。经过对options表的检查后，我基本确定，这个blog已经不是我原来那个了。但是在数天内我没有发现这件事，而且事发时浏览一切正常。我猜测是因为我加了cache插件，而新的blog没有这个插件。所以一直没有刷cache，导致入口始终是缓存。因此只看首页一点现象都没有，在点击登录按钮后才出现问题。作为验证，我点了一下三年前的记录，结果404了。另一个朋友也验证了这个现象。所以估计推论是对的。
然后是why。
首先可以排除弱密码。我在wordpress上启用了24位大小写数字符号混合密码（反正是自动填写），再加上了yubikey的U2F功能，实话说我真不觉得有什么攻击者能找到我的密码进去。
因此，我从cPanel里面搞到了原始浏览日志。日志显示六月八号早上8点的时候，访问帖子还是200。在某个时间点后就302了。而302是wordpress尚未安装时的标准做法，会转跳到install.php去引导你完成设定流程。也就是说，在8点多的时候，整个wordpress被突然重置。然后对照新的wordpress的初始记录，大约在9点多的时候，有人来完成了install流程。这两者之间可能有关联，也可能是重置者什么都没管就走了。我的某个读者跑过来发现这个wordpress居然没有初始化！就手欠来初始化一把。完了发现首页为什么啥反应都没有，以为自己进了蜜罐然后跑了。
所以先不用参考后面wordpress的初始化信息（我也不觉得里面能找到什么有效信息，哪怕是攻击者初始化的），先查看出问题的时间点的操作。
结果是一条install.php的访问，回应是200。
也就是说，貌似有人绕过了install.php的锁定，重新“安装”了整个系统。
当然，其中还有一点需要排除的，就是我的webhosting供应商没被黑。但是我觉得如果供应商被黑了，攻击者应该已经拿到了我的DNS管理权限，从而在乱搞我的域名了。从这点来说，wordpress有问题的概率更高。
问题是，wordpress也很不应该啊。入口已经加了最严格限制，每次有更新都及时升级。而且最关键是，install.php这个文件在完成安装后就被我删除了。后面怎么又出来了？
有朋友提醒，可能是我使用的某个plugin有漏洞。我想想确实是，plugin这个事情我很难去控制，有漏洞也没什么好奇怪的。
然而这个安全性让我很不放心。
其实前面已经在搞blog迁移到github的事了。但是因为github在中国访问很不方便，而且jekyll搞起来有点麻烦，所以一直没太大动力搞。结果被搞了这么一出，那就顺手迁了吧。反正现在还在中国的，应该已经很少用blog，更多用微信了。
这里感谢adieu推荐的hugo，这个系统是golang写的，所以编译安装我很熟悉。非常容易就搞了起来。下面就是适配问题了。
首先是评论。我已经把评论迁移到了disqus上面，所以不需要考虑评论问题。只要新的blog的url和老的差不多就行。同时，这样也会对前面索引了我的blog的搜索引擎比较友好。
然后是原始数据。我有一份去年2月时的备份，但是没有wordpress去运行它。（试过安装，非常麻烦）很幸运的，我在网上找到了某篇如何将备份数据转换为hugo数据的文章。脚本是python的，就是非常简单的xml解析转换到文件写出。所以用他的脚本做了一下简单的修改，基本就做到了保持url一致。在hugo转换后，基本就像原来的blog一样了。
只有一个小问题。我的文档转换出来后是/结尾的，而原来的url最后没有/。这对搜索引擎不是什么大事——反正会自动跳过去。但是disqus就不认了。所以我做了另一个小脚本，对disqus的url做了一次mapping。
最后就是把整个内容部署到github上了。这里基本没什么技巧，除了我需要用CNAME文件来让github接受我的域名。
好了，现在blog就先这么放着吧。</description>
    </item>
    
    <item>
      <title>Pulau Perhentian</title>
      <link>//blog.shell909090.org/blog/archives/2836/</link>
      <pubDate>Tue, 21 Jun 2016 14:52:23 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2836/</guid>
      <description>废话不多说，上干货。
这次有朋友在Kuala Terengganu，所以所有过程都是他帮忙安排的。先特别谢谢ching jun。
Pulau Perhentian（停泊岛）在Kuala Terengganu旁边。我们为了省钱，是从PVG（浦东）在HKG（香港）转机去的KUL（Kuala Lumpur，吉隆坡），来返大约2000RMB出头。前程航班是港龙，后程是亚航。在PVG居然给我们直接把票全办好了，到香港直接Transfer就行，不需出入境。印象里这都是同家公司的联程业务。无论如何，这大大方便了我们，所以香港基本就是买买买。
Kuala Lumpur有两个机场（其实是一个机场，两个航站楼），两者之间有Express连通。我们去的时候Express没开，所以坐的teksi（习惯一下，taxi的大马拼法），非常贵。建议可以试试Uber。
我们在Kuala Lumpur过境一个晚上，所以没有找酒店，直接在KLIA2下面找了他们的胶囊酒店。单人间6小时80RM，12小时110RM。价格便宜，但是环境也没多好。没有空调，风都靠排风扇。所以开了就吵，关了就闷。鉴于外面持续有人进出，建议直接上耳塞，开着排风扇睡觉。厕所和洗漱都还不错。住起来肯定是不舒服的，但是确实非常方便。我们6小时的停留时间，还包括了出境，走路，找地方。真找酒店就别睡了。
第二天从KUL起飞去KBR（Kota Bharu），KLIA2是廉航航厦，所以里面人头攒动是必然的。我们提前冲过去，居然进了急客。而且急客居然还排队。我们后面的当地人说他着急能不能。。。我们说我们都很急。。。KBR是一个超级小的机场。没啥好说的，出门，叫一辆teksi，开到Kuala Besut。开了将近一个小时，正好我们睡了一下。凑合吃了个早餐，我们就从码头坐船去Pulau Perhentian。
初来乍到，我居然不知死活的坐了船头。你妹，整个船晃的像人民公园的海盗船，而且我TM的还没有保险带可系。船稍微一加速，我就坐成了海豹队员抢滩登录的冲锋姿势。周围所有能抓的杆子全抓上，整个人还一次次的往船舱上砸。等下船，手麻了，而且还蛋疼。
反正不多说了，有空去的人自然能体验到这种感受。良心建议，坐船要靠后。
我们到达的是Pulau Perhentian Kecil（小停泊岛）的最西侧的海滩，当地一家叫做Shari-la Island Resort的酒店。连栋别墅，AC房，住宿环境还行。就是离潜店比较远。潜店是一家叫做Quiver Dive Team的店，就在Shari-la Island Resort的下面。我们有四个OWT，一个AWOT，就我一个做FD。他们一天出三次船，8点半，12点半和3点半。
附近我比较有印象的潜点有这些（注意，以下都是以我去的6月初为基准，能见度和温度会随着时间发生变化。普遍温度都在30左右，下的时候连湿衣都没穿）：
Sugar Wreck 5° 53.504&amp;rsquo; N, 102° 41.996&amp;rsquo; E Max: 18, Avg: 13, Vis: 10-20
离岛大约20分钟的位置，10年左右的一艘沉船，已经坍塌了。下过两支气瓶，一瓶能见度一般，10米左右。一支能见度很好，20左右。洋流不大，毕竟下面是好大一条船，可以挡住海流。海洋生物很丰富。有一次还看到了一条鱼正在。。。poop。。。
D Lagoon 5° 55.972&amp;rsquo; N, 102° 43.407&amp;rsquo; E Max: 14, Avg: 10, Vis: 15-20
能见度比较高，在一个海湾沙滩的外面。内侧是珊瑚礁，外侧是广阔的沙地。鱼类活动一般。
Temple 5° 57.571&amp;rsquo; N, 102° 39.658&amp;rsquo; E Max: 18, Avg: 11, Vis: 15-20</description>
    </item>
    
    <item>
      <title>唐僧被吃了</title>
      <link>//blog.shell909090.org/blog/archives/2835/</link>
      <pubDate>Tue, 03 May 2016 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2835/</guid>
      <description>唐僧被吃了。
本来不应该发生这样的事的。
正常来说，悟空会随时在师傅身边保护。要逃过悟空的眼睛，几无可能。因此唐僧的安全可以说是固若金汤。但是事有凑巧，今天是悟空回天庭报道的日子。由于悟空当年大闹天宫，被压在五行山下。今日戴罪立功，属于假释。所以按照天庭假释管理办法，需要每个月向天庭报道一次。当然，正常来说这种事情也就是走个过场。天上一日地上一年，每月报道一次是按地上时间计算的，所以在天上就是每个时辰出现一次，日夜不休。天庭监狱管理委员会的工作人员也受不了这个繁琐，所以文书手续，验明正身一概抽查。正常而言只要猴头出现，就算过关。
但是今日，玉帝闲来无事，要去隔壁礼部视察。礼部主事和刑部尚书关系交好，于是偷偷通知了刑部尚书。万一玉帝没事干，出了礼部进刑部，那就是天大的麻烦。所以各种见不得光的事情都要收起来。因此悟空这几个月的报道格外麻烦。
为此，悟空特意驾筋斗云前后看了一圈。附近地界太平，没有什么妖孽。又召出土地来问过，再三确认安全。于是向二师兄三师兄好好叮嘱了一番，这才上天庭报道去的。
然后唐僧就死了。
如来很生气，后果很严重。悟空队还没排到，就被监狱管理委员会的人扣下。西天联合天庭，成立天庭取经事故联合调查委员会，由迦叶尊者任首席调查官，主持调查工作。太白金星出任首席行政官，代表天庭协调双方工作。
委员会成立后，首先对事情的经过进行了初步的调查，基本排除了悟空伙同外人作案的可能性。于是委托太白金星对悟空进行谈话，说服其配合委员会的工作。在这次谈话中，悟空才初次知道师父去世的细节。
据天庭取经事故联合调查委员会的初步查证，事故是这样发生的。唐僧师徒行路到一半，看到个牌子，上面写着，大雷音寺，左转向前，还有28公里。于是唐僧师徒毫不怀疑的左转。结果前方并不是大雷音寺，而是小雷音寺。唐僧师徒住下后，唐僧在沐浴时不慎撞到头，昏倒在池内。童子问水是否够热无人回应，误以为客人喜欢热水。于是添足柴火，三个时辰过去，唐僧师父被煮成一锅老汤。。。
太白金星话还没说完，就被悟空飞起一脚踢倒。还没站起身，就被悟空楸住领子：老官，你扯的什么鬼话。哪里有人会呆呆被烧一点动静都没有的，我师父又不是木头。这种鬼话就是骗童子都不够，你真当俺老孙呆子不成！
太白金星连忙求饶：大圣，大圣，听我一言。当初调查委员会的人也是不信，可是小雷音寺的人说，西方有科卡罗斯煮死米诺陶斯，那米诺陶斯又不是呆子。为什么唐师傅的事就不可能是意外呢？
悟空冷笑一声：就算是意外好了。他们装成大雷音寺，骗我师父入住，这才能不动声色煮死我师父。这冒充大雷音寺的罪过，总不是意外了吧。
太白金星又说：这个我们也调查过了。对方拿出一份西天颁发的“关于鼓励信众自行传教的规定”，其中第一百七十三条第五款规定，为了传播西天教义，允许采取各种形式。因此小雷音寺的信众们就采用模仿大雷音寺的方式，向民众宣传大雷音寺的尊严。
大圣顿时哑口：这种事难道教务办不管么？
太白金星道：教务办哪里有空一个个检查信众自行传教的细节，最多也就是出了岔子找出首恶而已。实在乱子搞大了，了不起再出一个“关于禁止信众自行传教的规定”也就是了。
悟空咬咬牙，再道：就算小雷音寺无事，那乱插路标，诱我师父前去之人呢？
太白金星拨开悟空手指：大圣，小雷音寺的人对我们都拿的出“关于鼓励信众自行传教的规定”，对着人家自然也是拿出规定，说为了弘法，故此需要改标线路就是了。
悟空双手抱胸坐下，翘起二郎腿冷笑：天下哪里有为了弘法，把正法指向邪路的道理。必是此人见钱眼开，没细细核对文件之故。
太白金星道：悟空，你又何必固执。他又不是吃你师父的首恶，你何必和他过不去。要说细细核对文件，你前几次的假释报道，似乎也是核对不全吧。
悟空轻叹口气：师父也许呆，俺老孙却不傻。小雷音寺敢仿大雷音寺而无事，显然是背后有人不希望我师徒前去西天。因此调查报告里鬼话连篇，就是不敢指摘背后之人的不是。我待罪之身，哪里能左右这些。俺老孙唯一能左右的，便是此为虎作伥之人。若不是他从中作梗，哪里来这许多事。周围乡邻，难免也为其所骗，拜错菩萨。难道你认为他无罪？
太白金星微微一笑：非也非也，大圣你这么想是再好不过。
悟空微微一愣：怎讲？
太白金星道：既然小雷音寺众人无罪，这桩事总也需要个了结。你是观音菩萨保举，若说是你玩忽职守，大家面上不好看。西天的意思是，此人擅做主张，引诱唐僧师父到小雷音寺，以至招待不周，发生意外。此人负有不可推卸的责任。大圣你再做污点证人，说他当初也为你指路，并无什么不妥。以至于未曾察觉。
悟空怒道：合着你们就是找我坑替罪羊来了？
太白金星道：大圣，大圣。你不刚刚还主张要严惩此人？如今随了你心意，你又要怎样？
悟空呆若木鸡，不知如何自处。
PS：其实昨天就写完了，拿给霍叔叔看。霍叔叔说，你这类比太绕了。我说好，我想办法改改。结果还没等我改，取经事故联合调查委员会已经宣布了调查结果。再等下去怕是连西游记都要被查禁。所以赶紧出一版，大家凑合看看吧。</description>
    </item>
    
    <item>
      <title>三亚潜水体验</title>
      <link>//blog.shell909090.org/blog/archives/2832/</link>
      <pubDate>Mon, 11 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2832/</guid>
      <description>最近去三亚玩了，我就说潜水吧。
水况 潜水地点是在分界州，水不算太好。水下景点一般在深度5-15米范围内，有两艘沉船，一个飞机残骸。小沉船离岸比较近比较浅，水深不超过10米。大沉船需要再游一刻钟，深度15-18米左右。飞机残骸也差不多深度，不过只看到一点。水下危险生物包括狮子鱼 ，石头鱼 ，棘冠海星（魔鬼海星），水母。这次潜导在水下就被水母蜇了，被蛰的还很神奇。他下水就戴了面镜，升上水面就开始痛了，还被蛰在眼皮上。到底水母是怎么进去的就鬼知道了。不过问题也不严重，痛了一会就没事了。
能见度分别比较大。在10米左右有一个明显的分界面。在分界面上，能见度大约是10米左右，下面只有3-5米。从上面明显能看到下面像一潭池塘一样。水底温度21-22度。我去的时候是四月上旬，所以只能代表这个时间点的情况。据说6月前后的时候能见度会好很多，水温也会比较高。亚龙湾和蜈支州的情况据说要好点，不过从我看到的水色来说，估计好不了太多。
洋流情况还好，0.5m/s以下，一般都不构成问题。那天浪在0.5m左右，水面上有点晕。周围潜水环境还行，只是偶尔有人炸鱼，可能有巨响。另外水面上有摩托艇在开，和潜导分开的话，没有SMB上浮会比较危险。
潜店 这次潜水是走的 中仁潜水 的持证fun dive，价格是880两支气瓶。价格包括接送，上岛费用，一顿午饭。还包括了海豚表演门票。但是fun dive来说，根本没时间去看。
BCD，fin，regulator是潜店提供的，他们问了我的身高体重来配fin和防寒衣。不过防寒衣是岛上提供的。我的体型比较大，所以穿了他们最大的防寒服。5mm的，比较适合水况，也很新，估计是穿的人不多的缘故。本来还问了我是否有度数，不过我的面镜和呼吸管是自带的，所以用不到。我还自带了3mm的手套，考虑到这里的水下危险生物，这个举措其实非常明智。
岛上有免费的更衣和冲凉，但是寄包要20元。气瓶是中潜自己打的，一般都超过200bar。但是配重是公用的，比较烂。
我们潜FD是岸潜，水面游动100-200米。DSD有一个平台，跳下去就行。平台那里比较浅，据说在5米左右。
三亚潜水 除了分界州外，我还去了一趟亚龙湾。在那里，我碰上了三亚名产——体验潜水。
下车之后我就看到有人在做潜水培训。仔细看了一下，是一个潜水体验旅游的报名点。名义价格是400左右。我仔细观察了一下，整个点没有任何标志。没有PADI或者CMAS的标。
在我吃饭的时候有人过来拉生意，鼓动我们潜水。我直接说我是PADI的持证潜水员，然后他就消失了。
不做任何评论，大家自己分析。
注意，在三亚海滩上是有打着PADI标志的潜店的，在PADI上也可以查到这家。不要以为我说的是他们。我其实在他们店里休息过一会，听了他们和客户的一些对话，觉得他们做生意还基本不过分吧。</description>
    </item>
    
    <item>
      <title>潜水的一些简单解说</title>
      <link>//blog.shell909090.org/blog/archives/2829/</link>
      <pubDate>Fri, 25 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2829/</guid>
      <description>潜水的乐趣 潜水好不好玩？不好说。这得看你是不是喜欢潜水。不同的人在潜水中获得不同的乐趣。有人喜欢看鱼看珊瑚看沉船，有人喜欢水下漂浮的感觉，有人甚至只是泡妹子/帅哥。是的，潜水者里帅哥/美女的比例极高。因为潜水很要求体力，所以大部分人身材都很好，像我这种胖子绝对是少数(不过在学校里我看到了另外一个胖子，比我还夸张，衣服都是自带的)。我甚至看到一个学着学着潜水泡上了教练的妹子。。。
是否适合潜水 潜水的一般性要求是10岁以上，没有心血管疾病，癫痫什么的。细节可以去PADI网站上看一下。通常对于休闲潜水而言，大部分人都应该是没问题的。这里只说几个上面没有的问题。
不会游泳能不能潜水？
咳咳，我就不会游泳。
潜水对游泳的要求是，能在水面上游动200米，或者在水面停留10分钟(我记得是这两个值)。这基本和会游泳没什么区别——除了通过条件。考核这项的时候，是允许你穿着防寒衣在海水里考的。这等于让你穿件救生衣问你会不会游泳一样，我想大多数旱鸭子的水性还不至于糟糕到这种地步。糟糕到这种地步的，坐船都要额外买保险了。
但是会游泳还是非常有帮助的。如果会游泳的话，在水下移动的时候会很有优势。所以建议还是去学一下游泳。当然，你可以学以潜水为目标的游泳——主要就是不用换气。不求游多少距离，没气了站起来喘完了再游也行。
潜水的另一个要求是胆大心细，遇事冷静。在水下碰到状况，很多都只能靠自己。所以胆子要大，但是遇事要冷静。
当然，冷静谁也说不好。有的人平时也挺冷静，碰到大事了就突然反应不过来。大多数人都是这样，也不用不好意思。至于胆量，有个很简单的测试。找一个游泳池(当然，是淡水)，3米以上，脚够不到底的地方。不穿救生衣，从岸上往下跳(注意，很多泳池禁止你这么做，请首先咨询管理员取得许可)，跳下去之后游回岸边。捏着鼻子插筷子也好，摒气也好，随便你。看你的胆子和游泳技巧是否能够做到。如果做不到，例如不敢跳，或者跳下去根本不会游上来，那就不要费劲了。你跳下去不是潜水，是去找死的。
技术解说 携带呼吸装置潜水其实只有一个要点，就是呼吸。除此之外的东西都只能算是技术，学了肯定能会的那种。例如怎么组装备，规范动作怎么做什么的。智商没什么太大问题都很容易。
可能很多人会首先说耳朵的问题。耳压平衡是潜水基础中的基础，一上来就会讲的。在水下做了平衡就不应该耳朵痛了。像三亚名产，不做平衡告知就丢下水，10分钟后耳朵痛就升水，那是道德问题，不是技术问题。如果学了耳压平衡但是做不到，那平时坐飞机都应该有问题，你需要检查内耳疾病。
呼吸之所以重要，是因为呼吸关系到浮力。会游泳的应该有体会，浮在水面的时候，吐气就会下沉。潜水的时候也是一样，吸气上浮，吐气下沉。听起来很简单，但是水里需要呼吸不停，而且由于游动，呼吸量还不小。这种情况下如何保持稳定，就是一个非常有技巧的事情了。技术上说，这叫中性浮力。好的潜水员甚至可以靠呼吸停留在沙滩上十公分处，既不接触，也不浮上去。
潜水的时候，身上的气瓶是负浮力。防寒衣虽然是正浮力，但是不足以平衡气瓶。如果只穿这两件的话，就必须不断踢水，停止踢水就会下沉。所以身上会背一个充气背心，来抵消气瓶的浮力。这样通过向背心内充放气，可以将全身的浮力和重力抵消到1公斤以内。人的一次呼吸一般潮气量在3000左右，换算成浮力有三公斤左右的波动，这样就可以通过呼吸来控制上升下降。一般操作上还会额外配一些配重，然后通过背心的浮力抵消配重。这样一方面在下潜的时候允许通过放气变的更重，可以有更大的余地。另一方面，在遇到紧急情况的时候，也可以通过快速脱下配重浮出水面(警告，这样很危险，容易产生减压病或肺部过度扩张)。
浮力的难点在于，呼吸对浮力的影响是瞬时的，但是你很难感知现在是正浮力还是负浮力。你能发现的只有浮力对深度的影响，现在是往上飘了还是往下沉了。这就像顶杆子一样。你不能感觉到力，只能感觉到位置变化，不断调控。而呼吸要影响到深度，至少需要1-2秒的延迟。而且等你发现的时候，往往像火箭一样，停不下来了。好比上浮，吸一点气，我擦没反应啊。再吸一点？哎呦沃草升天啦。赶快吐气，我擦快停下，快TM升水了。好了好了。。。等等，我擦怎么变砖头了？再来。。。等你折腾一会，教练会让你看一眼压力。靠，没气了，升水吧。
理论上说，要找保持悬浮，需要找准平衡气量，在这个范围内小幅呼吸。但是在不同深度下，充气背心的浮力是会发生变化的。潜水到后面，气瓶里空气不足，也会产生额外的浮力。你需要不停用经验发现现在的平衡气量是多少，围绕着小口呼吸，甚至有的时候需要充放气来重新平衡一下。
中性浮力是很多东西的基础。例如在水下摄影，如果浮力一塌糊涂，一呼吸相机都抖成中风了，潜水又禁止憋气。那还照个P啊。从珊瑚上游过也是，如果浮力控制不好，要么离很远，要么你就会直接在珊瑚上砸出一个人型的坑。
PADI的技术路线 PADI的入门课程从小孩开始(骗钱从娃娃抓起啊)，我们这里只说大人的。
最低的是SCUBA Diver执照。一次体验潜水，然后做泳池课程和基础训练，再潜两次就能拿到。这个执照能潜12米深度。
大部分人应该没听说过SCUBA Diver执照。因为只要再多两潜，几乎不需要额外课程，就可以拿到OpenWater执照(简称OW)。大部分人会直接潜水五次，拿OW执照。潜水深度从12米提高到18米，这样就可以去大部分地方潜水玩了。
OW再往上是Advenced OpenWater(简称AOW)。AOW在拿照方式上和OW有本质性区别。OW是固定课程，你想不想，五节课都要过才能拿证。AOW是一堆专长，两项必修的，其他再选三项，就能通过。总计来说需要潜水五次，两次超过18米深度。完成AOW执照后，可以潜30米深度。
上面这些深度什么概念呢？例如某次我们潜的Greenrock，一块大石头，三个顶部。最高的地方7米左右，最低30米没到(印象里的资料，可能不一定准)。SCUBA Diver的话就只能看三个顶部。OW的话就能绕着大石头一圈看岩壁和缓坡。AOW的话可以在石头底下绕一圈——正好有个班戟鱼的窝。所以很多点其实大部分执照都能下(甚至包括体验潜水)，但是不一样的执照看到的东西会有差。除非你打算只去深度非常小的地方，否则执照当然是越深越好玩。当然，以休闲潜水来说，40米的深度还有很多地方去不了。但是安全起见(也是为钱包的安全)，暂时就这样满足了吧。
然后就是AOW的一堆专长。例如我修了一个鱼类辨识(看着很扯淡，其实就是看鱼玩)，一个深潜，一个水底导航，一个沉船，一个顶尖中性浮力。其实大同小异(骗钱也是不手软哦)。除了告诉你一些技巧外，主要就是在不同环境下潜水。等潜水次数多了，自然就熟练和有信心了。
AOW和AOW以下的执照，加大部分的专长执照，其实都不难拿。有钱，有闲，也就差不多了。甚至都不必须考。例如我需要去夜潜了，现场找潜店把钱交掉，题做掉。然后就可以带着去了，回来就拿到证了。无非也就是哪里拿的证和多少钱的问题。
注意我说大部分。AOW有个专长叫潜水摄影，是问的最多的专长。尴尬的是，这货的难度非常高，我不知道为什么这货会进AOW专长课的。考这玩意一般需要学上几个礼拜，比DM都简单不了多少。当然，买的下潜水相机的人而言，倒是不会缺钱的。
其中还有一个特别的执照，Nitrox，高氧潜水。高氧主要是用于长时间潜水，减少残氮量的。这玩意不是长时间潜水几乎不会用到。高氧的特别之处就在于，一，高氧潜水有额外风险，二，你可以拿高氧去潜深潜，从而一次性多拿一张执照。
特别重复说明一点，并不是说氧气含量高了就能潜的深。恰恰相反，氧气浓度越高，潜水深度越低。纯氧在水下六米处吸了就有很大可能会挂掉，反倒是EANx32(氧含量32%)的氧气能允许你潜深33米。高氧的唯一目地就是减少残氮量，从而增加你的免停留潜水时间。这方面详细情况，我会写一篇关于高压空气的话题。
要不要修哦？如果你可能会单次重复潜水，次数很多的，深度很深的，可以考虑。因为气比免停留时间还长。如果是一天两潜，深度又不高的。免停留时间本身就够，你要高氧干什么呢？急救？
AOW再往上，潜到20左右，可以去出一张RESCUE的证。这张还要配修EFR的，贵的要死，不过基本没啥用。RESCUE是你能救别人，不是别人能救你。但是尴尬的是，又不是因为你有RESCUE执照就能带人潜水了——恰恰相反，你自己潜水还是需要人带的。而万一出了问题，正常来说带你的那个人急救资格都比你高(也肯定比你熟练)。那这张证能干嘛呢？在带你的那个人不在的场合下——例如不在潜水的时候——救人。
你妹，不如说让我TM学游泳救人算了，还用的上点。
潜够40，可以开始考DiveMaster(潜水长)的执照了。这个执照非常难，一般都要70潜以上才考出来。因为AOW和DM的差别就是业余和专业的差别了。在过了DM之后，你潜水就不需要人带，可以自己约潜伴了。
我暂时还没搞明白，DM是不是能带AOW或者OW去潜，还是AOW或者OW必须由OWSI带。反正我碰到所有的DM都拿到了OWSI。
DM再往下是专业线了，我记得不是很清楚，自己看吧。反正拿到这个证的，课程都远比这点发展线路复杂了。
潜点选择，交通和成本 每个潜点都有一些特点。例如珊瑚(珊瑚周围往往有大量热带鱼)，石缝里的鳐鱼，海鳗，天然形成的洞穴，沉船等等。这些特点往往会对应不同深度。有的时候证不够就没什么必要去某个潜点——好比koh tao的Sattaukt这个点。沉船的位置在水下24-30米，没有AOW的证根本去不了，只能在上面远远看着。还去干嘛呢？不如去隔壁的Whiterock钻洞。还有一些点，会在特定的时间形成特色——例如鱼类季节性孵化和成长的时候。这些也需要提前搞明白。
所以要到一个潜点前，需要查潜点地图，搞明白每个潜点的特色，需要什么证书，并且提前约好潜店和潜伴。不同潜店不同时间会去不同的点，有的潜店甚至需要提前预约才行，否则当前是没有船去的。至于约朋友——要知道，潜水行程意外太多，凑不齐人不奇怪，凑齐了才是意外。要潜店约一堆人容易，自己约朋友就纯看运气了。就算平安无事到了地方，万一碰到感冒就只能扫兴而归了(我不大建议吃通鼻子的药去潜水)。所以要珍惜每个和你一起潜水的朋友，能碰上是多大的缘分啊。
每个潜点也会受到交通方式的影响。近海的潜点可以船潜或者从岸上下水，但是稍微远一点的，十有八九都要船潜，甚至需要船宿。这时候需要考虑自己是否受得了船宿的晃动和晕船。
还有，来返潜点的交通方式往往用飞机。但是潜水18小时内是禁止坐飞机的。所以假期短的话，会耗费大量时间在潜水以外的时间上。这会使潜水成本大幅上升。建议能准备一些不潜水也能玩的地方来填充时间段，同时尽量准备长一些的假期。
装备 作为入门，一般你不需要买任何装备。大部分潜店都会租装备给你。大多数情况下，自带装备的运输费用(和劳动量)会比租装备还贵。唯一例外的是有戴眼镜的人的潜水面镜。潜水不能戴眼镜(废话)。为了安全起见，也不建议戴隐形(做过全面镜脱着的应该知道为什么)。所以建议你买一副潜水镜(注意，要罩住鼻子)，然后凭你现在的眼镜度数去配光学玻璃装上去。
如果体型特别巨大(脸好疼)，可以考虑买自己的防寒衣或者全身式潜水衣。以免你想借却借不到的尴尬。水鞋没啥必要，反正一般常潜的脚底都应该够厚了，不常潜的买了你也用不上。
如果经常潜水，例如一年五潜以上，可以考虑买一支自己的潜水电脑表。入门的也就千把块。自己的潜水表可以记录自己潜水的精确数据，潜店的装备里一般不会包含电脑表(除非租高氧气瓶)，而压力表上连的那个二货往往功能有限不说(例如无法设定高氧)，你也不能连着调节器一起拿走啊——那还不如直接买电脑表呢。
值得初学者考虑的装备还有能在水下写字的板子和笔，水下的哨子(或其他声响设备)，潜水手电。水下不能说话，通讯全靠手势。万一碰到手势搞不定的问题，不想升水只有用白板了。不过这种例子一般不多见，反正我潜了十多回就碰到一次，还是在水下考鱼类辨识。哨子非常有用，方便通知别人让他们看你手势。但是这玩意常规也不大用，一般只有DM叫人的时候用。如果有上过夜潜课的话，潜水手电也可以考虑入一个，大不了平时当普通手电用。
一般好像很少有人会自带BCD的。我见过一起潜水刷瓶子打算考DM的一个妹子自己有一个背飞的BCD，但是实话说没感觉哪里必要。先不说价格，每次潜水回去的时候把BCD洗好收起来都是个大麻烦，更不提带来带去的重量。调节器也没见有人自备的，一般拿船上的就行。自己的还要定期找人检修维护，万一哪个岩石卡一下又要心疼半天。倒是O-ring可以自备几个，以免气瓶还在，O-ring没了。
倒是很多不在装备清单里的东西很值得备一个。例如防水包。在船潜的时候，潜水日志啦，眼镜什么的要找地方放，还要防水。有个防水包会非常方便，还能放放衣服。还有，如果晕船的话，最好准备一些不嗜睡的晕船药。有的潜店会准备，但是有的潜店就不会管这个了。别以为自己不会晕船，你试试多潜几次再说。</description>
    </item>
    
    <item>
      <title>一个有趣的问题</title>
      <link>//blog.shell909090.org/blog/archives/2822/</link>
      <pubDate>Thu, 25 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2822/</guid>
      <description>前面给公司出了一个有趣的问题，似乎没采用。所以现在放出来大家看着玩玩。
以下代码在python2中适用。python3请看尾部注释。
import os, time data = range(10000000) pid = os.fork() if pid &amp;lt; 0: print &#39;error:&#39;, pid os.exit(pid) if pid &amp;gt; 0: os.wait() os.exit(0) sum(data) 在第2行执行的前后，使用ps和free观察内存使用情况，可以看到进程使用了320M内存，系统被占用了320M内存。在3行执行后再观察，有两个进程分别占用320M内存，系统总计被占用了320M内存。 问1，为什么两个进程分别占用320M左右内存，系统总计占用数并没有翻倍？这种现象叫做什么？
在10行执行后再观察，有两个进程分别占用320M内存，系统总计被占用了560M内存。 问2，为什么sum增加了系统内存占用，解释其开销。
问3，推测出python整数对象长度和当前CPU字长。（python自身的内存开销忽略）
答1. 这种现象叫做COW，copy on write。在fork后，两个进程会共享内存表项，一致的部分会仅使用一个页面。
答2. 每个进程的内存占用都没有上升，但总内存占用量上升了，这必然是发生了页面写时复制的结果。页面写时复制必须写入内存，因此推测python使用引用计数 手段控制对象生命周期。当sum时，每个对象都要被读取。在读取前，系统会增加其引用计数。在这个过程中会发生页面写时复制，导致系统内存占用上升。
注：内存复制必须发生在写时刻，说读取导致内存复制的统统不得分。答出引用计数四个字即可得全分。
答3. 在写时复制时，数字对象会增加引用计数，而数组对象不会（准确的说，数组对象本身引用计数会增加，但只有一页会发生复制）。发生复制增加的内存有 240M，因此整数对象长度24字节。未倍增内存有80M。对象有10M个。因此推断指针长度为8字节，当前CPU字长64位。
注：python3里有几个不同。首先，range返回了一个生成器，所以需要改为data = list(range(10000000))。其次，python3中，int长度为28，pointer长度为9。因此下面的数据会需要调整，而且并不很容易解释。</description>
    </item>
    
    <item>
      <title>一次升级故障的排查</title>
      <link>//blog.shell909090.org/blog/archives/2820/</link>
      <pubDate>Fri, 19 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2820/</guid>
      <description>问题描述 前两天，我收到了 USN-2900-1 通知，glibc上有个严重漏洞，可导致DoS或（可能性的）执行任意代码。这个USN对应的CVE是CVE-2015-7547，我相信很多人应该听说过这个漏洞，或者应该已经修复了。我也不例外，很快的推进修复了这个漏洞。收到消息6-7小时后，已经看到了 POC 。
OK，我们本次不是讨论这个漏洞本身的。在漏洞修复后，有一台设备报错，无法安装程序，wget都无法执行。很有可能是漏洞修补补丁导致的。由于这个机器很关键，目前很难迁移，所以我需要找到原因。另一方面说，如果无法明确原因，已经执行补丁的机器群将无法确定可靠性。因此无论如何，必须要研究一下原因。
出问题的机器是一台ubuntu12.04，修补的版本号为2.15-0ubuntu10.13。
处理过程 首先，CVE的说明表明这个漏洞来自于getaddrinfo调用。因此首先确定问题和这个调用的关系。使用python，import socket，然后执行任意一个socket.getaddrinfo。python崩溃了。这就说明问题很可能来自本次修补。当然，同时的测试中表明wget也会崩溃，但是dig没事。所以dig很可能并没有产生getaddrinfo调用。
而后，我使用strace和tcpdump追踪了一下程序。tcpdump表明一切正常，并没有人正在攻击系统，因而可以排除修补不妥当加正在被攻击导致的崩溃。strace中断在ioctl调用后，除了进一步明确当时正在进行DNS查询外，并没有给出太多有效的信息。
常规来说，下一步应该是gdb。但是由于apt无法执行，所以gdb装不上去。因此我跳过gdb，先翻了一下USN-2900-1补丁的细节。这个补丁里包含了所有ubuntu自己打上去的补丁，因而有点大。但是仔细看之后可以分离出CVE-2015-7547补丁的位置：debian/patches/any/CVE-2015-7547.diff（还有pre1和pre2）。仔细阅读修补代码，尽管对逻辑并非十分清楚，但是并没有看到什么奇怪的错误。结合剩下的机器并没有问题，我基本认为这个补丁是没问题的。
后面很幸运的，向才发现虽然apt-get update不行，但是apt-get install却没问题。不知什么原因，总之我们有了一个能用的gdb系统。通过gdb，我确定了出问题的代码行号。我本来想省点事，从补丁上直接读出出问题的行（eglibc-2.15/resolv/res_send.c:1303）。但是很遗憾，出问题的行本身似乎没有什么问题。（*ansp2_malloced=1;）虽然可以看出是ansp2_malloced跑飞导致了SEGFAULT，但是并没有提示为什么。所以还是得需要完整的源码。
然后就是debian包维护的基本功夫。首先用apt-get source libc6下载源码。再用dpkg-source -x解开文件。进入目录里，用quilt push -a应用全部补丁（细节看 这里）。这样就得到了和线上一致的完整源码。我本来想将整个过程在目标机上完成，但是目标机上却无法安装quilt（根本找不到这个包，由于apt-get update无法执行，我也无法修正这个问题）。所以最后源码的补丁是在我本地的workstation完成的。
无论如何，我按照gdb的bt输出，仔细核对了出问题的代码。问题确实是出在了ansp2_malloced，这个值为0。但是这个值是逐层传递的参数，传递的最后几行表明这个值都是0，而在前面，这个值是有有效值的。可是吊诡的是，在有效变为无效的过程中，指针并没有修改过。
这个值是在__libc_res_nsearch(resolv/res_query.c:331)里发生变化的。在这个函数里，这个指针叫做answerp2_malloced。根据gdb的bt，在函数入口上，这个数值不为0。但是到了第421行，调用__libc_res_nquerydomain的时候，就变为了0。而从函数入口开始按照顺序搜索answerp2_malloced，都是对指针的值的修改，并没有对指针本身修改。函数也是传递指针，而不是双重指针。也就是说，answerp2_malloced在一个并不可能改变的代码段中被改变了。
读到这里的朋友，有兴趣的话可以先不要往下看，先猜猜原因。这个神秘的现象直到我看到结果，才反推出来为什么。
原因 我在这里被卡了很久。后来在无聊中，往下看了一下bt。留心到其中某个函数并没有调试信息，因为这个函数所在的so文件位置不对。仔细一看，这是一个glibc的库，但是却在/usr/local/lib下面。
我X。是哪个孙子把系统库的部分拷贝到了其他位置，还改变了LD路径。。。拿一个版本的glibc和另一个版本的glibc库混用，不出问题才见鬼咧。把这个so文件改名后，问题立刻解决。
复盘 事后根据复盘。这个参数其实是为了修补问题，新加的。原本__libc_res_nquerydomain函数并没有这个参数。然后为啥能跑？这涉及到linux下C的入栈顺序。这里不讲细节，如果你有兴趣，先看这个。再往下看复盘。
根据调用规则，调用者首先会对现场压栈。他会将需要保留的寄存器入栈，以防子程序改变他们。然后他会根据C规则或pascal规则入栈参数。最后call指令会将当前IP入栈，并且转跳到指定地址上。以这里的情况看，应该是默认的C规则。
C规则的好处在于被调用者获得的是栈顶相对位置，其余参数向栈底依次展开（注意下面用的全部是栈底/栈顶，由于对口，实际内存分布一般是反过来的）。使用BP+8，BP+12这种规则来访问。因此调用者可以传递变长参数。无论你在实际参数之前入栈了多少个数据，只要调用者最后记得把这些数据出栈，就不会对执行构成影响。而pascal规则则不然，为了获得参数位置，被调用者必须知道传入了多少个参数。例如访问第一个参数，就需要用BP+4*N+4来访问（当然在编译时这个数字会被静态的算出来）。如果你在实际参数之前入栈了数据，那么被调用者就需要用-1这种方法去访问这些数据了。而如果在实际参数之后入栈数据，整个参数位置都会错乱掉。因此pascal规则一般被认为是不能传递可变参数的。
但是C规则的这个优势，在这里变成了问题。调用者的代码还是打补丁之前的版本，而被调用者的代码则是打补丁之后的了。因此__libc_res_nsearch将参数入栈前入栈的最后一个元素认做了最后一个参数。这个元素，可能是需要保存的现场，也可能是局部变量。
如果__libc_res_nsearch将现场当作了最后一个元素的话，将无法解释这个值为什么在后面发生了变化——被保存的现场一般来说是用于未来的恢复的，他们不应当发生变化。而如果是局部变量则相反，局部变量的指针经常被当作参数传递给子函数——这也是经典的C多值返回方法。
如果__libc_res_nsearch确实接受了局部变量的地址作为参数，他可能会向这个地址写入任何东西——例如0。这就造成了这个地址在调用时有值，但是在使用时值被清零，又找不到任何地方修改这个值的缘故。
当然，这里也有很多疑惑。例如局部变量顶上一般会保存被调用者需要保存的现场。无论如何，参数和局部变量之间一点现场都不隔，是件很奇怪的事情。而现场一般是不变的。对于这点，我没时间去反向源码并分析栈的实际情况，谁知道可以告诉我。
这是一个调用者（caller）的原型认知比被调用者（callee）少一个参数的结果。如果事实反过来，调用者的原型认知比被调用者对一个参数，那么代码执行将不会有任何麻烦。
事后分析 这个故障最主要的原因是有人将系统库复制到了/usr/local，并修改了LD顺序。
glibc确实是一个几乎没有改动的库，但是这不表示他不会改动。根据我这里的记录，在过去的一年半时间里，他改变了八次。有趣的是，最早一次改动也是因为getaddrinfo的漏洞做修补（USN-2306-1）。也许是运气好，前几次改动中并没有调整参数，或者对参数的意义做变更。因此老代码和新代码的混合调用并没有出现问题。然而本次修补就过不去了。
这并不是ABI的错——ABI承诺的是“向外暴露接口”，而libc中的内部互相访问显然不在其中——谁会承诺自己内部结构的ABI兼容性呢？那会让稍微复杂点的重构都无法进行。
根本的问题在于，为什么有将glibc中的一部分提取出来，放在/usr/local中固化的需求呢？（或者对glibc的实现做调整）而且从操作上，即使我们需要对glibc动手脚，最好将整个编译结果放在/usr/local中，完整替换全部的glibc库。当然，这个行为会使得glibc的修补补丁彻底失效。根据运行时错误好过逻辑错误的理论，这是一件比崩溃更糟糕的事。
更糟糕的问题并不在glibc上，而是这台机器的维护状态，还好这是一台开发用机，而不是在线机器。如果有人知道这台机器的LD被做过手脚，应该很容易能够想到这个问题的原因。但是在复盘中我询问多个人，都不知道这台机器被如此设定的理由，甚至没人知道如何维护这台机器。实际上这台机器的维护曾多次易手，其中有些人根本已经离职。即使尚未离职，也未必记得自己到底做过哪些事。而我也找不到任何相关文档表明这台机器被如何的维护了。这也是为什么这台机器不好迁移的原因——在机器上有太多明的暗的诡异的workthrough，要将其迁移到另一台机器上是件耗费人工的事。我维护的很多机器（帮朋友维护）也处于类似的状态。维护时间太长，经手人多次转手，上面很多设定完全黑化，要迁移需要付出相当代价，等等。。。
docker能解决这个问题么？ 不好说，这个问题有点复杂。
从本质上说，docker解决不了这个问题。因为一个workthrough，存在于整个系统中，还是存在于一片dockerfile的海洋中，其实没太大区别。如果我会跑上去就看dockerfile，然后从一大堆过程中一眼看出问题，那我也会在这次解决中先去看LD设定。最低限度，看bt的时候根本不用参考源码，往下看两行就知道原因了。而即便知道原因，这句cp存在于里面的原因仍然未知。我不知道为什么会把这个文件cp到/usr/local，无论是机器上实际存在的复制，还是dockerfile中的cp语句。最后实际有帮助的，还是在这句cp上注释的信息，或者机器上留存的维护文档。
但是docker是有帮助的。首先使用了docker起码好迁移了。当然，这不是他最大的帮助。
docker最大的帮助帮助并不是来自于能够帮助我简化寻找流程，或者知道原因。而是来自于减小系统规模，甚至可以将系统规模降低到需要的最小规模。在一个复杂系统中，寻找一个workthrough，或者知道为什么是困难的。但是在简洁系统就容易很多，非常多。
当然，将复杂系统拆分为简洁系统是有代价的，并不那么容易的。在这点上，我比较信奉熵增原则。在增大系统规模的时候，系统的熵永远是增加的。如果要降低熵，就需要对这个系统做功，无论从哪个方面。随着手段不同，做功只有大小差别，而没有一颗“一次解决”的银弹。从这个意义上说，docker并不能解决这个问题，他只是能降低你需要做的功。
而如果对某个系统做功并不产生实际效用（而只是为了将来可能性的维护便利）时，这部分开销就可能被砍掉。反正解决了问题并保持一段时间，相关人员可能就不再继续维护，或者高升，或者离职，或者根本转行。于是系统中（包括代码和维护）会不断产生各种workthrough，“将来要修”的承诺，和随着不断的人员变更不再有人记得的暗创。最后系统就会变成遗留系统，没人知道为什么，没人敢动，也不敢停。静静的在那里，吞噬一批又一批IT从业人员的青春，同时也产生更大的熵。</description>
    </item>
    
    <item>
      <title>关于程序员和产品经理两大世界体系的对话——论快播庭审</title>
      <link>//blog.shell909090.org/blog/archives/2816/</link>
      <pubDate>Mon, 11 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2816/</guid>
      <description>最近快播的段子都快传疯了。很多网友也在那里分析快播有没有罪，辩护有没有问题之类的。其实结果对我来说一点都不重要。快播有没有罪，这个留给法庭审判。我今天要说的是庭审所暴露出来的一些问题，一些我日常中经常看到的问题。
我们先看两个段子（其实基本是庭审里的事实）：
审判长问：文件加了密，你为什么不解密呢？
张克东：如果达不到一定的码率，快播软件就会启动缓存服务器开始加速，达到了码率，就会自动断开。
法官：软件它为什么会知道？它是机器人么？
也许有些人看到段子1，会喷国家审查啊什么的。其实这不是审查，而是无知。审查一定是懂行的，无知才会要人解密。至于段子2，也有类似的问题——码率的衡量问题在大多数程序员，甚至包括懂一点技术的用户那里都不是秘密。问“软件为什么知道”，实际上非常无知。
甚至同样的问题，也存在于某些网友的评论中。例如这篇。我引用这个评论段落：
我看到不少网友以此取笑法官如何外行。其实法官非常聪明，不管张克东如何回复，都回避不开“软件如何知道”，也就是系统如何识别片源问题,只要这个回答了,你快播就摆脱不了你”清楚”播放哪些视频的问题。
如果懂一点技术的话，应该明白一点。对软件而言，码率一定是知道的。而内容，则未必。或者换个对不了解技术的同学们更友好一点说法。对浏览器而言，网页上的图片的大小，格式，都是知道的对吧？浏览器也可以用来浏览黄色网站对吧？那问题也一样，软件它为什么会知道？
红衣主教，是不是该轮到你出庭聊一聊了？
同样，所有聚焦点在“软件应当可以监管浏览内容”的人，同时也面临这么个问题，浏览器是否可以监管黄色网页？作为处理数据流的软件，肯定是了解被处理数据的格式，大小，码率等参数的。那么处理软件是否应当对被处理的数据的内容合法性负责呢？如果是的话，那毫无疑问，所有黄色信息都必然经过了Intel和AMD两家生产的CPU，而且绝大多数也经过了Windows。
实际上，整个庭审中通篇都是法官和公诉人各种技术外行。例如用IP地址标识服务器，硬盘大小标识硬盘等等。如果在国外正常庭审，这证据其实就算废掉了。因为被告可以当场演示给你看改IP地址，你连服务器是不是他的都无法证明，还怎么构成证据链呢？当然，在中国来说，最后是否取信还是合议庭说了算的。
对于程序员来说，这个故事是不是很熟悉？是不是觉得和产品经理打交道很像？一样是对技术一无所知，却对一无所知不以为耻。我碰到过一个产品经理，自以为提了一个很犀利的需求——为什么我们不通过软件自动算出地址，还要客户自己填？
我听到这个问题的时候，估计表情和听到“为什么不解密”时的表情是一样的。心里一万头草泥马奔腾而过——合着不是你实现啊。尼马我怎么算？IP地址只能知道大致地区，还不一定准。GPS当时还不是每个浏览器都支持，就算支持也只能算出坐标，算不出地址。
很多时候，产品上的一点小小的改变，往往是技术上的翻天覆地。不信你考虑一个论坛系统，如果做到像腾讯那么大流量的时候会是什么样一个样子？再考虑一个交易系统，在同样一个量下是什么样子？前者应该还能做，后者应该已经没法弄了吧。为什么同样是个网站，同样的量，一个没事，一个挂了？
因为论坛系统是典型的无事务低写高读系统，因此可以使用分库分表，多层缓存的方法来增强性能。而交易系统是典型的事务，没法用这个手段。所以交易系统在海量压力下的技术难度，和论坛系统在海量压力下的技术难度，其水平和重点根本不是一类的。从这个意义上说，淘宝双11，很不容易。
而这种技术难度，产品经理是不知道的。所以他搞不好会给一个超大流量论坛提出一个很实在的需求——咱们弄一个内部交易系统吧，应该会变成不错的盈利点。呵呵。这个系统要么做出来会有各种各样的事务问题，要不然这个系统大量使用的时候，整个系统（做的好的话应该不会波及论坛）就会慢到无法接受。
当然，现实中一般是没有这么大论坛的。京东实打实在事务性能上吃过亏没错，但是那时候京东已经多大体量了？一个论坛，要引流过去那么大体量，自身得多大？但是这个例子本身说明技术难题的非直观性和在下判断时的必要性。如果你不了解这个技术本身会引发什么问题，你就无法得到合理的结论。
作为产品经理，或者要和技术打交道的一切人士。不懂技术并不可耻，可耻的是不懂技术又无视技术。既不去学，也不去问。装作技术不会对他产生影响，装作不懂技术并不影响他决策的权威性。
与此形成对比的，是微软垄断诉讼案中法官的表现。那个案子里，微软律师强调的是IE内核和windows系统的严密整合，导致两者几乎无法拆分。从软件架构角度来说，这没错。但是法官很明白里面的门槛——保留IE内核不代表保留IE。鼠标一点，IE直接从系统中干掉。虽然内核还在系统上，但是不额外安装IE的话，无法使用浏览器。如果没有后来的一些事的话，估计微软就难逃一劫了。
话题拉回到快播庭审的事情上来。快播有没有问题？排除色情非罪化（我支持内容分级审查和色情非罪化），我觉得是有的。就好像我们说**的时候，一般都会想到约炮。（由于某些因素，我不能写出这两个字来。但是如果你这两个字和我想的不一样，那你的问题就大了）如果快播没有放任色情传播的话，是很难做到这么大的，更不可能做到我们一说找XX内容就想到快播。这不能说因为检方派了几个猪队友，所以快播干净了。
但是这个问题是不是罪？这不好说。定罪这个事情是个专业性很强的活，我的法律知识不足以下这个判断。但是个人意见，我觉得应该无罪，至少不能拿缓存服务器上的色情信息来定罪。如果缓存服务器上有色情内容就可以定罪的话，那铁通小区宽带就可以直接去转型了。因为他们为了减少对电信的依赖，降低流量结算费。在小区里都是装了缓存服务器的，而且是强制透明缓存，想不做都不行。小区里有没有人看色情网站？他们为什么不人工看？
看，这又是一个不懂技术就不知道我在说什么的问题。对用户来说，可能铁通的感觉就是“不好用”。技术人员才知道，电信和铁通的流量结算价格问题，还有铁通（以及各种小ISP）的透明代理的存在。知道这个透明代理和快播的缓存是不是在技术上是等效的。
还有解密，可行不可行？对于快播来说，要解密应该是可以的。但是对于百度网盘来说，连解密都不行。我把我的一堆生活照在百度网盘上备了个份。为求安全，我用GPG做了加密，然后再用SHA256。我自己倒是问心无愧，但是对百度来说，里面到底是不是色情内容？我觉得百度要是还能解开，不妨把技术卖给CIA。</description>
    </item>
    
    <item>
      <title>云计算的成本计算</title>
      <link>//blog.shell909090.org/blog/archives/2813/</link>
      <pubDate>Fri, 18 Dec 2015 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2813/</guid>
      <description>成本构成和计算基准 一般来说，云计算的综合成本会分为三块。硬件，机房（包括机房内网络设施），运维。当然，其实还有IP费用和流量费用。但是那个在云计算的费用中一般也是分开列的，所以可以和以上三项分开算。我们先算出去掉IP和流量的费用，然后再来独立讨论这两项的效应。
在云计算中，CPU是可以超卖的，但是内存一般不超卖。所以我们计算的基准是内存。准确的说，是“带上其他硬件设备的内存”的单位价格。单位是人民币每G每年，缩写为/Gyr。在整个计算中，硬件费用都是来自dell美国的报价计算器，汇率恒定在6.5，折旧速率是5年。存储系统的折旧速度会比整机更快。存储盘3年折旧，SSD1.5年折旧。
存储是硬件成本中比较特殊的一项，因为每个虚拟机都带有存储，也可以额外配置。所以我们单独为其估价，再在整体费用中将其加回去。这样在估算价格时可以计算光板系统。
硬件成本 在这个计算中，我随意挑了一款2U机器——R530。这是一台最低型号的2U机器，不知道有没有人在实际生产中用他，总之我们就先随便算。这台机器极限能插8条32G的内存，总内存量可以高达256G，还是挺适合虚拟化的。因为机器总体有成本，单机内存数越高，原理上说越省钱。
撇开存储，撇开网络，内存升到极限，其实我们能选的就是一颗CPU。而且一般来说，CPU和内存需要成比例搭配。一般会选择1:4的搭配比，256G内存需要64颗核心。整个CPU搭配表上就没这么牛X的CPU。。。
好吧，退而求其次，看看稍微差一点的CPU如何。由于整机搭配的内存和CPU越高，整体价格越便宜。所以我们搭配一颗最牛X的核心——E5-2695 * 2。整个系统瞬间升到56颗核心。和64核也相差无几，我们就选他了。
相对的，整个机器既然配置了这么牛的系统，那么网卡就不能用默认的千兆网卡了。我选了两个双口光纤万兆模块，再加上一个1+1冗余电源。其他都用默认选配。计算下来，每G成本为56.2/Gyr。这差不多就是一个光板机器的最低价格了，里面不带任何其他费用。
另外，为了参考，我们计算一组CPU配足的机型E5-2670 * 2。这颗CPU是24T的，所以要配合192G内存。平均成本为60.47/Gyr。
IO密度问题 上面假定一台机器尽力往里插内存，但是实际上不能这么做。因为存储模型的问题。
我把虚拟化分为两种——单台机器故障的情况下数据不丢失，可以立刻在其他系统上开始启动系统的。和单台故障的情况下无法立刻恢复系统，甚至数据完整性都不能保证的。前者敢叫云计算，后者只能叫VPS。
为了达到后者，一般我们会把写入存放在多台机器上。而为了效率考虑，EC编码之类的方案几乎不能考虑。所以综合下来，唯一的方法就是将数据写入同步到另外两台机器上（三副本）。如果这个复制动作通过网络进行，那么写入速度就受到网络瓶颈。
例如上面的256G机器。虽然我选了两个双口万兆模块，总吞吐量高达40G。但是实际上你得假定可能有一根线故障，可用速率只有30G（如果是一个模块故障，更会降低到20G，幸好这不常见）。30G速率均分给256G内存，平均分给每G的吞吐只有120Mbps/G。折算出来就是15MB/s每G。这个速率要通过两份数据，分别传输给两台机器。如果用户不幸而选择了1G的内存，搞不好写入速度只有7.5M/s。要达到普通系统60M/s的写入速率，至少需要8G内存。这还没有计算机器到机器间通讯速率。
那么解决方案是什么？其中之一就是降低机器上的内存数。当然增加网卡也是一个方案，但是这会严重影响接入系统的效率——我们本来已经出了4根纤了，你想把服务器搞成八爪鱼不成？
如果内存数降低，那么单位内存上的吞吐速率就能提升。192G的吞吐是160Mbps/G，每G写入可达10M/s。内存降到128G的话，平均吞吐率就会升高到240Mbps/G，每G的写入速率可以提高到15M/s。如果降到64G，每G写入速率还会提升到30M/s。不过IO问题是个峰值问题。如果全系统都有大量写入，例如大部分实例都装了数据库，那么很不妙。不过如果全系统都是纯密集计算，那写入速度其实影响并不很大。为了对比，我同样计算了128G和64G的情况。但是这并不表示在实际搭建集群的时候需要使用低内存的机器。
有趣的是，在其他保持不变的情况下，128G的平均成本为59.44/Gyr，和256G的版本相差无几，比192G的版本还便宜些。64G却快速上升到94.25。这说明在一定内存数量以上，硬件平均成本受到内存密度的影响并不大，但是低于某个限制后，则快速受到影响。
另一个方案则是在服务器上采用40G网卡，4块40G网卡也能解决问题。但是网络会非常难做。因为上手就用了普通汇聚层的速率，所以如果要不大影响收敛比的情况下，汇聚和核心的速率要求会进一步提升。这种模型下，单位价格为62.55/Gyr。
当然，还有另一个方案。我们使用独立存储系统，例如盘柜。这样会带来两个好处。首先盘柜的光纤独立，因此会极大的提升网络系统的效率。其次盘柜的多份复制是自行完成的，因此并不需要在吐出光纤上传送两份数据。当然，我对这种方案不熟，所以下面没做深入计算。哪天可以把这个方案的成本模型算出来再写一篇。
下面我总结一遍上面方案的配比和成本：
256G + 10G * 4: 56.20/Gyr 192G + 10G * 4: 60.47/Gyr 128G + 10G * 4: 59.44/Gyr 64G + 10G * 4: 94.25/Gyr 256G + 40G * 4: 62.55/Gyr 注1：其实192G的版本用R730还会更便宜一些，低到54.40/Gyr。但是我们的目标是同类对比。为了减少环境变量，所以不讨论这种情况。
注2：其实128G的版本由于CPU比较节能，所以整机大约可以节约100W的电力。这部分在下面并没有被考虑，否则可能涉及机柜里会多或者少一台机器，计算会非常复杂。
机房成本 机房成本包括两块，网络设备费用和柜子费用。
网络费用很容易算，一个柜子一般是42U/10A/20A电力。撑死放5-10台服务器。一个服务器两口，也就是10-20口左右的交换机。选个不大夸张的机器，也就是1W差不多了。就算电力翻倍，机器翻倍，交换机价格差不多也是翻倍的。所以平均成本还是基本不变。
核心那里难算一点，一套核心要上百万，摊给全机房用。而且如果机器太多，可能两层交换量不够，还会用三层交换。那还有汇聚层的钱要算，大概又是上百万。
柜子的价格最难算。视地点不同，每个月从几k到十几k不等。每个柜子能放的机器，随电力状况和CPU功耗，从5台到15台(35A)不等。而且很多时候，公司的体量大小和谈判能力也会严重的影响到价格。
所以，为了简化上述计算，我直接硬把机柜价格指定为60k/yr[1]。300个柜子，每个柜子5台设备，1500台机器。核心加汇聚加接入，总数大约600W，每个柜子20k。至于为什么是这个数？不为什么，就是后面好算。
于是很容易就算出来，每机柜每年成本64k/yr。128G下是100/Gyr，192G下是66.67/Gyr，256G下是50/Gyr。40G光纤比10G光纤原则上要贵，因为起手就要用汇聚交换机，而不是接入级的。但是具体贵多少——很遗憾我根本找不到数据。推测是贵了至少5倍。
实际上，由于机房各种配比不一定能够达到最优状况，所以接入模型配比往往会比预期的高上非常多。而且机房成本也不一定能够控制在60k/yr的水平上。所以如果从业界实际角度考虑，这个费用的精确度大约会有20%的上下浮动。
参考 这篇文档 ，有的地方能租到这么便宜的柜子，有的地方不行。 运维 一套云计算平台，需要多少个人运维？</description>
    </item>
    
    <item>
      <title>说说密码和安全设计</title>
      <link>//blog.shell909090.org/blog/archives/2809/</link>
      <pubDate>Thu, 22 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2809/</guid>
      <description>趁着某站密码泄漏，我review了一下整个密码和安全系统。下面总结一下要点，大家可以参考一下。但是我觉得多数人无法照抄。
基础 假定
**会随时找我谈话。（不要以为不现实，想想我得分最高的项目） 手机是会丢的。但是窃贼不会攻击经济无关帐号。 设计
尽量使得问题只出现于局部，不会波及全部系统。 在不严重的情况下，尽量简化使用，而不是增加复杂性。 在“大部分情况下更严密，小部分情况更糟糕”和“平均化”的选择中。只要小部分发生概率不高，选择大部分情况更严密，并尽力避免小部分情况。 帐号体系 能用Oauth自动登录的尽量绑自动登录。能不自己管认证体系的尽量别自己管。 境外关键服务，应绑定邮箱，不可绑定手机。其余服务应绑定手机和邮箱。如果没有假定1，能绑啥绑啥。 集中绑定能减少帐号系统复杂性。其代价就是当基础手机/邮箱出问题时，后果会很严重。因此需要设计对应措施。 重要服务（尤其涉及钱）只能有一个绑定寻回，切忌绑了邮箱绑手机，还都能寻回。一个出问题，帐号很危险。 基础手机/邮箱之间严禁互相绑定，以防一个出问题全部出问题。 多个身份间不要串帐号。一个帐号体系和另一个帐号体系之间可以发生来往，但是不能发生混同。想一下妹子用自己手机号帮多个男的登记开房的事。。。 基础邮箱/手机的信任问题不是信任问题，是信仰问题。对应措施无法对应基础系统自身的问题，例如供应商恶意作恶，或者供应商出了问题。所以选择谁是个信仰问题，要仔细选择信仰。 OTP管理 能开OTP的统统开起来。把emergency token抄纸条上丟家里。 可以使用OTP的列表 。 上面的补充：Microsoft, CloudFlare，Slack，Vultr，Tumblr，Ifttt，Eveonline，阿里云, DigitalOcean，dnspod，btc-e。 ms家会让你装他自己的app。请在手机系统的选项里选other，这样他就乖乖出一个QR让你扫了。 OTP的保存时间和系统安全性有关。可信系统上可以保存一个月，不可信系统上尽量在一天以内。太长时间可以登录不需要输入OTP等于没有OTP。 密码管理 使用密码数据库保存数据。 密码数据库管理程序应彻底开源。 使用同步网盘保存和同步密码数据库（加密后的）。 要注意防护整个系统突然失效。从出现概率分析，系统失效概率比被盗概率要高。而一旦发生失效，你的大多数帐号就全都失控了。 手机上不应同步密码库，而应手工复制更新。以防同步系统出错清了所有副本。 可以定期将基础密码(主要是邮箱)抄出来，放在家里的角落里。万一不得已，可以对所有系统做密码寻回。 密码维护建议在同一个环境上进行(例如全是windows)，以防两种不同版本的软件冲突导致数据丢失。 不应在不可信系统上输入主密码。否则主密码和密码文件都会丢失，等于所有密码丢失。所以不要在不安全系统上使用密码管理系统做任何操作。 要谨慎使用粘帖板管理程序。保存粘帖板历史的程序不要开。 搞一个足够安全的系统随身。推论可知，系统越多，出问题可能性越高。搞一个足够安全的系统随身，可以避免万一的情况下被迫要在不安全的系统上输密码。 这基本就是需要你有一只足够安全的手机。 手机 如果手机有root，不算安全系统，不能使用密码管理系统。 注意手机上的“可以收取短信”和“可以访问剪贴板”权限。如果一个应用可以访问这两个，基本就可以访问大半密码数据库，并收取验证码。也就是可以在无察觉的情况下把某个帐号偷跑。 手机上保存的帐号尽量不使用手机寻回帐号，尤其是涉及钱的。如果帐号保存在手机上，而且可以用手机寻回。一旦手机丢失，拿到的人就可以长驱直入了。按照假定2，这很危险。 钱 银行卡升级到高密卡。低密卡的安全性问题就不说了。 目前高密卡还是可以按照低密使用的，这其实仍然不安全，因为复制后还是可以偷钱。增强卡安全需要全部系统强制废弃低密卡。 经济相关帐号需要一个“防止手机丢失”的手段，否则不应在里面长期放大量资金（可视为这笔钱会随手机丢失）。 支付宝的设计是“手机高于一切”。所以在“手机会丢”的假定下，直接出局。微信的设计也类似，所以也出局。 银行帐号，其密码无法通过手机寻回的，可视为安全。 如果能通过手机寻回密码的，有转出限额(无法通过手机更改)也可以接受。 吐槽 QQ现在要求我用申诉的方法才能改密。但是申诉需要三个以前好友的帮助。我TM从98年开始用的，连同学都没几个还在上了。你让我去找麻花藤来申诉啊。。。 支付宝本来还支持字母支付密码，后来直接改成了6位数字。手机应用本来还需要解锁，现在只在特定情况下需要输入手势锁。本来还有宝令，现在已经没有了。总体来说，支付宝的安全性是越做越差的。 在整个密码体系里，就属支付宝和微信的安全性最差，就属他们涉及的钱最多。 </description>
    </item>
    
    <item>
      <title>从青蒿素得奖说现代医学里的方法论</title>
      <link>//blog.shell909090.org/blog/archives/2806/</link>
      <pubDate>Fri, 16 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2806/</guid>
      <description>最近青蒿素比较火，首先恭喜我们终于有一个拿得出手的nobel奖了。
然而，很多人对青蒿素获奖的事情传播不准确，各种争论。例如，中医获奖了。实际上在青蒿素的获奖中，没中医太多事。要明白这点，我们首先就得明白，什么是现代医学，现代医学中有哪些基础的方法论。
双盲实验 双盲实验法是整个近代医学基础中的基础，说是基石也不为过。可能很多人被双盲法的名字搞糊涂了，整个双盲法的思考基础其实非常的简单直观而且科学。可以说，如果听了双盲法的概念后，表示不可以理解和接受的，都得算伪科学。。。
让我们从一个简单的问题开始。我们怎么判断一个算命的是不是有真本事？
最简单的方法，当然是让他算一下，然后我们找人去验证他算的对不对，进而得出一个正确比例来。这个方法固然简单，但是多少才算是“对”呢？这又陷入了另一个困难。
作为解决方法之一，在算命的算玩后，找完全不会的人胡扯一些算命结果，作为对比去验证。如果算命师的命中比例比瞎猜明显高，那就是真的算命师傅。如果和瞎猜差不多，那就是水货。如果扔出各种理由告诉你不能这么做，那么就是不可知。
这个方法很简单吧？通过足够多的实验，我们可以清楚的知道，哪些算命师是真货。
但是有个问题。算命结果的解读，是需要人进行的。而人会受到心理暗示的强烈影响。例如，你知道自己正在解读某位大师的算命结果，他是否吻合呢？有的时候往往模棱两可，你可能就认为其实是命中的。所以一般性情况下我们会让你对正在解读的是真的还是假的保持未知。类似，近代医学已经证明，如果你认为自己在接受治疗，那么你的病情有的时候会出人意料的好转，哪怕实际上你并没有接受治疗。这叫做安慰剂效应。因此，在医学实验的时候，被试者必须对自己是否真的在接受治疗一无所知。这叫做单盲实验。
而更进一步的，当实验的组织者了解哪组是真组的时候，出于利益因素他可能进行干扰。即便他本人并不进行干扰，有可能在日常的接触中给予了过高的期望，从而影响了实验的效果或者解读。这种现象在现代心理学中叫做 皮格马利翁效应 。如果你给予某个组过多的期望，那么他们就会表现的更好。为了防止这种现象，我们会让专门的人进行真假对照组分配，而对实验进行管理的实验者，在结论完成前对真假都是未知的。这叫做双盲（实验者，被实验者）。
可以说，双盲法并不否定算命。双盲法不假定你要做什么，也不需要理解其工作原理。相反，双盲法试图用一般人能理解的角度，来验证你行为的有效性。双盲法就是一个更严谨版本的“让我来试试效果”。
为什么要进行双盲实验 很多人会说，中医已经经过了几千年的检验，是对人体，尤其是中国人体的非常高的认识。所以不需要双盲检验。其实从青蒿素得奖的报道中我们恰恰可以看到，这种说法是完全错误的。大家可以找一下青蒿素研究的相关报道，青蒿并不是治疗疟疾的第一线用药，大多数用法和用料也全是错误的。相关课题组从中医中，收集了几百个可能的药方，而其中能够成为药物的，只有青蒿素这么一个。那么剩下的几百个药方是什么？对人体的全面总结？这就好比你去医院，问医生说，搞不搞的定啊。医生拿出600多种药来，告诉你，一样样试过来，你的病就有救了——
——尼玛你的病才没救了呢。600多种药，当饭吃都要吃上几天。更不说多种药物之间还会互相反应冲突。这哪里是治病，分明是致命。
也有人说，中医需要根据情况，复方辩证，药物配伍，才能治病。所以双盲法不能起作用。其实这也简单。找个白胡子老头，就是电视广告里经常有“祖传配方”的那种形象，也跟一批患者面前一戳。找点树皮草根去熬，完了也给丫灌进去。要是你的治愈率比不过这个，实话说，我们真用不着您的祖传药物，直接在民间里筛演员就成。还能做一档节目，就叫中国好中医。广告商都好找的很，凉茶商们分分钟扔出一堆钱。。。
还有人说，中医有几千年历史，近代医学才几百年。为什么要用一个几百年历史的东西，去证明一个几千年历史的东西呢？
如果你信服这个观点，你就需要考虑。马车有超过千年的历史，汽车历史不超过200年。按照同一理论，我们不能用汽车的理论去规范马车（例如靠停，让行，撞击安全标准等），还得让他们在一起跑。不知道你春运的时候，会不会驾驶一架马车上高速（如果上的去的话）。
有些人就是这么奇怪。穿化学制品，汽油机车出行，住钢筋水泥，还用洋人们发明的一种叫CPU的玩意上一种叫ineternet的网（抱歉，有些地方叫innernet）。偏偏轮到中医头上就不能用现代的标准衡量。你知道早年某国也有一群人，大喊着大师兄速速显灵，戴上面具自以为刀枪不入出发去捣毁洋鬼子们的教堂。该国还给自己的军队起名叫“虎神营”。其结果我就不多说了。。。
其实对真正有信心的中医大师而言，双盲法不是打脸，而是机遇。双盲法能够以近代科学方式，令人信服的检验一种疗法是“有效”的，还是“无效”的。这为后面的一系列研究打下了基础。而且通过双盲法测试后，治疗方法的有效性就会被现代医学所接纳和研究，从而使中医在未来有更广阔的发展。如果对中医真正有信心的话，我无法想象为什么会拒绝双盲法检验。最基本的，一家馆子好不好吃还允许客人尝尝味道再评价呢。一个疗法有没有效，居然不允许别人试试再评论，搬出各种理由必须无条件的相信。我也是没话说了。。。
记载和公开验证 我还看到某篇报道，通篇长篇大论论述“黄青蒿也是青蒿”。这更是扯淡。一种植物到底是不是药物，药典居然并不能很明确的分辨明晰。那么你吃的药有没有效，我想医生也并不能很明确的分辨明晰。数百年的中医口口相传，每个中医是不是都能掌握正确的治疗方法呢？也未必。鲁迅先生就记载过一味药： 败鼓皮丸 。有没有效？我不知道。治法虽看似儿戏，但是不能因为看似儿戏就断定无用。传统医学种种方法，很多有效的疗法就藏在看似儿戏的行为里，例如嚼树皮。但是我至少能说一点——这记载很有问题。
破旧铜鼓皮一张——什么样的铜鼓？用的什么动物的皮？
以陈烧酒和糯米粉糊丸——是不是要哪里的陈烧酒和糯米粉？
这些都不明确，确实只能靠中医的口口相传，秘而不宣。别的不说，我至少可以说一点——鲁迅先生当年就没遇到传对了的医生。
完全存在可能，某种特定动物的皮，在经过很长时间后，恰好能够治愈文中所描述的症状。但是这种动物能治，换种动物行不行？时间短点行不行？这些都很模糊。其结果就是这个药方的效果不“稳定”，有时有效，有时没有。有的人有效，有的人没有。
然而在验证上，这个事就有点扯皮了。上面的一堆组合中（各种动物，放置时间长短），假设有一种组合是有效的。那么能说这个方子有效么？无效？这方子明明可以用。有效？大部分的医生，大部分的时间里都无法治愈你。这就像青蒿素的悖论一样。虽然治疗方法都摆在那里，但是在中国历史上的几百年间，愣是拿疟疾没辙。证据就是，自古以来中国视南方瘴疬之地为畏途。可从没听说哪个医生带了一车青蒿大摇大摆的走了进去，对瘴气是若无物的。另一方面，如果中国长期以来，主流治疗方法都是正确的，有效的。那上个世纪搞那么大规模的疟疾治疗研究是干嘛呢？为什么不直接用成方呢？屠女士是怎么获的奖呢？国家领导都是白痴么？
近代医学体系的基础，是清晰的，公开的记录，和公开的第三方验证。只有将发现记载清晰，才能够公开，由其他人独立重复实验。只有公开，才能允许第三方验证。而只有第三方验证，才能对整个实验中是否存在潜在问题，做出一个独立的研究。这整个体系，是现代医学得以存在和发展的基础。
讽刺的是，这也同样是中医发展的基础。本草纲目之所以伟大，正是因为其公开而完善的记载。如果本草纲目是一本家传古籍，当然更值钱，然而中医也无从发展了。
近代医学中，也有记载不清楚的地方（或者记载者自己并不知道记载不完善）。但是消除记载不明确的地方是常识，将这种不明确秘而不宣才是异常。例如 反应停事件 ，人们以为记载了药物的分子式就结了，没想到药物还有手性问题。其中的R构型有疗效，而S构型会致畸。通过对Thalidomide的深度研究，科学界明确了药物的作用机理，风险，和控制方法。现在，Thalidomide被作为一种麻风性结节性红斑的药物使用。通过分离手性分子，可以将副作用降低到最低。
这个事件，和“黄青蒿是否为青蒿”的纠结，可做一对比。
临床试验 双盲法测试有效不是故事的终结。恰恰相反，双盲法认定了这是一种有效疗法，这才是故事的开始。一种疗法（尤其是其副作用）被现代医学透彻的研究之前，是不会被广泛应用的，尤其是中药。因为中医在近代医学上扮演过极不光彩的角色。
在上世纪，其实老外们很迷中药的。后来在92年前后吧，比利时有很多人染上了奇怪的肾病。经过医学研究，明确将病因指向含有马兜铃酸的中药。此后，在2000年的时候，FDA正式下令，禁止含有马兜铃酸的草药和制品流入美国。整个事件可以看wikipedia的 马兜铃酸事件 。
其实我的意见，吵架双方完全没争论到点上。当我们讨论毒物的时候，剂量是一个很重要的因素。马兜铃酸在各种剂量和配伍下，引发肾衰竭的可能性如何？至今为止没有人给出解答。似乎中医中药的赞同者们，从来没从近代医学的角度考量过问题。（这里可参考上面的“为什么要进行双盲实验”）
化学药品固然也有导致肾衰竭或者肝衰竭的可能性，但是在使用的时候，多大剂量，可能造成多严重后果，这些数据是基本可查的（我记得这货应该叫 循证医学 ？）。医生在开药的时候，可以根据服药的后果可不服药的后果，来衡量使用一种药物的价值。
然而马兜铃酸的毒理性数据（尤其是中医们宣称的，群臣佐使情况下的毒理数据）缺乏（在可靠测量方式下缺乏），使得传统医学中很大一部分药物根本无法被现代医学使用。因此我们只能看到中医界反复宣传，中医安全，可靠，不会引起副作用。但是现代医学界却始终无法接受。最后就完全变成了信仰之争。
我相信中医中还有大量的有效的疗法（和更大量的，传出了问题的疗法）。但是哪些疗法有效，哪些疗法无效，哪些疗法有多大效果，有多大副作用，尚没有一个明确结论前。实话说，虽心向往，不敢用之。
作用机理 近代医学比传统医学更进一步的，是明确了“药物为何会起作用”的机理。这个机理是明确的，公开的，可重复的，可证伪的，而不是以阴阳五行或者太阳月亮在天空中的位置，来指导治疗。
我查过，关于青蒿素，就有好几篇“青蒿素类药物的作用机制”。我目前还不清楚其作用机理是否已经完全被解析明了。但是人类是有好奇心的，一定会有人好奇为什么这种药物能起作用，从而持续的研究他。
更深一步，近代医学对药物机理和毒性的研究，甚至能够改善药物的效果，减少毒性。例如上面提到的反应停手性问题。对药物作用机理的研究，甚至还能指导药物设计。例如 奥司他韦 。
当然，作用机理研究不清，也是不妨碍用药的。现代医学没有那种必须搞清楚才用的怪癖。
中医，西医，现代医学 假定你感冒了。给你板蓝根的，是中医。给你柳树皮嚼的，是西医。给你对乙酰氨基酚的，是现代医学。我们在说西医西医的时候，其实也是巫医，是传统医学。只有当近代，医学结合了科学的方法论，才脱离原始蒙昧的阶段，正式成为现代医学。</description>
    </item>
    
    <item>
      <title>印度游记-4</title>
      <link>//blog.shell909090.org/blog/archives/2804/</link>
      <pubDate>Thu, 15 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2804/</guid>
      <description>11:44 AM – 8 Oct 2015: 早餐还是很赞的，居然有烟熏三文鱼。不愧是五星酒店，车辆进出都要用镜子检查底盘和开盖查引擎。人包分离安检，和机场一样。不过，印度的安全形势到底是怎样啊。我在想，中国为什么很少看到恐怖主义事件呢？（不代表我喜欢它）大部分都是群体维权事件。 有人反馈说，印度和巴基斯坦是世仇，因此有恐怖袭击风险。尤其是Taj Mahal酒店，是 2008年孟买连环恐怖袭击 的袭击对象（不过那次是孟买）。事后得知，真是一身冷汗。
中国不是没有，而是主要集中在西部。其他地方，有点风险的人还没下大巴呢，就先叫去谈话了。。。
12:23 PM – 8 Oct 2015: 德里的观光bus居然叫HOHO bus，顿时高冷有木有？
查了一下地图，昨天的骗子看似跑一大圈，其实就走了300米的距离。不过他运气不好，酒店我在gmap上戳过。而且那个地方我居然去过。所以一眼就知道了他的把戏。 建议来印度玩的，把你常用的地点都在gmap上戳一圈。这样很多事情会很方便。
HOHO bus千万不要坐，老婆更是傻傻的买了两天的套餐，说第二天才多20%的价。结果咧，完全没有用到。
1:58 PM – 8 Oct 2015: HOHO bus 开到一半空调坏了，导游就打算把我们扔景点等下一班车（45分钟）。老婆就打算跑了。车上几个老外就不干了，跟导游争论，我们付了这么多钱不是让你浪费时间的。争论半天的结果，他们15分钟内调一班车过来。
还说老外气场足。 HOHO bus非常扯，开着开着，冷气没了。然后老外就和他们争论。本来让我们等下一班的，结果就是来人修车，同时尽快派一班过来。
气场啊，气场。
2:17 PM – 8 Oct 2015: 他们居然派了个工程师骑摩托来现场修，而且还调了车过来。前面争论的老外真牛。。。 实际修复的结果，差不多搞了30分钟，只能说略快而已。
2:23 PM – 8 Oct 2015: 刚刚经过一家大医院，门口的救护车就像出租一样密集。 这才是医院的日常。
5:03 PM – 8 Oct 2015: 上午看顾特卜塔，感觉好无聊。唯一的意义就是搞明白了谁修的塔。 不建议去玩。不过看到好多学生来观光。老婆跟我说，印度的妹子小时候真漂亮。
5:15 PM – 8 Oct 2015: 我靠，居然见识到了三哥的挂汽车。真是太震撼了。可惜距离太远，不然就照一张了。
话说他们的公交好像也是不停站的，上下全靠跳。</description>
    </item>
    
    <item>
      <title>印度游记-3</title>
      <link>//blog.shell909090.org/blog/archives/2801/</link>
      <pubDate>Wed, 14 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2801/</guid>
      <description>3:40 PM – 6 Oct 2015: city place, udaipur 12:51 AM – 9 Oct 2015: udaipur 事后发的，时间跳脱。
4:21 PM – 6 Oct 2015: udaipur大停电。餐厅有free WiFi没法上网，结帐需要手算，不能收信用卡。去小店买水，水都不冰了。回酒店，依然没有网。最糟糕的是，没有空调和热水。大中午。。。
4:24 PM – 6 Oct 2015: 问了附近的三哥，说停电在这里是家常便饭。几天就有一回，他们都不惊讶了。但是最近是旺季，还是很影响生意的。他们不知道为什么最近那么多中国人来，我总和他们解释，我们最近国庆。
这就是我说的，基础设施造成的重大影响。印度这地方不像中国，政府说弄个电线，分分钟就搞定了。你先得考虑对环境的影响，对古迹的影响，再问问居民答应不答应。等所有事情都谈好，中国人已经把活干完了。。。
4:42 PM – 6 Oct 2015: 今天去udaipur的city place，比jaipur的要好很多。展厅很漂亮，展品也很充实。镜子拚花，彩色琉璃拚花窗格，镂空雕花装饰。简单的几何图案大量重复，构造出美丽而丰富的装饰。
8:17 PM – 6 Oct 2015: 在路上偶遇一个中文很好的小哥，他说自己是在复旦学中文的，在合肥工作，安装atm机。这里是他老家，在做羊毛生意。六十年的一家店，经常卖东西到中国去。他说中国人来了经常腹泻，几乎都会。他自己都偶尔腹泻。然后推荐了我们一个牌子的矿泉水，应该会比火车上那种靠谱点。
小哥说中国啥都便宜，就是羊毛特别贵。中印外贸交流其实机会挺多。我觉得也是。只是基础设施可能会造成很大问题。不过这也不是什么大事，我们援非建设都搞了多少了，在印度搞个什么工程还不是手到擒来。只要能先把各方面问题先谈妥。。。
8:20 PM – 6 Oct 2015: 发现印度其实很多人会说中文，早上在路上遇到过一个人，也是中文很好。就是没多交流，不知道什么情况。我当时已经很惊讶了。结果下午遇到这个复旦中文系的高材生。这绝对是旅行中最大的惊喜。 不知为何，好多印度人会说中文。中国人就别指望印地语了，但起码英语不要太差啊。。。
8:49 PM – 6 Oct 2015: 补充一下。小哥说他家是耆那教的，所以应当全素。但是在中国做生意，经常需要跟着老板见客户吃海鲜。他就问他爹怎么办。他爹说，如果是必须的，那么可以接受。我说gosh，怎么和我想象中差那么多。印象中印度教徒（虽然他不是）经常因为牛肉起冲突啊。他说，印度正在逐步改变。 这是我最意外的一点，印象中印度很多教徒因为吃什么肉的问题经常起冲突。不同的宗教，在教义执行上会有不同麻烦。为此我还特意去了解了很多宗教和禁忌。不过我个人的意见，教义是用来约束自己的，不是约束别人的。不应当因为别人触犯教规而感到被冒犯。
11:12 PM – 6 Oct 2015: 晚上去haveli的evening show。非常好。很多民族show，妹子们欢脱的跳着民族舞蹈（虽然有几个大妈）。最后一个大妈顶着一堆罐子在那里跳舞，小十个罐子在头上几乎长成了一颗螺蛳。 建议大家晚上去看看。主持人会用印地语和三式英语报一遍，能听懂多少就看个人了。不过我觉得听懂听不懂其实不重要。</description>
    </item>
    
    <item>
      <title>印度游记-2</title>
      <link>//blog.shell909090.org/blog/archives/2799/</link>
      <pubDate>Mon, 12 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2799/</guid>
      <description>11:02 AM – 4 Oct 2015: 这家饭店真心不错，前台很会沟通。我们找他租车，他给了我们很好的建议。我们本来打算包车8小时1700，停车我们付。他说你们可以9点出门，晚上多一小时150。从大早上到晚上，大约2200能下来。其实让我们多消费了，但是又不招人讨厌，确实的解决了问题。
酒店叫Umaid Mahal。 根据后面的计算，德里的平均小时工资大约就是150。jaipur这里带燃料和折旧才这个价格，估计工资会更低一些。
价格的计算模式是，1500八小时，因为有上下两个上下山（琥珀堡和老虎堡），所以有200的额外燃料费。超过的2小时一小时150，总计起来就是2000上下。最后有些额外的时间什么的，会多一点钱。
2:54 PM – 4 Oct 2015: 早上去了jarpur的city place和琥珀堡，很漂亮。不过可能是我们期望太高了，有的没到点的感觉。司机人很好，带着到处跑，也没有让我们乱买东西。 琥珀堡很古老，很有古堡探险的味道。据司机的说法，其历史甚至比jaipur还长。但是，可能是我们的期望太高了，琥珀堡里面除了镜之宫外，并没有什么太值得看的东西。
司机还不错，不会总带我们去买东西。我们后面自己说要去买点当地衣服，他带去了一个工厂店，估计能赚一点。衣服也是不错的，老婆回来后还一直穿。
2:59 PM – 4 Oct 2015: 琥珀堡的镜之宫。 3:11 PM – 4 Oct 2015: 三哥的套餐。叫做Rajasthan套餐。。 ‏@lichray评论: 美国也有，我很喜欢。
‏@cashplk评论: 尼泊尔也看到过类似的，他们叫Daba。
3:39 PM – 4 Oct 2015: 在把印度物价换算成人民币，再对比上海物价后。就算不考虑旅游加成，我在印度还是成了只看胃口，不看价钱的买买买土豪。。。
尼玛上海能120吃顿大餐么？我还看个p的账单加税细节啊。。。
印度税也是分开列的。
10:47 PM – 4 Oct 2015: Hawa Mahal. place of the wind.
10:52 PM – 4 Oct 2015: 近三黑暗料理，中！国！炒！面！
味道还不错。只是这东西绝对和中国没什么关系。 应该是“阿三黑暗料理”。号称中国炒面，其实和炒面一毛钱关系都没有，感觉上是炒的细米粉。炒过面的应该知道，炒面会比较油。印度这里放的油比较少，面更软，更像是粉的感觉。而且口味也严重的本地化了。</description>
    </item>
    
    <item>
      <title>印度游记-1</title>
      <link>//blog.shell909090.org/blog/archives/2795/</link>
      <pubDate>Sun, 11 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2795/</guid>
      <description>注意，由于是回国后整理，因此以下时间都转换到了东八区时间。印度是东5区半，所以当地时需要倒退2.5小时。
10:21 AM – 2 Oct 2015: pranthas and pancake, in india 正解应当是 parathas，一种绿豆做的小煎饼。
2:03 PM – 2 Oct 2015: 印度国庆，大部分商店关门。只能吃麦当劳。果然没有牛肉。 准确的说，印度有三个national days，其中10-02是甘地的生日。细节在 Public holidays in India。在这天，我们看到的大部分门面商店都是不开门营业的。但是很多私人的小店照做生意不误。这点和中国有很大不同，去印度旅游的同学一定要恰当的避开节日（除非为了赶庆典）。
另外，印度的kfc做的鸡腿相当不错，我很喜欢。
感觉上印度的kfc之类的地方是情侣常去约会的地方。我们在kfc里面经常能看到一对对情侣。老婆在kfc门口站了一会等我，上来两拨搭讪的（你们几个意思）。
2:57 PM – 2 Oct 2015: 印度麦当劳送的礼品，made in china… 3:20 PM – 2 Oct 2015: 老婆的穿着有什么奇怪的地方么？ 印度的 莎丽，很漂亮的衣服，大家去印度可以买买看。我们这块是700，加搭配的裤子什么的一堆，最后砍价到1000rs。不过穿法比较麻烦，不大熟悉的话会走走路就开了。然后走几步调整一下，很花时间。
我们穿着这个在街上走的时候，回头率相当高。后来我发现印度人对我们中国去的好像很好奇，好多围观拍照的。老婆的这个穿着更奇怪，后面杯子指出来了，缺头饰。所以回头率超高，连欧美老外都连连回头。
7:46 PM – 2 Oct 2015: 在印度喝下午茶。 这家下午茶店就在我们住的简易酒店隔壁。这家酒店用的还是英式电梯（就是那种拉手门，好像建筑工地一样的那种）。床很有特色，双人房两张床是上下两张，就像我们大学里的那种。中庭有很漂亮的天井，躺椅和阳伞，看上去像是英式庭院。
9:34 PM – 2 Oct 2015: 印度的黑暗料理还是很不错的。两个人，半只鸡，一份羊肉咖喱（大好），一份黄油囊，一份蔬菜奶豆腐。味道都很赞。结帐时他们说690，我们给了700要跑（大约人民币70）。他们拦住我们，说等等你还有找头。我当时就震惊了。然后找回来一看，620，我们一直看错了。就更震惊了。 印度的物价超便宜，德里介于武汉和上海之间，其他小城市比武汉还便宜。中国人去了都是土豪。我们这天去的是一家路边摊（黑暗料理），大概相当于上海路边的小店。可是那也不是62人民币能搞定的地方。。。
印度的咖喱变化非常复杂，但是对游客而言，你最多只能吃出主料是什么，红咖喱还是黄咖喱。基本来说只有素咖喱，鱼，鸡，羊，蘑菇这么几种变化，我建议在不同的店可以错开变化吃吃，而且中间最好间隔着几顿别吃咖喱。以免发生惨案。。。
8:59 AM – 3 Oct 2015: 昨晚的tandoori烤鸡，黄油囊，还有羊肉咖喱。不知道有没有发过图。现在网不错，赶快发出来。 这个时间是乱序的，是第二天网好的时候补的。</description>
    </item>
    
    <item>
      <title>代码不小心泄漏了怎么办？</title>
      <link>//blog.shell909090.org/blog/archives/2792/</link>
      <pubDate>Tue, 29 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2792/</guid>
      <description>我靠，今天看新闻看的不能忍了。
最开始，我看的是这条新闻 github 上 fork 了一个项目，有人发 PR 让我删掉，我该怎么办？。这个前几天比较火，各种可乐。同类的消息来源还有这里 在 GitHub 上面泄露了公司源码怎么办？。然后我在里面看到了乌云上的这个漏洞苏宁某站企业信息泄露(推广+结算+报表等) 。
事实是，其实在很久以前，这个仓库已经泄漏了。比较让我想吐槽的是厂商评价，漏洞等级，中？
中？
中是什么概念？在本公司内部评定中，对非关键平台产生影响的漏洞被评估为低级，对关键平台产生影响的评估为中级。凡举严重信息泄漏，DOS，执行任意代码，一旦查证确实，统统是高级漏洞。根据公司规定，快速响应时间是24小时。
那么多核心资料的上传，苏宁居然只是评价为中？送礼品卡？我靠，这种漏洞难道不是立刻评价为最高风险漏洞，然后去和github的人交涉去删除repo么？那TM在一两个月前仓库应该已经删光了。而且发现者发的居然是——礼品卡？
也许腾讯结算工资的时候能发Q币，可是苏宁的礼品卡，这汇率怎么定呢？
好吧，我们就先不吐槽员工的下限了，上一篇刚刚吐槽过。我们还是说正经的，你的代码要是不小心泄漏到了github上怎么办？
首先，联系github去删除这个repo。
其次，里面所有涉及到的关键地方都需要改掉，例如密码，内置的参数，等等。能改的全改了。
最后，把这个代码自己开源发布出去。
是的。仓库一旦泄漏，就永远泄漏了。一帮人在讨论github上怎么删除清空仓库，其实什么用都没有。因为那么多人，总有人会clone到本地。然后事情就变得无聊了——你难道去硬盘上删除么？
我们也曾经发生过类似的事情。在和某著名漏洞平台合作渗透自己的时候，被白帽子拿到了一个管理用的repo，里面有一些key。结局就是严重安全漏洞。出问题的漏洞快速封闭，紧急检查泄漏情况，泄漏出去的key全部更换一遍。涉事员工点名批评，有人被吊销了权限。整套管理机制都被review一遍，拉去整改。我们检查过日志，原则上说，只有我们和攻击者（也是友方）有访问过这个repo。我们不质疑合作方的专业性，但是如果指望这就没事了，可以当作没发生过了，那么就是我们的失职和不专业。在这种情况下，就只能假设我们的这些key在外面满天飞了。幸运的是，这些key更换后就可以杜绝问题，不会因为这些key曾经泄漏导致新的key有风险。而且相关系统日志表明，攻击者并没有进一步利用这些key，数据也没有发生进一步的泄密。可见我们的合作方还是很专业的。
后面更low的来了。twitter上有这么个消息： V2EX 上已经有回复的主题，不会被删除。请苏宁云商不要再通过各种渠道骚扰我了。你们的代码泄漏了，最重要的事情是内部控制和沟通，而不是想着来和谐整个互联网上关于这件事的讨论。 。
我靠，第一时间被雷的天雷滚滚。
我知道互联网上这种捂盖子的事情很普通。但是是怎么回事，离开捂盖子就不会做事做人了么？
作为一个企业，要想安全的基础，首先是不要讳言自己不安全。你得承认，企业里面人多手杂，每个人水平也有高低之分。没有什么企业是真正安全的。但是最起码的，你得承认，自己会出事故。如果不会出事故，那我们还需要漏洞平台做什么呢？你还接受别人的警告做什么呢？这种“捂盖子”的想法，其实和漏洞评价中是一脉相承的。我大企业万世无忧，在商场上正面打败对手才是事情的要点。这种事情只是芥藓小疾不足为道，打发要饭似的打发一点，不要惹出新闻就得了。等出了问题，更多的也是考虑面子和公关问题，而不是安全问题本身——这根本不是一种对用户负责的态度。
当然，作为公司，我们更希望漏洞的发现者和我们沟通。最好漏洞就是我们自己发现的。发现者和漏洞产生者的关系越近，漏洞上花费的成本越低。如果是同部门的，大概只要请吃顿饭。如果是同公司的，估计就会被批评一顿。如果是友商，那就可能涉及到处罚。而如果发现者都不向公司汇报漏洞了，这其实不是代表公司没事了，而是代表黑产很开心。</description>
    </item>
    
    <item>
      <title>从xcode说起——开发中的那些傻逼事</title>
      <link>//blog.shell909090.org/blog/archives/2789/</link>
      <pubDate>Mon, 21 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2789/</guid>
      <description>最近xcode很热——我当然不是说软件本身。在工具链里埋炸弹是一个经典手法了，我还以为从putty之后大家应该已经提高警惕了呢。
下面我来数数开发中的一些SB行为。排名不分先后。
下载用百度，下载完成不做MD5 请问你作的是死么？
聊天用QQ，公司密码群里发 下面我要发密码了，请其他同事把头转过去一会。。。
最讨厌的就是这种，自己密码也不简单，乱发，漏了。企业绝对怀疑不到个人头上。但是搞得安全形同虚设。
共享帐号/密码 下面我们三十个admin集体开个会，讨论一下我们中出了一个叛徒的问题。。。
相关密码扔邮箱 结果有一天，你的mail密码不慎漏了，而你不知道。。。
乌云2015大会上特别提到的case。
弱密码 每个公司总有那么几个人，天天用弱密码，说了不改。
安全组不能做主开除这些人的公司，不要妄称安全。
git提交时根本不知道提交了什么 结果把密码提交上去了有木有？
自己去搜一下，这个问题非常常见。
基础工具链交给实习生维护 “高级”的“架构师”当然要关心最有价值的“核心”内容。
院长不亲自操刀手术，不代表一线可以交给实习生好吧。
只是很多公司招不到人，就拿实习生或者资历比较浅的人去凑合了。实话说，出问题只在早晚。
我只是调试，一会就关 我很想知道你和老婆在床上的时间能不能比“一会”更长。还是说你是“一会就完事”的那一号？
凡是在一次约会时间里搞不定的事情。。。那就不是一会。。。
无套一时爽，XXxXX。。。
公司电脑不加密 笔记本或者U盘不小心丢了会上新闻的人，在公司里占了大多数。。。区别只在于，上科技新闻，娱乐新闻还是联播新闻。。。
如果需要在存储上保存保密内容，请先对存储本身加密。更安全的，你需要对整个系统做签署。硬盘加密保护的是数据机密性，系统签署保护的是可信环境，两者相辅相成。
PS: 很多人电脑是加密的。手机呢？
工具链用的全是非开源产品，还都是盗版的 X，这年头盗版和免费软件（尤其是国产盗版和免费软件）简直是黑产样本大全。
如果你要用软件，请付费。如果不想付钱，用开源。而且建议简单看一下源码。用免费版的，你自己就是产品。
安全无所谓拉 反正只要不是我故意搞出来的，出问题最多被骂一顿了事。还是关心怎么赚钱升职走上人生巅峰比较重要。
这TM怎么骂？这是极其NB正确无比的人生观，我连下嘴的地方都没有。</description>
    </item>
    
    <item>
      <title>使用tmate和mdp做培训</title>
      <link>//blog.shell909090.org/blog/archives/2787/</link>
      <pubDate>Thu, 17 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2787/</guid>
      <description>tmate 其实很简单。有个大家都玩过tmux对吧。有个x炸天的工具，叫做tmate，是tmux的分支。地址在 这里 。
这个工具能做什么呢？开一个tmux的窗口，连接一台服务器，得到一个ssh指令。然后，其他人可以用这条ssh指令直接查看你的tmux，只读或共享操作都可以(我建议只读)。
这个工具进入了debian的testing和sid，但是没有进stable。所以要装一堆依赖编译一下。总之，最后是一个静态的binary文件，复制去bin目录下结束，没什么好废话的。
自建服务器 tmate官方提供了一组公开服务器，供大家使用。当然，这些对我等大局域网居民来说是没用的。所以follow the guide(官方主页上有)，在自己的vps上搭建一个服务器。当然，22端口要改成其他端口。
然后填一个设定文件(也在官方主页上)，你就能使用tmate连接自己的服务器了。fingerprint的扫描方法大概是，在tmate-slave目录下执行：
ssh-keygen -lf keys/ssh\_host\_dsa\_key ssh-keygen -lf keys/ssh\_host\_rsa\_key ssh-keygen -lf keys/ssh\_host\_ecdsa\_key 会得到三个fingerprint，写到客户端的配置里去。
唯一需要注意的是，除了tmate的配置文件里面需要设定三个fingerprint，你还得用ssh连接一下自己的这些服务器，并同意将fp添加到~/.ssh/known_host。不然也会有错误。
然后tmate，就能看到ssh指令了。
客户的连接 在tmate的窗口里，敲 tmate show-message ，你能够看到只读和读写ssh指令。这条指令里会有一个非常复杂的username，这个username是用作客户的身份验证的。虽然信息量并不是很大，但是作为临时的会话共享安全手段足够了。
注意如果你使用只读指令分享了屏幕，那么在操作过程中不应该再敲这条指令。否则别人就能看到读写ssh指令。
后面的事情就非常简单了，客户自己用ssh工具来连就行了。tmate对客户端没有任何要求。
mdp tmate解决了pair work和屏幕分享的问题。但是要用于培训的话，我们还缺一个slide手段。
mdp 是一个命令行的slide工具(当然你也可以用tpp)。基本是基于markdown的。你可以按照官方文档来做一个slide，然后就可以很happy的和小伙伴们分享屏幕操作了。
还缺什么 其实最好还要有一个语音共享机制的，例如YY语音。
性能如何 还没测。我在同组的三个人之间试了一回，非常好用。大量的用户还没测。等测下来再写一篇。</description>
    </item>
    
    <item>
      <title>关于vpn的一些话</title>
      <link>//blog.shell909090.org/blog/archives/2783/</link>
      <pubDate>Thu, 06 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2783/</guid>
      <description>最近在弄一些关于vpn的事，又在quora上看到了好多关于vpn的问题。（不知为何quora总是推荐让我回答vpn的问题）其中很多问题极其傻，缺少基础性常识，一看就是外行问的。
其实也难怪，vpn的需求，并不只是专业人士有。有位朋友向我咨询vpn问题，他可既不是要翻墙，也不是专业人士。所以我打算把和vpn有关的一些常识写一下，以备咨询。
vpn能做什么？ vpn能做什么，取决于你想要他做什么。vpn其实就是一个虚拟的线，连通两个地点，就如同真的接了一根线一般。只不过这个虚拟的线，实际上是由你到对方地点的网络来提供的支持。通常情况下，这么传数据会使得你的数据暴露在网络上。但是vpn里传输的所有数据都经过了加密，你可以认为传输者看不见。
所以，vpn能做什么呢？
有些公司阻止了员工访问很多网络。借助vpn，你可以绕到第三方的网络里去访问哪些网站。其实gfw也是同类情况，只是这家公司更大而已。
有些网络会监听访问，用来做一些对用户不利的事情。例如在国外，使用bt下载很可能会招致版权组织的诉讼。这时可以借助vpn来下载。或者某些公司也会监听用户的数据，例如qq。对于这类情况，你也可以用vpn跳出公司的网络。当然，如果你对这些问题已经有了顾虑，那么就不应当使用国产路由器。大部分国产路由器都会有监控用户数据的行为，很多甚至会修改。
vpn不能做什么？ vpn的常规模型，是从用户实际上网的地点“逃逸”到vpn供应商那里。（我们不讨论一些特殊情况）所以，他解决不了一些问题。
例如你的网站没有加密，那么就无法期待vpn来帮你。除非你能让你的所有用户和网站全部连到同一个vpn上（所以访问你的网站前需要先拨vpn）。基于同一个理由，你无法用vpn对抗网站劫持。
同理，如果某个网站未加密，你也无法指望使用vpn保证安全。vpn只能保证守在你家门口的这些人（例如ISP）无法弄到数据。守在服务器门口的人（如果有的话）依然可以获得你和服务器的全部通讯。
vpn分为哪些种类，有什么特点？ 一般来说，常见的vpn有这么几种。
pptp。最古典和最通用的vpn。windows里默认内置，搭建和使用都相当容易。但是由于特殊的网络设计，因此有些公司无法使用。而且有安全性隐患。对掌握极大资源的攻击者，内容基本透明。 ipsec+l2tp。windows里内置，大部分公司应当都可以连通（没有故意拦截的话）。对于除美国政府外的截听者，应该都比较安全。 openvpn。复杂和强大，模式多变。需要安装第三方程序，因此并不是很容易用。但是可以跨越大部分公司网络，不会有什么阻碍。安全性很高，也有一些算法可以用来对抗美国政府。由于中国政府的封锁，无法跨越国内外。 sstp。windows自己的协议。只需要一个ssl连接，因此跨越性比openvpn还好。新版windows里应该有内置。 AnyConnect。Cisco的协议，需要安装第三方程序。跨越性和安全性没有实用数据。 简单来说。如果你只是要用而已，并且没有被掌握极大资源的攻击者盯上，而且不是反美国政府。那么哪种方便用哪种。下面是一些系统的兼容性建议：
windows: pptp, ipsec+l2tp, sstp linux: openvpn, pptp android: pptp, ipsec+l2tp, openvpn ios: pptp, ipsec+l2tp, anyconnect(似乎这是唯一一个能在ios上非越狱安装的vpn应用) 从上面我们可以看到，pptp其实是兼容性最好的，但是不是所有网络都支持。次之的是ipsec+l2tp。如果还有问题，openvpn应当能够解决你的问题。如果都不行，再考虑其他。sstp仅建议用于只有windows客户端的情况，anyconnect仅建议用于你钱足够多的情况。
所以大部分vpn供应商的协议选择都是pptp/ipsec+l2tp，或者多一个openvpn。这足以应付大部分情况。
这里 是我看到的一个比较全面的，关于vpn之间比较的页面。
使用了vpn，我的网络安全了么？ 不一定。如我上面所说，vpn只保证了你家门口的安全。守护在服务器前的人依然可以获得数据。甚至，如果vpn供应商怀有恶意的话，他们也能够获得数据。所以这是一个ISP和VPN供应商，谁更可信的问题。
而且实际情况往往更加复杂。很多数据的获取，并不来源于源IP地址，而是在浏览器里植入了身份相关信息。浏览器的身份相关信息相当敏感，没有他们，你就无法在网站上登录。也因此，这些数据一旦被恶意者获得，他们就能借助你在第三方网站上的身份信息，获得你是谁。
对于这些威胁，vpn都是无能为力的。</description>
    </item>
    
    <item>
      <title>ipv6试用手记</title>
      <link>//blog.shell909090.org/blog/archives/2779/</link>
      <pubDate>Wed, 05 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2779/</guid>
      <description>ipv6地址 概要 挑简单的讲吧。
ipv6地址总计128位，分为8个段，每个段16位。hex表示的话，每段最多有四位。在写出ipv6地址的时候，用:分割。所以一个经典的地址写出来是这个样子的：
aaaa:bbbb:cccc:dddd:eeee:ffff:gggg:hhhh
这里有两个缩写。一，如果一个数字的开始有连续的0，可以忽略。好比0001和1是一样的。二，如果有多个连续的段是0，可以缩写为::，但是只能缩写一次（这样才能确定一个唯一的地址）。例如以下是一个缩写过的地址。
aaaa:b:c:d::1
这个地址等同于
aaaa:000b:000c:000d:0000:0000:0000:0001
ipv6地址分类 ::/128 未定义 ::1/128 回环地址(127.0.0.1) fe80::/10 局部地址 ::ffff:0:0/96 ipv4映射地址 ff00::/8 广播地址(其实更小，不过我的路由表里就是这样写的，全保留给他了)
更多地址请去看wikipedia。
EUI-64地址 简单来说就是通过mac地址的48位，扩充到64位，作为ipv6地址的最后64位。
ipv6地址分配和基本网络设定 ipv6下有两种ip自动分配方案。通常都建议无状态的方案。
dhcp 一种还是经典的dhcp，这种方案分配出来的地址比较紧凑连续，空间利用率高。坏处是ip地址并不唯一固定。在多数情况下dhcp都会尽力分配和上次一样的ip下来。但是在地址池比较满和系统缓存被清理的情况下，并没有保证。
在interfaces里，dhcp的写法大致如下：
iface ethX inet6 dhcp
slaac 另一个是嫌地址太大的slacc。基本原理就是给一个组织（例如家里）分配一个/64的段，然后用EUI-64(似乎是)给里面的所有设备分ip。所以这样分出来的ip完全一致。
在interfaces里，slaac的写法大致如下：
iface ethX inet6 auto
dns ipv6里进行配置还需要注意一点，你的DNS需要支持AAAA记录。不然拿着网址查出一个ipv4记录来就很尴尬，还得退化到ipv4去访问。这和直接使用ipv4没什么区别，反而更糟。
实际上，大部分DNS都支持AAAA记录，只是程序会不会默认去查而已。
另一个问题是，如果你的DNS服务器地址是ipv4的，也会使得你无法完全脱离ipv4网络。因此需要一个有ipv6地址的DNS。一般你的ipv6链路供应商会提供一个ipv6的DNS。
firewall slaac使用icmpv6，所以需要在防火墙上打开icmpv6协议的进入。
tunnel breaker he提供一个6to4的tunnel，但是需要你有静态ip地址。(其实凭心而论这真不是一个太高的要求，很多VPS供应商完全可以直接搞一个48的段给自己的机房分64的段)作为普通用户，没有静态地址怎么办？那就只有用vps先接到tunnel，然后再tunnel回家了。
tunnel to he 很容易，配一根6to4的tunnel就好。tunnel breaker的网站上还很贴心的提供了不同系统下的详细配置。
这里特别提一下。HE很贴心的提供了两段地址。一段ipv6是你和HE的隧道地址。另一段地址也会路由给你，这才是你内部应当使用的ip地址群。所以原则上说，你可以在隧道中使用(本来应当在)你和HE之间使用的地址的部分。
tunnel to yourself 先随便打一根二层的隧道。
二层的理由是，如果使用三层隧道，那么隧道本身就需要察知ip。于是ipv6的支持就变成隧道的事了。而二层的隧道并不需要知道上面跑什么协议。
最简单的当然是gre隧道。但是gre隧道需要在远端确定本地ip地址，这和直接打一根tunnel回家没什么区别。
我用的方法是用任何一种二层或三层vpn打到vps上，然后上面再跑gre。这样一举解决了加密和静态地址的问题，顺便还解决了ipv6兼容性的问题。当然，代价也很高。由于是在vpn里套gre，所以头部很大，mtu就要开的比较小。
另一个玩法是用ipsec的tunnel模式打通两个网段，于是gre也可以直接通到vps上（甚至可以直接打ipv6 tunnel）。然而ipsec的tunnel模式需要知道双端ip地址，所以其实还是没有什么用。
顺便吐槽一下routeros的ipsec，实在是太废物了。
当然，也可以用支持ipv6的三层隧道。PPTP都有ipv6支持。当然，我看了一眼，要把ipv6 tunnel回来还是有点问题的。
无论怎么配置，这根隧道要用你和HE之间tunnel的部分地址。例如你和HE的tunnel是这个样子：
a:b:c:d::1/64 &amp;lt;-&amp;gt; a:b:c:d::2/64</description>
    </item>
    
    <item>
      <title>程序员交友选择题</title>
      <link>//blog.shell909090.org/blog/archives/2776/</link>
      <pubDate>Tue, 21 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2776/</guid>
      <description>问题 你用过lamp么？ 你键盘最左边一列磨损最严重的键是？ 你喜欢3p么？为什么？ 如果你需要改一张图，电脑里又没有装有关软件，你会怎么做？ 答案 没有的就算了吧。 caps lock万岁，其他去死。 python万岁，其他去死。 首先从可信源下载编译好的包，如果没有下载源码安装。 （去商店购买一份ps的去死） （去下载盗版ps的立刻拨打110） </description>
    </item>
    
    <item>
      <title>网络值机和无登机牌登记试用手记</title>
      <link>//blog.shell909090.org/blog/archives/2774/</link>
      <pubDate>Thu, 16 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2774/</guid>
      <description>最近要去北京，用的去哪儿订的票。他们（准确说是东航）提供了手机值机和无登机牌登机的功能，我就试了一下。
首先在起飞前会收到一个消息，回复姓名和座位偏好之后，就会自动办理登机手续，并发给一个短信。里面包含安检口，座位号和二维码。
看来这个流程只适用于没有行李的旅客。如果有行李的话，还是要去柜台一趟办理托运。当然，由于我都是随携，所以这部分没有测试。
然后短信会提示你到哪里过安检。我不知道是否是只有这几个安检口才支持，所以我还是老老实实的从指定的安检口（不是所有）过去了。拿手机（当然还要身份证）给他后，他会扫一下，给你一张安检条。
然后等飞机，等了好久，居然还延误了。
到登机的时候，还要在登机口和廊桥口两次检查。登机口是要安检条和手机（二维码），廊桥只要安检条。
其他和持登机牌登机没有区别。
下面感想。
手机值机还是挺方便的。可以预先挑好自己喜欢的座位，而且如果没有托运就不必在柜台愚蠢的排队，节约大家的时间。
安检条不知道是怎么回事，看来是没协调完的缘故。从技术上说，可以将安检信息放在二维码里，过登机口和廊桥的时候直接扫码搞定的。我估计是因为东航是东航，虹桥是虹桥。所以东航的系统打通的再好，虹桥的系统不跟着升级也没用，只能打张安检条来过关。
而且下发短信的信息也有点问题。虽然有使用指引，但是却没有登机口。我居然还要问安检。考虑一下登机牌上有什么信息，把他们都做进去好么？
总体来说还是挺满意的。方便，省事，而且不废纸。</description>
    </item>
    
    <item>
      <title>cache和buffer的区别</title>
      <link>//blog.shell909090.org/blog/archives/2771/</link>
      <pubDate>Sat, 11 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2771/</guid>
      <description>不废话，上干货。
根据引用1和2的说法，cache是用来缓存文件的，buffer是用来缓存块设备的。在2.4之前，这俩是独立的，所以很多文件缓存两遍。在2.4之后，两个联起来了，所以一个文件只缓存一遍，这个大小算cache的。
linux通过page cache做所有的文件IO。写的时候，只标记这个cache页面为dirty，一个周期循环的刷写系统会去把这个脏页面刷到磁盘上。而读的返回也在page cache里。如果没有命中，那么就先载入。page cache是一个长期存在的东西，是一个几乎只会增大的怪物。他的唯一回收理由就是系统耗尽内存，需要释放部分来用。
而buffer缓存的是块设备数据。正常来说，这些数据都应该和page cache一致。里面只有部分数据会不在page cache里，例如文件元数据。
http://www.quora.com/Linux-Kernel/What-is-the-major-difference-between-the-buffer-cache-and-the-page-cache http://www.quora.com/What-is-the-difference-between-Buffers-and-Cached-columns-in-proc-meminfo-output </description>
    </item>
    
    <item>
      <title>flash禁用教程</title>
      <link>//blog.shell909090.org/blog/archives/2769/</link>
      <pubDate>Tue, 07 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2769/</guid>
      <description>最近flash一堆漏洞，大家禁用了吧。
firefox 附加组件 -&amp;gt; 插件 -&amp;gt; flash -&amp;gt; 禁用
chrome 浏览”chrome:plugins”页面。
找到flash，禁用。
safari Preferences Security Allow Plugins旁边的Website Settings Adobe Flash Player, disable 检测 http://www.bilibili.com/video/av2533651/
来吐槽的说明你的设置有问题。
PS:注意，youtube已经不使用flash了。
参考 图文教程：
http://www.redmondpie.com/disable-flash-in-chrome-firefox-safari-other-web-browsers-to-keep-your-pc-safe-from-vulnerabilities/
（全英文，但是可以看图）</description>
    </item>
    
    <item>
      <title>hosts配错导致ldap安装问题一例</title>
      <link>//blog.shell909090.org/blog/archives/2766/</link>
      <pubDate>Tue, 30 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2766/</guid>
      <description>不废话了，要装ldap。
ubuntu下，最简单的方法是修改/etc/hosts，添加自己的域名，例如ldap.shell909090.org。然后安装包的时候，就会使用dc=shell909090,dc=org作为basedn。里面自动添加一个admin。
结果在某机器上，丫硬是一直管自己叫nodomain。
当然，内容可以后改。但是很麻烦。先要删除原始的，添加新的。还有一堆杂七杂八的问题。关键是，为啥TMD这么简单一个问题我居然搞不定。
方法1 绕过。
怎么绕？
经过检查发现，basedn这些东西，其实都是从debconf里读的，而不是直接来自系统。所以我可以重设debconf来修改配置。
echo slapd slapd/domain string shell909090.org | debconf-set-selections echo slapd shared/organization string shell909090.org | debconf-set-selections 然后再安装，就全部正确了。
方法2 为什么？
检查同样发现了本质的原因。如果debconf里没有配，则去读取hostname -d。在一台机器上，这个配置没事，另一台就不行。
经过我反复测试，发现原因是这样的。
hostname -d读取域名的时候，是寻找/etc/hostname对应的域名作为行尾的那行，而不是127.0.0.1所在的那行。。。
而出问题的那台机器，/etc/hosts配置和没问题的那台严格一致。包括机器编号！
谁TM抄卷子把名字也抄了？</description>
    </item>
    
    <item>
      <title>婚姻平权——写在美高等法院裁定全美同性婚姻合法边上</title>
      <link>//blog.shell909090.org/blog/archives/2764/</link>
      <pubDate>Mon, 29 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2764/</guid>
      <description>论婚姻 从法律上说，婚姻是一种保证性和生育权的制度。他主要反映了统治阶级是如何看待性和生育权的。例如婚姻双方是否在性上面排他，或者是否对称的排他（女性出轨和男性出轨的后果不一样）。双方如何抚养后代（特别是离婚的情况下），如何界定后代继承权。
婚姻制度在开始的时候，出现的目地主要是两个。
规范性权力。 促进生育。 其实你仔细想，如果不是因为上两个因素，你爱找谁上床生育，关统治者什么事？最远古时期，一男一女两个生娃，恐怕也不会找民政局去登个记什么的吧。但是随着社会制度的形成，尤其是“私产”和“继承”制度的形成，你找谁上床就不是你一个人的事了。想象一下，如果每个地方的土皇帝都占有了所有的女性，那么其他人怎么办？会不会产生战争？如果一个女性和多个男性保持关系，那么谁（注意以前男性占有多数社会资源）应当抚养她的后代？
所以，世界各个地方开始不约而同的出现了婚姻制度。当然，随着各地情况不一样，婚姻制度也千差万别。例如中国允许一个男性占有多个女性，但是其中只有一个拥有完整的权利。其他女性的权利就会有缺损。伊斯兰教似乎也允许多个妻子（据我听说最多四个）。有些被占领区甚至有“初夜权”的说法（参见“勇敢的心”）。
进入近代，婚姻制度主要是双方具有极度亲密的关系，以及由此衍生的各种权利和限制。例如妻子通常是丈夫的保险受益人，而且拥有在丈夫失去意识时做出各种决定（例如医学决定）的权力。当然，如果你误信非人，这点也经常被用来骗取保险。当然，这种制度同样的，也鼓励生育。
然而这对同性爱人来说并不公平，因为生育要求的基础是一男一女。他们认为自己被歧视了，所以他们也希望在法律的架构下分享各种权利。在同性婚姻不合法的前提下，他们无法和他们爱的人共享各种权利，甚至无法参加告别仪式（因为实际拥有权利的人，例如父母，甚至妻子，可以禁止他们前来）。而且很多同性爱人，因为婚姻的理由被迫和异性结婚。这不但造成了同性爱人的悲剧，还会祸及和他们结婚的无辜者。
区分婚姻的定义 我认为应当将“亲密双方共享权利”和“性以及生育”分开，甚至性和生育都应当分开。某个权利或限制，到底是给予“亲密双方”还是“有性关系双方”，抑或是给予“一个孩子的父母”。在今天看来，三者不再完全的等同，而且分别越来越大。
性和生育的关系 今天，男女找谁上床不再和婚姻划上等号。你可以坚持婚前无性，但是你不能强迫所有人结婚后才发生关系。
当然，在很多地区，婚姻对性的纯洁性（尤其是女方纯洁性）的要求还是非常苛刻的。据我所知，很多地方，丈夫发现妻子不纯洁后，可以将她送回娘家。她的父亲或者兄弟为了洗刷耻辱，会将其生生打死。而丈夫发现偷情的妻子，可以私自处以投石的刑罚。国家并不会惩罚凶手。
但是在另一些地方，性已经和婚姻没有什么太大联系了。我的预计是这些地方会越来越多，逐渐扩大。
当然，有一些权利和限制是需要给予性的，例如儿童色情的禁止等。但是这事和婚姻关系不大。
生育和亲密关系的关系 如果你想清楚的话，其实两者没有关系。想的更开一点，你可以管“共同生育”的关系叫做“婚姻”，管“亲密关系”的关系叫做另一个名词。只要你彻底分开两者的权利细节，其实并没有特别的理由去阻碍同性爱人分享权利，承诺责任。
例如，为什么要阻止同性的爱人能够共享关系内财产呢？
又例如，为什么要阻止双方承诺扶养对方的义务呢？
将两者分开后，你会突然发现——为什么要阻止同性婚姻呢？完全没有道理么。非但不需要阻止同性婚姻，而且到底是“嫁”猫“嫁”狗都无所谓（实际上法律意义上说对象必须具有人格）。到底是“娶”男人“嫁”亲爹，其实完全没有必要阻止——这既不体现性，也不体现生育。
但是我比较倾向于认为，既然生育和亲密关系是两回事，那么很多为生育而制定的规定就不应当延续到亲密关系上。这种改变不是把结婚条款中的服务双方必须是一男一女改成可以同性就结束的。
例如有些国家为了鼓励生育，对夫妻婚后的财产税收缴纳有相当的优惠。我不清楚婚后纳税是否完全是为了鼓励生育，但如果有这种成分的话，那么把这种鼓励延续到同性关系上就是不正确的行为。
同性性关系 这节是最复杂和有争议的一节。
把生育和亲密关系分离，其实不是解决问题的终点，而是问题的开始。很多问题，是同性关系中特有的。你要把它在亲密关系中规范，那就对异性婚姻者不适用。所以同性婚姻的出现，必然开始很多对同性性关系的规范。当然，这些也不一定在婚姻法范畴内。
例如鸡奸罪。你不可能允许同性结婚，却宣布鸡奸有罪。我靠，这是在逗我玩么？
又例如强奸。很多国家强奸罪的客体，必须是一男一女，甚至必须是男性对女性。那问题来了。一对亲密关系中的双方，其中一方受到第三方（三者都是同性）的强奸。但是只能以故意伤害论处？或者更夸张的情况。一对男同性爱人结婚，婚后其中一人被一个女色魔强上（好可怕，这比中国的电视剧更荒谬）。对于这种情况，也不能算强奸？
如果不修正这点，恐怕也不是有点荒谬吧。
oh, BTW。美国法律已经规定强奸罪可以是任何性别对任何性别了，所以以上例子仅仅是例子，OK？
我在说什么 开始的时候，我们需要管理一些关于性，生育之类的问题。于是架构师发明了一个叫做“婚姻”的类，在上面附加了规则，事情就结束了。
后来发现，婚姻这东西其实没法满足需求。因为婚姻上的很多规则是生育的，但是有一些同性的couple需要用他。
怎么办呢？拆类呗？
这个重构工作居然持续了20-30年，你们还好意思说程序员慢？</description>
    </item>
    
    <item>
      <title>一个有趣的python问题</title>
      <link>//blog.shell909090.org/blog/archives/2761/</link>
      <pubDate>Wed, 24 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2761/</guid>
      <description>quiz 今天在twitter上看到一个有趣的问题。
t = (1, 2, [30, 40]) t[2] += [50, 60] 结果是什么？
t = (1, 2, [30, 40, 50, 60]) TypeError 都不是 1,2都发生 出乎意料的，结果是4。
为什么，我们来分析一下。
disassemble &amp;gt;&amp;gt;&amp;gt; t = (1, 2, [30, 40]) &amp;gt;&amp;gt;&amp;gt; def f(): t[2] += [50, 60] &amp;gt;&amp;gt;&amp;gt; import dis &amp;gt;&amp;gt;&amp;gt; dis.dis(f) 以下是结果。
LOAD_GLOBAL 0 (t) LOAD_CONST 1 (2) DUP_TOPX 2 BINARY_SUBSCR LOAD_CONST 2 (50) LOAD_CONST 3 (60) BUILD_LIST 2 INPLACE_ADD ROT_THREE STORE_SUBSCR LOAD_CONST 0 (None) RETURN_VALUE 我们来解读一下。dis的指令集可以看这里 。</description>
    </item>
    
    <item>
      <title>list.append的性能分析</title>
      <link>//blog.shell909090.org/blog/archives/2759/</link>
      <pubDate>Wed, 17 Jun 2015 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2759/</guid>
      <description>在python2.7.5的源码中，list的append操作最终调用的是Python-2.7.5/Objects/listobject.c:266这里的app1（请帮我复核一下，Python的源码有很多隐藏的手脚不容易看见）。
在app1里，使用了list_resize来进行resize，而list_resize间接用到了PyMem_RESIZE。按照我的阅读，这个应该是层层转到realloc上的。
下面就是查glibc源码的事了。我看到的应该是glibc-2.19/malloc/malloc.c:2951这里的__libc_realloc函数。这个函数很长，我大致读了一下。这里分了两个分支。一个是2992行的chunk_is_mmapped。如果我没理解错的话，我们的内存块不可能没有mapped。那么另一个就是2996行的HAVE_MREMAP，这个是编译时宏，我也不知道我的系统上是不是打开的。如果没打开的话，肯定是走alloc，copy，free的流程。
所以我就用strace跟踪了一下，结果确实调用了mremap。
这个函数在linux内核中。我使用的源码是linux-3.2，结果在linux-3.2/mm/mremap.c:535这里。
大致看了一下函数实现。首先试图处理缩小，如果不行的话试图在扩展到最大(vma_to_resize)，如果这样还是不行，先试试看能不能追加映射(vma_expandable/vma_adjust)。如果都不行，他还是用的创建并移动的方法。(We weren’t able to just expand or shrink the area, we need to create a new one and move it..)。
所以，总体来说，list.append的复杂度还是O(n)级。但是由于remap的内核实现，因此比直接搬数据应该会快一些。具体表现可能要以测试为准了。
但是这里就有一个疑惑。难道python现在删除了复杂的内存层，将mm管理直接用系统的来支持么？我记忆中python源码解析里讲过python有一个巨复杂无比的内存控制系统。难道全用系统管理了么？对此我查了一下 2.6 / 2.7 的python mm文档。里面倒是明确提到不要同时使用系统api和python api来管理内存。但是并没有明确说明如何处理的实现。但是我在系统里并没有找到第二个实现（debug不算），唯一的实现在Python-2.7.5/Include/pymem.h:76，是直接转到realloc上去的。
貌似在新证据出现前，我得认为python使用的glibc api来处理的mm问题。</description>
    </item>
    
    <item>
      <title>携程本次问题分析</title>
      <link>//blog.shell909090.org/blog/archives/2755/</link>
      <pubDate>Fri, 29 May 2015 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2755/</guid>
      <description>携程这次的事情，实在没啥好多说的了。要骂的话，早就骂过了。我们就来说说携程这次事故中，我们能确定的事情吧。
小道消息 首先我要排除一切小道消息，包括数据库被“物理”删除了，前任总监报复，运营妹子和高管好上了什么的。昨天和朋友开玩笑，物理删除要怎么做呢？你要盯着硬盘，直到他羞愧到不能淡定，自己从服务器里裸奔出来，纵身从楼上跳下去。这才叫物理删除。第二天报纸准出新闻——硬盘们，不要着急，等待反弹。。。
至于前任总监报复，运营妹子和高管好上了。我越听越像电视剧，还是国产的。这些没影子的事情就不多说了，我们来说点有用的。
事实 首先，我们要搞清楚一个问题。携程自己说的话，是没用的。
是的，无论是故障时的混乱情况导致说错话，还是出于稳定情绪角度的说辞，都没太大价值。最多用来旁证分析。我们还是要追踪当时发生的，确定无疑的事件，以这个来佐证。
我们可以确定的事情有：
携程的系统挂了近12个小时。 挂掉的是应用层，而不是数据库层。 携程下午到晚上悬赏解决问题。 恢复后，历史数据存在，当然部分出问题时的数据丢失（这是必然）。 14是大家都看的到的。2是因为没有数据库连不上时的各种应用错误提示，干脆就是网页直接失踪。这说明问题不是光缆挖断，也不是数据库（至少不能直接佐证）。能够确认的是应用确实没了。3是来自道哥的消息，我觉得应该比较靠谱（毕竟涉及钱）。
分析 好，综合123，我有个推论。携程在出问题的时候，很快就知道了是应用的问题（至少确定应用有问题）。然后试着恢复，但是无效。原因携程自己都不知道。
这是自然。如果携程不知道应用层有问题，太业余。没试着恢复，太二。恢复了有效，不像。携程知道为什么，那还发布个毛悬赏？综合起来，那就是恢复了没见效，而且携程自己都不知道原因了。
同时这个结论也隐隐的排斥高管报复说，至少携程当时不能确认是高管报复，而是作为通用性技术问题来处理的。如果是高管报复，你找外人来管个毛用啊。再黑自己一遍？
当然，这个推论有个前提。携程的悬赏不是为了转移视线的烟幕弹。不过看当时的情况，我觉得这种可能不大。
那么问题的技术细节呢？不知道。携程自己找到没找到原因？不知道。我们知道点啥？数据库备份没事。
是的，我没法确认当天数据库没事（因为我没有当天订单）。不过看事后没人吐槽，估计是没事的。
事后 携程事后说是程序员错误的删除发布的应用，这个和上文“问题出在应用层”一致。在问题原因上，携程没多大掩饰的空间。但是“程序员误删除”这个说法是真是假就不好说了。实话说，这个说辞显得像是背黑锅，推责任。但无法排除，确实可能是事实的真相。
但是这个说法无法解释的是，为什么恢复时间那么长，而且还开出了悬赏。编译整个系统，然后重新发布确实很慢。但是一来时间不会如此长。二来更关键，程序员非常清楚问题在哪，要花多久。你找个技术专家来弄这个事情也未见得快。而且就算要找，也肯定限制在所用技术系统的编译和发布专家里找，不会满世界的开悬赏。如果真的是重发布时间过长，领导层又挂出了悬赏。这无疑是在瞎指挥。
最后就是“携程在系统上做了改进，规范并杜绝技术人员错误删除生产服务器上代码的操作”。这里明显漏了一个要点”加强部署和恢复演练和自动化推进“。
一般来说，在系统设计的时候，首先考虑的是“如果不小心被删除了怎么恢复”。而不是“如何防止错误的删除”。就像我和一位同事解释的，你可以将rm替换成别的程序，但是如果对方用的是dd呢？如果是chmod呢？如果下次，操作人员执行的不是删除，而是格式化呢？或者是更改ACL权限错误。这无疑要求限制所有操作人员能做的事情。
银行里就是采取的这种思路。每个运维能做的事都被严格限死，很难越雷池一步。但是同时要注意两点。首先，银行的业务相对固定，运维要干的事非常规范。携程的运维恐怕很难做到如此规范。其次，银行是有严密的恢复机制的，恢复机制（包括演练）也是运维的固定工作之一。
考虑一下。如果没有恢复演练。那么万一因为不可知因素，携程需要再度恢复（好倒霉。。。）的时候。运维有没有删除数据的权限呢？有没有修改权限的权限呢？携程的”杜绝技术人员误删除“的手段，还要不要坚持呢？
多说一句 网络上有个哥们猜测”可能是高管报复“的时候，推测是在编译环境里做手脚。这个和我当时的观点一致（不代表我认同他说的这个事实）——要让多个系统始终编译和发布了都不能工作，最有效的后门就在编译环境里。毕竟很少有代码能够跨越多个系统，但是几乎所有项目都会使用同样的编译环境。</description>
    </item>
    
    <item>
      <title>程序的持续更新</title>
      <link>//blog.shell909090.org/blog/archives/2753/</link>
      <pubDate>Wed, 27 May 2015 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2753/</guid>
      <description>今天有个朋友来问我sql2000的问题，数据库装好后各种，总之就是不能用。我说我已经很久不用sqlserver了，就算用，也绝对是用2008而不是2000。不过我还是给了一点小意见——重装整个系统再重装sqlserver呢？结果他和我说，就是重装惹的祸。
这是一个很老的业务系统，数据库只能用sql2000。整套系统运行了很久都没有维护了，基本就是硬盘坏了换硬盘，也没有多的烦恼，很轻松。但是最近CPU挂了，连带主板也有问题。这类的老主板+老CPU不好买，所以干脆用新件起系统。但是windows系统更换主板后无法直接识别，所以系统要重装，牵连sql server要重装。装完了远程就始终无法连接，要不然就是能连但是不能写。
我靠还有这种事？当年不是用一样的系统组合，一样的安装盘，一样的维护人员。为啥今天就出问题？
结论是不知道。但是这个事情不能因为不知道就不做，所以问我有啥想法没。
我问他能不能升级，告诉说没戏，应用绑死了。整个系统必须用sql 2000，而操作系统只能是winxp和win2003。好家伙，这三个都是超过维护期限的，连漏洞补丁都没了。那这个没救了。。。
想到帮另一个朋友维护的系统，也有类似烦恼。在老版本的php上写的系统，在新版本的php+mysql组合上就无法执行。所以必须安装老版本的CentOS。而老版本CentOS是有退役期限的——一个系统也不可能常年累月做下去吧。所以未来如何，一样很发愁。类似的事情数不胜数，甚至包括我自己写的某个系统，用了老版本的sqlalchemy导致升级不上去。
有一类系统，需求不经常变更，系统压力很小，使用场景很专一，结果就是代码几乎不需要维护的可以一直用下去。不得不说，这种系统比其他系统是简单多了也幸运多了。但是再耐用的代码，也是有服役期限限制的——一般和整台机器的寿命差不多，也就是7-10年。超过这个期限后，还要运行老系统，就要看负责是不是找的到人维护了。语言可能很少有人用，组件可能不能升级，牵连到系统都是老的，没有维护没有补丁。新设备上能不能装出来，有没有驱动都很难说。要照10年前的情况维护，还不如大量搜购老部件接着维护电脑比较痛快。
银行在上个世纪用COBOL写了大量代码，直到今天还在维护——但是代价也很大。银行不得不自己维持了COBOL的一整套生态系统，以至于我提到COBOL几乎就和银行话上等号。（当然，这也和COBOL本身和适合做这类工作有关）
如果没有银行那么大财力的话，要维护这种小系统，在短期内相当占便宜。但是如果在长期，万一出点问题，能不能搞定就有点存疑了。所以我建议维护这种系统的人，每五年做一次检讨，看看系统是不是重做一下，或者做一下兼容性升级，重写部分代码以便于在新系统上执行。这样也许不需要太大精力，就可以让整个系统顺利的再撑个5年。
无论如何，指望像房子一样，建好后就一直可以使用，不碰到灾害不碰到意外就可以用个几十年。这种事情对于程序来说几乎不可能了。程序更像是汽车，一旦过了20年，要找老部件就非常困难了。合理的选择还是弄个新的吧。</description>
    </item>
    
    <item>
      <title>试题设计的原则</title>
      <link>//blog.shell909090.org/blog/archives/2748/</link>
      <pubDate>Tue, 19 May 2015 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2748/</guid>
      <description>原则 其实主要就两点。
分辨率足够。 简单。 第一点很容易理解。你的题目必须能准确区分傻逼，普通人，和牛逼，因此最理想的状况是，傻逼考零分，牛逼满分，普通人在中间。所以你的题目应该简单。如果题目难到普通人和傻逼一起做不出，那就没有区分能力了。如果不是正好碰到一个牛人，你的考试只能让你啥都招不到。这会把你自己变成傻逼。
所以，你的题目应该有一半是普通人能够做出来的，而不是道道都是神一样的面试题。之所以你在网上经常看到神一样的面试题，那是因为。
大公司不缺应聘的人，所以他们的“牛人线”比较高。 你能看到的题目，都是最牛逼的。 当然，题目中确实应当有一些有难度的题目，用来区分真正的牛人。这部分人我们要特别料理他们。
复用题库 混合一个题库，每次面试抽取不同题目形成试卷，这是常识了。
主要是防止试题外泄，还有重复出题造成的疲劳。
当然，每个题目需要加不同的属性，用于后面的一些分析。在抽题的时候也需要参考属性，例如上面提到的难度。
经验题还是能力题 我把试题分为两个类型。一类是测试你是否用过某项技术，用多深。另一类则是你的智力如何，学习，沟通，理解能力如何。
可以预期的是，刚毕业的人，经验题得分会低一些。不过在实际生产中，这些人出活的能力一向不差。所以对于刚毕业的学生，可以在经验题得分上宽容一些。
区分领域 在试题设计中，经常需要测试多个领域。例如网络，系统底层，等等。
将多个领域的题目分开标注，有利于你最终评定这个人的技术范畴。例如系统底层出色，但是网络很糟糕，这显然就不适合扔去一个重网络开发的组。
限制总量 这点才是整个试题设计的核心难点。
长时间的笔试是很高成本的。对于被考试者不是什么很好的体验，对于考试者来说，要出题，要判卷。考试期间还要招待人家，进行计时。如同马拉松一样的考试没有任何好处——除非非常必要。
但是正常来说，技术面试应该要问系统原理，算法，网络，编程语言，智力题等等，至少这么五个方面。每个方面一道题区分普通人，一道题区分牛人。这就是10道题。再复合上经验和能力的区分，还有为了对抗偶然而要每个组合多几个题。综合起来可能多达20-30道。这样1小时的笔试时间，每道题上只有区区2-3分钟。这点时间根本不够考核一些深入的问题。
所以如何减少问题的数量，而非增加数量，才是核心难点。
我的想法是增加过程叙述题，让被试人对一些经典过程做描述，并规范他一定要描述到哪些方面。以此来分析他对一些领域的基础。但是这方法有个明显弱点——不好执行不好打分。
关于这方面大家有啥意见？</description>
    </item>
    
    <item>
      <title>Sysctl Timestamp对速度的影响</title>
      <link>//blog.shell909090.org/blog/archives/2745/</link>
      <pubDate>Tue, 12 May 2015 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2745/</guid>
      <description>不知道我是不是写过了。
sysctl中有一个内核设定：
net.ipv4.tcp_timestamps = 1 这个值默认被设定为1，但是当这个设定被设定为0时，会导致tcp序列号高速绕回，从而导致传输速度上限。
tcp的最大报文生存时间(MSL)默认值为60s（这也是为何TIME_WAIT默认120s的原因）。而tcp序列号只有32位，未来区域只有2^31。
**31 * 8 / 60.0 / 1024 / 1024 = 273Mbps 因此当关闭timestamp时，最大传输速率不超过273Mbps。
在公司内部曾出现过这个现象（由于某个理由，错误的关闭timestamp），在自建系统上的测试也验证了这点。
使用iperf对性能进行测试，最大速度为266Mbps。
但请注意，被设定后，需要长达10分钟以上的时间才会发生效果。因此需要在设定后半小时后，去用iperf检验设定是否生效。</description>
    </item>
    
    <item>
      <title>电池标注不好，你上不了飞机</title>
      <link>//blog.shell909090.org/blog/archives/2742/</link>
      <pubDate>Tue, 05 May 2015 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2742/</guid>
      <description>问个问题。谁知道锂电池上飞机的标准。
我在这个页面找到了解释。这是首都机场的主页，还是比较可信的。
单块电池能量应小于100Wh。100-160Wh的电池需要航空公司批准，160Wh以上的不得上飞机（其实可以按照危险物品托运）。 在飞机上的锂离子电池，应当随身携带，不应当托运。做好绝缘隔离保护，不要在飞行过程中充电。 电池总量应小于160Wh（关于这点我不确定，规定相当含糊，解读也可能完全不同）。 OK，上面的事情很多人可能都知道。所以呢？这篇文章重点在哪里？
按照普通锂电池放电电压3.7V计算，100Wh的锂电池大约合27000mAh。目前主流的两万毫安时电池还不足以达到这个标准，但是看起来很快了。最大能带上飞机的电池规格，应该是25000mAh这个级别。 按照这篇注解。如果你的锂电池没有标明能量，也没有标明放电电压，只有一个电池容量。是不能上飞机的。哪怕只有1000mAh，没有标注放电电压的电池，从标准执行可能性上就会被没收。 2也许出乎很多人意料外。1000mAh的电池，要满足100Wh标准，其放电电压需要高达100V。目前好像没有任何一种材料的放电电压能达到这么高（变压转换除外）。但是在执行上，硬生生就成了二等公民。
电池的要点并不在2W mAh，而是标注。因此买电池的时候，请注意电池外壳上是否带有清晰的容量标注。
当然，很多机场是压根不执行这么严密的限定的。如果你对这点很有信心，那不妨当我没说。但是这次在太原武宿机场，就正好碰到了这待遇。
笔记本电池电量大的多，更容易碰触到100Wh的限制（例如我的笔记本，三芯电池60Wh，六芯多数就要超标了）。这种情况下，万一不让上飞机很麻烦。考虑到这点，如果你要新买笔记本的话，建议你买一个电池能量100Wh以下的。</description>
    </item>
    
    <item>
      <title>python代码写给你看 [广告]</title>
      <link>//blog.shell909090.org/blog/archives/2739/</link>
      <pubDate>Wed, 22 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2739/</guid>
      <description>最近有个朋友问我有没有意向写点和python有关的东西。我说没啥想法。要入门，看dive into python足矣。要学最准确的用法，当然是看python manual。两者都有很不错的中译本了，我还有什么可写的呢。朋友说看了这俩可不代表会写程序啊。我说要真的学会，你只有亲自来看我是怎么写的了。朋友说正好，我们这里就是录电子课程的。。。
所以我就录了这份python代码写给你看。其实录的很粗疏，并不适合纯粹的初学者。因为里面并没有“讲解”python是什么，print是什么，对象是什么。这些东西基本都是在课程中随口提到的。如果没有看过入门书的人，直接看视频的结果就是看一个点卡一个点。也因此，我只推荐“看完了python入门书”，希望“能够像真正的python程序员一样工作”的人来看。
同时，这份视频在求解的时候经常思路卡在那里。因为我追求“必须让观看者看到我真实的代码过程”，所以里面的大部分问题，并没有提前准备过程。我觉得，提前把代码写好，然后到录的时候咔咔敲出来，漂亮是漂亮了，还不如让你直接看源码来的方便。这里的很多问题，我都是当场推论如何解决的。有些问题甚至上来思路错了。但是我觉得这些都不重要。我觉得看到如何使用各种手段去发现，改正错误，比看到正确的代码更有用。
录到最后。我和朋友说，我觉得不能再录下去了。整个视频里提供的问题已经太凌乱没有体系了，再录下去就变成了“现场用python解决各种奇怪问题的，没有人看的大杂烩集合”了。谁愿意总是看一个胖子程序员在那里唠叨一堆问题他是怎么解决的呢？但是我又不大满意。仅仅这里提供的几个例子，并不能完整的反映一个python程序员日常工作中碰到的各种问题和如何解决。比起上百小时的实际工作来说，录像能提供的时间无疑太短了。
无论如何，我最终决定，还是把现在的工作放在这里，放给大家看。希望能够成为大家在python入门之路上的，一颗微不足道的小石子。也希望将来，我能为这份教程去芜存菁。
请大家批评指正，谢谢。
PS：音量的问题就别吐槽了。我们设法改善了几次，最后发现有很多听不清的内容是因为我的“小黄鸭调试法”。简单来说就是没思路的时候就开始自言自语，描述一个个部分的用途，试图发现里面的问题。结果这些自言自语变成了背景里的念经。。。
也许下会我会专门录个“shell读kernel”当睡前读物录音。因为那会更加的颠三倒四语无伦次。。。</description>
    </item>
    
    <item>
      <title>ppa的使用</title>
      <link>//blog.shell909090.org/blog/archives/2737/</link>
      <pubDate>Tue, 21 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2737/</guid>
      <description>最近用ppa做了backport，这里记录一下用法。
编译简述 ppa的大概工作原理，和mentors非常类似。
包一个deb包，然后build这个包，生成dsc，deb，build和changes。 上传这些文件，然后ppa丢弃所有deb（是的，ppa不接受编译好的包，因为可能在编译过程中被做手脚），从源码编译所有文件。 ppa生成了一堆deb文件，并丢到一个特别的目录下。 ppa为这堆deb文件做签署。 最终用户将这个目录添加到apt源中，就可以安装这些包了。 这里有几个细节：
服务器怎么知道是你上传的包？
答案是在打包时进行签署，所以dput是不验证身份的。也因此，你需要将自己的gpg key上传到服务器。 既然不需要deb，如何构建一个没有deb的编译？
答案是debuild -S。当然，这也可能有变化。如果是建立一个已经存在的包，是-sd，否则是sa。后面还可以用-k\来指定 最终用户如何构建信任？
答案是由ppa编译，由ppa签署。用户并不导入维护者的任何key。但是如果用户不信任维护者，那么维护者可以在包内夹杂任何恶意代码。因此ppa只解决安全传递和构建，而不解决维护者信任问题。 申请ppa 不废话，自己去launchpad申请。这个是要ubuntu one帐号的，然后openid认证。不过不算太麻烦。
添加key 首先需要生成gpgkey，这里不解释如何生成key pair。
然后需要将key pair上传到ubuntu key server。我不知道其他key server最终会不会同步，但是即使会，同步时间也是长的那啥。
gpg --keyserver keyserver.ubuntu.com -send &amp;lt;keyid&amp;gt; 这样就行了。
设定dput 在这个页面有解释。在ubuntu 9.10以上版本，可以直接dput ppa:userid/ppa &amp;lt;source.changes&amp;gt;来上传。如果是更老版本（或者像我一样用debian），可以设定~/.dput.cf来工作（刚刚的页面下面有样例，照着改就行）。
添加ppa 使用add-apt-repository ppa:userid/ppa就行了。本质上，他做了两件事。
在/etc/apt/sources.list.d/下面生成一个文件，将你的repository添加到系统中。 将ppa的sign key导入到系统中，并添加信任。 </description>
    </item>
    
    <item>
      <title>EFI和GPT的研究</title>
      <link>//blog.shell909090.org/blog/archives/2734/</link>
      <pubDate>Tue, 24 Mar 2015 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2734/</guid>
      <description>EFI和GPT的关系 关于EFI和GPT的解释我就不说了，相信来看我blog的人应该能自己搜到。
关于两者的关系，我简要点说吧。如果你需要用EFI引导，你就应该用GPT分区。如果你需要用GPT分区，你就应该用EFI引导。反之交叉组合，不一定会失败，但是折腾和兼容性不保证是必然的。从这两年的经验上看，越来越多的系统开始支持EFI+GPT模式的组合。所以大家可以提前演练一下EFI+GPT模式引导。
GPT和MBR分区互换 在windows下可以用磁盘管理器直接换，在linux下可以用parted或者gdisk来做。当然，如果你有图形界面，可以上gparted这个神器。非常好用。
linux下用parted更换分区表的方法[1]：
# parted /dev/sdd GNU Parted 3.1 Using /dev/sdd Welcome to GNU Parted! Type &#39;help&#39; to view a list of commands. (parted) mklabel New disk label type? gpt (parted) 但是目前我看到的可靠转换方案，都是在无数据情况下进行分区表互换。带数据转换有很多前置条件，而且肯定有风险。所以建议初始化硬盘的时候搞，不然后面可能代价很高。
GPT分区的划分要求 GPT有很多优势，例如没有主分区和扩展分区的区别，硬盘大小可以超过2T，分区可以打很多flags，等等。但是使用GPT也不是说全无要求。基础来说，GPT分区划分有几个建议。
第一个分区划分为EFI分区，并且保留至少20M，推荐100M的大小。 第二个分区划分为GPT分区，保留同上。 其他分区安装使用频繁程度和大小从前向后装。 1是因为EFI推荐为第一个分区。3是因为万一你需要为某个分区扩展大小，你当然希望移动比较小的分区。
EFI引导 终于到了今天的重头戏，EFI引导。EFI+GPT模式下，引导变得异常简单，多重引导的支持也非常容易。大家再也不用去抢MBR了。
在linux下，有个工具叫做efibootmgr，可以man一下看文档。简单来说，这货有三个功能。
efibootmgr -v，查看当前引导表项。 efibootmgr -c，增加引导表项。 efibootmgr -B，删除引导表项。 至于引导表项，具体是什么呢？简单点说，就是某硬盘的某分区，分区ID多少多少，上面的某路径下，有个按照EFI规范写的文件，你给我引导起来。就这么简单。
当然，EFI认识的文件系统格式比较少，我确定的只有FAT一种。但是好在EFI文件引导起来后，后面跑什么文件系统就无关了。所以这也是为什么有EFI分区的原因。这个分区以FAT格式化，然后所有的启动管理器都安装在上面（其实就是放了一个文件）。最后加一个表项就可以引导了。
通常情况下，linux下由grub-efi这个包来提供这个efi文件。当efi文件被引导后，会找到boot分区，并且加载上面的grub主程序和附加模块。最后进入grub主系统。我查看了一下，在我的系统上(debian jessie, 2015-03-24)，efi被挂载到/boot/efi，而efi文件在/boot/efi/EFI/debian/grubx64.efi，大小为119808字节。
硬盘安装windows 上面说了这么多EFI有关的东西，下面说说贝壳最近的烦恼。
最近换了一台机器，挺不错的。但是由于机箱小，所以硬盘拆卸困难，基本就当作内置硬盘了。所以把硬盘拆下来安装系统就做不到了。同时又没有光驱。所以安装系统的方案只有U盘一种。
当然，对于linux来说，这都不是事。debian很快就安装完成，整个系统的重初始化没用两个小时。但是windows上就卡壳了。Windows7不支持dd到U盘引导，而微软推出的iso to udisk工具理所当然的只能跑在windows下——可当时所有windows实例都挂了正在重装中。
所以我就借了一个USB光驱来装系统，然后发现另一个悲剧的事实。当初为了多引导方便，使用了GPT分区模式。而Windows的安装，居然是EFI引导才能往GPT上装，BIOS引导只能往MBR上装。这个为了防错的愚蠢设计的结果就是，Windows7的原始安装光盘，只要从光驱一引导，就必定只能装到MBR上。。。
当然，后面介绍的内容，可以帮助你推理出如何修改安装光盘，来实现EFI下的ISO引导。不过这种事情对当时的我一点帮助都没有。
所以核心问题就是EFI引导了。于是，我开始了上面的研究。而研究完EFI引导，我发现——其实好像连U盘都不用的。因为本质来说，Windows的安装程序也是一个Windows。我只需要分一个FAT的分区，把安装程序丢上去，然后设法添加一项EFI表项，指向正确的EFI加载文件即可。有一份如何制作EFI引导的U盘的文档也支持我这个想法[2]。
所以我做了一个简单的测试，在GPT的尾部分了一个小分区，并格式化为FAT32。在上面展开win7的完整ISO。
然后是关键问题，EFI表项是一个硬盘+分区+路径的组合。硬盘和分区都不是问题，问题是应该指向哪个文件呢？根据我的测试bootmgr.efi和cdboot.efi都是错的，无法完成引导。当然，在文档[2]和文档[3]里，都指明了如何解决这个问题。从一个可引导的win7里面，提取一个bootmgfw.efi文件，改名为bootx64.efi。不过上面说了，我没有一个可用的windows。幸运的是，文档[3]里面提供了一个下载链接，可以让我下载一份。将这份efi丢到分区上，并且添加efi表项后，BIOS引导项中出现了安装器选项。选择后就直接进入windows安装界面，并且可以安装到GPT分区上。
GPT分区的激活 其实我不是很想提到这个事，不过GPT分区安装windows绕不过去的问题就是如何绕过防盗版。
本质上说，目前的软激活，都是通过抢在Windows前启动一个程序，来拦截Windows对SLIC的读取，从而返回一个合法的OEM SLIC。这个加上系统内安装的，和这个合法OEM SLIC对应的证书，就可以达到激活的目的。</description>
    </item>
    
    <item>
      <title>FIN-WAIT-1的问题一例</title>
      <link>//blog.shell909090.org/blog/archives/2730/</link>
      <pubDate>Thu, 26 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2730/</guid>
      <description>这是一个早应该知道的事情。但是还是被整了半天。
引子 tcp关闭时有多少个状态？
当当，别数了，应该是6个，不算CLOSED。分别是FIN-WAIT-1/FIN-WAIT-2,CLOSING, TIME_WAIT, CLOSE_WAIT,LAST_ACK。如果不能瞬间想起一个方块来，说明tcp状态不算熟。
问题 今天的故事来自今天BI同事提出的一个问题。在线上，他发现这么一个现象。在一组系统中，客户端全都FIN-WAIT-1了，但是服务器还是ESTAB。
我的第一反应很简单，这明显差了一个FIN包的距离。而且鉴于两者在同一网络中，而且重复出现。建议他首先排查中间的防火墙设备和防火墙设置。
会找上我的问题，当然没这么简单。中间没有任何防火墙或软件防火墙设定。
分析 下一步呢？有点没方向了。抓包分析。发现FIN端向ESTAB端不停的发起ACK，但是看起来和FIN没什么太大关系。
偶然，同事注意到所有出现现象的链接都有写缓冲区数据。这是一个不常见的现象。写缓冲区一般会有点数据，但是应该很快就被消费，而不会长期堆积，更不会长期维持同样的数字。这是写缓冲区满。结合刚刚的ACK，其实本质是对端停止消费数据。
这是一个TCP的边角。当读缓冲区满的时候，tcp协议栈会声明window=0。当读缓冲区恢复的时候，读方会用ack with window来重新宣告可用缓冲区。但是在tcp里，ack是不重传的。所以这个ack会丢失。因此写方有责任定期请求确认读方window，来确定整个过程不会卡死。这就是刚刚看到的不停ACK的现象。
而这里就有个非常重要的可能性——FIN包的处理方式。为此我阅读了源码。源码告诉我们，FIN包被接收到的时候，并不是即时处理的。实际上，在ESTAB状态收到的FIN，正常path下会进入tcp_data_queue。这个函数会将包堆积到队列中，并根据当前seq来处理包。主要包括三种seq，当前包，过去包，未来包。只有在以下两种情况下，fin包才会被处理：
当前收到一个fin包。 当前收到一个包，完成处理后out of order队列中有数据，因而进入tcp_ofo_queue。而队列中有fin包。 而不幸的是，当前包处理流程第一步就是判断tcp_receive_window。如果没空间了，会进入out_of_window过程。后者会快速的触发一个ack返回，然后就把包给丢了。
我猜对了开头，可是没有猜到结局。
结论 通过python的快速复现，验证了这个结论。建立一对连接，其中一个不接收任何数据，而其中一个发送足够长的数据。当读缓冲区满后，再去close，出现一端FIN-WAIT-1，一端ESTAB的现象。
因此，结论如下：
当写缓冲区满之后，收到的fin包会被丢弃，而发送端并不会重发。而只要写缓冲还有剩余空间，哪怕一个字节，都可以正常处理。 内核参数 根据文档，可能有几个内核参数与此有关。
net.ipv4.tcp_max_orphans net.ipv4.tcp_orphan_retries 测试表明，net.ipv4.tcp_max_orphans可以抑制这个现象。当减低这个数值后，再进入FIN-WAIT-1状态的连接会自动消失。ss -natp不能看到连接。有趣的是，如果进程尚未关闭的话，可以在/proc/[pid]/fd下面看到fd仍然存在，而且还可以读出数据。
抓包表明，连接实际是被一个RST干掉的。阅读源码，在tcp_close的最后部分，可以看到tcp_too_many_orphans被调用了。如果超过限制，就会发出reset，并且关闭连接。
而tcp_orphan_retirs，根据我的理解和测试，和这事没有关系。这主要是指这么一种现象：当对端机器poweroff(而不是shutdown)的情况下，你所发出的报文会丢失。因此理所当然的，写者的写缓冲区会很快充满。此时会发起连接探测，以确定对方是不是掉线了。套在close的这个case上，就是一边是FIN-WAIT-1，另一边死不响应。需要通过多次探测来宣告对方死亡。因此，如果对方机器死机导致不响应你的FIN，才是用tcp_orphan_retirs的场合。</description>
    </item>
    
    <item>
      <title>p2p vpn的部署方法</title>
      <link>//blog.shell909090.org/blog/archives/2727/</link>
      <pubDate>Mon, 09 Feb 2015 00:00:00 +0000</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2727/</guid>
      <description>p2p vpn的基本概念 p2p vpn这个概念的提出，是因为openvpn在数据传输上的一个特性——虚拟链路都是从拨入端到服务器的。例如vpn网关在北美，上海电信的两个人要通讯，数据就要从北美绕一圈。这个特性在多节点打通上无疑很扯，于是催生了很多p2p vpn。他们的基本理念是——尽力从端到端，不成再绕。而且为了解决端到端，顺便得解决NAT问题——也就是带有STUN打洞。
tun模式的三层转发表 先说明一点，大部分p2p vpn都是tun模式。这也很正常，tunnel用的么。但是大家在配置openvpn的时候，不知是否注意过iroute这个指令。为什么会有iroute指令的存在？
tun模式是三层模式，相信大家都有数。也就是说，报文传递的时候只带有三层地址，openvpn也凭借三层地址来找到要转发给谁。这里和普通的网络就显示出区别了——普通网络使用ARP协议来自管理转发规则，而openvpn则是凭借内部写好的转发表。
例如vpn gateway的虚地址是192.168.100.1，节点1是100.5，节点2是100.10。那么节点2发送报文给节点1时，报文大约长这个样子。
192.168.100.10 -&amp;gt; 192.168.100.5
在普通网络中，第一步会查路由表，确定是eth0(虚拟网络是tun0)。然后在上面广播ARP请求，获得MAC地址。最后填写MAC地址，发送报文。但是在tun虚拟网络中，仔细看你的路由表，是不是整个虚网络都被交给了一个叫做100.4之类的奇怪gateway转发？甚至如果你没有打开client-to-client，整个虚网络只有一台可见，这台还是交给这个gateway转发的。
这是因为你到这个奇怪的IP之间还是走ARP过程，但是这个奇怪的IP收到你的报文后，就可以是纯三层过程了。你可以把这个IP视为本地openvpn的化身。openvpn会把你的报文发送到openvpn gateway，然后openvpn gateway再转发给正确的机器。也就是说，openvpn gateway必须知道某个目标IP需要转给哪个节点，物理地址多少，对吧？
作为纯虚网络，知道节点的IP很容易——毕竟是openvpn gateway管理的地址分配过程。但是作为tunnel和多地址打通，这里就有点困难了。例如节点1还有个网段是192.168.80.0/24，节点2还有个网段是192.168.60.0/24，那么如下一个报文从节点2中出去，你让openvpn gateway怎么办？
192.168.60.15 -&amp;gt; 192.168.80.15
你也许会说，我当然有配节点1的网关转给openvpn的拨入端。问题是，这个动作，openvpn的拨入端尚且不知，何况openvpn gateway？于是我们派生了route/iroute这两个指令。
route/iroute表示这个地址段归属于这个节点所有，区别在于route同时修改路由表，而iroute不修改路由表。配合push，可以由服务器端下发指令修改客户端路由表。
p2p vpn也有类似的问题。甚至，由于没有统一配置端，因此连每个节点的虚IP都不能很容易的得到。在配置中必须注意这点。
n2n n2n的模式比较简单，也比较有局限性。基本分为两个端，supernode和edge。supernode类似于hub，把所有edge拉到一起。edge都是对等的。
supernode:
supernode -l port edge:
edge -a [address] -c [name] -k [password] -l [supernode:port] -u [userid] -g [groupid] 解释一下。开一个supernode，不用做任何设定。反正supernode也不会持有edge别的信息。edge要设定supernode的ip和端口，然后提交name和password。name和password相同的，就进入同一个虚拟网络。然后自己的虚拟ip是address。最后的userid和groupid必须是数字。主要是因为开tun需要root权限，因此可以在获得完权限后退化成普通用户，以防权限太高。
这里好玩的就是，理论上address可以天南海北，完全不用管路由怎么走。甚至172.16.0.1可以和10.0.0.1通讯(我没实际确认)。因为大家都是看彼此的IP是否经过注册，而不是计算路由表。
但是这里就有个缺点，我看到man文档中只提到address，没提到可以提交一个网段。所以无论我怎么设定，使用三层方案做隧道的时候，n2n是转不过去的。因为他不知道这个网段归哪个节点管。
所以，n2n的p2p模式很便利，但是没法打tunnel(至少我不知道怎么玩)。
tinc tinc和n2n一样，也是一种p2p vpn。不过好处在于，tinc允许你在一个节点上配置多个网络，因此可以打tunnel。
在配置之前，我先约定两个词。“配置名”和“节点名”。一个配置是接入同一个网络的多个节点，还有他们如何拓扑。节点名就是一个节点的名字。所以，和配置有关的有以下两个。
/etc/tinc/nets.boot: 这里写上想自动启用的配置的名字
/etc/tinc/[configname]: 配置的根路径，以下路径全是相对路径。
配置 下面就是某个配置中的一堆文件。注意这些配置都是配置自己节点的属性信息。
tinc.conf:
Name = [nodename] Device = /dev/net/tun ConnectTo = xxx tinc-up:</description>
    </item>
    
    <item>
      <title>openvpn的几种基本模式</title>
      <link>//blog.shell909090.org/blog/archives/2724/</link>
      <pubDate>Wed, 04 Feb 2015 15:07:42 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2724/</guid>
      <description>vpn的原始模式 vpn的最简模型，相当于在两台机器上插一块虚拟网卡，然后中间连一根虚拟网线连通。因此vpn才得名vpn(virtual private network)。
其复杂之处在于，这块虚拟网卡如何配置网络，和别的网卡是什么关系。再加上多个节点间如何通讯。种种都够新手喝一壶。
虽然openvpn在科学上网上是废了，但是在不出国的网络上用来保护通讯，还是非常好用的。
tap模式 tap模式的特点是二层打通。典型场景是从外部打一条隧道到本地网络。进来的机器就像本地的机器一样参与通讯，你分毫看不出这些机器是在远程。
优点：
配置简单。 不需要在所有机器上配置或者动网关。 缺点：
tap在部分设备上不支持(例如移动设备)。 wlan加入网桥后不一定可以工作。 广播包会散发到虚拟网络中，可能极大消耗流量。 特别解说一下wlan。部分AP对一个客户只接受一个MAC地址，因此无法做网桥。这应该是wifi网络的常规问题了。解决方法是换AP，或者做mac-nat。
操作方法：
你需要先在当前网络中，为vpn预留一些地址。这些地址应该足够拨入用户使用，不应和dhcp撞车，不应有其他人使用。
而后，建立一个br，将当前工作的eth迁移过去。(具体细节就不说了，每个系统小有差别)再建立一个tap vpn，在启动脚本中指定加入这个br。
example 假定内网地址为172.19.0.0/24，其中保留172.19.0.16-172.19.0.31供vpn使用。
服务器配置:
port [port num] proto udp ; 参考我上一篇[vpn不要走tcp协议](http://blog.shell909090.org/blog/archives/2722) dev tap ca ca.crt cert server.crt key server.key server-bridge 172.19.0.16 255.255.255.0 172.19.0.17 172.19.0.31 ; 或者可以采用这句 ; server 172.19.0.16 255.255.255.240 ; 注意掩码实际上等于/28，做掩码运算后，这段地址和上面的保留地址重合 script-security 2 up vpn-start ; 建议使用绝对路径，避免版本坑 down vpn-stop vpn-start:
brctl add br0 $dev vpn-stop:
brctl del br0 $dev 客户端配置:</description>
    </item>
    
    <item>
      <title>vpn不要走tcp协议</title>
      <link>//blog.shell909090.org/blog/archives/2722/</link>
      <pubDate>Mon, 02 Feb 2015 11:43:54 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2722/</guid>
      <description>和大家唠叨一件小事。
vpn不要走tcp协议。
我原本以为这是个常识。因为当网络发生丢包时，vpn的那个tcp会等到超时，然后重发。但是vpn里面封装的tcp链路多半也超时了，也要重发。所以一旦发生丢包，整个链路上就会突然一下子变拥堵了。
那么能不能调整链路超时重发机制呢？这个比较困难。链路的超时重发是靠RTT(round-trip time)来工作的，因此VPN的RTT一定小于里面所封装tcp的RTT。如果你的vpn工作在一根很好的链路上，而tcp链路的对端要通过一个延迟非常高的网络。那么vpn的重发对tcp链路的影响并不大。但是我看到的大部分情况下，vpn是穿越互联网(而且大多是跨国或者跨洲网络)的，而vpn的双端都落在内部网络里。因此vpn构成延迟主体。这时候，vpn的RTT和里面所封装tcp的RTT几乎相差无几，两者会几乎同时超时。
什么时候会发生丢包呢？最常见的理由是带宽跑满。当路由器来不及处理数据的时候，就只有丢包了。例如某出国网络丢包三成，这就是拥塞爆了。当然我们也不否认其他理由，例如无线，天生就是有丢包的。即便没有上述理由，有的时候就是运气不好，无理由的发生一下丢包，也完全不需要奇怪。
所以，在大部分网络上，丢包是常态。而丢包后，内外两层tcp同时超时会引起严重的重传问题。所以tcp协议不是特别适合做vpn。
结果某vpn居然被配置到了tcp模式，而且还不能改。。。郁闷啊。。。</description>
    </item>
    
    <item>
      <title>Charlie and Dave</title>
      <link>//blog.shell909090.org/blog/archives/2720/</link>
      <pubDate>Tue, 27 Jan 2015 22:19:37 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2720/</guid>
      <description>公司希望弄一套双授权的安全系统，老大提供了一套算法，求大家review。如果这个方案确实可行，那么我们会做完然后开源出来给大家用。
Author and License Author: 韩拓 保留所有权利 All Rights Reserved
以下内容不以cc-by-sa3.0发布。(因为根本不是我的创作)
场景 Alice希望登录到Bob上执行操作。 两者的基本控制协议为ssh。 假定 攻击者名叫Mallory。 如果Alice的私钥泄漏，管理者必须有权停止Alice到Bob的访问而不需要更换所有Bob的公钥。 除去Alice和Bob外，参与通讯过程的所有机器(即下文中的Charlie和Dave)中可能随机被攻破一台。 服务都在内网，但是如果网关和被攻破的机器是同类系统，Mallory即可具有内网监听和伪造数据报文的权限。 Alice不会利用获得的Bob的权限故意执行危害性指令(但是可能被诱骗)。 Alice和Bob不会被攻破。 方案 假定有两台机器，Charlie和Dave，Dave和网关不得是同类系统。根据假定4，两台机器不会同时被攻破。
Alice通过SSL和Dave建立连接，上报自己的用户名，需要访问的设备和帐号，并提交一个临时生成的ssh pubkey(username, account, host, pubkey)。 Dave根据预先设的IP-username-sslkey验证用户身份为Alice，并且根据ACL确认其具有访问权限。 如果通过验证，那么Dave用自己的key，通过SSL联系Bob上的某个程序，将Alice的pubkey提交到Bob的合适帐号上(account, pubkey)。 Bob通过sslkey验证提交者确系Dave，将pubkey临时加入account中。 Bob完成此事后，通过Dave向Alice返回成功。 Alice通过SSL和Charlie联系，上报自己的(username, account, host)。 Charlie根据预设的IP-username-sslkey验证用户身份为Alice，并且根据ACL确认其具有访问权限。 如果通过验证，那么Charlie用自己的key，通过SSL联系Bob上某个程序，为Alice开通到Bob的22端口的tcp盲转发。 Alice利用开启的tcp通道，和自己的临时ssh private key验证登录Bob。 在Alice连接Bob上的程序后，删除alice留在Bob上的临时pubkey。 验证 假定Charlie被攻破。
方案1-5没有影响。 Charlie拥有能够在任意一台机器上开启盲转发的权限。 但是Charlie并不能影响Dave去添加pubkey。 假定Dave被攻破。
Dave拥有在任意一台机器上添加pubkey的权限。 但是Dave并不具有打开到任意一台机器ssh端口的权限。 </description>
    </item>
    
    <item>
      <title>无题</title>
      <link>//blog.shell909090.org/blog/archives/2717/</link>
      <pubDate>Mon, 05 Jan 2015 15:46:14 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2717/</guid>
      <description>路过南京，突然想起前几年在狮子桥吃的鸭血粉丝汤。什么味道其实已经忘了，只是在干完了活后等火车回上海。看时间，与其在火车站无聊还不如在狮子桥吃点东西。
其实这不是我头一回吃这家。刚毕业的时候，没钱，但是又想出去玩。于是就一个人去了南京。那时南京倒是还有个朋友，可是我放假的时候人家也放假，所以还是一个人在南京到处跑。有天晚上，就是在狮子桥吃的晚饭。同样的店，同样的座位。
我已经想不起来两次看到的景观有什么细微的差别。大概来说，无非就是几个消防栓什么的。但是几年间，他们居然没有什么太大变化。
我又想起了外婆家，我长大的地方。从大体上看，好像也没什么太多的变化。但是细微处还是变了。我结婚搬了出去，外公也走了，留外婆一人独住。于是，很多东西都开始凑合了起来。原本电饭锅坏了大概是会去换一个的，现在也懒得换了。冰箱里也塞满了隔夜菜，有些甚至会隔月。
有形的东西总是会坏的，无形的东西总是会被忘记的。无论什么，消失才是大多数的宿命。和宇宙比起来，这地球只能算是沧海一粟。和时间比起来，人的生命只不过是白驹过隙。就在这小小的地球上，有多少匹白驹曾经越过溪水呢？你记住了几匹？又有几匹，曾经看到过我看的东西。狮子桥的消防栓，我的博客，火车站的长椅。他们总也有坏掉的一天，也有被人忘记得一天。记得他们的人，也有离去的一天，写下他们的文字，总有丢失的一天。直到有一天，他们的形体早已经消亡，痕迹再也不能从地球上找到。甚至记得他们痕迹的人的痕迹都已随风而逝。这时候，他们就像其他的白驹一样，成为了一个数字。</description>
    </item>
    
    <item>
      <title>北海道之行的感想</title>
      <link>//blog.shell909090.org/blog/archives/2710/</link>
      <pubDate>Wed, 24 Dec 2014 17:23:07 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2710/</guid>
      <description>礼貌的老奶奶 这次去日本，让我最受震动的是一位老奶奶。
大家知道我们的日语很差。我没学过，老婆只会简单的日语。所以我们在大通那里问路的时候，预期是很麻烦的。结果旁边有位老奶奶，直接给领到地方。最后走的时候，她的方向和我们相反的。虽然我日语不算太好，好歹听懂了最后一句是“请路上小心，务必保重”。
您太客气了吧。如果在中国碰到这种情况，别说我们的日语这幅德行。就算语言沟通无碍，最多也是指路，或者顺路领过去。更何况我们这种沟通情况，外加您一不顺路，二年龄又大。着实让我们觉得汗颜。
后来听同事们说，在日本问路，不管远近，只要愿意搭理你的，一律是领到地方。当然我们碰到的数量很小，所以参考意义不大。 我觉得我们纯粹是占了外国人的便宜。
唉，礼仪之帮。。。
根本不看车 原来twitter上有个笑话。从日本来中国，过马路的时候一定会被撞死。我测试了一下，原来不是笑话。
在日本过马路的时候，压根不用看车，哪怕你乱穿马路。我在街上过马路，正好碰到行人和司机都是绿灯。我示意司机先走，结果司机在那里等我。我再示意，他再等。我看看我等不起。举手谢谢，然后先走了。
这种情况占了大多数。只有少数司机，你示意他先走，他举手表示感谢，然后先走的。大多数司机根本在那里傻等着。
回国第一天，绿灯过街的时候看到一辆右转。我看了一眼，脑子里压根就没浮起来我还得让他。结果差点撞上。
这似乎和法律都没什么关系了。中国的法律是同时绿灯的，车辆让行人。行人和车辆碰撞，车辆全责。如果大部分人还是没什么顾忌。我估计要么罚到的概率太低，都有侥幸心理。要么赔偿数目过低，大部分人也不在乎。
精美而细致的商品 日本商品的一大特点就是精美而细致。便利店买个牛丼，两层装就不说了。大陆全家卖的红烧牛肉饭也是两层的。上面还粘帖了一个油料包，一个辛辣味调料包，可以自由添加或者不添加。最狠的是，里面带的筷子还有一个方便的撕开口，和一个很不错的一次性牙签。大陆全家的筷子带撕开口不错，但是却不好用，很难撕开，而且没牙签。
卖个碳酸饮料，带巨人或者海贼王宣传。去餐厅吃饭，路上一堆天体的海报。路过地铁，里面有动漫在周边更是平常到不能再平常。
简单来说这种做法就是附加值高。一个商品，本身只有100，却附加上100的附加值，还更容易卖。对于一个资源缺乏的国度来说，大批量的将资源加工成产品然后输出是不合算的。显然加工的深度越深，产生的利润越高。
中国目前根本没到这个地步，估计是因为中国的商品还没有到“难卖”的地步，或者说中国卖东西和“营销”没什么太大关系。我们总是能够找到某些办法，把产品搞出去。至于要赚钱，好像也不是靠老老实实的做产品，或者做一些营销能够搞定的。以至于我们始终宣传和重视“营销”，脑子里想的东西却和“营销”没有什么太大关系。
过度包装和垃圾分类 日本商品的一大毛病就是过度包装，而且是让人看不下去的精致包装。当然，这和“精美而细致的商品”是一脉相承的。
跑到店里，要一个挂坠，说要送人。挂坠本身带一个塑料壳，店员又给你拿一个纸袋子包好，贴个胶带封上，然后装在塑料袋里。合着一个挂坠套三层，包装比东西还重。
但是同时，日本又有着高效的垃圾分类-回收利用系统。导游介绍日本的垃圾回收率高达九成（我不知道他哪里来的数字）。按照这个来算的话，就算过度包装，人均垃圾产量依然比中国低的多。
从我看到的资料上看，至少在昭和时代早期（差不多是中日战争时期），就开始宣传资源回收了。想想也是，日本这种缺乏资源的国度要对外开战的话，节约自己的每一分资源是非常有必要的。
大雪时没有雪的街道 在札幌，我们碰到了大雪。鹅毛大雪整个落下来，一晚上能落上数十公分厚（最大降雪是130公分）。但是第二天早上七点我起床看外面，整个街道上干干净净，没有积雪，甚至连雪水融化后打湿街面都看不到。
这意味着扫雪的人至少要在早上六点就开始工作了。
当然，还是有不少街道是有雪的，尤其是还在施工的街区前面。所以这让我怀疑扫雪是有临街商铺自行负责的。否则一个城市的环卫系统很难调度这么庞大的资源，来扫除整个城市的积雪。
而且在街道上有很多箱子，里面放着一包包不知道是沙子还是盐的东西，写着可以免费使用。按照标签，是用于街区防滑的。
札幌大通公园的辐射计数器 在我的照片里有，0.033uSv/h。按照这个计算，一年的辐射量是300uSv左右。按照建议，一年最大接受1mSv的辐射。可见辐射量不算太大。
自从311海啸之后，日本人似乎对辐射量特别敏感。我专门看了两期海啸和辐射有关的节目。日本人是认认真真，自己买仪器，在不同位置不同高度测量辐射计量的。我很好奇，如果让他们来冬天的华北大地逛一圈的话。。。</description>
    </item>
    
    <item>
      <title>北海道旅游——札幌附近地区攻略</title>
      <link>//blog.shell909090.org/blog/archives/2707/</link>
      <pubDate>Tue, 16 Dec 2014 11:52:50 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2707/</guid>
      <description>札幌 白色恋人巧克力工坊 在宫の沢站，从大通坐东西线，340就可达。
工坊庭院非常漂亮，整点有音乐表演。一楼进去是商店，可以在那里买到全系列的产品。小火车在往里走，不过我们去的时候人挺多，很遗憾没坐上。
工坊在9:30, 11:30, 13:30, 15:30提供亲手制作巧克力饼干的课程，必须赶准时间否则就得等下一批。参观博物馆是600一人，我们报的课程是1250的，报名者参观打折到500。
课程并不复杂，戴好装备走进去，大约一刻钟到半小时的操作后，出来等烘陪结果。大约20分钟后再进去裱花，然后就可以带走了。很多小孩进去体验的，大人还可以在外面看着。
带小孩进去的需要注意安全，最好有大人陪同。
博物馆里有很多老式留音机，碰到半点（准确时间不确定）还会有表演。
建议一早冲过去，踩准点，否则容易碰到白白等着。做饼干的空余，出来在餐厅喝个茶，吃点糕点，看看风景。一般还能看到音乐表演。逛到楼下直接买点东西就走。
36片的巧克力饼干折扣价在2400日元上下，目前汇率折合人民币120上下。
蟹将军 在ささきの那里，离开狸小路非常近。从大通可以走到。
全蟹宴大概4300-4500，按现在汇率，200多点的样子。店的定位非常高档，所以绝对超值。
整个店都是要脱鞋，全地板铺塌塌米。上了一堆螃蟹，最后还有一道泡饭，是穿着和服的女服务员帮着处理的。手势超级优雅，感觉碉堡了。
狸小路 在大通南边一点，是一条非常热闹的步行街。
去的话可以先学学小钢珠(パチンコ)的玩法。其实没啥好学的，就是扔进去，完了按按钮。但是老婆楞是没看懂，没上去玩。主要是，我们完全没想到这种简单的规则还能当游戏玩。。。
狸小路5那里有个免税店，店员的中文相当不错，价格也基本是最低了（至少白色恋人巧克力是这样）。我在那里基本扫齐了所有货。
狸小路上有一家饺子の王將，两盘饺子加一个杏仁豆腐才733。换成人民币大约36，和上海基本持平。关键是，好吃到爆啊！！！顿时觉得上海的饺子店弱爆了。
居酒屋 我们总计吃了两次居酒屋。
首先，大部分居酒屋都有服务费。例如毛巾，前菜什么的。一般是一个人500上下。我们第一次不知道，进去点了1500的东西，被收了2500。老婆日语太差，还不敢问。后来就明白了，大部分这种店都是这样的。只要是居酒屋类的，都会收取一定的服务费。蟹将军不是很确定，可能也是收了服务费的。
但是，居酒屋的点菜超级困难。根据大熊酱的说法，日语二级进去也未必能全身而退。我老婆日语还不一定比我强，去了就要英文菜单了。
居酒屋基本就是吃个意思。论性价比还是饺子の王將，或者吉野家之类的比较好。可是真去日本的，基本不会选择这些。
小樽 小樽没啥好说的，总共才去了半天。
nikka的威士忌酒厂没啥好看的，倒是商店里面的商品还算不错。有很漂亮的小瓶威士忌，当纪念品很好。
情书拍摄地很坑。
商店街那里看个人喜欢。玻璃制品和八音盒都很漂亮，让人担心自己的钱包。有空的话可以多逛一下，买点海鲜吃。
滑雪 坑爹。第一天跑过去，大雪关门。第三天跑过去，还有半个小时关门。
所以，这次滑雪行程没有滑到雪。
不要玩一些太少人玩的东西啊，只有一个人玩的结果就是很可能投票失败。。。
洞爷湖 我们住的酒店叫做洞爷湖万世屋。我开始还不知道。出门一看，越后屋。我了个去。尼玛万事屋不是因为空知英秋根本住过这间吧。
不管了，扫货。整个店里面，大部分动漫都是银魂和天体的周边（偷偷说，酒店去餐厅路上还能看到天体的海报）。
登别 地狱谷有鬼灯的画报。好像还有周边，但是没空逛。</description>
    </item>
    
    <item>
      <title>上下文切换技术</title>
      <link>//blog.shell909090.org/blog/archives/2703/</link>
      <pubDate>Thu, 20 Nov 2014 10:38:30 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2703/</guid>
      <description>上下文切换技术 简述 在进一步之前，让我们先回顾一下各种上下文切换技术。
不过首先说明一点术语。当我们说“上下文”的时候，指的是程序在执行中的一个状态。通常我们会用调用栈来表示这个状态——栈记载了每个调用层级执行到哪里，还有执行时的环境情况等所有有关的信息。
当我们说“上下文切换”的时候，表达的是一种从一个上下文切换到另一个上下文执行的技术。而“调度”指的是决定哪个上下文可以获得接下去的CPU时间的方法。
进程 进程是一种古老而典型的上下文系统，每个进程有独立的地址空间，资源句柄，他们互相之间不发生干扰。
每个进程在内核中会有一个数据结构进行描述，我们称其为进程描述符。这些描述符包含了系统管理进程所需的信息，并且放在一个叫做任务队列的队列里面。
很显然，当新建进程时，我们需要分配新的进程描述符，并且分配新的地址空间(和父地址空间的映射保持一致，但是两者同时进入COW状态)。这些过程需要一定的开销。
进程状态 忽略去linux内核复杂的状态转移表，我们实际上可以把进程状态归结为三个最主要的状态：就绪态，运行态，睡眠态。这就是任何一本系统书上都有的三态转换图。
就绪和执行可以互相转换，基本这就是调度的过程。而当执行态程序需要等待某些条件(最典型就是IO)时，就会陷入睡眠态。而条件达成后，一般会自动进入就绪。
阻塞 当进程需要在某个文件句柄上做IO，这个fd又没有数据给他的时候，就会发生阻塞。具体来说，就是记录XX进程阻塞在了XX fd上，然后将进程标记为睡眠态，并调度出去。当fd上有数据时(例如对端发送的数据到达)，就会唤醒阻塞在fd上的进程。进程会随后进入就绪队列，等待合适的时间被调度。
阻塞后的唤醒也是一个很有意思的话题。当多个上下文阻塞在一个fd上(虽然不多见，但是后面可以看到一个例子)，而且fd就绪时，应该唤醒多少个上下文呢？传统上应当唤醒所有上下文，因为如果仅唤醒一个，而这个上下文又不能消费所有数据时，就会使得其他上下文处于无谓的死锁中。
但是有个著名的例子——accept，也是使用读就绪来表示收到的。如果试图用多个线程来accept会发生什么？当有新连接时，所有上下文都会就绪，但是只有第一个可以实际获得fd，其他的被调度后又立刻阻塞。这就是惊群问题thundering herd problem。
现代linux内核已经解决了这个问题，方法惊人的简单——accept方法加锁。(inet_connection_sock.c:inet_csk_wait_for_connect)
线程 线程是一种轻量进程，实际上在linux内核中，两者几乎没有差别，除了一点——线程并不产生新的地址空间和资源描述符表，而是复用父进程的。
但是无论如何，线程的调度和进程一样，必须陷入内核态。
传统网络服务模型 进程模型 为每个客户分配一个进程。优点是业务隔离，在一个进程中出现的错误不至于影响整个系统，甚至其他进程。Oracle传统上就是进程模型。
缺点是进程的分配和释放有非常高的成本。因此Oracle需要连接池来保持连接减少新建和释放，同时尽量复用连接而不是随意的新建连接。
线程模型 为每客户分配一个线程。优点是更轻量，建立和释放速度更快，而且多个上下文间的通讯速度非常快。
缺点是一个线程出现问题容易将整个系统搞崩溃。
一个例子 py_http_fork_thread.py
在这个例子中，线程模式和进程模式可以轻易的互换。
如何工作的 父进程监听服务端口 在有新连接建立的时候，父进程执行fork，产生一个子进程副本 如果子进程需要的话，可以exec(例如CGI) 父进程执行(理论上应当先执行子进程，因为exec执行的快可以避免COW)到accept后，发生阻塞 上下文调度，内核调度器选择下一个上下文，如无意外，应当就是刚刚派生的子进程 子进程进程进入读取处理状态，阻塞在read调用上，所有上下文均进入睡眠态 随着SYN或者数据报文到来，CPU会唤醒对应fd上阻塞的上下文(wait_queue)，切换到就绪态，并加入调度队列 上下文继续执行到下一个阻塞调用，或者因为时间片耗尽被挂起 关于更多细节，可以看这里。这篇文章里还介绍了epoll的工作细节。
评价 同步模型，编写自然，每个上下文可以当作其他上下文不存在一样的操作，每次读取数据可以当作必然能读取到。 进程模型自然的隔离了连接。即使程序复杂且易崩溃，也只影响一个连接而不是在整个系统。 生成和释放开销很大(效率测试的进程fork和线程模式开销测试)，需要考虑复用。 进程模式的多客户通讯比较麻烦，尤其在共享大量数据的时候。 C10K问题 描述 当同时连接数在10K左右时，传统模型就不再适用。实际上在效率测试报告的线程切换开销一节可以看到，超过1K后性能就差的一塌糊涂了。
更细节描述，可以看这里。
进程模型的问题 在C10K的时候，启动和关闭这么多进程是不可接受的开销。事实上单纯的进程fork模型在C1K时就应当抛弃了。
Apache的prefork模型，是使用预先分配(pre)的进程池。这些进程是被复用的。但即便是复用，本文所描述的很多问题仍不可避免。
线程模式的问题 从任何测试都可以表明，线程模式比进程模式更耐久一些，性能更好。但是在面对C10K还是力不从心的。问题是，线程模式的问题出在哪里呢？
内存？ 有些人可能认为线程模型的失败首先在于内存。如果你这么认为，一定是因为你查阅了非常老的资料，并且没仔细思考过。
你可能看到资料说，一个线程栈会消耗8M内存(linux默认值，ulimit可以看到)，512个线程栈就会消耗4G内存，而10K个线程就是80G。所以首先要考虑调整栈深度，并考虑爆栈问题。
听起来很有道理，问题是——linux的栈是通过缺页来分配内存的(How does stack allocation work in Linux?)，不是所有栈地址空间都分配了内存。因此，8M是最大消耗，实际的内存消耗只会略大于实际需要的内存(内部损耗，每个在4k以内)。但是内存一旦被分配，就很难回收(除非线程结束)，这是线程模式的缺陷。
这个问题提出的前提是，32位下地址空间有限。虽然10K个线程不一定会耗尽内存，但是512个线程一定会耗尽地址空间。然而这个问题对于目前已经成为主流的64位系统来说根本不存在。
内核陷入开销？ 所谓内核陷入开销，就是指CPU从非特权转向特权，并且做输入检查的一些开销。这些开销在不同的系统上差异很大。</description>
    </item>
    
    <item>
      <title>上下文切换测试总结报告</title>
      <link>//blog.shell909090.org/blog/archives/2700/</link>
      <pubDate>Tue, 18 Nov 2014 16:15:16 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2700/</guid>
      <description>效率测试 测试环境 Intel(R) Pentium(R) CPU G2030 @ 3.00GHz 8G内存 debian jessie Linux 3.16-2-amd64 2014年10月27日 附注一下，该CPU有2核心，无HT，1ns3个时钟周期。
测试方法 测试代码如下：
time -f &amp;quot;%e,%S,%c,%r,%s,%K,%P&amp;quot; ./perf_fork 数据的意义分别为: 总时间，内核CPU时间，context switch次数，读/写次数，内存耗用，CPU使用百分比。
数据处理方法如下：
import numpy as np p = lambda s: [float(line.strip().split(&#39;,&#39;)[0]) for line in s.splitlines()] q = lambda s: [float(line.strip().split(&#39;,&#39;)[1]) for line in s.splitlines()] np.array(p(s)).mean() np.array(p(s)).var() np.array(q(s)).mean() np.array(q(s)).var() 基础开销测试 函数调用开销 使用s_call来测试性能，循环1G次。
2.35,0.00,17,0,0,0,99% 2.34,0.00,13,0,0,0,99% 2.34,0.00,10,0,0,0,100% 2.35,0.00,10,0,0,0,99% 2.34,0.00,14,0,0,0,99% 2.34,0.00,6,0,0,0,99% 统计结果如下：
time mean = 2.34 time var = 0.000022 每次call的开销为2.34ns，约7个指令周期。当然，这些并没有考虑调用压栈和数据返回。</description>
    </item>
    
    <item>
      <title>手机上app的权限对比和分析</title>
      <link>//blog.shell909090.org/blog/archives/2698/</link>
      <pubDate>Fri, 07 Nov 2014 16:16:04 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2698/</guid>
      <description>简述 今天看到这篇文章，勾起了我的好奇。我的手机里有多少app有安全隐患呢？当然，我知道很多有安全问题的app我不能删——例如企鹅家。但是如果某个app没有必然需要，或者有替代品。我不介意换一个用。所以我写了这篇blog，对比了各种同类或近似app的权限要求。
先说明一点，这篇文章所列出的app权限，是根据当前(2014-11-07)google play上的应用权限数据，截取我感兴趣的部分权限汇总的。既不是完全的敏感权限列表，也不可能不变化。如果有什么补充，欢迎你联系我。
同时你需要知道，app需要某个权限，并不一定表示要用来做坏事。很多时候是因为功能确实需要。因此我也在下面点评了部分我知道的功能需要对应权限。即便我们在app里面找不到权限对应功能，也不能绝对断言app正在作恶——只是相比起来我更信任不需要提供这个权限的app而已。这也是为什么我做的是分类对比——方便你来比较和替换。
IM类 telegram read SMS 照相 录音 location read/modify contacts run at startup talkback change audio setting 我太感动了。
QQ read SMS read/modify contacts 照相 录音 location read/write call log read/write calendar disable screen lock NFC bluetooth run at startup change audio setting 流氓权限大集合啊。你说要contacts我还能理解，要call log干嘛？还要write？而且功能里也找不到为什么需要NFC和蓝牙。
微信 read SMS 照相 录音 location read/modify contacts bluetooth run at startup change audio setting 基本同QQ，不过权限少了很多。
评论 虽然我们都知道talkback比企鹅家的对隐私更友好，可是有本事你别用企鹅家。。。
SNS facebook read sms 照相 录音 location read/modify contacts read/write calendar run at startup set wallpaper change audio setting 不知道为啥需要change audio setting，而且write calendar也奇怪了些。其他权限基本还能找到对应功能。</description>
    </item>
    
    <item>
      <title>context切换测试——C语言协程有关部分请求review</title>
      <link>//blog.shell909090.org/blog/archives/2696/</link>
      <pubDate>Thu, 06 Nov 2014 17:08:18 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2696/</guid>
      <description>setjmp/longjmp测试 使用s_jmp程序来测试setjmp的性能。1G次循环。下面是结论：
5.77,0.00,29,0,0,0,99% 5.70,0.00,30,0,0,0,99% 5.71,0.00,22,0,0,0,99% 5.71,0.00,23,0,0,0,99% 5.70,0.00,30,0,0,0,100% 5.70,0.00,23,0,0,0,99% 统计结果如下：
time mean = 5.715 time var = 0.000625 单次调度开销只有5.7ns，在所有测试中性能最优。(glibc-2.19/sysdeps/x86_64/setjmp.S)
getcontext/setcontext测试 使用s_context程序来测试setcontext的性能。100M次循环。下面是结论：
12.96,5.88,79,0,0,0,99% 13.13,5.94,105,0,0,0,99% 12.95,6.18,57,0,0,0,99% 13.13,5.90,64,0,0,0,99% 12.95,5.88,82,0,0,0,99% 12.96,5.80,51,0,0,0,99% 统计结果如下：
time mean = 13.01 time var = 0.0068 单次调度开销高达130ns，仅比系统的sched在高线程下略快。这事很奇怪，因为根据我看到的源码(glibc-2.19/sysdeps/unix/sysv/linux/x86_64/setcontext.S)，getcontext/setcontext在glibc中是用汇编实现的。其中陷入内核只是为了设定signal mask。</description>
    </item>
    
    <item>
      <title>context切换测试——线程创建有关部分请求review</title>
      <link>//blog.shell909090.org/blog/archives/2693/</link>
      <pubDate>Fri, 31 Oct 2014 14:49:09 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2693/</guid>
      <description>线程模式开销 使用t_thread程序，循环1M次，重复6次，原始数据如下：
9.57,8.22,21098,0,0,0,104% 9.77,8.40,29704,0,0,0,104% 9.36,8.17,10390,0,0,0,106% 9.56,8.50,14514,0,0,0,107% 9.35,8.34,7244,0,0,0,108% 9.57,8.43,26351,0,0,0,106% 统计结果如下：
time mean = 9.53 time var = 0.02 kernel mean = 8.34 kernel var = 0.013 解读数据可以看到，thread模式的开销为9530ns(已经降到纳秒级了)，CPU将为8340ns，精确级别在20ns级别。粗略换算一下每次create的开销大约是30k个时钟周期。简单对比可以看出，thread模式比fork模式大约快了5倍。</description>
    </item>
    
    <item>
      <title>context切换测试——调用开销有关部分请求review</title>
      <link>//blog.shell909090.org/blog/archives/2690/</link>
      <pubDate>Thu, 30 Oct 2014 16:10:28 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2690/</guid>
      <description>函数调用开销 使用s_call来测试性能，循环1G次。
2.35,0.00,17,0,0,0,99% 2.34,0.00,13,0,0,0,99% 2.34,0.00,10,0,0,0,100% 2.35,0.00,10,0,0,0,99% 2.34,0.00,14,0,0,0,99% 2.34,0.00,6,0,0,0,99% 统计结果如下：
time mean = 2.34 time var = 0.000022 每次call的开销为2.34ns，约7个指令周期。当然，这些并没有考虑调用压栈和数据返回。
内核调用开销 使用s_syscall来测试性能，循环1G次。这里特意选用了一个不可能失败的内核函数，getpid，来衡量每次进入getpid的开销。
4.37,0.00,76,0,0,0,99% 4.34,0.00,43,0,0,0,99% 4.37,0.00,124,0,0,0,99% 4.37,0.00,63,0,0,0,99% 4.36,0.00,48,0,0,0,99% 4.36,0.00,47,0,0,0,99% 统计结果如下：
time mean = 4.36 time var = 0.00011 这里可以看到，纯粹的内核进入开销小到非常惊人，只有4.36ns，约合13个指令周期，而且这里还要进行数据的查询和返回。所以内核调用开销在下面的测试中全部忽略不计。</description>
    </item>
    
    <item>
      <title>context切换测试——python有关部分请求review</title>
      <link>//blog.shell909090.org/blog/archives/2684/</link>
      <pubDate>Wed, 29 Oct 2014 10:30:23 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2684/</guid>
      <description>python yield模式性能测试 python下的测试就不用time了，我们改用python的timeit，循环100M次。具体可以看py_yield.py。数据结果如下：
7.64262938499 9.2919304393e-06 5.41777145863 4.94284924931e-06 从结果来看，100M次循环的平均时间是5.4s，平均每次大约54ns。使用yield后变为76ns，增加了22ns。
python greenlet模式性能测试 这次代码在py_greenlet.py，循环10M次。数据结果如下：
5.35270996888 7.44085846125e-05 5.31448976199 5.82336765673e-05 单次循环时间消耗为535ns。比最初的54ns，增加了481ns。基本来说，时间增长了10倍率。
这是预料中的，因为greenlet早就声明自己通过堆栈拷贝来实现上下文切换。这会消耗大量CPU时间。从原理上说，栈越深，消耗越大。但是测试结果表明两者几乎没有差异，栈深反而性能更加优异(TODO: why?)。</description>
    </item>
    
    <item>
      <title>context切换测试——进程有关部分请求review</title>
      <link>//blog.shell909090.org/blog/archives/2682/</link>
      <pubDate>Tue, 28 Oct 2014 12:57:04 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2682/</guid>
      <description>测试环境 Intel(R) Pentium(R) CPU G2030 @ 3.00GHz 8G内存 debian jessie Linux 3.16-2-amd64 2014年10月27日 附注一下，该CPU有2核心，无HT，1ns3个时钟周期。
测试方法 测试代码如下：
time -f &amp;quot;%e,%S,%c,%r,%s,%K,%P&amp;quot; ./perf_fork 数据的意义分别为: 总时间，占用CPU时间，context switch次数，读/写次数，内存耗用，CPU使用百分比。
数据处理方法如下：
import numpy as np p = lambda s: [float(line.strip().split(&#39;,&#39;)[0]) for line in s.splitlines()] q = lambda s: [float(line.strip().split(&#39;,&#39;)[1]) for line in s.splitlines()] np.array(p(s)).mean() np.array(p(s)).var() np.array(q(s)).mean() np.array(q(s)).var() 进程fork开销 使用s_fork程序(注释语句关闭模式)，粒度1M次，重复6次，原始数据如下：
49.04,26.83,29784,0,0,0,55% 51.53,26.38,32057,0,0,0,52% 49.88,26.02,30892,0,0,0,53% 51.39,27.13,37573,0,0,0,54% 52.89,28.12,37924,0,0,0,54% 51.19,27.02,35880,0,0,0,54% 统计结果如下：
time mean = 50.98 time var = 1.52 cpu mean = 26.</description>
    </item>
    
    <item>
      <title>bash严重漏洞</title>
      <link>//blog.shell909090.org/blog/archives/2680/</link>
      <pubDate>Thu, 25 Sep 2014 14:36:10 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2680/</guid>
      <description>今天估计各大消息都在报这个漏洞，可能有些人看到有修复就放松了。目前来看，事情没那么简单。
CVE-2014-6271 第一个漏洞，编号为CVE-2014-6271。相应的dsa和usn。
具体的文章可以看这里。
简单来说，当bash执行时看到有变量定义了一个函数，函数尾部又剩余了部分代码。会直接把剩余代码执行了。导致简单的变量定义动作有机会执行任意代码。
对于未修补的系统，执行以下代码出现以下提示：
$ env x=&#39;() { :;}; echo vulnerable&#39; bash -c &amp;quot;echo this is a test&amp;quot; vulnerable this is a test 注意echo vulnerable应当不被执行的。
修复的系统则是以下表现：
$ env x=&#39;() { :;}; echo vulnerable&#39; bash -c &amp;quot;echo this is a test&amp;quot; bash: warning: x: ignoring function definition attempt bash: error importing function definition for `x&#39; this is a test CVE-2014-7169 第二个漏洞，编号为CVE-2014-7169。
这个漏洞是第一个漏洞没有修复完全导致的，最麻烦的是，这个漏洞没有修复，细节却满天飞了。
表现如下：
$ env X=&#39;() { (a)=&amp;gt;\&#39; sh -c &amp;quot;echo date&amp;quot;; cat echo sh: X: line 1: syntax error near unexpected token `=&#39; sh: X: line 1: `&#39; sh: error importing function definition for `X&#39; Wed Sep 24 23:25:58 PDT 2014 结论和建议 尽量不要暴露bash，能关就关，不行的自求多福吧。</description>
    </item>
    
    <item>
      <title>送书</title>
      <link>//blog.shell909090.org/blog/archives/2678/</link>
      <pubDate>Thu, 04 Sep 2014 11:32:08 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2678/</guid>
      <description>最近清理家中藏书，打算送掉一部分纸质书。于是顺手列了一批自己需要，但是可以外借的书。
送人的部分，如果你需要，两个月内联系我，自己想办法拿走（例如H4，或者直接上门）。逾期我就直接送去资源回收了。借阅的部分，记得好好保管图书，不管借阅多久，记得回头还我。
送人 delphi 5.0 开发多媒体应用 ISBN 7-5084-0470-X C++语言程序设计 ISBN 7-302-03926-7 计算机绘图 ISBN 7-313-01482-1/TP.273 borland C++ windows程序设计 ISBN 7-115-05265-4/TP.117 最新C++语言精华 ISBN 7-5053-3975-3/TP.1731 C++语言程序设计 ISBN 7-302-04504-6 C++使用手册 ISBN 7-5053-2890-5/TP.959 microsoft visual C++ .net技术内幕 ISBN 7-302-08931-0 操作系统教程 ISBN 7-04-012664-8 借阅 模式识别 ISBN 7-121-02647-3 深入解析Windows操作系统 ISBN 978-7-121-03969-0 计算机网络 ISBN 7-302-08977-9 深入浅出MFC ISBN 7-900614-93-1 Python源码解析 ISBN 978-7-121-06874-4 数据结构与算法（Java语言版） ISBN 7-111-11902-9 网络渗透技术 ISBN 7-121-01035-6 密码编码学与网络安全 ISBN 7-5053-9395-2 人工智能及其应用 ISBN 7-302-02127-9 神经网络原理 ISBN 7-111-12759-5 </description>
    </item>
    
    <item>
      <title>如何分辨网站真假</title>
      <link>//blog.shell909090.org/blog/archives/2676/</link>
      <pubDate>Tue, 19 Aug 2014 11:44:57 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2676/</guid>
      <description>老婆想去新疆玩，结果她居然从百度上搜了一下新疆国旅就联系开了。我一直不知道，直到她和我说，对方要求缴500元到一个支付宝帐号里。我立刻要求她不要付钱，然后开始查证真假。
第一家网站 她开始给我的是这家：http://www.17xjly.net/。
老规矩，先whois，再dig，再whois。
whois域名的结果是没有任何信息？！
dig后的IP是113.10.247.20。再whois一遍，发现服务器在香港。此外也没有任何信息。
ICP是新疆的，查全国ICP登记无信息。
开始想不通，这家伙在新疆背景这么深厚？突然醒悟过来。这家伙是个.net域名，注册地不在中国，服务器不在中国，凭什么要人家ICP备案啊。就因为号称是新疆的网站？
CAO，这种网站给的支付宝，鬼知道打进去会发生什么。。。
第二家网站 百度上排名很高的是这家http://www.yuyutrip.net/和这家http://www.yoyotrip.net/。两家的页面很像，但是又明显有区别，不知道是竞争对手还是什么。
老规矩。
whois域名的结果是这个：
Registrant State/Province:Shanghai Registrant Name:shxg shxg 注册地上海？
dig了更好玩。这两个域名的IP指向是同一个。121.52.217.137。再whois发现是这个：
netname: TopnewNET descr: Beijing Topnew Info&amp;amp;Tech co., LTD. 没听说过。
ICP倒是有：
北京博通天下网络技术有限公司 U旅商旅网 2013-06-09 咳咳，漏底了吧。虽然号称国旅，但是是一家北京公司在上海注册的域名。
好玩的是，这家网站上面给出的地址，是真的（具体后面会说）。但是电话却不对。
真的国旅 google出手，马上就有。结果是这个http://www.cits.com.cn。
老规矩。
whois域名可以看到这个：
Registrant: 中国国际旅行社总社有限公司 注册者看着就很NB。
dig一下，发现IP是这个，219.143.192.35。这个IP可牛逼了。whois一下：
inetnum: 219.143.192.0 - 219.143.192.255 netname: CITS 我擦，专属C类IP段！
ICP查询后结果是这样的：
中国国际旅行社总社有限公司 国旅在线 www.cits.com.cn 2014-07-23 www.cits.net 2012-11-29 这个网站上有400电话，打过去说新疆只有团体游。不过人家给了正确的地址和电话，和第二家网站的地址一致，电话却不一样。
事情到这里，我的基本判断是。和第二家网站做生意还是有点谱的，ICP是真的，地址国旅也认。最低限度，他至少是一家合法的旅行社——虽然不保证是国旅下属。第一家么，谁爱信谁信。
上海国旅 后面有点更好玩的事情。国旅在线上有上海，而google查询结果上也有不少上海国旅。那么谁是真的呢？
上海国旅1 例如这家http://www.scits.com/。
域名的whois是这样的：
Registrant Organization: SHANGHAI CHINA INTERNATIONAL TRAVEL SERVICE CO.</description>
    </item>
    
    <item>
      <title>服务器操作系统的选择</title>
      <link>//blog.shell909090.org/blog/archives/2671/</link>
      <pubDate>Thu, 14 Aug 2014 16:25:32 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2671/</guid>
      <description>今天被LTN问了一下怎么看一个知乎问题：
服务器操作系统应该选择 Debian/Ubuntu 还是CentOS？
其实我觉得他的大部分说法都没有错。如果你需要装一个服务器，确实首选是RH系的。
但是。。。
选用RH系的主要理由 其实你把回复从头看到尾，主要论点就一点：
哪个发行版，可以在长达7-10年的时间里，始终保持硬件稳定性的同时，又持续的升级补丁？
结论当然是RH！这是RH的主要卖点。
我们真的需要长达7年的硬件稳定性支持？ 咳咳，今年上半年，蔽厂的运维碰到了这么一件尴尬事。
他们进货，去机房装系统，配置网络结构，加入运维管理系统，添加监控，交付。除去采购外，整个一套流程大概是一周。
我们在机房里面原本大约有10个机柜，那么一般扩充的时候，一次扩充一个机柜。
结果今年上半年的某一段时间，一周一个机柜的事情持续了两个月。运维同学辛辛苦苦装好一个机柜，周末打算轻松一下。被老大通知，又来客户了，机柜又不够用了，下周继续。
是的，我们现在20个机柜不止。机房有多少机柜我不知道，不过照这个趋势来看，我们快把机房包下来了。现在我们的带宽已经没有限制了，每个月月底按照合同秋后算账。
我们有一些有三年历史的服务器，台数不多。现在来看，性能已经远远不够。CPU不够快，也没有SSD，硬盘读写次数也太多。这些机器的下场，多数会被换下来折旧卖掉，或者作为测试服务器，搬去测试机房。而现在机房里面大半机器，都是两年以下历史的。而且至少一半服务器历史不超过半年（。。。）。从现状上看，把老服务器留在机房，其性价比并不合算。因为机房有机架密度问题，限制着我们的单机房极限，这相当于变相的租金。
如果考虑到这点，我们的线上服务器生命周期大概也就三年。最多。很多时候甚至还不到。
比我们更极端的是页游。他们的一组服务器生命周期一般是半年。半年内，要赚钱的也赚完了，不赚钱的也死完了。所以他们甚至不会新采购硬件服务器，而是直接使用虚拟机。
当然，虚拟机内的系统，支持时间是一年还是十年，对他们一点意义都没有。
为什么我们不喜欢三年以上的系统？ RH系的提供10年级别的维护性，我换个说法，也就是最近的软件在RH的官方库里面找不到。当然，装最新的RH是有的，但是在安装了三年的一个系统上？肯定没戏。
怎么办？编译呗。
这大概就是国内谈到RH必编译的由来。
可是，我引用文内的一段话。
如果我今天告诉大家，我要做一个 http 的服务器，我不用 apache 不用 nginx， 为了性能我要用 xxx 为基础重写一套出来。我相信绝大多数人会问同样的问题， “你觉得你写的能比 ng 好么？” 再回头看看那时候你们自己吧。 同样，自己编译的软件，补丁维护速度，能和新系统比么？而且我们还得扔一个人下去搞补丁维护。
所以，正解是什么？
装一套新的，把数据导过去用呗。
我们的”数据“，都是装载在磁盘上的。而换”系统“并不需要更新这些数据，只要把系统盘擦掉重部署一遍，然后配置好deploy系统就OK。在开发之初，”环境“，”程序“和”数据“分离，就是一项基本原则。而且即使是”数据“，丢掉一台机器上的所有”数据“也不会构成问题。这应当是运维基础中的基础。只有少数几台服务器，既不能直接更换也不能停机。这些机器我们做特别的管理。
为什么蔽厂使用Ubuntu？ 很简单。因为最初的开发希望在Linux上进行。直接在Linux上开发和测试，对于startup的快速开发是非常重要的。而开发用什么版本，服务器跟什么版本，这是最省事和好办的。如果你硬要和我争，说开发在Mac上，跑在Linux上一点事都没有。或者说开发一个发行，服务器一个发行也OK。
我至少得说这对于golang和python都不是事实。除非不用cgo，也不用python的C扩展。
先不提Mac下和Linux下的差异。我们今年在升14.04的时候就发现，12.04和14.04的编译互不通行。所以现在12.04的编译可以程序员自己编译了本地测，14.04的就必须在测试环境里干。一帮程序员远程tcpdump出结果，拷回本地wireshark一把。。。
看看就蛋疼。
当然，这也有个问题。就是上面”我们不喜欢三年以上的系统“。所以呢。明年我们的系统大概会轮换重装，14.04。。。
也很蛋疼。
Debian系的补丁不靠谱么？ 那要看和谁比。这里有HeartBleed事件的统计。虽然不普遍，但是我觉得这种大漏洞比较有代表性。
CVE-2014-0160 - OpenSSL安全漏洞的非技術事件
我引用他的重点整理：
RedHat 修復的速度比 OpenSSL 官方還快。 RedHat 派系的修復時間，除了 RedHat 外都算慢，如 Fedora 及 CentOS、Scentific， 他們都比 RedHat 慢 16 小時以上。 Debian 派系的修復時間，如 Debian 及 Ubuntu，都比 RedHat 慢上至少 12 小時以上。 Scentific 是列表中修復最慢的。 若以資安黃金 6 小時來說，Fedora、CentOS、OpenSUSE、Gentoo 及 Scentific 都不及格。 如果和RH比，Debian的修复速度是不及格，但是和CentOS比。。。怎么说呢？6个小时对10个小时，有种五十步笑百步的味道？</description>
    </item>
    
    <item>
      <title>架构师</title>
      <link>//blog.shell909090.org/blog/archives/2669/</link>
      <pubDate>Wed, 13 Aug 2014 10:16:43 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2669/</guid>
      <description>一个好的架构师至少要做到四点：
识别甚至提前预测到程序不同阶段的性能瓶颈，并以合理的代价消除。 识别束缚程序员生产力发展的瓶颈，并合理的消除。 解决组里面的尖端问题。 成为组员的精神支柱和旗帜。 他不应该：
总结需求。这是产品经理的事，除非他兼任。 评估工作时间，并保证工作进度。这是项目经理的事，除非他兼任。 召集，协调工作细节。这个随企业有不同划分，理论上是行政领导干的。有的企业是技术系的来做行政领导，有的是PM。 亲自写程序。除了初创，架构师亲自冲上去写大段大段的程序是找死的先兆。 预测技术的发展方向，并做出技术决策。您让CTO干什么去？ 政治斗争。架构师也来搞这个，要么被搞死，要么根本没心思做事。 但是架构师应该理解办公室政治，并且能够基本掌握情况。一点办公室政治都不懂的架构师肯定被搞死。</description>
    </item>
    
    <item>
      <title>14年7月，无甚大事</title>
      <link>//blog.shell909090.org/blog/archives/2666/</link>
      <pubDate>Wed, 30 Jul 2014 11:45:48 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2666/</guid>
      <description>这个月比较忙，啥都没说。堆月底做个总结吧。
空难 一个月三起，马航又来一次。我都不知道该说什么了。也许今年就应该避开马航，马英九。
马航空难就是一场悲剧，不仅对所有在空难中身亡的人而言。看到现在基本也看出来了，乌克兰政府，反抗武装，俄罗斯三个当事主体互相扯皮。调查人员进场缓慢(不知道是不是受到阻拦)，现场破坏严重。将来就算调查出了结果，也完全可以抗辩说调查结果没有任何公信力。看来这个案子只能等待某国档案解密之时才能确认了——虽然我们都应当在心里确认了真相。
话说回来，确认了又能如何呢？美国不想陷的太深，欧洲有心无力，马来西亚？丫管个P事。也许今年马来西亚请巫师过来是对的，只是不应当找人，而是应当给他们自己的政府和航空去去祟。
另外两起空难暂时没啥想说的，等调查报告吧。
向所有在空难中死亡的人表达哀悼，祝他们在天国(具体地点视个人信仰)中安好。
显示器 又败家了。买了台显示器，型号VG2233-LED。优派的，22寸。最大特点是800元价位上内置了屏幕旋转，可以把屏幕转成垂直的(是的，就是一大长条)。程序员都理解这样做的价值。就算不是程序员，用来看看网页什么的，尤其是超长网页，也非常爽。
下面说说问题和需要注意的点。首先，这块屏幕是TN的(废话，这个价位难道还想用IPS么)，这就造成垂直视角非常有限。而转起来后，很不幸的，就变成了左右视角。于是当你偏一点头去看的时候，会发现色彩亮度都不对了。
不过幸好，对程序员而言，这个问题并不致命。程序员既不会用这块屏去欣赏某些视频，也不会在写程序的时候左摇右晃，甚至跳一曲小苹果。
另一个细节是，你先看自己的显卡和window manager是否具备旋转屏幕的功能。虽然大多数显卡都有，但是少数(尤其是集成显卡)在旋转屏幕后性能很差。我在旋转屏幕都打开屏保，能明显看到卡顿。幸好，写程序也是没影响的。至于window manager，其实包括整个系统。我在用lxde的时候发现一个细节问题——lxpanel会把panel横跨整个虚屏幕。在旋转屏幕的情况下，另一块屏幕无法显示panel。而如果把另一块屏幕对准下沿，应用程序的title就会显示不出来。于是我只能强制panel的长度来避免这个问题。
汕头 今年去汕头玩了，具体就不写游记了，因为写不出来。如果我把游记详细的写出来的话，你们一定会以为是美食流水帐，并且质疑我报复社会。
所以我就数一下我吃的美食吧。
牛肉丸：当地特产。据说要人工用大锤子把牛肉打成酱来做。机器打出来的会发硬，不好吃。所以这算是在地(因为要离养殖地近)食品加工业，而且是劳动力密集行业。我问了问能不能带点回来送人，他们说只能抽真空。要买抽真空产品还不如直接在淘宝上买呢，还不算我们回程的携带重量。 鱼丸 鼠壳粿，厚粿：很当地特色，鼠壳粿甜的，厚粿似乎是放了某种海鲜。 广场豆花：他们的豆花是一整块一整块的，放很多红糖。很好吃。当地朋友说，每天就卖两桶，卖光就没了。我们吃的接近第二桶底。 水果冰：3-5元，现榨。比起上海来简直是白送一样的价钱。 牛肉火锅：当地牛肉很多，而且很好，所以很多人喜欢吃牛肉火锅。把牛肉放在网勺里面，在锅里面涮到半熟就捞起来吃。基本和北京涮羊肉一个思路，就是猛火滚汤快下快上。味道非常赞。当地对牛肉不同部位非常讲究，讲究到我根本认不出这些部位在哪里。反正去的话一定要吃啦。 炒冰：很有创意的想法。把现榨水果汁，放在一个制冷盘子上。随着下面大机器的高速制冷，整个水果汁就会变成一块块薄的冰片。拿一个小铲子铲啊铲的，确实很像炒菜。这样可以自己随意调和水果汁，做出不同口味的炒冰来。 总体来说，潮汕还是非常好玩的。对一个吃货而言，如果去不了台湾，就去潮汕。</description>
    </item>
    
    <item>
      <title>又是性能问题？扯淡</title>
      <link>//blog.shell909090.org/blog/archives/2655/</link>
      <pubDate>Wed, 02 Jul 2014 12:51:29 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2655/</guid>
      <description>http://www.donews.com/net/201406/2812175.shtm
为啥TMD说扯淡？扔掉支付宝，用户直接跑上来就能支撑的住了？多少用户就有多少量，不会随着用不用第三方平台减少的——除非这帮人不用电子支付改成线下付费。
如果说定时查询造成的问题。合作都合作了，查询量大不会改成回调么？查询是几次，回调是几次？这点技术上是个事么？早干嘛去了？
明显付费通就不想带支付宝玩了，以为这么搞能抢到用户。结果支付宝淡淡的来一句，没事，哥已经直接接到大部分商户上去了，用不着付费通。只有几家搞不定，哥不要了。祝你一路顺风，早死早投胎。
对了，补充一点。如果是正常公司，我觉得第一反应是限制调用速度。你丫调用过快要死死自己去。就算你拿着证据说我限制，我也可以说我们对每个商家的调用速度是有限制的没有错，你有什么问题么？——这是正常流氓。
所谓连脸皮都不要的流氓，就是不管你限不限制调用速度，我都不让你用了。非但不让你用，而且还声明，这是你的责任。
不要把TM政治问题扔到码农身上。谢绝扯淡，谢谢。</description>
    </item>
    
    <item>
      <title>狗肉节</title>
      <link>//blog.shell909090.org/blog/archives/2653/</link>
      <pubDate>Tue, 01 Jul 2014 10:44:33 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2653/</guid>
      <description>吃没吃过狗肉 吃过，还不止一次，不过自己没点过。没特别觉得好吃，也没觉得难吃——我始终觉得我的味觉不算很灵敏。有次吃河豚也是完全没吃出来，一直以为是别的。别人告诉我了，我还奇怪这东西为什么被称作天下至鲜。
如果是我点菜我会选择鸡，味道好又没有什么奇奇怪怪的麻烦。不过已经点了狗肉拿上来了，我也不会有特别的避讳。大部分的食物，只要没有违法，对健康无害，我都没什么忌讳。反倒是猪脑什么的不大敢吃——神经节太密集了往往会想到朊病毒，心理有障碍。
我觉得都已经做成食物了，就别矫情了。浪费了才是不好的事。
不吃狗肉的理由 说不吃狗肉的，往往是几个理由。
萌。 屠宰方法太残忍。 狂犬病问题。 当然，不吃猫肉的理由也大同小异。
我们首先说狂犬病。狂犬病毒加热后会迅速死亡。别说煮熟，就是加热到90度，基本也会全部失活。吃狗肉会感染狂犬病毒唯一地点，就是在狗贩子身上。可身为一个狗贩子连狂犬疫苗都不打，这纯属no zuo no die。以危害狗贩子的安全制止吃狗肉不合理。后面会说有一种和狂犬病有关的理由，阻止随意购买狗肉是合理的——当然不是吃狗肉本身。
其次是屠宰方法太残忍。那后面问一句，如果我们用一些比较文明的屠宰方式。例如单独带到隔间，一板砖拍晕，然后再下手，行不行？爱狗人士又往往会摇头，不行不行，太不文明了。我了个去，菜市场当街杀鸡杀了多少年，也没见谁有意见，轮到狗身上就太残忍？
其实说穿到底一句话，萌才是一切的根源。
狗是否特殊 我认为即使是人都不特殊。人是万物之灵这种话，基本就是骗骗自己满足人类自己的自大心理的。
之所以我拒绝认为人是一种食物，主要是出于伦理考虑——如果人可以作为食物，那么人和人相残的世界未免太残酷了。
所以你问我，狗作为一种经常和人类相伴的生物。让孩子知道狗也会被端上餐桌是否太残酷了？我觉得你说的有道理。
但是。
你可以请求别人不吃狗，但是你不能强迫别人不吃狗 关于不吃某种东西，我觉得这应当成为一个最简单的共识。我不吃/别让我吃/别让我看到你吃，这没问题。你告诉我，我也会配合你尽力避免。你要吃，我不强迫，这是底线。在此基础上，你可以劝说。对食品的偏好是每个人的事情，只要不吃人都好商量。更没必要为了这种事情，弄出种种奇怪（甚至违法）的手段来。甚至有时候，吃不吃没什么，手法惹人厌。
当然，最后我得说。这种奇奇怪怪的爱狗人士是少数。谢天谢地。多数的人只是在网络上声讨“狗狗那么可爱你还要吃它，有没有天理良心啊”。现实中他们既不吃素，也不一定会跑去做什么实际性的事情。只是简单的在网络上抒发自己的观点而已。如果我要表达一下自己的观点，告诉她我觉得牛和羊很萌能不能请你不要吃牛羊肉了——
——你神经病吧。
虐狗逼迫爱狗者买下的事，你怎么看？ 很明显，那不是吃狗肉的人干的事，这是狗贩子干的，而且很下三烂。也只有买卖狗肉不当回事的人，才能想出这种抬价的办法。
那反对吃狗肉的也许说了，没吃狗肉的人，也就没有这种事了。问题是这个逻辑，没有爱狗的人好像也成立。
至于有人说这是爱狗者找托来做秀，我只能说，没看到只能当没有。
我始终反对拿着钱来做出一些开外挂一样的解决方法——千年之前就有子贡赎人的故事了。国宝回归如此，吃狗肉也如此。他们知道有你们这群冤大头，东西就会越卖越贵了。你要是觉得，贵就可以阻止人吃狗肉了。呵呵，别忘了贵了偷狗的生意也会好。
吃狗肉和虐狗是两码事 不只是狗，包括牛羊，猪鸡。我都觉得，吃是一回事，虐待是另一回。我吃猪肉，但是如果说养猪的每天都对着猪一通抽——我觉得这个叫虐待。很奇怪对吧。宰都宰了，吃都吃了，还觉得抽一顿是虐待。
关于虐待，有一个很重要的区别是——不杀不食，不造成不必要的痛苦。我们感谢所有为了我们口腹之欲牺牲的生物，但是还是会毫不犹豫的吃掉他们。我觉得仅此而已的话，不算虐待。
农业虐心的地方在于，你对你的产品有感情，而生产他的目地就是牺牲。你养了一头可爱的小羊，每天照顾，很有感情。过了两年，一刀杀了吃肉。虐不虐心？
但这是必要的。农业中很多行为，都是很残忍但是必须的。包括阉割，密集养殖，屠宰。在整个过程中，我们提倡尽量简单无痛。但除此之外，我真的没法赞同把屠宰作为一种虐待的看法。更无法赞同的是，认为屠宰是一种虐待的同时，还在吃肉。
如果你认为，屠宰本身就是一种无法容忍的暴行，而非仅仅对狗成立。那么最起码的，请素食。
是否赞同动物保护立法 我很同意针对动物保护立法，尤其关于吃狗肉这块。主要目标到不是狗很萌——而是是否能有效控制狂犬病。
流动的狗贩，往往会偷狗，随意捕捉，野蛮宰杀。中间还有狗丢了之类的事情，往往会引起疫情转移，对于狂犬病控制不利。即使是街头上的野狗，如果做过防疫措施，能够增加免疫基数，也不应当被捕杀。为了控制这点，就不能随意在狗贩子那里购买食用狗肉。而理所当然，在街头购买饲养用犬也应当受到控制——原因相同。但是动物管理单位的捕捉甚至捕杀，应当受到保护，而不是阻挠。而城市中饲养大型犬，那是另外一个话题，此处不展开。
相比个人喜好，狂犬病控制是更加关系到民众生命和每个人的税收使用的事情。为这样的事情立法配合，我觉得是值得的。但是我想这样的说法，对爱狗者来说未必能完全赞同吧——不能随意买狗，要上牌照，动物管理单位还是能够捕杀，而且还可能有人合法的养肉用狗。如果你对这些事情感到不快，不妨反思一下。困扰你的，究竟是“只是我个人想轻松的爱狗而已”，还是“为了能让狗狗和大多数人相处的更自在”。
当然，就我个人的了解。这样的理论在农村地区是很难得到实现的。因为农村地区人多，狗也多。要捕捉-免疫-放回，没钱。控制狗贩子，没动力。所以往往是考虑的很好的动物保护立法，到了农村以后立刻变了味。往往就容易变成抓到狗贩子-罚款的生财之道。至于提供捕捉-免疫的事情，就当没听过。
让爱狗人士去农村免疫-放生？后面又会被捕捉。实话说我一直很困扰，爱狗者拦下来的贩卖狗肉的卡车，上面的狗都怎么处理了？都被领养消化掉了？还是放生了？放生后有没有再被抓？
归根到底，狗狗的问题不仅仅是狗自己而已。
不负责的养狗人比狗贩子更可恶 不服来辩。</description>
    </item>
    
    <item>
      <title>docker的原理和类比</title>
      <link>//blog.shell909090.org/blog/archives/2650/</link>
      <pubDate>Mon, 30 Jun 2014 12:32:08 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2650/</guid>
      <description>从虚拟化的种类和层级说起 cpu虚拟化：可以模拟不同CPU，例如bochs 完全虚拟化：只能模拟同样CPU，但是可以执行不同系统，例如vmware 半虚拟化：guest必须打补丁，例如Xen 硬件虚拟化：可以当作获得硬件加速的完全虚拟化 系统虚拟化：host和guest共享一样的内核，例如Openvz 语言沙盒：只能在语言的范围内使用 虚拟化的级别越偏底层，速度越慢，用户越难察觉到虚拟化的存在。 虚拟化的级别越偏上层，速度越快，用户越容易感知。
cpu虚拟化和完全虚拟化时，用户几乎可以不察觉到虚拟化的存在 半虚拟化时，guest内核必须存在补丁 系统虚拟化时，用户不能控制自己的内核 语言沙盒时，用户没有使用api的自由 docker的实现结构 docker lxc namespace: 仅沙盒隔离，不限制资源。 cgroup: 仅限制资源，不沙盒隔离。 aufs image管理 当然，还有很多细节的东西，里面就不一一列举了。例如veth。
docker不是虚拟机 docker不是虚拟机，因为lxc已经是虚拟机。如果两者功能一样，那么docker就没有存在的必要。
你可以把docker当虚拟机用，但是当虚拟机用的话，他的完备程度远远不及现在的种种虚拟机。相比之下，就会觉得很不好用。这不是docker的错，只能说被不正确的使用了。
docker是什么 docker就是环境。
docker实际上只做了一件事情——镜像管理。负责将可执行的镜像导入导出，在不同设备上迁移。
原本我们发布软件有两种方法，源码发布和二进制发布。二进制发布又有两种方案，静态链接和动态链接。最早的时候，我们发布软件都喜欢动态链接，因为小。但是随着网络和存储的升级，软件越来越喜欢静态链接，或者把动态库打包到发布里。因为系统情况越来越复杂，依赖关系一旦出错，系统就无法启动。
将这个思路推到极限，就是虚拟机发布。早些年有人发过一些Oracle的linux安装镜像，算的上是先驱。因为Oracle早些年的安装程序很难用，对系统的依赖复杂。公司做测试用装一套Oracle还不够麻烦的。相比起来，下载一个虚拟机直接跑起来就可以用就方便了很多。即使性能差一些，测试而已也不是特别在意。
docker再进了一步。不但提供一个镜像，可以在系统间方便的迁移。而且连镜像的升级都能做掉。更爽的是，升级只用传输差量数据。当然，有好处就有牺牲。
docker的镜像是只读的 其实不是，docker的镜像当然可以写入。但是写的时候有几个问题。
如果对镜像进行写入，aufs会将原始文件复制一次，再进行写入。这样性能比较低。 更直接的问题是，一旦对镜像做了写入，就无法从docker这里获得更新支持——docker不能将你的写入和上游的更新合并。因此，整个系统就退化成了一个完全的虚拟机。 所以，我个人认为，docker的镜像本身应当是只读的——如同EC2里面一样。数据的写入应当通过远程文件系统或者数据库服务来解决。
vagrant 提到镜像管理，我们可以提一下同样属于镜像管理的一个软件——vagrant。
可以将vbox的镜像打包导入导出 提供了一个cloud，允许镜像的分享/更新 为什么vagrant不如docker出名 快，系统级虚拟化使得docker的虚拟化开销降低到百分级别以下。 可以在虚拟机内使用的虚拟机，例如云主机内。 资源调度灵活，不需要将资源预先划定给不同的实例，在不同资源的机器上也不用调整参数。 成功案例 编译系统/打包系统/集成测试环境 典型的搭建一次，执行一次，销毁一次。不需要对image做更改（准确说的需要做更改，但是不需要保存）。
公司内部应用 在IaaS的比拼中，以Openvz为代表的系统化虚拟化方案几乎完败于完全虚拟化/半虚拟化系列技术。就我和朋友的讨论，这里面最主要的因素在于。完全虚拟化技术可以比较好的隔离实例和实例间的资源使用，而系统虚拟化技术更偏向于将资源充分利用。这使得系统虚拟化更容易超售。
然而，在公司内部应用中，这一缺陷就变成了优势。企业的诸多系统，只要在同一个优先级，其可用性应当是一致的。几个联动系统中，一个资源不足陷于濒死的情况下，保持其他几个系统资源充足并无意义。而且总资源是否足够应当是得到充分保证的事情，企业自己“超售”自己的资源，使得业务系统陷入运行缓慢的境地一点意义都没有。
因此，系统虚拟化可以为企业级云计算提供可以灵活调度的资源，和非常低的额外开销。
当然，云计算在企业化中原本就面临一些问题。原本提供软-硬件统一解决方案的集成商，需要如何重新组织解决方案。如何协调节约资源和高性能，高可用。云计算在企业级应用中还有很长的路要走。
短板 太新。目前成功案例还是不足，而且围绕docker的工具链还不完备。 适用范围比较窄。需求需要集中在“环境迁移”领域，而且image本身不应被写入。 生不逢时。rvm和virtualenv已经在前面了。 </description>
    </item>
    
    <item>
      <title>核聚变？</title>
      <link>//blog.shell909090.org/blog/archives/2648/</link>
      <pubDate>Thu, 26 Jun 2014 13:34:41 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2648/</guid>
      <description>最近看到一篇文章極限DIY之核融合反應爐。昨天和朋友吐了不少槽，我总结一下。
真实性 首先，我不会质疑这篇文章的真实性。因为如果要评价一个实验的话，最基础的，这个实验的基础原理必须公开以供复现。他的基础原理是什么？聚变反应方程是什么？是否能够复现？文章本身，一点细节都没说，发布者也不是什么国际知名单位。这种情况下，质疑这篇文章的真实性是徒劳的——因为你都不知道从哪里入手。
先说明一点。我对核物理完全一窍不通。如果以下有错误，请指出。
按照原料为重水，没有提到氚，我推测聚变是D-D反应。D-D是经典的聚变方程，但是其反应式有两个，产物分别是32He + 10n和31H + 11p，分别放出质子和中子。但是两者的反应条件，质量损失均有不同。
由于不知道聚变原理（作者说是电场陷阱，但是不知道如何产生的，强度多大），所以这个系统的基本特性无法评价——就算不要求输出大于输入，最起码输出/输入比，反应速率是必须的。而且正常来说，做了实验，最起码测试一下质子和中子强度。对比装置对质子和中子的吸收水平，推断原本的辐射强度，倒过来计算两个反应的反应速率。这应当是一个完整实验必须做的。
有了放射强度的测定（完善的还得计算测定精度），计算出来的反应速率，就可以推算出理论输出值。配合上输入值（这个计算需要了解作者的电场陷阱原理），大概就能推算出理论输入/输出比。然后对比实际的输入/输出比，能够对装置运作的基本情况给出一个评价。
是否因为知识产权保护所以封闭细节 他又没做到输出大于输入，有什么知识产权保护的必要呢？写成paper发才是正常的做法吧。
为什么这么罗嗦 因为科学的基础必须是严谨，可复现。
很多人以为万有引力就是牛顿头上砸了一个苹果，然后感慨自己为啥没这个运气。当然有不少人脑子还比较清楚，小时候脑袋上砸了不少东西也没想出什么来，改为感慨自己为啥没这个天分。其实苹果的故事最多只能作为传说而已。
万有引力的基石，是第谷(1546-1601)的海量天文学观测数据。有了这些观测数据，开普勒(1571-1630)的行星运动定律才站的住脚。有了开普勒的行星运动定律，万有引力(牛顿，1643-1727)才能作为一种学说被提出来，并且有机会得到验证。否则要凭借想象想到，物质间实际上是具有非常微弱但是强大的引力的——对人类的想像力实在是太大的挑战了。即便有人能想到，也绝无可能说服大多数的人。甚至有机会进入实证。
当然，万有引力最具说服力的支持，是卡文迪什(1731-1810)的引力常数测试实验。卡文迪什以那个年代近乎艺术性的测量精度，将这一量精确的测定了出来——顺带一提，即便在现代，万有引力常数的精确度依然是所有物理常数里面最差的。
所以呢？我想说什么？
高精度的定量测量，才是物理学的生命。物理学家毕竟不是在玩弄数学技巧，整出一个漂亮好看的方程，就完事了。
我在感慨什么 我不知道作者是天才还是民科。但是我看到无数人在那里叫好——你在叫好之前，难道就不知道简单看一下作者讲的细节么？他又不是没贴。
如果看了一下仍然叫好，我觉得纯属一点科学精神都没有了。上来就酸“怎么可能”，“你算老几”我觉得到也不必——毕竟作者也没有公布细节，就凭作者个人能力否定成果未免鲁莽。但是我绝对不认同，仅仅因为“精神可嘉”，就无视物理学基本精神，在没有技术支持和复现前，对一项实验大加赞赏。
我也顺带吐槽一下作者的文，说这是实验文不如说这是软文。通篇到头就在讲装置怎么难做，自己怎么困难。一没说基本原理，二没计算过程，三没测试数据，四没装置的设计制造图。说国外看到类似的设计，可是reference完全看不到。这些都算了——连装置的设计目的和输入输出功率都没有。你真的是在说技术么？
下面会发生什么 如果是正常情况，大概会有同行复现。能复现的发文说OK我复现了，不能的就开始联系和质疑。
以作者的名望，大概不会有学者认真的想去复现。不知道作者有没有意思主动联系同行做复现。如果有的话，同行复现一下结果就出来。如果没有的话，大概会变成主流学界不搭理，作者感慨自己受到冷遇，然后网友们就是就是两句——这样子。
参考 核聚变 第谷·布拉赫 约翰内斯·开普勒 亨利·卡文迪什 艾萨克·牛顿 </description>
    </item>
    
    <item>
      <title>上海的出租车越来越不像话了</title>
      <link>//blog.shell909090.org/blog/archives/2645/</link>
      <pubDate>Mon, 09 Jun 2014 17:46:32 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2645/</guid>
      <description>事情 5月24日，我乘一辆出租车从玉兰路杜鹃路到纪念路汶水路。上车第一时间，我报了目的地，然后脱口而出的是走外环。司机纠正了我这点——外环太绕路了。我说对对，您怎么走。他说南浦大桥。南浦大桥能走么？我说不知道，您走吧。
OK，30分钟后，我就发觉好像不对。计价器已经高达了50，而目的地还没有影。我没和司机说，我岳母家就在旁边，这两个地点我经常来返，一般都是40-50之间。
到地方一看，80。我擦。。。算了，公司有事，回头再处理。
办好事情，回头打电话给法兰红，报上车号证号，上车下车时间地点。完了回复我说，7个工作日之内给回复。我说OK。
过了几天，等等不来电话，我再去打了一次。法兰红接电话的人也很奇怪，已经转给他们了，怎么还不回复呢？
今天（6月6号），实在忍不住了，再打了一次。法兰红的人直接给了宫霄的电话。打到宫霄去，差点没把我气死。
他首先慢悠悠的说，上车你怎么和师傅说的？我说外环。他说你都要走外环了，还指责师傅绕路？
我了个去，我要去北京路不小心说了个北京，然后说不对不对。师傅真给我开北京去也合理？何况当初师傅已经说了，外环太绕，走法不对。这明显是口误还拿来说事。
然后他说，师傅这个不算绕路。你上车时让师傅随便走的，师傅按照自己的判断走的。
我当场就骂娘了。我XX你个女性直系亲属的，说了随便走就可以随便走啊。你让客人到你家随意，是不是他XXXX你个女性直系亲属你也随意啊。当晚我反向打回来，大众的车，只走了14公里。你的师傅走了23.3公里，这叫判断？是判断能多赚我多少钱么？
他又慢条斯理的说，师傅开的时候说了往南浦大桥走的啊。
我擦，我上海盲，去那里只知道一条道——大连路。还有好像内环也行（这就是口误成外环的原因）。师傅说哪里更快，我就说跟着走啊。不是这次我哪里会去查“从玉兰路杜鹃路到纪念路汶水路”的路里面“是不是走南浦大桥不合适”呢？
电话对面的沉默了一会，又说，按照师傅的判断，在那个点走大众那条路会堵的更厉害。你上车的时候也说快一点的，现在不认了？
我OO你个XX，..你个**。绕路不往市郊绕，绕到市中心去了？你说大连路隧道会堵车，杨浦大桥会堵车，我不敢说不会。你说从南浦大桥开过市中心比他们更空，我还真不信了。何况这条路一绕就是10公里，本来一个14公里的路，总共24公里你能开到25分钟以内？我TMD的老老实实走预期也就是半个小时而已。为了省5分钟（还没准），多花60%的车费？你脑残还是我脑残？而且从结果来说，更快了么？结果还是半个小时开到。
更何况，公司的同事从张江打车到同一地点，47元，半个小时多点。充分证明当时事实上就没有堵车，唯一对堵车的判断只来自于驾驶员的内心。
对面沉默了一会，又和我扯师傅当时自己的判断。我懒得和他罗嗦。“自己内心的判断”用在每个绕路案例上都是一个无法驳斥的东西——你不能指着一个人说，我知道你内心里明知道这是绕路的，You know it。既然无法驳斥，索性跟他说我会打回法兰红，就这样吧。然后挂了电话打回法兰红。
值得玩味的事在后面。法兰红的人听完整个流程，一言不发，给了我上海市运管处的电话。照理说作为管理母公司，你觉得我不对应当直接告诉我“师傅是对的”。如果你觉得我对就应该直接处理。运管处电话可能把没事的事惹出事来。给我运管处电话，基本只有两种可能：
运管处肯定会打太极，或者什么都不做。所以拿运管处当挡箭牌。 这件事我们也有难处。索性简单点，你有本事再往上面投诉。投诉出了结果，也没人有话说。但总之我们这里我没法帮你处理掉。 我打给运管处，他们说接受投诉。然后又是一通车号证号的，然后等回复。
分析 无论如何，宫霄出租车公司在管理上至少有以下几个瑕疵：
七天内不回复。没什么好多废话的。 根本没给乘客选项。在整个乘车过程中，出租车司机就没提供过“大连路隧道”和“杨浦大桥”这两个选项。如果你要用一个绕路的方案，至少要告诉乘客，可以走大连路，但是会堵。最后“大连路隧道”是我和宫霄的运管人员争论的时候出现的。 我有次曾经坐过一辆大众的车，从曹河泾回家。问说回浦东能不能更快点什么的，例如走徐浦大桥。司机马上跟我说那样会绕路，起码绕10公里。如果一趟车，乘客自己要绕过50%以上，哪怕是乘客自己要求的，也会要求乘客签单子避免责任。我当然不指望每个公司都有这个水准，但是至少说明“绕路一半以上”并不是什么常见选项，更不会是唯一选项。
其实我在坐车的时候，经常会和司机聊聊天。虽然大部分的司机都很油滑（上海话讲“老油条”），但是其中碰到的大部分人不坏。我见到过因为我身体不适，不能吹空调。大夏天关着空调开车子，开的自己一身大汗的师傅。我见到过不小心东西掉在车上，不要额外收费给我送回来的师傅。我见到更多的师傅，冷淡，油滑，事不关己高高挂起。但是基本上，大部分人都不坏。靠自己的本事吃饭，不会恶意绕路，或者拿着乘客的财物不还（要乘客出送还时的车费我觉得是合理的行规）。
但是，这一情况，在这几年，是越来越差而不是越来越好。
这一问题，我碰到一位师傅，他的分析让我觉得有几分道理。一辆车，一天24小时管理费300-400，油费300-400，一天要做到傍晚，挣的才是自己的钱。15天做一休一，才能挣到6000-7000元上下。有路道的做做私人司机，虽然只能挣个4000，但是工作强度只有三分之一不到。剩下的时间陪陪家里人，炒炒股票，上网卖点东西，日子也过的去。照他们那个强度推算，我们应该挣12000的。所以现在越来越没人要做出租车了。有本事的开开大车，有路道的当私人司机，或者做做小生意也行，只有其他什么都做不了的才做出租车。
我说所以出租车司机的素质越来越差么？
他说还不止。很多时候运管处要管，又没法管。管多了，司机不做了，运管处还要费心找人补上。出租车在上海是属于公众交通而不是私人企业，不能说不做就不做的，不做就大事件了。但是要做，又没有人，只能对一些事情眼开眼闭。对着乘客说，我们已经严肃处理了。对着司机口头警告警告算了——反正他们这辈子没那么巧刚好碰上。
他一说我顿时觉得确实是这样。07年的时候我投诉过一次拒载。当时公司运管核对了事情就和我说，要师傅打给你道歉还是怎么处理。我说还能怎么处理。他说扣师傅一天工资(好像是一天，还是多少)，给我100元举报奖金。我想想算了，不是那么大的事，不结那么大的仇。师傅真给我打过来道歉了（虽然听着心不甘情不愿的）。12还是13年我投诉机场有人拒载的时候，公司运管给我打了个电话。“我们感谢您对公司的支持，如果没有您的举报，我们肯定无法发现这些败类。对于这次的事情，我们会严肃处理，以敬效尤。”听着很爽，不过注意到了没，既没说当事人的处理，举报奖金什么的也只字不提——而且关键是这个说辞很流利，我感觉这哥们的工作就是复读机。
这次，个人觉得，法兰红的运管对下属小公司也没有办法了——乘客你要来自己来吧。
建议 下面主要是给台湾朋友的建议了。我的外地朋友里面北京和台湾人比较多，如果是欧美——大概也看不懂中文吧。
不要随意打车。
如果你真的需要打车的话，先确定这不是一辆套牌车。套牌车运管是处理不了的，有什么问题自己倒霉。套牌有点像天灾，很少碰到，但是一旦碰到就是自己倒霉。你最好先看一下出租车的内装，如果不对的话就不要上车。
再确定这不是一辆小公司的车。哪些是大公司？巴士，大众，锦江，强生，海博，海虹，农工商。至少这些牌子我还叫的上来。其他公司的车子，一般也不会碰到问题。但是一旦碰到就很难处理。
注意，这不是说小公司没什么好人。我在小公司的车里面，碰到过很多很好的师傅。只是说，这些公司的投诉管理机制不给力——你得祈祷你没有用到这些机制的机会。
上海出租最重要一个特点是，属于公众交通而不是私人服务。因此有一条很特殊的规定——拒载投诉。主要是针对司机一听你这个地方，觉得不合算就不去了，你可以投诉他。
所以上车前先问师傅做不做生意。等师傅说做，上车后他问你去哪里再说。千万不要当街就把自己的目的地大声说出来。如果出租车司机没有主动询问你目的地，或者确定表明自己做你这单生意，你是不能投诉拒载的。也就是说，如果你一喊，我就去个隔壁。得一堆师傅纷纷表示不做你这个生意了——这是你自己问题，无法投诉。
而且如果你扬招车的时候，师傅当着你的面把出租车运营灯关了——也无法投诉。你自己拉开门坐进去，师傅关掉运营灯——无法投诉。你主动跑上去告诉他去哪里，他关掉运营灯——也无法投诉。
上海出租的一大奇观，就是在下午4-5点的下班高峰。你招手的时候，一堆车纷纷关掉运营灯——这是他们到了交班的时间，只能去特定的方向。如果你的方向不对他们是不会问的，省得给自己找麻烦。对了，如果上车前师傅已经说了只去哪里——也无法投诉。
另一个就是记得收好发票了。上海出租的乘车凭证就是车票，没有车票是不能投诉或者报销的。如果出现东西丢在车上也是要凭车票找人的。所以下车记得拿票。
至于东西忘在车上——抱歉不要指望。如果你有确定的证据证明是司机拿的，你可以投诉，或者卯起来告他到死。但是司机没有义务保管你的财务，或者在你下车时确定东西都拿上了。所以如果不能排除后面的乘客拿走的财务——事实上很难排除——那么几乎找不回来，而且你也不能投诉他。
哪种情况是可以比较完美的排除的？如果你的电话过去的时候，司机的第二个乘客还没有下车。这时候，还没有人离开过出租车，所以不是司机就是乘客拿了你的东西。但是比较悲剧的是，司机是没有权力搜查乘客的。所以如果乘客坚持没有看到，你还是没办法。
所以？要养成一个习惯。离开车前慢悠悠的搜一遍，确定东西都拿了，再下车。你搜的再慢，司机也不能赶你下车——你也不会真的搜上半天吧。</description>
    </item>
    
    <item>
      <title>cgroup限定内存</title>
      <link>//blog.shell909090.org/blog/archives/2642/</link>
      <pubDate>Fri, 06 Jun 2014 14:34:45 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2642/</guid>
      <description>机器配置 ubuntu 12.04
内核版本：3.11.0-20-generic
ulimit的限制效果 ulimit -m 8192 当内存突破8M时，什么事情都没有发生。直到38M都没任何反应。
ulimit -v 65536 python抛出MemoryError
cgroup的限制效果 echo 8388608 &amp;gt; memory.limit_in_bytes 大小不对，cgroup的内存量计算方法和ps/status不一致。因此限制计数需要根据具体情况调整。
内核计数 /proc/[pid]/statm size (1) total program size (same as VmSize in /proc/[pid]/status) resident (2) resident set size (same as VmRSS in /proc/[pid]/status) share (3) shared pages (i.e., backed by a file) text (4) text (code) lib (5) library (unused in Linux 2.6) data (6) data + stack dt (7) dirty pages (unused in Linux 2.</description>
    </item>
    
    <item>
      <title>为什么running不高但是load很高</title>
      <link>//blog.shell909090.org/blog/archives/2640/</link>
      <pubDate>Tue, 03 Jun 2014 14:43:11 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2640/</guid>
      <description>很多初学者会混淆几个概念。CPU繁忙程度，load。两者的区别在于，一个秘书是真的忙着抄抄写写，另一个么，反正领导只检查桌子上堆的文件数。只要桌子上准备一堆文件，在文件里换来换去就好了，没必要真的很忙。当然，大多数时候桌子上堆着很多文件的理由还是因为秘书手不够了，不过少数时候也有例外。例如fork boom，CPU很空但是load奇高。
我们就遇到了一个例外的例外。
症状是这样的。系统经常出现偶发性的load过高。例如有那么几分钟，load会高到100-200，然后就快速下降。但是检查后发现，即使在load极高的时候，cpu占用率也并不高，大概在10-20左右。磁盘吞吐也一般。那么load为什么会这么高呢？
我的第一怀疑当然是超多数量的小线程，在那里搞切换调度。所以我第一反应就是看了/proc/loadavg的当前活跃线程数——结果居然只有1-5。为了确认，我特意的持续观察了数次，在我观测期间load的1分钟计数还升高了——这说明当前实际队列比1分钟平均还要高，而活跃线程却是3。
怎么可能？交通系统报警说北三环大赛车，平均堵塞长度500辆。去一辆警车到现场回报说只看到塞了两辆，再去一辆说算上我们自己三辆。去了十多次都如此。任何脑子清楚的人都会毫无疑问的喊出——黑箱政治，政府不作为，我们要占领国会——不好意思，我们好像没有这个东西。
OK，言归正转。为了解释这个疑惑，我特意的去看了一下内核源码——我擦，loadavg的平均值计算中，是把uninterruptible算在一起的。而活跃上下文中，只算了nr_running！
——你丫敢再精神分裂点么？
为了确认，我还特意man proc，结果发现里面确实有说，平均值是R和D两者去算的。但是在活跃上下文那里，只说了the number of currently runnable kernel scheduling entities——看看清楚，这里可从没有说有D。脑子清楚的仔细想想就知道，D是不可调度的。
——问题是咱脑子不清不楚的就没想这差异，而且咱连man proc都没查。。。
另外顺便说一句，内核也告诉了我们一点东西——load计算的时候是连内核线程一起算的。
清楚这点差异后，问题的原因也很清楚了——肯定是哪里有很高的D。用ps -e Hl | grep -e R -e D扫了一下，再用wc -l做了一下统计。214个线程在D(或者R，或者只是不小心被grep到，但是实际上大部分都是D)。系统当前的loadavg正好长这样：
214.12 156.63 82.25 7/4629 10027 7个执行中线程(R)，207个uninterruptible。
——所有的谜都解开了。</description>
    </item>
    
    <item>
      <title>台北地铁砍人事件</title>
      <link>//blog.shell909090.org/blog/archives/2635/</link>
      <pubDate>Sun, 25 May 2014 11:12:13 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2635/</guid>
      <description>哪里都有疯子 其实并没有疯，只是不论理由，就是要杀人而已——就是所谓的反社会人格。理论上心理咨询是可以发现的。但是台湾的经验告诉我们——目前的心理咨询密度不足，敏感度不足。而要维持足够的敏感度，不仅费用成问题，而且还会有很多啼笑皆非的情况。
社会压力？北欧够没压力了吧。2011年挪威发生爆炸和枪击。
废除死刑？ 我不赞成废除死刑。当然，这和捷运杀人案本身并没有什么关系。他杀人的时候就知道自己会被判死刑。人不畏死，奈何以死惧之，死刑对凶手是没什么阻止力的。所以废除死刑还是保留死刑，都不能阻止凶案的发生。
但是死刑还是能阻止一些东西的。例如本次事件，死者中有两位20出头的年轻人。如果没有死刑，他们的父母会不会试着杀了凶手呢？反正活着也没什么意思，而且很讽刺的——我们也不能判这些人死刑。更进一步的，每次杀人案，我们需要严密保护的想必不是受害人，而是加害人——因为加害人不能死。而我们的法律为了保护加害人而存在，受害人遗族如果心理难以平复，只有自己动手，同时把自己变成受法律保护的人——就是加害人——才行。这样的逻辑不荒谬么？
死刑这事原本就没什么意思——我们已经遭到了损失，却还要用杀人来扩大损失。从这个意义来说，如果真是很久都没有恶性事件了——例如2011年挪威枪击和爆炸事件那样。这样的情况下，要不要废除死刑还真的可以商量。只是真的如此，我们应当判处什么人的死刑呢？长着野百合的绞刑架大概会成为城市最美丽的徽章。
死刑的意义在于，在无法无天的地方，我们有一种廉价的方法，可以永远的不用看到这个人。
和太阳花连结 咳，要认真论关系，马总统和杀人犯的关系绝对比太阳花近——这人的衣食住行，哪个不是受到政府政策的影响？是为期一个月的太阳花运动，还是持续执政数年的政府，更有可能造就一个杀手？两者哪个和凶犯的联系更多？持太阳花论的人认真想过这个问题么？
还有。包围行政院的年轻人去哪了？大概正在被各种凶案发生时的警察逮捕吧——你不觉得换个说法”凶案发生时，警察去哪了？“，这个质疑也能成立么？而且大部分凶案发生时都看不到警察啊，明明总统府门口一大堆的说。
也不要以为持这种论点的人是傻瓜。你讨论了这个问题，哪怕是否定，也达到了他们的目地——没有关系也是一种关系啊。我们不断讨论，有没有关系，有没有关系。不断得出结论，没有关系，没有关系——届时只要轻轻反问一句，真没有关系为何要讨论这么久，有人讨论过西瓜和美国国旗的关系么？没人讨论，是因为真的真的，一点点关系都想不到啊。
从这个角度来说，这种问题居然还需要讨论本身就很反常，你我都是网里的一个飞虫而已。
玩游戏和杀人的关系 比”吃饭和杀人的关系“近，比”没有女朋友和杀人的关系“远。从这个意义上说——难道政府要强制所有人谈恋爱？</description>
    </item>
    
    <item>
      <title>goproxy和msocks简介</title>
      <link>//blog.shell909090.org/blog/archives/2627/</link>
      <pubDate>Thu, 08 May 2014 16:41:25 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2627/</guid>
      <description>goproxy是我个人写的，和shadowsocks同类的软件。当然，在设计之初我完全不知道shadowsocks的存在，goproxy的最初目标也不是成为shadowsocks的同类。只是我一直无法实现一个可靠的，能够达成目标的系统。最后想，那这样吧，我找一个跳一跳能够够到的苹果。大幅简化的结果就是goproxy——后来我才知道shadowsocks。
shadowsocks的基本原理 shadowsocks的基本概念，就是利用某种不同于SSL的协议，将本地的socks数据流转发到远程。这个协议，在默认版本中是一个凯撒变换，后来有了aes等加密算法。goproxy也采用了类似的做法，同样支持aes等加密算法。在每次连接时，客户端先用加密通道连接服务器端，然后完成整个连接通路。这样的设计鲁棒性相当好，但是作为代价的，也有不少缺陷。
首先，goproxy和shadowsocks不约而同的采用了自己的协议，而非将socks5透明的转发到远程的服务器端。为什么？因为socksv5协议中，握手过程是三次交互。客户发送握手包，服务器响应允许的握手验证方法。客户发送验证报文，服务器端返回是否成功，客户发送要连接的目标，服务器端返回是否成功。细节我记得不是很清楚，但是2-3次往返是必须的。
这种工作机制需要client -&amp;gt; proxy-client -&amp;gt; proxy-server -&amp;gt; server的一个链条，本身就比直连多了两次TCP握手。加上上述的往返过程，更加耗时。而且这个消耗在每次建立链接时都要来一次，而HTTP是一种短连接协议——这就更加无法容忍了。因此改用自有协议，一次交互完成握手，就会更加快速。
更根本的原因在于，这两个系统都需要越过IDS，而三次交互的报文大小是几乎固定的——就算加密也无法改变报文大小。不但大小一样，而且由于用户名密码相同，起始加密过程和IV一致，因此采用socks协议的话，每个链接开始都有相同的来返数据。
我不知道shadowsocks怎么处理的这个问题。qsocks协议（msocks）的前身规定，每次握手时客户端提供一组IV，然后发送一个头部变长的字符串（256字符以内），在远程丢弃同样长度的随机字符。经过这样的处理，每次链接时的报文长度和内容序列都不一样，增加了破译难度。至于多出来的几十个字节，和验证报文在一个报文内，开销相比一次RTO几乎可以忽略不计。
但是还是有一点无法避免的问题。如果你看到某个服务器上有一个端口，频繁的被一个或多个IP链接。每个链接都不长，每次都是客户端吐一堆数据，服务器返回一堆，然后关闭链接。尽管协议无法破解，但是基本可以肯定这就是shadowsocks。根据这个特性，可以有效的阻挡服务——这也是我最近碰到的问题。
而且每个链接都需要验证和TCP握手太慢了。
msocks的改进 所以，我参考SPDY协议，做了msocks。msocks的核心思路和qsocks很类似，主要修改是以下两点：
使用一个可靠链接（这里是经过加密的TCP），在这个链接里面封装多对传输。 每个链接只要一次验证。 这样做，首先减少了一次TCP握手和一次身份验证，工作速度更加快。其次多个传输叠加在一个流里面，流特征更加变化莫测。最后，无论是服务器端还是客户端的开销都小了很多。
当然，这也带来不少问题。例如TCP原本的拥塞控制窗口是为了一对传输序列设计的。当很多传输序列在一对TCP上传递的时候，丢报文造成的影响会作用作用在全体传输序列上。包括丢了一个报文重传的时候，所有序列都必须阻塞。还有基础的TCP被施加了丢包，导致全体序列共享5k带宽。当然，经过评估后，我觉得这些问题比频繁握手更加轻，所以就设计了msocks协议。
协议设计的时候，有几个细节问题。
多对复用 我采用了一个map，来记录某个id是否对应到了一个控制结构。这个映射只能被客户端更改，并且有个专门的函数负责查找空闲的id，每次生成的id都是递增的，如果碰到最大值则绕回。
id的大小是16位，足够容纳65536对同时链接。其实不修改内核的话，500对代理就会导致too many files。
实际上一般到id达到400后，单一的tcp就断线重连了。目前我还没见过上千的数字呢。
连接状态 连接一般情况下可以看到5种状态，连接请求发送，连接请求接收，连接建立，主动关闭连接中，被动关闭连接中。
当客户端请求代理连接一个远程服务器时，进入连接请求发送。代理远程端接受后在连接目标服务器的过程中，进入连接请求接收。当成功后，双方进入连接建立。
当关闭时，主动发起关闭一端进入主动关闭，另一端进入被动关闭。当被动关闭端调用close，或者主动关闭端收到对方关闭，整个链接就销毁。
由于tcp是可靠传输，因此三次握手和四次关闭都是不必须的。
简单吧。
拥塞控制 TCP原本是带有拥塞控制的——借助SSN双序列和窗口机制。但是在多路复用的时候，我们需要自行控制拥塞——而且不能采用会和机制。会和会导致后续已经到达的其他链接的报文被一个没人接收的报文阻挡。所以必须采用带拥塞控制的缓存队列机制。
不过幸好，TCP本身是可靠传输协议，所以我不用担心丢包重发之类的问题。我需要做的，就是把对方读取的字节数传递回来，减在控制器上，即可。
不过，我没有做对应于silly window syndrome的优化，在每次读取小数据量后，这个读取造成的window扩张都会被传回。当然，这么设计是有原因的。我默认采用了8K的buffer进行fd间拷贝，所以一般碰不到SWS。
为了解决tcp链接复用造成的单连接带宽问题，我强烈的建议你做以下的设定：
net.ipv4.tcp_congestion_control = htcp net.core.rmem_default = 2621440 net.core.rmem_max = 16777216 net.core.wmem_default = 655360 net.core.wmem_max = 16777216 net.ipv4.tcp_rmem = 4096 2621440 16777216 net.ipv4.tcp_wmem = 4096 655360 16777216 ip选择算法和DNS 在goproxy中，我沿用了一个做法。通过DNS获得请求的目标IP，和中国IP范围核对。如果在国内则直接访问，否则透过代理。这个方法能够极快的加速访问，而且几乎不依赖于需要更新的列表（中国IP列表相对来说固定）。
问题是DNS解析过程。msocks内置了DNS能力，可以帮助做DNS。但是实践下来发现这样做效果并不很好。而原本是采用直接DNS，丢弃特定的报文。这样可以过滤防火墙污染。
原因很简单。原本的模式会让DNS服务器感知到查询者位于中国，于是给出中国可以访问的最快地址。而新的模式则会将DNS请求者搬到美国——这无故加重了代理的负担。例如www.qq.com，原本只需要请求得到一台深圳的服务器即可，现在则需要让DNS绕出去，再回来。如果不幸，QQ有一台位于美国的服务器，那么我的访问都会通过这台服务器——这可比深圳的服务器慢多了。</description>
    </item>
    
    <item>
      <title>CVE-2014-0160(openssl)严重漏洞及其对应</title>
      <link>//blog.shell909090.org/blog/archives/2618/</link>
      <pubDate>Tue, 08 Apr 2014 18:03:33 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2618/</guid>
      <description>描述 openssl 1.0.1系列中，1.0.1f以前的版本在实现上存在漏洞，未正确处理Heartbeat扩展，导致攻击者可以窃取服务器端敏感数据。
对应 请立刻升级openssl到1.0.1g版以上，并重启整个系统，以保证不会遗漏某些已经启动的进程。 如果有自行编译的程序使用了openssl。当这些程序静态链接或链接了自定义的openssl时，需要重新编译。 在有问题的设备上使用过的key，需要升级私钥。 openssh不受影响，openvpn受影响。 作为证明，请执行以下语句自行检查。
ldd /usr/sbin/sshd | grep ssl ldd /usr/sbin/openvpn | grep ssl ldd /usr/sbin/nginx | grep ssl for i in $(ps aux | awk &#39;{print $2}&#39;); do echo $i; ldd /proc/$i/exe | grep ssl; done 其他 根据昨晚看到的信息，这个漏洞会泄漏服务器端的通讯数据。因此请将所有session清空，在受影响期间使用过的用户名和密码请务必在3-5天后再修改一次(具体看服务商什么时候补掉漏洞)。
参考 nvd debian ubuntu openssl Is OpenSSH affected by this as well? </description>
    </item>
    
    <item>
      <title>安全的几点快速说明</title>
      <link>//blog.shell909090.org/blog/archives/2611/</link>
      <pubDate>Tue, 25 Mar 2014 17:14:14 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2611/</guid>
      <description>这篇文章谨献给某些特殊环境下奋斗的人士。其他人参考使用。
物理设备 物理设备上存储着相当多的个人资讯，所以所有的机密资讯要保密这是常识。
物理设备上可能拥有的机密资料：
各大站点的session token。借助这些，虽然不能抢走帐号，但是可以仿冒身份，发出假消息，或者诈骗。 浏览器启用了“保存密码”选项后，所有的密码都半明文存储在硬盘上。这些信息可以被用来抢走帐号。 个人的文档，照片，私密视频。万一笔电丢失就够倒霉了，再变陈老师岂不更痛苦？ 浏览某些特别站点的记录。咳咳，大家懂。 之所以要设备加密，是因为有一种破解方法是将你的设备存储拆下来，接到独立的读写设备上，直接读取数据。无论系统密码设定多强，也无法防范。
如果是mac，有一个选项叫做全盘加密。ubuntu有home分区加密的选项。启用这两项可以有效加密你的电脑。windows也有个类似的功能叫做EFS，但是据说不少国家级单位有解密权限。
Windows Mac Linux android上有加密系统的选项。但是要注意，如果启用会消耗大量电力，而且必须擦除整个设备才能解除。iphone我没用过，据一位挺熟悉的朋友说，只要设定了pin码，整个手机就会被加密。
加密只是第一步。对于经常保持开机的系统，如果能够轻易的进入系统，那么磁盘加密也形同虚设。所以，请给你的系统加上一个足够强的登录密码。
最低强度：
磁盘加密8位以上，系统登录6位以上，包含小写和数字。
推荐强度：
磁盘加密10位以上，系统登录8位以上，包含大小写和数字。
网络安全 首先，请把系统的防火墙开到最大：
Windows Linux Mac 基本原则是，只许出不许进。如果需要可以开放特定端口。
然后，如果在不安全的环境下使用网络，请使用vpn。这里请允许我广告一把朋友的网站云梯。一般是用来大陆翻墙的，不过要用来绕过不安全的环境也可以。
有时间有条件的朋友可以自行架设vpn服务器，这里给出linux下架设pptp vpn的方法。客户端使用方法可以参考云梯的说明。
How to Setup a VPN (PPTP) Server on Debian Linux PPTP Server linux pptp vpn服务器的架设 Debian系统快速搭建pptp VPN 注意加密一定要使用128位，不要使用56位。
网站访问 如果可以选择，尽量使用https。下面有一些插件，使你可以尽可能的使用https访问站点。当然，如果站点没有https则无效。
Chromium Firefox 在https访问的时候，如果跳出证书是伪造的之类的警告，请千万不要确定。这是有人在man-in-middle的信号。正确的做法是使用vpn，看看问题是否消失。如果消失，上报给工程师。如果没有消失，请找可信的工程师来排查。千万不要轻易认可未经鉴定的证书(实际上不建议自行接受任何证书——除非那是你自己配出来的)。
另外，请关注证书的签署者。在我这里看到的信息如下：
google的证书签署者是GeoTrust facebook的签署者是VeriSign twitter的签署者是VeriSign 如果签署者有异，请上报工程师。这可能是有人获得了某个根证书机构的密钥来做的签署(例如CNNIC之类)。原则上这样的man-in-middle可以攻击任何网站。</description>
    </item>
    
    <item>
      <title>携程网信用卡泄密问题</title>
      <link>//blog.shell909090.org/blog/archives/2606/</link>
      <pubDate>Sun, 23 Mar 2014 22:15:38 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2606/</guid>
      <description>事情经过 2014年3月22日晚上6点多，乌云平台报告了携程平台支付日志泄漏问题，然后信息快速传播。晚上八点左右我就得到消息。
从描述中大致来看，应当是支付过程的各种信息都被打到了日志里面，然后日志泄漏了。
第二天，携程发表声明。简单归纳就是几点:
漏洞系调试所致。 受影响的用户为21-22日的用户，统计仅93人。 因漏洞引起损失，携程将全额赔付。 个人认为，携程的声明基本就是在推卸责任。
过程还原 漏洞细节虽然没有暴露，但是从透露出来的信息仍然可以拼凑出部分过程。
某个时间开始，携程的某个内部人员打开了线上系统的日志，用来做调试。不幸的是，日志里面包含了信用卡所有刷卡信息，而且日志可以被穷举下载。这个人是谁，什么时间开始，不知道。 22日，漏洞发现者(猪猪侠)发现了这个问题，并报告在了乌云上。 携程收到信息后，立刻关闭了调试模式。并且把系统日志拉出来看看，发现里面有一些人。于是携程就发表声明。 问题分析 在整个过程中，暴露出几个问题：
携程未必是故意记录CVV信息。但是根据携程可以让用户仅提供卡号后四位就可以完成刷卡来看，携程一定是记录某些信息的，但是未受到本次漏洞影响。 交易过程所交流的数据属于机密，到底是什么人有权限打开调试日志，又没有经过严格的访问控制？是主管级以上？还是普通员工？无论哪个级别都是严重的问题。如果是普通员工，说明携程对员工的管理不到位，权限分割控制不合理。任何恶意员工可以打开日志得到数据而主管无法察觉。如果是主管以上级别则更加糟糕。说明主管根本不懂技术，也不知道如何保护客户的安全。 时间是否仅限于21-22日？如果是的话，意味着仅仅2天就被攻击者找到了漏洞。如果是偶然的话也太快了，如果是必然的话，则代表携程内部其实还有其他问题。 两天的交易仅仅是93人？没有更多？为什么只是部分用户受影响？携程并没有披露更多细节。要么是这里仍旧隐藏着漏洞，要么是携程的危机公关不到家。 评论 为什么说携程的声明是推卸责任？
首先，对于受到影响的用户，只要能证明是携程的责任，无论携程是否发布声明，都可以打官司获得赔偿。携程的声明仅仅是表达了他必然受到的法律后果。如同驾驶员发表声明：“我喝醉后所撞伤的所有人，我将全额赔付其医疗费”一样，没有任何意义。而如果无法证明是携程的责任，携程当然不会管你。 携程是否隐瞒了更久以前服务器调试开启的事实？这并不好说。个人倾向于善意的揣测携程不会隐瞒，但是在行动上不妨恶意的揣测其实调试信息打开时间更长，受影响的人更多。 为什么只有93人受到影响，携程并没有公布。携程的事后分析，应当都是基于这个漏洞的特性“下载日志”而定的。其赔偿基线也是根据“下载日志就会有日志”而产生。但是是否有可能被擦脚印？或者内部人员打开日志然后关闭而逃过被抓？这些携程并不能回答。从问题分析2来看，这种可能并不能排除。而携程的声明并没有表示对这些情况负责(当然就算想要负责也无能为力)。 由于携程信息的不透明，其声明“只有93人受到影响，其他用户安全不受影响”，换个说法就是，“不接受任何赔偿请求，除非你们有足够证据”。问题是用户怎么可能有证据？证据都在携程的服务器上和拿到信息者手里。当有用户的信用卡被盗刷，如何确认是自己的责任还是携程的责任？ 基于上述几点，我认为携程的声明是在推卸责任。
建议 如果你是93人之一，当然，携程应该已经联系你换卡了。
如果你不是93人之一，根据上文分析，携程是不会理你的。基于携程并没有透露更多的信息，也没有第三方机构佐证其说法的事实。你需要自行考量信用卡信息泄漏的风险。因此，我对所有在三年以内在携程使用过信用卡的所有用户的建议是，立刻用各种方法冻结信用卡或额度，并尽快换卡。
我对所有人将来的建议是，远离携程直到其展现出对用户隐私和安全足够的尊重，或者关门。
PS，你可以用下面几种方法冻结信用卡:
打电话给发卡行，要求冻结。发卡行核对一些基本信息后就会帮你冻结。 使用网银将额度改为1元。根据网友反馈，建行的额度是千元为单位设定的，建议建行的用户们尽快弃卡。 信用卡的固有弱点 信用卡消费的几个要素是，卡号，CVV号，还有有效期。如果是线下消费，需要核对签名(理论上如此)。如果有设定密码，需要核对密码。
密码的问题是，如果设定了密码，一旦信用卡被盗刷，而密码一次正确，将被视为用户责任。而且很多发卡行的跨境消费是设定了密码但是没有密码也能成功的。因此信用卡的建议是不打开密码。
在网络使用中，这里有个很严重的不便——卡号，CVV，有效期，都是发行时即固定，不可更换。这导致一旦你将这些信息交给对方，你的安全就全由对方保护，发卡行无法帮你做任何事情。
正常来说，应当使用密码乃至在信用卡上附上电子token来加强安全性需求。这样的话，token信息无法保存，密码可以修改。当出现携程这类问题时(或者更普遍的，当碰到有恶意的商家时)，可以通过修改密码来解决问题，不需要换卡。
一个小故事——我和携程打交到的经历，还有我为什么幸运的逃过一劫 我在某年，使用携程订机票的时候，对方业务员让我报出身份证号。我当时就一阵错愕——难道身份证号不是应当使用手机键盘输入么？
两者的区别在于，手机键盘输入，信息是直接输入到VI系统的电脑中，业务员只能看到尾号。而如果是业务员输入，那么他就有我的所有信息——从身份证号到信用卡号。也许我可以相信携程，但是我如何相信业务员？出了问题，我如何证明？
所以我就向携程的客户经理投诉了这个问题。具体经历在网络安全——你需要知道的东西里面已经描述了。这里面甚至我质疑了携程保存信用卡的安全性，几乎和今天的问题类似。
结果没多久，我打给携程的时候，丫的业务员和我说，如果你信不过我，咱们可以走这套系统。
我了个大去，这种系统还允许旁路绕过？那有个毛线的意义？
从此(12年年中吧)我再也没有用过携程的业务——用也是让公司同事帮我用。因此，当去年(13年某个时候)我的老卡到期，我就换用了新卡。新卡还没有在携程上用过。所以本次问题我一点事都没有。</description>
    </item>
    
    <item>
      <title>台湾反服贸占领立法院中，网络干了点什么</title>
      <link>//blog.shell909090.org/blog/archives/2600/</link>
      <pubDate>Fri, 21 Mar 2014 10:49:01 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2600/</guid>
      <description>短文，直接说吧。今天在facebook上看到，有帮台湾朋友组装了两台大功率的基台，把信号直接打到立法院里面。我在图片上看到了一堆天线，不少Cisco的设备，还有基台车。好像还有朋友拿着易拉罐和炒菜锅不知道是帮忙还是帮倒忙。
简单点说，基本架构就是外面架一个基台(推测使用5G频率)，用定向天线和里面的client连通，出口用4G和基台车连接。然后里面的client走有线网和多个AP连接起来，每个AP分散部署，分享基台到client之间的链路。
目前看到的效果，信号已经打到立法院里面了。连警察人墙都可以用网——只是他们没有密码而已。
——结果今天早上发现立法院内其实有网，而且网速快过4G。所以又反过来架设——内部多个AP分享出去后，向外面打信号，外面又架设多个AP把信号分享给会场的上万人群。
上万？想想都要疯啊。
03-21T14:42: 根据看到的最新消息。3G和WiMax都爆满，而且整个立法院内信号密度过高。因此退回最原始的方案——拉一根超长网线解决。啊啊，这不是白折腾了么？
03-23T12:00: 在会场架网络的朋友，在google plus上分享了细节。细节在这里： https://plus.google.com/+DAVIDLIFUHUANG/posts/WKP2qTDJypA
摘抄如下：
我來解釋一下我在立法院內部遇到的網路問題, 同時也說明這是我看到的問題, 或許 rex 有不一樣的見解, 那就再請 rex 另外闢文說明, 我剛開始進去的時候, 我原來以為 g0v 裡面有人, 不過實際上應該是我搞錯意思, 所以我就傻傻的進去了, 不過我個人是覺得, 我們應該要維持裡外訊息的暢通跟正確性, 所以我應該要做一點事情, 畢竟我只會弄網路, 所以我就真的去想辦法弄網路了 XD
人很多, 3G 全部癱瘓, 所以早就該換 LTE 了, 對吧 XD 3G 全部癱瘓, 所以大家都用 WIMAX, 這次 WIMAX 的表現還不錯, 讓我覺得以後來台北參加活動還是應該花點小錢租 WIMAX, 畢竟正確的訊息傳遞可以避免很多不必要的麻煩發生, 同時沒有人用的服務遇到人多的時候就是好服務, 因為它沒有人用, 但是目前沒有 5G 無線網路的 WIMAX 攜帶型無線網路熱點, 這是一個很嚴重的問題 XD WIMAX 多, 大家都開無線網路熱點來分享 WIMAX 的服務, 所以造成了無線網路封包的的碎片化 立法院本來就有無線網路系統, 在一個會議室裡面有一堆一樣的 ESSID, 同時又分散在不同的頻道上, 然後這些頻道上面又有很多一樣的 ESSID 但是分散在不同的 AP 上面, 這樣會發生什麼事情呢?</description>
    </item>
    
    <item>
      <title>台湾服贸协议问题</title>
      <link>//blog.shell909090.org/blog/archives/2598/</link>
      <pubDate>Wed, 19 Mar 2014 11:33:58 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2598/</guid>
      <description>这篇东西是简单介绍台湾服贸问题的前世今生的文。其实我早就在关注这个问题，只是作为一个大陆人，这个问题很不合适。毕竟服贸这东西让台湾人很不爽。换言之，某种程度上我是获利一方。作为获利方还指手画脚说三道四未免有点“得了便宜还买乖”的嫌疑。不过近日，服贸问题已经从一个单纯的贸易协商变为政治问题。这里面很多东西非常值得我们学习。
什么是服贸协议 简单来说，就是大陆和台湾的贸易协定。从这个角度来说，这个东西不但没问题，而且必须。出问题的是内容和通过内容的方法。
台湾政府宣称服贸可以提振台湾经济，但是民众始终有疑虑：
大陆人工(薪酬)比台湾便宜，加大开放是否会影响就业 开放不对等，台湾太多领域对大陆开放，而大陆很多领域不对台开放，其中甚至包括影响国家安全的重要领域(例如通讯和传媒) 大陆食品安全问题，台湾的检验检疫是否能保持独立性 老实说，从大陆人眼光看，很多问题颇有点——不知道怎么说的味道。台湾食品安全问题也不轻，而且从就业工资来看，台湾平均起薪大概和上海持平。随着工作年限上涨，反而是上海这里工资更高(至少在IT业)。如果每一条都照着对台湾有利的方向改，对服贸不爽的就是我了。基本一点，协议是双方的东西，即使我们看起来这个协议再合理，对对方再有好处，如果对方本身不同意，就不应当且也无法签署。协议本身，必然是双方讨论，我这里退让一点换取你哪里退让一点，最终得到双方认可——的这么个过程。
参考可以看以下几条：
看过来 看过来 看过来 问题在哪里 问题在于通过的流程。
台湾服贸对不同人群造成的影响不同。对于老板阶级来说，员工工资降低，市场扩大，自然是好到不能再好的好事。对于高阶白领来说，能到大陆打工也不坏。但是对于中低层员工而言，就要面对工资降低，服务品质变差等等问题。因此不同人群对服贸的支持和反对是不一致的。而台湾不是大陆，通过这种东西理论上是要通过内部讨论，人民授权的。问题是服贸这么一大包，这条这帮人不同意，那条那帮人不同意。每个人一个说法，但是总之就是反对你。这样服贸就始终无法通过，政府非常头大。
因此要通过服贸，比较容易的办法就是逐步协议，每次只谈一部分，对少部分人产生不利影响而对多数产生好处。逐步通过逐步调整，减少影响范围，降低抗议人群比例。但是台湾政府不但拿着一大包协议来签，而且想大手笔的一笔就签下去，完全没管民众的反应，也不管是否合规。等民众抗议了，再强行闯关。
呃，是不是来大陆考察多了，一不小心以为自己还在过组织生活呢？
最近怎么回事 本来去年服贸都要签了，结果被人踢爆，叫停回去重新逐条审查，而且要开公听会(听证会)。大陆的同志们想也知道，听证会么，涨价就对了。所以党国官员干脆一周开八场，我讲你听就好，乖乖不要多问。结果引起不满，后面被人排成了两周一场——依然是我讲你听(非常熟悉吧)。党国官员还很不爽，指责这是拖延时间。
然后拖到最后一场，干脆一合本子。好了，三个月已到，审查视为通过。
咳咳，要这么容易，不知道能不能拜托他通过一下大陆人获得“台湾”国籍的法规。只要迁一成大陆人的户籍过去，公投回归大陆就没疑虑了。
参考可以看这里。
所以呢 所以这帮不爽的人就跑去把立法院给“占领”了。
啊然后呢 我也不知道。不过搞成这样，已经完全不是服贸的问题了。服贸本身没什么太大问题，逐条审议逐步通过也可以，阻力大也不会比现在更糟吧。现在已经是手法本身激起的不满比服贸本身还大了，作为政治(尤其是还算民主的地区的政治)，这么搞是很不明智的。
从我关注的台湾各大事件的结果来看，往往是雷声大雨点小。运动的时候声势沸反，但是最终结果下来往往是差强人意。但是好在运动是经常的。民众往往是这里一点，那里一点，能够挡住一些太过荒唐的事情。其实这也是民主社会协商的必然结果，指望一次运动就能把所有的问题一并解决的想法，和一次通过整包服贸一样不靠谱。</description>
    </item>
    
    <item>
      <title>系统内存有富裕但是syslog中持续报告内存耗尽</title>
      <link>//blog.shell909090.org/blog/archives/2594/</link>
      <pubDate>Mon, 17 Mar 2014 14:01:13 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2594/</guid>
      <description>现象 ubuntu12.04，3.5.0-23的内核。在syslog里面持续看到内存耗尽，用free去查看却是内存还有80G左右。检查系统没有cgroup或者ulimit限制。log如下:
Mar 11 14:45:34 nb81 kernel: [7352493.081026] swapper/0: page allocation failure: order:4, mode:0x4020 Mar 11 14:45:34 nb81 kernel: [7352493.081035] Pid: 0, comm: swapper/0 Tainted: G W 3.5.0-23-generic #35~precise1-Ubuntu Mar 11 14:45:34 nb81 kernel: [7352493.081038] Call Trace: Mar 11 14:45:34 nb81 kernel: [7352493.081040] &amp;lt;IRQ&amp;gt; [&amp;lt;ffffffff8112d1b6&amp;gt;] warn_alloc_failed+0xf6/0x150 Mar 11 14:45:34 nb81 kernel: [7352493.081065] [&amp;lt;ffffffff81139a51&amp;gt;] ? wakeup_kswapd+0x101/0x160 Mar 11 14:45:34 nb81 kernel: [7352493.081071] [&amp;lt;ffffffff81130ffb&amp;gt;] __alloc_pages_nodemask+0x6db/0x930 Mar 11 14:45:34 nb81 kernel: [7352493.081079] [&amp;lt;ffffffff815c80df&amp;gt;] ?</description>
    </item>
    
    <item>
      <title>换了一个服务器</title>
      <link>//blog.shell909090.org/blog/archives/2590/</link>
      <pubDate>Fri, 07 Mar 2014 15:51:21 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2590/</guid>
      <description>上一家服务器的质量太差了。价钱贵，响应慢，还经常服务不可用。忍无可忍，换了东哥的虚拟主机。反正我只支持一个blog。
大家可以用新地址访问我的blog: http://blog.shell909090.org/blog
希望没什么别的问题。如果有的话，可以发我email，或者通过twitter联系我。我现在已经不怎么上微薄了，切切。
PS: 不知为何，我这里发出去的同步到twitter没有经过短链接缩短服务，导致twitter上和facebook上的新文章通知都有问题。</description>
    </item>
    
    <item>
      <title>移动设备的未来预期</title>
      <link>//blog.shell909090.org/blog/archives/2571/</link>
      <pubDate>Thu, 06 Mar 2014 16:38:47 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2571/</guid>
      <description>相机 低端数码相机估计会死绝。高端相机可能会内置一点存储，并配置近程传输和控制能力。
很简单，低端相机能做的，手机能做个八成。但是手机随身携带，低端相机可就不一定了。在对比之下，有多少用户愿意再额外的花个几百大洋弄个专门的相机。还得经常维护电池，存储卡，导入导出照片呢？而且考虑到随着技术进步，手机的照相能力能够越来越接近低端相机。这部分市场利润只会逐年下降。
相比起来，高端相机的成像效果，目前手机还是无能为力的。而且没有重大技术突破的话也做不到。但是高端相机往往有个共同的缺陷——成本太高，更换速度太慢。如果买了一个4000-6000的相机，很少会在一两年的时间内就把他换掉。这导致相机的附设功能落后，软件功能严重脱节。往往好容易在相机里内置了微薄，结果现在用户都想用微信了。
解决这个问题的方案就是用手机作为相机的控制和存储。一般手机的显示屏比相机的更大更好是常识。如果相机可以和手机联动的话，相机可以省掉一块大幅高质量显示屏，改用小屏做一般性的展示。还可以用手机的触控技术提供更好的操作。省掉大容量存储，而且还可以即拍即发，数据同步/分享，而不用导入导出。
看起来最像的是蓝牙，但是2.0的速度太慢了，只有250KB/s多。一副好点的照片最低5M，需要20s传输时间，等不起。3.0的速率上升到2MB/s以上，大约是2s-3s，基本没问题。4.0更快，功耗更小。
无线局域网(wifi)技术的速度很不错，即使是11g也有2.2MB/s的传输速度。手机上虽然普遍不快，但是1M/s-1.5M/s的速度绝对没问题。一张图片3s左右完成传输，也可以接受。而且好处是，目前的手机大多已经支持11n或者开始支持。11n的网络速度可以达到10MB/s，传输40M的原始照片也只需要4s。问题是，wifi为了使得两者可以互相传输，必须将其中一个配置为AP。这样一来手机连接其他AP上网就会受到限制，这大大限制了他的应用。不过随着无线网络技术的发展，AP可能变得不那么重要。
目前从google的搜索结果来看，wifi比蓝牙拥有更多的搜索结果。
存储 从通用性存储卡的价格来看，16G的普卡已经到了百元以内，基本谁都玩的起。再往下怎么玩？加大存储对移动设备来说用处并不大。目前移动设备上面存储最大的无非是音乐和图片。8G可以存储1500多张高质量照片，或者同数量的音乐。我想一般人手机上要再存储这个数量以上的数据，也不大可能。
要说在上面存一堆历史照片或者音乐库什么的，这是拿移动设备当数据库玩的思路，边际收益很低。当年苹果就拿硬盘把mp3做成了音乐库，效果很不错。不过后来历代别人就没这么玩过。既然我们可以把大头保留在电脑上，把热数据放在手机里。在手机里保留所有数据的意义就不大。是个玩法，但是不足以驱动存储卡升级的需求。
移动存储要再玩size，只有等视频技术了。8G的存储只足够20小时的高质量视频，这还是高压缩格式。换算成美剧的话大概刚刚够放下一季的量。加上音乐和照片，差不多够驱动主流存储升级到32G或64G的水平，也就是两三年的功夫。
再往后，存储就没什么玩头了，就算是用录像功能录上三五个小时的视频（这是目前电池的极限），无非也就是2-4G的空间而已。从size上说，32G的卡足够终结一个世代。除非碰上有些极其消耗存储的杀手级应用横空出世（你也知道了什么情况下可以买入这些存储生产商的股票）。
另一个玩法就是速度。目前的吞吐速度在4MB/s-10MB/s之间，而且主流都是4M。对比一下网速，你大概就知道为什么手机的无线速度始终上不去——再快卡的吞吐就是个问题了。未来的存储可能优化到10MB/s的速度，这刚好比11n的普遍网络最高速度（大约9MB/s）更高一些。再高目前传输也解决不了。所以看起来存储暂时不会成为关键。
电源 目前移动设备的核心全部集中在电源上，核心问题在于电池技术不受摩尔效应的控制。
以手机来说。nokia的黑白机一次充电可以用一周，到了android智能机都是论小时的。不是电池没长进。实际上无论是可靠性，单位质量储能比，还是性价比，今天比起当年的电池都有相当提高。但是移动设备的能耗也随之上涨，锂电池已经越来越不敷使用，成为逐步上涨的移动设备电力消耗的瓶颈。
更让人绝望的是，锂离子电池什么时候发明的？1992年实用化，大规模使用大约隔了10年的时间。如果我们今天（2013年）希望使用什么升级技术，那他2003年就应该实用化了。问题是，我们并没有看到有这种技术。
另一项有望得到应用的技术就是快速充电。虽然电池的续航能力无法提高，但是目前的充电功率只有5W。这个功率完全可以提升到50W（比普通笔记本的电源功率略低），或者150W(和低功率的台式机持平)。如果用10倍的充电功率来换取10倍的充电速度，将2小时完成的充电换为6分钟充电50%。或者更激进的，在2分钟内充电50%（150W功率），我想电池的充电就会容易许多。
其中一种解法就是超级电容。目前超级电容事实上是一项颇为成熟的技术，但是成本高，能量密度低，和锂电池相比并没有优势。要能够缓冲锂电池所需能量同量级的水平，缓冲器的大小比锂电池本身还大。所以在大幅改进前用不上。
不过让人燃起希望的是，目前的纳米线锂离子电池的质量能量密度已经达到2.5以上（普通锂电池大约是0.5-1不等），而且可以高速冲放电（比普通锂电池快的多）。这项技术2008年看到的报道，按照预计，有望在五年（2018年）后采用。届时同样质量的电池，续航能力可以高达目前的5倍。android设备有望续航能力重新按天计算。
网络 目前的主流网络还是EDGE/WCDMA技术。TDS-CDMA完全成了个笑话。确实有不少基于他的产品，但是最好的手机生产商完全不考虑这项标准。这导致顶级的手机，顶级的手机用户完全不可能用这种网络。你见过买了Iphone还在用移动卡的么？基本TDS-CDMA就被当作上网卡和合约机用了。
下一代技术基本是4G了。什么概念？静态速率1Gbps，和千兆以太网相当，比wifi还快。问题是中国在4G上又扯淡，用的是LTE-TDD(TD-LTE)，而不是LTE-FDD。参与联盟的人倒是不少，可是最终结局如何还是难料。
上面还不是主要问题。主要问题是什么？费率！3G时代忘记关流量还能卖个肾，4G时代忘记关流量卖房都不一定管用了。10多年来，官方明面上的网络费用只是从1k一分(10元1M)，降低到1元1M。当然，背地里打折下来，网络费用基本在35元1G，或者更低。而有线网络的费率呢？我们按照1/10的总带宽用量来计算（现在很多人拿网络看电影看视频，平均每天2.4小时的满流量一点不多吧）。每G价格42分。。。
所以，移动网络价格降到5元/G以内前，是不会对有线网络构成冲击的，无论3G/4G。即使有，也是在特定场合，而不是总体上。作为对比，台湾数据流量价格折合人民币大约是8元/G，所以台湾用移动网络的人就多很多。问题是，台湾的有线网络也更便宜。。。
电话 总体趋势上说，电话和短信被软电话和消息替代是常规趋势。说的更通俗点，就是不再打电话和发消息，改用QQ现场通话和发消息。
这很好理解。软电话的成本要比电话更低。一分钟电话大约是10分，换成数据流量的话能够传输2.9M数据，合50KB/s左右。而5-10KB/s就可以提供非常不错的通话质量了。
问题在于两点。首先，编解码，数据传输会比直接传输更加的慢。而且在没有QoS的情况下，软电话的抖动非常大。你说的话到达对方那里的时间可能比以前长，而且可能变动幅度异常的高。
然而大多数情况下（主要是闲聊），对语音质量的邀请并不那么高，反而对价格非常敏感。这种情况下软电话就更有替代普通电话的趋势。我和老妈打过数次语音电话，除了手机耗电量高点，有的时候突然会听不清外，也没有什么特别的感觉。
于是你就大概能猜到移动通讯供应商网络为什么不能降价。10KB/s的速率，35元/G的价格，一分钟大约是2分。而移动通讯的大部分套餐里面，一分钟电话的价格都是10分。所以当网络价格低于175元/G的时候，软电话就有更大的趋势替代电话。如果价格降到17.5元/G的时候，软电话价格只有电话的1/10。移动的台面价格是1000元/G，而台面下价格则远远要低，正是因此。</description>
    </item>
    
    <item>
      <title>昆明事件的几点补充（一）</title>
      <link>//blog.shell909090.org/blog/archives/2569/</link>
      <pubDate>Wed, 05 Mar 2014 17:13:32 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2569/</guid>
      <description>这绝不是一个悲伤的个人所能做出的事情 因为已经超出了个人能力的极限。
在大陆这些年，看过不少充满凶戾的事件。拿刀冲进政府机关砍杀的人，冲进幼儿园砍杀的人。但是我从未见过，或者听闻过有数人，拿刀在人口密集区域无差别砍杀。一方面这不会给人带来任何的好处，另一方面则是实施太难。
不会给人带来好处，就不大会有人想做。人的本性都是趋利避害的，除非发疯一样的不计损益。一个人可能发疯（我们也听闻过不少这样的疯子），两个人就很难了。一群人同时发疯，还能这么有效率的进行杀戮。你不如说是我疯了算了。
另一方面，大陆现在禁止民众持枪，菜刀已经要实名购买。一群维族人，跑到非聚居区的昆明去，本身就够扎眼了。居然还能有效率的搞到数把凶器，同一时间发起进攻。你觉得这像是某个个人或者小群体能够做的到的事情么？如果任何个人或者小团体可以轻易做到，你真的能说维族被管制和歧视么？
凶手是维族不等于凶手是新疆分裂分子 大陆官方的措辞是，“根据现场的证据”，这是新疆分裂分子所为。这事说的不明不白，颇惹人怀疑。我有位推上的朋友是医生，有同事参与当晚抢救，也听了不少小道消息。当事者的说法很直白，“一看就是新疆人”。当然，我觉得他想说的是维族面孔。所击毙的凶手，将来也是要有照片画像之类证据的。所以我倒是对行凶者是维族没什么怀疑。
但是是不是分裂分子所为，这却不大好说。因为大陆官方拿到消息的第一处理反应肯定是往新疆独立运动的人身上推。一来这帮人确实是维族，二来这帮人明显是有组织有计划。维族里面对政府不满，对汉族不满，有能力实施策划这起事件的，也就那么多人。就算将来有充足的证据说不是，这个推论也不是说不过去。
问题是能不能以此盖棺定论呢？很难说。捉贼捉脏，捉奸成双。没有任何其他旁证的情况下，我们自己心里认定是无妨，拿来要说服他人总是欠了点什么的感觉。常规情况下，案子往下查就是了。偏偏大陆这里的案子又是出了名的不公开透明。自从事件发生后，真相就再也和你没有关系了。后续抓到的犯人？可能是地方为了交差搞来的。本来没联系，可以打出联系来。问题是，大家都知道你会这么搞的时候，明明是真的，却没有人信了——这就是“狼来了”的故事。
无论凶手是谁，必然都是个小人 任何施行袭击的人，恐怖分子也好，心怀恨意的个人也罢。基本的一点是，我的行动是我对某些事情不满的结果。我杀人，是为了达到我的目标，而且我要让你知道这一点。同时，我也承担这一行为的后果。所以你可以看到很多组织宣称对XX事件负责（当然，也有很多事情跟不不是他干的，非往自己身上扯的乌龙事件）。此所谓，不教而殺謂之虐。
问题是没人宣布对此事负责。
世维会发言人说，这事不是我们干的。大陆官方说，就是你们干的。我擦，女王怀孕了，这TM是谁干的？
不知大家有多少人看过“竹林中”这部小说，这部小说出自小说集“罗生门”。后者想必是家喻户晓。多个当事人，每个人都为了自己的利益而描述不同的客观，最后导致无法还原出一个真相来。
好吧，我也不知道谁干的。但无论是谁，从不承担其后果来看，必然是个小人。
个人觉得大陆官方自导自演的可能性不大 确实，这两天正好在搞加强管制。弄这么一出确实非常有利于大陆官方对新闻的管制，军警的运用。从最大的受益者就是第一嫌疑犯的角度说，这么怀疑没错。不，或者我们得说，对官方的阴谋论的怀疑是必要的。只有这样我们才不容易受到愚弄。
但是我个人分析了一下后，基本排除了这点。因为官方的损失大于收益，而且有未知的风险。
维稳固然要靠政府，这确实加大了对政府的依赖，可能给政府更大的权力。可是对政府是否能成功维稳的信心伤害也是很大。目前大陆政府已经做了常态化的国道检查，地铁安检，大规模城管执法，连菜刀都已经实名制了。昆明大屠杀让无数人质疑，大陆警方是否有能力保护民众的安全，那些严苛的条例是否只是针对善良的民众。
如果这个疑惑不解除的话，对官方的统治是很不利的。人人怀疑你是只纸老虎的时候，各种事情就会层出不穷。然后官方就会进一步疲于奔命。
要验证也不难。马上就是两会了。如果这两天有人提案加强对民众的监管（这是照例有的），包括禁止持刀，警察自由调动等。提案严谨，考虑周全，看起来就不像是这两天想的出来的。那值得怀疑的可能性就大大增加了。如果连像样的提案都没有，全是陈词滥调，那只能说官方也被打了个措手不及。
恐怖主义不等于对抗暴政 恐怖主义和对抗暴政的区别在哪里？关键是对对方的职能机关动手还是对平民动手。
军队和警察天然的就是暴力和杀戮机关，因此要对抗对方的暴力机关，杀伤是无法避免的。然而针对没有暴力伤害能力的平民，而且特意只针对对方的平民，这还是让我们很难接受——基于同样理由，杀害投降后的战俘一样是一件不名誉的事情。当然，我说的都是近代的事情了。你要和我讨论成吉思汗当年破城后屠戮三日的事情，我只能说你是在耍流氓。
所以呢？那些举出美国对日本扔原子弹，以及賽德克巴萊例子的人。你们说的没错，这些人是毫无异议的杀人犯。他们知道这一点，而且为了种种理由，也实施了攻击平民的行为，并承担了这一后果——这点是他们和本次幕后主使的决定性差异。
不要以为不对民众动手多么神圣，在战争的时候要不对民众动手着实不大容易——尤其是有人打着游击战的时候。路旁对你笑的孩子，也许下一秒就会拿出火箭筒。这种情况下，要保证不误伤平民着实不大容易。只是打赢了，这些事情就会大事化小。即使上了军事法庭，只要没有确凿的，“只特定针对平民的”的证据，多半也不能如何。可是若打输了，这事情就会小事化大。若不宣而战，躲躲藏藏不敢以真面目示人，不是鼠辈是什么？
另外，特别提出敝政府在新疆作为的朋友——你说对了。虽然我们的政府不承认，但是他确实需要承担群体性的杀人责任。而且这不只是针对少数民族——你以为汉族情况会比较好么？错。汉族的情况多半要更糟。
把人逼疯后，就没法再坐下来好好谈了 很多电影里面，总会有个带头人物，说要让对方知道自己的民族不可轻辱，然后以少打多。当然按照剧情需要会有不同结局，一般来说不带主角光环的大部分都悲剧了。
如果是战争，这样没什么问题。但是如果是屠杀对方平民，这就是抽风了。因为屠杀平民对施行方没有直观的好处。对方的军事力量还在，而且还更痛恨你了。要产生收益，至少要做到白起坑杀赵国四十万人那样，一次性摧毁对方的生产和供给能力。按照大陆的规模，大概要几亿人吧——那会是怎样的一场惊天屠杀啊。而不产生收益，我们就只有认为你疯了。因为只有疯子，才会做一件损人损己的事情。
而一旦被打成疯子，后面就没法再坐下来谈了。没有那个政府针对这种情况还能给出承诺的。就算政府不被愤怒的民众吞掉，对方也不敢相信民众会放过他们。当彼此双方都认同到这一点时，双方除了你死我活外没有什么太好的结局。大部分情况下都是一者输了，然后胜利者安排一场结局。
所以呢？你认为我在说我们一定要坚决打击恐怖分子么？
我是在说不要随便把人逼疯。
关于美国新闻定性的反面声音 这次争论比较大的就是美国主流新闻，对恐怖分子打引号，因而被斥责为阴阳怪气。我这里收集了两个相关的反面声音，说明为什么。
恐怖分子为何加引号 外媒对中外两起事件新闻用词对比 </description>
    </item>
    
    <item>
      <title>昆明大屠杀</title>
      <link>//blog.shell909090.org/blog/archives/2566/</link>
      <pubDate>Mon, 03 Mar 2014 15:35:06 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2566/</guid>
      <description>昆明火车站一伙暴徒手持砍刀无差别杀伤群众，目前已知死者29人，伤者143人。
这大概是对民众的无差别恐怖袭击首次发生在汉人密集居住区域（金水桥恐怖袭击的目标是金水桥，民众伤亡只是顺带的牺牲品。而本次的标的即为民众）。为所有无辜受难者祈福，愿伤者早日康复，死者早日安息。
这事本没什么好多说的，却有太多话要说。当然，如果我把我要说的都说出来，也许就看不到明天的太阳了。
不可对平民动武 即使在战争中，对无反抗能力的平民实行屠杀依然是反人类罪。何况这不是战争，所杀之人和行凶者并不认识。如果这样的行为都能合理化，那天下就无不可杀之人了。如果您不认同这点，而和我扯他们被受到了多么不公正的待遇——如果您是试图解释原因，我理解这点。如果您是为其合理性辩解，请尽早离开这篇文章——他不会让你高兴的。
下面是推上某文，窃以为甚为精辟。
昨天和朋友聊，要搞独立搞独立去，拿着平民砍这是种什么逻辑啊？脑子严重进水了。朋友说，你看那些对社会不满的去砍幼儿园，烧公交车的，那些不满医疗中去砍医生的，那些因为航班延误去打工作人员的，那些因为钓鱼岛去搞自己同胞的，因为奥运抢火炬而打去家乐福买东西的平民，基本上都是这个逻辑。
和金水桥事件的差异 金水桥的目标是桥，是为了形成影响。民众伤亡只是附带结果。根据wiki上的报道，攻击者在攻击之前甚至向民众鸣笛。当然其本意未必是怜悯，但是足见其标的不是人员伤亡。 昆明大屠杀的目标就是人员伤亡。攻击者从一开始，目标就是尽可能多的造成人员伤亡。 金水桥事件官方严密封锁新闻，而昆明大屠杀则并没有那么严密的限制。这种区别可能来自于官方的形象控制——昆明大屠杀更有利于官方博得同情，而金水桥则更容易牵扯出对犯罪者的怜悯。 恐怖分子的目的 你可以首先阅读这篇文章，我基本认同里面的观点，而且说的比我想的更加透彻。
简单来说，就是一群人中的一小部分人，自我定义了一个群体（例如维族，伊斯兰教徒），然后对国家中的其他群体的普通民众进行无差别的杀伤。于是社会的主流群体会对整个群体的整体产生厌恶，而不仅仅针对这一小部分人。对整体的厌恶会使得这个群体边缘化，生存条件变差，贫困，极端，从而产生更多的恐怖分子。
当这种力量足够强大的时候，甚至可以夺取国家政权。有兴趣的可以参考这篇文章。
怎么看待非恐怖分子的少数民族 如果你认同“任何针对无辜平民的集体屠杀都是不可接受的”的话，那么毋须多言，显然不可能支持对少数民族的人平民实施过于激烈的政策。包括先行射击，加紧审查，种族隔离。
另一种逻辑是认同自己的种族身份。即，昆明火车站会使得我愤怒，是因为我族人受到了伤害。
个人认为这种逻辑是危险的。将不同的人划分不同种族，并且在种族之间对立和报复，其结果就是战争和流血。你们可以骂我懦夫，不过我讨厌战争，我怕死。
而且从公平论角度来说，这种逻辑不公义。如果你依此逻辑赞成对其他民族的隔离和对立，显然就没有立场指责其他国家对你的孤立和对抗。
当然，更深刻一点的理由会比较容易被当作扯淡——民族主义更容易被煽动，操纵和利用，而我最讨厌被人摆布。
现实 但是悲哀的是，恐怖主义已经得逞——我们成功的被挑起了恐惧感。这是第一次汉人密集的城市（而不是少数民族聚居区），发生的针对民众的无差别袭击。这为我们敲响了警钟。我们一直以为在党的治下，虽然防民甚严，但对于良民来说至少安全无虞。这事告诉我们，即使在你认为“安全”的地方，也会发生一些想不到的事情。
我们不知道恐怖分子的下一个目标，在地铁制造爆炸事件？在广场制造恐怖袭击？甚至伪装成快递员进入居民楼逐户屠杀。
所以，我们每个人都在恐惧。我们不知道哪些维族人是好人，哪些是坏人。我们只能盲目的把所有维族人从身边驱离，剥夺他们融入我们的可能性。我们不会去新疆饭店吃饭，不会正常的和维族人交往，甚至在街对面走来一个维族老人时面露恐惧。
于是，维族会被逼返回自己的家乡——如果他们有的话。更多的人工作艰难，更多的人无路可走。于是肯定会有人——当然多少难说——加入恐怖分子，或者至少，对抗政府。
现在的事实就是。两拨本来理性的人被一拨疯子挑拨的互相残杀——而且他们还成功了。
囚徒博弈的问题在于，即使我们都知道这样是双方都输，而有人躲在矩阵后面偷笑，我们也只能无可奈何的选择最差解。
种族是人类流血的伤疤 关于种族问题，我们可以看看最近的乌克兰，或者看看美国和基地组织。这些都是种族问题上升到国家层面的结果。实力接近的就是种族冲突，实力差的比较远的，弱势的一方几乎无可避免的就会发展出恐怖主义。恐怖主义确实是个很恐怖的东西，虽然弱势者无力给予重创，但是却屡杀不绝。强者疲于奔命，草木皆兵。
为什么 种族和宗教是人对自己身份认同的凝聚，人们总是喜欢和自己容易理解的人打交道。当你见到一个人，他喜欢吃什么，看什么电影，喜欢狗还是吃狗，疼爱妻子还是虐待老婆，你都一无所知的时候。甚至连他偷偷在下面嘀咕什么你都完全听不懂的时候。要和他顺利交际是非常费力的。随着交际圈子的发展，不同的圈子就会被打上不同的印记，不同的圈子就开始对抗。
少数民族政策 我和少数民族的交往不多，有几次是亲身经历了朋友的某些事情，其他则是偶然看到和道听途说。
目前的少数民族政策有很大倾斜，但是双方都对倾斜不满意。很多倾斜甚至只对为非做歹的人有所帮助，却会招致其他种族的不满。例如藏族。原则上藏族是可以挎刀的。可是悖论的是，藏族离开自己的土地，到西藏其他地方住旅馆，要先开上N多证明，办理N多手续。其繁琐程度远远超过汉族去西藏旅游，甚至超过汉族来上海办居住证。朋友曾私下和我抱怨，这么管法安能不招致怨恨。我深以为然。在这个前提下，藏族“挎刀”这个特权根本是个笑话。要是在汉族大街上穿藏袍挎把刀，只怕不到10分钟就有警察前来盘问。
再说让很多民警都头痛的新疆人抢劫盗窃问题吧。有兴趣可以参考一下这篇文章。里面提到一个很神奇的事情是，维族人盗窃，警察往往无可奈何只能放人，生怕和民族问题扯上任何关系。相反，若是维族人正常工作，到汉族这里来出个差，或者想旅游一番，却是困难重重。当年七五后两个月，一位新疆的朋友奉公司令去沈阳出差，从下午4点到晚上9点，硬是没有一家旅馆敢于接待。最后无可奈何，打电话回公司，硬是找了偏僻位置的公司招待所住了下来。
如此倾斜，岂不是令良民无处谋生，而歹徒如鱼得水？
结论和呼吁 恐怖分子必须死，无论其成因是什么，以杀伤平民为目标或者手段的恐怖主义是不会得到任何人的谅解的（除了傻逼）。 不要因此敌视新疆人，维族，或者穆斯林。您有自己对安全的考虑可以理解，但是请不要过激，不要牵连同样无辜的维族平民。 民族之间必须平等，民族政策的诡异倾斜应当得到纠正。 互相之间的了解和认识是消弥民族矛盾的最好方法。有功夫的话不妨认真的学习一下维族，伊斯兰教知识。 </description>
    </item>
    
    <item>
      <title>余额宝</title>
      <link>//blog.shell909090.org/blog/archives/2564/</link>
      <pubDate>Thu, 27 Feb 2014 10:37:54 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2564/</guid>
      <description>最近我把大笔钞票转到余额宝和理财通去了。
说是大笔，其实也还好，只有五位数而已。毕竟互联网系统的安全性和保证能力摆在那里，太多钱也不放心。而且为了安全性，两家按照获利能力分别配置，都各自存了一部分。
其实这样挺好，以前这部分头寸必须在银行存活期。1W一个月利息才3-4元。目前存支付宝里，使用上和活期没有区别，一个月利息50。当然，等shibor降下来也许就没这么多了，但是30还是有的。至少翻了10倍，一顿饭的钱就出来了。何况我转过去的还不止1W。
以前之所以不敢这么做，一方面是利息不算太高，好处并不直观。但是最重要的一方面是使用上不算便利。短期头寸不像长期投资，可以有一定的赎回时间。往往这头要付信用卡呢，那头有人结婚，又刚好感冒要看个病。三方一合，没两三个月的平时开销，很可能哪里就调不过头寸来。这时候难道还出去借钱么？但是三个月日常开销一放，加上自己懒，有的时候有点资金不及时从银行调出来，往往就这么几万躺在银行里走活期利率。
现在支付宝打通了相当多的支付渠道，结婚吃饭AA交水电煤，样样可以支付宝。使用上又是T+0，所以银行里面躺个几百应付一下就行了。要是余额宝取出到银行的到帐时间是2小时以内，这几百我都不放。
好玩的事在于。我突然想到，余额宝为什么能够拥有这么高的回报？是因为银行需要高息借钱。货币基金里面很大部分钱都去了同业拆借。银行为什么需要高息借钱？因为没有足够的钱。为什么没有足够的钱？因为本来银行可以利用的低成本活期头寸都去了余额宝了。这就是通胀和通缩的放大效用。
所以从理论上说，用余额宝的人（或同类产品）越多，其利息越高。要是银行没看明白这个原理，盲目推出类似产品。推出的越多，利率抬高越多，只会把自己累死。但是看明白也没用，别人都推自己不推，只会把自己饿死。
当然，事情并没那么复杂。国家要管，只要快速调整基准利率，使其逼近同业拆借。或者大量印钞（或者回购）稳定shibor。哪种都可以废掉余额宝。鉴于印钞往往有很大范围的副作用，因此加速基准利率变动才是正道。当然，基准利率变化越快，就越接近利率市场化。而市场化的利率比恒定利率难监管的多。
另外一点就是，银行为什么拼不过支付宝？因为银行为了应付活期资金调度头寸，需要大量的准备金。准备金无法生息，无疑降低了资金的利用率，摊薄了回报。而支付宝本身的运营模式就会产生大量的沉淀资金。当资金在从买家到卖家的发货期的时候，是必然沉淀的。这部分资金产生了形同准备金的功用。</description>
    </item>
    
    <item>
      <title>利用cgroups隔离多个进程资源消耗的尝试</title>
      <link>//blog.shell909090.org/blog/archives/2561/</link>
      <pubDate>Wed, 19 Feb 2014 10:14:23 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2561/</guid>
      <description>setup Add to /etc/fstab.
cgroup /sys/fs/cgroup cgroup defaults 0 2 Then sudo mount -a.
Change directory to /sys/fs/cgroup/. Use mkdir to create a new group, and initalize it like those.
echo 0-3 &amp;gt;&amp;gt; cpuset.cpus echo 0 &amp;gt; cpuset.mems Without those two step, next operator will failure.
echo 0 &amp;gt; memory.swappiness echo 52428800 &amp;gt; memory.limit_in_bytes Set memory limit 50M, and forbidden swap.
python test code import os, sys, time, random, string def main(): l = [] random.</description>
    </item>
    
    <item>
      <title>长白山旅游——第四天</title>
      <link>//blog.shell909090.org/blog/archives/2559/</link>
      <pubDate>Fri, 14 Feb 2014 17:50:57 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2559/</guid>
      <description>今天纯滑雪，就是滑雪，只滑雪。
从10点不到一点进场，到下午两点20离场，大约滑了4个半小时，没吃午饭，也不觉得饿。这次总计滑了有七个半小时，换成银七星的价码大约要600多了。可惜银七星三年多了还在装修不开门。。。
下面我简单说一下滑雪的注意事项吧。
不要以为有教练就没事了，自己的安全自己小心 晚上回上海的时候，看到一个小孩坐着轮椅回去。一问，滑雪时撞防护栏结果小腿骨折了。天冷也不显肿胀，家长小心，拉到抚松去照了一下X光确定是骨折了。要没确定硬用力，大概就会移位了。
问题是，这倒霉孩子当时还是教练跟着的。
所以不要以为有教练就万事大吉了，也不要以为滑雪是很安全的运动没事的。滑雪确实比溜冰安全多了也舒服多了。溜冰的时候一跤摔倒屁股痛半天爬不起来，滑雪就算摔倒也是软软的，不怎么痛。可就是这种认识容易出事。去溜冰的，技术不高的速度放的都很慢，小心翼翼的滑。滑雪的往往觉得会了点就开始加速，而且最要命的是，溜冰不主动用力就不会加速。滑雪相反，不主动减速就一直在加速。没控制好的当场摔了算好事。控制的住的加速到几十公里的速度撞上什么东西——你看看人家舒马赫。
反正我和保安聊的时候，他们说已经见惯了。蹦蹦跳跳过来坐着轮椅回去。至于手摔伤什么的更是常见。贝壳自己会摔的，只摔了一次，拉伤肩膀肌肉，到现在后脖根还有点不舒服。滑雪中心的工作人员态度则更加严谨，头盔带好才让借雪具。不戴头盔禁止入场。
滑雪的几个注意事项 首先是刹车，不会刹车的禁止到有坡度的道上练习。我们那个场地有个很平缓的坡道，很适合初学者试刹车。
刹车的时候，两个脚内八，膝盖向内脚跟外撇。可是很多人很奇怪，我内八了阿，为啥还是刹不住。
看过滑雪的都知道，左右之字转向可以减速。所以实际上把雪板横过来就可以刹车了。但是副作用就是会转向。如果不想转向的，两个脚就需要分别向两个方向横。理论上外八也是可以刹车的，但是如果下坡外八，你需要很强的力量将向外分的两个雪板拉回来，否则就要八字开。拉回来的时候又要注意中心，不要大头向坡下摔倒（翻跟头）。所以一般都是内八刹车，这时膝盖顶在一起，人的体重自然变成向外的力量分开雪板。外八刹车一般常见于倒滑（是的，就是教练顶住你时候的姿势）。我曾见一个教练顶住一个人的力量，后面又撞了一个上来，照样顶住（三个人的体重加一个人的冲力）。所以方法正确的话，刹车很可靠。
刹车的核心在于内侧（两脚中间）的雪板比外侧低。如果你内八了，但是两脚还是平行的，那是刹不住的。
这事情的悲剧在于，无论别人怎么说，都很难一次搞懂。一般都是要摔个一两次才能学会。
所以第二个要点就是摔跤。
首先，控制不住就直接立刻往地上一躺，不要等加速到顶点再撞防护栏。我在坐牵引的时候，亲眼看到一个妹子控制不住，眼睁睁的冲撞到防护栏上。左脚雪板直接插入防护网内，人被以左脚为轴整个甩飞出去。医务工作者当时就跑过去了。下到底再上去的时候，看到妹子的老公扶着，基本确定左脚大腿脱环了。这已经算是幸运的了，想想上面那个撞护栏撞的腿骨折的孩子。
其次，摔跤最好的姿势，是侧摔。向前倾会加速，向后会变成狗拉爬犁（初学者区域满地都是爬犁往下滑）。一般来说最差的姿势是向后——因为除了坚持到底你什么都不能做。向前的还可以试试转向或者侧摔。
侧摔第一个要点，是头朝坡顶，两个雪板垂直于坡度降线。这样会减低你的速度，使得你不继续加速。而且万一有碰撞，也是先撞雪板再撞脚，保护你的头部。
然后其实就没什么要点了，护住头脸往地上一躺，没意外的都会直接停在坡上。贝壳唯一一次摔倒就是侧摔。由于速度没控制好，眼看要撞防护栏了，知道撞不得。强行转向失败，侧摔摔倒。整个人在地上转了两圈才停下来，雪板还在脚上，肩膀有点拉伤，但是没有其他损伤。手一撑起身就滑出去了（当天下坡20多次，也累了）。
但是摔跤的重点在于摔完后——你需要很快的用雪杖顶一下你雪板上的锁，脱下雪板，然后尽快跑到雪道边缘。一来是礼貌，给后面的人让出路。其次你也不知道上面下来的人会还是不会。万一他一受惊吓撞到你——这次可是他的雪板撞你的脑袋了。
其次是脱雪板的方式。很多人摔了之后硬往起站，起来一看脚成180度了（我看到个妹子脚是270度的，柔韧性真好）。正解是上半身着地，脚肯定能够笔直向天。然后旋转到两个雪板平行，再顺着放到地面上。然后肯定能脱下雪板。
另外摔跤了严禁脱下头盔！最忌讳的，就是在雪道中间不脱雪板半天爬不起来，或者傻站着。这个万一被撞了纯粹活该。
牵引道的注意事项 牵引道上的正确姿势，是用一根雪杖往前顶住，一根向后顶住，支撑上半身。然后雪板分开，平行向前，人重心向前，倾斜站住。
为什么？如果你脚不够分开，一旦左右晃动就容易摔出去。而牵引道一旦摔出去就要停下，这时候会突然刹车，没有向前撑住上半身的就要靠小腿的力量了。更悲剧的是，牵引道如果上的人太多，过载会停下不说，而且上面会留下雪水。在被环境一冻就成冰。如果你踩到冰上，雪板是挂不住的，人就会向下滑。万一一滑就变成保龄球了，这个就是个大事故了。所以用一根雪杖向后支撑住以防万一。
另外出牵引道口一定要赶快跑。因为前面的人不走，后面的人什么都做不了，只有从后面贴上去，姿势很尴尬的。贝壳两次被贴成了小龙虾串（虽然前面是妹子，后面可是汉子。。。）。当然，真会的人可以从出口直接跳出去——不过那也是技术到家才行。同理，为了避免这种情况，牵引道上两个人需要间隔一定距离。
雪具和穿戴 雪具其实没啥好多说的。衣服裤子不应该算雪具，自备也可以。当然，要透气（否则运动上去后很闷），保温（否则有的时候牵引很慢，滑雪时间偏短，人会很冷），而且万一摔倒整个衣服被雪水打湿还要自己处理。所以一般都会租借服装。头盔有就穿，没有的话就算了，问题不是特别大。因为头盔主要是防止翻跟头和摔倒后后面的人撞你，作为一个老手这两种情况都不常见，如果是新手最好戴上。
雪具基本只有三样，鞋子，雪板，雪杖。注意我说的都是双板。玩单板的都是老手了，也不用我废话。
鞋子是特制的，基本把脚的运动方向限制死了。穿着鞋子是不能踮脚的。鞋子最好穿紧一点，这样控制雪板容易一点，不会有太大晃动。注意，是穿紧一点，不是让你弄双小鞋来穿。
穿的时候，脚尖插进去，用力把鞋舌往前拉，脚就能钻进去。鞋子上一般都是扣锁，两边的一搭，反向一扳就能锁住。这两个动作自己要发力都不容易，所以最好别人来帮忙。如果要自己来的话，有个比较简单的方法。一般搭扣都是两个，可以先把其中一个扣住一格，锁住。这样鞋子两边就会被这个扣锁拉紧，你就可以从容的扣另一个。然后再把原来那个锁紧一两格。
最后，专门裤子的裤脚管往往是内外两层，内层是穿到鞋子里，外层罩在外面，拉上拉链扣好。
雪板两只，注意是有手向的。先把后脚跟的扣锁按下去。然后脚尖点进雪板脚尖的卡锁里面，后脚跟对准一踩。后脚跟的扣锁就会弹起来，前后的卡锁都会和雪板卡住，整个人就锁在雪板上不会动了。这就对了。
脱雪板的时候，用手或者雪杖点一下后脚跟的扣锁，整个脚就脱出来了。
注意在坡上重新上雪板的时候，雪板要垂直于坡度降线。如果雪板平行于降线，人还没上去呢就会向下滑。就算能用脚控制住滑动，也很难穿上。或者人好容易上去一只脚，往下滑了，这更悲剧。</description>
    </item>
    
    <item>
      <title>长白山旅游——第三天</title>
      <link>//blog.shell909090.org/blog/archives/2556/</link>
      <pubDate>Tue, 11 Feb 2014 10:37:18 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2556/</guid>
      <description>今天去长白山天池玩，总的来说比较坑爹。
早上跑出来，大概要开两个小时。路程还好，不好的是，导游居然连续说了两个小时的东北特产。。。
最后还特意强调了一下天池的寒冷，我大概猜到后面会拉我们去租衣服。果然，景区外一个租衣服的点。我租了双鞋子，万一上面雪进鞋子里面，也不会让我没得穿。至于大衣邦腿，去你妈的吧。另外我特别说明一点——山上租衣服的和山下的价格一样，都是50。
今天人太多，你们先去看冰瀑布吧 进长白山公园，坐上大巴，我们本来以为是先去天池的。结果司机告诉我们，天池人太多，公园自动分流，你们先得去看瀑布。
瀑布就瀑布吧。下车我一眼看去——啥都没看见。最后看半天，在一堆冰柱子中间看到一条细细的瀑布。看看手里55mm的头，算了，来都来了，还是照吧。
往前走个一公里，到了一个观景台。这个观景台很有特色——他的地板是斜的。准确的说，雪在一边堆积的高，一边堆积的低，于是站上面就会不由自主的往下滑。。。
再往前是一堆温泉泉眼，在漫山白雪间，有一条清澈的小溪流过，而且上面烟雾蒸腾。不过昨天见识了雪乡温泉，这个就有点见怪不怪了。旁边有温泉水煮蛋可以吃。蛋黄几乎凝结，蛋白还是软的。轻轻一吸，蛋黄就到了嘴里。总体来说，味道还不错。
车的情况不确定，能坐就坐吧 下山的时候，我们坐了一辆中巴。结果不知为啥，理论上必须坐下的山路站了两个人。这还没啥，下午的时候，调度给我们派上了车又给我们拽下来让上另外一辆，原因未知。下午的时候有三辆车不发让我们等了10分钟坐一辆有人的车。更夸张的是上面还有个伤员——想也知道，摔的呗。
车的情况简单来说只有两个字——混乱。
见识到了比学校还难吃的午餐 吐槽完了交通来吐槽一下午餐吧，我终于吃到了比学校还难吃的伙食。
我们到的时候，自助餐还没开始准备。所以我拿到的头几分餐食都是凉的。酸菜没酸味，洋葱没洋葱味，肉没肉味。猫咪好歹帮我拿了一份热一点的汤和鱼来，结果鱼还不够入味。不是说东北菜都口味比较重么？这厨师是广东来的吧。
这是唯一一次不需要导游催促的集合——我估计大部分人宁可早点玩好了回去吃点别的。
由于天气情况随时变化，所以猎豹的钱没算在行程里 下午要上天池了，导游告诉我们，上山坐的猎豹的钱没算在行程里面，所以要自负。虽然我估计如果我现在去找，大概有无数地方会写着这个注意事项。可是无论是喵还是我事先都没留意到这点。
来都来了，洗干净脖子吧。
都说师傅的车比较猛，实际上和朱哥的车比起来天上地下。不说扎村乃村，就是珠峰十八道拐就足够甩掉这条路。除了过弯速度比较快，车的扭矩比较大之外，其余没啥好多说。
这边是中国，那边是朝鲜 上天池看了一眼，没想像中好看。想像中一汪碧水，结果现在千里冰封，上面全是雪。下面到底是个池子还是个阿里郎表演场或者根本是个足球场，完全看不清，统统一片白。而且说到雪山的雄伟壮丽，和西藏比起来差很远。不过这里倒是有几点好处。
中朝边境。我想大部分人都无缘见识朝鲜的土地，现在给你见识见识。 周围没有其他的高山，于是有种一览众山小的快感——大概就跟区重点里面年级考试前十差不多。 最后关于冷。确实是很冷。可是主要是冻脸和手指头，护膝大衣不顶事。而且穿的不是太薄的，你忍个一刻钟该照的照完是没问题的。照不完的，我想你的问题不是一条棉衣能解决的。至于还考虑到经常受冷可能以后会留下隐患——你是打算镇守祖国的边疆呢吧。
终于赶上了博物馆，可为什么是闪电 晚上我们送一批人去泡温泉，其余人去博物馆。平时博物馆是5点下班，可8号正常上班，4点关门。至于为什么正常上班的结束时间和平时不一样——不知道。
其实我也不大紧张。导游都讲了两个小时了，就指望这次的购物呢。我还没见过购物点会提前关门的。
果然，到了之后没关门。但是神奇的事情发生了。讲解员以迅雷不及掩耳盗铃之势开始讲解，语速之快连郭德纲也要自愧不如。贝壳的中文阅读能力一直很出色，可是这次完全没有发挥余地。要跟上讲解员的节奏需要的不是阅读速度，而是奔跑速度。
直到出来的时候，贝壳还是满耳朵的——东北有三宝，blahblah和blah。东北新三宝，blahblah和blah。他们能够blahblah和blah，对你很有好处。最倒霉的是，讲解员说的和导游还不一样，结果我一个没记住。在购物点终于迎来了四五个满脸兴奋的导购员，可是他们面前的是一群一脸茫然的大人和小孩。想当然，这次购物点的收银员甚至没捞到出场机会。
上车看到导游一脸不爽的样子。这个你们自己沟通去吧。
开还是不开，你猜 晚饭吃的是汉拿山韩式烤肉。照例说应该挺高级的一家馆子，没想到意外的物美价廉。
——换个说法，就是坑爹。东西倒是不错，服务员严重不足。
我们吃了一个牛肉拼盘，上面写着四种肉任选两种，可是直到吃完服务员也没空问我们要哪两种组合。不过还好，他们总算在我们结帐要走人的前夕把我们一开始要的热水给送来了。
还有牛板筋金针菇什么的。上菜速度挺快的，10多分钟就上来了，连送碳火的服务员都没来得及反应呢。我其实最后没吃饱想加两道，人来了话到嘴边改成了——服务员，买单，结帐。
然后往前走走，散个步，到雪圈公园那里打车回来。不走没事，一走一肚子气。今天雪圈公园居然开了。可是因为我们在烤肉花了太长时间，只开半个小时了。问题是，租雪圈一律30。。。
妈的，明天还是继续滑雪吧。</description>
    </item>
    
    <item>
      <title>长白山旅游——第二天</title>
      <link>//blog.shell909090.org/blog/archives/2554/</link>
      <pubDate>Mon, 10 Feb 2014 10:49:35 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2554/</guid>
      <description>下雪道22次无事，最后一次破功 今天早上一出门，我们就去滑雪。滑雪中心人很多，排队排半天。9点出门，折腾到10点才换好装备。
以前贝壳只在银七星滑过两三次，只会简单的下坡，刹车。而且还不保证每次都能顺利下坡。唯一值得自傲的，大概只有摔跤技术（喂）。大家知道银七星一场只有一个半小时，摔个几次基本就没了。
出了门，暂时有点不适应。前两次滑的比较小心，也比较消耗体力。后面就越滑越快越顺利。到后来，基本大部分时间都在牵引道上。基本每次下坡都能控制速度和方向，正正好好停在牵引道的入口，省去无效的时间。
猫咪滑的也不错，开始的时候撞牵引道摔了一次，但是后来滑的还很顺。就是体力不怎么好，滑到中午12点左右就没体力先回去了。
至于贝壳，保持了连续22次下坡到底无事故的记录。最后一次想了想，既然能控制方向了，试试左右转弯保持速度？结果一个弯没转过来——要撞防护栏了。所以只能中心偏移大一点，然后就摔了。
看看表，已经下午一点了，索性不滑了，回去吃饭去。
从索道上下山很省事 上楼找到猫咪，我们从索道上山观光。这个索道其实直通几个特级下山雪道。只是如果换我们下，雪道就会变成血道了。。。
这里的索道设计很有趣。坐出租到小镇要10元。坐索道不要钱（是的，无论多少次都不要钱），上山观光再坐另一根索道下山也可以到小镇。时间上也没长多少，还能顺道去山上观光一下。唯一的缺点是晚上不开放。
老北京火锅味道不错 老北京火锅是整个小镇点评有评价的餐厅里，唯一没被人猛吐槽的。今天试了试，果然不错。220元吃了精品牛肉，牛舌，牛肉丸，墨鱼，手擀面，金针菇，冻豆腐。两个人都能吃饱。
不过牛肉的费瘦分层很奇怪，而且肥肉一下水就消失了，我怀疑是注脂肪做的。牛肉丸淀粉含量太高，几乎没有牛肉味道。而且服务员给我们下错了单，一份手擀面出了两份。要不是我顺口问了一句，估计就付两份钱了。
不得不说，整个小镇里面的餐饮业很奇怪。有当地特色的餐饮价格比上海还高（你见过100元两位的饺子么？我们还只点了凉菜！），价格平易近人的味道就有点勉强。只有肯德基和麦当劳等快餐连锁还保持了一贯的价格和品质。
温泉一般，只是毛巾受到追抢，而且更衣室里面有人吸烟 吃过火锅，我们去泡温泉。这里的温泉很有趣，是开在雪地里的。人在里面泡温泉，一伸手就能摸到雪。
听起来很好，不错实际上有点问题——浴巾没货。不带浴巾出门试试？以贝壳的体质尚且觉得冷爆了。泡到温泉里面觉得暖和，只要上岸统统皮抖抖。即使雪再近也要站起来一伸手么——啊，好冷好冷——差不多是这个样子。
我们一起泡的一个池里面有对情侣在照相，妹子在那里说，我站起来咯。三二一。然后男生喀嚓喀嚓三张。整个过程不超过10秒——超过估计就能看到妹子的颤抖了。
另一个池里，有一对情侣在讨论什么东西。不过两个人在温泉池里面——吸烟？？！！怎么点着的？啊不对，怎么把烟带进来的？不会是放在。咳咳，问点重点的吧。烟灰缸呢。。。说着妹子烟头上掉下一截。。。
贝壳回去后（你们知道为什么），毛巾终于到货了。在短短的半分钟内又被争抢一空，然后就是屋外人数爆增。不知道他们是不是看到了贝壳刚刚看到的东西。
所以，这种噱头听起来很有趣，实际么——就要看执行的情况了。
而且就算是擦干回去的时候，我也找不到毛巾。问了一下服务员。服务员先问了我是出去还是穿衣服。我说穿衣服。服务员从一个隐蔽的地方给了我一条小毛巾——好吧，看来他们因为没毛巾让顾客穿衣服出门被骂过。
擦干到了更衣室。我去，有个大叔在吸烟。虽然说一头白发慢慢吞云吐雾看起来是挺帅的。可是我说大叔——您能不能换一包不怎么呛的烟。那个味道我在洗澡的地方都能闻到。至于服务员——大概是去解决毛巾问题了。
哪个混蛋说的晚上雪圈乐园也开门的？ 老婆问了一下，据不知道哪个混蛋（她现在自己都不记得了，不过坚持说不是自己的妄想）说，雪上乐园晚上开门到10点。
开你妹啊。我们好容易走过去。发现门口一条告示——不开门。然后只能后天起早去玩了。
然后就是更坑爹的RPG时间。我们的套餐里面包括看一场表演（表演细节后表）。所以我们就致电剧院预约。剧院说现在都6点了，表演7点半开始。直接来吧不用预约了好位置都有。我们很开心的走了过去（从乐园到剧院，对穿整个小镇，大约300-500米雪地。其实剧院就在刚刚的温泉旁边，我们刚刚走过去），结果剧院说，不好意思。如果你们订的是春秋的套票，需要在哪里哪里拿票，然后到我这里换座位。
哦，好，春秋的那家店在哪？
雪圈公园旁边。。。
好，于是贝壳和猫咪就走回刚刚的地方（这是第三次从这条路上走过了），拿到了彩虹的水滴。啊呸，是拿到了票。然后再走回剧院（第四次），换了票，出门吃饭。
小鸡炖蘑菇和猪肉酸菜水饺 不要误会，小鸡没有炖猪肉酸菜水饺。
晚饭本来是去炖锅吃的。结果猫咪喜欢的一锅炖没有。而且只有那个便宜，188。剩下都是2XX，3XX，4XX这种节奏。而且XX你们明白。要是加上我每天单程公交车钱，就会进位。。。
所以我被猫咪拽出来了。
商量了一下，还是去昨天的小吃街吧。那里的水饺看起来便宜很多。
果然便宜很多。24个水饺半斤，猪肉酸菜，只要12。价格只有山珍水饺的一半，量大一倍。可是自古说了，便宜没好货。难吃程度果然也是成正比的。幸好小鸡炖蘑菇味道相当鲜美。我们花了50多点就吃了一顿不错的晚餐。下次点个好点的水饺也许就能感受到高性价比的优势了。
我们看了一场奇葩的表演 晚上这场表演是最值得吐槽的了。风格有点像我们在成都看的川剧变脸传奇，但是更加奇葩一些。
首先是一个采参人，跌入时空隧道，穿越回了——大清朝？
又穿越，你们打算把大清朝的所有阿哥都配上现代女汉子么？我本以为这已经够奇葩了，谁知道只是个开始。
第二幕，一群穿着溜冰鞋（不是直排，就是人民广场卖玩具的小贩经常滑来滑去那种）的大臣和一群让皇帝痛不欲生的妃子在那里跳舞。由于角度关系，皇帝的脸一直看不清。等皇帝终于走了出来，没10秒，就被一个人参娃娃给吓跑了。
所以说不要以为皇帝一定就是主角，你看看甄嬛传，再看看杨家将，再看看水浒，再看看末代皇帝——不好意思搞错了。这个真是主角，但是不是皇上了。
后面更奇葩的事出现了。采参人跟着人参娃娃跑——结果丫变成了个美丽的仙子。你是想说源氏物语还是说采参人变成了萝莉控？
反正结果就是仙子和屌丝——啊不对，仙子和萝莉控——啊呸，仙子和采参人陷入了热恋。但是一个奇怪的妖怪看上了采参人（这年头有本事的都爱屌丝）。于是用毒药迷惑了采参人（啥玩意那么好使，哪买的？），还把仙子给冰进了冰山里面。
我擦，有本事的人怎么都会陷入奇怪的麻烦。是不是都等着被一个无名小卒救了然后说你骨骼清奇是万中无一的奇才，跟着我学做菜吧。你看看D2里面的大天使，能锤碎世界之石却被一条虫子困住了。主角还在菜鸟的时候干掉了这条虫子救出了大天使，可是到最后都没能锤碎世界之石。
后面更奇怪的东西出来了——变脸？收回我刚刚说的话。这个不是有点像川剧变脸传奇，这根本就是。这是川剧还是东北二人转？我刚这么说着，两个人推着一个像健身用的大呼啦圈一样的东西缓缓出场。。。
到后面八个饺子妖出场的时候，我已经完全不惊讶了。
结局还是很不错的，屌丝——啊不对，采参人用鲜血唤醒了女主角。于是女主叫召唤世界之石还不知道是什么玩意把男主复活成了——一颗人参。于是两颗人参就快乐的生活在了一起。
但是，天啊，我终于知道为什么进门的大厅里面那么奇怪的放着两锅人参汤了。。。那两个主角养老的地方不会就是在。。。
好吧，不要在意这些细节。</description>
    </item>
    
    <item>
      <title>长白山旅游——第一天</title>
      <link>//blog.shell909090.org/blog/archives/2552/</link>
      <pubDate>Fri, 07 Feb 2014 06:50:14 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2552/</guid>
      <description>这次去长白山旅游，是坐春秋的航班，从上海经停大连到白山机场。照例，是没有航空餐供应的。
长白山这里离朝鲜很近（好像在朝鲜被称作白头山，是金家的诞生地），从飞机上看下去全是白茫茫的雪。白山机场很小，从停机坪下去就是一个小小的转盘。转盘出去就是机场了。
气温没有想像中那么可怕，即使是夜晚，穿一件衬衫，一件毛衣，一件大衣，身上一点都不冷。在室外只要注意细节保暖（耳朵，手指，各种穿戴中间露出的部分），其他都不是什么问题。
镇子上的东西价格参差不齐。山珍水饺，两盘水饺（12个一盘），两盘凉菜要价100。另一边的小吃街，水饺只有30上下，却有24个的量。价格基本差上一倍。我们要了份羊汤，20，份量不错，味道一般。
不过小吃街实在是坑爹了点，说是一条街，实际上这条街全是银行。小吃只有街口的两家店面，每家里面有四五个小摊位上面在卖各种吃的。人很少，人气不足。当然，也可能是夜晚的原因。
而且这里的餐厅都很奇怪。菜异常的少，或者菜谱异常简单（好像东北都是这个风格）。山珍饺子菜谱上只有两页，一页写着饺子一页写着酒，中间稀稀拉拉几个凉菜。好像除了本店主打你们只要喝酒就好了的样子。另一家黄上煌则是四五页，开头几页都是XX锅，后面几页把前面的锅拼起来，然后一页酒，最后推荐多人套餐（就是把拼锅打包了卖）。小吃到还可以理解，每个小吃摊位上都是几样东西，不会太多的。
往前走能看到一条雪道。夜间看到的雪道很吓人，30-45度的坡度，大约每80米一个弯。以我的水平就这么往下滑，有没有拐弯真是一个困难的选择呢。有拐弯的地方当场撞到送医，没拐弯的地方接着往下滚，到山下一团雪人去送医。
回来才发现，那是特级雪道。我们明天大概就是在滑雪场里面简单滑一下初级就得了。</description>
    </item>
    
    <item>
      <title>google authenticator的特性</title>
      <link>//blog.shell909090.org/blog/archives/2549/</link>
      <pubDate>Tue, 28 Jan 2014 13:08:45 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2549/</guid>
      <description>算法 双方预先共享一对密码。 时间对30秒求整，用密码unbase64后HMAC签署。 如果当前时间前后一定时间内（几个误差）的值和用户提供值一致，就验证通过。 攻击者获得了数个时间和序列对，但是根据HMAC特性，他无法反向出密码。
因此 gauth不需要联网。但是双方时间必须同步。 gauth的优势在于，即使有人可以获得一次密码(例如keylogger)，只要不在1分30秒内登录，获得的输入就无法使用。 对于可以取得gauth共享密码的人，gauth不能提供安全性加强。例如sudo，验证的是自己的身份。而用户密码只要登录即可读，因此没有提供加强的安全性。 对于ssh，在登录后也可以获得密码。因此只要给别人获得了一次登录权限，后续gauth不能保护你。反之，如果能保证对方一次登录都不会成功，则可以作为辅助。因此用于ssh上必须加上一个token只能使用一次，以确保对方获得了token也是作废的。 如果有人可以从手机中读取应用的信息，就可以一直冒充用户。因此越狱和root肯定会降低系统安全性。这就是为什么很多TOTP使用硬件来做这个事情。系统单纯，而且没有读取API。 缓慢的重试，每次命中概率都是1/1000000。持续试1000000次，也不能肯定猜中。实际上只有63.2%的概率猜中。如果30秒内连续重试1000000次，肯定破解了。合每秒重试3万多次，不算多。所以必须防止暴力破解。 如果没有紧急密码，安全性大约是20bit。但是数个紧急密码为破解提供了帮助。因此紧急密码一般是7位数字，综合复杂度一般评估为20bit上下。 以复杂度而言，不足以作为身份验证工具，只能作为身份验证辅助。所以gauth叫做two-factor-authentication。 </description>
    </item>
    
    <item>
      <title>openvpn auth with google authentication</title>
      <link>//blog.shell909090.org/blog/archives/2545/</link>
      <pubDate>Fri, 24 Jan 2014 12:33:39 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2545/</guid>
      <description>client config # base config client dev tun proto udp remote 192.168.1.122 1194 nobind user nobody group nogroup persist-key persist-tun mute-replay-warnings comp-lzo # authentication config ca ca.crt cert shell.crt key shell.key ns-cert-type server tls-auth ta.key 1 auth-user-pass Group should be nogroup, not nobody in debian.
auth-user-pass is needed for google auth.
pam config account [success=2 new_authtok_reqd=done default=ignore] pam_unix.so account [success=1 new_authtok_reqd=done default=ignore] pam_winbind.so account requisite pam_deny.so account required pam_permit.so auth required pam_google_authenticator.</description>
    </item>
    
    <item>
      <title>lxc和virtualbox和物理机的简单性能测试和对比</title>
      <link>//blog.shell909090.org/blog/archives/2542/</link>
      <pubDate>Thu, 23 Jan 2014 11:04:34 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2542/</guid>
      <description>说明 测试各种虚拟化系统下的虚拟机性能。
测试使用sysbench。
CPU采用如下指令测试。
sysbench --test=cpu --num-threads=2 --cpu-max-prime=50000 run 文件IO采用如下指令测试。
sysbench --test=fileio --file-total-size=10G prepare sysbench --test=fileio --file-total-size=10G --file-test-mode=rndrw --init-rng=on --max-time=300 --max-requests=0 run 内存采用如下指令测试。
sysbench --test=memory --num-threads=2 --memory-access-mode=seq run sysbench --test=memory --num-threads=2 --memory-access-mode=rnd run 线程采用如下指令。
sysbench --test=threads --num-threads=2 run sysbench --test=mutex --num-threads=2 --mutex-locks=1000000 run 裸硬盘测试采用如下指令。
hdparm -tT &amp;lt;dev&amp;gt; 物理机上有三个文件系统，ext4/xfs/btrfs，前两者仅做fileio测试以对比性能。
另外做两个特殊文件系统对比，aufs带复制和aufs无复制。前者在只读层上准备好测试文件，而后进行随机读写测试。其中就附带了文件复制开销。后者在aufs建立后初始化测试文件，因此消除了文件复制开销。
所有测试都是测试数次，取最高者（因为低者可能受到各种干扰）。一般是2-3次。
物理机是一台DELL Intel 64位桌面系统，支持硬件虚拟化，有4G内存。系统采用debian jessie，测试于2014年1月17日-20日执行，内核3.12.6-2 (2013-12-29) x86_64。
虚拟机lxc是使用lxc切分的一台虚拟机，没有做资源限制。
虚拟机vbox是使用virtualbox切分的一台虚拟机，分配了所有CPU，打开了硬件虚拟化，分配了1G内存。
文件系统 ext4 Operations performed: 21311 Read, 14207 Write, 45440 Other = 80958 Total Read 332.</description>
    </item>
    
    <item>
      <title>在PAM中使用google authentication</title>
      <link>//blog.shell909090.org/blog/archives/2539/</link>
      <pubDate>Wed, 22 Jan 2014 13:31:45 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2539/</guid>
      <description>PAM是linux系统身份验证的核心，在用户登录/ssh身份校验中均有很大用途。但是很少有人想到，其实这个东西还可以用google authentication来进行身份校验。
安装 sudo apt-get install libpam-google-authenticator 设定 使用前，需要对用户做一个用户级配置，生成配置文件。这个文件就是这个用户的身份验证凭证。配置请使用用户执行google-authenticator。
上来先会问你是否使用基于时间的验证，肯定选是。但是注意，基于时间的验证要求服务器时间必须精确。更准确的说，是服务器时间和手机时间校准在30秒以内。由于手机一般都采用GSM校时，因此只需要在意服务器时间。建议是使用ntpdate来校准时间。特别注意，linux的时钟是会漂移的，必须按天级校准。
然后程序会给出一个url，还可能有QR码（真够不容易的，Console级别的QR码。。。）。记住，一定要用url去获得QR码给程序扫描。因为url获得的QR码算法是最新的，而直接生成的有可能不能跑。
下面是secret key和verification code，一般来说这两个不用关心。但是你需要记住emergency scratch codes。libpam-google-authenticator默认给你生成了5个，一般都够用了。通常用到3个就更新一遍吧。
是否生成配置，选是。 是否拒绝使用同一个token的人登录。如果选是，30秒内只能登录一个人。建议选是。 是否放送时间验证，从1分30秒到4分钟。如果选是，允许更大的服务器时间偏差。看你服务器时间是不是够准。 是否防止暴力破解，30秒内尝试不超过3次。建议选是。 OK，你的配置就完成了。如果有多个用户，请多次配置。
手机app 按照系统安装以下app，下面以android版为例介绍。
Google Authenticator Android Google Authenticator iOS Authenticator for Windows Phone Blackbarry 选择setup account，然后scan a barcode。程序会要求你使用barcode扫描软件扫描(推荐barcode scanner)。这时去扫描设定一节中访问url显示的那个qr码。
pam配置 对于ssh而言，请在/etc/pam.d/sshd的最后一行增加这句。
auth required pam_google_authenticator.so 注意，这样其实是密码/校验码双重验证。如果你不需要密码请注释掉下面这句。
@include common-auth 或者其他包含以下这句的地方。
auth required pam_permit.so 如果你希望增强sudo安全性，也可以把这句加入/etc/pam.d/sudo后面。如果同样不需要密码，请注释上面那句。
sshd配置 保证/etc/ssh/sshd_config里面，以下参数都处于正确的配置。
ChallengeResponseAuthentication yes PasswordAuthentication no UsePAM yes 如果你使用openssh6.2以上版本，请额外加入这句以开启publickey和验证同时启用。
AuthenticationMethods publickey,keyboard-interactive sudo 注意，如果是NOPASSWORD，则没有校验。
参考和鸣谢 Why enable SSH Two-Factor Authentication on your server?</description>
    </item>
    
    <item>
      <title>golang和nginx的简单性能对比</title>
      <link>//blog.shell909090.org/blog/archives/2536/</link>
      <pubDate>Wed, 15 Jan 2014 10:53:20 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2536/</guid>
      <description>说明 测试都是ab做的，中等并发量，统一采用10000并发，100000个请求。都是本机请求本机，避免公司内网IDS的干扰。
机器是一台双核CPU的DELL：Intel(R) Pentium(R) CPU G2030 @ 3.00GHz。配4G内存。
第一组数据是ab测试nginx，nginx的配置如下：
worker_processes 4; pid /run/nginx.pid; worker_rlimit_nofile 30000; events { worker_connections 20000; multi_accept on; } http { sendfile on; tcp_nopush on; tcp_nodelay on; ... } 第二组是ab测试golang，返回固定是个OK。
第三组是ab测试golang，返回某个目录或文件。
err := http.ListenAndServe(&amp;quot;:8080&amp;quot;, http.FileServer(http.Dir(&amp;quot;/home/shell/photo&amp;quot;))) nginx Concurrency Level: 10000 Time taken for tests: 5.720 seconds Complete requests: 100000 Failed requests: 0 Write errors: 0 Total transferred: 172100000 bytes HTML transferred: 160000000 bytes Requests per second: 17482.47 [#/sec] (mean) Time per request: 572.</description>
    </item>
    
    <item>
      <title>lxc简单介绍</title>
      <link>//blog.shell909090.org/blog/archives/2533/</link>
      <pubDate>Thu, 02 Jan 2014 12:48:17 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2533/</guid>
      <description>基本安装 安装lxc包。
注意修改/bin/sh，链接到/bin/bash。lxc在某些版本上有一个bug，声明为/bin/sh却使用bash语法，导致不如此链接会出现错误。
lxc on debian wiki 镜像和设定 使用lxc-create -n name -t template生成镜像。
在/usr/share/lxc/templates可以看到可用的模板。
在/var/cache/lxc/debian会缓存生成过程的临时文件。
生成的镜像需要在镜像内安装lxc，否则无法使用lxc-execute。
资源限制 在config文件内，写入cgroup限定规则。注意，使用内存限定的话，需要在内核参数中加入cgroup_enable=memory。
在debian下，可以修改/etc/default/grub文件，使用update-grub重新生成规则。
GRUB_CMDLINE_LINUX_DEFAULT=&amp;quot;cgroup_enable=memory quiet&amp;quot; 在config文件中可以如下限定。
lxc.cgroup.memory.limit_in_bytes = 512M # 限定内存 lxc.cgroup.cpuset.cpus = 0 # 限定可以使用的核 lxc.cgroup.blkio.throttle.read_bps_device = 8:0 100 # 读取速率限定 lxc.cgroup.blkio.throttle.write_bps_device = 8:0 100 # 写入速率限定 lxc.cgroup.blkio.throttle.read_iops_device = 8:0 100 # 读取频率限定 lxc.cgroup.blkio.throttle.write_iops_device = 8:0 100 # 写入频率限定 cgroups blkio-controller cpusets memory 执行 lxc-start -n name /bin/echo hello 还可以用以下指令，在已经启动的container里执行进程。
lxc-attach -n name /bin/echo hello 以下指令是用来在未启动的container里执行进程的。</description>
    </item>
    
    <item>
      <title>一个神奇的故事——为什么程序能够工作</title>
      <link>//blog.shell909090.org/blog/archives/2530/</link>
      <pubDate>Mon, 30 Dec 2013 11:18:15 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2530/</guid>
      <description>故事的原因 今天被一个妹子问到一个专业问题。每天看你们在写程序，为什么你们写一些东西，就会出现很多神奇的功能。
好吧，这是很多“外行”很难理解的问题。大多数职业非职业程序员，只要写过一点程序，就不会对这种事情表示惊奇。然而问题是，很多人并没有深刻的认识到，这个问题其实非常难解答，可以算是计算机本质性问题之一。
我当时的解答有点奇怪和玄幻色彩。我打了个比方，例如你有个萝卜头，你扇它一下，它会往前蹦一下。你又有个电灯，按一下开关就亮，按一下开关就灭。那么你把两者组装起来，在旁边立个牌子，扇一下萝卜头灯就亮，再扇一下就灭。事情看起来就很神奇了。至于萝卜头为什么会这么做，这个事情我并不了解。
实际上，这个回答很让人莫名其妙。什么萝卜头和奇怪的世界观阿，这不是在讲程序吧。好吧，我把整个故事讲的稍微完整一点。作为对所有有这个问题的人的解答。
原型 在讲整个故事前，让我们稍微的放开一点想象力。例如我们有一个老鼠，一盒一碰就会掉下奶酪的奶酪盒，一个转笼（就是老鼠经常在里面跑的那种），一个小的皮带环，一个风扇，一个导轨，就是扔个铁球，就能沿着导轨滚动的那种。
我们把转笼和风扇用皮带环连接起来，然后里面放上白老鼠，上面放上奶酪盒，旁边放一个导轨，然后用黑盒子罩住，旁边放一张纸。这是一个神奇的设备，当你向里面投入一块钱，就会有风吹出来。因为钱沿着导轨滚下来，会碰到奶酪盒。老鼠就会开始跑，带动风扇吹出风来。
好像很神奇的样子哎，投币式风扇。
哎哎等等，你弄了那么复杂的一堆东西，就是为了吹风扇？那为什么不用电风扇呢？
其实我们的老鼠盒子和电风扇具有一样的结构。老鼠是动力源，奶酪盒是开关，皮带环是传动系统，风扇负责执行。我们只要正确的将每个具备功能的部件组合起来，就可以产生奇妙的效果。至于每个部件为什么能达到他自己的功能，这个我们并不关心。设计部件的人会为我们做出合适的实现。
同样的组合，如果是电扇，我想大部分人都不会表示不理解。然而如果换成老鼠盒子，大家就会觉得很神奇，如果换成程序，就会觉得更神奇了。
其实程序和老鼠盒子非常类似。程序的每个部件都有自己独特的功能，我们只要负责将这些部件以合适的逻辑连接起来，就可以完成新的功能。当然，如何连接部件是一个非常有技术含量的问题，需要专门的培训。
然而，程序比老鼠盒子更加复杂，更加让人觉得神秘莫测的地方是。程序经常出现一些我们听不懂的东西。同样用老鼠盒子做比方，请想象一下以下事件：
不可往复 这个系统还没上线，就被产品经理吐槽了一把。这个系统的第一个问题，就是能开不能关。一旦老鼠开始跑，直到没有力气之前系统是不会停的，无论人在不在。为了修正这点，我们再弄了一个传送带，用皮带环和转笼连接。当老鼠跑上一分钟后，传送带就会把奶酪传送到老鼠面前，老鼠就会吃掉奶酪，从而停止奔跑。
白老鼠的不稳定性 系统终于上线了，不过有奇怪的问题。系统不知道为什么，有的时候工作有的时候不工作。
经过工程师的检测，这主要是老鼠会吃饱。一旦老鼠吃饱了，奶酪就失去了吸引力。因此每隔三四块奶酪就会停止工作。不过老鼠饿的很快。所以十分钟后又恢复了工作。所以表现就是不稳定。
工程师为了紧急修复这个问题，让每次掉出来的奶酪减小到了很小的尺度，大约是原来的三分之一。这样就算十分钟连续工作，也不会吃饱。
老鼠盒子的黑客事件 没多久，这个盒子碰到了黑客。有个人掀开盒子看了一眼，发现导轨只辨识撞击，不辨识是否是货币。因此出现了大量铁球替代硬币的事情，扔个铁球就开始吹风。市场部表示工程师需要紧急解决这个问题。
工程师巧妙的将轨道绕了几个弯，并减小了弯上的轨道宽度。如果投入物是硬币，那么他的重量和形状就会使得他正确的通过弯。而铁球或轻或重会从导轨上掉下去。从而解决了这个问题。
并发请求 很快，系统又遇到了一个问题。有人一次性的投入了两个硬币，因此击中了奶酪盒两次。老鼠只跑了一分钟就吃了两块奶酪。因此这个人又重复的连续投了多次货币。这导致老鼠吃饱了，因此盒子不工作了。客户大发雷霆，打电话到售后骂人，老板很生气。
工程师发现这是因为奶酪被连续放置的缘故。于是他们设计了一个连杆。当老鼠开始工作的时候，就会启动连杆，关闭投币口。这样就不会引起老鼠连续吃东西了。而老鼠停下的时候，连杆就会打开。就可以继续投币。
老鼠饿死了 经过了一个圣诞节，大家都不去玩老鼠盒子，老鼠饿死了，老板把运营骂了一顿。
运营乖乖去换了一只老鼠，并让工程师在盒子里装了一个摄像系统，可以让他们看到老鼠是否存在。
现状 现在我们有一个神奇的盒子，投币就可以吹风。这个盒子是由一个带着摄像系统的黑色外壳，一个盘旋的及其复杂的导轨，一个奶酪盒子，一个传送带，一个连杆，两组皮带环，一个转笼，一只老鼠，一个风扇组成。为什么会这样？一个妹子问。。。</description>
    </item>
    
    <item>
      <title>KK行——第四日</title>
      <link>//blog.shell909090.org/blog/archives/2525/</link>
      <pubDate>Tue, 03 Dec 2013 09:55:32 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2525/</guid>
      <description>第四天也是自由行动，总算能玩到一些好玩的了。
鉴于有些人已经去过加亚岛了，所以我们去的是另一个岛。上去后发现这里居然有降落伞，而且可以两人乘坐。上次去普吉岛的时候被鄙视太重，这次总拖的起来吧？
在海上坐降落伞其实是个非常不错的体验，你可以明显感到风的流动，并且看到海水从碧蓝到碧绿的变化。如果不会超重的话（不许笑），我下次打算体验一下热气球。
船老大还提供下水和不下水的选项。如果你有兴趣，他们会开的慢一点，让降落伞在水面擦过。然后就可以半截身子浸在水里。道哥和他老婆享受了一把这个待遇。整个水全溅起来，满头满脸。我当时没带泳裤，所以干脆的放弃了，还是在天上看看就好了。。。
降落伞的宣传价是100RM，但是讲一下价就到70RM左右了。剩下能谈到多少就看个人功力了。我们近20个人，拿到了65RM的价格。
回到岛上，换一批人出去被吊起来，剩下的人就去堆沙子和浮浅。实话说，KK作为浮浅来说比puhket和maldive差很多。鱼都是比较小的种类，而且密度比较稀疏。当然，珊瑚礁比puhket漂亮的多，而能见度也比maldive好。但是我没带泳装，而且背已经严重的晒伤了。所以还是没有下水。
当晚我们在酒店附属的酒吧里面呆到很晚，和台上的一帮国际友人唱歌玩，最后还送了人家两个牛小七。
最后是关于机场的重点。马来西亚禁止贝壳和珊瑚出口，所以如果被发现带贝壳或者珊瑚走的话，抱歉，重罚加没收。所以要带贝壳珊瑚什么的就别想了。至于海星之类的活物更没指望。原则上贝壳工艺品并不受限，但是必须在购买时索要凭证证明你是购买的，否则也不能放行。
而且他们的安检很奇怪。第一道口在办理登机的counter那里。国内出去的时候，我们只称托运重量。马来是称量所有物品，包括随身的。而春秋的额度又特别低，只有15。所以我们一帮人就紧急分配重量，谨防超标。我把公司的东西交给别人带，自己带自己东西。最后我上去的时候，能穿的都穿了，在热带穿的像只北极熊一样，还偷背着一只相机包。最后一称，16公斤。理论上一公斤45RM，合95RMB。不过还不错，没找我要。
第二道安检在过海关前，第三道在海关那里，不安检，只办理手续。在办理手续的时候，居然碰到了第一天来的时候碰到的两个妹子。和她们聊了一下。结果他们发现我们是公司出钱全包到这里来玩的时候，当场就称呼我们为土豪公司。后来我们的人就直接被叫做“土豪的同事”了。
下面就是他们安检比较奇怪的地方了。在候机厅进入另一个候机厅的时候，居然又安检一次。这次才夸张，水都不让带，必须喝光，要么留下。春秋又是不供水的。这个机场的政策让人怀疑春秋是不是买通他们了。还有这次贝壳在机场免税店里面购买了一个大贝壳（好像有点绕），结果在最后一道安检的时候被拦下。保安问我要购物凭证，我说没有，我就在你们机场里面买的。他先说不行。我说你可以打开看看。然后他打开一看——贴着一个标。当时后面有个人说这个标是我们机场的，我就被放行了。所以为了省麻烦，要买工艺品还是索要凭证的好。不过后面两个买了同样贝壳的人连开包都不用，估计是因为保安已经在我这里看到贝壳的形状了，所以后面的就没检。
后来我们讨论，安检这么严一定有什么事。前面两个妹子就说有两个游客在仙本那出事了，被人杀了。然后我就有点小庆幸，我们的运气还是不错的。</description>
    </item>
    
    <item>
      <title>KK行——第二三日</title>
      <link>//blog.shell909090.org/blog/archives/2523/</link>
      <pubDate>Mon, 02 Dec 2013 14:52:08 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2523/</guid>
      <description>第二天的行程是美人鱼岛，基本就是跟团运动。跑到美人鱼岛，浮浅一次，吃午饭，浮浅第二次，回去。
比较无语的是，第一次出发的时候，跑到海里才发现少了两个妹子。回去一看这俩换衣服比较慢，硬生生没赶上第一次浮浅。第二次我好歹跟着，结果一个不靠谱的给我们指到另一个船上去了。我们三个带着N贵的水下相机，只有三个人在那里浮浅。。。
所以团队出门注意随时数人，个人注意紧跟领队。否则后果很严重。
需要特别注明的是（虽然第二次说这个了），这里的深潜，需要提前预约，和泰国不一样。
第三天的行程是看长鼻猴和萤火虫，实话说很一般。因为长鼻猴距离比较远，拿着望远镜也看不清楚。这毕竟是野外，不是动物园，不能追求最好的展示效果。而萤火虫——去，初中的时候门口一大片的全是萤火虫，见太多就没感觉了。
第三天晚上我发现一个严重的问题——我的令吉严重的过多了。这次我为深潜保留了300-500RM。结果两次都没深潜成。现在这笔钱带不回去只能花掉。而且团里很多人都有类似的问题（虽然不完全是因为深潜）。所以，当晚某大陆游客团的疯狂购物传奇就开始了。
当晚我买了一堆榴莲酥（记得，生鲜水果不得上飞机），数盒红茶巧克力，还有几包咖啡。实际吃下来，榴莲酥和咖啡广受欢迎，严重不足。红茶巧克力反响一般。榴莲味咖啡则是被我当猎奇产品送了出去。好吧，幸好原来也是买着玩的。
要去的朋友可以多入榴莲酥。凯诚附近有家榴莲王，里面打工的妹子很不错。老板祖上是福建过去的，一口台湾腔。可以先试试他们的油炸冰冻榴莲，再买点新鲜的榴莲酥回来。
另外我又跑去做了个泰式按摩。按摩的妹子英文很奇怪，仔细一问原来是从泰国来打工的。我的右手大拇指原来有点摔伤，痛了很久了没法动。她拿精油推了一会，居然基本没事了。我顿时感到很惊奇，就问老板推拿的精油有没有在卖。老板说不好意思他们都是自用的，不卖的。很可惜。</description>
    </item>
    
    <item>
      <title>KK行——第一日</title>
      <link>//blog.shell909090.org/blog/archives/2521/</link>
      <pubDate>Sun, 01 Dec 2013 01:56:03 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2521/</guid>
      <description>第一天的行程很郁闷。我们0点降落在KK，然后就被导游拉着上了bus，结果我没买到电话卡——这注定了后面的悲剧。
晚上到酒店，不想那么早就睡觉，就一帮人跑出去吃东西。我想要办手机卡，所以就往酒店后面走。碰到两个和我们一飞机过来的妹子要取钱，就一起过去。取完钱我们找了半天，所有人都说在7-11那里办电话卡，可是那里就是没有。
出发前我联系过潜店，得知他们的潜水都是早上8点半出门的。所以我7点半起床，去叫道哥和王伟伟。结果他们通通起不来。我只好叫上徐立去吃早饭，吃完去碰碰运气。
到了潜店那里，他们说，不好意思，你需要昨晚预约。问了数家都是这样。由于我们到的第一天是全自由行动，而且只有一天的全自由行动，所以没办法，这次没法去潜水了。
然后我们就一路逛回了酒店。在大厅里面发现韩大哥一行正要去博物馆，就跟着去了。
实话说，博物馆没啥好玩的。更那啥的是出博物馆的时候又下雨了，我们被困在博物馆动弹不得。好容易叫了三辆出租，还是分别叫的。其中一个司机还不会讲华语，又不认得地方。等到了jalan gaya，一群人分成了三份在暴雨里面凑不起来。最后只凑了两拨人，各自吃饭找地方玩。
中午吃的是其中某一家的肉骨茶，味道，一般般啦。当地并没有什么让人眼前一亮的美食，大多都是水平以上好吃一点和水平以下凑合一点的区别。唯一在国内吃不大到的只有海鲜而已。
下午在某商场的地下餐厅街吃的下午茶。我吃了半只烤鸡和鸡肉肠。这里的黑胡椒烤鸡味道不错，有兴趣的可以试试。
晚餐就是吃的海鲜。我们没点贵的要死的大龙虾，所以只有72令吉一个人。合国内大概150人民币的样子。以吃的东西而言，基本和上海持平吧。不过东西肯定要新鲜一些。</description>
    </item>
    
    <item>
      <title>KK行——第零日</title>
      <link>//blog.shell909090.org/blog/archives/2519/</link>
      <pubDate>Wed, 27 Nov 2013 11:50:36 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2519/</guid>
      <description>刚刚来七牛没几天，就被告知一件好事。公司组织去沙巴和普吉旅游，可带家属。想想普吉已经去过了，这次选了沙巴。当然，傻喵为了去西藏已经请过假了，这次就没有同行。
沙巴位于菲律宾南面，文莱旁边。从中国地图上看，中国南海牛舌线最下面就是。沙巴是世界知名的潜水圣地。当然，这次我们没有去最佳潜水场所——仙本娜，而是去的首府Kota Kinabalu，Kinabalu是附近知名的神山，KK的意思就是神山之城，中文叫做亞庇。没鱼虾也好，KK对面好歹有个东姑阿都拉曼公园(Tunku Abdul Rahman National Park)，潜水也不错。不过有意思的是，理论上说这个公园坐落在南中国海。。。
去大马首先要换钱。令吉和人民币的比值大约在2左右，2元人民币合1令吉。令吉不在中国银行的服务范围之内，所以我们从货币兑换点换了一把令吉回来。据兑换点的服务人员说，我们提空了他们能约到的所有令吉。
种族宗教 KK当地伊斯兰教盛行，随处可见包着头巾的妇女和清真寺高耸的圆顶。当地饮食也是偏清真的，大部分地方只提供鸡肉和牛肉，偶尔能看到羊肉。
当地各种人群混杂，能明显看出区别。我碰到了很多华裔。据他们自己说，他们都是祖上三五代从大陆过来的。按时间算下来，差不多就是民国的样子。有很多当地族群，皮肤偏黑，一看就不像是中国人，却能说一口流利的中文。我曾经问过一个华裔，他说当地推行华语教育，有很多学校坚持华语教学——不限中国人。还有一些皮肤偏白，碧眼，我实在想不出解释，只能猜想是前殖民者后裔。
语言沟通 KK当地有几家手机公司，我办的是calcom的卡。17令吉一张，合35人民币左右的样子。里面有15令吉的费用，基本足够4天的所有短信和电话。如果在当地收发短信多的话，可以考虑入一张，比漫游便宜。道哥收发短信和电话不多，查下来是25人民币，办卡就亏了。
KK当地通行马来语和英语，但是华语也是非常盛行。基本上讲英语就完全能和当地人沟通。经常让人想吐血的是，你和当地人说着说这英语，他和你讲，OK，没问题。然后你发现——他会说华语。只是你和他讲英文，他就和你讲英文。而且这种现象不限于长的像华人的。。。
衣食住行 KK的饮食比较清真化，所以大部分都是鸡肉餐。去了几天，我们吃的最多的就是麦当劳和海滩BBQ。号称海滩BBQ，但是实际上并不算很好吃，也根本不是BBQ。主要食物是炒面，米饭和咖哩。唯一和烧烤有关的只有烤鸡翅。我们自己出去吃则经常去双天海鲜楼去吃海鲜大餐，里面的椰子布丁味道不错。卖椰子布丁的美女也很不错，我们中的某人很感兴趣。
吃东西当地司机和我们推荐加亚街。我们也就去吃了一顿肉骨茶。味道还不错，我带了一包药材回来烧着玩玩。
KK的出租并不好打，所以出门基本靠腿。幸好KK也不大，纵穿整个KK也不过半个小时不到的样子。只是KK作为前英国殖民地，这里的车辆行驶方向和大陆相反。因此经常担心车辆从意想不到的方向冲出来。
潜水 沙巴是潜水的好地方，但是要潜水的人需要注意。请务必在潜水的头一天电话预约。而且最后一天不要潜水（坐飞机前18小时不得潜水）。因此，推荐的行程是第一天看萤火虫（萤火虫是晚上看的，所以可以睡到中午，不受第一天到达劳累的影响），第二天去美人鱼岛，第三天去潜水。
即使要跟随去美人鱼岛的团队潜水，也请务必提前预约。这次上了岛我才知道，深潜是需要预约的。中计了，普吉岛那次完全不需要预约。</description>
    </item>
    
    <item>
      <title>lxc的double NAT模式无法使用dnsmasq的分析</title>
      <link>//blog.shell909090.org/blog/archives/2517/</link>
      <pubDate>Mon, 25 Nov 2013 16:40:01 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2517/</guid>
      <description>系统debian testing，lxc-0.9。
在笔记本上做lxc，网络是wifi，AP会drop不同MAC发出的报文，所以无法做网桥。一个办法是用ebtables做规则，我嫌麻烦。另一个是配置多头主机，double NAT。当然，还有路由器模式。不过大多数网络环境中我搞不到default gateway的权限来添加子网的路由规则。所以就选了double NAT。
问题出在dnsmasq作为dhcp和dns服务器上。整个网络都搭好了，通的。完了我在host上启动dnsmasq，在guest里就是硬生生无法获得IP。
首先host上vi /var/log/syslog，看到dnsmasq把dhcp offer发出去了。在guest里tcpdump，看到有报文收到。那就奇怪该死的dhclient不工作了。dhclient版本4.2.4，和主系统一致。网桥环境中这个版本可以工作。
所以把网桥环境中的报文也tcpdump了一遍，加上刚刚不成功的dumpout一起看——什么都看不出来。
偶然dhclient -v -d -4 eth0了一下，看到bad udp checksums，顿时一愣。跑到wireshark下面看了一下——还真是没有计算checksum。打开checksum计算可以看到double NAT里的checksum算错了。提示是maybe checksum offload。
我找到这个链接：http://www.wireshark.org/docs/wsug_html_chunked/ChAdvChecksums.html
里面提到，checksum可能是由网卡或驱动计算的。这就难怪——没问题的dhcp offer的udp checksum是由openwrt的网卡发出，而有问题的则是由bridge和virtual ethernet发出。
那见鬼，别人是怎么成功的？
一番搜索，看来lxc还不是第一个中招的：http://lists.xen.org/archives/html/xen-devel/2011-12/msg01770.html
dhcp-4.2.2可以打这个补丁，使得dhcp-client不去校验udp checksum：http://pkgs.fedoraproject.org/cgit/dhcp.git/plain/dhcp-4.2.2-xen-checksum.patch?id2=HEAD
当然，也有各种坑爹补丁（例如这个：http://marc.info/?l=kvm&amp;amp;m=121882968407525&amp;amp;w=2 ）来修复虚拟驱动上的问题，计算出正确的checksum。
在debian下，他被报为bts671707(http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=671707)。已经报了一年半，尚未处理。
网上很多教程能够跑通的原因，大概是因为他们的guest基于08年以后的rh系系统。rh在08年就对dhclient出了一个补丁（4.2.2那个），用于暂时修复这个问题。
所有基于debian系的系统都无法从offloading不处理的系统上获得dhcp offer。</description>
    </item>
    
    <item>
      <title>甘肃行——第四五天（阳关，玉门关，雅丹）</title>
      <link>//blog.shell909090.org/blog/archives/2513/</link>
      <pubDate>Tue, 19 Nov 2013 17:54:45 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2513/</guid>
      <description>今早是从露营地醒来，直接拍日出的。在戈壁之上，天空先是泛白，最下面一层橘色的雾气。进而开始分层，红色逐渐浓重，上面镶着一汪金色。随着天色渐亮，两旁的红色逐渐浓重，直到接近血色，中间的金黄却逐渐透亮。颜色层次清晰，变幻莫测。最后一个光点从地平线上冒出，顿时镜头里光华闪耀，根本照不下东西。等我终于把相机调整到可以照的时候，半个圆球已经从山巅上站了起来。没按两下快门，太阳就从地平线下钻了出来。
今天是包车西线一日游。主要是阳关，玉门关，雅丹。
早上从敦煌出来，走在隔壁公路上，能够看到远望无极的戈壁景色。这里和沙漠还不一样，沙漠全是沙子，上面寸草不生。戈壁这里土石横乱，中间能看到一点点绿色，却和最高原一样，连不成片。但是不毛的地面上是湛蓝的天空，色彩丰富，相机根本无法表达。
我们路上的第一个景点是西千佛洞。西千佛洞和莫高窟一体同源，都是在沙砾岩上开出的洞窟式壁画。不过这里近邻河道，所以保护没有莫高窟好。而且由于是家族发起修建，因此质量上也差很多。不过由于旁边就是河道的关系，这里绿树岑天，绿化比莫高窟好很多。
西千佛洞的壁画也是严禁照相的，总体风格比莫高窟粗旷很多。壁画的风格混合了印度的胡人风格和中原的风格，和莫高窟两相对照，可以大致印证佛教传入中国的演化。
阳关是人造景区，略过不表。建议可看可不看。这里唯一值得看的只有远处的阿尔金山形成的戈壁雪山的奇观，还有阳关遗址半边红半边绿的景象。当然，对狄仁杰感兴趣的可以在摄影基地那里照个相。
玉门关遗址倒是真的，不过只剩半边残楼，供我们这些来者体味一下“青海长云暗雪山，孤城遥望玉门关”的诗词。
至于汉长城就更坑爹了。一座一人高的土墙，留着一楞一楞的夯土痕迹。要不是解说我绝对不信这是汉长城，顶多以为是那家楼没拆干净的遗址。
雅丹地貌不知道怎么回事。带我们去吃烧烤的女孩强力推荐，说是美极了。我们去看的时候却是黄土连天，一点都没有粉色的感觉。我不觉得会是大话，也不觉得气象在几天内变化。唯一能说的只有天知道了。
晚上回到敦煌，吃了一次敦煌本土的大盘鸡，味道不错。隔天早上吃了当地的驴肉黄面，很好吃。去敦煌的吃货们（虽然我不觉得真正的吃货会去敦煌）不妨尝尝。
第五天主要行程就是在敦煌瞎转，然后在中午做上去格尔木的大巴，在半夜一点到格尔木市。</description>
    </item>
    
    <item>
      <title>甘肃行——第三天（敦煌莫高窟）</title>
      <link>//blog.shell909090.org/blog/archives/2509/</link>
      <pubDate>Sat, 09 Nov 2013 13:40:30 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2509/</guid>
      <description>敦煌是丝绸之路上的一个小小的城镇。小归小，市镇基础设施还是挺全的。里面还有个超级大的市场，瓜果很好吃。
从敦煌出去，往火车站方向开一会，再转去鸣沙山，才真正到了莫高窟。莫高窟在敦煌旁边的鸣沙山东麓。整个鸣沙山都是有砂石堆积粘结而成的沙粒岩组成的，呈现明显的层状风化。莫高窟已经建设的非常不错，绿柳成荫。中间有一条干涸的河。
莫高窟里面是严禁使用相机的，如果发现会被请去警务那里喝茶。因为曝光会导致铅白氧化加剧。为了子孙后代还能看到这些壁画，还是放弃照相吧。反正按照里面的人数，也不可能玩合影。要论照相，各种书籍上的照片一定比你照的精美。
敦煌的壁画很漂亮。当然，经过千年的时光和空气的氧化，现在的壁画已经色彩斑驳，很多已经发黑。第一眼看上去，和漂亮搭不上边。但是当进入精心保护的洞窟，观看里面尚未破坏的壁画的时候，你至少得承认，他们很漂亮。这里提一句，很多漂亮的壁画都是两边和顶上的，这说明光的腐蚀作用不是开玩笑的。当然，要说精美也不至于。毕竟这些壁画是给当时的民众膜拜的，不是给皇室成员的。所以要说美轮美奂也到未必。这里我吐个槽。在解说的时候反复提到XX老外是专门研究历史的，所以能够准确的看出哪个物件比较精美——既然如此，这帮老外就没想过买回去别人看得懂么？如果一般人也看得懂（虽然我觉得多半不行），那能够看出物件精美和研究中国历史文化有个毛关系。。。
莫高窟的发现很有意思（有人说是一场悲剧）。在清代，整个莫高窟已经无人知晓。当时道士王圆祿在这个地方修道，打扫流沙的时候无意中发现了这些壁画。他就把壁画和佛经卖了，换得的钱用于“保护”洞窟。在洞窟里面看过后得说，与其说“保护”，不如说“破坏”比较合适。因为王圆祿毕竟是个道士，搞佛教很不专业。没把洞窟全修成三清像估计是因为手里没钱——莫高窟的文物当年可是便宜的很。当然，换成国家，保护力度就高多了，水准也高多了。不过有人给我看了一张国庆莫高窟的照片——我得承认这种情况下与其说是保护不如说是破坏比较恰当。
说到乱写乱画，我发现好像中国自古到今都有这种习俗。跑到洞窟里面经常看到的就是民国XX年某军官到此一游，清朝XX年X人留——相当于古代的到此一游。莫高窟的保护价值比较高，一旦提上去就不能清理，所以很罕见的，这些涂鸦居然留存百年，直到今日我们有幸目睹。也因为这个缘故，在洞窟内都摆满了一人高的玻璃，谨防不自重者。在某个洞窟里，我们还看到了大千先生当年的涂鸦。我和同伴说，同样是涂鸦，大千先生留来就是佳画了。导游接下去说了一句，那得看画在哪。大千先生的画留于空白处就是文物，要是画在壁画上一样是涂鸦。至于你们的字画，留在哪里都是涂鸦。深以为然。
从莫高窟回来，当晚我们就去鸣沙山露营烧烤骑骆驼。路上我们还看到了动力翼滑翔机。简单问了问当地人，好像没有人在经营这种东西，可能是游客自己带来的。很遗憾，不知道什么时候能玩一下动力翼。
骑骆驼去鸣沙山的时候有点失算，我忘记换上长裤，结果骆驼行进都是一个方向的，右脚就在太阳下暴晒了一个多小时。回上海后一看，左右脚黑的完全不对称。走着走着，我们居然走过了——呃，一片坟地？！
去鸣沙山的路上，有好大一片地都是坟地。而且从墓碑来看，最早有民国时期立在这里的。当地人有用土划沟形成四四方方一座阴宅的习俗，所以有些阴宅里面是一大两小三座坟，有些里面就是一大一小，远处还一座。仔细看墓碑，主人和夫人在民国时期死的，偏房在六几年死了后儿子给葬的。过了坟区，贝壳看到了下午去莫高窟路上看到的景色，所以就拿出手机照了一张。这就是我发过很多次的那张驼队的剪影。
到露营地，刚好赶上落日。贝壳爬上上百米高的沙山，看到了非常漂亮的落日。彩霞，火烧云，金色的霞光。晚上还照到了银河。其实从观赏来说，这里比垦丁出火差很多。而且我手里的相机也远不如托总。不过这次居然照到了很漂亮的银河。
这里插一下照银河的要诀。30s长曝光或者B门，光圈开到最大，缩放放到最小（18mm端），ISO调到1600以上，色温调整到4500K以下。最后，手动对焦，焦距无穷远，关闭闪光。使用三脚架。万一没有条件，也要把相机平稳的放在某些平台上面。
晚上很简单，泡面，烤羊肉烤鸡腿。虽然没有店里卖的好吃，不过也不错。</description>
    </item>
    
    <item>
      <title>甘肃行——第一二天（兰州）</title>
      <link>//blog.shell909090.org/blog/archives/2506/</link>
      <pubDate>Tue, 05 Nov 2013 23:31:11 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2506/</guid>
      <description>本来今天是去罗布林卡听讲解的。结果猫咪打电话过来说去青海的火车只有最后一张票，就在中午，还有两个小时。没办法，紧急把阳台上洗了还没干的衣服（准确说是被雨淋了还没干）打包到箱子里，然后出门买了一包火腿肠，打上出租就往火车站跑。
萨拉的火车站果然是全国最变态。别的车站是购票入站时安检，他是入站购票前安检。而且我带了一把瑞士军刀也被检出没收，弄的我现在还需要买一把。
路上碰到了一对老夫妻，据说是敦煌人，在西安教书的。他们建议我在格尔木下，然后坐车到敦煌，再从敦煌玩到兰州，会比较快一点。我想了半天，还是算了。到格尔木是半夜三点，鬼知道几点能坐到大巴。而且青海这里我完全没有准备，要不到兰州找个搭子我连玩哪几个景点都不知道——除了莫高窟。
结果没想到的是，到了兰州的下午我就又出发了。
刚到兰州，打了辆车到西驿。住下没一会，碰到一帮去甘南的和一个去敦煌的。想了一会，甘南属于户外路线，敦煌就比较休闲。本来我的时间就不是很够，而且刚刚去过阿里南线这种线路，对户外暂时没啥太大想法。所以就跟着去敦煌的走咯，晚上9点的火车。
在去敦煌前，有个北京的妹子拉着我们一帮子人去正宁路小吃街吃了半天的东西，在此特别谢谢她。
本来想在这里讲讲兰州的小吃，不过后面还有一回，我就先不展开了。
晚上就从兰州去敦煌，居然坐到一辆传说中的绿皮车。从晚上一路晃晃悠悠的开过去，热水炉都是烧的锅炉。
不过外面风景真不错。一望无际的戈壁荒漠，路上还能看到风力机组阵列。一眼看过去，近处是一堆堆的土坷拉和低矮的灌木，远处就开始一望无际了。在目力所及的边缘，是密密麻麻的白色的树——其实是风车。往前开一点，有看到一片大草原的味道。和西藏高原的大草原差不多，除了远处不变的风车。</description>
    </item>
    
    <item>
      <title>西藏行——第十二到十四天（冈仁波齐，玛旁雍错）</title>
      <link>//blog.shell909090.org/blog/archives/2496/</link>
      <pubDate>Mon, 04 Nov 2013 01:41:57 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2496/</guid>
      <description>第四天的行程更简单，直奔冈仁波齐和玛旁雍错而去。
早上我们先从吉隆镇开到了萨嘎。在萨嘎吃饭的时候，司机大哥带回来一个白头发的老外。这老外是从新藏线一路开过来的（我实在想不明白他是怎么搞定边防证的），跑到萨嘎这里，油大概还够跑200公里，又懒得开回头路。所以问一下我们下个加油点在哪里。饭店的人说拉孜肯定有，不过拉孜在300公里以外了。饭店的人说那就只有桑桑了。
剩下唯一值得一提的是，我们在接近仲波的时候，轮胎爆了。当时正好翻过一个山口，司机大哥放大家下去休息拍照，自己关了引擎休息一下。两位美女就跑到远处方便去了（不得不说，在阿里地区不学会路边大小便是会憋死人的），我下车想拍个照，结果听到左前轮附近有声音。司机大哥下来一看，靠，漏气了。而且海拔5100的山口，漏气速度更快。我们赶紧叫回两位美女，往山下猛跑。
开到老仲波，问了一下边检。老仲波没有汽车修理，必须去新仲波。边检还挺通人情，检查了一下我们的证件让我们赶紧走。
开到新仲波，找了个汽修点看了一下。轮胎的老疤被扎透了，已经报废无法补胎。仲波这里也没有火补。无奈，我们只能把备胎换上，加了点气接着开。以当时的状态，要是再漏一个胎，我们就得在阿里地区住到不知道什么时候。
不过幸好，这种事情没有发生。经过一天的行驶，在晚上日落前半个小时我们终于到了玛旁雍错旁边的霍尔。算算时间，我们已经来不及开到齐乌寺了，所以就干脆在霍尔住一天。
这里要特别提一下“成都大酒店”。这家店看起来不怎么样，住起来不怎么样，但是东西却很好吃。做的川菜非常入味。土豆切的非常薄，油炸后就像土豆片一样。加上花椒（我们一直都怀疑是本地花椒——就是那堆野生花椒的同类），可以说是我吃过最好的川菜。而且面条也不错，高压锅压烂，不比平原上的差。就是价钱贵了点，等的时间也长了点。
当然，这家店的住宿就不怎么样了。一套房间有三间房，是一间大房间用隔板隔开的，互相之间都能听到讲话。整个一套房间有一个对外出入口，是用一个铁门闩关起来的，没有锁。房间里没有恒定电源，都是靠老板用柴油机发电的。晚上9点开始供电（因为需要点灯），12点结束（因为柴油机声音太大，需要睡觉）。这点时间也就勉强把各个电器设备充一下。如果不是司机大哥车上有车载USB充电器，我们中一定就有人手机会被迫关机。当然，就算关机，最多只影响照相功能而已。在阿里地区，只要稍远离城镇，手机什么的就会没有信号。而且一驶入阿里地区，整个路上就完全看不到人。由此可以知道车胎漏了有多麻烦了吧。
而且司机大哥说，北线的情况还要糟糕。不但路更烂，而且经常没有路或者干脆迷路。开着开着就坐在泥里面走不了了。最糟糕的是二驱，一点走不动。电子四驱的也好不到哪里去，坐泥里也走不出来了。手动四驱的可以挣扎一下，运气好的出来，运气不好的继续坐着。扎穿轮胎加备胎，坐泥里等等情况，加上没有信号没有修理厂。所以北线一般最好两辆车一起比较安全点。
第五天天蒙蒙亮我们就起床了，因为要赶到齐乌寺拍玛旁雍错的日出。到的时候湖边非常冷，我穿着两条裤子加长袖，加上抓绒衣和冲锋衣，身上还是感到止不住的寒意。但是非常值得，天边从鱼肚白满满变成粉红，然后变为暗金色，紧接着一下子发出灿烂的亮金色光芒。整个寺庙，经幡，白塔，转经筒，仿佛都笼罩在天穹直射下来的金光里一样。整个亮金色一瞬即逝，不超过五分钟。然后天边就出现仿若火烧云一般的火红色，火红色里又包裹着一层金色。整个云色倒映在圣湖里，使得湖水也出现千变万化的颜色。远处的雪山在云层间显露出三点不变的白色，仿佛只是为了对比。
日出经历了半个小时才结束，我们开到湖边，用湖水洗濯双手和脸。正好远处的纳木那尼峰从云中出来，雪山圣湖相映成趣。
日出结束，司机大哥带我们从玛旁雍措到拉昂措，和我们说，接下来就是看我们运气的时候了。纳木那尼来10次能看到9次，冈仁波齐却不是次次能看到。结果说完没两分钟，车一转弯，冈仁波齐就显露在山后。右边是重重的黑云，唯独露出一点雪山。我们都不敢相信自己的运气。司机大哥说，错不了，就是冈仁波齐。那个方向在这个季节只有一座雪山。神山冈仁波齐仿佛专门为我们开了一道小口一样，在远远的天边露了一小脸。
至于拉昂措，那又是另一个故事了。
拉昂措紧邻玛旁雍错，不过却什么生物都没有，所以被称为“鬼湖”。虽说没有生物，但是湖水清澈见底，在岸边可以看到很远。湖水和玛旁雍错的千变万化，羊卓雍措的宝石蓝，纳木措的一望无垠均自不同。那是一种接近透明的天空的颜色。
看过拉昂措，我们赶紧往回跑。其实当时离扎达土林只有200多公里的距离。但是同车有个美女有事，飞机都订好了。我们都担心她的飞机赶不上。
司机大哥车开的很快，但是开到桑桑的时候还是晚上十二点多了。本来按照这个速度，我们两点不到就能在拉孜睡觉。谁想到在离桑桑2公里多的位置上，居然碰上了泥石流。
先是开到一半堵车。全车只有我是穿着冲锋衣睡觉的，所以就穿着冲锋衣带着雨伞去看看情况。走到最前面，看到路面铺满了一层泥，几辆车陷在泥里面动不了。跑回去把情况一说，司机大哥决定自己去看看情况。回来说前面泥石流走不了了，脚踩下去至少20厘米的泥巴层，还是边缘地区。中间陷了一辆指南者和一辆大挂。以指南者的性能，我们车去了也是白给。已经有人电话通知了对面桑桑，他们会派辆铲车过来。
最前面的车已经堵了四个小时了，我们面临一个艰难的决定，是等还是往回走？前面2公里就是桑桑，往回走到二十二道班就要170公里左右。晚上等又不知道等到什么时候。犹豫半天，还是等吧。幸好车里的油够，人又够多，油烧上一晚上也不会冻着。桑桑那里有加油的（正好昨天刚知道），油不够路一通就能加上。不过车还是往后退到队尾，省的后面往前走的把另一条线也给堵了，我们想出也出不出来。
这个决定非常准。我们大概等了一个小时多点，就看到对面有大灯，铲车开始工作了。再过了半个小时，我们就可以从旁边的小路开始走了。当然，大车师傅们还得堵着。</description>
    </item>
    
    <item>
      <title>西藏行——第十一天（吉隆）</title>
      <link>//blog.shell909090.org/blog/archives/2494/</link>
      <pubDate>Sat, 02 Nov 2013 20:06:19 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2494/</guid>
      <description>第三天的行程比较简单，从吉隆县城开到吉隆镇，然后去乃村，扎村，吉普峡谷，吉甫村。
早上天不亮我们就出门了，因为路还在修，到了8点就封路了。走到半路，就远远看到一座雪山，很漂亮。全车人都不知道是什么雪山。大家查了一下，中文名字叫做卓让哈根，高度只有6000多米。但是整个雪山在天边露出来的时候，全车都沸腾了。感觉上比珠穆朗玛好看很多，像是一位美丽的姑娘在苍翠的群山间偶尔露出一下头。珠峰那就完全是女神。
不过车快开到的时候，有云飘过来挡住了雪山，终一天也没有散去。不得不说是这次吉隆之行的一点遗憾。
吉隆是个很小的镇子，在中央的广场旁有个叫做帕巴寺的小寺庙。寺庙虽小，但是据说有上千年的历史。村子很淳朴，而且物价比西藏其他地方便宜多了。我们在广场对面吃的包子，一块一个，味道很好。
上午我们去的乃村，路非常不好走。和上拉姆拉错类似，全是危险的盘山路，没有护栏，最窄的地方只有一辆车多一个人的宽度。一个搞不好就会从山上摔下去。而且刚刚有下雨，路上全是泥巴和大石头。就这样，我们一辆2.4L汽油机的SUV，带着6个人，居然还能上去。
乃村在这个时节并不好看，最好看的时间是4-5月。那时候正好杜鹃花开，漫山遍野。而且正好能看到远处的雪山，风景非常独特。我们去的时候只能看到满山的野花，却不是杜鹃。
下山的时候，同行的两位美女摘了两颗松果，一堆野生花椒。这里的松果是紫色的，外面挂着一堆结晶，不知道是松脂还是松糖。花椒则是红色的，非常香。我们都在水壶里放了几颗，直到旅行结束，仍然保有味道。
扎村的路更难走一些，在快到湖泊的时候，因为路太难走，司机大哥放弃了。山路陡峭，万一陷在泥里上不去也下不来，一点办法都没有。
吉普峡谷是个很特殊的峡谷。宽度只有20多米，深度却高达几千米。我们往下看下去，只有深不见底可以形容。峡谷对面有个村子，叫做吉甫村。两边来往只有一座吊桥。峡谷上方风很大，每次从上面走过去都不禁害怕掉下去。
不过翻过吉普峡谷，对面的村子就非常的漂亮。具体不多说了，看照片吧。
最后特别提一下普吉镇头的尼泊尔餐厅。餐厅的东西很有特色，很好吃，而且很便宜，是我们整个旅途中吃到的最便宜的一家。</description>
    </item>
    
    <item>
      <title>西藏行——第十天（珠峰地区）</title>
      <link>//blog.shell909090.org/blog/archives/2491/</link>
      <pubDate>Thu, 31 Oct 2013 19:44:46 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2491/</guid>
      <description>今天的行程很单纯，去珠穆朗玛峰。说起来很简单，但是却要买每人180的门票，每个轮胎100的车辆费。然后开一个小时的盘山烂泥路，三个小时的烂石子路，只为看世界第一高峰一眼。然后再按照原路开回去，三个小时的烂石子路和一个小时的盘山烂泥路。如果不是特别有兴趣的人，建议仔细考虑一下是否值得。
而且，可怕之处还不在于此。珠峰大本营在5100多米的地方，在那里住会产生严重的高反，身体不好的命丧于此也不奇怪。不过说来也怪，我的身体算不上好，却在一路上完全没有高反。就是开车时间长了脖子痛，进入低原或者休息良好就会消失，算是一种另类的高反吧。
早上我们跑到白坝吃早饭。找了半天没有黄大仙想要的豆浆油条（找遍西藏都没有豆浆，只有油条），只能去吃炒饭和汤凑合。值得安慰的是炒饭味道还不错。饭后有一帮当地人来推销化石。我买了一块鱼贝化石，一块鹦鹉螺。不过悲剧的是，几个小时颠簸下来，鹦鹉螺已经完全坏了。
从白坝出发不久，我们就过了查查检查站。这个检查站是我在西藏见到的最严的检查站，所有人必须下车，凭身份证和边防证过关卡。然后拿着过关凭证发放过关。据说去尼泊尔也是从这里过关的（樟木）。
昨天下了一天的雨，早上起来时还有毛毛细雨。按照常理来说，这时候上珠峰是什么也看不到的。不过当我们跑了几个小时到珠峰脚下的时候，整个天空打开了一线。说来也怪，前后左右都是云，唯独珠峰那里开了一块。等我们在珠峰脚下疯完，开始往回跑的时候。回头看了一下，整个雪峰又被挡在云层里了。
要我说，我们这次的运气算是很奇特了。什么奇怪的事情都碰到过了，雨夜赶路，泥石流，交警，和明明不可能看到，却看到了雪山。
晚上我们就不回白坝了。直接从佩枯措旁边过去，住吉隆。在日落时分，正好开到了希夏邦玛峰下面，顺便照了几张。</description>
    </item>
    
    <item>
      <title>西藏行——第九天（日喀则）</title>
      <link>//blog.shell909090.org/blog/archives/2489/</link>
      <pubDate>Wed, 30 Oct 2013 00:16:23 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2489/</guid>
      <description>今天是阿里南线第一天，出门时天气还是很不错的，艳阳高照。在西藏这里玩就靠天气，天气好什么都有，天气不好就彻底玩完。
今天的行程是夏珠林寺，羊卓雍措，卡若拉冰川，满拉水库，江孜古堡。
夏珠林寺是路过看的，就在机场高速不到机场五公里的地方，从村庄里面绕过去。很值得看。寺庙很清净，游客不多，可以慢慢的看各种佛教人物塑像。不过和西藏的各大寺庙一样，对佛教没感觉的，怎么看也不会来感觉的。
羊卓雍措是拉萨附近的一个湖，喵也去过，评价是一条小破河沟。我去的时候略略有雨，感觉上确实是一条破河沟。不过到了那里后，很快就云开雨散，湖水显现出宝石蓝色，很妖艳的感觉。
说到羊卓雍措就不能不提我们在浪卡孜吃的川菜。又贵，又不打折，是我们一路以来吃的最难吃，最贵的一顿。如果你有的选，最好不要在那里吃。不过大多数人都只能在那个地方吃午饭。
卡若拉冰川在羊卓雍措下去，乃钦康桑雪山那里。称不上最大的冰川，也不是最好看的。不过唯一的好处是，离西藏够近。站在下面能看到冰川的距离很近。往后不远是满拉水库，有人卖各种东西，远远还能看到遗弃的古堡。我们照了半天，后来才知道在西藏这种遗弃的古堡遍地都是，而且都修在贼高的山顶上。不知道修的人脑子怎么长的。
不过也许宗山抗英古堡是个例外。这个古堡是红河谷的发生地和取景地，在一个超级陡峭的山上的古堡。旁边就是白居寺。宗山古堡里面是什么都没有，而白居寺则需要80的门票，所以我们都没有进去。不过门口有买石刻的人，东西还不错。
当天晚上，原本预定到白坝休息的。结果因为翻山的时候下雨，所以改为在江孜休息。</description>
    </item>
    
    <item>
      <title>不是段子</title>
      <link>//blog.shell909090.org/blog/archives/2486/</link>
      <pubDate>Tue, 08 Oct 2013 13:41:37 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2486/</guid>
      <description>上个月在京东买了个充电器，结果不到一个月坏了。刚刚打电话给京东要求上门取件返修，被告知不支持上门取件。
我打过去说那你们网站上的条款是怎么回事？
客服说我们现在不支持。。。
我说废话我知道，我问的是网站上说有上门取件的条款，怎么回事？打算违约咯。
他说不是。
我说那你们提供上门取件？
不提供。
那服务到家条款呢？
准备违约。
我擦，你丫费劲不费劲啊。
然后我再问他，你们就这么不管这个条款了？这玩意可有法律效力的哦。
他说，我们可以提供运费报销。
我说算了吧，我不大相信你们。白纸黑字的都能违约，你空口白话的能信？要运费报销可以，你们email给我一份offer，详细列出我应该使用哪家快递，或者在多少钱以内，你们可以报销。
他说这个不行，其实我们没有运费报销，只是一线客服有权补偿客户20元的京东券。
我说我擦你觉得我还会再买京东的东西么？
我看不会。
我说那你补偿京东券干吗？我这辈子都用不上，当我脑子有病阿？
没有没有。
我又说了，我要是不让你们发email你就不打算告诉我其实不是报销运费，而是补券咯？
没有没有。
我说那你刚刚说了么？
没有没有。
那要是不让你们发email你就不打算告诉我细节咯？
是的。
你丫捧哏的吧。</description>
    </item>
    
    <item>
      <title>西藏行——第六到八天（拉萨）</title>
      <link>//blog.shell909090.org/blog/archives/2483/</link>
      <pubDate>Sat, 21 Sep 2013 15:46:47 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2483/</guid>
      <description>今天修整一下，逛一下拉萨。
首先要谢谢朱朱陪我们逛拉萨，拉萨是个很好玩的地方。
早上我们去仓姑寺吃的早餐，两种藏包子，一种素的，一种荤的，味道都很不错。不过西藏这里的包子很好玩，长的总像汉族的饺子。两种面条，一种凉面有点辣，一种牛肉面，是用青稞做的面条，久煮不烂。不过朱朱说仓姑寺的甜茶要看运气，我们还是省点肚子去大光明吃吧。
接着我们起身出门，绕着大昭寺走了一圈。先看了传说中的玛吉阿米，装潢很不错，很漂亮。而且从窗外望出去的风景很好。玛吉阿米正好位于转角，能看到八廓街两条街道，街上熙熙攘攘转经的人群。但是排队很长，东西就不在这里吃了。
我们围着八廓街转了半圈，去老光明喝的甜茶。这里的甜茶很有意思，一杯七毛，摆一堆钱在桌子上，然后喝茶。茶没了旁边会有人帮你添上，然后自动的从钱里面找合适的。如果没有零钱还会自动找零，感觉完全自动化。
午饭我们去的尼泊尔餐厅吃饭，东西很不错，而且很有特色。例如炸土豆丸子和炸肉丸。基本价格在拉萨还不算贵，大家去了可以随便点。
最后在大昭寺门口买了一堆东西。包括大家后来看到的卖萌魔术头巾和墨镜，以及要带回去的一堆礼物。</description>
    </item>
    
    <item>
      <title>青旅无线组网指南</title>
      <link>//blog.shell909090.org/blog/archives/2478/</link>
      <pubDate>Thu, 12 Sep 2013 23:30:45 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2478/</guid>
      <description>本文不仅适用于青旅，还包括其他人员密集的场所，通过无线方式进行最低限度的上网。例如公司。
会写这篇，主要是旅行过程中，发现网络状况实在无法接受。像阿里地区这种没信号的区域就算了，在很多青旅里也因为种种原因上网不畅，实在让人很不爽。所以写一篇guide出来，说明一下各种问题。
容量估算 首先，你必须估计在一定范围内需要联网的设备数。一般来说，就是某个无线覆盖范围的人员数乘以1.2到2不等的系数。如果是青旅，大概乘1.2就足够了。因为很多出来玩的人只带手机，偶尔会带ipad。但是在公司，一般至少到2。因为有很多人会将笔记本和手机同时连接上网络。
每个设备连入网络，就会占用三样东西，IP地址，带宽和AP连接数。
IP地址一般问题不大，只要同时连入网络的设备数不超过200台，就可以塞到一个C类子网里。但是注意，这时候DHCP的空间要足够。
带宽的计算上，一般一个手机按照5KB算，一个电脑要10KB以上。粗略点可以将设备数乘以40kbps，得到所需的带宽。
AP连接数就是每个设备算一个。
例如，在某个青旅的大厅里，巅峰时刻可以坐下15个人。这时候，设备数估计是15*1.2=18台。带宽估计是720kbps，AP连接数18。
限制 容量估算有什么意义呢？主要就是决定你租用电信带宽的大小和选用路由器的质量和数量。带宽都懂，主要说一下路由器的质量和数量。
可能很多非专业人士不知道，路由器能够同时在线的终端数量是有限的。这个叫做AP的待机数。超过这个数字有的路由器也许还能接入几个，但是就开始各种不稳定了。例如TPLINK的TP703N，待机数就是8。同时接入8个设备问题不大，再多就不好说了。而TPLINK的一般路由器，待机数都在10-15之间。企业级的最高可以达到32（WVR450G），但是价格高达500多，也不合算。
很多青旅的问题在于，明明申请了一根很大的线路，但是却随便的弄了一个路由器。当人都集中到大厅里的时候，路由器待机数马上不足了，很多用户连都连不上去。由于智能手机的普及，这个现象正越来越明显。在旅行中我几次用自己的路由器，用网线连接到主路由器上。在别人羡慕嫉妒恨的眼神里面老神在在的上网，就是这个原因。
个人推荐使用TL-WDR3320。一方面他的待机数是20，不算低，价格只有200左右（京东价）。另一方面这台设备还支持5G网段，可以让支持5G的设备通过5G网段接入（例如苹果的设备），而不占用2.4G的宝贵频道。两台合起来，比WVR450G要支持更多，而且更便宜。当然，这种替换是有代价的，其缺点就是滥用了频道，可能造成频道管理上的困难，我们稍后再说。
继续上面的例子，大厅里18台设备，那么就可以用一台TL-WDR3320搞定。
覆盖 在计算完容量后，我们复杂的网络设计之路才刚刚开始。记得我上面强调过一个词，一定范围内需要联网的设备。这个词的意思是，如果人员分布在了各个角落，你需要独立计算无线覆盖。
很多青旅的问题在于，压根没有考虑无线的覆盖性，就在中央大厅拉了一个路由器了事。结果一帮驴子半夜三更不睡觉在大厅里刷手机刷明天的线路。。。
关于无线的覆盖，是一个挺复杂的问题。简单点的解法是在android手机上下一个wifi analyse软件。然后选个你觉得OK的点，把AP接上电（不用联网）。用软件可以看到AP的信号强度。然后来回走动一下，看看是不是每个位置都能保持70dbm左右的信号。如果不行，再换点。
还是上面那个例子。大厅里面15个人，但是在住宿区域分为三个部分，每个部分三间房，第一，二部分每个房间4张床，第三部分每个房间6张床。
首先带宽就要重算。第一，二部分都是15台设备（三间房x四张床x1.2），第三部分22台设备（三间房x六张床x1.2），总计52台设备，2080kbps。也就是至少2M的网络，建议申请4M。
注意这里算的时候不要重复加大厅的人了，一个人要么在大厅里要么在房间里，一般不会同时在。
其次，大厅，每个部分都要分别装一台TL-WDR3320，总共4台。其中第三部分的待机数略不足。好心的可以补一个WR703N补足，没这个闲功夫的就赌房间不会总是客满吧。
频道分配 这个就是更细节的问题了。
记住几点，wifi有11个频道可用，其中间隔5以上的没干扰。所以一般1,6,11不互相干扰。
当然，相邻的两个AP最好不要用互相干扰的频道。
所以你就知道，如果大厅人数多，只用一个WVR450G会在频道分配上好算很多。如果是两台AP，就比较难管理了。
刚刚的例子继续，把频道6分给离的最远的两台AP，就保证4台设备互相不冲突了。如果补了WR703N，那么就分配一个合适的频道吧。
连接结构 上面讲了半天如何计算需要几个AP，布在什么点。现在讲一下如何连接。
简单来说，就是用每个AP的LAN口拉一条网线出来，接到其他AP的LAN口就成。这样就能保证AP的彼此相连。至于彼此间是用星型，都接到一个AP上。还是用线型，一路AP一个接一个接出去，都可以。只要别接出环来就好。有的AP不支持STP协议，接出环就会无法工作。
最后，再把外网网线插到某个AP的WAN口，搞定。
插入WAN的路由被称为主路由。一般来说，如果用户数大于100，主路由需要足够强才行。如果TL-WDR3320不够，还是要一台WVR450G。
配置 一般路由器都是192.168.1.1，然后打开DHCP。当使用上面说的这种配置结构的时候，就不能这么配了。
你首先要将主路由配置为192.168.1.1，其他路由的LAN口依次配置为1.2 1.3等等。然后关闭其他路由器的DHCP功能，并为每个路由器分配合适的频道。
如果网络不需要保密，建议配置为随意连接，待机数还可以增加一些。但是一般这样会惹来大量蹭网的，所以一般需要将安全设定为WPA2。所有AP设定为一样的名字和密码，设备会自动寻找信号最强的那个。
如果用的是TL-WDR3320，那么还要注意分别配置2.4G和5G频段。建议2.4G和5G选用不同的名字，但是可以用一样的密码。这样用户可以自行选择是使用2.4G网络还是5G网络。
细节 有空的话，可以看一下我这篇合用两个路由器的几种方案</description>
    </item>
    
    <item>
      <title>西藏行——第五天（纳木错）</title>
      <link>//blog.shell909090.org/blog/archives/2476/</link>
      <pubDate>Wed, 11 Sep 2013 20:04:12 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2476/</guid>
      <description>今天的行程是纳木错。
早上的行程非常夸张。司机是藏族，接了我们去东措接人。结果跑过去发现，一辆10人坐金杯上面试图塞下13个人。这怎么可能！！！经过司机和旅行社长达10分钟的藏语沟通，发现问题是这样的。
有个人昨天订了行程，但是又不想去了，于是打电话去退。结果谁知道不能退。不能退就去吧，谁知道旅行社又取消了他的名额，现在他钱拿不回来，人又不能走了。好吧，那少一个人，10人座的车上还要坐12人，最后一排硬是塞了4个人进去。
西藏的旅游就是这样不靠谱，宰客，坑客，强行乞讨，强买强卖常有发生。从东措到我们住的地方，本地人大概是7元，一看是游客就是15。报名的时候是商务车，跑来一看是金杯，上不上呢？反正退钱是不行的哦。去纳木错的时候，一路都有小孩子围着你要糖（这还算客气了）。在纳木错门口，和我们同行的一个人看到一只藏敖，随手拍了一下，结果被当地人冲上来要钱。他自己删了照片也不行。最后还是花钱消灾，和藏敖重新合了一张影。
而且很多时候沟通的不通畅导致有些问题他不是故意的但是客观上你就是被坑了。我们从住的地方坐三轮到布达拉宫西边，结果师傅给我们拉到了东边，说过不去了。价钱倒是收的东边的价钱，问题是我们就不知道下面该怎么走了。
更那啥的是，在组团，拼车之类的时候，你还要忍受同行的人的不靠谱。例如临走前晚大晚上随意取消行程，结果晚上12点接到电话说明天不去了。所以一般西藏旅游我都建议把拉萨安排在最后一天，这样万一碰到问题延误一天，你可以把拉萨先顶上去。
纳木错的行程其实很简单，早上开过去，过那根拉山口，直接开到纳木错。中午游览一下，在附近吃点东西，晚上拉回去。
纳木错旁边是念青唐古拉山，如果是冬天，应该可以看到连绵的雪山。但是现在是夏天，只能看到几座雪峰。大家知道我们看雪山的运气——果然又是半张脸。纳木错的湖水倒是很漂亮，不过在游客最多的地方有很多泥沙。湖水反复翻卷泥沙，所以看起来很脏。跑到离游客多的地方就能看到漂亮的湖水。
纳木错的藏餐很不错，我们点了酸奶，糌粑，牛肉汤和咖喱饭，两个人只要63。糌粑和酸奶的味道很不错，很有西藏特色。牛肉汤的料很足，里面好多牛肉。
去纳木错的时候要注意，纳木错海拔4700，那木拉山口5100，注意防止高反，否则就玩不好了。</description>
    </item>
    
    <item>
      <title>西藏行——一到四天（拉萨，林芝）</title>
      <link>//blog.shell909090.org/blog/archives/2474/</link>
      <pubDate>Tue, 10 Sep 2013 21:26:54 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2474/</guid>
      <description>第一天很无聊，下了飞机，坐大巴到了市中心。换三轮到喵的大学同学的店里。吃两顿藏餐，一天就结束了。
高原反应并不是很强烈，主要就是嗜睡和偶尔的头晕。
午餐没啥好多说的，晚餐比较不错。我比较推荐土豆烧羊排，里面放了孜然，很好吃（至少比较符合我们的口味）。木耳有点辣，味道也不错。有一道特色黄瓜，往黄瓜里面灌酸奶和蜂蜜的。这道的黄瓜有点生腥气。喜欢的人可能觉得不错，我觉得味道重了点。这里还有酥油茶。我们点了两个人的份，结果完全喝不完。最后被我灌进暖水壶里面带着跑了。
第二天开始，我们就出去玩了，第一站是林芝。一方面这是个经典线路，时间恰好。另一方面林芝海拔2000多，容易缓解喵的高反。
从拉萨到林芝的直线距离是200多公里，路上距离是400多公里。在西藏地区限速40-50公里，所以要开8-10个小时。师傅让我们路上玩几个景点，吃个饭，开的时候就快一点。西藏这里的限速很有趣，并不是在路口布置测速装置，而是在路上部署检查点。到一个点盖个章，如果下个点到的时间比预计的早，那就是超速了。可是我们一路走一路玩，顺便休息和吃饭。所以行驶速度还是很快。
一路上有这么几个景点：米拉山口（5100米），中流砥柱，巴松错，卡丁沟。米拉山口和中流砥柱是路过的，卡定沟是我们回来时玩的。其余还有几个小景点，看不看都无所谓的。
我们在去的路上去巴松错看了一下。非常坑爹，强烈建议去掉这个景点。只有一个普普通通的湖，和纳木错差的很远，却要价165（纳木错只有80）。到了八一镇后，休息了一晚，第二天看了一下鲁郎林海。结果在色季拉山口（4700米）看到大片的云雾。最后决定还是不进去了，反正这样景色和外面没有什么太大区别。
林芝的核心景点其实只有一个，雅鲁藏布江大峡谷和南伽巴瓦峰。南伽巴瓦高度其实只有7700多，但是林芝海拔只有2000出头。两者落差高达5000米以上。大峡谷观景台又离两者只有5-10公里的距离。在大峡谷观景台俯瞰大峡谷，仰望南伽巴瓦，几乎都是30度以上的仰俯角度。面前婉如横卷着一副名为自然的巨画。
我们看雪峰的运气好像一向不怎么好，贡嘎山只能看到半边，玉龙雪山更是什么都看不到。南伽巴瓦也是，等了一个多小时，只能看到半边。当地人说，最佳观景时间是4-5月，如果有闲暇的朋友不妨挑这个时间来。
如果是自行徒步，就不要像我们这么玩了。最好的是走到直白村，然后住下。
另外特别提醒一下，大峡谷这里可能有当地人和司机介绍你逃票。说的挺不错，只要从外面绕一下，五六分钟就好。事实是五十六分钟都搞不定，要走过大片的农田，从河滩上涉水而过。唯一的好处就是没有参观时间的限制。如果是普通购票者，大巴开到一个地点，然后下车参观，到时间就让你上车去下一个景点。当地人带你就比较没有这种问题，所以我们得以在观景台上等上一个多小时。
林芝美食不多，我只提一下石锅鸡。石锅鸡以鲁朗为佳。简单来说是以石头锅子做火锅，里面放上松茸鸡汤。先喝汤吃鸡，然后再涮一些料进去，和火锅颇为类似。松茸不愧是菌菇之王，味道鲜香无比。就是价格比较贵，我们五个人吃掉了一大锅石锅鸡，花了400。
回来的路上有个叫做卡定沟的景点，目前路还没有修好。但是这个景点是比较值得看的一个。门票只有20一个人，里面有一个瀑布溪流，景色还算不错。不能算多好，但是性价比颇高。
三天林芝行，总共每人2100左右。普通轿车，司机车费900。住宿300一间，四个人要负担司机那间，一人450。巴松错门票165，雅鲁藏布江门票290。路上吃饭餐标大约都是50，只有石锅鸡那餐是100，因此五餐总计300。我们节约了点，所有不算其他消费（例如买水，零食，氧气）2000一人。如果全套按照标准来，可能要到2200-2400。</description>
    </item>
    
    <item>
      <title>台湾行——第八天，台南</title>
      <link>//blog.shell909090.org/blog/archives/2467/</link>
      <pubDate>Sat, 17 Aug 2013 21:27:51 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2467/</guid>
      <description>可怕的早餐 台南的鱼肠是我吃过的最可怕的早餐。别误会，并不是说难吃。相反，鱼肠非常好吃，鲜而不腥。通俗点说，就是鱼的内脏，在杀的时候挑出来马上去煮。说可怕，是因为必须现杀现煮，才能没有腥味。所以店家只在早上5点半开卖，卖光就没了。所以要吃鱼肠，需要5点起床才能吃到。即便如此，还有无数本地吃客在那里排队。我们头一天45分到，已经没了。
这次的鱼肠是15分出门，30分到店里。7个人，4份鱼肠汤，2粉干煮鱼肠，基本通杀了店里所有的存货。鱼肠吃的时候要注意，鱼内脏里的胆是没有取出的，所以如果不挑出来吃的时候会有点苦。而鱼肠的肝很柔嫩，稍微用力就会破碎。大多数鱼肠的汤在吃完后都是浑浊的，就是因为肝脏破裂后形成的。我一顿吃下来汤居然还清澈透明，不得不感叹洁癖救天下。
另外，鱼肠不是很好消化。我6点吃的鱼肠，知道10点还在肚子里面翻滚，什么都吃不下。吃了雨苍弟弟拿来的胃药，又走了一阵才好一点。所以如果是新手，最好几个人点一份鱼肠比价好。一方面以防有人不吃浪费东西，另一方面以防消化不良。还有一点就是大家抢的都很辛苦，留点机会给别人比较好拉。
台南深度游 今天雨苍去台北演讲，由雨苍的弟弟找他的一位朋友带着进行台南深度游，jserv也过来玩玩。
台南在台湾是以古迹和美食而闻名的城市。明延平郡王郑成功在台湾开府，就是在台南和高雄（安平和打狗）。一直以来台南一直是重要的政治和贸易中心，直到日据时代，才在台北建立行政中心，使得行政职能北移。雨苍的弟弟介绍说，台南人喜欢吃甜是其来有自的。在以前，台湾没有糖工业，吃糖全靠进口。因此只有贸易中心，有身家的人才吃的起糖。那时请人吃甜食就和我们现在戴机械表一样，是一种炫耀身份的象征。也因此，台南人的脾气有点自傲，和现在的上海本地人很类似。
就我所知，很多台湾人祖上都是从大陆过来的，时间基本都是清朝。所以说台湾本地人，基本就是两类，汉族和原住民。汉族指的是清朝从大陆迁移过来的闽南居民，而原住民则是在此之前在本土居住的高山居民。前者的语言基本是闽南语，而后者则是原住民语言。这些语言非常冷僻，而且和汉语根本不是一个语系。闽南语属于汉藏语系，而原住民语言属于南岛语系，和马达加斯加的居民属同一个语系。
再往后，从大陆败退过去的国民党军队各地人都有。当这些军人退役后，他们的后代就逐渐形成一个个眷村。这些眷村大部分在台湾北部，而这些人则被本地居民称为外省人。眷村出来的人中有不少人颇有成就，其中的佼佼者就有邓丽君。他们的方言就比较复杂，有山东话四川话等等都有。当然，国民党曾经推行国语教育，因此目前台湾通行的是国语。在台北街头随便拦住一人，用普通话就可以无障碍的交流。然而台南就基本做不到这点。
当然，比较讽刺的是。如果我的记忆没错，在日据时期后，台湾就逐步发展成糖和米业的重要基地。。。
我们的周导很专业的拿出一份清朝时期的地图（天呐），然后开始解说各个门。介绍的顺序基本是按照原本的几条溪流来的。当然，这些溪流现在都已经被填上消失不见，然而溪流的走向很大程度上决定了道路的走向和房屋的朝向。当然，说是这么说，然而介绍到一半的时候，我们就基本失去了方向概念，就是不停的走，吃和看古迹。所以我就跳过古迹的细节介绍，反正大家去台南一定会去赤坎楼（就是附近有很好吃那家锅烧意面的）和安平古堡，其他说了你也分不清在哪。我还是干脆介绍美食好了。
第一站到的是一家十八卯茶楼，这个茶楼是基于日据时期柳下食堂改建而来。柳拆字为十八卯，因此就作为茶楼的名字。茶楼的二楼是茶文化博物馆和分手博物馆（？？）。我们绕到后面，到老板开的另一家茶楼里买了点茶喝，果然很不错。
后面我们就去吃黑白切。我不知道这个东西怎么解释，大概就是各种东西用水汆烫过后直接装盘上桌，沾各种酱来吃。我们还去隔壁买了柠檬红茶来喝。台湾这里的红茶都很灵，连夜市放在大桶里面随便放来喝的红茶都很好喝。对比起来，大陆这里的红茶就都不怎么像话了。
后面我们去吃虱目鱼鱼丸做的羹。比起鱼肠来，这个对普通人更容易接受一些。鲜而不腥，而且，不用早上排队。
台南地理游的最后一顿是以江水号做结。这家冰店貌似很有名的样子，据说他们夏天做冰，冬天做丸子汤圆。我点了一碗凤梨冰，端上来看着好像一堆冰上面淋一勺糖水，和照片上相去甚远的样子。不过翻起来可以看到底下有一大堆菠萝，还是很有料的。更关键一点是，冰不够吃随便加。。。
天文台 吃过冰，台南的导游小周和jserv就各自回家了。雨苍的弟弟又带我们去南瀛天文台参观。台湾其实并不是很适合做天文研究。一方面人员密集，光害严重。另一方面山地不够高，热扰动严重。不过最麻烦的是会有大陆吹来的雾霾。。。
在天文台，我们看到了两台专业级的天文望远镜。一台是25厘米口径的，一台是30厘米口径的。其中25厘米口径的天文望远镜可以直接接thomas那台2W多的专业相机，号称thomas接到过最碉堡的镜头。
雨苍弟弟的同袍就在那里当志工，而且是全家都去当志工，这点让我很惊讶。因为一般理解上的志工都是业余时间参与活动，或者根本以学生为主。既然是同袍，那就不会是学生（因为要毕业后才会去当兵），当天又是周五。而且全家一起。让我颇为感慨台湾的社会力量。包括COSCUP，里面居然有上百名志工参与，而且很多居然是女生。后来公布出来的消息，这次的总召居然还要面试志工。我们办PyConf的时候，基本就是几个老油条撑全场，参展的游戏公司派几名妹子支援了半天，就这样了。别说面试，根本是人都找不够。
和鸟哥碰面 去完天文台，我们跑去旗哥牛肉汤和鸟哥吃饭。一般来说大陆玩linux的没有不知道鸟哥的吧。结果跑去一看，几个人坐在没有冷气的店里面，一点都不显眼。不由感慨，这才是最高境界的程序员，上的了讲台，下的了夜市，穿上西装像精英，穿上背心像大叔。。。
晚上的续摊 晚上雨苍回来，又抓我们出去吃宵夜。小杜意面和咸粥，中间有买波哥（和清玉差不多）来喝。比起前几天来，已经算是收敛的节奏了。thomas因为洗澡太早，未能参与。</description>
    </item>
    
    <item>
      <title>台湾行——第七天，台南</title>
      <link>//blog.shell909090.org/blog/archives/2465/</link>
      <pubDate>Fri, 16 Aug 2013 10:43:32 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2465/</guid>
      <description>高雄 起床后我们在高雄吃了早午餐，东西是西餐风格的，内容物接近午餐，量却更少一些。
台南 回台南第一件事情就是去吃鸡肉饭。台南这里好像很喜欢各种炒饭，鸡肉饭卤肉饭，都做的很好吃的。相比起来上海的综合海鲜炒饭就是战斗力只有5的渣渣。
吃完饭去买清玉和顺天冰棒。清玉是台湾的茶业连锁，卖各种茶饮料什么的。顺天冰棒是一家开超过30年的冰棒店，在一条很小的巷子里，而且雨苍的弟弟说那个冰棒很贵（虽然我一点都不觉得17台币很贵。。。大约就是3.5人民币么）。然而还是能开30年，好吃不好吃你可以自己想象。我吃了一条花生牛奶的冰棒。口味很特殊，真的是花生牛奶的冰，而不是调味塑形过的冰激凌。不知道店家是怎么做出来的。
后面买了一家蜜桃香杨桃汤，实话说我觉得太甜了。我们三个都没动。
晚餐 晚餐是和雨苍家人一起吃的。开始去的那家店没开，就开好远去吃鳝鱼意面。这里的鳝鱼意面偏甜，但是非常好吃。就算thomas这种挑嘴的人也吃的赞不绝口。而且他不吃肝汤，那个汤的味道也很灵，是用鱿鱼，猪肝来煮，味道鲜美。我觉得老板要是把店开到大陆去会直接人气爆棚。不过说说而已拉。
主要的问题在于原材料。雨苍提到过，好的台南老店甚至连分店都开不出来。因为他们对原料很挑。要做好吃的东西，必须和专业的上游买专业的材料。他们这里买个牛肉都是和屠宰商家预约的，5点吃的牛肉汤和8点的牛肉汤味道就会不一样。开个分店都会碰到原材料供应商产能不足，何况把店开到大陆去。
吃过晚餐吃宵夜，我们跑到安平去吃冰激凌。一家不知道叫什么名字的冰激凌，口味很特殊。这里居然有——呃——豆腐口味的冰激凌？反正我要了养乐多柠檬和薄荷，小白鼠就让旁边的两只去当。据他们说，豆腐口味的味道还不错。实话说我想象不出拉。
宵夜正餐是虾饼和虾卷。虾饼是台南特产，但是实话说我怎么看着那么像上海的龙虾片呢？而且上海的龙虾片味道还要好一点（也可能是口味问题）。但是虾卷就比较有特色了。虾卷是用小虾和其他材料包成条炸酥，然后切开沾调料吃的。有机会去台南的朋友可以试试。
当天的最后一顿是以依蕾特冰淇淋做结。据说上海也有这家冰激凌，就是很贵。他们在所有需要用水的地方都用鲜奶来替代，因此成本很高，但是味道鲜美。</description>
    </item>
    
    <item>
      <title>台湾行——第六天，高雄</title>
      <link>//blog.shell909090.org/blog/archives/2463/</link>
      <pubDate>Thu, 15 Aug 2013 15:08:25 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2463/</guid>
      <description>恒春 在垦丁的最后一个早上是以抹茶冰激凌作结的。网络上说我们这家旅馆的抹茶很厉害，所以我们专门吃了一回。好像还有个专门的名字叫做宇治金时。吃下来也就是——抹茶冰激凌加红豆啦。唉，也许我没有享受这些好东西的水准吧。
吃过冰激凌，我们就往回跑。路过恒春的时候，去吃了一碗麻酱阳春面。店面很好找，就在邮局斜对面的巷子里。阳春面很好吃，比我别处吃的麻酱阳春面好吃很多。我还点了一碗肝连汤。味道不错，不过可惜到现在我还不知道肝连肉是什么东西，只是在网络上查到说是和肝脏相连的一块肉，大概是横隔膜的位置。
吃饱我去7-11买毛巾。台湾这里的7-11很神奇，不但做零售，而且管提钱，丢垃圾（台湾垃圾桶不是很多，而且垃圾不要乱丢哦），甚至还有冷冻快递！而且这次，在7-11里面看到了思乐冰。雨苍建议我们弄点尝尝。试下来味道不错，大概和可乐味刨冰差不多，不过刨冰更加细腻一些，可乐不充气，而且还不知道玩了什么方法，不会出现一般刨冰开始全是水，后面白冰一块的现象。
最后我们跑到万里桐去浮浅了。本来我打算深潜的，结果店家说要头天通知，还说明天有个女生要深潜。我们明天都要回台南了，所以算了。最后说好浮浅，一个人350NTD。店家给了我们一套连体的湿式潜水服，全体式救生衣，罩住鼻子的深潜眼镜，还有呼吸管。不知道是不是我的用法不正确，虽然店家涂了防雾涂层，但是我的眼镜还是雾朦朦的。
店家的玩法是让教练在前面游，后面的人抓前面人的背心，然后带着转圈。其实我更喜欢自己趴在水面上玩，更自在。只是恒春这里浪大，教练游起来都很吃力，我们就不谈了，搞不好要去外海了。在水里能明显的看到礁石在眼前绕圈。其实不是礁石绕圈，而是海浪拉着我们绕圈。我玩好上岸才感觉到晕船，休息了好半天缓不过来。
下去后我才发现，没深潜是对的。这里的生物样式并不丰富，数量也不多。海水的透明度很低，而且下面到处都是垃圾。如果普吉岛是4.5分，马尔代夫就是4分，恒春这里只有2-2.5分，连潜水的最低要求都不满足。就算是浮浅，充其量就是店家拉着玩玩水，谈不上看什么生物的。
高雄 大平顶是高雄这里的一个观光餐厅，大约在高雄小港机场附近。在山顶上可以看到夕阳，飞机起降和高雄的夜景。那里倒是有很多猫和狗，但是不知道为什么都很怕人。至于东西的味道，不要在意这些细节拉。
具体就不多说了，大家去看照片吧。
晚上我们去彩色巴黎参加了kalug的hacking thursday聚会。那里的网络很快，有电源，东西还不错，而且不赶人。所以kalug的例行聚会都是在那里办的。当天来了一堆朋友，在那里现场玩起了gpg签署。这里先感谢高雄朋友们的热情。
晚上雨苍带我们去夜市大排档吃牛排。这是我头次听说大排档也有卖牛排的，而且味道还很不错，不输饭店。然后是一种不知道什么名字的小吃，就是把梅子蜜饯塞到小西红柿里面，酸酸甜甜的很开胃。
下面我们移到一摊火锅这里续摊。这里的火锅是用肉在锅子里炒熟，然后加入各种菜料和汤去煮。不过这不是重点，重点是我们的前面是小上海香酥鸡，旁边是上海小笼汤包。本着搞笑的想法，我们买来尝尝。怎么说呢，东西看起来差不多，不过好像哪里怪怪的。香酥鸡做法完全不对，鸡也不是鸡柳，反倒有点像台湾的盐酥鸡。小笼汤包说是小笼皮不对，说是汤包汤太少，而且里面的馅料用的是海鲜。这些都不是重点，重点是，这里吃小笼汤包是蘸！酱！油！的！
motel 后面我们去了一摊林妈妈鸡排。就在中山大学旁边，雨苍原来的大学。据说这家鸡排开的时间很长，切鸡排的手法高度标准化，甚至到了有学生在操场上模仿切鸡排手势跳舞的事。鸡排倒是很一般，thomas说还不如他楼下的鸡排。不过附近的芒果剉冰倒是很不错。
晚上雨苍比较累，所以就在高雄住一晚。我们就被安排去观光高雄的motel。三个基友在情趣酒店玩按摩浴缸玩的很high。。。</description>
    </item>
    
    <item>
      <title>台湾行——第五天，垦丁</title>
      <link>//blog.shell909090.org/blog/archives/2460/</link>
      <pubDate>Wed, 14 Aug 2013 20:00:55 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2460/</guid>
      <description>鱼肠 早上我们5点半起床，去雨苍说的那家好吃到爆的鱼肠店。那家奇怪的店早上5点半开始卖，一般6点前就会卖光。因为现杀现做，所以鱼肠非常新鲜，一点都不会腥。我本来以为太夸张了，结果发现可能说的还有所保留。因为我们5点44分到了后发现已经没有了，只卖了短短的14分钟。
没办法，鱼肠只有下次努力抢拉，雨苍只好带我们去吃凉面和菜粽。凉面很好吃，菜粽就有点奇怪了。号称菜粽，里面却没有菜，只有一堆——花生？这个算菜么？
干锅意面 我们回去睡了一觉，然后再起床吃午饭。中午是去一家雨苍吃了20年的店吃干锅意面。干锅意面是一种炸过的面条，再放到汤头里煮。吃起来有点脆脆的和面面的感觉，有点类似两面黄，但是两面黄没有汤头。确实在大陆没吃过类似的东西。
后面还有红茶和冬瓜茶。红茶非常赞，被托总誉为喝过的最好的红茶。冬瓜茶则是和台北喝到的差不多。貌似大陆也有不少冬瓜茶软包装饮料，可是味道和原版差不少的样子。至于卤味则差更多。隔壁买的卤蛋让我很郁闷不能带回上海去。
肉粿和鱼市 下午我们从台南开往垦丁。路上雨苍的老婆说要吃肉粿，所以我们特意跑到一家很好吃的店。结果关门。换第二家，再关门。然后找了半天找到第三家，还是关门。找到最后一家，卖光。杠龟四次，和COSCUP抽奖有一拼。没办法，去太晚了，等下次吧。
所以午餐就改去鱼市吃鱼。比较可怜的就是托总不吃鱼（因为比较腥）。我们点了一包鱼黑轮，一盘生鱼片和一盘鱼蛋。鱼黑轮是一种长条形的鱼柳裹上粉料油炸，托总好歹还吃这个。生鱼片味道很不错，里面有三种鱼，很大一盘，才卖150台币，合30人民币。鱼蛋是鱼子做的肠子，切成片。很鲜，但是很腥。托总吃了一口就吐出来了，让我心头滴血阿。
日式旅馆 我们订的是一家日式温泉旅馆，据说是日本闲院宫载仁亲王来过的。旅馆风格很日式，中间有个小小的庭院，房间的地上还铺有榻榻米。不过最爽的是，浴室里面有个独立的浴池，可以用来洗温泉。
这里的温泉似乎是硫磺泉，洗的时候房间里有浓郁的硫磺味。
海鲜 晚餐（如果我们还分晚餐的话）雨苍把我们拉到了恒春很偏僻的一个角落吃海鲜，不知道他是怎么知道这些奇怪的餐厅的。不过从味道来看，还很不错。一个虾，一个凉笋沙拉，都是大陆也有吃的东西。不过这里凉笋配美乃滋，倒是不很常见。一道炒面味道很鲜，海瓜子大陆也有，可是个头没那么大。每个都超过了一元硬币，几乎有蛤蜊的大小。
比较少见的是鲨鱼皮。一块块像海蛰皮一样的，味道很独特，不过很好吃。
垦丁 垦丁晚上有一条大街，上面都是各种各样的商店，就像步行街一样。可是这条路非但不是步行街，而且从地图上看，还是国道。
我在这里弄了杯芒果冰吃，味道平平。
街中心的位置有个很潮的夜店，我们不敢进去，托总胆大进去了。出来后和我们汇报情况。我发现我没进去是对的，彻底三观尽毁节操丧失。有单身的，有兴趣的朋友可以去试试。
出火 出火是个很特别的景区，白天没人看的，晚上才有人去。说白了就是地下瓦斯泄漏，和空气发生反应燃烧。所以地面上总有蓝色的火焰流出，而且日夜不熄。
出火位于垦丁，光害比较少。而且为了观看效果，出火没有什么太大的光照。这给我们观测星空提供了良好的条件。随便抬头一看，就能看到漫天的星星。天空中有一条模糊的带子，我们开始以为是云。但是随着时间推移，这条带子并不移动。经过和google sky的对比，我们确定这是银河。这是我头次看到银河。
本来我打算拿托总的相机拍下来，可惜他刚刚拿到相机，不大会用。怎么调都拍不下来。最后算了，只能看看得了。不过当天运气很好，在看天的瞬间，我居然看到了流星。可惜速度太快，来不及许愿。
当天的最后，我们算了一下，从早上到现在总共吃了9顿。为了凑个数，我们挑战一天10顿的记录。所以我们跑到7-11吃了最后一顿——泡面。完成成就。</description>
    </item>
    
    <item>
      <title>台湾行——第三四天，台北</title>
      <link>//blog.shell909090.org/blog/archives/2457/</link>
      <pubDate>Tue, 13 Aug 2013 11:12:10 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2457/</guid>
      <description>第三天 士林 今天是雨苍的一个台北朋友开车带我们玩淡水，首先谢谢雨苍和Jenny Lee。
早饭在士林吃的。雨苍点了个蛋饼，我们每个人叫了一份早餐。非常丰盛的早餐，只要80台币，合17人民币。令我感到十分惊讶。看来上海的物价已经全面超过台北。
官渡 官渡那里有一个妈祖庙，我们简单看了一下，绕了一圈。台湾这里的寺庙，不烧香就完全不用钱。这个让我们这帮不付钱就不能进寺庙的人感到很新奇。
雨苍和jenny给我和frank讲解了半天在台湾怎么求签。可惜碰到了两个无神论者（好吧，我是不可知论者）。不过后来看大尾鱸鰻，好像台湾这里的人很信求签。这点很有趣，因为大陆这边的人只在求签结果有利的时候才信(至少我碰到的好几个声称自己信求签算命的都是如此)，不利的话就换一间庙。我本来觉得日本人碰到凶签就系在系签架已经够投机取巧了。。。
官渡的水鸟九二餐厅很赞，四个人去吃，吃到东西都拿回去打包，居然只要2400NTD，合大约500RMB。关键是从大窗户里面可以看到官渡自然公园的水鸟盘旋，是风景非常好的景观餐厅。而且东西超好吃，海鲜炒饭很香。如果在上海有这种店，大概1000一桌也会抢吧。
淡水 淡水那里最有名的就是鱼丸和铁蛋，我买了一堆铁蛋回去准备送人（因为比较耐放）。
台湾这里有很多很有趣的东西，包括一堆奇奇怪怪的明信片。买了一堆邮寄回去，某同学结婚，还特意挑了一张很贵的明信片，也不知道能不能邮到。
八里 我们先是坐渡轮去的八里，据说这里比较有名的是脚踏车。其次就是双胞胎和芋头糕。这两个都是吃的，味道不错，有兴趣的人可以买来尝尝。
渔人码头 渔人码头据说是情侣的最好去处，今天一帮基友加个美女跑过来看夕阳，不知道是什么样的一种节奏。
夕阳很不错，自己看照片吧。
士林夜市 士林夜市疯狂大采购，买了一堆吃的东西。先是牛肉面和蚵仔煎，然后喝了冬瓜茶。frank打了半天平衡弹珠台。我们买了雨苍点名的豪大大鸡排和东山鸭，又喝了印度拉茶。
这里的东西真的很好吃，而且最重要的是，真的不贵。我在这里还买了一副眼镜，据说是日本进口镜架，蔡司镜头。合计只要1100人民币多点，在国内至少翻一倍。仅这一项，大概就能把我的机票打回来。
洗衣房 晚上体验了一把自助洗衣，把衣服丢进去，然后丢几个10元，就不用管了。这样的模式其实很不错，不用在自己家里买一台洗衣机闲置着占地方。我想了一下为什么大陆没有自助洗衣模式，结论其实不是没有，但是都在市郊，不知道为什么。
可是我们没有零钱，所以我们去隔壁的全家换开。我们什么都没有买，全家的前台二话没说就给我们换开了。如果在大陆，估计能换也没什么好脸色。
于是我们在衣服烘干的时候，又绕过去买了几罐啤酒，一边聊天一边等衣服烘干完成。台湾这里的水果啤酒很好喝。而且他们有种啤酒，叫台湾啤酒，这里人叫做18天的。因为瓶子上会要求你18天内喝完，不然会坏。
第四天 故宫 跑到台北故宫，一个不能不看的东西就是翠玉白菜，另一个则是毛公鼎。两个都号称是重宝。其他则有些乏善可陈。不是没什么可看，而是每一件都是珍品。不过话说回来，其实没几件是我看得懂的。虽然很多我知道历史价值，知道地位。可是看不懂就是看不懂，包括翠玉白菜和毛公鼎。
其中尤其是一幅钟馗像，我给大家找来看看，是不是我的艺术鉴赏力不足。。。
高铁 台湾高铁感觉和大陆的高铁差不多，从台北到台南只用了一个多小时。反倒是台南那里换乘的纵贯线让我觉得比较新奇。纵贯线是短途火车，但是和我们的火车不同，他的长相反而比较类似地铁。其实这样比较好拉，反正40分钟也到了。
比较有意思的是台湾这里的票据和盖章文化。火车下来后，票据基本都是缴回的。但是我说要保留，乘务就和我说隔壁盖章拉。现在手里有一张盖过章的火车票。
后来我发现，无论走到哪里，都有一堆章可盖。这里旅行应该准备个本子，然后不停的盖章。这么说起来世博还是有点道理的。
台南 来台南不能不吃的就是牛肉汤。这次居然有人在COSCUP上专门讲解他的项目，要挑战台南牛肉汤。不过我们不用管那么多拉，雨苍带我们过来吃的一定是精品。
牛肉汤不是牛肉面，是一种用本土牛，经过熬煮，加上配料的汤。配上肉燥饭或者其他配菜。我们试了试，味道很不错。有机会去台南的可以试试看，据说大街小巷遍地都是。
下面体验了一把台南的夜生活，打棒球。台湾这里很迷棒球。贝壳以前玩过一点棒球，但是很久没打了。试了试投球，最高55KM。其实估计不止，因为很多高速球控球力不足，都打到边框上去了。
然后就是击打。经过几次试手，只能说勉强打中吧。命中率大概一半，基本都是滚地球和左外野高飞球，只有两个长打。这还是80公里的低速球。托总打高速球基本也是这个成绩。不过打完后我和他都酸痛了两天。
安平就在台南的旁边，这里有两家豆花雨苍说很不错。台湾的豆花和上海不同，买来的时候不是散碎的状态，而是整洁的一块，需要自己搅碎。配上各种糖水（甜党）。我买的是柠檬糖水。另外还有抹茶冰，就是用抹茶冻出一整块冰来，吃的时候做成刨冰。
有空都试试吧。</description>
    </item>
    
    <item>
      <title>台湾行——第一二天，COSCUP</title>
      <link>//blog.shell909090.org/blog/archives/2454/</link>
      <pubDate>Mon, 12 Aug 2013 10:26:44 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2454/</guid>
      <description>早场 今早的签到挺有意思，在嘉宾牌里面含有RFID芯片。用平板照一下就可以完成签到。演讲中有人讲到，他们在做这个技术支持。将来可以用悠游卡或者星巴克卡完成签到，或者互相绑定到主帐号，替代身份登录使用。
上午听说外面有taiwan python社区的摊位，就出去挑战一下。他们找人背对屏幕写程序，挑战三道题对的就有奖品。实话说这个比不许调试更难，也能容易看出水准。这里也可以看到他们的水准。如果大家都不会python的话，一般都是讲一些鸡毛蒜皮的有趣东西吸引一下兴趣。直接挑战这个东西会被当作刁难人拉。
我上去试了一下。第一道是fib，闭着眼也能写出来。第二道是对一句话中的每个单词反向。这道题差一点，功亏一篑。我的解是这样的。
f = lambda x: &#39; &#39;.join(map(reversed, x.split())) 问题在于，reversed返回的是迭代器，而join不吃迭代器。正解是这样的。
f = lambda x: &#39; &#39;.join(&#39;&#39;.join(reversed(i)) for i in x.split()) 所以，拿到一套纪念衫，还算可以拉。
然后我反过来给他们出了一道题目，一行内计算fib数列。这个问题有点难度。
正解是使用Y算子。大家都知道原理了，就懒得写了。 第二个解是我提出来，可以用fib通项公式规避迭代。 然后摊位上有人解出来，可以用set函数来替代赋值，利用列表推导式完成迭代。 最后我发现，python3里面print可以作为函数用，因此也可以做个弊。 反正最后各种作弊解法。觉得他们挺有意思的，回去准备保持联系。
下午的演讲 下午是我的演讲，不得录象。据主办方说，我这个是唯一一个非赞助商，非商业性质的不得录象的演讲。演讲开始的时候，会场就在狂进人，到最后人已经在前排坐在地上了，外面进来的通道上还塞满了人。这是我头一次碰到演讲会场爆场的情况。
内容就不能多说了，反正梗一堆。大家也挺开心。演讲能开心结束我也很高兴。
凯道运动 晚上跟着雨苍去凯道观光。那里正好举行游行，为一位在国军内遭到黑幕待遇惨死的士兵声援（这算不算讽刺？）。
我们跟着frank的一个朋友，从台大医院跑到了会场。会场很闷热，但是气氛很高。人山人海全是人，据事后统计说有20-25万。整个会场很有秩序，我拍了一下地上和垃圾箱，大部分的垃圾都在垃圾箱里。不知道我们什么时候才能做到。
夜市 在去夜市的路上，碰到两个日本来的MM。我们正好要去，就顺道一起过去。
两个日本MM的英语很烂，经常说到一半就开始说日语。偏偏我们的日语也很烂，frank好久不听了。三国语言鸡同鸭讲说了半天，聊的倒是很热闹。
夜市这里的东西都很不错。我们一路走一路吃了过去，大多数东西都很好吃，而且很便宜。一份饼包鸡肉什么的只要60台币，大约12-15人民币。和上海夜市上卖的价钱差不多，但是好吃无数倍。感觉上上海消费比台北还要高。
第二天 抽奖 今年的抽奖可谓一波三折。先是显示器无法投影，然后抽大奖的时候四次杠龟。先抽到两个观众，都不在，然后抽到讲者，再抽到观众，再抽到工作人员，才在。工作人员又在抽奖场外直播，由组长在无线里面喊着有有有有一路跑下来，才好容易领到一个大奖。
个人认为这是最有趣最完美的结局了。
lighting talk 个人认为lighting talk是COSCUP最high的一个环节。
大致概念是这样。当天报名，然后上去讲。每个人五分钟，如果超时就要拔显示器。讲什么都可以，只要大致搭边。今年居然有人上去讲台南牛肉汤。
不过开始的时候，显示器设定并不是很好。大部分人（包括主持人）都无法顺利投影，只能拿着笔记本在摄像头前。直到有个美女（记忆中是mosky，台湾的python女神）提前上去，把mac接好，才能看到slide。
lighting talk之所以是最high的一个环节，是因为在实际操作的时候什么事情都可能发生。主持人又在一边给压力，所以什么荒腔走板的事情都会发生，场面各种欢乐。
庆功宴 庆功宴到一半的时候，大家基本开始串场了。
这次我和台湾大会网络组的组长聊了一下，COSCUP的网路用的是从中华电信租的五条百兆线路，从TICC的机房直接接出来，服务1800人。加上讲师和场务，平均每人31KB/s。
作为对比的，上次PyCon2011，我们会场使用的是2Mbps的线路，服务100人以上。如果全接上去，平均每人2.5KB/s。
所以你就知道为什么网络会爆了。</description>
    </item>
    
    <item>
      <title>一种新的python局部调试手法</title>
      <link>//blog.shell909090.org/blog/archives/2450/</link>
      <pubDate>Fri, 19 Jul 2013 14:33:14 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2450/</guid>
      <description>我们都知道，python里面可以用pdb来调试代码。但是pdb往往不大好用。有时候调试代码往往在多重条件里面，直接用pdb需要下条件断点，设定复杂的条件。
一个简单的办法就是这么干。
__import__(&#39;pdb&#39;).set_trace() 但是有的时候，连这个出现的条件都不满足。例如，代码必须在一个受限环境中运行，很难拿到console，或者其他林林总总的毛病。这时候，我们还有一招秘技。
import pdb, socket s = socket.socket() s.connect((&#39;127.0.0.1&#39;, 8888)) f = s.makefile() pdb.Pdb(stdin=f, stdout=f).set_trace() 在连接到的目标端口上，提前用nc做好监听，就可以在触发断点的时候直接连接上来调试。</description>
    </item>
    
    <item>
      <title>公司的导向</title>
      <link>//blog.shell909090.org/blog/archives/2448/</link>
      <pubDate>Thu, 18 Jul 2013 14:55:14 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2448/</guid>
      <description>客户导向 最初级的公司，是基于客户导向的。所谓客户导向，就是“客户要什么我做什么”。
从服务型公司来说，这也没什么错。但是IT界挣钱的主要秘诀是边际成本递减效应。同样开发成本，如果一家公司用，也许要亏本。但是100家公司用，不但价格大幅下降，还能海赚一票。因为从第二家开始，就没有了研发成本，只需要营销就好了。这就是复制的边际成本递减效应。而基于客户导向的公司，很难做到边际成本递减。为了一个客户的需求，不得不委曲求全，在产品里面反复做出修改。
也许很多甲方在这里会不平。“我提要求有什么错？”，“我出钱的！”。是的，从甲方角度，这些都是合理的。甚至从服务的角度，有这些也是好的。然而从产品角度，对各种业务场景（尤其是非预想的业务场景）的适应，会严重冲击核心系统，造成维护困难。明明90%的客户只用10%的功能，但是还是要维护所有功能。而且每次修改一点功能的时候，都要大幅动全身。由此，不能将第二家客户的研发成本压到最低，导致边际成本递减不下去。
在技术导向公司内，最“明星”的职位是项目经理。他需要负责项目的前前后后各种方面，并且直接关系到项目是否成功。公司离开任何一个程序员（甚至包括老板）都可以运转，但是离开项目经理，目前他正在做的项目就无法完成了。话虽如此，大部分项目经理的日子过的也很苦。因为客户并没有什么特别的理由需要选择你。多个项目组竞争的结果就是低价开发和高价维护策略。
大部分的客户导向公司，在开发系统的时候往往会采取低价策略，有的时候甚至会亏本。然而在维护和后续开发的时候，会提出各种加价要求。因为客户一旦采用系统，就很难将原有系统直接切除。因此反过来，客户往往在提出需求的时候，必尽必全，力求毕其功于一役。这反过来加剧了系统共性提取的难度。
大多数老板对客户导向的问题一清二楚，所以很多人都想做产品。然而不是每个人都能成功的做出产品来。东西不够牛，在营销阶段客户就会选择定制性更好一些的公司。最后为了抢客户，从市场导向沦为客户导向，从把握客户变成被客户把握。
市场导向 市场导向的公司比客户导向好一些。他们提出客户中共性的部分，做到最好。由于他们是最好的，因此只做一些小的改动就可以迎合大部分客户。由此，他们可以在市场中尽情的攻城略地，日进斗金。客户导向的公司无论是在成本上还是在口碑上，都无法和市场导向公司相竞争。
能够完成市场导向的核心在于两点。首先是对客户共性的把握。如果不能把握客户中具有共性的部分，就无法开发出通用性的产品。其次是产品的易定制性。无论产品的共性多强，定制还是无法避免的。如果不能将定制隔离在产品主线之外，就又会沦为各个厂家的代工商。
市场导向公司往往会采用“封装层二次开发”的手段来实现上述两点。首先基于客户的共性需求开发出一个基础平台，然后在基础平台上做第二次开发。甚至由于二次开发技术要求低，利润率低，因此往往会被外包出去。
在市场导向公司里，最“明星”的职位是产品经理。由于不能盲从于客户的需求，因此产品经理必须了解客户，从客户的共性入手，提取需求，引导客户合理使用。
然而市场导向和客户导向的边界并不明晰。有的时候产品推出的时候预定是市场导向，封装层基础平台做的有模有样。但是在卖到一半的时候就开始狂改封装层。到最后一次开发量比二次开发还大，产品彻底做成一堆项目。这就滑回了客户导向。
营销导向 营销导向的公司常见于公众领域。他们做的是“谁都会做”的东西。但是通过群体营销手段，将这个东西推广到上千万客户面前。从而取得巨大的效益。营销导向公司的特征是市场预测和营销费用异常的高，有的时候干脆干的就是转手卖营销的勾当。
从技术上说，任何东西要做大都是有技术难度的。因此营销导向公司在做到一定规模前异常的轻松。基本上可以想像成拿现成的系统改一改，招几个人负责运营，然后狂打广告，最后坐地数钱。唯一的难点，就在这个狂打广告上。谁的广告，如何打，如何尽量少花钱多出名。这里有无数讲究。
然而一旦超过一定规模，就会立刻出现瓶颈。同时在线用户数无法增加，系统bug不断，经常崩溃。冯大辉说过一句，技术的作用在短期往往被高估，而在长期往往被低估。其中后半句在这种情况下异常显著。
当然，并不是所有营销导向公司最后都会死在技术上。有些公司有足够的远见，或者运气很好。在问题出现前，就开始策划和解决技术问题。这些公司往往在经历几次阵痛后，转型为了半营销半技术公司。甚至有些公司在主营业务之外，也把他们的技术服务卖给其他公司。
技术导向 技术导向的公司比市场导向更加强一些。他们追求的是“人无我有”。通过完成其他人短期不可模仿的功能，造成市场上没有其他选择的局面。只要你想用类似的东西，就只能找他们。
技术导向的公司必然是以程序员为导向的。也只有基于技术的公司，才可能真正善待程序员。甚至其中一些核心成员经常需要谈到分成或者股权，期权。逻辑很简单，如果某种技术只有一个人可以搞定，老板自然不希望这个人从手里流失出去自己单干。他必须提供和单干差不多的福利（当然，是去除经营的风险后）。
具体提供分成，股权，还是期权，取决于技术的“保质期”。如果技术在短期（半年或者更短）内是不可复制的，但是一定时间后必然可以复制。那么一般是提供分成。如果技术成员需要为公司的长远考虑的，或者技术在长期（一年到三年）是不可复制的，那么一般提供股权期权。三年以上不可复制？这种神人一般都被大公司当宝一样供起来了，你没机会见到的。
产品导向 产品导向是个奇葩的情况，一般很少见。只有对产品理解到一定深度，同时公司大到一定程度时。才能自如的驾驭技术，将一项项技术当作组件一样组合，产生影响世界的东西。在这里，最重要的并不是“拳头技术”，而是已经存在的技术的组合和发挥。
目前最知名的产品导向公司，就是前苹果。</description>
    </item>
    
    <item>
      <title>从齐治科技辞职了</title>
      <link>//blog.shell909090.org/blog/archives/2445/</link>
      <pubDate>Tue, 16 Jul 2013 09:52:45 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2445/</guid>
      <description>最近贝壳又一次的辞职了。
离职的原因还是很单纯的，主要是管理上跟不上老板思路。既然如此，那就不要勉强为之了。
我很感激现在的公司给我的帮助。毕竟在现在的公司，我的技术得到了长足的进步。同时，也给了我很多把想法变成现实的机会。
目前我的意向是七牛云存储。在此感谢他们给我的机会，希望能在他们那里玩到一些有趣的东西。
谢谢几位朋友给我的机会，我不愿意参与你们的项目并不是不看好你们。一方面，要同时做好下属和朋友是非常困难的。作为老板，不能因为私人的交情而偏颇公司的业务。按孔明的说法，就是“宜付有司论其刑赏”。而作为朋友，必然嘻嘻哈哈吐槽打屁。对着一个“不可因私废公”的人要放松下来，神经要不是一般的粗才行。
另一方面，目前贝壳还没有孩子，而创业是一个全力投入的事情。万一创业到一半变成超级奶爸，事情就比较被动，害人害己。所以我目前更偏好至少第一轮天使投资过之后的公司。有创业的氛围，紧张但是不紧迫。我更喜欢正常的生活。每天都有时间做点自己的事情，有点自己的小娱乐，研究点自己的小技术。可以想像的是，在孩子到一定年岁前，我都很难承担从头创业的巨大风险了。
最后，我也不认为自己有在创业团队中能够hold住大部分东西的能力（这并非出自我的妄自菲薄，而是基于实际评估的结果）。我希望在新的公司，至少做一些特定方面的事情，积累一定经验。
要下海弄潮，先要搞清楚自己的斤两。其中最重要的两条，就是自己是否能承受风险，和自己是否能撑起一片天。既然两者目前都还欠缺。所以，请原谅我难以回报你们的厚爱。</description>
    </item>
    
    <item>
      <title>薪水高的人纳税少</title>
      <link>//blog.shell909090.org/blog/archives/2442/</link>
      <pubDate>Fri, 05 Jul 2013 10:24:39 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2442/</guid>
      <description>我们不关注税前和税后的工资，让我们来关注老板的付出的和员工到手的差。
中国（至少上海）的税法规定，企业需要先缴纳44%的四金，再缴纳18%的个人四金，然后扣除所得税，才是员工到手部分。所得税是逐级递增的，所以很多非财务出身的老板会以为工资高的人扣除多。
实际上，在50k以下月薪的情况下，四金扣除比所得税更厉害。而四金扣除是有上下限度的，具体在去年平均工资的60%-300%之间。以2012年为例，当员工工资不足2815的时候，扣除是按照2815计算的，因此公司必须付出1143的企业四金——无论其工资多低。而当员工工资高于14076的时候，扣除不会增加，因此无论工资多高，公司只需要付6193的企业四金。
我们以500, 5000, 15000, 25000, 45000为例，分别计算到手比例。
500月薪，到手88，付出1643，比例5%。 5000月薪，到手4082，付出7200，比例56.7%。 15000月薪，到手11228，付出21193，比例53%。 25000月薪，到手18729，付出31193，比例60%。 45000月薪，到手33531，付出51193，比例65.5%。 是的，当员工工资正好在15000不到的时候，到手比例最低。在2800-5000之间的到手比会比较好。在工资更低的情况下，到手比例也会极度的变糟。而在15000往上，到手比情况又会变好，在20000附近和5000左右持平。</description>
    </item>
    
    <item>
      <title>使用getmail备份imap邮件数据(例如gmail备份)</title>
      <link>//blog.shell909090.org/blog/archives/2438/</link>
      <pubDate>Wed, 03 Jul 2013 10:39:27 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2438/</guid>
      <description>使用getmail备份imap(例如gmail)服务器上数据的方法。
原因 随着7.1的到来，诸位geek最重要的事情就是备份google reader的数据了。很多人都在讨论gmail还要不要用。
废话，当然要。这么好的服务，为什么不用？
只是随着google reader的事，在用gmail的时候也得留个心眼。平时数据勤备份，不要所有的内容都绑定到这个邮箱上，否则有得你哭的。
安装和配置 getmail是一个用于将远程数据取到本地的系统，和fetchmail是一类东西。废话不多说，先装getmail。
sudo aptitude install getmail4 之所以用getmail不用fetchmail，是因为fetchmail我搞不定。而且getmail比较容易备份到指定地点。要是输出能gzip掉就更好了。
建立~/.getmail目录，下面放一个文件，例如gmail
[retriever] type = SimpleIMAPSSLRetriever server = imap.gmail.com username = [username] password = [password] mailboxes = (&amp;quot;[Gmail]/所有邮件&amp;quot;,) [destination] type = Mboxrd path = ~/shell/gmail.mbox [options] read_all = false delivered_to = false received = false verbose = 2 message_log = ~/.getmail/gmail.log username填你自己的用户名，普通用户不需要@gmail.com，企业用户需要@你的域名。password填密码，两次认证的需要分配一个Application-specific passwords。mailboxes里面不要照网络上的填写[Gmail]/All Mail，那是英文环境用的。
~/shell/gmail.mbox是目标文件，你需要先touch出来。~/.getmail/gmail.log是log，建议和配置文件同名。
执行 把下面的gmail替换为你的配置文件名，注意不需要写.getmail/的前缀。
getmail -r gmail 系统就会开始备份你的数据。像贝壳的gmail这种数据，量比较大，时间也会比较长。
问题 getmail是python写的，备份数据比较大的时候，内存消耗会很惊人。而且当处理巨量数目的文件时。在启动时会将目录全部下载到本地，然后计算一阵。这个耗时，网络消耗和CPU都比较大。要有点耐性。</description>
    </item>
    
    <item>
      <title>解决问题的艺术</title>
      <link>//blog.shell909090.org/blog/archives/2435/</link>
      <pubDate>Mon, 01 Jul 2013 16:56:53 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2435/</guid>
      <description>网上有篇经常用的文档，叫做提问的艺术。我这里狗尾续貂一番，恶搞一篇解决问题的艺术。大家看看就好，不要认真。
谁说出问题的？提示是什么？他为什么是个错误？
有太多人，和风车打了半天，才发现他不是巨人。。。
提示在google上有搜到么？
太多和没有都是错。太多的话，说明提示是个万金油，很多情况都会出。你分不清文章中哪篇才是有用的。没有的话——那就没什么好说了。
能够复现么？条件是什么？其他版本也有问题么？
能复现的看数据，不能复现的打log，连log都打不出的在脑子里面模拟代码。
系统的工作机理是什么？每一步进出的数据是什么？数据都对么？
问题越奇葩，原因越傻逼，往往如此。
因为通常情况都被你考虑掉了，所以往往问题出来时，你会抽自己两个耳刮子。
问题往往都出在调用者身上，而不是供应者身上。
因为用的人有责任保证用对，而写的人没这个责任。
RTFM</description>
    </item>
    
    <item>
      <title>效率，慈善和歧视</title>
      <link>//blog.shell909090.org/blog/archives/2433/</link>
      <pubDate>Tue, 25 Jun 2013 11:23:09 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2433/</guid>
      <description>这个话题的最初，是因为和同事讨论到就业中的禁止歧视条款而起的。我们当时讨论到，很多行业中明文或者潜规则的禁止招收女员工，是否合理？偏向不招收生理残缺的人呢？
市场自然抉择 这个问题的第一直觉和最基础原则，就是市场自然选择机制。自然机制而言，市场会自然选择合适的人，以保持最大的竞争力。企业不愿意招收女员工，或者生理残缺的人，自然是有其理由的。
女员工这个问题，我想让不止一个企业吃过亏了，尤其是略微大一点，还讲那么点规矩的企业。在经济危及来临的时候，女性员工害怕裁员，所以抢先怀孕。按照国家规定，你非但不能裁她，还得保证她的生理和心理健康。一个企业就那么点人，你非但不能裁那个干的不好又没有劳动力的，相反还得裁掉一个正常员工来保证她的岗位。我想是个老板都不说有多呕了。
至于生理残疾，也是很麻烦的。软件这个行业的门槛还比较低一些。普通的办公室文员，你是打算招个看不见的呢？还是听不见的？
所以，老板喜欢高学历的，你不能说这是歧视没有学历吧。那老板喜欢男性（汗。。。），为什么就一定是性别歧视呢？
适任原则 自然，上述言论听起来很刺耳，很冷冰冰。为了保证竞争，难道孕妇，女性，残疾人必然要成为牺牲品么？
其实孕妇和生理残缺，并不一定和生产效率有关。例如生理残缺，我最近就碰到了一回。有个朋友来投简历，自称是听力残疾，有残疾人证明的。我问他是否能够正常进行日常对话。他回答说，在听力辅助设备的支持下没问题。我说，那么就和普通人没有区别。我接受的了方言，接受的了客户，我想我就能接受你。
以前说过的乙肝也是一例。只要员工都做过乙肝接种，我觉得也没道理不接受乙肝患者，尤其是小三阳患者。至于大三阳，还有某些对生理卫生要求比较严格的岗位，例如食品卫生，那就是另一回事了。
同样，我也不介意性别，学历，种族，国籍。我在意的事情只有，你是否能完成工作，你的成本有多少。大家知道某些民族和国籍的员工招进来特别麻烦，这非我力所能及，我就不展开阐述了。
当然，作为软件公司，限制很小。有些地方就不行了。男性澡堂里给人搓澡的，招一女的算怎么回事，是吧？
没有理由的歧视 所以，我反对任何没有理由的歧视。例如女性不适合做计算机？这是什么道理？有多少程序员因为这种莫名其妙的歧视，被迫走上了断背山之路。
同样，要求司机必须是男性的，我觉得这个才是不合理要求。从生理上说，男性司机久坐对健康不利。如果说大货司机，经常要参与装卸货物，一路上风吹日晒，路段还可能不太平。要求必须是男性还有点道理。那普通商务车辆司机必须是男性的理由我实在是想不到了，你不觉得一个美女给你开车比男的更加赏心悦目么？
当然，不同的人对歧视的判断是不同的。我个人并不认为女性不适合做计算机，但是很多老板这么认为。我个人认为女性可以做司机，但是很多老板不这么认为。但是没关系，只要歧视原因和劳动力之间确实是无关的，我相信总有老板会赏识你的。
禁止歧视限制 当然，为了一些我们都想的到的理由，政府也会立法禁止一些有理由的歧视。例如刚刚的不得歧视女性员工和保护怀孕就是一例。如果企业都因为适任而不愿意让员工怀孕，那么谁还去怀孕生子呢？国家将来的人口（尤其是主流族群人口）肯定会锐减，这和国家的利益相违背。
当然，为了做到这点，毫无疑问的，就违背了市场机制。立法保护孕妇权益，就迫使企业歧视女性（尤其是未生育女性，幸好在中国还有计划生育这种东西）。立法不得歧视女性，那又容易和适任原则打架。到最后，还是市场机制和扶助孕妇打架。
类似的打架还出现在欧洲的另一个领域——雇佣。据欧洲的一些朋友说，欧洲的法律相当重视保护雇员权利，重视到了简直歧视雇主的地步。有个欧洲的愤青就写过一篇长文，为什么我让你喝西北风。大意是，如果我多雇两个人，我得保证他们一直有事情做，雇主没事做导致的雇员空闲还是要付薪水。而且还要缴纳高昂的社会保证金，又不能随便裁员。成本核算下来，现阶段每增加一个雇员，利润居然是递减的。多雇两个人，还不如老板解散了公司吃低保呢。
当然，那文章里的数据什么的都不能当真算的，一认真就满地窟窿（哪篇具体研究文章都是这个样子，光一个物价水平核算就够吵半天了）。但是本质问题却说的没错。如果国家不保护雇员，要国家何用？毕竟大部分人都是雇员而非老板。如果国家保护雇员，把老板搞跑了。那国家的经济增长哪里来？税收哪里来？
党员算不算歧视 原文请看这里。我只说一句简单的。人以类聚，物以群分。想想这哥们曾经想（可能现在还是想）加入一群什么人做什么事。再想想他现在想加入你们。。。</description>
    </item>
    
    <item>
      <title>用户友好的密码</title>
      <link>//blog.shell909090.org/blog/archives/2430/</link>
      <pubDate>Thu, 13 Jun 2013 15:19:31 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2430/</guid>
      <description>用户友好的密码 何谓用户友好的密码？我是指在密码中尽量不给自己找麻烦，又能正常使用。
不包含空白字符。否则你会烦恼有哪个空白字符，有几个的问题。 不包含特殊字符。否则会烦恼怎么输入。 不使用容易混淆的字母。不容易输入错误。 方便手机输入。 尽量少包含大写字母。 只包含容易在手机上输入的符号，或者不输入。 手机上容易输入的符号 在android上，以下符号可以在google输入法中直接输入。
@*+-=/#()&#39;&amp;quot;:?!~ 总计15个。估计加上iphone后会更少。如果要用符号，建议从这些里面取，会减少你很多密码输入的烦恼。
容易混淆的字母 Il1 0O 连续的mn 连续的wv 强度规范 我把密码管理规范里面的结论总结一下，略去推导，凑凑数，把密码级别排列成以下几个：
弱密码：不希望别人看到，然而别人看到并没有直接损失的内容。熵应当在20bit以上，五年修改一次。 中密码：不希望别人看到，别人看到会对你产生损失的内容。熵应当在33bit以上，两年修改一次。 强密码：有价内容。熵应当在45bit以上，一年修改一次。同时作为弱本地密码规范， 本地密码：熵应当在58bit以上。 每个级别之间大约差12bit的熵。初始熵强度至少20bit，低于这个水平就很难说这是一个密码了。
强度估计 以最容易使用的密码计算，符号应当最多包含26个字母+10个数字，排除l10这3个。每一位有33种可能，熵大约是5多一点。
弱密码：至少4位。 中密码：至少7位。 强密码：至少9位。 本地密码：至少12位。 更强一些的密码可以用52个大小写字幕+10个数字，排除Il10O这5个。每一位有57种可能，熵大约是5.8。
弱密码：至少4位。 中密码：至少6位。 强密码：至少8位。 本地密码：至少10位。 建议 网络：
弱密码：4位小写字母+数字，5年修改一次。 中密码：7位小写字母+数字，2年修改一次。用于保护大部分内容。 强密码：8位大小写字母+数字，1年修改一次。保护重要内容。 本地：
低：8位大小写字母+数字。 高：10位大小写字母+数字。 注意避开Il1O0，以及其他可能的混淆方式。</description>
    </item>
    
    <item>
      <title>nagios配置</title>
      <link>//blog.shell909090.org/blog/archives/2427/</link>
      <pubDate>Sat, 08 Jun 2013 09:32:28 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2427/</guid>
      <description>nagios的结构 nagios的结构其实很简单，一个监视系统，一个web展现系统，一个remote服务器，没了。
监视系统是根本，在debian中，需要安装的包是nagios3。在安装这个包之后，会启动一个监视进程，负责检查所有的服务是否OK。不OK就触发事件。
检查的时候，nagios会去调一些“插件”。这些插件其实都在/etc/nagios-plugins/config下面注册过的。每个插件配置都是name!v1!v2&amp;hellip;的格式。在注册里面，可以看到这个command_name，对应一个command_line。你很容易看到这就将一个定义转换为了一个命令行。
直接执行这个命令行，你可以看到一个标准输出。nagios就是解析这个标准输出，得到值是否在一个合法的范围内的。所以从原理上说，你可以自己写插件，对任何事情做nagios的监控。
对于某些远程可以获得的信息，目标设备上可以什么都不动，例如ping连通性，或者是端口连通性等。而对于其他信息，例如磁盘空间剩余值，靠远程可能没法获得，就需要在目标设备上装nrpe，Nagios Remote Plugin Executor Server。在debian中，就是nagios-nrpe-server这个包。如果获得本地信息，不需要这个包。
最后，cgi会将本地的信息暴露给web查询，这就构成了完整的nagios体系。在debian中，这是nagios3-cgi这个包。
nagios页面在nginx上的配置 这个过程比较繁琐，因为apache会自动配置，而nginx没有宿主进程，也没有cgi。因此实际上需要运行两个宿主进程。
首先，你需要安装php-fpm宿主进程，这个是nginx搭配php执行的最佳宿主。在nagios中有用到php，所以你需要php执行能力。
其次，安装fcgiwrap这个包。这是cgi执行宿主，以fastcgi协议暴露。这里需要注意。如果你的nginx和nagios的宿主不在同一个设备上（例如像贝壳这样执行了虚拟化的），那么实际上只要在nagios的宿主上执行fcgiwrap即可。php-fpm和nginx可以执行在其他不同设备上，没有关系。只是前者必须有nagios的cgi代码，后两者必须有nagios的网页和php代码。而这三者又都在nagios3-cgi包里面。因此几台机器都需要安装nagios3-cgi包。
最后，配置nginx。
location /nagios3 { index index.html index.htm index.php; } location /nagios3/stylesheets { root /etc; } 第一个映射是nagios的基础目录，在根目录中，我其实配置了nagios3 -&amp;gt; /usr/share/nagios3/htdocs/（debian中的链接位置）。第二个映射是样式表配置，我用系统缺省的。
location ~ ^/nagios3/.*.php$ { include fastcgi_params; fastcgi_pass unix:/var/run/php5-fpm.sock; } 这个是nagios的php解析代码。我的php-fpm执行在同一台机器上，因此直接如此配置即可。
location /cgi-bin/nagios3 { root /usr/lib; include fastcgi_params; fastcgi_param REMOTE_USER $remote_user; fastcgi_pass dev:port; } 最后是cgi暴露的配置。由于我的nagios宿主并不在web服务器上，因此fastcgi是个远程地址。而且注意REMOTE_USER，传递这个才能让远程认到你的用户basic auth。由于nagios的cgi通过这个工作，因此没有这个会直接导致对方始终认为你是无权限用户。
nagios的简单配置 我们首先认清一点，nagios并不负责管理机器的维护。他的设计目标是“可用性”。因此目标是否可达，服务是否可用，是nagios的关心重点。至于磁盘，负载，只是顺便监控而已。所以你可以看到，nagios并没有直接的插件来监控CPU或者内存。他只有snmp插件可以查询到这些数据。
所以，我们开心一点。最低限度，我们将所有需要监控的设备和服务端口加入列表。当这些设备不可达时，nagios会发出告警（有邮件）。而如果运气好，我们是可以监控到这台机器是否有apt包需要升级，磁盘空间是否够的。作为建议，其实你只需要监控load和磁盘空间利用率就够了。其余的东西一般不大需要。当内存或者CPU发生问题的时候，你的query其实也拿不到返回。相对的，目标端口很快失去响应进而引发告警才是我们的预期。
OK，在这个基础之上，让我们看看有什么可以配置的。
服务器添加 首先，你可以定义一些机器。localhost_nagios2.cfg里面有例子，大致是这个样子。
define host{ use generic-host ; Name of host template to use host_name host alias host address IP } 我建议你专门弄个文件来管理这些自己的设备，例如我这里叫hosts.</description>
    </item>
    
    <item>
      <title>外行逼死内行</title>
      <link>//blog.shell909090.org/blog/archives/2425/</link>
      <pubDate>Thu, 06 Jun 2013 09:27:54 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2425/</guid>
      <description>昨天和一个朋友讨论点医学问题，他说，现在医生最怕的就是你这种病人。依从度最差，而且还容易闹出纠纷来。我说哪儿的话啊，我要质疑医生，除非是另一个医生对同一病例做出了不同判断。我自己的话最多问问。毕竟有点医学常识，知道自己的斤两。要糊弄外行还行，和专业医生比是没得比的。他说每天病人那么多，鬼才有空给你慢慢解释呢。
回去想想，外行逼死内行的事情其实不限于医生。做程序员也是如此。现在弄QQ，用wps和office，我已经弄不过老婆了。电脑杀毒也很久没做了，幸好她一直用360。流氓是流氓了点，反正弄不到我头上就行。有的时候她感慨，真不知道你是不是做程序员的，要用的时候什么忙都帮不上。幸好，关于最后这点，在她写论文的时候，我花半个小时帮她写了一套数据和模拟计算程序，证明了自己的清白。
有的时候，一个朋友知道我在做程序员，于是打电话过来，咨询一些问题或者请我帮忙做点事情。当然，他们本身可能出于好意，同时也可以解决他们自己的问题。但是往往这些问题就让我哭笑不得。QQ被盗了怎么寻回啊。有人给他们发消息说网银被盗请赶紧往安全账号里汇款啊。做一个网站要多少时间多少钱啊。别人帮我们做了网站现在这人跑了怎么办啊。我这里有很多数据打算做大数据分析啊。诸如此类。
当然，里面有很多问题其实也是比较靠谱的。网银被盗那个，其实当事人也知道多半假的。但是不找个专家问问就是不安心。可是您不能直接问银行么？
问QQ被盗就不是很靠谱了。QQ被盗肯定是找腾讯啊，我长的很像企鹅还是怎么着？还有什么台式机坏掉的，支付宝可以登录但不能付钱的。谁给你提供服务你找谁，我不是他们的客服。你的问题就算到我这里，我还得找他们的客服。目前为止，网站什么的有问题，找我找对了的，就那么一例。因为那个问题是找不到网站客服。剩下统统是回掉问题，或者回不掉就帮他们打对方客服。
至于做网站的，倒是还对路。虽然我不完全是做网站的，不过网站至少还会做。不过你至少和我说一下，这个网站大概什么目标，要做多少规模。我大概给你估一下要多少人，大概多久，会花多少钱，什么一个章程。你光冲上来和我说，要做个网站，把上家的货卖给下家，大概要多少？我哪里知道啊。更神奇的是，居然还有人能根据他这样子的描述写成了，而且那人应该还是个新手。我大概看了一下，处理和钱有关的问题居然用的是myIASM。想想还是别说了，人家本来就对我不是很满意。罗嗦个一堆，事情还没给办成。
至于大数据分析就更搞笑了。一个学校的后辈跑过来说，我这里数据挺多，打算做大数据分析。我说多少。1000多W条呢。数据大小呢。好几十个G呢。我算了算预计计算时间，16小时。行了，您有空跑我这里讲需求，回去把电脑开着，一天就出来了。
偏偏就这个样子，还是有人当我专家，然后跑过来问各种各样问题。其实了解的越多，心里越有数。自己算哪门子的专家呢？反正首先肯定不是修电脑专家——偏偏还是修电脑的问题最多。其次，要说低成本程序开发，自己也算不上——我写程序的成本可不低。对大多数人来说，我唯一能做的是在特定领域里面帮你解决新手解决不了的问题——这里面大多数问题是外行无法理解，甚至都没听说过的。所以这注定了你找我唯一正确的理由是让我帮你介绍个合适的圈内人。
即便如此，在面对新手的时候，往往也底气不是很足。某朋友曾经show过一行代码，说是公司里设计师教的。我看了，确实也不知道可以这么写。有的时候新手兴冲冲的上来问个问题，顿时我就茫然了。或者皱皱眉头，好大的一坨东西。然后新手不管三七二十一就写。后面多半没了声音。但是也经常有就写成了的。看看实现，问题一大堆。但是能工作，确实能工作。透过时光，仿佛看到10多年前的自己写的代码。罗嗦，冗长，但是却实实在在的在工作，让我兴奋不已，并且把我带进了电脑的世界。
也许这堆新人里，有人可以也坚持个10年，并且成为其他人眼里的专家。然后苦恼于后浪追前浪的问题上吧。</description>
    </item>
    
    <item>
      <title>语音能力对比</title>
      <link>//blog.shell909090.org/blog/archives/2421/</link>
      <pubDate>Fri, 31 May 2013 16:01:47 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2421/</guid>
      <description>对比了一下google voice和科大讯飞的识别能力。google voice手里没货，用的是youtube上的第三方测试视频。例子也是抄的。
+----------+-------------+----------+ | |google voice |讯飞 | +----------+-------------+----------+ |提醒 |Y |Y | +----------+-------------+----------+ |定时 |Y |N | +----------+-------------+----------+ |播放歌曲 |Y |Y | +----------+-------------+----------+ |关闭无线 |Y |N | +----------+-------------+----------+ |天气 |Y |Y | +----------+-------------+----------+ |静音模式 |Y |N | +----------+-------------+----------+ |搜索地图 |Y |Y | +----------+-------------+----------+ |搜索路径 |Y |Y | +----------+-------------+----------+ |搜索商家 |Y |弱 | +----------+-------------+----------+ |时间搜索 |Y |弱 | +----------+-------------+----------+ |时区查询 |Y |N | +----------+-------------+----------+ |节日查询 |Y |Y | +----------+-------------+----------+ |汇率 |Y |Y | +----------+-------------+----------+ |汇率换算 |Y |Y | +----------+-------------+----------+ |进制转换 |Y |N | +----------+-------------+----------+ |单位换算 |Y |N | +----------+-------------+----------+ |数字计算 |Y |N | +----------+-------------+----------+ |航班查询 |Y |Y | +----------+-------------+----------+ |火车查询 |Y |Y | +----------+-------------+----------+ |股票查询 |Y |Y | +----------+-------------+----------+ |定义查询 |Y |Y | +----------+-------------+----------+ |区号 |Y |N | +----------+-------------+----------+ |商家号码 |Y |Y | +----------+-------------+----------+ |打电话 |Y |Y | +----------+-------------+----------+ </description>
    </item>
    
    <item>
      <title>比特币的汇率问题</title>
      <link>//blog.shell909090.org/blog/archives/2417/</link>
      <pubDate>Mon, 27 May 2013 10:21:45 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2417/</guid>
      <description>一个有趣的问题 如果股票可以用来交易，我们会使用股票么？
我是指，如果股票的流通合法，手段合理，出门刷股票就像刷卡一样。我们是否有机会使用股票作为货币？
我觉得没有可能。
使用股票作为货币，有一个实际的难题，就是定价问题。我们想象这么一个例子。假定某种股票A价格是10元一股，而楼下食堂的午餐套餐A也是10元一份。因此，他们可以把套餐A的定价写为A股1股一份。
中国的A股市场最大单日涨跌幅度是10%，如果是美股幅度还要大，但是我们先不考虑。在极端情况下，例如连续五日跌停。股价就会从10跌到大约6的样子。
如果此时，A套餐还维持一股的价格，收入绝对会跌穿成本的。因此，A套餐必须变更价格。事实上，当股价跌到80%的时候，就已经需要变更价格了。因此，A套餐在一周之内需要变更两次价格。
如果说变更价格还可以忍受，那么汇入汇出时差，还有周转周期就根本无法忍受。大部分银行汇入都是有时差的。当餐厅收入股票，他需要时间将这些收入和银行结算。这个时间大约是一天。而如果餐厅真的把股票当作货币，而不是周转手段用(说的更通俗一些，就是一收到股票就抛出换货币存入账户)，那么他必须坚持使用股票去购入原材料和支付工资。这个周期至少是半个月。在这个期间内，如果股价持续下跌（半个月内跌20%不是很罕见的），那么造成的损失只有餐厅自己去承担。
关于这点，做外贸生意的同学们应当深有体会。
因此，使用股票而不是货币作为流通手段是有额外风险的。如果没有额外的利益，为什么要承担这一风险呢？外贸是因为种种理由（主要就是相对生产效率），交易可以创造利益。因此人们才愿意承担风险。
为什么不将货币统一 反过来的一个问题就是。为什么我们不干脆统一货币，这样任何国家和任何国家的外贸都不存在额外风险了。
这也是不可能的。人们曾经以为这并不困难，因此出现了欧盟。欧盟统一了货币，但是却出现种种问题。从根本上说，这是因为政治机制做造成的。人类一定会有一些人生产力高一些，一些人生产力低一些。因此我们一定有人穷有人富。如果维持理性人假设，穷人一定趋向于增发货币，因为这可以促进经济，增加就业率和工资。而富人一定会趋向于不增发货币，因为他们的财富会贬值。
我们缩小一点打个比方。如果你和你的兄弟吃住在一起，钱一起花。当你们都赚1000的时候，问题并不严重。当你赚10000，其他人赚1000的时候。其他人总是倾向于更多的使用公共利益开销。例如他们可能会要求给父母翻修房子，买下更多的土地——反正钱是“大家”出。如果你鉴于兄弟情谊，认为这是合理的，那么你们还能过下去。如果你认为他们太贪婪而他们认为钱一起用是天经地义的时候，分裂就在所难免了。
如果我们在同一个货币区域内，那么关于是否增加货币总量这个问题就有两种态度。两种利益的代表一定会发生争执。如果这个货币区域是一个国家，那么统治系统会受到两种利益集团不同程度的驱使，宛如精神分裂一样。如果这个货币区域是多个国家，而其中有的穷有的富有，那么情况就会更糟。富有的国家会试图迫使穷国做一些事情，否则就将他们踢出联盟，再否则，就是他们自己退出联盟。这就如同欧盟中西班牙和希腊的遭遇一样。即使在一个国家中，如果不能平衡两方面力量，那么这个国家出现分裂是早晚的事情。
因此，要将全球货币统一，这基本就是不可能。
我在说什么？ 应该已经有人听明白了，我在说股票么？不，我在说比特币。
比特币比股票的动荡幅度更大，就我刚刚查询到的信息，比特币对人民币汇率在一个月的波动幅度最大的时候，在10天内下跌了75%。当然，与此对应的是。如果运气好，在10天内上涨超过300%也是可能的。
这种情况下，要当货币用？难了点吧。据说网络上有人支持用比特币买房子，我很好奇他的价格是怎么定的，每天一个价么？等值美元换算？还是干脆定一个死价？
而接受这么大一个风险，我们得到的是什么呢？使用比特币交易会为我带来更多的订单和利润么？比特币用起来比刷卡更加方便么？
谁会为了比特币接受这么大的风险？思考一下，只有那些在普通监管金融体系下无法交易的人才欢迎这样的系统。包括军火，毒品，走私，钻石交易。相对于这些行业的暴利来说，价格波动风险的问题也不是那么大了。
所以我还是坚持我自己的观点。要是你弄一点来玩玩，那没问题。但是要作为替代货币去用，基本不可能。
为什么还会有人弄点玩玩 我靠。就算是游戏机房的代币，都有人弄回家玩玩。你还奇怪这个？代币可是没任何保证的，既不能花在别处也不能交易，机房关门那东西就不值钱了。玩么，还在乎这个。
为什么比特币持续在上涨 比特币现在还可以持续挖矿，相当于货币一直在增发。在增发的前提下，货币价格还持续上扬，这只能说明在这种货币实体内涌入了大量的货物支持。当然，如上文所说，毒品，军火，都有可能。但是无法排除，比特币的无法管理特性注定了这东西还有一种玩法——当股票玩。而比特币目前只有融资没有融券，这才是比特比持续上涨的最大理由。
为什么没有融券就持续上涨？这个问题其实应该问中国股市，尤其是2000年前后的中国股市。当有融券时，我们可以先卖出，然后买入远期股票，从而在下跌的市场里赚钱。而当没有融券时，要赚钱就必须让股票上涨。交易所希望股票涨，股民系统股票涨，上市公司也希望股票涨。股市里的大家，除了刚刚卖掉的人，都希望股票涨。然而大家心里有数，股票是不可能无限上涨的。股票的长期收益，是能够持续的获得分红。如果上涨和分红不能支持当前价格的时间成本（就是利息），那下跌是个必然的事情。于是中国早年的股市就变成了击鼓传花，大家都吹着市场，希望自己不是最后一棒。
在比特币上，情况更特殊一些。现在固然是有炒家的功劳，但是将来是否下跌还得看非管制交易的规模。如果将来有大量的人使用比特币进行非管制交易，那么比特币就获得了实际货物的支持，从而不会下跌。如果没有，那就是新的一轮击鼓传花。</description>
    </item>
    
    <item>
      <title>lxc路由模式</title>
      <link>//blog.shell909090.org/blog/archives/2404/</link>
      <pubDate>Fri, 24 May 2013 09:25:36 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2404/</guid>
      <description>为什么使用路由模式 lxc默认使用的是桥模式，这也是我在家里和公司里部署的模式。在这种模式下，lxc虚拟机可以直接和真实网络中的机器互相访问，就如同一台真的机器一样。路由模式则没有这个便利性。
但是桥模式有个缺陷，必须能够做出桥来。我们有做不出桥来的时候么？有，如果你用笔记本，大部分AP会拒绝第二个MAC地址的包。导致网桥可以组建，却永远无法正常使用。
第一种路由模式，双重NAT简版 双重NAT可以用于几乎所有场景，并且不会带来后遗症。然而，双重NAT的问题在于，物理网络不能直接访问虚拟机。对于很多设备来说，这就失去了价值。另外说一点，之所以叫做双重NAT，是因为多数时候物理网络接到外网还需要一次NAT。
lxc的双重NAT可以视为两步，建立NAT连接的虚拟网络，将lxc连接到虚拟网络。
第一步比较复杂，我们先从br0的建立开始说起。首先，你需要为虚拟网络分配一个不同的保留内网网段。如果使用同样的内网网段，在ARP查询的时候会从一个端口发出超过一个的MAC回应，这就退回了桥模式。
然后我们需要建立一个br0网桥作为配置的起点，对这个网桥赋予IP，配置路由和防火墙，并启动dnsmasq以便于dhcp和dns。这个模式之所以叫做简版，是因为我们先不讨论dnsmasq。
假如你的lxc内网网段是192.168.66.0/24，那么你大致可以如下配置：
brctl addbr br0 ifconfig br0 192.168.66.1 route add -net 192.168.66.0/24 dev br0 iptables -A INPUT -s 192.168.66.0/24 -j ACCEPT iptables -t nat -A POSTROUTING -s 192.168.66.0/24 -j MASQUERADE 实际上，对于任何一种网口设备，将其配置为NAT的过程都是一样的。
第二步非常容易，在lxc的config文件内，指定网桥为br0就OK了。当然，作为略去dnsmasq的代价，你需要手工配置每台机器的IP地址和DNS服务器。
第二种路由模式，双重NAT 双重NAT的完整版需要在内网网口上启动dns，作为dns缓存代理和dhcp服务器。其余和第一种模式没有区别，只是你不需要手工指定IP和DNS服务器了。
当然，其实任何一种网口的NAT配置都是一样的。
第三种路由模式，双边交互路由 第三种路由模式的效果最好，虚拟机和真实机可以互相访问。但是这种模式需要能够修改物理网络网关的路由表。这种模式使用主机作为路由器，中转真实网络和虚拟网络。
我略去如何创造br以及如何将lxc连接到上面，这些前面有叙述。下面我简述一下双边路由最关键的几点。
最重要的重点，就是在真实网络的网关上，将你的真实物理机在外网的IP，配置为虚拟网络的下一跳网关。例如，对于上面的例子，我们应当在网关上如此配置。
route add -net 192.168.66.0/24 gw 192.168.1.4
如果不进行如此配置，物理网络所发出的包在到达网关后就不知道应当如何转发了。
在物理机上允许双边网络的所有包透过。你的包当然不能被防火墙挡掉。 虚拟网络的dhcp是不会传递到外网的，因此如果打算使用dhcp，还是需要开dnsmasq。 </description>
    </item>
    
    <item>
      <title>一次订错机票</title>
      <link>//blog.shell909090.org/blog/archives/2400/</link>
      <pubDate>Wed, 08 May 2013 20:32:04 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2400/</guid>
      <description>我碰到的问题 我的错。在订机票的时候，把虹桥T2看成了浦东T2。短信发来后又没有认真复核，导致跑到浦东才发现不对。此时离飞机起飞还有80分钟，要跑到虹桥铁定是来不及了。我查找了机票信息，这张票是可以退改签的。所以我打算改签到一个合适的时间，或者重新订一张浦东的机票。
操作流程 首先我拨打了短信上的退改签电话。根据提示音，这个电话属于去哪儿网，而不是代理商。电话接入后，有提示退票和改签，很不错。于是我选择了改签。提示音提示我，目前一名乘客，XXX，是我本人，是否确认。我当然确认。
然后？就是见证奇迹的时刻了。电话提示我，刚刚进行了改签动作，将我自己的机票改签给了我自己。
我擦，我是有多脑残才会想要把自己的机票改签给自己！选择其他航班的机会呢？改签不是应该改时间么？怎么直接给我改了登机人？而且还是改给自己？？？
更奇葩的是，在这步操作后，我试图进行退票，提示我“您的机票正在进行退改签中”。嘿，还不能操作了。此时，离飞机起飞还有70分钟。
怎么办？ 那么看来只有人工处理咯。我在去哪儿的电话系统里面转了一圈，花了20分钟，浪费了4元长途费（顺便一提，去哪儿的电话是北京电话，不是400，因此用户付费——长途费）后，发现唯一的人工干预界面是投诉。。。
你是有多不信任你的代理商。。。
好吧，投诉也比没有好。打电话过去，果然，没有上班。目前是七点三刻，确实有点强人所难。
然后我去去哪儿的android应用里面，查看这张机票。果然也有，一样是退改签中，不能操作。不过幸好，机票上面有代理商电话。我点上去，出现提示，是否要拨打电话。确定。
。。。
什么都没有发生。
再来一次。
。。。
什么都没有发生。
我擦你丫以为这是开宝箱阿。不会堂堂一个去哪儿的应用连拨打电话都有bug吧。。。
怎么办？ 首先，冷静，认真你就输了。
其次，打给携程，订一张新的机票。总之不能把出差搞黄，出差搞黄就把小问题变成大问题了。
再次，打给老婆，让她给我退票。能退多少是多少，不能退就当交学费了。
最后，发微薄骂人。
结果 很快，大约飞机起飞前20分钟，老婆给了我回复，她直接拨打代理商电话是OK的。代理商执行了退票，剩余费用会在2-15个工作日内回到账上。
飞机起飞后10分钟，微薄有了回复，但是完全没看懂我说的是什么。我骂的问题是：
我擦去哪儿的产品经理是猪脑子么？我打过去退改签，什么操作都没做呢，系统直接把我的机票改为我自己的，然后就再也不能退票了。
丫回复我说：
退改签是航空公司根据该机票的仓位和折扣具体规定的，去哪儿网会监督代理商按照航空公司的规定执行，您可查看订单中的退改签说明或致电航空公司核实。有问题也可将订单号私信给我们，为您转交工作人员核实处理。
平心而论，这个回复倒是沾边。对于用户来说，真的要退票的到也能退掉了。但是。
飞机都起飞了，再退票价格完全不是一个概念阿。微薄平时玩玩就罢了，这种涉及相当金额的事情还是电话靠谱。 一字没提电话系统改签里面的问题。您就准备把这个问题放着给下一个人中招？ 结论 去哪儿网的票价是否便宜不说，服务太不靠谱了。机票定错是我自己的问题。但是电话改签功能非但不能正常工作，还把退票的功能给关了。处理紧急问题的时候没有400电话，也没有紧急事件接听机制。从微薄的回复时间（8点半）来看，工作人员都是定时上下班的，没有值勤机制。
大概廉价比价网站就只能做到这样了，以后对于公司业务还是用携程吧。</description>
    </item>
    
    <item>
      <title>git log的一个吐血问题</title>
      <link>//blog.shell909090.org/blog/archives/2397/</link>
      <pubDate>Sun, 28 Apr 2013 16:26:34 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2397/</guid>
      <description>刚刚在公司里查了半个多小时，记一下笔记。
不知道你们有没有这种吐血经历。在git上有两个分支，莫名其妙合并到一起了。这可能是某个人的误操作。你检查log的时候，只看到他不停的把主分支merge到支线上去，却从没有把支线合并到主线上去。但是最终两个线却合并了，主线指向了支线。这是为什么？
要理解这个问题，我们要搞明白，merge在git里是怎么工作的。当两个分支，来自同一个祖先，但是提交了不同修改，又要合并的时候，就需要进行merge。能够自动merge的，多一个merge commit，被合并分支的HEAD不变，合并入的分支的HEAD加一，指向merge commit。不能够自动merge的，手工处理冲突，其余和自动相同。
注意这点，“被合并分支的HEAD不变，合并入的分支的HEAD加一”。由于两者在不同的点上，因此修改和提交会形成不同的分支。合并后的两个分支不会发生交汇。
如果在一次正向的merge后，立刻进行了一次反向merge呢？事情就麻烦了。两个branch的HEAD指向了同一个commit。因此你可以认为支线分支合并到了主线，却没有merge记录。这是当然，因为这只是指针移动，属于fast forward。没有commit，没有log。
不幸的是，这种操作还经常发生。当我们把支线向主线合并的时候，合并难度可能非常大。此时我们可以将主线向支线合并，然后反向合并。这样的合并难度就小很多了。然而这会使得合并记录不可查。
所以，当碰到类似问题的时候，考虑两次合并的可能性。</description>
    </item>
    
    <item>
      <title>关于雅安</title>
      <link>//blog.shell909090.org/blog/archives/2393/</link>
      <pubDate>Mon, 22 Apr 2013 23:51:41 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2393/</guid>
      <description>雅安地震好几天了。之所以今天才写，是因为我不大愿意消费雅安。再晚几天，大概也没人愿意看了。所以，大概就这几天。
看我的博客的人，相信都看到了我前面几篇的四川行。我贴的有点晚，不过时间是今年过年前，地点在本次地震所在地雅安向西50公里的位置，泸定下方的海螺沟。我们在来回路上还经过了雅安，在那里吃了顿饭。因此有人一说雅安地震，我当时就一惊。
当死亡突然发生在身边的时候，是非常惊悚和震撼的。如果我们早就知道，我们就不会流泪了。像我在某部纪录片里面，看到的一位植物人家属。当人走的时候，家属都很平静，近乎麻木。他们说，我们的泪都流干了。但是如果你认识的某人，在壮年突然去世。你才会悚然一惊。原来生命这么脆弱，原来死亡离我们只有一线之隔。
是的。我之所以要说这个，是因为我忍不住的想。如果我们晚去半年，或者地震早发半年。我们是不是也要砸里面？好像很有可能。我看到很多旅行者砸在了那里。
大概在三年前，我得了一次急性牙髓炎。医生没查出原因，患处也不疼痛，所以我居然一直不知道，以为是三叉神经痛。那一阵子真是痛的死去活来阿。在牙齿拔神经后，感觉顿时轻松了很多，觉得好像重生一样。由此我也悟到了一件事情，及时行乐。我们总是为一些奇怪的理由，阻止自己做一些真正让自己快乐的事情。今天拖明天，明天复明天。拖到事情黄掉，或者在某个时刻戛然而止。这是何苦来哉。
所以，如果你有什么想做的事情的话，还是快点吧。
另外一个关于雅安的话题，就是我们能做什么。我首先声明一点。我不信任中国红十字会。
当然，这不代表我赞成直接捐助。相信经过这么多次网络直接捐助事件，大家都应该领悟到，直接捐助给对象，会有很多问题。对方是不是真的需要帮助，有没有人比对方更需要帮助，对方的钱是不是花的到位。这些问题都非常专业。帮助别人，不是把钱随随便便的一丢就结束的。这是一个非常专业的问题。丢下钱就什么都不管的行为并不是帮助，而是打发乞丐和满足自己的虚荣心——当然，如果那就是你的目的，我也没什么好说。
作为一个解决方案，有一些专业的机构，会帮助我们来捐助和慈善。就像我们需要买啤酒，于是有了酒厂和超市。我们需要买鸡蛋，于是有了养鸡场和菜场一样。我们希望在慈善方面有专业机构，解决上面说的一些问题。是不是值得，是不是需要帮助，需要何种类型援助，应当如何处理，等等等等。我们提供帮助，物质上的，金钱上的，精神上的。他们解决问题。
当然，既然是专业机构，自然需要开销。酒厂，超市，养鸡场和菜场都不是免费的，为什么慈善机构一定是免费的呢？很多人在公司里常说的一句话是，既然如此我也没有办法，公司不是慈善机构。其实他们错了，慈善机构也不是免费的冤大头。做好事也要钱呐。
现在问题来了。即使我相信慈善机构可以判断哪些人更需要援助。但是慈善机构本身也需要钱运转，而帮助对象也需要钱。在这两者的竞争上，我还没有天真到相信人性的光辉可以照耀每个角落。如何保证某笔钱是被慈善机构是合理的运用了？如何保证他们不会倾向于更多的花费在一些无聊的地方，例如职员（姑且叫做职员吧）的生活改善。修建更漂亮的大楼，并解释说这是为了吸引更多的捐款者？
作为一个必备条件，捐款公示和账目公示是必须的。作为捐款者，我们可以核对我们的捐助是否被统计了。作为受惠者，自然不会承认没有得到的帮助。由这两点限制，我们就可以清楚慈善事业的运转是否有问题。如果我觉得有问题，我可以用脚投票，再也不给他们捐钱。
呐，现在问题更大了。中国红十字会名义上是国际红十字会的下属机构，但是却不受其直接领导。而中国红十字会的资金是不公开的。
好。你说你是一个专业机构，我信你。你说你可以解决我在救助中解决不了的问题，我信你。结果你告诉我，你连账目都处理不了。你让我如何相信你可以公平的分辨谁需要帮助，协调社会力量救人于水火？就像一个瘫痪的人说，我可以飞。谁信。
和直接捐助比起来，我觉得这种自相矛盾更加不可信。所以我不相信中国红十字会。
但是更大的问题是，在中国，面向非特定对象的募集在理论上是违法的。直接在街头弄个箱子写个捐助，在某些地方被认为是不可信的，而在中国就直接被定义为非法。与此同时，非慈善类NGO很少，很难注册。这使得中国慈善里面充满了各种公司法人。真的想做事，但是却搞不定NGO注册的，只能注册公司，同时开增值税发票交税。这很讽刺，因为你交了个人所得税后的收入，要进行慈善竟然还需要缴税。而在某些国家，慈善NGO开的发票是可以抵税的。因为社会救助是政府的任务之一，而税收是为了使得政府可以执行任务。既然你为政府的任务目标做出了贡献，自然应当少缴纳对应数额的税收。就如同你上缴了税收，然后被再分配到了慈善机构一样。只是你自己拥有选择的权力。
与此同时，也不排除很多人，注册了公司外壳来做一些手脚。大家知道慈善机构是组织性组织。他们不会自己生产帐篷，自己培训医生，自己教育小孩。他们需要在社会系统中兑换相应的资源。这给了一些人机会，将低价资源高价卖出，这是最常见的，甲方腐败。另一种常见的情况是，某些人拥有广告资源。从市场运转角度说，投入广告可以获得收益的行为，和普通市场营销没有任何区别。于是在集资问题上，又可以将渠道卖给广告商，从中获得回扣。这是不怎么常见的，乙方腐败。如果是盈利型公司，公司的所有者或者理事会自然会检查这种问题。但是对于一个不透明的非盈利机构，谁来担这个责任呢？
甚至，从行政和金融工程的角度来说，可以将行使慈善的权力拍卖（NGO许可证），或者是利用慈善价格随事件大幅波动的特性进行杠杆套利。当然，这个套利很难，而且杠杆化更难，所以这也是今天我还没听说这种事情的原因。但是如果我们放任情况失控的话，慈善企业上市，乃至慈善期货进入期货市场这种荒谬的事情都将不会让我觉得惊讶。
所以说到我们可以做什么，我觉得很悲伤。我们捐给红十字，有问题。直接捐助，也有问题。我们不去了解灾区，麻木。我们希望了解灾区，使得记者一拥而上，消费。我们不能不做什么，却又做什么都错。
最后，关于去四川和西藏旅游。我得说，前方高能，快去快回。。。</description>
    </item>
    
    <item>
      <title>关于微信信令问题的补充说明</title>
      <link>//blog.shell909090.org/blog/archives/2389/</link>
      <pubDate>Mon, 15 Apr 2013 09:23:35 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2389/</guid>
      <description>上次说的扯淡，不是指技术细节，而是商业讨论。技术细节上，我相信心跳一定是会对网络带来负担的。
空口无凭，我们就用上文给出的几个数据来计算一下。按照用户花10元计算，看看商业上他可以得到什么，得到了什么。
ayanamist告诉我，他们那里流量计费大约是10元30M，上海这里我用的比较多的是8元80M，我们按照10元100M计。我找到联通数据流量的最低购入费用是35元/1G，合10元250M。
假定我用10元100M套餐，在手机上使用微信。微信的心跳相当于5分钟连接一次服务器。这个比联网使用当然消耗更大。但是，请思考一下这个问题。移动运营商可以接受10元250M的用户，但是无法接受10元100M的用户一天连接300次服务器？也就是说，一天连接300次服务器的成本比2.5倍流量带来的负担还重？
我的判断是，还是2.5倍流量的负担更重。微信真正的问题，还在于他动了利润更加高的业务——短信。也就是说，我认为，移动运营商可以忍受一天连接300次服务器，但是无法忍受高收入业务被边缘化。
作为佐证，我提出了下面一个概念验证。如果我们使用数据网络打电话如何？
当我们需要给对方打电话时，使用短信呼叫对方上线（作为thomas提出的体验问题的回答。app自动发送短信和接收回信，用户无须手工），然后利用数据网络拨打电话。这样每次接通双方都需要0.1元短信费用，和每小时2元的数据流量费用。当然，对于某些特殊区域，有电话无网络的时候，或者紧急情况下，使用普通电话呼叫。
我测试了微信的语音通话功能在3G下的效果，比普通电话略差，但是基本可以接受。如果我们可以如此操作，就可以免长途和漫游费用，低成本的进行语音通话。这个模型没有任何心跳压力，流量的使用也和普通3G类似。移动运营商可能接受这样的一种方案么？
怎么可能。真发生这种事，移动连讨论都没有就直接禁用这套服务了。</description>
    </item>
    
    <item>
      <title>从微信和移动的官司说多网融合</title>
      <link>//blog.shell909090.org/blog/archives/2369/</link>
      <pubDate>Thu, 11 Apr 2013 13:08:57 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2369/</guid>
      <description>多网融合这几年 在02年左右的一堂多媒体课上，我和老师就讨论过多网融合的题目。当时我们提出了很多不同想法，有的实现了，有的没实现。
固话业务废弃。这点已经基本实现，但是不是因为IP电话，而是手机。我们原本的预期是价格低廉的IP电话系统覆盖到家，和传统PSTN电话业务结合。IP电话系统内部收取内部价格，和PSTN互相拨打收取外部费用。从实现来看，IP电话系统不接受拨入，这个直接导致了IP电话系统和传统PSTN无法互通，从而根本没有生命力。但是手机和固话互通是没问题的，而且价格和固话相仿。这些年来，我已经很少看到家庭固话了，只有企业还在用（因为大量拨打的情况下，固话还是相对便宜一点）。 电视业务废弃。这点也基本实现。不过不完全是电信覆盖电视，电视自己也在做机顶盒和视频点播。从目前来看，两家的情况差不多。但是从趋势上看，小米盒子，或者其他第三方机顶盒卖的更好。整合国内各大视频网站，提供了非常好的电视点播资源，而且近乎于免费。 传统金融领域废弃。这点还很长远，但是趋势已经见到了。以前我们一起吃饭，结帐时都各自付款。现在都是一个人付款了然后支付宝还账。反正每个月也是要交水电费的，不怕钱进来花不掉。再后面，如果支付宝的安全性更高，我想大额转帐，理财投资等传统银行的高增值业务也是会出现的。唯一不可能复现的是高贷低存的利息剪刀差。 移动业务废弃。这个是在04年左右，我和一个朋友讨论的问题。移动当时数据流量还是0.01元/k。我当时就在考虑，1K数据足够发送和接收一条短信了。如果短信走数据流量，岂不是比0.1/条的短信更加便宜？结果10年不到，印证了我这点简单的想法。移动流量的价格已经低到3.5元/100M了，不但短信的价格已经低到忽略不计，而且已经足够承载一些多媒体业务，包括图片，语音，甚至视频。 移动的价格 微信和移动的官司，其实就是移动传统业务和移动数据业务的冲突。移动传统业务是非常贵的。我在07年时请教过国外的朋友，他们一个月125美金（对他们的购买力来说，大约相当于我们的250-300人民币），拥有4M宽带接入，有线电视接入随便看，2路有线电话，一个手机。有线电话和手机在同一家公司内的互相拨打是不要钱的（我怀疑还有同一个地区的限制），跨公司拨打才收费。也就是说，他们的大多数服务，一个月只要125美金就可以cover。而且这还是07年，这些年还要便宜。对比这种价格，我们短信的价格呢？0.1元/条，而且10年不变。你还觉得他很便宜？
再说传统建设问题。在高速公路收费问题上，常有人持有这么一个观点。中国的高速路收费是因为中国很多路都是新建设的，美国都是建成数十年的。我先不说这点的核算问题，单说这个情况在电信领域是否存在。你真的觉得美国会提前中国10年就把高速链路建好了？目前在用的一些高速链路系统，路由器，光纤系统，可能从实用化到现在也只有10年而已。10年前，任何一个国家所部署的设备都不可能承载今天他们所承受的压力。信息系统的更新换代是很快的，你不可能指着美国说，他们便宜是因为他们历史上已经建设好了。
一个可以理解的原因是，电信设备的价格在世界范围内是差不多的。如果把这个命题转换为“电信带宽的售出价格在世界范围内差不多”，那么美国的125美金到中国可就相当于800人民币——这可不是一个小数目。之所以这一点不完全正确，是因为中国的人工成本只有美国的几分之一。
微信有多少可能跑在非移动数据上 我们考虑这么一个问题。微信是不是一定要跑在移动数据业务上？既然移动说，OTT业务会严重影响他们的网络，微信是不是可以跑在别的什么上面？
其实我们都知道，如果你在城市里，微信80%的时间都不是在移动网络上运行的。你在家里，家里有无线路由器。你在单位，单位有无线路由器。这年头无线路由器和智能手机都基本成了标准配置，有不奇怪，没有才怪。移动数据网络所需要支撑的，就是你离开家里，公司，咖啡馆的这几个小时路上时间。
当然，我并不是说我们干脆把这几个小时的时间忽略不计，让微信直接跑在宽带数据网络上算了。而是说，微信对移动网络的依赖，并没有我们想像的严重。这种不严重，并不是我们不想依赖，而实在是依赖不起。
3G之殇 中国的3G，大概是世界上最扯的3G了。撇开中国自定的鬼扯标准不说，撇开中国3G的奇葩速度和覆盖率不说，最让人诟病的，就是中国3G那奇贵无比的价格。
电信宽带的价格是20M下行220一个月。按照一天开4小时，一个月开22天计，电信一个月可以下载773G的数据。我们打个折扣，假定只下载了220G。那么电信的价格是1元/1G。
移动当然没法和电信比，因为移动数据业务更加复杂。你看，手机费用一般都比固话要高一点，对吧？但是无论技术上基于什么理由，只有价格相近，才能有相近的竞争力。手机通讯价格是0.2/分钟的时候，对固话并没有构成致命影响。当这个价格下降到0.12/分钟的时候，才对固话造成了非常大的冲击。同样，3G要得到广泛的使用，至少价格要接近于这个值。那么现在移动宽带的价格是多少呢？
根据贝壳调查得到的最低值，35元/1G（2013年4月），这还包括上传数据。电信的计算中，我们还没算上传数据量。因此，在移动的价格下跌穿5元/1G前，不用指望和电信竞争。这至少要下跌7倍。
而这里就牵扯到另一个问题，如果流量价格真的下跌这么多，移动和联通是不是吃得消。因为上面我说了，传统业务是非常赚钱的。如果降低数据业务价格，那么传统业务就要受到冲击——你们都不会用电话和短信，而用微信去了。而如果流量价格不下跌，移动又没有办法在数据业务上和电信竞争。
所以中国的3G才出现一个奇葩局面，做3G的公司拼命在做，又不把价格降低下来做到实用。同样理由，移动才希望对OTT收费，而不是直接禁止掉OTT。因为只有这样，才能在流量价格和电信竞争的同时，又不至于影响到自己的传统业务。
心跳是个扯淡理由 首先，如果心跳会造成影响——那就不要搞心跳好了。微信改为上线离线模式，激活后就一直走数据。这和普通浏览器的行为相一致——我以前可没听说过要向浏览器收取什么额外费用的说法。
其次，如果移动运营商管OTT收费了，真的能阻止人类利用OTT业务么？
别搞笑了。用户的行为哪里受软件供应商管束。我租一个小的VPS，在上面搭建一个小的系统，利用UDP和手机通讯，把上面的交互转发到QQ上。移动对这个系统有什么办法？你可以关光所有的OTT公司，但是你能约束用户自己搭建的系统么？要阻挡心跳信号造成的压力，只有对用户收费才是有效的。对软件供应商收费管个P用。
最后，移动运营商自己心知肚明，收费真的是因为心跳信号造成的压力么？网络领域有一个普遍现象，就是随着压力上升，服务质量逐渐下降。如果心跳信号造成了很大的压力，那么会出现的现象是。随着微信的使用人数上升，移动接入服务的质量会逐渐变差。虽然信号是好的，但是数据却传不过来。
趋势 其实我很好奇，虽然电信阻止我们自己建立IP电话系统，但是为什么电信自己不使用IP电话来提到传统PSTN电话网络呢？毕竟成本比较低廉。目前电信的长途还是加拨才有IP电话的，而拨入领域，就没见过IP这东西。 估计再过几年，电话就会彻底死绝。即使在企业领域，IP电话也比普通电话省钱多了，而且很多业务是可以接入到手机的。到时候，除了老古板，没人愿意守着一台不能移动的电话。 视频分享网站涉足电视业务。这点是不可持久的。漫画界已经在整版权了，相信电视界很快也会跟上。到时候各大电视剧的版权都是受限的，说不给你放就不给你放。这样弄的话，视频分享网站倒是能活着，不过只能叫苟延残喘。 但是视频分享网站不一定会死。很有可能发生的事情到是，这些网站替代了传统电视的渠道，将内容送到千家万户。到时候电视台会变成内容的生产者，而视频网站只是内容的传递者。 移动接入之战，搞不好赢家是电信。这种奇葩事情大概只会在中国出现。如果电信把wifi的覆盖率提到足够高，覆盖大多数大街和地铁，公交（尤其是车厢内部），你很难说wifi不会最终赢得大家的拥戴。wifi的参数比起无线来是不算太适合做移动数据传递——他的传递距离在100米以内，不能在医院附近使用，而且最关键的，在两个AP间移动时还会出现断开重连现象。但是wifi的优点是足够便宜，1G的数据大概只是1-2元。据贝壳最新得到的消息，电信自己的流量套餐已经出现6元1G了。这个价格足够把移动和联通统统直接踢出局。 金融领域，作为中国监管最严的领域，是很难很快出现改变的。其实从技术上说，从各大ATM里面直接提出支付宝帐号上的钱，或者存款进去并不是难事。使用NFC技术进行近程小额资金划拨也是非常容易的。再不济也可以推出支付宝信用卡，通过卡片消费支付宝中的资金。这足够使得支付宝成为一家银行的替代品——我们不需要银行。发工资直接发到支付宝里面，我们直接上网购物，交水电煤甚至房租，通过手机进行日常付款，从ATM里面取款或者汇款给朋友。为什么我们还需要银行呢？对此，估计银监局和各大银行都会严防死守，阻止支付宝的落地。 </description>
    </item>
    
    <item>
      <title>什么叫做网桥</title>
      <link>//blog.shell909090.org/blog/archives/2362/</link>
      <pubDate>Mon, 08 Apr 2013 11:18:57 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2362/</guid>
      <description>下面简述的只是linux下的brctl创建出来的玩意，和网桥的学术定义什么的没有关系。
想像你有一块网卡，接上网线，OK，能上网了。
现在，你有一台物理的机器，和一台虚拟机，都需要上网。但是网卡和网线只有一块，怎么办？
如果你能够物理的触摸到虚拟机，你也许会这么干。
找一个交换机来，把物理设备的网卡用网线连接到上面，把虚拟机的网卡连接到上面，再把外网网线接上去，OK，齐活了。
brctl创立出来的网桥就是这么工作的。
你原本的物理网卡，例如eth0，我们直接为他分配IP，进行通讯。结构大概是这个样子的。
system -- eth0 -- network 接入网桥这个假的交换机后，eth0依然负责向外通讯，但是没有自己的IP了。网桥和宿主所在的机器的连接叫做br0（或者br1，以此类推）。
system -- br0 -- eth0 -- network 然后，我们可以为这个交换机接入很多的设备。
system -- br0 -- eth0 -- network | vethXX | virtual -- eth0 / 其中，eth0和vethXX是一对设备。一个在宿主里，一个在虚拟机里。互相连通。
所以，当虚拟机发生通讯时，eth0上可以看到数据流，但是br0上看不到。而如果虚拟机和宿主通讯时，eth0看不到数据流，br0上可以。</description>
    </item>
    
    <item>
      <title>四川行 - 重庆</title>
      <link>//blog.shell909090.org/blog/archives/2359/</link>
      <pubDate>Tue, 02 Apr 2013 11:36:18 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2359/</guid>
      <description>成都-重庆 成都到重庆的距离不算远，大概就是上海到南京的距离。然而特殊的是，由于四川多山，因此路途上不断的上坡下坡。坐在车里会感受到强烈的压耳反应。某种意义上说，比坐飞机还难受，尤其对某些对压耳有一定抵抗的人来说。因为飞机上，气压的增加只有一次，减少也只有一次。而动车上，气压的增加和减少是多次的。每次当你习惯了，气压马上又发生变化。所以非常难受。
不过对于贝壳这种自然调节耳压的人来说，潜水都没事，何况这点小场面。
火锅 重庆的火锅和成都的非常类似，但是没有味道那么重，和上海吃的重庆火锅大同小异。
大足石刻 这次去重庆，一个主要的景点就是大足石刻。
大足石刻是四川这里的一个苦行僧，赵智凤师傅，花了70多年时间所建的佛教摩崖石刻。石刻最著名的地方，就是千手千眼观音像。普通的千手观音像，不过是20多只手而已，所谓千手，是虚指。而大足石刻的千手观音像，足足1000多只，以孔雀开屏的姿态占满一面岩壁。即使我们去的时候正在修整，也给人非常大的震撼。
其他就没什么好多说的了，一天的时间，三小时多的往返，其实只为了看这尊观音像一眼。
洪崖洞 洪崖洞是民俗景观购物街。整个街区原来是一个吊脚楼区，后来拆迁重建，在原来的房子上建的一组商业街区。
整个街区很特殊。因为建筑沿着山体修建，所以重庆本地人说的入口，其实是在11层。街区紧贴山壁，只有9层和4层可以见天，其他层都是全封闭的。你可以大致认为他是一个靠着山修建的4层的建筑，在建筑的上面，留出一条巷子的宽度，然后其余的屋顶部分，和岩壁凹进去的部分上，又建了一个5层的建筑。然后又是一个2-4层的，最上面的部分在山崖上面形成冒顶建筑。
而最底下的1楼外面，是一条加出来的马路。之所以说加出来，是因为这里的山体宽度本不足以修路。于是在山体外打桩，把桩脚打入嘉陵江内，撑住外侧车道。这样才形成的一条马路。从感觉上看，颇似上海的高架路。但是由于桩脚都在江上，因此成本远比高架来的高。
从样式上看，整个洪崖洞气势磅礴。里面有很多吃的和好看的，建议去重庆的人可以去看看。
瓷器口 瓷器口是个千年古镇，上面都是各种商家。
如果你能看到贝壳的照片的话，就应该知道，贝壳是不推荐节假日或者比较繁忙的时候去的。因为这次贝壳去的时候，巷子居然塞住了。贝壳头一次见到这么惊人的场景，4人并排的巷子，由于人太多，由没有次序，居然全部塞在巷子里，出不来也进不去，动弹不得。不过巷子里有不少好吃的，所以还是可以跑一趟的。</description>
    </item>
    
    <item>
      <title>四川行 - 成都</title>
      <link>//blog.shell909090.org/blog/archives/2356/</link>
      <pubDate>Fri, 29 Mar 2013 11:01:01 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2356/</guid>
      <description>赖汤圆，夫妻肺片 回到成都是下午三点，我们要找酒店。站在冷飕飕的大街上打电话找酒店不怎么像话，我们就在隔壁的赖汤圆里面吃点东西，顺便订酒店。
这家赖汤圆在春熙路总府路交界处，挺特别的，芝麻汤圆居然要沾麻酱。凉粉一点都不凉，反而是热的，还浇上辣椒油。喵和我说的时候我笑她，谁说凉粉一定要是凉的。那虎皮青椒是不是要打只老虎，夫妻肺片是不是要找一对夫妻杀掉阿。谁知道她突然想起来说，隔壁似乎是夫妻肺片总店，去吃吃看？
夫妻肺片还又总店？你不怕被当作原料了？不过话说回来，这家的夫妻肺片小贵。一小盘要了我们38。味道也只是一般，我们吃不出和其他地方的有什么区别。
结论是，大家不妨去吃吃赖汤圆。夫妻肺片就算了，尤其是夫妻一起去的话。。。
盘飧市 晚饭我们在剧院旁的盘飧市吃，据说这家是老川菜馆。味道不能算顶好，但是一定正宗。
本来我们对卤肉锅魁很有兴趣，结果他家卖光了。据说每天下午开卖，不久就全光了。没办法，我们点了一个卤水拼盘，一个青椒回锅肉，一个开水白菜。总算开水白菜也是川菜中的名菜，吃来过过瘾也好。
卤水的质量不错，不过没有什么太大的特色。青椒回锅肉的青椒很奇怪。吃到嘴里不辣，但是我记得这个味道我有印象，晚上肚子一定会很惨。要是不服，你大可自己点来吃吃看。开水白菜贵的很，一道菜要48。据说是用高汤一遍遍去浇这个小白菜，所以最后白菜熟而不烂，味道鲜美。盘飧市的开水白菜吃起来很不错，高汤味道也很好。至于其他，我就说不出什么了，有机会自己去吃吧。
川剧 盘飧市的隔壁是锦江剧院。原价180的票，我们在酒店楼下找中青旅的人买，只要138。
这里的川剧是改良川剧，里面混入了很多元素，比较适合外行人看。古典川剧“三英战吕布”，“顶灯”，武行的翻跟头和璇子（会武术的明显能看出舞台风格的武术），现代舞台艺术的芭蕾和空中芭蕾，现代杂技和魔术。当然，不可缺少的是川剧的喷火和变脸。但是作为改良和混合的后果，各种元素没有很好融合，剧情很零散。看的出主线，但是不连贯。大概假以时日继续改良，这些问题都能得意修正。
反正听不懂四川话的外行人也能看懂，138是小贵，但是值这个价。
说句题外话，最后所有演员出来谢幕的时候，男主角下了面具出来过一次，很帅哦。
串串香 从川剧出来，晚上在盘飧市没吃饱，就在隔壁的玉林串串香吃了宵夜。
10块锅底，大串1.5，小串0.15。我们两个人吃了近20道菜，只花了40多。吃的下，不算贵，味道也很好。
龙抄手 早上出门，去春熙路的总店上吃的龙抄手。
主要是龙抄手，钟水饺，甜水面三种。龙抄手味道鲜美，但是和其他两道合起来吃就容易被抢味道，有点可惜。钟水饺吃起来是辣的，后味是甜的。四川的水饺是三角形的，形状很好玩。甜水面是用花生和辣油调和的面条。也是吃起来辣，后味甜。
浣花溪 我们在成都最先去的景点是浣花溪公园和杜甫草堂。据说杜甫在浣花溪旁结庐而居，到今天就是浣花溪公园和杜甫草堂两个景点。
浣花溪公园是免票公园，论园林景观只能算中上。和广州烈士陵园比植被不够茂盛，和江南林园比又不够精巧。比上不足，比下还是绰绰有余的。
不过这只是浣花溪公园本身。若是加上杜甫草堂的名头，就足可拉开其他公园一大截。可惜杜甫草堂居然是收费景点，收费60。我站在门口看了半天，看不出什么值得看的东西。基本是复建园林。如果是复建园林，还不如在外面看看浣花溪就好。
宽窄巷子 浣花溪出来，我们去了宽窄巷子。两者相距很近。
着急去宽窄巷子的原因之一，是我的肚子不堪成都这几天的麻辣，闹肚子要上厕所。另一方面，则是饭点到了，顺便吃个午饭。我们在点评上搜到一家叫成都映象的，据说不错。进去后，点了个椒麻鸡，麻婆豆腐，泡脚风爪，味道都很不错。椒麻鸡用料很足，一吃整个嘴里都麻了。还有一个红糖糍粑，甜甜的很好吃。其他几道都没什么特色，我记不住，也就不说了。
吃饭的时候有两件好玩的事情。一个是我们等菜的时候，来了一个掏耳朵的，要价60。据说掏耳朵是成都文化，我就试试看咯。感觉还真不错，挖耳勺深入进去很深，我平时不敢碰这些地方。掏耳朵的时候略痛，据说是因为我耳道不是很干净的原因。掏耳朵的人手里有个丁零当啷的家伙什，我本来是以为以前招揽生意用的。结果清理耳道的棉花在里面掏到一半，她拿那个家伙什在铁棒上一阵敲。我耳朵里面清楚的听到一堆的叮叮当当，滋溜滋溜的声音。掏完之后还有捏骨，耳朵听东西清楚了很多，不知道是不是心理作用，感觉还是很不错的。
还有就是他们酒店居然还有表演。在我们吃饭的地方旁边，是个小天井。下面是一个戏台，叫窄天井剧院。当天节目有川剧顶灯，变脸，京胡，扬琴，评书。顶灯和变脸我们都在昨天的川剧里看过了，不过这里看的是更加原始的版本。京胡，扬琴和评书是头次看到，还不错。有兴趣的可以去他们家吃个饭。早点去，一定要坐在戏台对过或者天井旁的小桌上，才算看的真切。
文化公园 宽窄巷子离琴台路只有500米左右的距离，我们直接走了过去。琴台路到头就是文化公园，隔壁就是青羊宫。同样，也是60门票。我不算是正宗的道教信徒，所以就没去。
文化公园里面有很多桌子，屋子里面也是很多桌子。我们去的时候天气阴冷，外面没什么人座。屋子里面一大群老头老太太在打麻将。想来若是天气晴好，外面也是和里面一般景象。麻将也算是四川的一大文化特色吧。
锦里 最后一天早上，我们多睡了一会。起床后去的锦里。锦里在武侯祠旁，和宽窄巷子很类似，都是旧城改造的商业街。不过比宽窄巷子大一些，也好玩一些。
我们在锦里吃了成都名小吃，三大炮。说白了，就是糯米团子，裹上黄豆纷，放在红糖水里面。吃起来软懦香甜，味道很好。之所以叫三大炮，是因为揪出来的团子要砸在台子上，发出咚咚咚的声音。
锦里这里还有一个张飞牛肉。是用花椒，八角，茴香烧熟的牛肉。我们去的时候刚刚出炉，买了块热的，切开，现买现吃。香是很香，味道不错，不过怎么看都像是下酒菜。想想张飞的脾气秉性，也就释然——若是冠上他的名头，不是下酒菜才奇怪了。
张飞牛肉的特色不在牛肉，而在他们的活人广告。他们找人画上张飞的脸谱在那里叫卖，也算是一大特色吧。</description>
    </item>
    
    <item>
      <title>四川行 - 成都-磨西</title>
      <link>//blog.shell909090.org/blog/archives/2353/</link>
      <pubDate>Thu, 28 Mar 2013 14:22:16 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2353/</guid>
      <description>成都 以前没来过成都，第一天下午到的成都。找地方住下后，先去订了一张到磨西的车票。结果还没有了——貌似冬天车票也很紧张阿。订了一张去泸定的，离磨西50公里左右的样子吧，也有车过去，需要转一下。
晚上在蜀九香吃的火锅，排队排了快一个小时，但是相当值得。外面就能闻到阵阵香味，进去吃的时候，一个红油锅子里面放着各种香料。我们能看到的只有辣椒，花椒，大块的生姜，还有大葱。但是那个香味看上去不像是这么简单的样子，吃过之后味道一天都散不掉。火锅料有酥肉，豆皮什么的。我们后来点了一道黄辣丁，上来居然是几条鱼。放在锅子里面煮开，鲜的很。各种食材在火锅里面涮一下，很快就变得红中透金。吃之前要在油碟里面过一下，解辣。我猜是因为辣椒素是脂溶的，因此，用水是洗不掉的。涮过的食材，上面会粘附一层辣椒油，而且会有部分溶解到食材的脂肪中。试图在茶杯中洗一下的同志可以省省了。在过油之后，表面的辣椒油会被洗下去一层。不得不说这是个很聪明的办法，因为我吃了一块洗过的和一块没洗过的，后者导致我第二天肚子一直不是很舒服。。。
成都-磨西 磨西是古羌语，是宝地的意思。成都在东，磨西在西南的方向。去往磨西的路往西南走，开始100多公里是高速。而且开到荥经，google地图上的高速已经结束了。实际上高速一路延伸，一直到汉源附近。据朋友说，这条高速8月才通车。车到石棉县再向北转折，沿着大渡河开往泸定。
原本按照地图，我们应当过二郎山隧道的。车上有个女的去过，告诉我们那里风景很不错。可惜，照我们这家客栈老板的说法，现在那里堵车，过去要多堵两个小时。所以现在货车一律走二郎山，客车就从石棉那里绕过来。
高速路段的风景乏善可陈，真正的风景是从汉源下了高速后开始的。汉源那里有个水库，过了水库旁边的隧道，能看到一条非常宽阔的河。水面碧绿，车就在水旁边开。很多路段，车甚至不是从山体上切割出来的，而是在水面上架桥蜿蜒过去。
接近石棉，地势就越发高昂陡峭。房子就建在山坡上，远远看去好像一座山上一层的岩体裸露一样。旁边的山体有很多就是这样裸露出来的，底下是大块的岩石和松软的土。这里的土还不是江南那里的那种粘土，而是粗沙土一样的东西。这样的房子在地震的时候发生滑坡是一点不奇怪的。
过了石棉，道路就狭窄起来，只有沿着山体切割出的一条2车道国道。国道下面就是大渡河，河水不是绿色或者蓝色，而是苹果绿中泛出一种乳白的色泽。配合翻滚沸腾的波涛，还有碎石裸露的河床，我猜我大概知道为什么河水是这种颜色。大渡河在某些河段非常凶，平静的河水在一个小口突然下跌，下面就是急速的河流。如果落差再大点，大概就会形成瀑布了。
车行到彩虹桥，司机就让我们下车了。泸定还要往北50多公里。从彩虹桥下车，上当地的黑车，不过一刻钟的功夫就能到。
磨西 磨西是个不大的镇子。地图上看，镇子基本是西北-东南走向，宽度大约500米，长度大约1公里出头。但是地图上绝对不会告诉你，磨西这里的主要街道有10-30度的坡度。在路上走着，就仿佛在爬山一般。
我们是下午到的磨西，晚上就住这里，第二天再去山上玩。驴妈妈这么安排其实很不合理，因为磨西往成都的车只有早上七点半的一班，而山上七点是没有车下来的。所以我们下午只能逛磨西古镇，第二天玩一天，第三天转车才能回去。如果第一天上山，第二天住磨西，就可以直接订票回成都了。
我们住的是一缕时光，网络上评价不错。老板是个藏族，他儿子是个帅哥哦。酒店有wifi，我们现在就在用wifi上网写文章。
晚饭我们在一家藏族餐馆吃的，老板娘汉语都不怎么说的好，而且一边干活一边用我们不懂的语言唱歌，肯定是藏族无疑。我们吃了土豆包子，牛肉包子，还有酥油包子。酥油包子我们吃的不大习惯，不过牛肉包子很赞。我们还点了奶茶，牦牛酸奶，还有手撕牛肉。奶茶看起来确实很有藏族特色。老板拿点粉末放进去，然后拿一大壶茶一冲，倒出来就是奶茶了。喝起来有点奶粉味道，又有点酸酸的。酸奶很小一碗，不过确实不像是外面卖的酸奶，因为没有任何稠的感觉，就像是面霜一样一坨一坨的。手撕牛肉很贵，不过是我们吃的最好吃的东西。就是汤煮牛肉，放一点辣椒和盐巴。牛肉没有煮的特别烂，但是很鲜，很香。加上辣椒后就非常好吃。
不过不得不说，这玩意有些人就是吃不惯，有兴趣尝试，不要勉强。
海螺沟 海螺沟是贡嘎山脚下的一条冰川，最低点3600米上下。来海螺沟玩，主要是看周围的雪山，尤其是贡嘎山主峰，7400多米。还有冰川和大冰瀑布。
这里不得不说海螺沟的坑爹之处，我还以为门口80的票已经包括到山上了呢。结果门口的票只包括门票和一个多小时上山车的车票，要上山顶还要坐150的缆车。缆车会把我们送到4000米左右的高度。我们去的时候运气不大好，又是云雾天气。坐在缆车里什么都看不见。上到山顶，居然瞬间转运，出门就看到天开颜，露出西边的山麓和顶上的积雪。
如果昨天的景色已经用掉了惊心动魄这四个字，我就不知道该如何形容今天的景色了。整个大山仿佛漂浮在云雾上方，从东南西三个方向包围着我们。周围的其他雪山都是黄黑色的岩石上有积雪，仿佛斑纹一样。贡嘎山主峰就在西南方向，整个全是白色的，非常显眼。说是说7400米，世界第41高峰。但是看上去也不怎么高的样子。实际上是因为我们本身就已经在山下，因此感觉不出。
云雾天看山是要运气和耐心的。云雾偶尔会被风吹散，露出大山。几分钟内又会笼罩回去。能不能看到，看到多少，全靠运气。难怪山里的人多数都信佛教，希望得到神灵的庇佑。我们没有跟团，因此多留了点时间。两个多小时的时间里，天总共开颜了四次，加起来20分钟的样子。我们基本看到了所有的景色，包括冰川和大冰瀑布。唯独贡嘎山顶始终笼罩在一团云雾之中，不肯显露真颜。
海螺沟的冰川和大部分人想象中不同，它并不是白色的，而是灰色的。因为向下流动过程中，夹带了大量泥沙的关系。在冰川的上游，有个非常罕见的冰瀑布。冰川从瀑布上出来，跌落在下面继续向下。和普通瀑布差不多，除了里面走的不是水，而是冰。下冰川的路途非常狭窄危险，我们不想让当地人抬下去，所以就没下去。
向上走，可以看到小片的红石。据说这东西在燕子沟比较漂亮，是由高原旱藻在石头上生长造成的。因为是特殊气候条件下生长的藻类，所以当拿回家后就会慢慢死亡失去颜色。
最后说一句，要去看山一定要戴墨镜。去高海拔地区可以提前买点牛肉干或者糖块之类的，以补充能量，防止高原反应。
温泉 海螺沟下来，我们坐车到了二号营地的温泉酒店。酒店那里猴子很多，我们寄放在前台的一包甘蔗就被猴子抢走了。鉴于普吉岛的经历，我建议大家离猴子们远点。
既然是温泉酒店，温泉就是酒店最大的特色。这里的温泉水很热，高达60-80度。经过引出后，温泉池日夜冒出热气，整个温泉区域都散发着一股浓郁的硫化氢气味。
酒店有对住客提供一套浴袍和浴巾，如果买门票来泡就只有租了。可以房间里换好衣服出去，也可以用他们的更衣室。不过鉴于现在这个天气，我建议还是更衣室换好衣服就赶紧往温泉池里面跳吧。
温泉池的温度大约是40-45度，一般来说，越高温度就越高。池子里面有漂浮的细细的雪花一样的物质，酒店说明这是钙质沉淀，我觉得靠谱。碳酸钙的溶解率是随着温度变化的，从高温到低温的时候，会有大量碳酸钙溶出。但是酒店在泉眼的说明文字——让我怎么说呢。上面居然说这个泉水是“氢泉”。废话，只要是个泉水，里面都有氢。要是说游离氢离子——难不成泉水的PH值小于5？那还能不能泡了？真是，一点文化基础都没有的乱忽悠。吐槽不能。
泡过温泉会让人觉得暖洋洋的，很舒服，而且皮肤很滑。另外，运气好的话泉水区有很多美女哦。我在泡的过程中有好几拨美女路过，很多都是夫妻一起来的（恩，我家喵也算一个），甚至一家人协老带小一起来。
磨西-成都 从磨西回成都是个麻烦事，因为早上的班车7点半就发车了，而酒店8点才开出班车。因此回到磨西镇上我们需要自己找出路。
幸好，昨天有个女的，和我们说她能帮我们联系上泸定的司机，司机在经过彩虹桥的时候把我们稍上。讲好回程车票150一人，到彩虹桥的车钱30。估计她大概在里面总计赚了30-50。能解决问题就好，要是我们等一天，或者打车去泸定再走，花费只会更多。
回成都的路上，天气放晴（就阴了一天半，什么人品。。。），我们得以看到大渡河的真面目。真的是非常险峻而漂亮。到了石棉以下，河水渐渐宽阔，整个江上广阔无垠，又是另一番气象。如果有机会过的话，这段风景不可错过。</description>
    </item>
    
    <item>
      <title>python插件技巧</title>
      <link>//blog.shell909090.org/blog/archives/2344/</link>
      <pubDate>Wed, 20 Mar 2013 11:18:03 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2344/</guid>
      <description>简述和通则 何谓插件。
在实现某个功能时，经常需要对一个功能提供多种实现。例如短信网关接口各异，但是对系统而言，发送代码是一样的。 通过一套特定的机制，在成型的产品中，增加一个独立的文件，即可实现定制化实现。这套机制被称为插件机制。插件必须满足下面几个要求。
对于已经发出去的产品，插件机制可以通过增加文件，并少量修改（一般1-3行）产品源码，即可为产品添加新的功能。 对于产品主分支，带有插件不会影响主分支的正常工作。 插件机制的以上两个特性对产品定制非常有帮助。因为使用插件进行定制开发的项目，不需要独立建立分支。只需要在主分支上添加几个文件即可。分发补丁时也格外容易。
禁止在python主目录下直接放置插件，所有插件必须在python下级目录下存放。 插件的命名必须使用前缀师命名规则，所有同类型插件，要么在一个目录下独立存放（目录下没有其他代码），要么在一个目录下拥有同样的前缀（其他代码不得使用这个前缀）。 替换型插件 最简单的插件手法，就是某个文件提供提供某些函数，在变更功能时用另一个同样实现这些函数的文件替换掉原始文件。这甚至称不上一个插件手法，只能算打补丁。
替换型插件的提升，就是在文件中不直接提供函数，而是从某个其他文件载入这些函数。例如以下代码：
from abc import * 原始是从abc文件中取得所有符号。当有新的文件abc2提供时，将原始文件替换为abc2，补上去，即可改变代码。注意这行代码一般不在一个大的文件中的某一行，而一般存放于一个独立文件。因为大文件相对容易修改，不能用新的代码替换。而独立文件相对固定，在打补丁时可以用新的代码直接替换。
替换型插件适用于，对于某个客户而言，只需要在多组实现中静态的选择一组的情况。替换型插件的优点是工作原理简单直观，排查容易。缺点是对于一个功能不能提供复数组实现。
配置型插件 另一种插件手法基于文件或配置。在某个目录中，放置某个功能的多个实现。在加载时，载入全部插件。在使用时，根据配置动态选择。这种手法被称为配置型插件。
配置型插件是一种非常重要的编程技巧，他为程序提供了非常优良的可扩展性。
例如下面的例子，简述了一种配置型插件的实现：
funcmap = {} def register_func(name): def _inner(func): funcmap[name] = func return func return _inner 在具体实现中 @register_func(name) def func1(....): pass 在__init__.py中，import一下新的文件。在原本的funcmap中，即可出现新的name和func的对应。
配置型插件适用于大多数场景，其优点是工作原理简单，可以为一个功能提供复数组实现。缺点是使用上限制比较大，必须和逻辑结合，思考困难。
动态加载 动态加载插件是一种插件技巧，并不特定用于替换型或配置型插件。
当需要加载插件时，通过python代码访问文件系统，枚举出特定文件并加载的技巧，称为动态加载。以下代码是配合上面的配置型插件的例子，实现动态加载的例子。
def load_plugins(): for filename in os.listdir(&#39;plugins&#39;): if filename.endswith(&#39;py&#39;): __import__(filename[:-3]) if filename.endswith(&#39;pyc&#39;): __import__(filename[:-4]) 动态加载的优点是，可以通过放置文件来增加/修改功能，而不需要修改代码。缺点是，由于需要访问文件系统，因此效率并不高。如果每次加载都需要动态查询，那么系统效率会大幅下降。
热加载插件 热加载是一种比较高级的技巧。在程序执行中，不退出进程而动态的将最新的组件加载进来的能力，被称为热加载。
简单的热加载就是在每次执行功能的时候，检查是否有新的组件。由于这样会带来很高的系统负载，因此除非必要，否则不要滥用热加载。
更复杂一些的热加载，需要用新的实现替换原有实现。这涉及几个编程上的限制。
热加载有几个限制，必须严格遵循：
在所有访问前，必须检查文件。 如果要进行热替换，不得将原有文件的导出符号作为值使用。即，无论是文件的导出数据，导出函数，都不得作为其他对象的赋值内容。 热替换内，不得保存私有数据。所有数据必须在上下文中，或者全局中存放。 </description>
    </item>
    
    <item>
      <title>vpn转代理</title>
      <link>//blog.shell909090.org/blog/archives/2339/</link>
      <pubDate>Tue, 19 Mar 2013 10:54:59 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2339/</guid>
      <description>背景 贝壳自己的vps蒙难，不能正常工作了。所以贝壳买了一个vpn。是pptp/l2tp系列的。用起来很好用，但是这类ip-based vpn有几个不便。
不能自动设定客户端路由表，实现智能翻墙选择。 每个需要翻墙的设备均需要拨号，而目标设备有容量极限。 不能实现非侵入式翻墙，打开之后连p2p都翻了。 与此相反，代理式翻墙可以比较有效的解决这些问题。一个点拨号，其他点可以共享代理。不需要翻墙的直接访问不设定代理就好。唯路由表没有办法。实际上，为了使得代理可以使用路由表选择，贝壳还是花了一番功夫做了antigfw项目的。
闲话少说。这次贝壳就展示一下如何在debian下设定pptp vpn，并且利用代理无缝共享的。
linux下的vpn设定 安装pptp-linux这个包，然后按照说明使用即可。
pptpsetup --create &amp;lt;TUNNEL&amp;gt; --server &amp;lt;SERVER&amp;gt; [--domain &amp;lt;DOMAIN&amp;gt;] --username &amp;lt;USERNAME&amp;gt; [--password &amp;lt;PASSWORD&amp;gt;] [--encrypt] [--start] 自己填充用户名密码服务器，就会在/etc/ppp/peers/下面生成对应的文件。使用pon tunnelname就可以拨号了。
路由设定 初始设定好的vpn不具有智能路由，因此必须添加一些内容。
首先使用chnroutes.py这个程序，得到ovpn下常规用的路由表。当然，我们可以用linux下的路由表，但是他的old gateway存放在了/tmp下面，对此我并不是很喜欢。所以我只用了他的路由 表信息，其余自己处理。如果你不确定自己执行时的默认路由，理论上也应当需要下面的一些配置。
使用下面这个topptp.sh，可以将输出的routes.txt转换为pptpup和pptpdown两个文件。
#!/bin/bash ETHGW=192.168.1.1 cat &amp;gt; pptpup &amp;lt;&amp;lt;EOF #!/bin/bash export PATH=&amp;quot;/bin:/sbin:/usr/sbin:/usr/bin&amp;quot; EOF cat &amp;gt; pptpdown &amp;lt;&amp;lt;EOF #!/bin/bash export PATH=&amp;quot;/bin:/sbin:/usr/sbin:/usr/bin&amp;quot; EOF sed &amp;quot;s:route (S*) (S*) net_gateway 5:route add -net 1 netmask 2 gw $ETHGW:g&amp;quot; routes.txt &amp;gt;&amp;gt; pptpup sed &amp;quot;s:route (S*) (S*) net_gateway 5:route del -net 1 netmask 2:g&amp;quot; routes.</description>
    </item>
    
    <item>
      <title>lxc的文件共享映射和严重安全隐患</title>
      <link>//blog.shell909090.org/blog/archives/2334/</link>
      <pubDate>Sat, 09 Feb 2013 01:18:31 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2334/</guid>
      <description>在lxc中，可以利用mount bind指定guest可以访问某些host的路径。例如：
lxc.mount.entry = /home/shell /var/lib/lxc/{vmname}/rootfs/home/shell none defaults,bind 0 0 注意，/home/shell是你希望共享的主机路径，/var/lib&amp;hellip;/shell是映射到的目标路径。
这个工作的基础原理，是在虚拟机启动的时候，自动执行mount，添加一条bind映射，将host的路径挂到guest可以访问的路径里去。
由此，我发现了一个lxc在文件共享时的严重bug。
user@guest:~$ mkdir -p ttt/123 user@guest:~$ cd ttt/123 user@host:~$ mv /var/lib/lxc/{vmname}/rootfs/home/user/ttt/123 . user@guest:~/ttt/123$ cd .. user@guest:(unreachable)/user$ ls -l 好了，现在guest在host的~user/目录下，host上本来不应当被看到的东西全被看光光了。
更严重的是，如果此时sudo成root，在host中可以以root的身份做任何事情。
结论：暂时来说，不要在host和guest之间直接共享任何数据。</description>
    </item>
    
    <item>
      <title>fork两问</title>
      <link>//blog.shell909090.org/blog/archives/2332/</link>
      <pubDate>Fri, 01 Feb 2013 10:44:23 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2332/</guid>
      <description>问题1 以下代码。
int main() { fork(); fork(); fork(); printf(&amp;quot;---n&amp;quot;); return 0; } 编译后执行./a.out | wc -l，输出多少？
问题2 以下代码。
int main() { fork(); printf(&amp;quot;b&amp;quot;); if (fork() == 0) { write(1, &amp;quot;a&amp;quot;, 1); }else{ write(1, &amp;quot;c&amp;quot;, 1); } return 0; } 编译后执行./a.out，输出多少？
答案 第一个是8，因为pipe会继承。
第二个是cabcbbab，结果不恒定，原因比较复杂。至少应当能看懂2个a2个c4个b，c先出ab后出最后一个是b。</description>
    </item>
    
    <item>
      <title>修正问题，让debian testing使用lxc</title>
      <link>//blog.shell909090.org/blog/archives/2329/</link>
      <pubDate>Wed, 23 Jan 2013 16:57:03 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2329/</guid>
      <description>目前debian testing里面的lxc是无法运作的。原因是live-debconfig这个包只在sid中存在，而lxc是借助这个包来做系统初始化设定的。没有设定就结束初始化会挂掉系统。
解决方法如下：
dget -x http://ftp.de.debian.org/debian/pool/main/l/lxc/lxc_0.9.0~alpha2-4.dsc 可能因为没有key而无法解压，用dpkg-source -x解压开内容即可。
aptitude install autotools-dev docbook2x libapparmor-dev libcap-dev linux-libc-dev 然后进入目录，dpkg-buildpackage -rfakeroot -d进行编译。
退出目录，dpkg -i lxc&amp;hellip;进行安装。
到/usr/share/lxc/packages/，wget http://ftp.cn.debian.org/debian/pool/main/l/live-debconfig/live-debconfig_4.0~a15-1_all.deb。
然后再执行常规操作。
lxc-create -n vm0 -t debian lxc-start -n vm0 启动正常了。
在debian wheezy 3.2.0-4-686-pae下测试通过。</description>
    </item>
    
    <item>
      <title>封抢票插件究竟封的谁</title>
      <link>//blog.shell909090.org/blog/archives/2325/</link>
      <pubDate>Sat, 19 Jan 2013 22:25:29 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2325/</guid>
      <description>12306抢票插件被工信部封杀的事情相信大家都听说了，具体我就不细说了。
首先说明一下我的立场。我不需要春节回老家，用不着。所以我也不抢火车票。你们不用质疑我吃不着葡萄说葡萄酸，也不用骂我仗着技术欺负你们。我只是把我看到的和想到的说出来，仅此而已。
我先简单说一下，抢票插件的工作机理。需要说明的是，由于我自己不用，封杀后也比较难找到渠道弄一份来。我是通过作者叙述反推和猜测工作机制的。如果有问题，请联系我，我尽量修改。
此事合不合理 个人认为，12306抢票工具，主要简化了铁道部系统登录，刷票，购票的过程，使这个过程更加简洁。就我个人理解而言，抢票插件是针对铁道部的12306定制的一个http工具组。他的主要功能，就是在铁道部不合理的UI上，加了一层包装，方便用户使用，仅此而已。
为什么这么说？我们反过来看，站在程序员的角度，如果要恶意抢票，有什么办法？
使用phantomjs。phantomjs是一个headless browser，每个phantomjs实例大约是20M内存，可以模拟一个独立的浏览器。如果网络撑的住的话，一台8G内存的机器，最多可以开启400个会话，模拟400个浏览器同时登录。由于12306没有限制一个IP可以登录几个人，因此在phantomjs上面写抢票插件，可以做到400个浏览器同时刷票的效果。 使用python开发定制化爬虫。这个是我的专长领域，我用这种技术对多个网站做过爬虫，抓上面的内容。采用这种技术的情况下，每个实例大约消耗8M内存。因此上面的机器可以支撑1000个浏览器。 把程序改用go写，并且将程序并行化。我没这么做过，不过大致估算了一下，租个4G内存的云主机，大约可以支持2000个以上的会话，相当于2000人同时抢票的效果。按照盛大云的价格来算，租个10天用来抢票只要160块，即使是个人也可以轻易租上百台，相当于20W个人同时抢票。 以上估算有两个问题，一个是校验码，一个是支付。
校验码通常使用OCR可以解决，铁道部的校验码本身重码率就很高，内容识别出来就等于知道答案。而OCR，对于有经验的程序员来说，只是成功率问题而已。 退一步说，OCR不解决也不是什么问题。OCR和支付让人工来做，其余事情系统自动处理。这样的系统也不是没有。 好吧，你们想象一下看看，以上一个系统，是怎么样一个存在？20W人同时抢票，你觉得自己胜算几何？
当然，你会反驳说花个近2W租服务器写程序有什么了不起的。是没什么了不起的，不过如果你抢不到票，花10块帮你抢票你做不做？一天只要抢200张票就够服务器开销哦。只要抢个400张票就可以满足开发成本哦。你觉得20W人连续不断抢票，一天抢不到1000张么？你太天真了。
这才是真正不合理的事情。 这些事情，抢票插件都没做。
封的住么？ 我很怀疑这件事。别人不说，我专长就是写python爬虫。所以很明白，你要封掉爬虫，从技术上很难，得从业务上下手才行。至于行政手段，脑子进水了吧。
为什么？拿前几天的一个小事来说吧。我想看小说，某个网站允许看，但是只有会员才能下。没办法，我拿chromium调试了一下，然后写了个python脚本爬下来50多M的小说。加起来总共也没花10分钟。然后我去网络上问了一下谁有兴趣，把程序传给他们，就不管了。
看，爬虫就是这么简单的一件事情。
而且还有github在。如果要联合几个朋友写个爬虫，每人一个页面，我估计也是几个小时内可以完工的。
行政手段？那最多只能让普通用户找不到可用的插件，却不会让程序员写不出可用的代码，更不会让心存恶意的人止步。
密码学常说，不能指望对方不了解你的机制来保护安全（术语称为黑盒机制）。必须让所有人都能够看到过程。在这种情况下，你的信息仍然是安全的，那才是真正的安全。
当你的网站不安全，抓几个用漏洞的人来处分掉就假装网站安全了？你的改进呢？你的补丁呢？你是鸵鸟么？
铁道部的网站，就是这么个黑盒。明明大部分程序员都可以很容易的爬来爬去，却禁止让一般民众接触到这个事实，假装这件事情不存在。
事情的后果 也许有人说了，既然都写的出，你为什么不写一个？上面说了，我没必要抢火车票。再说，大部分抢火车票的程序员有好用的插件，为什么还要自己写一个？
现在，我假定普通人再也不能通过简简单单的装个插件抢火车票了。你们没发现这意味着什么么？这意味着有知识和能力者，和普通人，被彻底的分开了。尽管以前，有技术的翻墙，没技术的被墙。我们仍然可以假装这个事情和我们没有关系，可以假装这个世界仍然很美好。但是今天，有技术有知识有资本的仍然可以凭借技术弄票，没技术的就只能干瞪眼。
这是更大的不公，而且可以产生恶意的寻租。
原本程序员写个刷票程序是没什么好处的。虽然刷票快，但是普通民众也可以装个刷票工具来刷票。你那20W刷票大军碰到全国的刷票机器，恐怕也得缩着。既然普通人不能使用插件了，只能用浏览器慢慢的刷。那么，允许我大胆的猜一下——职业刷票者的黄金时代到了。
租个云主机，然后用专用的程序帮别人刷票。通过淘宝先交易，付定金，拿身份证，刷票卖。整个流程链太成熟了。现在唯一的麻烦——普通人自己有刷票工具——都不存在了，真完美。
别以为做技术的多清高，真清高就不会有做木马的了。
封掉插件便宜了谁 在讨论抢票插件前，先弄明白，谁在用抢票插件？是大多数不会技术的普通民众。谁在消费抢票插件？是各大浏览器厂商。这本就是不应存在的东西，你见过有刷秒杀的工具，你见过刷淘宝的工具么？
浏览器厂商为什么拿抢票插件当卖点？因为那玩意做的烂，你还不能不用。
封掉抢票插件便宜了谁？我不知道，反正不是每个买不到票的人。
此事不合理和不合法 而且，此事开了一个很不好的先河。网络不是法外之地，要封人也要讲一个合理合法。先不说抢票插件的合理性，单从合法性而言就显然不对。工业和信息化部作为行业管理部门，主要是管规划、管政策、管标准，指导行业发展，但不干预企业生产经营活动。你什么时候见过一家公司做了个产品，工薪部上去指手画脚的？
除非这个产品影响了整个行业生态。就像当初的QQ和360。
抢票插件哪里影响到计算机行业生态了？他只是影响了12306这一家网站的稳定性吧。如果因为网站的稳定性就可以让工信部出手约谈的话，那搜狗爬虫乱爬我网站，我写了robots.txt他也不管，这事工信部管不管啊？电信给我访问里插广告，这事情工信部又管不管啊？</description>
    </item>
    
    <item>
      <title>2.4G网络冲突问题</title>
      <link>//blog.shell909090.org/blog/archives/2317/</link>
      <pubDate>Wed, 09 Jan 2013 17:22:55 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2317/</guid>
      <description>由于2.4G是各个国家共同保留的一个非牌照频率，如果商家打算做什么无线通信的玩意，又不打算申请频率，那就只有用2.4G。因此，其实很多设备在无意中都在使用这个频率，他们之间会互相干扰的。
蓝牙 无绳电话 部分微波炉 无线网卡 无线门铃 深圳某地铁公司的信号闭塞系统。。。 某种设备的信号，对其他设备来说就是噪音。高速传输设备，尤其是wifi，在高噪音的环境下速度很慢。 因此，建议在复杂环境下的wifi用户尽速迁往5G频率。你家要是无线环境很干净（例如我这里，屋子电磁屏蔽好），那就不是很着急。</description>
    </item>
    
    <item>
      <title>2013南方周末事件后续1</title>
      <link>//blog.shell909090.org/blog/archives/2315/</link>
      <pubDate>Tue, 08 Jan 2013 09:56:26 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2315/</guid>
      <description>事实变化 首先和大家道歉。在上一篇《传播学角度分析2013南方周末事件》中，我提到一个事实，就是审稿的人自己动手。现在事情还原出来，并非如此。从描述来看，动手的还是报社总编和副总编。具体可以看《南方周末》编辑部披露2013新年特刊制作过程指违反编辑流程。这总算解我一个心头疑惑，为什么宣传部会干出这么蠢的事情，公然违反编审原则。
当然，这不是说他们不傻。要评价的话，大概就是40的智商可以升到60了。为什么？尽管没有自己动手，但是在审稿通过上严重违反流程，直接导致新闻事故。
什么是新闻流程 我曾经南方日报社出过差，貌似听过他们的编辑讲解采写流程。不过脑子里没印象了。现在脑子里记得是其他报业的采写流程，而且也不真切。要是有编辑看到里面有错，麻烦帮我纠正。
首先我们从采写说起。报业得到新闻线索，先是记者得去现场，这个称为采写。采写回来的稿件称为待编稿，然后就是编辑部的事情了。
编辑部有几种来源，记者采写，新华社稿件，还有对于大型事件，编辑可以自己写点评。无论哪种来源，编辑对原始材料进行编辑，交给版面主编审查。这一步主要是看文章方向，立意，尺度，如果不合格，就退回去再改。
编辑大约是下午2点-4点上班，要在晚上8点前搞定稿件。
通过版面主编审核的稿件，就是基本就初稿了。然后稿件会交给主编，校对，审读走流程。这个流程每个报业都不一样，我记得的流程是主编，审读，校对，不知道有没有错。流程走过后，稿子就会存在系统里面，由排版部门进行排版。根据版面的特性，排版部门也会有微调。例如删去几个字，保持行的利用率等。但是一般不做内容调整了。
排版大约是晚上9点到11点之间，最晚不能晚于12点。
排版后，好像会由版面主编，总编，和宣传部的人再看一遍，把握文章尺度和原则。如果这里过了，版面主编，宣传部的人，总编会在版面上签字，确认内容可以出版。这个叫签版，谁签版谁负责。这期间编辑不能走。因为如果出现问题，需要再修改。如果被枪毙，就需要用替换稿件填充。所以编辑要随时待命。
12点前，逐个版面签字确认后，就送印刷厂了。印刷厂最迟2点拿到稿子，大约4-6点左右完成印刷，然后6点前就要由物流发行到全市。迟了就是新闻事故。常规日报就是这样出出来的。
这次呢？ 从更新一些的信息来还原，这次的事件，流程是这样的。
编辑写稿子，然后主编审核，给毙了。改了内容，和宣传部沟通后，给过了。到这里为止，和普通新闻稿件流程也没什么异常。
然后去排版，排版过了，宣传部还要修改。从这里开始，问题就来了。传统上说，如果一篇文章到了排版流程，还是有异议。主编一般会用备稿替换。但是题词这么大个东西，没法换稿子，编辑又放假。所以主编和副主编根据宣传部指令操刀，跳过新闻流程，直接改内容。结局就是这么一份四不像的玩意。
为什么不在修改后走流程呢？关键在于这个时间点。如果是晚上9-12点间，一切好商量。编辑还在，排版也在，校对都在。问题是时间一到，按照传统就OK了，大家都走人了。突然出现无法出版，要再召集大家回来走流程，就会拖过晚上2点的期限，导致来不及印刷，一样是新闻事故。
当然，我从南方系看到的时间表和我记忆中并不一样。不知道是因为休假的关系（休假的内容需要提前做好），还是因为南方报业的时间本身就不一致。但是无论如何，如果内容修改拖到照排之前，出新闻事故几乎是必然的事情。
问题在哪里？ 从一开始就有问题。对于不能替换的内容，一定是事先定稿。要干预修改都应当在定稿期间做。哪里有重要报道到上印刷机前才开始修的。所以事情可以定性，这是一个新闻流程事故。问题是谁是始作俑者。
其次，万一出问题，也不应当强行修改。万不得已的情况下，删掉稿子，用备稿替换，重新编辑。当然这也是新闻事故，但是程度小很多，不至于搞到今天这样沸沸扬扬。然而对于特别重要版面，完全可能没有备用可选。
目前的问题是，具体情况到底如何？只有员工的回忆和披露，没有调查，没有真相。我也觉得事情中有些蹊跷的地方，无法自圆其说。然而，编辑们的要求是调查真相，而不是一味的推卸，这是理性诉求。相反，是不是有某大佬事情，现在尚没有定论。然而某些人对此大动干戈，才是让人感到他在欲盖弥彰的原因所在。
最后，对于引起群众热议的事情，不应当使用暴力手段。群众的特征是你不顺着他说，好事都能变成丑闻，何况原本就是丑闻。当然，以贝壳个人的分析，这未必是幕后的本意。很可能是事已至此，只能如此一搏以自救。</description>
    </item>
    
    <item>
      <title>传播学角度分析2013南方周末事件</title>
      <link>//blog.shell909090.org/blog/archives/2311/</link>
      <pubDate>Mon, 07 Jan 2013 01:24:28 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2311/</guid>
      <description>也许blog又要被封了。不过管它呢。总是计较封与不封，自我审查内容，和墙内何异？
题记 Freedom consists not in doing what we like, but in having the right to do what we ought. — Pope John Paul II 始末 不多评述，请看这里
评论 之所以我会特意上来写一篇，是因为这严重的违反了传媒理论。我说的不是传媒自由，或者舆论监督。中国历来没这东西，我已经不是很奇怪了。然而传统上，管理媒体的手段叫做“述而不作“。白话来说就是挑话说。有些事情说，有些事情不说。有些不能不说的事情往轻里说，有些没啥大不了的事情往重里说。这种伎俩在宣传上是常规手段，即使以新闻自由而著称的美国，也不能免俗。你看共和党的报纸有骂自己人的么？都是轻描淡写吧？
然而，挑话说的基础，就是说话的人和审稿的人必须分离，即编审分离。为什么分离？一方面，有一部分原因是因为审稿人并没有精力亲自操刀写所有的文章。然而另一方面，则是警惕一人稿的视角同一化问题。最后，也是最重要的。必须让编辑有权力不发稿件。如果编辑认为发稿件会严重影响他的声誉，他有权不发。如果稿子非发不可，往往会署名新华社稿，或者是化名稿。这是整个新闻系统的传统。
在此之上，才是传媒管理手段。大部分传媒管理手段都是通过指令的形式下发。例如XX事件不许报，XX事件要重点报。不要想当然的认为传媒管理手段是破坏新闻自由，天下新闻何其多，天天写你没兴趣的东西，报纸不亏才有鬼。传媒管理手段在任何报业都必然存在，只是中宣部利用传媒管理手段表达自己的意志而已。好一点的媒体，这些指令都是公开的。例如某个事件不许报，会有明令，哪个范围不许报。糟糕一点的就是黑审查，对外只是含糊的说，这些东西不合格。编辑就得漫天猜，这又踩着哪路神仙的线了阿。
本次事件和上述情况都不同。本次事件最恶劣的一点，就是强行删改作者稿件，还居然署原作者名。如果对稿件不满意，退。还不满意，删。这都是报业常态了。我们曾为报业做采编系统，业务逻辑中居然有三重审查系统。实际上只有第一重和质量管理有关，后两重都是意识形态管理。然而对内容不满，处理方式也是退稿，或者不让上。从来没听说过有业务需求是审稿者自己可以操刀修改稿件的。在系统中，唯一有权利又审稿又操刀的只有主编，而且主编操刀一般都会把名字列在首位，大半作者也觉得很光荣——如果不是被主编骂了个狗血淋头的话。
然而本次事件首开先例，审稿者自己操刀修改内容。这本就违反常规流程。更SB的是，丫居然还改出一堆错误。短短的150字按语，被人挑出数个错误。这操刀者的水准可想而知——我觉得他的小学语文老师应当剖腹自尽以谢天下。
得，既然出了新闻事故，总要有人负责吧。本来这种传媒责任是谁写谁负责，审查人员最多同责。然而作者很无辜阿——这TM不是我写的，写个新年题词还不多检查检查谨防出错阿。谁想到上面直接修改内容，还改出了错误。所以按道理说，让作者负责是不对的。不过估计这次上面拉不下脸，硬要搞作者，编辑们看不下去了。
——想也知道，这种事情本来就不是自己问题。要是这么搞也可以，干脆别混了，反正哪天一个不小心也会流弹中到自己头上。编辑们必然人人自危。
现状 配合官媒态度，还有夺权发声明的强硬手段，这必然是幕后黑手在自救。如果事情是最上面授权，早就全国指令下去，一字也不会多说了。必然是上面觉得这事情办的很蠢，在考虑是否要和此人做切割。幕后黑手狗急跳墙，试图做成铁案，好让自己脱身。
审查之殇 未成年而夭则称殇，新闻审查已经是潮流，照例不应用殇字。然而和传媒比起来，审查和新闻管理手段确实如同小孩子一样。本次传媒对应上所犯下的最大错误是，使用传统媒体的手法处理新媒体，把听众当作没有思考能力的白痴来处理。这就如同白天却蒙着眼睛走路，捅到马蜂窝还不肯摘下一般可笑。
我曾在大学学传播学的时候，和老师讨论过传播路径和审查机制。当时的共识是，对具备中心路径的传播模式，会产生审查。审查的效果是消除广告和不实消息，问题是信息可能被操纵。离散的传播模式则没有审查，好处是信息比较全面，坏处是广告和不实消息比较多。
当时我就曾经想设计一种传播工具，具备消除广告和不实消息的能力，又不会被中心节点控制。作为结果，我给老师提出了一篇论文，论述了一种分布式系统——Diet。借助点对点信息传播模式工作，使用公钥签名信任体系鉴定个人。每个人和其他人会产生一些逻辑关系，每个人在阅读消息后，可以决定删除或者传递给下一个人。
是不是很眼熟？是的，当时我没有能力实现的系统，和今天的微薄非常类似。当然，我当时并没有提出140字限制。而且在新闻自由的美国也不用考虑中心节点消除的问题。所以微薄的形态和我想象中略有不同。然而微薄确实实现了一个无中心管理的自媒体群，而且随着用户的完善还会产生过程流。
如果审查继续下去，会不会有人把分布式的版本实现出来？我不知道。这太踩中宣部的线了。但是从理论上，这一工具完备，而且很难封锁。
然而从本质上，破除审查的，并不是工具，而是每个人在畏惧之前的一小步。我们都是凡人，要我们无所畏惧的抵抗，或者为别人奋斗是不可能的。然而在我们屈从别人的意志，自我审查，抹灭良心之前，可以向前走一小步。这是个人的一小步，然而会是社会前进的一大步。我们不需要英雄，我们更不能够把希望寄托在英雄身上。“让某个人带着时代的意志奋斗”这种话就和“你什么都别做就好”一样，是彻彻底底的谎言。我相信，谎言无法替代真相。哪怕我们最终不能获得成果，然而顺应自己的良心，向前走的这一小步是非常重要的。也许这一小步，能为别人，为你个人带来短暂的光明。</description>
    </item>
    
    <item>
      <title>关于民用航空上禁止使用电子设备的分析</title>
      <link>//blog.shell909090.org/blog/archives/2307/</link>
      <pubDate>Sat, 05 Jan 2013 16:38:53 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2307/</guid>
      <description>适用对象 本文论述的电子设备，包括以下几类：
不显式使用无线信号通讯，仅在工作时被动发出噪声的电子设备 使用2.4GHz频段和5GHz频段的wifi类和蓝牙类短距离通信设备 使用800MHz和1800MHz频段的长距离通信设备 本文论述的设备，不包括非法无绳电话等设备。尤其是不要把非法无绳电话当作普通的无绳电话，那玩意使用伞状天线，覆盖范围最高可以达30公里，根本就是私人设的无线电基台。使用频率又和飞机一致，飞机从上面过，通信马上就被干扰了。
飞机无线系统的工作状态 飞机自身也是大型机电设备，也会显式的使用无线进行通讯和导航，或者做系统控制（但是下面某个事故案例表明，使用无线作为系统控制是不可能的，飞行中的系统控制必然使用有线）。
飞机主要会使用的无线用途包括两大类，通讯和导航。
根据我在这里找到的资料，飞机常规的通讯频率为118.000～135.975MHZ。同时，中国民用航空总局无线电管理委员会办公室的某份文件佐证了这一说法。因此，常规飞机的主要通讯频率为121.5MHz、243MHz两大频率段。
而导航则比较复杂。如果是GPS导航，一般的L1频率段是1575.42MHz，L2的频率为1228MHz。而近距离的多普勒雷达和机载天气雷达工作范围都在1-10cm波长下(这个受限于天气因素)，频率大约是3GHz-30GHz。CAAC的文件规定，中国范围内的多普勒天气雷达的X波段为9300-9700MHz，C波段为5300-5700MHz，S波段为2700-2900MHz。
飞机对无线信号的耐受性 首先，如果飞机的通讯频率被大功率干扰，可能引发地面引导失效，造成严重后果。因此，飞机的通讯频率(121.5MHz、243MHz)，GPS频率，都不允许同频率信号。
另外，如果干扰设备功率足够大，频率又处于比较高的位置。那么可能引发混叠现象，干扰低频设备的工作（不知道我有没有理解错误）。因此，在飞机上应当禁用任何高频率的大功率设备。
航飞安全禁令的来由 目前在各种航班上实行的安全禁令，是由FCC在1991年所规定的，并得到FAA的支持。然而，这一禁令最初针对的是上个世代的水壶型大哥大设备等，而且当时的飞行设备并没有经过专门考量，对民用的广泛分布的无线信号做出抵抗。由于当时基台密度比现在远低，因此这些设备的发射功率比目前的手机要大上很多，1-2W属于常态功率。因此FCC顾虑到，在飞机上使用手机可能对飞机的通信造成安全，从而影响顾客人身安全。因此，尽管没有明显而直接的证据，但是FCC仍旧颁布禁令，禁止在飞机上使用手机。
一点直接的佐证即是，飞机上并没有配置无线信号定位系统。如果手机真的对飞行安全形成了直接的威胁，那么飞机上必然会配置手持式无线信号定位装置，借助三角定位法找出未关闭的手机。从无线技术原理上说，这是做的到的。这种做法可以有效补强空乘人员寻找手机的漏洞。正是由于手机的威胁仅仅是间接证据推测，因此飞机上始终未曾配备这些设备。
这里体现的是一种谨慎原则，当某个新鲜事务可能对人类产生威胁时，如果没有明确证据表明“没有威胁”，则默认断言“存在威胁”。在面对未知的，新生的事务中，谨慎原则不止一次的拯救过人类。当然，与此相对的，也不止一次的由于过度谨慎而坑过爹。然而在综合双方带来的影响后，人类仍然坚持了谨慎原则。这本质上是对有利可图的商家，国家，或者其他掌握力量的个人或组织的警惕。
但是，在经过长时间的接触后，谨慎原则是否适用，可能会需要重新评估。如果坚守谨慎原则，第一件应当被禁止的事情不是飞机上的手机，而是汽车。全球每年死于车祸的人高达几十万，只要禁用掉汽车就没这个问题了。可是谁也不曾提出过禁止汽车上路(中国某些部门的新交通法规是个例外)。正是因为人们感受到，汽车对人类带来的好处远远大于造成的问题。
同样，电子设备是否可以用于飞机上，这个问题也需要随着电子工程的发展和电子产品深入人们的生活而重新评估。在这里可以毫不客气的说，由于电子产品已经深入了人们的日常生活，成为生活的一部分。如果无原则的坚持禁令，就是反人类。在这种情况下，需要考量的不是坚持还是不坚持禁令的问题，而是需要重新审视和设计，制造飞行器，使其可以满足人类随时进行通讯的基本需求。
对于不显式发出无线信号的设备 这类设备没什么好禁用的。不过这句话要说的比较严密，应当是加上限制，在设备本身辐射不大的情况下。显然，微波炉本身也不显式的发出无线信号，可是那玩意的电磁泄漏明显不适合在飞机上使用。
但是话说回来，有几个SB会把微波炉带上飞机的！
而且很大程度上，这类设备并不能真的“禁用”，因为不少人类生活严重依赖于电子设备，例如人工心脏起搏器，或者是电动轮椅，助听器。固然，航飞部门可以发布警告，提醒使用以上设备的人乘坐飞机的风险。但是不能在没有明显理由的情况下拒绝乘客，因为他们使用了助听器。
对于使用2.4G和5G频段的短距离通信设备 2.4G是国际规定的无线保留频段，使用这个频段不需要特殊的申请或者执照。因此，如果在2.4G引发了干扰，干扰源又是按照标准(&amp;lt;100mW)的，那么被干扰者只有自己摸摸鼻子认倒霉。例如深圳某地铁使用2.4G频段作为闭塞用，结果被干扰导致列车老停车，这就明显是设计者考虑不周。
频段上没问题了，我们再说说功率。常规的wifi设备功率都在50mW以下，而且一般功率只小不大。因为发射功率的增加是以增加耗电量为代价的，便携设备哪里来那么多电给你消耗。真正功率比较大的，常见的是用于蹭别人家网用的特制无线网卡，俗称“卡皇”。其功率从200mW到数瓦不等。部分设备甚至可以截听公里级别的wifi信号，功率超过手机。这部分违规设备应当严禁携带上飞机。
对于100mW以下的合法设备，不应当处于飞机无线管制的范围内。预计在可见的将来，针对近距离通讯设备的禁令就可能会解除。即飞机上的广播中，应当会去掉“请关闭手机的无线功能”等。作为作证，可以参考这条新闻，云南三架飞机将提供WIFI服务。如果不取消禁令，又自行提供wifi信号，岂不是自打嘴巴？当然，安全起见，在飞机的起飞和降落期间还是应当关闭wifi热点。
使用800M和1800M频段的通信设备 这个又要分的比较严密了。这类的设备主要分为两种，GSM和CMDA2000。严格来说，GSM的信道才是900MHz，1800MHz和1900MHz，CDMA2000的信道是上行1920～1980MHz，下行2110～2170MHz。功率都是1-2W左右。
然而GSM方式造成的干扰比CDMA方式严重的多。因为CDMA基于码分多址，而GSM基于时分复用。由于是时分复用，因此设备只能在许可时隙内发射信号，信号呈脉冲型。脉冲型的信号调制就坑爹了，因为脉冲信号的开始和结束时会对其他频率造成影响。关于这点我不知道怎么向没有高等数学基础的读者表达，大致理论是一个方波可以被变换为一系列正弦波的加成。
由于这一特性，因此FCC才会顾虑GSM对飞机通讯系统的干扰。
因此，我觉得航飞系统未来可能考虑解除CDMA的禁令，或者更进一步，在机内部署低功率CDMA基站。因为CDMA对其他信道的干扰小，而基站在附近产生的干扰更加小。在机内建立基站有几个好处。
降低手机辐射。非常悖论的，当手机无法接收信号的时候，其功率最大。因此一旦在飞机内建立基站，手机的发射功率就会受到控制。 将CDMA转为飞机可以容耐的地-空通讯，提供飞机上拨打电话的功能。当然，这个特性可以作为飞机服务加以运营。 至于GSM，貌似在可见的未来并不会纳入考量。
飞行模式 鉴于飞机上不允许使用手机，而智能机又迅速普及，很多厂家推出了“飞行模式”功能。飞行模式的原理，在于手机可以通过软件关闭GSM通讯模块和wifi/蓝牙通讯模块，从而使得设备从普通通讯设备变成不显式发出无线信号的设备。从原理上说，这确实是可行的。
然而很多航空并不买账，其机上禁令仍然包括“飞行模式”。
我不知道这基于一个什么样的理由，至少不是纯技术层面的理由。因为从技术上说，飞行模式的手机产生的干扰远比电脑低。根据某些报道，这可能是由于山寨手机厂出品的手机，并没有真的实现“飞行模式”，而是仍旧发射无线电，只是软件上禁止了接入和拨出。
不得不说，很多事情就坏在这些SB身上了。
关于飞机上的手机信号 即使在飞机上完全没有手机的情况下，也无法隔绝手机信号对飞机的影响。大功率基站在没有干扰的情况下，覆盖范围可达10公里，而飞机一般的飞行高度都在3公里-10公里之间。因此如果飞机围绕着一部基站盘旋，从飞机上完全可以进行手机通话。当然，如果飞机沿着径向行驶，那么会引起很强的多普勒效应（比火车速度快很多），从而造成拨打困难。所以说，运气好的情况下在空中开机居然还有信号，就是这个道理。作为例子，在911事件中，有部分乘客可以通过手机向外部传递信息。
鉴于此，也许在10年后，由于飞机的更新换代，老机型的淘汰。上飞机就不需要关闭手机了。
关于1991年某飞机因为手机反推装置打开的说明 网络上多半是流传1991年某英国航空，我找了一下空难列表，1991年反推事故的貌似只有劳达航空004号班机号空难(也称奥地利航空，不过好像被收购过，所以具体不明)，具体可以看wikipedia页面。
根据下面给出的劳达航空004号班机的事故调查报告，我通篇找不到手机(mobile)，或者干扰(intrusion)之类的字眼。事故原因分析貌似是说，因此由于某些照明电路的电路故障，导致反推装置启动。在系统改进中，也没有要求飞机上关闭手机的建议，只是建议飞机上的电子设备增加屏蔽装置，屏蔽电磁干扰。注意，这里屏蔽的目标不是无线通讯干扰，而是电路故障造成的电火花(hot short)。
同时，飞机也会频繁穿越积雨云之类的电磁异常区域。由于飞机上的控制系统异常重要，而飞机本身的电磁环境不稳定，因此使用无线控制飞机是不可行的。
关于在医院使用手机的问题 医院使用手机，电脑是一个需要慎重考虑的问题，因为确实有很多医疗设备使用了2.4G频段。甚至由于人体器官尺寸等原因，有很多医疗设备并不能自己选择工作频率。例如在深圳的地铁干扰问题上，医院的B超亦是干扰源之一，见这里。可以想见，如果将卡皇带到医院去使用，也可能对B超设备产生干扰。
但是，对上述新闻，我抱持怀疑态度。借助声波工作的B超为什么会发射如此强烈的电磁信号，而且信号频率居然高达2.4G。这本身就是件很奇怪的事。由于报道并没有列出关联信息，因此无从查起，姑且信之。</description>
    </item>
    
    <item>
      <title>支付宝体系的问题</title>
      <link>//blog.shell909090.org/blog/archives/2302/</link>
      <pubDate>Mon, 31 Dec 2012 01:54:19 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2302/</guid>
      <description>今天和几位朋友讨论了一下支付宝的问题，又查了一下case，发现支付宝的问题不仅是那么简单而已。先不吐槽支付宝的问题了，赶快出验证和方案。
在被人恶意补卡的情况下是否安全 关于恶意补卡，这里有个例子。简单来说，就是知道你的身份证和手机号，去异地营业厅用假身份证补手机卡。然后用手机卡获得支付宝系统，再套现。
贝壳分析了自己的系统，如果恶意补卡的话，对于200以上的消费转账，会要求输入宝令。宝令是绑定在手机而非卡上的，所以攻击者会无法消费。而要取消宝令就必须输入宝令，通过手机卡无法取消。因此攻击者即使补贝壳的卡，也无法进行200以上的消费。
但是如果你用的是U盾，那问题就没那么简单。在支付宝的设计中，手机是可以解除U盾绑定的。所以U盾不能对抗恶意补卡。
结论：如果仅仅是200而已，我可以认为这个系统是安全的。
在手机丢失的情况下是否安全 如果手机丢失，问题就更加严重。支付宝密码，支付密码均会被找回，宝令本身就在手机里，因此支付宝的支付系统全面沦陷。支付宝内资金肯定不保。问题是卡上资金。
贝壳绑定了两张卡，浦发和招商，先从快捷支付检查起。检查浦发的卡发现，对支付宝默认开了20000的签约支付额度，当场汗就下来。对于快捷支付来说，这太高了。速度改成300。对于超过300的，依然可以通过网银验证来支付，比较安全。
招行的快捷支付我从头到脚就没看到签约这回事，貌似必须进行网银支付。那就需要我的卡号有效期密码什么的。我觉得这个不大可能出问题。
再检查浦发的普通支付，这需要登录浦发的网上银行。浦发网银是通过手机加密码验证的，基本可以保证转账汇款的安全。
结论：目前调整的结果，一次损失300左右。
网银的一点隐忧 目前网银的密码都太弱了。浦发只有6位数字，招行也只有8位数字字母。难道就不能设定强一些的密码么？
浦发可能是要和卡本身的密码兼容，将手机作为补强。可是手机也会掉啊。一旦手机掉了，整个安全性就由6位数字密码保护。这和掉银行卡一样严重。
建议 移动和联通关闭身份证显示，尤其是最后四位！ 无论哪种级别，使用支付宝一定要打开宝令。目前只有宝令可以有效对抗补卡攻击。 在智能机上又绑定网银的，就不要乱装软件，更不要root/越狱。 中国移动的补卡修改流程。如果当前卡处于激活中，先持续警告旧卡24小时后再激活新卡。 移动至少应当允许客户自行选择“这个手机号码极端重要，不得实行异地补卡，不得显示个人信息，复机/补卡间隔需要在24小时以上”的增强选项。 理论上说，移动应当可以推进二代身份证验证能力。使得补卡业务实行时，必须凭借二代身份证验证身份后进行。杜绝假身份证。 支付宝的密码找回功能降速。从开始找回，发短信和邮件通知，到完成找回密码至少要一小时，最好要24小时才能找回密码。或者允许可以设定“我自愿将找回密码时限改为24小时”以增强安全性。 </description>
    </item>
    
    <item>
      <title>移动的一点漏洞</title>
      <link>//blog.shell909090.org/blog/archives/2296/</link>
      <pubDate>Sun, 30 Dec 2012 22:34:45 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2296/</guid>
      <description>今天支付宝的那个问题，支付宝的人和我说。
猜到就是手机保存账户名可以找回密码的问题。。对于快捷用户明年会要求手机+证件找回密码，减低200以上的资损风险。所以现在我客户端使用后都删除用户名纪录，为了安全。那个token的想法挺好的！
我就考虑，是否可以通过手机获得身份证呢？
首先，利用手里的手机，得到自己的手机号。然后查询所在地，在对应的移动网站上（例如上海移动）找回密码，然后登录移动网站。进入个人信息管理，需要手机验证码。输入验证码，可以看到部分身份证。包括头4位和尾4位。普通身份证是18位的，分组方式6+8+4。隐藏掉的10位中有8位是生日，一般手机里都能找到，并不困难。
因此，实际需要得到的就是2位。而这两位又不是任意的，和个人出生地有关。具体到我的身份证上，有了前四位后，两位只有17种可能。我看了其他一些人的情况，运气差的情况下，这两位只有一两种可能，例如1405，山西省晋城市，只有00/01/02。全试一遍就可以了。
更新：同事反应，联通的网站更二，直接就显示了完整身份证。。。
更新2：同样漏洞，在招商银行的手机应用上也爆了出来。。。</description>
    </item>
    
    <item>
      <title>支付宝的一项设计问题</title>
      <link>//blog.shell909090.org/blog/archives/2292/</link>
      <pubDate>Sun, 30 Dec 2012 19:40:46 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2292/</guid>
      <description>话说最近，贝壳成批更新了一些密码。在更新到网络支付系统的时候，心血来潮做了个分析。感觉网银系统很不安全。尤其是支付宝的手机客户端。我们下面以一个实际例子说明一下支付宝系统（其实远不止支付宝）的问题。
情况说明 贝壳的支付宝系统做了手机和淘宝帐号绑定，开启了手机动态口令，无线支付，和手机宝令三项功能。由于可以从淘宝或者支付宝登录，因此设定了70bit以上的高强度密码，1年更换一次。支付密码强度略弱，是30bit级别的，一年更换一次。支付宝账户安全等级高。使用支付宝的系统包括两台电脑和一台手机，一台是linux，一台是受限windows，只安装特定软件，不浏览和安装风险网页。总体来说，这个安全结构在支付宝用户中都是有数的。 风险在于支付宝手机客户端上，贝壳在评估的时候发现，支付宝手机客户端可以记录密码。这是一个非常具有风险的事情。因此贝壳模拟评估了一下，假如你丢失了手机，会发生什么事情。
低于200的支付 首先，由于支付宝客户端保存了密码，因此你可以很容易的登录支付宝。上面有绑定快捷支付的话（这是贝壳的常态，相信也有很多人有绑定，或者账户内有余额），在200以下就可以直接支付给对方，不需要任何额外验证。贝壳绑定的浦发银行发出了提款警告，但是很可惜，由于手机在恶意者手上，这一行为没有任何用处。 当然，常识告诉我们，如果你丢了个手机只损失200，这个问题可以忽略不计。
超过200的支付 如果超过200，则需要支付密码和手机验证码。在这个例子中，手机验证码是没有用处了，主要的保护就在支付密码上。然而，支付宝客户端具有找回支付密码的功能。幸好，他是基于身份证的。贝壳的身份证不是每个人都知道，因此在超过200的时候是安全的。 是否还有可能，从支付宝中恢复原始密码呢？因为有原始密码，就可以用网页访问支付宝，使用手机来恢复支付密码。关于这点，直到撰文为止，贝壳没有确认。 然而，问题其实远比这个简单。在没有支付宝密码的情况下。你可以申请忘记密码。然后支付宝会要求你输入你的账号来恢复密码。帐号？我记得在支付宝客户端上有记录。。。果然，输入帐号后，贝壳收到了支付宝的验证码。输入验证码后，贝壳重设了支付宝密码。在这一过程中，贝壳绑定的邮箱收到了警告——不过依然很可惜，唯一能够即时提示的手机现在在恶意者手中，主人一无所觉。 然后就是很没有新意的重设支付密码过程，借助手里的手机，我们完整的得到了整个支付宝的所有权，并且可以提光绑定了快捷支付的整张信用卡。在这里的唯一阻碍就是信用卡开卡行的支付限额。超过限额后需要使用密码和手机验证码来解除（浦发），手机验证码可以无视，密码是未知的。
结论 粗算了一下，丢一台手机，在一个小时内没有察觉，大约会造成4000元-4500元的损失，这还没有算手机。如果发卡行没有设定限额，最高大约是10W元。 我们来细数一下，整个过程里面的问题。
手机客户端不应当保存用户名密码，尤其是涉及资金的问题 对于频繁登录的问题，可以允许客户绑定一个手机token来解决。token等效于密码，但是不能做所有涉密操作，不能修改安全性，找回密码等。客户需要可以通过安全手段查看当前有多少个手机绑定了token，并且可以删除。贝壳之所以认为支付宝的系统有弱点，就是因为找遍整个支付宝系统，找不到删除token的地方。不能删除的token等于没用。
丢失密码的找回需要更加慎重 单纯的手机找回密码是有风险的，当然，单纯的邮箱找回也有。一种方法是同时验证手机和邮箱可以立刻找回密码，否则需要等待一定时间（例如几个小时，等待主人发现手机丢失）。 但是这仍然有风险。一般android里都会绑定邮件接收吧，借助这个很容易收到邮件。设计一个安全的密码找回方案并不是那么容易的，看来只有多等几个小时的方案略安全一些了。 同时这里也提醒一下。如果你在银行挂失银行卡找回密码的时候，觉得业务很方便。贝壳建议你立刻更换银行。在找回密码时越麻烦的银行，才是越安全的。
基于手机的核心验证体系 这是关键中的关键。我们可能会设计一个安全机制，里面有一步两步三步，必须全部通过才能操作资金。然而实际使用中，如果这三步都是依赖于同一个设备，那就对安全性没有任何提升——没有人敢保证手机不会丢失吧。钱包丢失最多损失几百，手机丢失呢？ 目前，整个网银系统（不止是支付宝）都越来越多的依赖于手机。在手机越来越智能的今天，其可靠性实际上正在变差。手机可能丢失，也可能被安装恶意软件（尤其是root/越狱过的手机）。我们可以列出当手机丢失，或者安装了高权限的恶意软件时，会发生的安全问题。
个人信息泄密，包括朋友通讯方式，备忘，生日，身份证号码，家庭地址等。其中有些就涉及安全。 支付宝密码和支付密码可以重设（即，泄露）。 宝令丢失。 网银验证码无意义。 支付宝警告无意义。 网银警告无意义。 实际上，这不是支付宝的问题，而是用户在选择和设计自己的安全系统时，无意中造成的问题。
解决方案 暂时还没有太好的方案。
首先期待支付宝将手机登录改为token，取消密码保存，隐藏用户名，用户可以删除token，以解决直观的威胁。 期待手机丢失时快速发现的应用/功能。如果能在5-10分钟内停机，可以有效的解决手机丢失造成的风险。（贝壳向中国移动确认了，当手机停机后，是不能收取短信的） 当确实发生手机丢失时，应当首先立刻停机（因为停机速度快），然后向银行挂失（凡是绑定了手机的银行都要），然后以最快速度修改所有密码。 涉及资金的系统要多考虑一下，设计安全结构的时候要注意，如果有多于一个的方法进入系统，安全性决定于最弱的那个系统。如果所有步骤的安全性都依赖于手机，那么要考虑，丢了手机的时候会发生什么。 </description>
    </item>
    
    <item>
      <title>速度对比</title>
      <link>//blog.shell909090.org/blog/archives/2287/</link>
      <pubDate>Sat, 29 Dec 2012 14:33:28 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2287/</guid>
      <description>引用
+------------+----------+-------------+------------+-------------+-------------+ |bps |B/s |network |storage |port |bus | +------------+----------+-------------+------------+-------------+-------------+ |56/48K |5.6/4.8K |Modem 56k | | | | +------------+----------+-------------+------------+-------------+-------------+ |57.6/28.8K |7.2/3.6K |GPRS | | | | +------------+----------+-------------+------------+-------------+-------------+ |236.8/236.8K|29.6/29.6K|EDGE (2.75G) | | | | +------------+----------+-------------+------------+-------------+-------------+ |1M |125K |Bluetooth 1.1| | | | +------------+----------+-------------+------------+-------------+-------------+ |1536K |192K | | |USB low speed| | +------------+----------+-------------+------------+-------------+-------------+ |1,536/512K |192/64K |ADSL (G.Lite)| | | | +------------+----------+-------------+------------+-------------+-------------+ |3M |375k |Bluetooth 2.0| | | | +------------+----------+-------------+------------+-------------+-------------+ |10M |1.25M |10BASE-T | | | | +------------+----------+-------------+------------+-------------+-------------+ |12M |1.</description>
    </item>
    
    <item>
      <title>异常和错误的几条军规</title>
      <link>//blog.shell909090.org/blog/archives/2282/</link>
      <pubDate>Tue, 27 Nov 2012 17:27:54 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2282/</guid>
      <description> 如果处理不了，就地崩溃，留尸不埋，供后人评价。
偷偷埋尸，100军棍。处理不了偷偷埋尸，拉出去先轮后杀。 忽略错误只有两种合法情况。
逻辑上可以忽略，记log，忽略。 逻辑上期待异常，不记log，忽略。 逻辑上不可以忽略的忽略，100军棍。 逻辑上可以忽略，没有记log，50军棍。 错误在函数间传递的唯一理由，是可以期待别人那里有个错误处理函数，能够对的上这个错误。
没人处理错误的乱传递，20军棍。 该你处理的，处理，不该你处理的，别乱处理。
乱处理错误的，先轮后杀。 </description>
    </item>
    
    <item>
      <title>python环境部署</title>
      <link>//blog.shell909090.org/blog/archives/2278/</link>
      <pubDate>Thu, 22 Nov 2012 14:19:46 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2278/</guid>
      <description>abstract 本文的目的，在于教授使用virtualenv创立python环境，对环境的管理和使用，以及代码和部署的用法范例。在阅读完本文后，你应当可以。
创立，部署，管理virtualenv环境 使用virtualenv环境进行编码 virtualenv环境建立 virtualenv是python的虚环境管理包，他的主要目的是为了隔离环境。其中包含以下两个范畴。
在虚环境中安装包，不需要对系统进行修改，不会对系统造成污染。 在系统中安装的包，不会对虚环境造成污染。这主要是出于版本安全考虑。 因此，virtualenv默认会阻止你使用系统中安装的包。要解决这个问题，需要在建立虚拟环境时指定参数&amp;ndash;system-site-packages。 virtualenv的环境可以通过执行virtualenv path加以建立。当建立完成后不可移动，需要一些特殊调整，使用参数&amp;ndash;relocatable对此没有帮助。
virtualenv环境的激活和反激活 virtualenv环境是通过替换系统环境变量工作的。在激活后会替换系统的提示符，提示你进入环境。一般我们使用source $VIRTUALENVPATH/bin/activate来激活。激活后直接执行deactivate反激活。 virtualenv替换系统环境变量的方式是在path前加入virtualenv的bin路径，使自己的python优于系统python执行。同时替换pythonhome，变更lib查找路径。因此，对于某些可以指定pythonhome的应用（例如网络部署），直接指定pythonpath为virtualenv路径即可。 注意，由于virtualenv的工作方式，因此当你执行su/sudo bash后，virtualenv环境都有可能消失，但是提示符仍旧生效。建议通过sudo执行脚本，脚本内进行source比较安全。或者直接sudo目标程序也可以，不要新建上下文。 如果需要保持持续的环境激活，可以将source $VIRTUALENVPATH/bin/activate加入~/.bashrc。 当virtualenv激活后，后续的pip安装和python使用都会使用virtualenv内的版本。因此下文未经特殊说明，都是指在激活环境后进行操作。
virtualenv环境的管理 主要包括两种手段，安装和删除。一般使用pip install package name进行安装。pip uninstall package name进行删除。
virtualenv环境的保存和恢复 virtualenv环境可以保存和恢复。所谓保存和恢复，是指在安装过包的环境中保存包列表（和具体版本），在未安装（或版本错误）的环境中启用。 一般通过pip freeze &amp;gt; filename进行保存。在目标机器上执行pip install -r filename进行恢复。</description>
    </item>
    
    <item>
      <title>python入门指引</title>
      <link>//blog.shell909090.org/blog/archives/2272/</link>
      <pubDate>Mon, 19 Nov 2012 10:11:49 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2272/</guid>
      <description>前言 其实我也不知道python怎么入门，由我来写这个真的不是很合适。我学python是直接找了dive into python来看。然后照着写了几个例子。大概两天后，就能磕磕绊绊的上路了。就好像拿筷子，都不记得怎么学会的拿筷子，怎么来教人呢？
不过最近在python-cn的列表里面，我大概连续数周都持续看到“python入门看哪本教程比较好”，实在是不堪其扰。干脆就写个简单的guide，有心的人自己看。没心的——那我也没办法了。
基本知识 首先，你要了解一个事情。很多你不会的东西并不属于python。例如你不知道网络通讯的流程，你不知道文件的权限和打开标志用法，你不知道fork和stdin/stdout的关系。这些python教不会你。如果你缺乏这些和语言/库无关的相关知识，请自行补课。如果你缺乏计算机基础理论，请自行补课。
因此不要随便给我发邮件/留言/咨询，为什么这个问题在python里无法解决。为什么python无法所见即所得，为什么python无法热部署，为什么python无法用于嵌入式开发。在问这个问题之前，请先确认“这是一个python的问题”。例如GIL，或者脑残lambda。如果你不确定，请自己搜索一下相关的文章，确认一下。在提问前，看看“提问的智慧”。如果你确实搜过了，找不到，那就问吧，没办法。
入门 在网络上，python入门的两大基础书籍分别是(后面有朋友补充了一本，我也加上)：
A Byte of Python 中文版 Dive Into Python 中文版 Learn Python The Hard Way, 2nd Edition 中文版 后面基本就是看python-doc，我推荐你跳过一堆有的没的，直接看Library Reference。python本身就是易读性极强的代码，文档又相当漂亮，内置库又全。大部分情况下，python-doc都应当能解决你的问题。
web web是程序员的一大去向。python程序员入门必须要过的一个框架就是django。不要纠结了，django在python社区中名气太大，用的人太多。因此入门材料是最多的，社区最大，门槛最低。如果你要入门web，必然从django开始。在不熟悉python的情况下，我不推荐你贸然从其他框架开始入门。
当然，如果你已经熟悉python了，考虑入门web框架，可以参考专精一节。
爬虫 python下说到爬虫开发，入门首选Scrapy。原因和上面一样，社区最大，用的人最多。好不好用就见仁见智了。反正我的所有爬虫框架都是用自己基于gevent写的库。
ui python的ui框架也很多，很复杂。同样，如果是入门，我建议从qt的两个框架，pyqt和pyside开始入门。关于这两家的恩怨我就不多废话了。
专精 所谓专精，是指使用python在特定工作上。我们基本分为几个领域。
系统和部署 virtualenv：基本凡是在商用环境中部署的，建议都用这个。可以将python自带在源码里面，避免迁移/集成问题。 python-daemon：写daemon的时候比较方便。 网络 说到网络，基本就是除web外。
twisted：非常强大的网络库，各种协议支持全面，不过reactor模式真是纠结。 gevent：异步协程模式的网络库。 Scapy：强大的网络库，基本啥都能干。 pyzmq：我一直不觉得zeromq是一个mq。我觉得他是一个抽象网络层。 web容器 python web框架的一大特点，是容器/框架/ORM/template可以分开自己玩。
注意，容器和框架是两码事情。容器是python web运行的环境，框架是解析环境的玩意。两者间一般都使用wsgi接口进行连接。这是python的标准做法，fastcgi/scgi也会被转换为wsgi进行连接。但是也不是没有其他选择。一般我们有以下模式：
cgi：python-doc中自带了cgi模块。 mod_python：embed in apache。 下面是wsgi接口的容器。wsgi的优点在于我们可以在这些容器上运行任意一款支持wsgi的框架。
flup：支持提供fastcgi, scgi, AJP接口，web server可以用这三种协议进行连接。 Google App Engine：PaaS服务。 Gunicorn：直接提供http服务。 mod_wsgi：使用内部协议和apache集成。 twisted：直接提供http服务。 tornado：直接提供http服务。 uWSGI：使用内部协议和nginx集成。 werkzeug：直接提供http服务。 建议的部署模式是，用apache的，去mode_wsgi。用nginx的，去uwsgi。用GAE的，直接可用。其他，通通转发。</description>
    </item>
    
    <item>
      <title>老大啊，你这是什么鬼名字</title>
      <link>//blog.shell909090.org/blog/archives/2269/</link>
      <pubDate>Sat, 03 Nov 2012 19:58:40 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2269/</guid>
      <description>sbcl 不知道大家用没用过common lisp，这是一种语言，最早是为了计算理论而生的。这种语言以规模大，难掌握，实现多，标准不统一而著称。
Steel Bank Common Lisp，简称sbcl，就是其中一种实现。他派生于SMUCL，是目前为止我看到的最好的开源实现。反正我在求解N多问题的时候，sbcl在速度和内存占用比上的表现相当抢眼。在lisp系列中称第一，和go这种静态语言相比也不遑多让。
但是每次我看到这个缩写都忍不住想吐槽，这是什么鬼名字啊。SB Common Lisp？
debian 大家也许听过，也许没听过，debian社区曾经为了中文名字的事情争吵过。
从我看到的材料上看，很多人对debian的默认念法是——大便。。。
lua 我就不吐槽了，号称屌丝语言。
LZ不哭，站起来lua。
go google的奇葩语言。每次我要查某个用法的时候，都很郁闷。为什么呢？因为几乎所有的网页都命中&amp;quot;go&amp;quot;。
以StartProcess为例，我这里搜素go StartProcess的第一个命中在MSDN，微软有个API就叫StartProcess。再后面就是财经新闻。在很后面才能看到go的API。
etc IT界还有什么奇怪的名字？</description>
    </item>
    
    <item>
      <title>异常之殇</title>
      <link>//blog.shell909090.org/blog/archives/2266/</link>
      <pubDate>Tue, 30 Oct 2012 16:42:25 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2266/</guid>
      <description>异常之殇 辗转开解 辗转开解(stack unwinding)说的其实是这么一个现象。当执行流从深层向浅层转移时，深层调用所产生的栈上对象(stack object)需要销毁，资源需要释放。对于面对对象语言而言，往往就会执行到析构函数。
辗转开解中的异常 辗转开解真正令人迷惑之处在于，如果在析构函数中发生错误怎么办？在异常处理中发生异常，我们可以继续向上抛出。但是在辗转开解代码中出现异常，上层应当收到两个异常呢？还是一个？
无论是哪种可能，都没有完美自恰的符合直觉，因此这一般是一个未定义的行为。在C++中，进程会整个彻底崩溃掉的。因此，千万不要在析构函数内抛出(或者可能抛出)异常。
如果分离析构和资源销毁 一种做法是，在析构时不做资源销毁，转而提供专门的函数来执行资源销毁过程。析构只处理简单的delete等操作。然而这种做法的杯具在于，你在任何时候，一旦使用对象，都必须使用finally来保证销毁函数的调用。在发生异常时，栈上对象的辗转开解是自动的，析构函数的调用也是自动的，但是销毁函数的调用就是手工的了。
拷贝构造和隐式转换 和构造相反，对于构造函数，我们不能限制异常使用。你必须捕获构造函数的异常。
假如构造函数出了错 普通函数出错，你有两种选择。1. 异常。2. 返回值。构造函数出错，是没有选项2的。因此构造函数凡是出错必定异常。
而如果构造函数可能出错，而你期望捕获他，你就不能栈上构造一个对象出来。因为这会导致栈上对象的作用域被限定在捕获他所用的try块之内。
分离构造的尝试 和析构函数类似，我们可以尝试在构造函数外，提供一个构造函数，来替代构造的初始化过程。这样可以很大程度上保证构造函数不出错。
然而，首先，这样的代码就会变的复杂。每次构造函数完成调用后，都必须调用初始化函数。而且，有两种特殊的构造函数你不可能使用这种方法来解决。
拷贝构造和隐式转换 是的，这两种构造函数分别叫做拷贝构造(copy construct)和隐式转换(implicit casting)。我们举例来说。如果你在函数内建立了一个对象，你希望返回这个对象，怎么做呢？第一个思路是引用返回。不幸的是，要做引用返回，这个对象必须是堆上对象，而非栈上对象。因为栈上对象在返回后会销毁掉。如果要返回栈上对象，唯一靠谱的方案是先将对象复制到堆上，然后再复制到调用者的栈里。
C++中有一类特殊的优化，叫做对象返回优化。当编译器察觉到你需要返回栈上对象时，那么编译器会直接获得调用者栈里的对象地址。这样可以避免两次的拷贝过程。然而，如果没有对象返回优化（或者没有识别出来），那么就需要两次复制以保证正确性。而C++里，默认的复制过程是内存拷贝。
对于很多对象，内存拷贝是错误的行为。例如字符串，一种字符串的加速方法叫做共享内存字符串。两个字符串对象会共享一个内存块，以避免重复内容的开销。直到其中一块需要修改时，复制才真的继续。对于这种情况，直接拷贝会明显的导致错误。因此C++有一种特殊的构造函数，叫做拷贝构造。
在拷贝构造的时候，调用是由C++隐式发生的，你根本没有先构造，再调用的机会和权力。因此，试图分离构造在技术上不可行。
隐式转换是另一种情况。当你传递的参数和实际被赋值对象的类型不一致时（例如调用了某个函数，其参数类型不一致），C++会试图将你的对象转换为目标对象。如果是内部类型，这个被称为内部隐式转换。unsigned char可以被无错的转换为unsigned long，这个大家都知道。但是如果是对象，转换行为就需要由构造函数定义，这个叫做隐式转换构造函数。
另外，隐式转换也是OO中的一大问题。我强烈建议你用explicit禁用所有隐式转换，改为显式转换。这会费一点事，但是却可以避免很多问题。
分离构造/析构的邪恶之处 ZMQ的作者曾经吐槽过这种在构造/析构之外再定义初始化/清除代码的努力。他的观点是，如果万一在构造函数中加入了代码，会引起半构造现象。为了解决这个问题，会使得整个类带上状态。我在上面已经假定这件事情不会发生了，否则代码会更加复杂，问题也更加严重。
二次异常 是的，你不应当在异常处理代码中抛出异常。当然，这里的异常指的是你的异常处理代码不应当发生异常。经过逻辑判定，当前的异常应当由更上层处理的情况不在此列。
如果在异常处理中抛出异常，很可能导致的结果就是异常处理没有完成。而未完成的异常处理会发生什么问题，那只有天晓得。这个在任何带有异常系统的语言中都是成立的。</description>
    </item>
    
    <item>
      <title>面对对象的吐槽——类型之殇</title>
      <link>//blog.shell909090.org/blog/archives/2265/</link>
      <pubDate>Mon, 29 Oct 2012 14:26:30 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2265/</guid>
      <description>继承之殇 讲继承问题，我们首先得定义什么是继承(inherit)，他是用来干吗的。
所谓继承，就是当两种实体，满足其中一种必然全部都满足另一种的定义(is a)。一旦构成继承，可以带来以下好处（简单起见，我们直接就管这俩实体一个叫派生类一个叫父类）：
派生类具备父类所有已经实现的方法，毋须再实现一遍——除非需要重写(override)。 派生类可以当作父类使用，凡是使用父类的地方给与派生类也对。 继承的最主要作用，是用于复用(reuse)。
内涵和外延 形式逻辑里面有一句话，内涵越大，外延越小。在继承上，如果我们严格按照定义来做，会发生很反人类的事情。因为类的定义是依赖于内涵的，
我们还是看平行四边形，长方形和正方形的例子。我们用两边长度，夹角来定义平行四边形。然后如何定义长方形？夹角为pi/2。然后如何定义正方形？两边长度相当。
不知道你是否看出了问题。是的，按照正统来定义，数据的约束只会越来越多。因为派生类必须是(ISA)父类，因此父类的约束必须全部满足。我们接着上面的例子，我们为平行四边形定义一个方法，设定夹角大小。那么在长方形中，这个方法如何处理？一旦用户调用方法设定夹角大小，必然会破坏长方形定义，因此这个方法只能重写抛错。
为什么？从逻辑的本源来说，平行四边形是“两组对边分别平行”，并没有说夹角的事情。到长方形的时候才说，长方形是夹角为90度的平行四边形。显然，长方形是不能设定夹角的。因此，我们要么承认，不是每个平行四边形都可以设定夹角的，例如长方形不行。要么承认，每个平行四边形都可以设定夹角，长方形不是平行四边形。显然，后者违背逻辑，我们只能得出结论，不是每个平行四边形都可以设定夹角。
同样，正方形的例子也说明，不是每个平行四边形都可以设定两个分离的边长。如果以此标准来定义类，那么必然得到的是正确而无用的逻辑玩具。平行四边形没有夹角，我们就不能定义面积计算的函数，也不能——基本什么都不可以。更过分的是，我们还不能定义两个分离的边长，因为定义并没有告诉我们，边长一定不等。照此下去，我们除了一个空空荡荡的“平行四边形”这个名字外，什么都定义不下去。
为了解决这个问题，实践中，我们采取的都是，平行四边形是可以设定夹角的，然后对特例做抛错处理。这其实在本质上就违背了继承的原初意义。
继承和聚合 继承的另一个容易混淆的地方，就是分不清继承和聚合。
其实从逻辑上说。继承和聚合根本就不是一回事情。例如你有(have a)一条狗，你可以让狗做任何狗可以做的事情，例如追猎物。我们可以说，你可以做的事情和狗没有区别，所以——你就是(ISA)一条狗？！
傻子都不会弄错其中的区别！
我们说，如果一个东西看起来像鸭子，叫起来像鸭子，走起路来像鸭子，我们就可以当他是一只鸭子，说的是弱类型语言。而且我们只能认为，我们不知道那个东西是什么(这是弱类型的特点)，总之可以当他是一只鸭子用。但是这不代表那个东西就是一只鸭子，他也可以是鸭子的代理人，或者拥有一只鸭子。在静态类型语言中，为了复用就不管三七二十一，直接声明PNG图像是一种BMP图像的——这绝对是逻辑上错误的行为。
然而，你自己数数你在代码里面犯过多少次错？
多重继承 继承本身的问题我们先不说，我们再说一个很常见的问题——多重继承。
既然我们说，只要一种满足ISA谓词判定，就可以认为是继承。那么理论上，我们就不能否决双重继承。例如我们定义了平行四边形，又定义了中心对称图形。那么长方形就同时是(ISA)这两者。从逻辑关系上，我们说长方形可以合法的继承两者。
但是如果我们真的在程序内设定将长方形继承两者，马上会引起一连串的问题。
当多重继承发生冲突时 首先第一个是继承冲突。即当两个父类都具备同一个方法的时候，对派生类做方法调用会发生什么行为？
肯定不能只调用一个，这会因此另一个父类的方法间发生内在不一致。这违背了继承的好处2。 也不能两个都调用。两者的先后次序可能引发逻辑问题，因此先调用谁都是错误的。而且函数还有返回值问题——你返回谁的返回值呢？如果多值返回合并，这和函数原始的定义又发生了悖离，从而又违背了继承的好处2。 因此，我们只能宣布这是个错误。 既然是个错误，鉴于类间函数可能存在的内在联系，其他继承的函数也未必能够正常使用。 你看，明明是合法的多重继承，居然造成了不可复用的结果。这就是继承冲突。
菱形继承 如果说继承冲突还是一个比较好考虑的问题的话，菱形继承就是一个让人吐血的东西了。
所谓菱形继承，就是两个父类继承同一个基类。在这种情况下，对父类的调用会间接转到基类上。那么，基类的函数会调用几次呢？
继承冲突的几种解法 所有冲突的函数，父类必须都无实现。 不得多重继承。这是很扯淡的，不过也是大多数时候的做法。我的编程指南之一就是——在C++中，任何时候都不要使用多重继承。 使用其中一者。python是个典型的使用其中一者的例子，具体使用的按照继承编写顺序展开成MRO次序决定。然而这直接违背了继承类是(ISA)父类的定义。因此不要以为在python中，继承后总是没问题的。有的时候可能会出现继承后不能正常工作的情况。 强制用户解决。要求用户必须人工定义函数，解决继承冲突的问题。从逻辑上说，如果用户定义的函数可以同时兼容于两个父类，就可以彻底化解多重继承冲突问题。然而杯具的是，很多时候在逻辑上，继承冲突是无解的。 区分接口和继承 父类没有实现冲突的函数，那么派生类中就不必纠结于调用谁的问题了。但是这引发了另一个问题——这就无法复用了。作为这一解法的极限，java不允许多重继承——除非继承的父类都是没有实现的类。这其实不是继承，而是实现(implement)接口(interface)。
接口编程是一个很有道理的东西，COM里面大量着重于接口。但是接口也有自己扯淡的地方——接口是一个编写期的东西，他最大的用途就是编译期类型检查。接口并不能复用(reuse)代码。如果你有一个接口，叫做平行四边形。里面有个方法，用于计算平行四边形面积。然后你实现了长方形和正方形——那么杯具来了，你需要在两个里面通通实现一遍这个方法，即使他们基本没区别。
当然，接口本身的好坏各有评价。你看，接口的唯一作用，就是声明类提供了某些函数。当我们对方法传入一个新的类的时候，我们必须将新的类也实现一下接口——哪怕这个类其实已经实现了这些方法。只要不实现接口，方法就不认可。这是强制编译器类型检查(静态类型语言)的基础。因此一般来说，静态类型语言，使用接口。动态类型语言，duck typing。</description>
    </item>
    
    <item>
      <title>高考和大学的选择</title>
      <link>//blog.shell909090.org/blog/archives/2263/</link>
      <pubDate>Sun, 28 Oct 2012 20:50:45 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2263/</guid>
      <description>背景 最近很多家长在为了高考的事情争。非京籍家长要求北京市教委给予外地孩子公平待遇，京籍家长认为北京本地教育资源有限，应维持现有状态。
另外，我在weibo上和一个交大的特招生吵，他认为特招生deserve大学（原话），我认为归根到底是个利益问题。
OK，以上是背景。
大学是一个什么？ 中国的大学扩招比例是所罕见，其中有一个很大的因素是因为各种家长都认为孩子应当上大学。上过大学的孩子就跳龙门了。在我的观点来看（当然，我也有很多佐证），上大学不是跳龙门，谁上什么大学才是。我的一位朋友，是从偏远的农村来的，他们那里有个有趣的现象。凡是没上大学，高中毕业就工作的，家里多半都盖起了小楼，娶了媳妇，在本地工作。上了普通大学的，一般都还住在很旧的老房子里面，孩子在远方的城市，没结婚，刚刚还完，或者还在还学校的贷款。而上了一流大学的，则家里又比较富足，有很大一部分家长直接去了孩子所在的城市，很可能这些城市甚至不在中国。最后一种是否幸福，如人饮水冷暖自知。但是我要说的是，为什么会产生这样的分层变化？
关键是大学是什么样的一个东西。
我们为大学付钱，大学给我们各种资源。当然，好不好，值不值，就是一个很关键的问题。很多大学并没有资源，或者说没有足够的资源。这样的大学就是来赚你的钱的。中国人千年以来都认为，学而优则仕，念书是能当官的。于是再穷不能穷孩子，都变着态的往大学送。这种人的钱不赚赚谁的？自然，孩子没有得到好的教育，工资和普通高中生拉不开差距，家里又很是交了一笔学费，不穷你穷谁？
这年头家长也不都是傻子，我们从来不为进入这种大学而争论。问题是，那些好的，能够给你资源的学校，谁在进？谁应当进？
谁进大学？ 首先你应当明白，大学并不是象牙塔，他不天然是为了让好的学生变得更强而出现的。大学的出现，是他的设立者为了他的理想而建的。如果他的理想碰巧是，让好的学生变的更强。那么，是的，这也是一种可能。但是你应当明白，另一种可能性是，为各种有钱人世家教育子女，让他们的子女比别人的子女更强。我得说，这也是一个可能。
那么中国的大学是什么？
刚刚我们说了，一种大学是赚钱。我们从不争论谁应当进去挨一刀。至于那些能带给你什么的大学，一般都是国家掌握的。这些大学创立的目标是什么，他们选学生的标准就是什么。国家运作这些大学是为了什么呢？
还是赚钱。中国的大学培养了相当大的一批高级产业工人，这是个不争的事实。有产业工人才有GDP啊。既然是培养产业工人的，那么招人的标准就相当明白——增加产业工人培养的成功率。一般来说，好的学生比较容易培养成优秀的产业工人。但是这不是正向相关的，里面总要附加点什么。首先，政治必须正确。政治不正确的学生培养出来是危险品。其次，学生要足够好，不够好的不培养难度太高。于是你就知道高考是怎么一回事了。首先，你必须政治正确，否则根本不会有高考机会。其次，考试。
谁应当进大学？ 当然，我们是没有办法对国家施加影响力的。我们只是从理论的角度说。如果全民可以投票，来决定进入大学的制度，谁应当进去？
当然你也应该想的到，谁应当进大学是个政治问题，而不是技术问题。本质上，决定谁进大学就是决定谁在将来拥有利益。这是一个利益之争，永远是。我和那位交大的特招吵，就是因为他觉得特招理所应当进大学，因为他们deserve。而且他不觉得这和利益有什么关系。我不觉得谁是理所应当进入大学的，大学不是赛跑，跑赢拿奖品。大学不是养鸡场，养出一批换一批。所以我觉得以考试为基础来决定谁进大学本身就是个问题，高考有问题，特招当然也有问题。
但是我们没法脱离高考，你们都知道为什么。既然谁进大学是个政治问题，那么一种无论听起来多么合理，却看起来不见得公平，操作起来更可能有黑幕的方案，是绝对不可能上的了台面的。而目前，问所有人，觉得还算公平的方案，就是高考，大家一碗水端平。即使是高考这么看似公平的方案，也有无数不公平的细节在争吵中。特招生多了，平衡发展的学生家长就要有意见。取消特招了，偏科生家长就要有意见。开放对地区的人数限制，招生比例高的城市家长有意见。不开放，外地家长有意见。你知道的——无论社会民主还是不民主，这是永远的利益之争。所谓民不民主，只是这个问题是由大家投票解决，还是领导拍板解决。
关于地区之争，我首先引述一篇文章民主的细节 – 谁有特权上大学，文章需要翻墙，我引述如下。
看了刘瑜《民主的细节》，我没觉得美国像天堂，但中国真的很像个炼狱。
一个简单的例子。
刘瑜引用罗尔斯《正义论》的解释说：只有当你不知道自己可能是谁时，才能想清楚什么是正义。“他有一个术语，叫“无知之幕”，也就是一个人在对自己的社会处境暂时失明的情形。一个站在“无知之幕”后面的人，既可能是比尔盖茨，也可能是一个非洲饥民。如果你觉得正义就是杀光富人瓜分他的财产，万一“无知之幕”一拉开，发现自己就是比尔盖茨，恐怕你会后悔得一头撞死。如果你觉得正义就是WINDOWS
2000卖5000美元一套，万一“无知之幕”一拉开，发现自己其实是非洲饥民，估计也要捶胸顿足。”
然后，她举了美国人关于“谁有特权上大学”的争论。自60年代的平权运动始，许多人主张给黑人和妇女在入学上优惠，以补偿之前遭遇的歧视，叫做“补偿性正义原则”；但是矫枉过正的结果，产生“逆向歧视”，70年代中，一个叫巴克的白人学生不满自己在考大学上屡屡败给各方面都比自己差的黑人学生，上诉最高法院，法院裁定对黑人学生实行定额制是违宪的，但原则上仍支持平权行动，这个叫“程序性正义原则”。后来的40年，美国人民一直在如何协调这两种正义间苦苦挣扎与思索……中国呢？
“好了，终于可以回到咱们开头提的那个问题了――来自火星的你，被扔到大城市、内地、边疆的可能性各三分之一，你会如何设计高考分数线方案？
你可能会说：三个地方分数线一样嘛！大家公平竞争嘛！
你也可能会说：让边区分数线低一点，其他两个地方一样，因为那些地区贫穷，教育条件有限，人家北京上海的孩子用电脑打字，俺们这里还是凿壁借光呢。
你还可能会说：我选择让北京上海分数线低一点，其他两个地方一样。因为……因为……咦？
你们地球夏天真热啊？
我们知道，这三种选择，第一种叫“程序性正义原则”；第二种叫“补偿性正义原则”；第三种，姑且称之为“夏天总是很热”原则吧。”
元芳你怎么看？
大学值不值得进？ 首先我给光知道赚钱的大学定个性吧。这种大学您就别去了，去了等于白去。
其次，对于指望搞研究的，真的对学术有兴趣的。我的建议是你尽快找好老婆，尽快走，出国读研究生。中国也是干活，外国也是干活。人家待遇比中国高不说，还没P事，能让你专心做研究。国内但凡是个院校都是一堆P事，搞行政的时间长过做学问的时间。
最后，您要是指望出人头地的——那就吵吧。。。
我的立场？ 我其实是特招的受益者，当年我是物理竞赛的二等奖。但是，那毕竟是过去了。现在我物理方程都不记得几个了，要做计算更是要依赖程序了。而且——我也不会再高考了。
所以其实个我对高考的立场就是个无知之幕——谁知道将来会生儿子女儿，是偏文科还是理科。我连将来会不会在中国，想不想生都不知道呢。
所以我在偏科问题上的立场是随大流的，一般来说，强到特招的概率总比平均分数高的概率来的低吧。至于地区之争，我得说，原则上我支持向贫困地区倾斜。但是行动上支持北京和上海保持本地人低分数线。
听起来很悖论，但是这是诚实的想法。</description>
    </item>
    
    <item>
      <title>cython编译细节</title>
      <link>//blog.shell909090.org/blog/archives/2259/</link>
      <pubDate>Thu, 25 Oct 2012 11:12:09 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2259/</guid>
      <description>两点简述：
可以使用cython &amp;ndash;embed来编译一个pyx，生成带main的代码，然后用gcc直接编译过去。大概样例是这样的：
cython &amp;ndash;embed $^ gcc $(shell python-config &amp;ndash;includes) $(shell python-config &amp;ndash;libs) -O2 -o $@ $^
pyx的文件名会被转换为变量，所以所有在变量中不应当出现的符号也别出现，例如-。</description>
    </item>
    
    <item>
      <title>pycon2012</title>
      <link>//blog.shell909090.org/blog/archives/2257/</link>
      <pubDate>Tue, 23 Oct 2012 14:27:34 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2257/</guid>
      <description>今天第一天在大型会议上演讲，其实挺紧张的。不过还不错，虽然临场反应并不热烈，但是至少不冷场。下面是我今天看到内容的回忆，有些印象不神，记得不清楚了。
第一天上午 视频播放 上来先是sting先给我们放了一堆视频，我基本啥都没记住。就记住一个在日本的pythoner说教孩子编程时大家的评语了——python穷三代，编程毁一生。我后面接的是，用scheme子子孙孙都完了。
python产品构建和发布指南 沈游侠的主题，彻底干货。基本要点就是利用cython和pypy来编译类python语言，变成C语言代码。这样不但速度快，而且C代码都是可以跨平台的。后面又列举了如何用cython和pypy来编译库。这样基本可以完成python到多数平台的移植。
我做了一下简单测试。cython对速度的增加主要是静态类型编译，如果保持代码不动，速度反而会略微下降。因此在速度提升上，作用并不如想像中那么明显。但是在跨平台上，效果就非常好。rpython则完全相反，经过rpython编译的代码，在基本不修改的情况下（当然，前提是你需要符合rpython），执行比C还快。
不过游侠在后面的答疑中也说了，pypy的rpython编译把握难度比较高，不建议在产品中使用。
另外，他后面也提了溜宝的例子，在python和js之间可以远过程调用，还可以回调。熟悉http的应该可以听出来，这个在现在浏览器中必然是要用到long pull技术的。因此底层框架不肖说，必然是Eurasia。
让程序运行更快 我们几个都在说，土豆的一贯风格是分享内容是和技术有关的干货，但是都和python不搭边。最多在最后说一句，这个技术在我们这里是利用python做的。上次黄东的演讲就是，讲如何算流量带宽费，最后来一句，这个是python实现的。这次李小红的分享也是，很技术，但是和python没啥关系。讲到一半还来了一句，“我对python不熟悉，前几天特意看了一下，dict是利用开放地址法实现而不是开链实现的，这让我对python顿时有了信心”。微薄上无数吐槽高级黑啊。
土豆的分享其实很简单，核心就是如何通过代理让网站的响应速度更快。干货是干货，但是不是非常熟悉http协议，能够将http本身优化到相当程度的，听了等于白听。因为上面讲的大部分，都是内存命中和交换，磁盘写出，cpu调度，poll和epoll内核模式差异之类的话题。在python下面，poll和epoll基本都看不出差别，大部分优化都围绕着模式打转。研究这种命中技巧不是南辕北辙么？
但是这不表示这个主题没用，只是如果你不把其他方面的问题解决的很彻底，先没头没脑在CPU和内存缓存命中上下功夫，多半是做不过别人的。
第一天下午 OpenERP 即将推出的第 7 版的功能和新的编程框架介绍 演讲者是个法国人，中文相当不错。不过和Thomas比起来还是差点。旁边的老外哥们说，那是因为Thomas有个好中国老婆。
基本是广告。除了让我们体验了一把openerp的风格外，啥都没看着。不过openerp看起来确实够屌的，直接去下一个插件，应用，然后就直接换掉了语言。这基本和php差不多。还有一堆的良好的交互特性，看起来非常像应用。此外，啥技术都没有。
元编程在 Redis ORM 中的应用 我自己的题目，会场反应并不很热烈。总共两个选项，我问认为是1的举手，几个。认为2的举手，几个。剩下的是啥？
其实元编程本身就不好讲，这个题目我写完文档算了一下，大概1个小时到一个半小时。问题是我问sting多要点时间，没有。好容易给我加到45分钟。我对着文档左砍右砍，还是紧紧张张的25分钟讲完。要在30分钟出头讲完整个题目，也难怪听众反应不良。
具体我也就不展开了，希望看到的可以看我的slide。另外我说一下，这个slide也是我用python做的。
用 Tornado 开发 RESTful API 应用 其实以这个应用而言，是适合GAE的项目。不过飞龙只是借这个题目讲Tornado而已。
阿里云之移动开发者上云 纯粹广告。不过既然是lighting topic，也不算太难受。我也顺便看了一下阿里云的架构。不过主讲完全没讲到要点，他们到底是卖IaaS业务，还是卖PaaS业务，还是云存储，还是三者都有？另外，用IaaS来做PaaS的可伸缩？我还真不觉得这是个好主意。。。
Python如何帮助「逆转三国」获得成功 广告中的广告。今天唯一一个妹纸上场的主题，我还在想，终于有妹纸上去做分享了，还是个美女。结果介绍完了心里就凉了半截——市场总监，这姐们是个非技术的角色。演讲的主要内容是，python很好，python没出过乱子。完了，总共15分钟不到，我连拍第二张照片的机会都没有。其余时间全在说游戏是如何成功，左右还有海报助阵。最后还出来一个美女发传单。
最后主办方出来道歉，他们也以为这个topic是正规演讲，没想到讲成了lighting topic。
网页游戏的跨界开发 董诣的题目，主要讲他如何训练公司的策划使用python。他用的方法基本就是元编程的路数。
策划将配置写入excel，然后他们的程序读取excel，写出一个python的文件，再由服务器加载。这是典型的字符处理型元编程的例子。早知道他们这么用，我满可以顺手拿来举例的。
最后他的例子倒是让我们吐槽了一把。print后面可以不加空格，这是他们公司美工教的。
实战游戏客户端 林伟每年来都是带来大量干货。今年他是特别从北京飞过来，在演讲前刚刚到场。
他的题目是用python做客户端，并不是很好讲。因为python做游戏客户端不是很多。他举了一个pygame的例子，超级玛丽的企鹅复刻版，玩的挺欢乐的。
后面他大概讲解了一下游戏界面编程的几代模式变化。不过我印象最深的还是说到flash在苹果上。后面他运行flash的那个模拟的时候，我彻底吓一跳。我偷偷和沈游侠说，林伟说的完全没错，乔帮主抹黑flash完全是为了抢app的地位。
大家可以想象一下，如果flash拿到了硬件驱动加速会如何？Apple Store上的程序还有谁会花钱？都直接用网页跑一个Flash游戏就直接玩了。PC上能跑的，在苹果上自然也能跑，效果还不差。那还用Objective C做什么？只有性能要求特别高的才会用到。如果不需要Objective C，那Apple Store还怎么赚钱？从Flash能够做到这点，还有Adobe的战略布局，以及Apple Store目前的情况。我们多半可以得出这么个结论，苹果抹黑Flash的主要目地是将Flash踢出移动平台。而只有将Flash踢出了移动平台，才能保护移动设备开发市场的封闭性，从而从中牟利。
另外，他讲到的FlashCC也很有意思。在一个语言内调用其他语言，这非常有利于Flash的开发。不过后面林伟的一句口误让全场都笑了。他说：“我今天来就是告诉大家，从今以后，大家可以用Flash开发python程序了。”得，又是一堆高级黑评价。
第二天上午 网游开发中的 Python 组件 赖总的topic，基本讲的其实是模式。
对我来说其实也挺有用的，尤其是关于对象可调用方法的那个idea。写程序到了一定程度，实现已经不是问题。只要有明确的实现方法，你给足够的时间干，肯定是干的出的。问题是思路，也就是idea。一个好的思路往往是经过很久的总结，在实践中不停摔倒，才能真正用上去。
另外，最后的吐槽，其实是自行实现语法，或者至少是语法糖。我和赖总说，scheme其实很容易嵌入，而且很容易实现这样的要求——lisp类语言的宏天下闻名。赖总在研究的是基于python自己的Parser的方案，我回头有空也看一下。
Python in Gentoo Linux Patrick Lauer的主题，主要是讲了Gentoo下面如何使用python，每个版本的python在gentoo下面的支持情况如何。按照数据来看，python3的支持接近完成了。而pypy大概只有2/3的支持比例。</description>
    </item>
    
    <item>
      <title>没想法</title>
      <link>//blog.shell909090.org/blog/archives/2256/</link>
      <pubDate>Thu, 18 Oct 2012 14:03:28 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2256/</guid>
      <description>前两天面了一个同学，是我在交大的学弟。平时印象挺不错，用过的技术也挺多的，和老板商量一下，就面试看看吧。
结果不能算糟，但是也谈不上多好。主要是，这同学没想法。
不知道和没想法 老板最恨的一件事情，就是在问你一个问题的时候，你手一滩，说”我不知道“。其实严格来说，他并不介意你说”我不知道“(I don&amp;rsquo;t know)，但是绝对不要说“我没想法”(I have no idea)。
拿面试时候的例子来说吧。那位同学讲了一个实验室里面的项目，用web来控制小车。当然，那是个没做完的项目，有什么问题也不是值得奇怪的事情。我们开始的时候问了几个问题，感觉还可以。事情是从我随口的一个问题开始的：”如果两个人同时操作，会发生什么事情？“
两个人同时操作在设计上是不允许的，完备的系统可以通过一些方法来排除这种可能。例如，见到第二个cookie就给一个空页面回去。项目没做完，没屏蔽掉第二个人，也不是什么值得奇怪的事情。但是我想知道的是，对于这么一个未定义的事情，被面试的人是如何分析的。
按照正常流程来说，分析这个问题首先需要知道基本的工作原理，然后拆分工作流程，最后分析，如果两个指令同时到达，会发生什么现象。问题是，该同学阻塞了半天，啥都没干。我和老板询问了整个系统工作的原理，发现他对基本原理都是了解的。我们按照他所说的原理，推断出了两个人同时操作会发生的结果。当然，是否正确，谁也不知道。但是我们的结论是，他在具备所有推论需要的知识的情况下，没有做出任何推论和结果。
这是一个很扣分的事。
不知道 所谓不知道，是指你的知识(knowledge)不足以解答当前的问题。例如，对于非程序员，我问你，python中用于逐次返回数据的关键字叫什么。你手一摊，告诉我，我不知道。这是因为你压根没学过python，当然不知道yield。
不知道并不是值得羞耻的事情，无论多强的程序员，总有什么东西是他不知道的。新的语法，新的框架，还有我们没听说过的技术。作为程序员，什么都知道反而是一件无比诡异的事情。
没想法 很多时候，没想法是因为不知道。例如，假定你对股票市场的工作机理一无所知，尽管你完全可以理解，作为正常人类都是希望高买低卖。但是当我问你，股票市场表现如何的时候，你也只能手一摊，我一点想法也没有。这不仅仅是你不知道，而且你都不知道该如何去分析这个问题。
因此正常程序员见到一个不知道的系统，第一个问题十有八九是，这系统干什么的。第二个问题就是，这系统怎么工作的。当你知道了系统的大致工作机理，就会想出如何分析这个系统的方法。
例如，我们有一个网络系统，老板说网页访问慢。元芳你怎么看？
这后面没什么天大的秘密。我们只要照着网页访问的流程来看就好。
DNS解析 tcp连接 http请求 http返回 DOM解析 js执行 网页慢，首先分析最慢的地方在哪里。这里的每一步，都是能够计量的。我们再假设，我们发现最慢的是http请求和返回，那么我们基本就把问题定位在了服务器或者网络容量达到极限。那我们又如何分析是对方服务器太慢还是我们自己网络太慢呢？
只要你没傻，都应该想的到，最简单的方法就是同时开一个比这个页面快的多的系统，一个不会慢的服务器。最合适的是google和baidu的首页。如果还是慢，那就是我们的网络问题。如果快了，就是对方服务器到极限了。
做出这个分析，并不需要什么惊人的知识，也不需要你有足够的经验。当然，经验可以帮助你快速的排查问题，当出现某些现象的时候，别人还在做诊断，你就可以直接做定性测试和结果了。
你可以不知道，不可以没想法 作为程序员，我可以接受你告诉我，你不知道。但是一般我不能接受你告诉我，你没想法，尤其是在一些情况很明白的核心问题上。如果这是一个很困难的问题，没想法也不奇怪。有些很妖怪的问题，例如为什么我们的系统在人少的时候OK，人多了就挂了，再多又没事了。通常的性能计数又没异常，问题随机出现，无法复现。像这种妖异的问题，我没想法，你没想法，我问别人也没想法。但是如果我问你，网页为什么慢，你告诉我，没想法。或者更夸张的，在不经过相关测试的情况下，随便看了看现象就告诉我——这是我们的网络带宽不够大——你丫当我村干部糊弄呐！
没想法表示你对这个系统没办法。你没办法做一些事，在可预期的成本和时间内解决问题。你能做的就是去网络上找出过这个问题的人，他们的解决方案，然后照做。coolshell管这个叫做散弹枪式编程，我管这个叫做博彩。散弹枪不是一个很坏的主意，对于一些你不关心又需要很快解决的问题，你可以散弹枪一把。但是如果你在头三个方案内都没解决问题的话，你就可以停手了——后续方案能解决问题的概率和头三个没有太大分别。
有的时候，散弹枪是一个非常糟糕的做法。例如我们上面那个——网络带宽不够大——的例子，你很容易在网络上看到这个解答，但是往往这不是正确的答案。我是说，很多人确实是因为网络带宽不够，所以出现了网页缓慢。但是网页缓慢的原因，还有一个是因为延迟和丢包率太高。而增加带宽可解决不了延迟和丢包率。甚至相反。我们可以想像这么一个可怜的例子。当技术瞎猜到——是你的带宽不足——时，老板就会对行政说，去给我换一个给力的带宽。于是行政要升级带宽——又要控制成本，十有八九，他们会找上一家小ISP。ISP的性价比非常可观，行政和老板都很满意。唯一的问题，是他们的延迟和丢包率比上一家更加糟糕。
你看，散弹枪不但没打中目标，还使得情况更加糟糕了。
类似的问题还出现在大型电商系统的架构上。如果架构师和SA的答案永远是——硬件不给力，你需要好好考虑一下，真的是硬件不给力，还是这只是一个拖延的借口。如果架构不合适，当规模达到一定量级后，无论你再堆多少的硬件，可支撑用户数都不会有太高的提升。</description>
    </item>
    
    <item>
      <title>回到毛泽东时代</title>
      <link>//blog.shell909090.org/blog/archives/2254/</link>
      <pubDate>Wed, 17 Oct 2012 15:11:47 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2254/</guid>
      <description>是否愿意回到毛时代 今天在酒席上，不少长辈讨论说毛泽东时代如何如何好。我想了半天，很好奇，于是问了一句——你愿意回到毛时代么？
提出这个问题的原因，是因为，我试图思考，在当前状态下，如果要效仿毛时代，会发生什么事情。一般来说，怀念毛时代的人最怀念的是工作分配，工资平均，没有住房问题。我们假定回到毛时代，至少要解决这些问题。
如何回到毛时代 作为这个假定的前提，我必须先说明。你在现代所犯的所有“罪行”，例如投机倒把，或者作风问题，都不会在毛时代得到清算。如果要清算的话，我估计第一个出的问题就是——全中国的人大半死光了。我不大相信在现在中国，有多少人没有投机倒把问题。所以，你在现在所犯下的所有“罪行”，都不会得到清算。在这个假定下，我们全民投票。如果一半以上赞成回到毛时代，我们就开始毛泽东时代的路线和政策。
下面的很多事情，是参照建国后历史预计的。我们不能说他一定会发生，也无法排除他不可能发生。。。
会发生的那些事情 八级工资制 首先进行的应当是全国统一工资制。所谓统一工资制，就是按照国家的职称评定，核算你的工资。以我为例：我只是大学本科毕业生，非党员，没有职称。工资大概比全国平均水平高一点。上海平均工资5000左右，全国平均工资大概只有1000出头，我假定进入毛时代后，我的工资是——2000人民币。
我家喵说过，在上海，没有住房，医疗之类的问题，2000也足够生活了。然而2000的计算依据是什么？是以全国平均工资为基础，重新分配所有人的收入。那么目前不覆盖的东西，也不能指望在这个工资下覆盖。如果要覆盖住房，医疗问题，我们的工资就要进一步降低。
因此首先发生的是活命问题。上海地区的消费水平不是一下子就能降低的，而工资2000，这在上海连活命都不够。首先会发生的问题是吉芬效应，生活必须物资随着收入的减少而迅速增加。换言之，米，粮，布，盐会快速涨价。因此政府只有设法稳定物价，将上海的城市生活物资价格降低到和全国其他地方差不多的水准，我们才能活命。
土改，住房统一分配 工资平均后，政府会做的第二件事情就是土地改革。按照上海市平均住宅面积分派住房。我查到的资料非常复杂，有说17平方的，有说30平方的。无论如何，目前我们两个人住100平方，铁定是超了。所以需要整理自己的东西，搬到政府指定的另一栋房子里面去。我们的房子大概会接待一对外地夫妻，有两个孩子和两个老人，按照平均面积差不多。不过作为补偿，我们不用继续缴纳住房贷款了。
公私合营 另一个政策大概就是公私合营。所有私营企业，必须由国家控制，私人入股。在多少年后，国家停止支付私人定息。例如你们公司，公司合营后，就归国家管了。国家会按照企业估价，支付你们老板每年5%的利息，支付20年。如果不同意，则宣布其为剥削资本家，没收其资产。
然后发生的那些事情 打击投机倒把，囤积居奇 为了降低上海物价，必须打击投机到把，囤积居奇。什么叫做投机倒把，囤积居奇呢？例如最近的食盐涨价。政府发布消息，凡是人均购买食盐500g以上的，属于投机倒把，要强制劳改。如果在禁令发布前已经购买的，需要向政府交代犯罪事实，并上缴不当所得，方能宽大处理。这就是打击投机倒把。如果超市有食盐不销售的，一律没收所有货物，店长枪毙。这个就叫打击囤积居奇。
如果你在回到毛时代，发现工资降低到2000后，立刻去超市搬了5箱方便面——OK，估计你离去青海玩不远了。
户口 在工资平均化后，如果不抑制人口流动，应当会发生人口逆向流动。即，人口从高度发达地区流向欠发达地区。也有可能从高度发达和欠发达向中度发达地区迁移。因为上海的物价无论如何降低，也比安徽的高。同样2000工资，在安徽生活的显然比上海更舒服。然而如果去过于偏远的地区，虽然钱够了，却没有足够的物资。
不过回顾毛时代，人口流动也是偏向北京的。这主要是由于北京这里享有了非常高的行政资源附加。北京的教育，医疗，市民获得的娱乐，都是最多的。如果大城市相对于农村有行政附加，则也可能产生和预料不同的人口流动。
幸好，我们已经存在了户口制度。这个制度可以很容易的控制人口流动，尤其是在毛时代。政府可以很容易的宣布流民为间谍，或者其他人，从而逮捕和宣判他们。
控制人口自由流动已经是中国的基本国策了。我不理解发生这种问题的原因，可能是因为要强制将农民捆绑在土地上。也可能是因为方便控制。无论如何，户口制度不大可能在回到毛时代后减轻，反而可能会更加复杂，厚重。
公司迁移 但是户口还是有点问题的。我们现在有大量的劳动力迁移到了沿海地区，而户口还在原地。因此他们可以完全合法的迁移回老家，政府对此没有任何办法。人口迁移会迅速增加中度发达地区的负载，这必须和工作迁移相匹配。因此，国家必须将大量企业向内地迁移。恰好，我们进行了公私合营，因此可以直接把一些企业搬到内地去。
公司迁移会迅速的降低其竞争力，这是当然的事情。例如以皮鞋生产为例，一家位于西安的企业，和一家位于广州的企业，在人力资源上有绝对优势，然而在出口管理能力上有绝对劣势。这个行为大概会引起一些企业的生产或销售出现不协调。
上山下乡 公司迁移后跟着会发生的事情很可能就是上山下乡。为什么？因为无论如何调整，城市化的工业和三产是不可能没有失业的，而中国目前农村劳动力实际不足。因此国家必然会做出调控，让部分人到农村去。
怎么实施？
正常家庭都不会希望子女到农村去吧，因此在谁去的问题上必须接受国家强制。一种可能的方案是成年后未找到工作的年轻人。另一种则是毕业后听从国家分配。无论哪种，你的子女都有可能被送到荒僻农村，和一个当地的农民/农妇结婚，大字不识，终老一生。
更深层的因素，我们可以把这一问题的原因归纳为——现在台上的是老毛。
我不知道会不会发生的事情 控制货物和人员的进出口 这个很大程度上取决于政治状况，而非相反。
问题是，中国目前靠出口养活了很多人口。如果控制货物进出口，中国会出现（可能的）部分物资短缺，和部分产能过剩。同时，控制人员出入的理由则更加明显，如果没有出国人员流动控制，各种国外的思想会严重影响整个国家“毛时代化”的稳定。因此人员出入控制显然是更加必要的。而严格的人员出入控制下，怎么可能保持货物贸易正常化呢？进出口限制势在必行。
然而中国现代工业的自给率很低。实际上，大部分现代国家也是如此。无论是美国法国还是日本，他们的硬盘滑块大部分都是来自于泰国。这是泰国大水导致全球硬盘价格上涨的原因。大部分国家不会自行生产工业链条上的每一个部件，这是国际贸易的基础。在控制货物进出口后，中国的现代工业是不能自给的。我们就需要研发全套的工业链体系，重新发明轮子。
而重新研发全套的工业链体系，则需要相当的人力投入。这可能弥补没有出口引起的产能过剩，缓解失业的状况。中国目前的状况和解放不同，解放时中国处于严重的农业时代和产能不足，目前则是明显的后工业时代和产能过剩。因此我们的首要问题是解决消费问题。
如何解决外国人在华投资和华人在外投资 华人在外投资很可能被主动收归国有，而外国人在华投资则复杂的多。多变的政治格局可能造成外国人资产的价值变化，而估算这个变化是非常困难的。不过总体来说，我预期大部分的外国人在华投资都会被政府回收（当然，还是要付费的）。
文化上的审核和互联网的终结 不消说，现在放的电视都是什么乱七八糟的，统统不准放。还有网线，也都拔了吧。
你真的敢回到毛时代么 从各种变化而言，回到毛时代并不一定直接导致上个世纪的各种惨剧的发生。例如文革，例如百家齐鸣。但是从因果层面推导，我们至少能够看出，如果要回到一切公平的年代，我们就要面对一切公平的问题。
在上文中，我还有一些东西没有写出来。例如工资平均化，工作铁饭碗后，可以预期的，工作热情下降，生产效率下降（别和我争辩不会，上世纪凤阳小岗村改革的原因是什么？）。你虽然和别人一样有钱了，但是你还是买不到你想买的车，想娶的人，甚至你本来可以在淘宝上买到便宜的衣服的，也没有了。这年头谁还上淘宝开网店阿，都国家统购统销了。
更深层的，越是解读那个年代，你就越能感觉到那个年代的折腾，和现在来之不易的自由。为了解决一个居于次要地位的问题，国家可能会在根本问题上做出让我们目瞪口呆的行为来。例如，为了解决城市劳动力过剩问题，居然将多余劳动力反向迁移到农村。这一行为直接导致了一个年龄层的青年们学业中断，人生受到影响。也导致了中国工业化积累不足（中国真正实现工业化，达到后工业时代，还是从90年代开始的）。
自由这个词虽然简单，看似和我们没有什么关系，然而却如同呼吸一般，有着不可辩驳的重要性。当你坐在家里打游戏的时候，你能够想像，自己无法预料明天的样子么？尽管现在我们依然无法预料明天，然而我却可以放心，我的子女不会突然被送到农村，我的公司不会突然不属于自己，我可以在城市里面随意的搬家，只要我高兴。
毛时代真正的悖论在于，他试图创造一个人人富裕的社会，然而却创造了一个人人平等的社会。在一个人人不富裕的社会中实现人人平等是什么概念？只有穷人才会觉得自在，富人会随时有不确定的丧失感。资本主义的基础，即是承认私人财产神圣不可侵犯。所谓“风可进，雨可进，国王不可进”，即是如此。作为其对立极端的社会主义，若不是在一个物质足够的社会上强行实施，只能让有产阶级变得如惊弓之鸟。
你是不是富人 也许很多人不认为自己是富人，我可以提供一个简单的判别标准，按照中国平均国民收入，你是在之上还是在之下？
能够看到我文章的大部分人，在中国平均国民收入中都肯定属于之上的位置。别的不说，收入不及平均收入的，你能够拉到网线再弄一个vpn来看我的blog？因此，在毛时代，你们可能被打为地主和富农，财产被没收。
谁是穷人 真正一无所有的穷人，如果不善待他们，很可能他们才是真正支持回到毛泽东时代的人。</description>
    </item>
    
    <item>
      <title>国庆堵车</title>
      <link>//blog.shell909090.org/blog/archives/2251/</link>
      <pubDate>Thu, 11 Oct 2012 10:05:58 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2251/</guid>
      <description>国庆堵车的原因 国庆堵车，乃至一切国庆拥堵的原因，是16亿人的时钟被调整到了同一节律上，除此之外别无其他。在国际上，大型节假日也会堵车，费用涨价，这不是什么值得大惊小怪的东西。要说中国和其他国家的区别，主要是三点。
大量的劳动力离开农村，来到远方的大城市谋生。他们希望有足够长的假期回家和亲人共渡。 中国的三大运输行业，主力的铁路还处于计划经济时代，公路则有巨量的过路费。飞机对于大多数人来说不是一个合理的选择。 中国的道路设计和运行，是按照收费状况来进行的。本次假日，价格降低了。 细分市场 对于解决国庆拥堵，市场经济下的标准做法有两种。
一种是保持免费，由质量的下降来控制人数。 第二种是增加价格，让部分人不愿意出行，换取通行畅通。 通常来说，我们更愿意取后者，因为堵塞在路上并不会产生经济效益。而增加出行价格不但会产生直接的经济收益，而且会让部分去不了的人做其他更有意义的事情，而不是呆坐在车上发呆。这种机制叫做市场价格机制。更进一步，我们可以根据出行时对拥堵的接受能力，分割出不同的市场。让愿意接受堵车的人便宜出行，不愿意接受堵车的人付费。这种方法叫做细分市场，即，对于市场的供需状况发生明显变化的区域或者时段，或者人群，采取完全不同的价格策略和服务策略。这样会优化资源配置，让不同的区域/时段/人群获得他们希望获得的结果。
然而，无论哪种方案，都不可能采取反向措施。在高峰时期降低出行价格，让拥堵的道路更加拥堵。本质上说，国庆道路拥堵是由于定价策略根本错误所导致的。他们细分了市场，可是针对高需求市场提供低价策略。你能抱怨发生短缺么？而很多人居然还抱怨到，”不敢占国家便宜了“，”高速收费有理“。对于后者，如果加上高峰时期的限制，我觉得还没说错。对于前者就是彻底的无语了。
同样的市场策略不解还发生在非常多的日常问题上。我曾经提出过分流解决市内经济拥堵的方案，包括非高峰期和高峰期的地铁和出租车价格差异化。很多人都表示不理解。我觉得在经济层面理解这个效应没有任何困难，只要你想想就能明白。简单来说，就是对市内拥挤时期和非拥挤时期差别定价。例如平时公交0.8，高峰期公交1.2。平时地铁3元，高峰期地铁5元。
从市场角度说，这很明显的会压缩高峰时期出行人数，缓解高峰时期的交通工具拥挤现象。而且这个方案并不难实施——地铁和公交基本都是刷卡收费，对收费装置改造，让不同时间收费不同价格并不困难。出租车更是本身就支持这个功能。作为一个合理的驳斥，你可以说这个方案有明显的缺点。这个方案会使得更多的人偏好在高峰期自驾出行，从而加剧道路拥堵。
然而抱怨”太复杂了“，”没道理“，都是属于无常识的。如果说复杂，出租车系统是如何支持夜间收费的？如果说没道理，你为何不投诉出租车夜间费用机制呢？还有个朋友坚持认为，无论票价如何变化，出行人数应当不会有太大变化。用术语来说，即，交通需求的弹性相当小。然而我很简单的问了一个问题，如果是这样，当交通免费的时候，乘车人数应当如何变化？她想当然的说——当然是不怎么变化。旁边另一个朋友同时也说，广州发生过这个事情，地铁瘫痪了。场面顿时冷了下来。
和我讨论的人中，有八成以上的人直觉的反对这个方案，却给不出合理的理由。大多都只能说，太复杂了，搞不起来，没道理。我知道你们的想法——八成的人都需要在高峰期出行，这个无疑是在加剧他们出行的成本。然而，城市的出行费用并不是单方决定的，这是一个供需问题。虽然我没有量化数据，然而根据我对目前状况的分析，我觉得正确的票价不但不会上升，反而应当下降。在高峰时段，我们的出行人数略高了。然而在非高峰时段，我们的出行人数可是远远不足。对此应当采取低票价，鼓励可以调节时间的人在非高峰时段出行。只要非高峰时段采取了低票价，高峰时段人数过多的问题也会适当缓解。
当然，这个方案也有固有问题，即自驾车的问题。从鼓励公众交通考虑，我们应当降低公共交通费用，甚至免费。然而从良好服务考虑，我们又应当调控公共交通费用。这是固有矛盾，没有什么万能的解决方案。比较好的方法是增加自驾出行成本——例如扩大高峰期非上海牌照限行范围（不过这又会拉高上海牌照价格），或者对市内拥堵路段ETC收费。然而，只有几个人，很合理的提出了自驾出行的问题，我认为这是一种理性的，经过思考的讨论。虽然大部分的80后的应当学过经济学，可是能够使用经济学，进行理性思考的人为何寥寥无几呢？
黑洞无毛 同样还有改善高峰期出租车数量的方案，高峰期时段牌照，也是基于细分市场定价。基本思路是发放针对高峰时期的特殊牌照，拟定不同的价格，使得高峰时期牌照的回报比比普通牌照略高一些。按照市场原则，很多司机可能放弃做普通出租车司机，而只开高峰牌照。这样会带来三个好处。
高峰时期出租车增加，打车容易。 平时出租车减少，减少浪费。 只开高峰车的师傅，完全可以在空下来的时候做别的事情，例如开网店，或者导游。 同样是个有各种好处的事情，收到的驳斥意见非常多。有人给我说了一通历史原因，然后分析当政者心理，总结为什么不可能。我觉得虽然这和市场没关系，然而这个分析本身还是有道理的。有人直接扯上了毛泽东时代如何如何，我直接闭嘴了。您要么看我的一篇《回到毛泽东时代》，看看您是不是真的愿意回到毛泽东时代。
其中说历史原因的人非常有意思。他说出租收管理费贵，主要是两个方面原因。一方面，是上海政府大量收取出租管理费作为政府开销。另一方面，则是早年出租运营公司在牌照上都是赔钱的，不让他们赚钱他们不干。
纷纷扰扰的原因，让我想起天体物理学的一个很重要观点——黑洞无毛。
黑洞无毛，意思是黑洞的外界性质，只有重量和角动量。两个重量和角动量完全一致的黑洞在对外上应当不存在区别。因为你既不能通过光观测他的表面特性，也无法做其他信息传出。这相当于一个从现实空间割裂的独立空间。唯一能证实其存在的特性，只有万有引力造成的空间扭曲。
而从经济分析角度来说，一个项目的经济学特性其实也只有一项——风险下的投资回报比曲线。当然，也许不止这一项。我不是经济学专家，所以并不清楚是否还有其他需要考虑的特性。然而，任何能够转化为上述特性考虑，并不引入外部性的特性，就不要出现在我的桌面上了。
不同投入资产，在不同风险级别上，会产生不同收益。虽然没有人精确测量和描绘过这条曲线（说曲线并不准确，绘制出来的话应当是一个面），然而我们都在无意识的使用这个观点。我们经常说“项目风险”，说的其实是投资回报比在XX以上的概率有多大。如果你不介意将投资回报比降低到近乎于无穷小，任何项目都是近乎于0风险的。我们说“低风险投资回报率“，指的是这个曲线在低风险情况下，在普通投资区间的平均回报比。我们说”公司价值“，”项目价值“，其实并不是指项目有多少资产。相反，我们是在评估，这个投资回报比的项目，某一个份额的转让市场价格是多少。
现在，我们可以说回到出租车牌照的问题。出租车牌照问题，我们可以认为是一个项目。而这个项目，无论是历史原因也好，还是什么其他的也好。其实都只是对他的未来回报曲线产生影响。我们可以抛开到底这个问题是什么的问题，转而专注另一个问题——当你最终存在了一条投资回报比曲线——可以是任何曲线——细分市场是否能够对这个市场产生影响，得到更优化的资源配置？
这个当作思考题，大家不妨考虑一下。
公平 国庆交通的另一个话题，则是有人说，中国解决了这么多人的交通问题，这是一个创举。英国的铁路是私营的，然而资本家完全没有改善铁路的打算，铁路依然破旧。网络购票问题本质是铁路运能不足，要加快铁路建设，等等。
我先不说英国的铁路到底好不好的问题，仅仅说另外一个问题——到底是谁？决定要不要修建基础设施。
私营老板出钱 我们知道，基础设施是要花钱的。如果是私营，这笔钱必然是老板出，然后转嫁到客户头上。他自然会考虑，是否可以愿意承担这个费用。如果他们觉得客户愿意承担，那么他们会修修看——同时将修建费用合并到票里面，卖给客户。如果客户不愿意，他们当然不会冒着亏本的危险自作主张。——当然，着有个前提，就是私营老板并没有垄断铁路业。
国家出钱 而如果是国家出，一样是转嫁到客户头上。如果不行，客户数量不足，就会转嫁到每个纳税人——即，你，或者我——头上。
问题来了。不是每个人，包括我，都需要大量使用铁路交通的。与其修建那么多基础设施，来增加高峰期运力。不如降低火车票价来的有吸引力。如果国家修建，然后由纳税人均摊，其实这是不公平的。
实际上，我可以肯定这个花销是无法由客户均摊的。如果可以的话，铁路系统为什么不自己组织修一条线呢？这固然是因为铁路修建的拆迁工作需要当地政府的大力配合，另一方面，也是因为铁路系统并不确定是否能在旅客收入——主要是非高峰收入上——拉平成本。其中也有可能因为国家目前从铁路系统获得大量税收，在不减少这个税收的情况下做不到。精确的说，修建一条铁路的开销无法由铁路带来的客运增量来平衡，因此才是铁路修建需要由国家拨款的原因。
公平论 既然是全民税收，公平就是一个核心问题了。我们首先排除铁路部门贪污腐败的问题，没有看到的事情，我们暂时不讨论。就公平上，是否应当采取这一行动，做一条讨论。
我记得我说过公平论。当你模糊你的身份时，你提出的结论才是公平的。如果我是不需要回家的本地人，为了春运修建大量铁路显然有悖于我的利益。然而如果我是需要回家的打工仔，春节不能回家又是一件很苦逼的事情。权衡两者，我觉得全民收费修建铁路还是一个可以接受的结论。
其他方案 其实在上文中，我们不断探讨各种技术问题，然而都没有涉及一个实质问题——16亿人的节奏在时空上高度同步。这本身是最大的问题。不解决这个问题，讨论细分市场也好，政策公平也好，都只能在技术上，让尽量多的人各得其所。只有让聚集问题彻底解决，才能彻底解决16亿人民的出行和游玩问题。
那这个核心的方案也就呼之欲出了——年假制和生产中心西迁。
目前我国有10天带薪假期，称为国定假日（顺便说一句，这个和其他国家比小气的可怜）。这些日子固定放假。一旦和前后连成长假，大客运高峰就随即发生。而国外很多是采用年假制的。每个人每年都有一定时间的假期，可以自行安排。很多企业还规定，当员工的工龄增加时，年假也随之增加。据说意大利人最长有一个月的年假（羡慕阿）。
年假制度可以减缓高峰的存在。从理论上说，采取年假后全年的交通量应当都是平均的。然而现实告诉我们——没那么美的事。由于传统节日的存在（例如感恩节，春节），很多人选择在节日附近回家。这还是造成了拥堵，不过显然比现在更轻。因为很多没有钱在假日回家的人，可以选择避开假日回家。
年假的一个问题，就是给与某些老板合法剥削员工的机会。因为如果是固定假日，工厂是否加班很明显。而年假则很难说，某人是否休了年假，除了他自己还有谁知道？但是与此同时，固定假日制度难道就不存在“剥削”员工的老板？员工留下来加班，却只支付正常工资，这种老板有没有？不希望休年假，希望多工作的员工，有没有？
我们不能只关注于年假造成的问题，而束手束脚不解决问题。作为一个可行的方案，部分的实行年假是一个很好的思路。鼓励部分企业实行年假制度，对年假不休的实行三倍工资。部分可行至少好过总体上一无所获。
而生产中心西迁，则是中国政府目前正在努力做的一件事。不过限于地理因素，目前效果好像不大明显。如果有时间，我希望对这一问题做一下全面了解和思考，看看到底是为什么。</description>
    </item>
    
    <item>
      <title>Y Combinator</title>
      <link>//blog.shell909090.org/blog/archives/2249/</link>
      <pubDate>Tue, 09 Oct 2012 15:38:44 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2249/</guid>
      <description>不动点理论 假定我们有一个函数f，例如，f(x) = x^2。对于某些点，f(x) = x。在这个例子里面，0和1很明显就是两个点。这样的点称为不动点。
不动点理论在各种领域有广泛应用，我记得其中之一就是在血型比例上。当ABO遗传规则固定后，存在一些ABO血型比例，这些比例的人随机通婚，生下来的孩子的血型比例亦保持不变。这是三种血型千百年来存在的基础，否则随着遗传规则比例转变，其中某些血型可能已经在地球上消失了。
也许你很好奇，当我们有了一个规则后，例如f(x) = x^2，或者ABO遗传规则（这也可以当作一个函数，将父代ABO比例转换为子代的），如何才能计算出函数的不动点。
答案是不动点算子。
高阶抽象函数的不动点 我们先不继续讨论不动点算子，让我们先讨论一下抽象函数。上面，我们的f都是具体的演算规则，x是一个数（例如x），或者一个矩阵（例如ABO，也可以当作一种数来考虑）。如果x是一个函数会如何？
我们先看一个递归的阶乘计算函数：
(define fact (lambda (n) (if (&amp;lt; n 2) 1 (* n (fact (- n 1)))))) 这是一个典型的阶乘计算函数，没错。问题是，我们在lambda里面调用了fact。从语言层面上说，这样做合法。然而从语言的研究角度说，这难免会带来一个问题。函数的名字，到底是一个可有可无的别名，还是一个在递归中必须的东西。如果是前者，我们可以完全用lambda构造递归函数。而如果是后者，我们无论如何努力，也无法仅仅使用lambda来构造一个递归。
OK，这和不动点有什么关系？这时，我们先假定函数f，是真正的阶乘计算函数。即f(n) = n!。那么对于以下函数，((F f) n) = (f n)。
F = (lambda (h) (lambda (n) (if (&amp;lt; n 2) 1 (* n (h (- n 1)))))) 看不懂为什么？这是一个柯里化函数。当我们传递真正的阶乘函数f给F的时候，在函数体内，他叫做h。而按照f(n-1)的定义，我们得到的值和(f n)没有区别。因此，我们有(F f) = f，你也可以写作F(f) = f。
是不是觉得眼熟？是的，f是函数F的一个不动点。要获得真正的阶乘函数f，我们只要对F计算不动点即可。
Y算子 Y算子(或者叫做Y组合子)是另一种高阶函数，用于计算任意函数的不动点。
假定对于函数f，存在不动点x，有f(x) = x，那么Y(f) = x，这是Y算子的基础。按照上文代入，我们可以得到f(Y(f)) = Y(f)，或者可以写作scheme格式：(f (Y f)) = (Y f)，这就是Y算子。</description>
    </item>
    
    <item>
      <title>小故事</title>
      <link>//blog.shell909090.org/blog/archives/2247/</link>
      <pubDate>Mon, 08 Oct 2012 11:30:33 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2247/</guid>
      <description>话说当年，印度打算推行沼气技术。沼气技术都知道吧。据说可以减少粪便污染，不影响粪便当作肥料使用，而且肥料效果还好，还能产生燃料。印度人当年就看上了这项技术，准备实施。
从数据上看，沼气比氮肥工厂好几条街去。不需要外汇，能增加大量雇员，还能发电。氮肥工厂不但资金成本高，外汇，而且还倒需要电力。更麻烦的是，原料是进口的，掌握在其他国家手里，可能上涨。
照理说这么好的东西，利国利民对吧？问题是实施后，印度发生了贫富差距增大。因为以前没有地的农民可以到处捡到牛粪，而牛粪他们是当作燃料使用的（恶。。。）。自从推行沼气技术，富农把散落的牛粪都收集起来拿去做沼气，穷人就没燃料了——而且他们也买不起沼气。
有一个吐槽说，原本没有交换价值的牛粪是有价值的，但是当牛粪有了交换价值，穷人的生活水准就下降了。这是新时代的羊吃人么？
每个时代都有羊吃人的故事的。还有多少人记得当年造船是多火爆的一个职业？还有多少人记得当年DOS程序员多牛？甚至现在都没有多少人记得C程序员了。大部分估计只在大学里面学过，考试的时候记得，然后就——没有然后了。</description>
    </item>
    
    <item>
      <title>lupus</title>
      <link>//blog.shell909090.org/blog/archives/2244/</link>
      <pubDate>Fri, 28 Sep 2012 15:18:39 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2244/</guid>
      <description>曾经有人问过我这么一个问题，人怎么能自己和自己打架？
其实这种事情并不奇怪，人有一种处分自己体内不合群细胞的行为。当细胞变异时，必须将其消灭，否则会发展成为癌症。如果这个机制的表达过于迟钝，那么会引起免疫力低下，最著名的例子就是HIV。而这个机制的表达过于激进，那么会引起对自身细胞的攻击，例如systemic lupus erythematosus，系统性红斑狼疮。
大型组织中的竞争机制 这个和主题有什么关系？我们先说我的另一个朋友吧，我不能说这位是谁，您别自己跳出来。
我曾经帮一位老板做顾问，就是配置系统，听他的一些架构想法，给一些建议，介绍人帮他培训，实习，干活之类的。我曾经介绍这位朋友去培训，结果他被挖了过去。人各有志，我也不能说怎么样。不过这位老板曾经挖过我，我没有去。
最近他又在找工作了。据说是因为产品出来了，不需要那么大的研发团队，所以整个团队都在离职。
我对此一点都不奇怪。那位老板的定位，从一开始就能看的很明白，那是典型的业务驱动型公司。技术在里面的作用，就是完成业务。这不奇怪，大部分的公司都是业务驱动型，技术驱动型公司才是少数。但是，他的业务又不是具备快速扩展的哪种——至少扩展中的问题不是层出不穷的。那么当技术团队完成了工作，这位老板会接着做其他东西么？
以我的判断，不会。在第一个业务赚钱之前，他不会忙着把其他想法一并做出来。我不怀疑这位老板的人品，但是大部分正常的，有脑子的人在这种情况下都会做出正确的选择。而原有的团队则适当裁员，保留骨干，维持为主。
其实有很大一部分业务驱动型的公司，都有类似的麻烦。做产品的时候，生怕动作不够快，招人不怕多。到了业务出来后，那么一大堆业务人员怎么办？大部分公司都是适当裁员配合持续改进，少部分是上了新的产品。要养一支开发团队很难的——到不完全是钱的问题。问题是规模不够大，不一定有那么多事情给他们做阿。做着做着就没事情了，这下就变成了成本问题。
据说当年宋朝宰相赵普，曾经帮着宋朝打下半个天下。等到只剩北方游牧民族的时候，他便不再设计献策。由是，游牧民族终赵一朝，是为大敌，最终为宋朝送了终。
为何？兔死狗烹，鸟尽弓藏。因此大凡能主天下之人，要么韬光养晦，要么养敌自保，要么干脆自立为王。陶朱公自我放逐，韩信夜死未央，常遇春壮年暴毙，彭大将军死于批斗，大抵都是这么回事。赵匡胤若不是黄袍加身，早晚也要死在恭帝和符太后手里。
换到这个例子上来，一家公司，若是没有业务给业务部持续去做，业务部难道还能叫业务部么？
再说一个例子，某国政局 据说某国大都督被下了大狱。与他走的近的将军们议论纷纷：“听说太子新近要继位，会不会趁这个机会铲除了我们？”
有人献策说，与其坐以待毙，不若养敌自保。先想法和其他国家交恶，大战一触即发。无论是今上还是太子，难道冒着刀刃加身的风险铲除大将么？至于阴蓄死士图谋不轨之类的事情，真到了今上要人的时候，难道还会为了这点小事翻脸。顶多训斥一顿了事。
不久，某国街头上出现了一帮人，见到邻国人就打。
这人又献策说，如今军中多有怨言，不愿开战。若是真打急了邻国，一旦开战，对诸位不利。所以邻国人不能打，要打本国奸臣。
再不久，街上开始打买邻国人东西的人，说是奸臣。</description>
    </item>
    
    <item>
      <title>选择哪个linux发行</title>
      <link>//blog.shell909090.org/blog/archives/2242/</link>
      <pubDate>Thu, 27 Sep 2012 14:07:46 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2242/</guid>
      <description>选择哪个linux发行 很多人问我，哪个linux发行版更好。这不是个伪命题，而是个蠢命题。哪个发行版更好取决于你要做什么。我们首先把linux发行版分为四大类，deb家族，rpm家族，源码家族，其他。
假如你要稳定部署 所谓稳定部署，就是你没什么机会对系统升级打补丁。听上去很傻X，系统不打补丁？实际上这样的系统非常多。大型跨国公司的ERP，托管在企业封闭机房内的核心业务系统。这些系统的升级成本是非常惊人的，一次升级动辄数天策划，弄一套备用系统来放着，然后再顶着XX的损失停机几个小时。
这种级别的系统，建议你直接上RHEL。不要怕花钱，出问题的损失远远比RHEL的服务费高的多。
假如你要持续更新 对于持续更新的系统，你可以选择debian/ubuntu。这两个系统都具有很强的滚动更新能力。虽然RH系统可以通过yum进行升级，然而RH的追求稳定策略，使得仓库的升级频率要比deb系小的多。
deb的系统有非常简单的配置和升级方案，而且大多保持稳定。ubuntu的策略比debian激进很多，所以软件有更多的新特性——当然，也有更多的死机。
假如你要高度定制 高度定制的系统只有使用源码安装，任何发行版都不会帮你把每个开关组合全部编译一遍。
源码家族中最出名的两个是gentoo和lfs，不过除非你的蛋在燃烧，否则一般是不会用lfs作为自己的应用系统的。大多是使用gentoo来做支持。
假如你只是自己想用用 你是一个彻底的新手 我建议你从debian家族的knoppix开始，或者ubuntu livecd也不错。这两个都是livecd系列，就是可以直接从光盘启动系统并使用，不需要在硬盘上安装，也不需要虚拟机。相反，他们自带虚拟机，可以虚拟一个windows出来供你偶尔用一下。
你是一个有过一定经验的人 那你熟悉什么就用什么。
不过作为一般性使用，我推荐ubuntu。他们针对桌面用户做了很多定制，打造了一个非常不错的环境。在我所知的发行版中，ubuntu的桌面用户是最多的，针对新手的答疑也是最友善的。
当然，文档最好的还是gentoo。
你是一个专家 很感谢你看完这篇文章，你太无聊了。</description>
    </item>
    
    <item>
      <title>铁道部的扯淡排队系统</title>
      <link>//blog.shell909090.org/blog/archives/2241/</link>
      <pubDate>Wed, 19 Sep 2012 16:08:57 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2241/</guid>
      <description>缘起 这两天同事都在讨论12306的订票机制，据说要排队了。我不买火车票，所以只是大概听同事讲解了一下机制。如果不正确，希望大家告知我。我听到的机制大概是这样的。
首先，是每个人进去，正常购票。当碰到热门线路，在提交时进入不定时的排队。等排队结束，成功与否给与提示。铁道部称，这是为了能够减轻并发压力。
问题 如同老板说的那样，这个机制P都没解决。问题的关键在于系统的每秒负载能力，即每秒能够完成多少个transaction。只要来的人比能完成的transaction多。那只有几个结局：
刷爆网站，这是原来的结局。 堆在队列上，有人买不到票。 如果铁道部宣称的目的是真的的话，那他们一定用错了机制。
原因 铁道部这个系统的核心想法，是将并发的业务改为串行业务。即，前置一个订单系统，减轻核心的交易数据库的压力。实话说，这一定是没在互联网上混过的领导想出来的馊主意。
在通常业务系统里面，如果我们说一个核心交易组件有压力，那么最常用的办法就是排队。然而在互联网上却不能这么干，尤其是很多“非买不可”的系统里面，更不能让用户玩“排队”。因为对于互联网上的人，“分身”是再容易不过的事情了。使用多个浏览器，甚至开多虚拟机，普通人可以轻易的做到4-5个不同的会话。就算普通人做不到，看网络教程学是可以学出来的。每个会话订不同班次的火车。多开会话的结果，就是让队列的长度比原本会长上很多。这是一种级联效应。由于购票组件的处理速度有限，所以压力向前堆积，最终前面的排队系统也会被汹涌的客户（比原来大N倍）玩死。
机制 对此其实我很难想明白，为什么铁道部的核心交易系统有这么差的效率。有网友曾经说，系统要检查很多东西，要上锁——这都是假的。作为铁道部的核心交易系统，和铁道部内部的资讯检查有什么关系？他唯一要做的事情，就是检查是否真的有票，座位多少，有的话锁定一张（这个过程要排他）。
也许你会觉得，既然要排他，那么就需要用事务型数据库。目前数据库平均性能都是1k/s（我们就按照我们在普通台式机上的数据计算好了），而全国每秒成交的数量远大于这个值。这里出的问题？
这是不可能的。傻想也知道，每趟车和另一趟车没有耦合关系。按照车次做哈希，分布在多台服务器上交易就行了。这是典型的可并行系统，效率可以直接用单台机器性能乘以服务器数。在交换机允许的范围内，根本不会有交易性能压力。我们仔细审查铁路系统的结构，会发现，这东西天生就是分布交易的好材料。
部署一组服务器，每一台都部署同一套东西，接口按照REST开放。 将车次哈希后映射到具体的服务器上，所有的余票查询/订购，都向这台机器做请求。而核心服务器只要返回静态页面和车次信息就好。 单个服务器上的每秒transaction要求就不可能太高。 阴谋论 也许有些人会想，这个系统莫非是铁道部给内部留票做的？这又错了。要做内部留票，最简单的方法就是开打内部提前售票限制。只要这个限制一开，他们想留多少留多少，你一点脾气都没有。
结论 我只能归因于国有垄断企业在解决这类问题上的扯淡了，和私有企业没法比阿。建议对铁道部实行拆分。</description>
    </item>
    
    <item>
      <title>反日和钓鱼岛</title>
      <link>//blog.shell909090.org/blog/archives/2239/</link>
      <pubDate>Sat, 15 Sep 2012 00:27:30 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2239/</guid>
      <description>最近反日运动挺火，我随便说两句把。blog被墙有被墙的好处，上来看的起码都不会太脑残，我也懒得打无脑口水仗。
砸日货 这尼玛就是2B行为。
首先定性上，这属于扰乱社会治安。中国人，在中国的领土上砸中国人的东西，我怎么看都是扰乱中国的社会治安，和反日没有任何关系。
当然，前提是怎么砸。如果砸的是日本人手里的日货还有意义（哪怕是国货也行），好不好另说，起码达到反日的目的。砸中国人手里的日货除了消灭中国人的财富没有任何作用——如果被砸的这哥们还是买日货，反而增加日本GDP。你见过打人打到后来给对方加血的么？砸日货的这帮大概就是这行为。所以说2B都侮辱了普通青年和文艺青年。
实际上，我觉得真的脑残去砸日货的占一半，另一半就是趁火打劫的。例如推上看的，吃日式料理，快结束了。反日旗子一举，开始砸。完了跑人不买单。还有买国产洗发水的。反正这帮人打劫的味道比反日重多了。
抵制日货 洗洗睡吧。日货要那么好抵制，中国制造早就卖不出去了。
我就说个本领域的问题。大家都知道JavaEye吧（我不是要黑它哦）。JavaEye是使用Ruby开发的，而Ruby是正宗的日本产。
怎么办？集体去攻打IDC拔线么？
其他领域我不熟悉，但是世界上有个东西叫做IO表。只要你了解IO表的基本理念，就会立刻对抵制日货产生不一样的看法。IO表的核心理念在于表明，为某个领域产生一定单位的产值，需要其他领域投入多少产值。这些叫做直接消耗系数。而通过计算，可以得到另一個矩陣，叫做完全消耗矩阵。衡量的是为某个领域产生一定单位的产值，需要其他领域的多少最终投入。例如，为了炼钢，我们需要投入原料，水，电，等等。這個叫做直接消耗。而用水，开矿，都是要用电的。因此一个单位的钢，所需要使用的电比直接消耗的来的更高。两者具体的换算公式是B=(I-A)^-1-I。
如果使用同样理念，将某个领域改为某个国家。你可以领悟到这么一个事实——除非你对外完全封闭，否则你的进口一定是作用于全世界的。实际的例子就是，中国制造的车，可能没有日本的元件。然而里面却可能使用了美国的化油器。而美国的化油器制造流水线可能是日本产的，或者包含日本部件。如此层层递推，我们也可以得到类似的完全消耗矩阵。在这个矩阵中，真的是日货对日本的GDP贡献比较高么？
我看不见得。
虽然我没法拿到完整的数据进行计算，不过按照我的直觉（我相信你也能想的通），凡是日本技术和市场占优的领域，无论你购买哪国产品（包括本国）都会对日本贡献极大GDP。因此要抵制日货，根本上应当抵制所有日本占优的领域。例如电子产品，汽车，精密制造。可是这样以来，你出门不能坐车，回家不能看电视，严格来说，看我的文章也是违规的呐。
钓鱼岛 首先我先跳开钓鱼岛的法理之类的地雷，就说一个简单的问题。钓鱼岛争端对我有什么好处？
增加了中国的领土？房价能下去么？再说，买的房还不算是我的，70年后天知道什么情况。附近有丰富的石油？开什么玩笑，你什么时候见到中国的油价和产油有关系的。国际油价涨，中国油价涨。国际油价跌，中国油价还是涨。钓鱼岛搞到手上，油价会跌么？也许渔业有点好处，我对这个不是很了解，也不很关心。
在我所知的领域内，钓鱼岛对我一点好处都没有。你当然不能指望我支持保钓。因此，我不会支持保钓行动。所谓支持，就是指打仗，或者其他激进行为。但是我期望能够搞到钓鱼岛——如果成本比较低的话，为什么不呢？如果中国政府通过运作，可以弄到钓鱼岛，我难道还会傻傻的说，咱把这肥肉吐出去吧。
说白了，这就是典型的商人心态。只要成本OK，一切有的谈拉。
阴谋论 钓鱼岛问题上，一直有阴谋论出台。中日双方都希望借助钓鱼岛转移国内视线，才会搞这么大声势。我觉得不无道理。早在香港船出海保钓的时候，我就觉得奇怪了。船长说通常都会被海监处的船拦回来的，这次居然出去了。保钓人士上去以后，报纸也大肆宣传。这都透露出上面的意思。
到底是什么事情，需要转移视线呢？我数了数最近的事件，都没有严重到需要玩这手的。木大虽然是个坎，但是万万没有为了过一个坎而造一个更大的坎的。如果这个猜测是真的，说明事情大到了相当的程度。也许直到很久以后，我们回想某个事件的时候，才会猜出今天保钓的意图。</description>
    </item>
    
    <item>
      <title>自由软件的基础讲解</title>
      <link>//blog.shell909090.org/blog/archives/2237/</link>
      <pubDate>Mon, 10 Sep 2012 11:58:22 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2237/</guid>
      <description>授权 本文档内容基于cc-by-sa3.0下发布。
您可以自由复制、发行、展览、表演、放映、广播或通过信息网络传播本作品，创作演绎作品，对本作品进行商业性使用。惟须遵守下列条件。
署名 — 您必须按照作者或者许可人指定的方式对作品进行署名。 相同方式共享 — 如果您改变、转换本作品或者以本作品为基础进行创作，您只能采用与本协议相同的许可协议发布基于本作品的演绎作品。 具体信息请查看署名-相同方式共享3.0。
从一个软件说起 给大家介绍一个软件，comix。comix是一个由python和GTK+写成的漫画浏览软件。
支持zip, rar， tar等格式的压缩包直接浏览 跨平台 有自己的用户群和wiki页面 但是某天，我在Windows下使用comix的时候发现，在Windows下这货不支持压缩包直接浏览。而且手里有大量包是7z格式，木有办法使用。
检查源码，发现是/的问题。蛋疼的跨系统。
根据网络上的提示，我发现有两个解决问题的方法。
使用封闭免费软件，例如honeyview，然后转跳到问题3 自己修掉这个bug，反正只有一处，然后转跳到问题4 7z格式木有办法，只能苦等最新版本出来，完了。
需要7z支持，自己又做了一个7z支持的补丁，从此所有漫画都可以直接浏览
我希望向官网提供我的补丁，发现软件已经失去维护
在寻找的时候，我发现有爱好者维护了一个新的分支，mcomix。解决了很多历史bug，同时支持了7z
原来在问题2上，有一个隐藏选项，直接用mcomix，完了。
这说明，在你想出一个需求的时候，最好先问问资深用户，是不是已经被解决了。很多时候，不要重复造轮子。
修改源码？听起来好像很麻烦 如果不是职业程序员，还是别想了。调试软件和修改源码需要专业知识（当然，不需要是计算机系出身，但是需要专门的学习）。但是掌握技巧后，修改一个bug并不是很困难。然而，拥有修改源码的能力，表示这个软件和那些“你无能为力”的软件有所不同。
神码叫做自由软件 无论如何，你可以自由使用。这隐含了软件是免费的（或者满足一定条件下免费）。 源码开放。用户有研究如何使用的自由。 重新发布源码。用户可以让别人使用，或者包含在其他产品中使用。 改善软件。用户有改善软件的自由。 所以，自由软件的前提是，软件必须是开源软件。
两个软件的不同遭遇 Foxpro VS Sql Server
老计算机用户都应当记得foxbase和foxpro这两个软件。当年风光一时的数据库软件，在被微软收购后，就黯淡无光了。尽管退出市场的主要原因是因为单机开发模式并不适应网络大规模开发，但是这只需要设立一个网络层就可以解决。微软在收购Sql Server后，为了保证其市场地位，收购并雪藏了foxpro。目前该软件已经停止开发，最新版本的支持也即将过期。
Mysql VS Oracle
同样可怕的事情发生在mysql身上，做web开发的应该无人不知其大名。在Oracle收购后，Mysql也面临和foxpro同样的遭遇，更巧的是，他们同样是数据库类软件。然而Oracle无法雪藏Mysql。因为一旦Oracle雪藏Mysql，其他人可以继续Mysql的某个开源分支继续开发一个完全不同的东西。Mysql的创始人之一，Michael Widenius支持这个做法。
因此，直到目前为止，Oracle都没有停止对Mysql的支持。
当然，由于未来的风险，一些人在选择新数据库的时候转向了PostgreSQL，或者其他选择。然而已有的系统不会受到影响，已经学了Mysql的用户也不会受到影响。
如果当年Mysql是闭源，那么。
很多基于Mysql的改造是不可能的，例如mysql proxy。 今天Mysql管理员大概就得赶快再学些别的东西。 自由软件有版权么？ 有，版权是一个人完成一个产品后自然具备的权力。开放源码并不剥夺这个权力。一个人完成了一本小说，并让别人观看了，难道他就失去版权了么？我们一般在谈论版权的时候，往往和其他权力混淆起来。实际上，版权这个东西，其实指的是著作权。基本权力包括两种，人格著作权和财产著作权。衍生权力就更多了。
人格著作权 公开发表 署名 扭曲 &amp;hellip; 财产著作权 复制 公开口述 公开播送 改编 &amp;hellip; 自由软件主要放弃的，是对衍生权力的追究。即，作者授权你，在一定的条件下，可以进行合法的复制/改编，而不追究你的责任。但这不表示作者放弃版权。
授权协议 既然作者授权你如何如何，那么这就算是一份授权协议。我们下面列一下常见的授权协议：</description>
    </item>
    
    <item>
      <title>计算机的相关法律管理</title>
      <link>//blog.shell909090.org/blog/archives/2236/</link>
      <pubDate>Mon, 03 Sep 2012 14:28:49 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2236/</guid>
      <description>昨天翻了一下vpn的相关法律，结果是——没有。
唯一一部接近的，还是《境外组织和个人在华使用密码产品管理办法》。但是这实际上有两个问题。
首先，办法对含密码产品的限制太过严格，而现在的密码学衍生领域又铺天盖地。这导致实际上有办法没管法。例如我们公司的产品，为了升级，就在系统里面放置了升级系统。为了防止升级系统升入非我们的代码破坏系统，又要对升级系统做签名验证。这实际上就一脚跨到了密码产品的范畴里面去。不过幸好，我们的产品本身就是涉密产品，有公安部的认证。但是其他需要在产品中包含了安全系统的产品怎么办？别的不说，你想想有多少软件链接了openssl？哪怕是python这种东西，都是链接着openssl的。从某种意义上说，使用python也违法。
其次，办法只限制使用密码产品，可一字没提到提供密码服务和帐号。大家知道，vpn实际上是帐号和服务，至于使用这些帐号和服务的具体“产品”，那是windows，ssh客户端这种东西。而windows是经过国家认证的。退一步说，即使没有，也是使用者和软件发行者需要对此事负责，而管不到账户提供者头上。
另一个有关的，是《互联网信息服务管理办法》。可办法开宗明义第一句，是在中国境内。要提供vpn服务，你的服务器必须是境外的，境内没意义。但是相应的，你不能在中国境内进行收费，否则就算违法。然而，如果免费帐号漫天发，这条法律依据也是靠不住的。
OK，我们常说中国立法远远落后于时代，我们又找到了一个例子。实际上，你在看中国法律的时候，往往大疑不解，为什么会有这种那种狗屁规定？那是因为那些法律的制定年代往往都是上个世纪。例如地图法规定，私自使用精度在一定范围以下（我记得是100米）的地图是违法的。我找不到这条的出处，不过测绘法是上个世纪颁布的。大概颁布测绘法的人不会想到，在短短15年后，就会有大量个人手持的高精度（&amp;lt;10米）定位工具出现。
至于互联网，托这几年比较敏感的福，互联网立法始终是重中之重。然而，大部分立法还是针对的web而言的。其中有条规定，服务提供商必须进行备案，然后在网站上公布其备案号，目的是方便公安机关管理。问题是，目前很多网站是没有web界面的，直接通过手机使用。有些网络服务连客户端界面都没有，例如vpn，你说怎么提供？服务商倒是不会介意弄个网站，把备案号贴出来。问题是公安机关怎么知道提供服务的供应商网站是哪个？
再说法理基础吧，不仅是中国，在世界上，对于网络和程序这块的法理都是一塌糊涂。我们首先说一个简单问题，什么叫做引用，什么叫做使用？
之所以在GPL之外还有个LGPL，就是因为，如果你在编译时直接使用了某个GPL库，就会被传染这个库的授权。为什么？这主要是针对C语言而言的。因为C在编译时，需要引用对方的.h文件。而对方的.h文件是基于GPL的，这就构成了引用。而针对python程序，你可以很容易的反射和动态加载，这又是否构成引用呢？如果编译时，使用自己反推对方头文件构成的.h文件，是否需要被传染授权呢？又例如，在kernel中的license中，明确说明了内核调用不属于引用。然而如果在程序内以变量形态包含了firmware，又是否算是引用呢？别的我不清楚，debian是严禁这类软件进入仓库的。
当然，这些问题对于欧美法系不是太大问题，因为一切都是来自判例，判例构成了法律。对于新出现的问题，只要诉讼，就等于在进行立法。然而对大陆法系而言，这就是个噩梦了。</description>
    </item>
    
    <item>
      <title>家庭电脑的虚拟化</title>
      <link>//blog.shell909090.org/blog/archives/2234/</link>
      <pubDate>Fri, 31 Aug 2012 16:39:38 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2234/</guid>
      <description>家庭电脑，谁都会用。会来看我blog的人更应当是家里有一台，我知道有些还有不止一台的——别人家我不知道，我家里就算老妈和丈母娘一起来打游戏，我还能保证我和老婆人手一台的水平。
一堆机器，有好处也有坏处。好处是，基本坏掉哪台都不怕，备用的比较多，随便来一台就能跑。坏处是，这些机器的配置不同，习惯不同，性能也不同。我们家里更特殊的情况是——连系统还不一样。我自己用的是linux，老婆是win7，老妈是XP。
为了解决文件共享的问题，我采用了NAS，而且是自己组装的小型服务器。对于小型家庭网络，NAS是个很不错的主意。然而电脑不仅仅有文件而已，还有配置呢。老婆的win7是直接连接到电视上的，所以我经常需要和她抢电脑。然而chromium的绑定gmail只能有一个——用我的还是她的就是一个问题，这是两个人用一台电脑的配置共享问题。同时，我的小上网本则是另一个极端。我希望上网本上和主机能共享同一个配置，虽然chromium的同步能力很强，但是很多东西不是chromium能同步的掉的。包括emacs配置，bookmark，打开文件。ssh密钥，系统环境。这是另一个问题，一个人用两台电脑的共享配置。当然，说到这里同时还有一个问题，我不希望用自己的小上网本，毕竟atom的速度和主机没法比，io速度也慢，内存也少。
所以，我最终的解决方案就是——虚拟化。在win7中装一台虚拟机，里面跑一个linux，再通过上网本远程控制这台linux，这样至少解决了我自己的问题。在小上网本上，可以高速的使用浏览器，和主机同一个配置。在主机上，和老婆分开配置。在老婆使用电脑的时候，和她分离的，不受干扰的使用电脑。
实际上，要解决这个问题，最好的方案是基于linux的multiseat系统。由于是multiseat，所以我和老婆同时使用。由于linux是用户分离的系统，所以可以互不干扰。唯一的遗憾是，同一个用户不能同时登录两个X，Xauthority文件会互相覆盖，因此在用户登录的情况下不能使用vnc。
当然，为什么不能用multiseat，你们懂。。。不懂的可以看我上一篇文章。</description>
    </item>
    
    <item>
      <title>西安游记（三）</title>
      <link>//blog.shell909090.org/blog/archives/2232/</link>
      <pubDate>Mon, 27 Aug 2012 10:13:03 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2232/</guid>
      <description>今天一大早，我们就退房去了大雁塔。猫咪的小腿开始酸痛，走路八字像一只企鹅。好容易来了次西安，却没爬过大雁塔。早知如此，我应该昨天让她爬大雁塔，今天去历史博物馆的。我们逛了一圈大慈恩寺，看了些东西。反正我和她都不是佛教徒，也没什么好多说的。看看时间差不多快12点了，就出门去了北广场的喷水池。天气热，也没什么遮挡的。本来我想像前两年一样，直接跑到喷水池里面去的。结果发现不让进入喷水池了，还有警察管着。大概是因为不怎么雅观吧。不过这么一来，就不好玩了。
说到这次去大雁塔，就要提提天龙宝严素食馆。这家馆子在慈恩西路店上，是我吃过的所有素食馆中最好吃的，没有之一。他们的酥肉烩菌王鲜美无比，凡去一定要点。红烧肉和炸肠就像真的红烧肉和炸肠一样。我觉得是同一种素材做的肥肉和瘦肉，但是左吃右吃都吃不出是什么做的。瘦肉像是豆腐，肥肉像是肉皮冻。但是豆腐怎么做出肉味就不知道了。至于肉皮冻——这种东西断断没有出现在素斋中的可能。大家要是有机会去西安可以尝尝，想出是什么告诉我。
晚上是一次艰难的等飞机。周六上海台风，其实晚上已经没有风了。但是也许是因为早上不让起飞的缘故，我们的飞机怎么等也等不到。无奈，就去汉堡王里面填了填肚子，然后用他们的网络看爱情公寓3。最后我们在网络上查看航班消息，居然说航班已经起飞，还有起飞时间，说的有鼻子有眼的。吓得我们收拾东西就赶快跑。跑过去一看——还是延误。
我们三点到的机场，从五点起飞等到七点半，机场派人送了盒饭。我们又有点饿了，所以又吃了一份(提示，如果你碰到这种情况，也许不想吃饭，可以拿饮料和水果，但是拿了饮料和水果要盖章，就没法再吃饭了)。飞机八点到的机场，我们大约是八点四十起飞的，刚好在四个小时以内，赔偿什么就别提了。结果和我们预料的不同，飞机上居然还配了一份餐点。不过也没什么胃口了。草草吃了点东西，睡一会。蜜月结束，回家咯。</description>
    </item>
    
    <item>
      <title>西安游记（二）</title>
      <link>//blog.shell909090.org/blog/archives/2231/</link>
      <pubDate>Fri, 24 Aug 2012 09:49:08 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2231/</guid>
      <description>今天的行程开始于早上五点，我基本没睡多少时间。匆匆刷牙之后，我们就直接往金锁关走了。这个也为后面埋下了祸根。
五云峰到金锁关很快，没多少路。到了金锁关，猫咪说顶不住了，撤吧。我盘算一下，再往上倒是暂时没问题，问题是上去后没体力下来。所以还是——撤吧。下到金锁关，我觉得不对了，头晕的厉害。我问猫咪，带的巧克力呢？喵居然和我装可怜，她全给吃了。我说走两步到五云峰去买点东西吃吧。她觉得懒，还是接着往下走。结果，在飞鱼岭上，我饿晕了过去。
不开玩笑，真的是饿晕。肚子里面不觉得饿，但是整个人发冷，四肢和嘴唇发麻，眼前发黑。感觉和高中时候窦性心动过速导致供血不足一样。我大概知道为什么，但是上不着村下不着店的情况下，还是没什么办法。只能躺在路边，让猫咪下去帮我买点吃的。结果她被不知道哪个管理员坑了，向下爬了10多分钟没找到店家，来回走了有40分钟。趁这个时间，我躺了会，也稍稍恢复了点。吃过猫咪带上来的东西，再走就没问题了。
所以说，千万千万记得带巧克力。以前健身教练就警告过，不吃晚饭运动会导致饿晕的。我虽然知道问题，但是没料到这么严重，更没料到会在没任何饥饿感的时候很快出现问题。平时即使不吃早饭，头天晚饭吃的饱的话，就是中午饿的快一点而已。爬山的时候体力消耗大，完全不是那么回事。如果随身携带巧克力的话，只要吃上一点很快就能解决问题。因此，我强烈建议随身准备巧克力。
从华山下来很顺利，我们和人一起打车到华山北站。司机不知道欺负我们外地人还是怎么的，下来的车上说价格只有20，结果要了我们30。同行的是一个美女，要回郑州。这姐们一个人，自己走了上去(不坐缆车)，爬了华山五峰，再走了下来，体力好的难以置信。
到站之后，猫咪排队，我去用自动购票系统买了回程票。其实当时有一辆车已经要到了，但是正是因为快到了，因此车票停止销售，我们买了下一班的，要等两个小时。猫咪问了售票员，发现可以先剪票上车，然后去补票。我们马上跑到站台上去等车。好容易上了站台，车将将来。这也是沾了打车的光，要是坐公交，可就不知道要等到什么时候了。高铁回西安比大巴舒服太多了，我昨天就说过，凡能坐高铁的，莫坐大巴。
中午好容易从山上下来，住店洗澡过后，就是吃饭。我和喵都饿了，就近找了一家餐厅，叫陕北人家。他们的招牌是碗砣，可惜里面放肝，猫咪不敢吃。我们点了一个洋芋擦擦，一个清汤羊肉，味道都很不错。醪糟蛋花猫咪很喜欢，但是核桃什么的一道甜品就比较废物了，里面东西比较干，吃不大下去。
下午去陕西历史博物馆。其实从路程安排上来说，这个应该排在明天，因为陕西历史博物馆就在大雁塔的边上。大部分东西都没什么意思，我看到的东西里面，只有西安古今对照略有点意思。类似这种展览，不是专家什么的，即使给个实物玩也玩不出什么名堂来的。最多只能看看热闹，不错不错，古人做的玩意不比我们差哈。我印象最深的是一只玻璃碗，据说是当时皇帝用的传世之物。做的歪七扭八，拿到今天来放大街上1块一只估计都没人要。难怪现在人成群结队的往古代穿越，单单带几个玻璃杯子就成暴发户了。
另外就是馆里面的两件国宝。博物馆的门票是免费发放的，但是队伍排成长龙，没半个小时一个小时是万难搞到的。不过没关系，只要肯花钱，20一张票，三号窗口有卖的，队伍不长，而且能进一个特殊展厅。里面就据说有两件国宝。问题是，我们不认识。猫咪对照资料，好容易认出了一个壶。我趴窗户上看半天，左看右看，完全看不出国宝在哪里。这玩意就算放我面前也会被我随便扔掉的。咱还不是玩古玩的人阿。
我们回到市内，做了个马杀鸡后，在樊记肉夹馍吃的晚饭。肉夹馍要等好长时间，不过好吃是真好吃。边上几个没耐性的问为什么不预先烤好了。店员的解释倒是有趣。预先烤好了还能让你们排队等阿。你也可以理解为质量保证的自夸之语，也可以理解为饥饿营销，看怎么解释了。油泼揪面味道一般，不过用的是肉夹馍的腊汁肉，也算是一种产业拓展吧。倒是他们的黄桂稠酒不错，只有两度。我和猫咪都很喜欢喝。我们带了点回家当礼物。
晚上闲来无事，就去高家大院逛逛。大院的风格很近代，看说明是明清时的建筑。大致是三进院落，有厢房和跨院，而且居然有学堂，算是一个不错的世家院子。当然，里面的东西也是基本看不懂的。唯一看懂的是一张当时女子的照片。大家看历史书都有印象，现代人想像中帅气英俊的男子，在黑白照片中一出厂，就梦想破灭了。不信的话，可以看看当年慈禧和诸位格格的照片，那还是号称全国选美冠军的一批人呢。这张照片大概是我看过所有照片中最漂亮的一张。女子穿一件老式旗袍，目光不知在想些什么。面容秀丽，一个人就占据了一整张照片，在那个年代非常少见。是家主的妻子还是女儿，照片下没有说明。
高家大院里面，有人演皮影戏。我们进去的时候，人还不足。几个演员闲来无事，在那里唱秦腔。我听不大懂，只是觉得很好听。唱完，有位阿姨和我们道歉，说秦腔就是这样样子，泼辣有余，温婉不足，像是泼妇在骂街。再唱下去，怕是我们都跑了。正式开演，剧目名称叫担货郎。大概是讲一个小伙子，从小订的娃娃亲。他没见过自己媳妇，不知道是不是好看，也不知道人品怎么样。就装成一个担货郎去那个村子卖东西，趁机调戏人家姑娘。姑娘直接把他骂了出去，他也就认定这不是一个轻薄的姑娘。</description>
    </item>
    
    <item>
      <title>西安游记（一）</title>
      <link>//blog.shell909090.org/blog/archives/2226/</link>
      <pubDate>Wed, 22 Aug 2012 15:21:24 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2226/</guid>
      <description>西安很给力，从我到的第一天就给力。关注我微博的人都应该能看到，我微博上的一张图片——机场广告牌上大大的“程序执行错误”。
好吧，咱就不吐槽机场了，说说西安的出租吧。在西安的出租广告屏幕上，我看到了一套完整的Windows XP定制版——好像还是英文的。。。
一时无语。 西安的第一站，是去回民街。说是回民街，实际上是围绕大清真寺周围的所有街道。这里算的上是核心商业街，非常热闹，吃的很多。我们吃了一个老孙家羊肉泡馍，不过话说回来，几条街上起码有三家老孙家，我不知道是连锁店还是仿冒品。后面我们去的贾三灌汤包子也看到了两家。不过贾三灌汤包子还不错，和上海的灌汤包一点都不一样，反而比较像小笼。但是个头比小笼大一圈，而且因为是穆斯林开的，是猪肉和羊肉味的。有兴趣的可以去尝尝，据说挺有名。
出了回民街，我们没去鼓楼，直奔钟楼而去。钟楼正好在城市的中心位置，上钟楼可以看到东南西北四座城楼。西安的城墙在我看过的所有城市中保持最玩好，不过这里得加一句——这是皇城城墙，也就是所谓的内城墙。我们后来在博物馆看了长安的对照图，其城市规模远远不止于此，和现在的西安城市规模相差彷佛，在那个年代不愧为世界性大都市。每个时代城市的规模都要受限于当时的交通，即，城市的实际最大规模不会超过半天完成城市直径距离折返。你可以说北京郊区多大多大，但是那不是北京，只能算北京辖下。如果半天无法完成城市往返，那么在城市内穿梭办事就会发生市内住店的情况。以半天4小时计算，人的步行速度大约是5KM/h，即在步行时代，城市规模最大不会超过10KM。西安基本逼近了那个年代的最大规模。而现代可以以车代步后，行进速度可以提高到30KM/h，城市最大规模也可以提升到60KM。上海算的上是国际级大城市了，其城市边界也只有大约15-20KM而已。当然，上海有别的问题——上海的城市交通运载能力不足，而不是速度不足。
西安和北京不同，北京的城墙大家都很熟悉，呈一个凸字型。其内部是内城，外部则是外城。至于皇城，紫禁城的城墙是划分地域用的，真正抵挡当时的兵力攻击是不可能的。内城基本是皇亲国戚和大臣的住所，外城则是市场，普通民众住所等。本来外城是要包裹内城的，可惜修到一半，没钱了。于是皇帝下旨，先把修到一半的封起来，回头再修。这一封，直到北京城墙被拆光为止都没有修完。相对来说，西安的皇城墙和北京的内城墙是一回事，不过大臣和皇亲国戚都住在外城。相对来说，防御的考虑比北京更少一点。一方面，内城北侧紧贴城外，没有外城城墙的二次阻挡。相对北京外城包内城的设计而言，安全性就要差一些——哪怕门口都是皇家驻军也一样。当然，如果加上考虑北京外城从未完成，大家就半斤八两了。另一方面，战时如果需要退守内城，大臣和皇亲内撤的时候，更容易引发混乱。后来经过历代变迁，西安逐步失去了“关中自古帝王州”的地位。唐是最后一个定都西安的帝国，宋定都开封和杭州，元定都北京，明定都南京和北京，清定都北京。之所以会发生这种变化，个人猜测是因为自唐以来，只有明朝成功的抵御了游牧民族的进攻。元和清根本是游牧民族政权，宋朝两代，始终处于抵御——失败——再抵御的过程中。由于没有了皇城和各级政府部门，因此城市的主要机能全部内迁，目前的钟楼，就是坐落于内城的核心。
出钟楼，我们到客运东站坐车到华阴。个人诚挚的建议，只要可行，尽量坐高铁去华阴。长途车没便宜多少，但是却非常耗时。我们坐到华阴花了两个多小时，高铁只用了35分钟。所谓山南水北称阳，山北水南称阴，华阴在华山的北边。目前华山唯一一条在运转的缆车，就是从华阴的游客中心到华山北峰的。
华山天下险，其实这说法不大对。仔细看地图就可以看到，华山坐落在西安的东方，是一组山脉。山脉基本呈东西走向（这也是大部分中国山脉的走向），山脉北方是一片平原，华山就是平地起高山，地势和北京差不多（北京北方就是燕山山脉）。华山的大部分山脉都有良好的植被覆盖，只有少数山脉才因为地势太过陡峭，导致植被覆盖不足。这片山脉就在华阴往南10公里的范围内。而其中最险的地方，则是华山五峰的一座山上。从平地进去，直到华山脚下的路，还是比较太平的。
我们是下午到的华山，从游客中心进去，居然基本没什么人。从后门坐车，一辆车只载了两个人。上山坐索道，才知道为什么——下山的人人山人海。按照喵的说法，很多集体游客都是上午上华山，下午下去。因此这两个时段都堵的动弹不得。如果是个人去，我建议反其道而行之，下午两点进山，后天早上10点出山，刚好一点不堵。门口我们买了一件防晒衣和两副手套，很贵。不过别嫌贵，到了山上更贵。
如果你想爬华山，我建议你好好整理自己的装备。山上可以住宿，但是没地方洗澡，因此换洗衣服是不必要的。山上每多带一件随身行李，就要付出很大的力气。因此没用的东西在西安市找个地方放着就好。食品准备的原则是最好比估计的量差一点，万一不够山上补货。全靠背，负担太重，万一没吃光自己心痛。全靠买，太贵。差一点对负重的负担小，花的钱也比较少。反倒是因为没地方充电，手机必须充足电，相机也必须充满电，最好再带一些备用电池。如果多人进山，干脆设定呼叫转移，只保留一部电话开机。反正爬华山的时候基本也用不到手机。上山的时候，每人带一个300ml上下的小瓶子，要结实的。灌满饮用水，再带一支1.2L的大瓶矿泉。山上的水价，是康师傅小瓶矿泉9元。这大小两瓶也许不够两天用，但是大概能省下你40多的无用开销。食品方面，一顿饭准备一包面，要桶装的，不要指望山上能洗碗。如果是两天，大概就是五桶。另外，随身准备一些巧克力和火腿肠，再带一两颗苹果，我明天说为什么。手套和防晒霜是必需品，千万记得带。
华山缆车很不错，挺陡峭的。从缆车上能看到下山一路下去的路。这么长而陡的路，我自己可是没本事爬上去。即使有两天时间，也不可能做到上下的。城市里的普通白领就别想了，还是乖乖坐缆车吧。至于带了一只喵——我早就对登顶不抱希望了。
华山顶上之所以号称天下奇险，是因为山顶的路修在窄窄的一条山脊上。左右都是万丈深渊，一不留心就会摔死的样子。如果忽略掉左右的万丈深渊，大概也就是公园里面“勇敢者的道路”的水准。毕竟是旅游项目，不可能真的像登山那么夸张。如果十个里面有九个上不去，那也不叫旅游了。不过这样的道路，连续走一两天还是很辛苦的。爬华山，最累的地方在于，山上小路最多只容许两人并肩。因此往往前面一停下来休息，你就要在不利位置等。人多的时候，走走停停，很是累人。我们这次没有这个问题，但是可以放足奔爬也有另一个问题——力量跟不上。我领悟到的要诀是——手脚并用。华山和别的山不一样，很陡峭。如果你只用脚力去爬，在几个小时后，往往是体力还有富裕，但是脚却酸痛的一步都走不动了。更不提还要睡一觉。如果直接走，一气走下来也还罢了。睡一觉，过24小时，原来没事，脚也要开始酸了。所以在登山的时候，只要能手扶，一定要手足并用。
华山上的路，如果忽略枝节，大概呈现一个放大镜的形状。下面是一根直线，上面是一个环。从下面上来到金锁关，可以一圈绕过东中南西四个峰。据走过的同学说，一圈下来大概是四个小时不到。如果还要走支线的话，就会更久。缆车上来，刚好上到放大镜手柄的中下部。从缆车上来后，可以直去北峰。路途很近，我们就懒得爬了。我们下午三点开始上山，晚上六点住在了五云峰饭店。再往上，就是金锁关。
五云峰饭店是管理处造的，山上价格是夸张的贵。双人房310，听上去也不如何——一张床。如果你能忍的话，我建议你早早的订下20人间。淡季的价格是85一位，还是住满的。当然，20人间是住不舒服的，如果两天时间，有一天可能就要挨一刀。饭店一顿饭我们吃了100多，你要是有空，还是自己带水泡面吧。
我在饭店旁边刷牙的时候，还看到了一窝喵。黄色的，很可爱。饭店边上有条小路，两只喵跳了下去，一只不敢，在那里伸着爪子，就是不敢下去。</description>
    </item>
    
    <item>
      <title>卖vpn咯</title>
      <link>//blog.shell909090.org/blog/archives/2223/</link>
      <pubDate>Mon, 13 Aug 2012 02:46:03 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2223/</guid>
      <description>提供pptp, l2tp, openvpn, ssh,
socks5五种协议支持。如果需要的人比较多，其他协议也可以逐步实验，例如iodine。其中pptp,l2tp和socks5依赖于客户端和网络环境，因此不能保证每个点每次都连接正常，请自行测试，有问题联系我，看看是否是已知问题。
美国机房（应该是西海岸，不过我不确定），不限速，不限流量。原则上一个vps大概放10个vpn帐号，保持成本就行，不会太慢。但是不得使用p2p，也请不要超过12小时连续满速使用vpn。如果发现连续满速使用造成其他用户投诉，暂封帐号，您来找我。只要不是病毒造成的，您继续用。如果发现使用p2p，头次警告，第二次封号不退款。（因为被版权部门发现使用p2p会造成vps被封，所以，抱歉）
一个帐号10元一月，100一年，试用期一周。你可以先联系我开账户，然后试用一周，一周内你可以实验账户和各种环境的匹配性。一周后付款（这一周也是计入费用的），支持支付宝，银行汇款，面付（限上海）。
如果碰到问题，邮件联系我。
开通账户：
你需要给我你的用户名和密码，以及需要开通的服务。如果开通ssh，最好由你来生成密钥，并给我key。如果你懒得给，那么就由我来随机生成了。
完成后，我会邮件给你你的用户名，密码（如果可能的话，key），服务器设定。
一般来说，android手机推荐pptp/l2tp，ios系统只能用l2tp。windows和linux推荐openvpn，在外使用时推荐ssh。
注意，无论用哪种vpn方式，必须将你的dns修改为境外dns，例如8.8.8.8。ssh的话需要客户端支持从socks中进行地址解析。
pptp设定：
http://www.maizidi.com/howto-configure-windows-xp-win7-pptp-l2tp-client/
pptp和l2tp协议需要你的路由器支持。普通的tplink设定中就有是否开启pptp协议通过的选项，请务必打开这个选项，否则无法工作。
如果你的网络接入供应商封锁pptp，那么也是无法正常使用的。你可以再试试l2tp。如果也不行，那么请换别的协议。
ssh：
ssh一般用于pptp和l2tp都无法穿越的地方，例如机场或者酒店的网络。具体设定可以看这里：
http://hi.baidu.com/x%CE%B4%D6%AA%B7%E7x/blog/item/6e6eaf1ff55f641a203f2efc.html
autoproxy的目的，是为了自动检测域名是否需要进行代理。如果你不需要这一检测，可以不用autoproxy。
在身份验证选项那里，应当有一项是使用key。你需要将自己的key在user keypair
manager里面导入(import)，最后再使用。如果是我邮件给你，你需要将key的内容保存为一个文本文件。
openvpn：
http://blog.felixc.at/2010/11/openvpn-win/
我会为你准备好配置，可以直接使用。但是
，你必须在这里下载，不要直接去首页下载，那是openvpn官方提供的服务的定制版：
http://openvpn.net/index.php/open-source/downloads.html
配置文件默认是.conf，在windows下也许需要修改为.ovpn。默认是会打开智能路由的，这会导致加载速度比较慢。如果是win7，你需要以管理员身份运行openvpn-gui-1.0.3.exe，否则会出现权限问题。
MacOsX的教程在这里：
http://cn.giganews.com/vyprvpn/setup/mac/openvpn.html
你可以在这里下载：
http://code.google.com/p/tunnelblick/
至于linux用户，你直接sudo openvpn xxx.conf就好了，没有任何难处。
另外，最近gfw开始升级。openvpn的稳定性会比原来差很多，即使连接上，也可能丢包。这点对不同的接入和不同的机房情况不一样，我们还在进一步确认中。如果你有类似困难，可以向我反映。</description>
    </item>
    
    <item>
      <title>马尔代夫游记（五）</title>
      <link>//blog.shell909090.org/blog/archives/2216/</link>
      <pubDate>Fri, 10 Aug 2012 02:20:02 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2216/</guid>
      <description>最后一天的行程最为乏善可陈。我们早上吃过早饭，做了最后一次浮浅，用光了防晒霜，并且照光了所有照片。今天大概就这样了。
这里我提一下浮潜时没有脚蹼的一点技巧。当然，你可以用普通泳姿，这没啥问题。但是我没有鼻夹，所以需要用手捏住鼻子。在我的蛙泳姿势里，手是起很大作用的。没有手，游泳速度就慢的可以。不过在浮潜时，你有一点可以投机的地方。普通泳姿时，你不可能在收腿的时候把脚放在空气中，这会导致头部严重的沉入水中。但是，在浮潜中，沉一点有什么关系！只要不要沉到倒灌，你大可以随便抬脚。因此，你可以把脚在水面上收回，在水里踢水。这样的游泳速度快多了。尽管没有上次带着脚蹼那么夸张，但是比我普通的泳姿至少快了一半，我可以清楚的感觉到水对人的压力。
一点额外要说的是，今天开始结帐的时候，账单不大对。后来检查后发现，潜水学校把我的名字输成了Shell.Xu。虽然这个没有错，但是我护照上的名字是XUZHIXIANG。不得不说，中国人的英语名字真是麻烦，这点导致我的账单不正确真是不知道说什么好，要是我一走了之，他们哭都来不及。
中午12点，我们开始退房。马尔代夫的行程这点很不人性，你必须在12点整退房，却在下午3点多才坐飞机，期间他们就请我们在大堂里面坐着。大堂里面有什么？啥都没有。没有电，没有wifi，连空调都没有。最后我实在无奈，就和他们申请去健身房。如同我所预料的那样，健身房里面是有空调的。但是悲剧的是，他们的健身房里面味道很大，估计是很长时间没有人用了。我们用了一会，就被熏跑了。我实在无聊，就去潜水学校拿OW教材看。等飞机的时候，我基本完成了OW的教材。按照PADI的规定，我再做一次考试，一次练习和两次潜水，就可以拿OW证书了。
教材的最后，大致说了PADI的潜水员升级流程。当然，都是休闲潜水。首先是童子军（？！这东西似乎中国没有），然后是水肺潜水员（SCUBA），然后是开放水域潜水员（OW）。在完成3次开放水域探险后，会得到称号“探险潜水员”。我不知道这仅仅是一个荣誉，还是你会具有什么其他的特权。而在完成5次开放水域探险后，你会得到称号“进阶开放水域潜水员”，当然，我也不知道这是荣誉还是具有什么特权。然后，你才能考PADI教练执照，并和没有执照的人一起潜水。
看完教材回到前台，被告知飞机晚点，我们还要等到下午四点三刻。等飞机来了以后，和我们的落地时间核对，我大概知道了为什么。我们来的航班叫做5M199，回去的是5M198。这是同一架飞机来回航飞的航班，我打赌有三个机组负责这个航班，以轮班的形式重复利用这架飞机。而水上飞机公司则需要在来程和去程都满载乘客，以减少成本。因此，一旦大航班晚点，水上飞机就必须等大航班的客人到齐才能起飞。如果他们晚点后再磨磨蹭蹭，水上飞机就要继续等。而水上飞机等，就会造成返程航班延误。
我人生中的一个下午就被消耗在了完全没有意义的，热的要死的海岛酒店的前台前面。建议所有去马尔代夫玩的朋友慎重考虑这个问题，你行程中的1/10，实际上是没有任何意义的浪费。你觉得你付钱的最后一天，似乎可以跑去马累逛一下？错，这基本是不可能的。虽然行程计划人会告诉你，你可能可以去马累。前台会告诉你，到了机场可以去联系谁，然后免费到马累市区逛逛。对方还会负责你的返程时间！但是实际上因为时间安排原因，大部分情况下这根本不现实。这一天存在的意义，一半是正常的海岛生活，另一半就是为了让航飞公司省钱。省钱没有错，毕竟我们拿到的价格也会更低。但是在此我要说出所有旅行社不会告诉你的——你，4晚6天的行程，你以为会有5天的游玩时间？实际上只有3天半的有效时间。最多加上头一天晚上5点到以后的半个下午。而与此相对的，你得接受一个炎热而无聊的下午。
另外，现在我在飞机上，以一个过来人的身份告诫你们。从马尔代夫飞回中国的航班，一定要吃牛肉。牛肉配的是土豆泥，比鸡肉米饭好吃太多了。米饭半生不熟，鸡肉也淡而无味。而且，饮料太少了。你可以在机场的店里买瓶矿泉（2美金！折13人民币！），喝光可以去飞机前面要。当然，长途旅行的一般原则是在旅行前和旅途的前半段不喝太多的水。</description>
    </item>
    
    <item>
      <title>马尔代夫游记（四）</title>
      <link>//blog.shell909090.org/blog/archives/2214/</link>
      <pubDate>Mon, 06 Aug 2012 02:09:47 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2214/</guid>
      <description>潜水练习和考试的内容我不详细解说了，就说说其中比较变态的几道题目吧。一个是水面漂浮，在没有设备帮助的情况下，在水面漂10分钟。不知道为什么，我今天居然随便漂，基本是想漂多久漂多久。虽然说海水浮力大，但是有海浪阿。只能说我突然开窍了吧。另一个是水下漏气训练，模拟氧气管漏气，要从里面正常呼吸。不过这都不是最变态的，最变态的是水下摘除面罩并放回。我们在7米深的水下，把我脸上的面罩摘掉，然后再戴回去。我了个去，我都不知道自己是怎么过去的。以我这种怕海水的眼睛，居然还没有事。至于什么水下缺氧，换呼吸头，都算小意思了。
不过谢天谢地，没有考我最怕的紧急上浮。虽然我觉得没问题，但是那个玩不好就要爆肺的。考虑到危险程度，教练也没有叫我练习，只在水里做了几米的模拟练习。
上午的内容主要是考试，潜水只占了很小一部分。下午的潜水比较有趣，我们去了很多平时不会去的地方（因为以前不能潜入高深度水域，而上午我们就是在飙深度）。这次不光看到了上次一样大的贝壳，而且还是活的。我们还看到了电视里面经常看到的魟鱼。就是那种身体扁平，有翅膀一样扇阿扇，尾巴长长的家伙。不过貌似这家伙还没长大，感觉上只有一个小脸盆的大小。还有几只小鲨鱼，最长的只有一只胳膊长，最短的只有两只手的长度。他们的鳍尖是黑色的，平时也经常在我们的屋子底下游来游去。
下午一次潜水后，我如愿以偿，拿到了水肺潜水员证书（SCUBA Diver）。按照教练的讲法，这个证书还不能自主潜水。我下水时必须有教练陪同。但是我的最大潜水深度可以达到12米（普通人只有3-5米），大部分地方对新手和有证书的人的费用是不一样的。在vilureef这里，有证书64美金，没证书130美金。如果我考出了开放潜水员证书（open water，简称OW Diver），我就可以和另一个有OW证书的人一起潜水，不需要教练了，而且最大潜水深度将达到18米。我在一年内可以直接加两次潜水和一次拓展来完成OW证书——貌似暂时没戏了。
完成考试后，我填了一张表格，证书会邮寄到我家里，并且录入数据库。将来在任何一个潜水点，我可以凭借我的姓名和生日查询到证书。现场发给了我的纸质证书（看着好看的）和PADI潜水记录。里面详细记录了每次潜水的情况。考试的两次潜水也计入了记录，我摘录情况如下：
第一次潜水，2012年7月28日，地点lagoon vilureef，开放水域潜水，配重6公斤。10:40分入水，压力230bar。13:00出水，压力110bar。最大深度7米，时间35分钟。气温32度，水面温度30度，水底温度29度，能见度15米。教练Catharina。
第二次潜水，2012年7月28日，地点lagoon vilureef，开放水域潜水，配重6公斤。16:00分入水，压力220bar。17:00出水，压力90bar。最大深度6米，时间38分钟。气温32度，水面温度30度，水底温度29度，能见度10米。教练Catharina。
以后我的每次潜水，都会有人把内容记录到上面。按照Catharina的说法，即使我一年内没有去考OW证书，只要保证每年都有潜水，他们还是会给我考的。而即使我真的很长时间没有潜水，只要我参加一个Review课，就可以继续考OW。
今天的晚餐是vilureef给蜜月情侣送的晚餐。网上的说法是吃不饱。实际上，是挺简单的，但是基本能吃饱。开胃酒好像是山楂调的，前餐是一道烟熏三文鱼，然后是一道青梅冰激凌。正餐是烤鱼排配意大利宽面，饭后甜点是苹果片面包配冰激凌（又来？）。餐后茶是奶茶，红茶加牛奶的那种。不算好吃，不算精致。不过餐前他们拿来的酒单——我大概知道为啥他们什么证明都不用看就送这个了。。。
上菜的时候挺好玩的，服务员居然对猫咪的ipad上面那张小黄的照片感兴趣。他说很漂亮，这里没有这么漂亮的。我们问这里也有喵么？他说这里没有喵，但是马累似乎有。然后他又问我们ipad多少钱买的。我告诉了他价格，人民币的。他说还是按美元算吧，我当时就无语了。计算下来，我们买的比他们这里大约便宜了150美元。马尔代夫貌似没有限制电子产品进口阿，不知道为什么居然这么贵。而这个给我的另一个启示是——不要小看小黑服务员。当他们能够熟练使用英文，能用中文和日文和你聊大天，能唱歌跳舞开船潜水，甚至可以很礼貌周到的完成服务（我觉得这个最难）。他们的工资估计不比我低多少。
今天最后一件值得兴奋的事情，就是我总算稍稍学会一点快门控制摄影的技巧。通过控制快门时间，可以在微弱的光下进行曝光，从而在夜间获得清晰的，色彩丰富的照片。我把快门调整到5秒，拍摄出来的海岸美丽无比。而将快门放大到极限——30秒，拍出来的星空非常漂亮。虽然说是这么说，但是实际上我今天拍摄的星空很大可能没有机会再拍。首先是，拍摄星空必须在没有光干扰的地方，这对于大都市而言根本是做梦。其次，我大约拍摄了一半的南半球星空。马尔代夫的经纬是东经73度，北纬3度，基本可以看到整个天球。在上海最多只能看到大半个天球——还要看季节和气候。所以，趁着这次机会难得，我干脆把天空拍了个遍。</description>
    </item>
    
    <item>
      <title>马尔代夫游记（三）</title>
      <link>//blog.shell909090.org/blog/archives/2212/</link>
      <pubDate>Sun, 05 Aug 2012 03:38:57 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2212/</guid>
      <description>今天主要的行程是潜水。
早上是一次尝试性的潜水。我们的教练是昨天接待我们的Catharina，听口音是美国人，实际是德国人。我是第二次潜水，所以基本不用教。猫咪是头一次潜水，所以需要比较多的时间进行讲解。我就不用了，基本的穿戴步骤和普吉岛那次差不多，我就不赘述了。
马尔代夫的潜水环境和普吉岛有很大区别，普吉岛的水更加清澈一点，我可以看到很远的距离（在良好光照下，大约是15米以上）。马尔代夫这里，可能是因为洋流卷起了漂浮物，所以能见度更低一点。我的估计是10-15米。当然，由于我才潜水两次，对水下眼镜的偏折估计不一定准，但是马尔代夫的能见度比较低是可以肯定的。另外，以鱼的数量而非种类来评价的话，普吉岛的鱼更多一些。看过我照片的人都有数，鱼把我淹了起来，完全看不出里面那个人是谁。而马尔代夫的鱼只是能看而已。不过以种类而言，马尔代夫的种类似乎更多一些，个头也大得多。当然，我没能力数清楚普吉岛的鱼群种类，所以完全是凭印象。
低能见度环境下深潜有个好处——我完全不担心晒伤的问题。今天潜了半天水，一点事情都没有，反而对晒伤很有缓解。我在水里一点都不痛，在床上就痛不欲生。猫咪一直在那里嘲笑我。。。
我们整备完毕后，先由Catharina带着我们在浅水区域做了一次讲解，然后开始进入深水区域。我完全没事，猫咪似乎适应不良——她一直在我的后上方游。我距离水面不远，大约只有0.5米，只要一伸手就能够到水面的长度。如此距离，她还在我上方，你可以想到，这根本是在水面浮潜阿。后来Catharina也看不下去了，把气球浮标交给我，拉着猫咪直接游走了。
我们在水下看到了不少鱼，大部分我都叫不出名字。有一种竖彩虹条纹的热带鱼，样子像一轮半月。它看到我们在旁边，悠闲的游走了。有一种五彩条纹的的热带鱼，在我们上下游来游去。水里有几种贝壳，大部分都是紫色的。最大的有脸盆大小，可惜好像已经死了。小一点的也有CD大小，靠在岩石上。Catharina过去敲敲，它就张开来，扇一扇，然后合上。我知道不少人可能很羡慕，但是请注意，潜水靠近礁石是一项高级技巧，需要你用呼吸很稳定的控制浮力平衡，新手不要随意尝试。在完成SCUBA受训后我才知道这点，而且受训完成后我还不能保证做到。在水中，大致可以用BCD控制浮力，保持平衡，但是很粗略。细节控制是依靠脚蹼和呼吸的。而且在水中，一旦你上浮，压力减少，气体膨胀，会加速上浮。而一旦下沉，压力增加，气体压缩，会加速下降。所以新手潜水员很容易发生的一个问题是突然火箭一样的浮上了水面。要控制这点，需要减少脚蹼摆动，吐气，并放空浮力装置。然而一旦下沉，就需要及时吸气来对抗下沉，否则就会像一颗石头一样的沉到海底。如果你刚好在礁石上方，那就是撞到礁石——你受伤和破坏珊瑚的可能各占一半。
上岸后，我问猫咪啥感觉，她说很恐慌。看到水面离自己好远的样子（其实她不知道，潜水眼镜会把距离拉近，实际上距离更远），感觉好想喵喵叫——问题是嘴巴里面的呼吸器一直在跑，要用力咬住，连喵喵叫都不行。后面Catharina拉着她跑，她又担心我被甩掉。其实她多虑了，只要带着她，多强的教练都不可能甩掉我——游快了，这只喵马上出妖蛾子给你看。但是上去后，她告诉我，她在水里的时候一直想抓鱼来着。奇怪的猫咪，不喜欢潜水到喜欢抓鱼。这么说起来，最适合她的将是——鱼缸。
下午，我拿了PADI的教材看，然后去看PADI的课程。抱歉这个内容太长了，我绝对不可能把PADI的标准课程浓缩到一篇blog里面给你讲完。简单来说，PADI是潜水员教练协会，负责训练和评估潜水员，而我报名的是水肺潜水员资格证书。只要我一年内完成剩下的两节课程，还可以升级为开放水域潜水员证书。当然，以潜水在中国的发展来看——我估计要重考。
不过看电影的时候，我发现一点有趣的事情。隔壁的另一间房间，里面先是一对日本人，基本已经完成了电影训练。他们闪了以后，旁边又进去两对日本人，做PADI的考试。这么算下来，一天下午就有三对日本人进行潜水训练，那个日本语教练忙都忙不过来。而两个英语教练这两天貌似都闲着，我们倒是偶尔看到有人去借东西，但是基本都是浮潜装备。除了我们自己外，还没有看到有人进行深潜呢。日本人学潜水的好多阿。
晚上，我拖着猫咪去游泳池里面玩水。她是去玩水和被我玩的，我是实验漂浮的。明天的PADI考试里面，有游泳项目。无装备的200米平静水面游泳，或者10分钟漂浮。经过一天的实验，我基本能够在平静水面漂浮起来了。
今天的晚餐很有意思，是昨天我们夜钓钓到的鱼。当然，我没抓到什么好鱼，只有猫咪抓到了一条小鱼。这验证了网上的评价——难吃的要死。</description>
    </item>
    
    <item>
      <title>马尔代夫游记（二）</title>
      <link>//blog.shell909090.org/blog/archives/2210/</link>
      <pubDate>Wed, 01 Aug 2012 14:37:54 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2210/</guid>
      <description>早餐的时候，谢天谢地，终于有水了。虽然没有免费的水，但是牛奶，果汁，都是免费用。服务员领我们去了海景坐，还为我们服务了两杯拿铁。这里的果汁和牛奶都很不错，果汁喝起来像是现榨的，牛奶也很不错，不知道他们是怎么解决的。但是拿铁就非常外行，咖啡不够香，奶不均匀，都是一颗颗的小的白色颗粒，貌似是用奶粉冲出来的。
今天开始，主要的项目就是——水。来马尔代夫不玩水，来干吗来了？
马尔代夫的水很漂亮，但是要玩水也有很多要点。
浮潜是最简单的玩法，需要的只有一副眼镜（要罩住鼻子那种，否则就要鼻夹），一根呼吸管。如果想要玩好点，还需要一双脚蹼。酒店的出租价格，整套1小时3美金，4-6小时7美金，24小时10美金。小贵，还可以接受。或者你可以国内带一副眼镜，一根呼吸管，然后自己下水。酒店会有救生人员，但是他们只保证你淹不死，不保证你能玩好。不知道是不是我的心理作用，国内的潜水眼镜经常漏水。我们租来的眼镜就非常稳定，我最长一次大概游了10分钟，要不是眼镜起雾了，我还不打算站起来。在下水前，一定要用足够好的防晒液，涂抹你的肩膀，后背，脚。尤其是肩膀和屁股附近，是最容易遗漏的。我想腿晒不伤，就没涂腿。结果在经过半天潜泳后，我在洗澡时被猫咪嘲笑了——居然给我生生的晒出了一个泳裤印子。防晒霜的作用相当明显，我的肩膀只是轻微发红而已，腰上稍微深一点，不过还可以忍受（主要是喵涂抹防晒液的时候偷懒没涂均匀），大腿后面已经像煮过的虾米一样了。另外，防晒液只防止晒伤，不防止晒黑，这点喜欢美白的女生千万注意。
浮潜前，你需要戴上游泳眼镜。游泳眼镜通常要在水里洗一下，以防起雾。戴上眼镜后，将呼吸管别在眼镜带子上（通常已经别好）。然后调整一下眼镜，保证没有漏气，并且将头发理出眼镜里面，以防水从头发那里灌入。用牙齿咬住呼吸管的内测，然后用唇包住呼吸管外侧。缓慢潜入水中，通常你就可以稳定的在水里游了。
浮潜的关键在于头的朝向，换气，和游泳姿势。首先是头，必须保持脸向下，不能抬头！因为眼镜内虽然少，还是有一些空气的。有空气就有浮力。在入水后，这个浮力会向上推眼镜。如果你不小心用鼻子吐气，那么眼镜内的空气会更多，胶皮和脸也会贴的不那么紧密。在这个时候，受到海浪冲击，很可能就发生进水。而一旦进水，你就需要上水面调整，这个很浪费时间。而脸向下则有两个好处。首先是眼镜的浮力会将眼镜牢牢的压在你的脸上，即使少量的鼻子吐气也不影响。更妙的是，当发生少量进水的时候，水会从眼镜内侧流到鼻子那里，而不会进入眼睛，影响视力。你甚至能看到水的下流。如果你不继续用鼻子呼吸，这少量进水完全不影响你继续潜水。即使需要调整，时间也会快很多。
至于换气，记得小幅呼吸，不要过猛，也不要大喘气，更不要大幅动作，试图玩自由泳什么的。因为人在水下的浮力会受到呼吸的影响，吸气时浮起，呼气时下沉。当你水下大幅动作，或者水面波浪，碰上你正好吐气的时候。搞不好就是海水从呼吸管进去少许。而这少许的海水，非常烦人。每次你呼吸的时候，都能听到噗噜噜的声音，好像摩托车的排气声一样。吸气过猛，抱歉，就进嘴里了。这时候，上水面，不要摘掉面罩。站起来，抬头，侧脑袋，水会自动从呼吸管中流出去。然后轻轻抬起面罩下延，排掉里面的水，你就可以继续潜了。整个过程大概就10秒时间，省事的多。一般来说，上浮重整主要是因为喝水和眼镜起雾。
水里记得不要用手去够一些东西，贝壳，珊瑚，除非你的手可以轻易碰触到他们。因为你伸手去够的时候，实际上是头下脚上的。如果运气不好，海水就会直接从呼吸管中倒灌进去。这时候没有意外的，你肯定会喝水。不过放心，这里的水很干净，喝一点不会死人的。相反，你要是瞎扑腾，撞伤了倒是要痛好久。同样，要是用脚在水面上猛打水，一样会造成头下脚上，呼吸管倒灌。因此，浮潜实际上是整个人“趴”在水面上的一种运动。如果你有脚蹼，可以考虑自由泳的姿势，但是手不要轮转划水。手可以保持前伸，或者在身体两侧，或者在胸前，都可以。脚蹼加上自由泳的脚打水姿势会游的非常快，你可以感觉到海水在你身体上形成的压力。而如果没有脚蹼，则推荐采取蛙泳姿势。两脚猛打水的结果可能是前进不了多少，但是却很容易撞上珊瑚。
马尔代夫的海水是印度洋中心的海水，非常清澈，而且属于海中心，洋流非常快。在水里呆着就能感觉到强大的水压在推着你走。如果你没有一定的游泳速度，在中等深度区域（1米上下）就会开始转向，偏移。这么说吧，我不穿脚蹼不敢到1米区域以外去，因为万一发生问题我不确定自己能游的回来，最好也只能顶着洋流保持不动。人的体力毕竟不是无限的，最多顶10分钟就会被洋流带着跑。而万一抓不住周围的浮标，就会漂到广阔的印度洋上。到时候怎么办只有天知道。如果有人看着，还会叫船来把我拖回去。只需要坚持到船过来就行。没看到就彻底听天由命了。
如果你对自己的浮潜水准有自信，可以从珊瑚上面漂过去。这时候能看到成群的鱼在珊瑚里面游来游去。至于没有自信的，可以在旁边看。毕竟万一发生意外你需要站起来。如果在珊瑚上，你不小心踩踏了珊瑚可是麻烦。普吉岛的潜水则是深水潜水，用游泳衣让你漂在水面上。因此你根本不需要“站”起来，自然也就没有这个问题了。
更复杂一点的，可以去玩深潜。这个我在普吉岛也玩过，相当昂贵。主要是适合潜水的地方，都离上海很远（哭）。在酒店这里，提供深潜服务，你甚至可以考出本证书来。尝试潜水，一次130美金。考证需要多潜水两次，总计245美金，加上49美金的证书费用。以上费用都需要加上16%的附加费，作为酒店和旅游局的抽成。考证还需要看2小时的光碟，并做一些作业。在潜水后，需要24小时（不得小于18小时）才能上飞机。因为潜水会导致血液内微量的气体溶解，而上浮时这些气体会逐步溢出。所以你可能会有局部的麻痹，头晕之类症状。不过只要保证按照潜水指南，在3-5米的区域停留3分钟，一般这些症状都不应当会出现。但是尽管如此，你血液内的气体含量还是很高的，而且局部可能有小气泡。在24小时后，气体溢出，气泡溶解，你没有任何问题。然而如果马上就上飞机，往往会导致严重的减压问题（讽刺的是，其实你在正常环境中没事）。因此，通常4晚6天的朋友，最好到达的头个晚上就报名第二天的深潜项目。这样如果你需要考证，你有足够的时间来操作，而且更加安全。我们为了考证，放弃了海豚，深海珊瑚浮潜，还有海岛半日游的行程。
晚上我们尝试了夜钓。实话说，不好玩。从晚上六点开始出海，然后每人发给一个风筝转盘一样的东西。将鱼饵（通常是新鲜的鱼肉）钩在上面，然后扔到水里。剩下就是等着吧。我的鱼饵数次被吃光，好容易赶上一条大鱼，居然还被咬掉了鱼钩（？？！！）。倒是猫咪，虽然严重晕船（好多人都晕船），但是还是钓到了一条小鱼。我笑话她是小猫钓鱼，鱼钩放下去，就接着晕船去了。等过了一会，不知道鱼铒被吃掉没有。拉上来看看？我靠，一条鱼。。。
开始的一个渔点，鱼多的很，而且超级大。随便都在30厘米左右。颜色基本都是蓝色，红色。膘肥体壮泛着亮色的油光。第二个渔点鱼就很小了。虽然数量基本差不多，但是都是小鱼，最大不超过15厘米。颜色以白为主，偶尔能看到红色的鱼。粗看挺像鲤鱼的，但是口比鲤鱼大。猫咪说她好像认得，但是吃不准。</description>
    </item>
    
    <item>
      <title>马尔代夫游记（一）</title>
      <link>//blog.shell909090.org/blog/archives/2208/</link>
      <pubDate>Mon, 30 Jul 2012 09:50:27 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2208/</guid>
      <description>今天是去马尔代夫玩的第一天，我们坐马尔代夫美佳航空的班机直飞马累。网上有说美佳的班机都是老班机，不过飞机还不错，看不出破旧。只是在座椅设计上的不尽合理，让人觉察出这个飞机其实是很久之前的了。美佳的空乘很有趣，两个黄种人，看起来像是上海人，两个黑人美女，两个黑人帅哥。服务语言是马尔代夫语，英语，中文，和上海话，餐食也是上航餐食（航飞配出发地餐食似乎是惯例了），让人不禁感慨服务本土化之彻底。
飞行时间8小时，听起来很难熬。实际上毕竟是直飞，比转机还是舒服了不少。我们睡了三个小时左右，看了三个多小时的片子，吃了一个多小时的东西，基本就把飞行时间打发过去了。
马尔代夫的机场很有特色，和澳门机场一样，是建在岛上的。不过澳门机场还是填海了，马尔代夫机场还用不着。机场沿着马累旁边一个狭长的海岛修建，整个岛屿就是一个机场，包括一条跑道（是的，没有备用跑道，等待区之类的东西，我们降落后还得原路沿着跑道开到停机坪上），一个小停机坪，一个机场大厅。机场大厅也极小，不说比浦东国际机场的规模，就是普吉岛的布吉国际机场也大有不如。整个大厅只有四个篮球场大，还有部分露天区域，没了。从飞机下来，坐上摆渡车，20秒后，在100米处停下——到了。真真让我无言以对。
马尔代夫的签证和通关很简单，比欧洲简单无数倍，比泰国的都简单。我在浦东机场通关出境的时候，海关看到我的目标地是马尔代夫，压根不去验证你的签证，因为用不着。落地后，你只要在飞机上发的通关条上面，填上你的飞机号，护照号，还有你需要入住的酒店（这点很重要），就可以直接获得落地签。但是马尔代夫的海关规则比较特殊，猪肉，酒精等穆斯林禁品禁止入内，贝壳，珊瑚之类的海产品禁止出境（购买商品例外）。不要自找麻烦。
尽管通关简单，但是下飞机后通关还是很慢。因为很多人都没有预先准备好材料（包括我们，没有填写入住酒店）。负责处理我的是一个小黑，叫abudonla什么的，估计翻成中文就是赫赫有名的“阿卜杜拉”。人家挺客气的，我问出酒店名字后，他也不让我自己填，直接帮我补填了，然后马上敲章放我过去了。从海关出去领了行李，我们就直接领了预定好的水上飞机机票。在上飞机前，猫咪还买到了当地的电话卡。卡本身2美金，资费4美金，据说是最便宜的。卡本身激活后送20rf，4美金充值50rf。别问我rf是什么货币单位，我猜是当地货币。就是不知道国际电话和短信资费如何，所以没有对比标准。我们发了几条，其中有一条收到了回音，证明是发的通的。
水上飞机的流程很特殊。首先是托运行李，将&amp;quot;所有&amp;quot;行李过磅，包括你手提的行李。因为水上飞机比较轻，对前后平衡要求比较高。所以飞行员需要手动计算飞机的前后重量，来取得平衡。然后坐小巴，绕到机场另一侧的矮房子里，等待水上飞机的登机。这里的飞机登机也很特殊。通常登机是我们先到登机口等待登机指示，然后一个个扫描检票。这里的登机口是一间很小的（不到20人）的屋子，里面有本地飞机所有需要登机人的信息。你进去的时候扫一下票，然后就坐着等吧。等所有人到齐了，驾驶员就申请开飞机去。然后有小黑领着你到水上飞机那里去登机。可以想到，如果有一个人不到，剩下的人是有多郁闷。
乘水上飞机是一件很难描述的事情。水上飞机是以小型飞机为基础，加上浮筒形成的。在马尔代夫这种群岛国家，岛分布的很稀疏，坐船太慢。而全飞机又不能修那么多机场。因此水上飞机是一件顺理成章的事情。尽管如此，还是有不少痛苦之处——例如，飞机太吵，而且很小。
是的，水上飞机吵死人。上飞机前就有人发了耳塞，尽管如此，还是有不少不会用耳塞的家伙被吵个半死。这里说一下，耳塞的正确用法是，将耳塞先捻成细细的一长条，然后很快放入耳道，并且用手推紧。等海绵吸收空气膨胀，就会顺着耳道的形状完全塞住，一点声音都不会露过。但是，引擎巨大的轰鸣声，会透过颅骨直接传递到听觉器官里面，你会听到很奇怪的嗡嗡声，和平时完全不一样。千万别试图拔下耳塞试试看到底有多厉害，或在试图重新塞好。很难受的。
至于水上飞机的规模，我们的飞机是19个乘员的定载。2个驾驶员，后面有5排，每排3人，舱门那排每排两人，最后是一堆行李。一堆人在飞机里面挤的满满当当，不过幸好这个过程最多不超过1个小时。
飞机在浅水区域滑行了很久，到深水区后，开始加大推力。很快，和普通飞机一样，我们就飞上了天。不过和普通飞机不一样，小型飞机的抗颠簸能力很差，在起飞的时候，猫咪满脸恐惧的抓着我的手——天知道，要是出事我也搞不定的好吧。不过飞机上天后，你就能感受到小型飞机的美妙——我们仿佛在云海间穿梭一样。先是近距离的飞越马累市区上空，然后能很清楚的俯瞰一路上的小岛——距离相当近，我甚至能清晰的拍下海面的波涛。海水在深水区呈现的是美妙的蓝色，如同我们这颗蔚蓝的星球一样。在浅水区，随着水深变浅，颜色会逐渐由蓝转绿，由绿转白。而马尔代夫附近的海岛都具有鲜明的深度阶梯，从一个区域到另一个区域，过渡清晰，边界分明，犹如油画一般，一块一块鲜明无比。而这样的一个个海岛，分布在飞机下波光粼粼的印度洋的的广渺水域中，仿佛一块巨大蓝布上的色彩斑点。如果你仔细观察的话，同样是在深水区，还有部分黑色的阴影。那是白云飞过天空，在海面留下的倒影。
个人觉得，乘坐水上飞机本身，就可以当作一个旅游项目来玩了。
虽然整个飞行时间只有45分钟，然而我们所在的vilureef岛，和马累有一个小时的时差。马累是GMT+5的时区，而vilureef是GMT+6的时区，和阿拉木图一个时区。到了岛上，有会中文的服务员为我们介绍岛上的详细规则。规则很长我就不复述了，简单来说，岛上有各种好玩的好吃的玩意，但是都要花钱，并且提前一天报名。
到了岛上第一件事情，我们就检查了电力和网络系统。电力系统还不错，他们提供了一个转换器，能够让我们的充电器正常工作。我目前就在用外部电源支撑我的上网本写日志。而我们的ipad充电器则配置了英国标准头。但是网络系统就很抱歉了，需要购买帐号，收费足够让中国电信汗颜——每小时10美元！根据我的观察，这里似乎是在一个个岛上面架设毫米波天线，通过岛群的中继来传递信号的。这种方式相当昂贵而且不稳定，受到天气很大影响。不过除去这种方，只有海底光纤（而且不是一根，而是光纤簇）才能满足需求。可以想见，这里的手机信号也是受到天气影响的。
第二件事情，则是换上了泳衣和潜水装备，去屋子后面浮潜。这里的水挺不错，不过鱼没有普吉岛那么多——那里毕竟是观光景点，而我们这里是民宅。最让我郁闷的是，我们买的潜水眼镜有问题。在花了数万到马尔代夫后，我们败给了一个不足50的潜水眼镜。没办法，我们只能由猫咪和我轮流使用同一套装备。而最后我还把鼻夹给弄丢了——shit，貌似明天要捏着鼻子单手游泳了。
游泳后，我们都感到了饥饿。按照国内时间，这已经是晚饭时间了。然而这里比国内晚两个小时，自助餐又是8点开始，相等于国内的10点开始。我们都饿坏了。吃掉一包饼干后，我们小睡了一会。醒来后直奔餐厅开吃。晚饭相当不&amp;gt;错，泰式青咖哩酸辣开胃，其他数种我叫不出来的吃的也非常好吃。只有一个问题——没有免费的水。毕竟是海岛，估计淡水来之不易。岛上的饮料都是我们看不懂的玩意（最奇怪的是居然还有啤酒，穆斯林不是不得饮酒么？），而且贵的足够在五星级酒店点单。貌似明天开始，我们需要单独购买一瓶水喝了。</description>
    </item>
    
    <item>
      <title>snappy的性能测定</title>
      <link>//blog.shell909090.org/blog/archives/2206/</link>
      <pubDate>Mon, 23 Jul 2012 08:03:45 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2206/</guid>
      <description>要去马尔代夫渡蜜月了，闪人前最后一贴。
方法是用python准备数据，然后用timeit进行测试。虽然因为python框架的干扰，具体时值不是很准。但是用来做数量级对比和计算足够了。原生数据是一个屏幕截图，4M的数据块。
zlib.compress: 0.054105230093 snappy.compress: 0.00374100804329 zlib.decompress: 0.0157685602903 snappy.decompress: 0.0051297039032 从结果分析，zlib是典型的非对称压缩算法，压缩/解压速度比大约是3.5:1。而snappy的压缩和解压速度在同一个数量级上，甚至在具体的数值上，压缩比解压还要快那么一点。以解压速度为基础的对比，snappy大概比zlib快了3倍。而压缩速度上，则是快了14.5倍。
由于python的干扰是在每个的时间上面增加了一定开销，通常会使得速度比更接近1。也就是说，实际上snappy和zlib的速度比比这个还要大。
另外说一句题外话。按照我们测试下来的数值计算，snappy和zlib的压缩比大概在1:2之间。zlib压缩图形资料时的典型比例是0.05，而snappy则是0.1左右。对于熵比较高的数据，zlib大约是0.33左右的时候，snappy是0.5。都是比2倍大小略小。</description>
    </item>
    
    <item>
      <title>论社区制度——答各路神仙</title>
      <link>//blog.shell909090.org/blog/archives/2204/</link>
      <pubDate>Wed, 18 Jul 2012 14:53:32 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2204/</guid>
      <description>前面一篇“论社区制度”果然非议者众多。
混淆了直接民主和间接民主 这个真没有。仔细看引用的第三个材料的第一节，民主的形式。里面就讲了直接民主和间接民主。每篇引用的材料我都大致看过，还不至于犯这么严重的错误。
民主制度其实是个恶政，除去能够保证每个人的自由，他就是公民的暴政而已。这句话不是我的原创，而是从材料2中引用过来的。原文是温斯顿·丘吉尔的一句名言，“&amp;hellip;民主是最差劲的政府模式——除了其他所有不断被拿来试验过的政府模式之外。&amp;hellip;”。材料2做了转述，我做了引用。
我当然不想掺和白马非马的诡辩，但是讲到民主，总不能把直接民主踢出门外，光讲自由民主制吧。如果是这样，我会直接把标题从民主制度改为“自由民主制”。实际上，在民主制度的第一小节，每次提到民主的时候，我指的都是“非自由民主制度”。关于两者用词，我参考了材料2的“自由主义”一节。如果您觉得和您自己的理解有所差异，我们可以讨论辨析一下这几个词的细微差异。
#规则需要人来执行，并不等于规则是否严格都无所谓 #
对于这点，我不反对也不赞同。我的意见是，规则是否严格由管理员说了算。如果你觉得无法接受，你可以提要求完善。他们不接受，你可以走人。你不走人，那就只有接受。
原文核心的观点是——“试图依靠严密的，没有漏洞的规则来规范所有人的行为是行不通的”。
实际上，这一观点是从哥德尔不完备定理中得到的美学观点——试图通过一种大一统的，完备的定理体系来描述整个世界是不可行的。当然，由哥德尔不完备定理进行论证太扯淡了，所以原文根本提都没提。
#多数人暴政#
这个我首先把材料引了吧。多数人暴政 维基百科。
首先，如果你看了我上面的“直接民主和间接民主”，应该同意，直接民主是能产生多数人暴政的。真正对暴民政治作出修正的，是自由民主制。自由民主制的核心思想，是强调透过宪法保障个人免受政府权力的侵犯，或者说强调对于个人和少数派的自由和权利的保护。
然而，你得承认。即使是自由民主制，控制舆论引导民意可以操控权利这一套还是不变的，只是手段更加巧妙而已。中国有一种特殊的招聘，叫做量身定做招聘。即为了保证某人肯定中选，可以为招聘加上身高必须严格等于
，年龄必须严格等于等条件。同样，为了限制对手，而在媒体上大肆宣传，夸大对手所具备的某个特性对大众的影响，这已经不是一个很少见的手段了。当然，这和多数人暴政又有所区别。
原文的核心观点是——“在民主社会，操控舆论者操控权利”。</description>
    </item>
    
    <item>
      <title>论社区制度</title>
      <link>//blog.shell909090.org/blog/archives/2202/</link>
      <pubDate>Mon, 16 Jul 2012 07:21:44 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2202/</guid>
      <description>引言 事情的起因是shlug上的一次吵架。具体内容我就不在这里摘抄了，也不做评价。我单单说一点其实大家都应当知道，但是很多人却不知道的社区常识。
不要以为你加入了社区，就可以参与社区讨论。更不是因为你对社区做出很大贡献，社区事务就可以由你来管的。你能管的唯一事情就是退出社区。
社区管理之殇 民主为什么在社区行不通 其实严格的说，社区可以民主。debian社区事务由所有DD一致投票决定，这难道不是民主么？所谓社区不民主，指的是，非管理层不能参与社区的管理，也没有投票决定权。
这是理所当然的！如果非管理层可以在社区里面发起投票，为了迫使社区接受一项决定，可能发生很多荒谬的事情。为了说明的更明显点，我们假定一项荒谬的决定，例如社区中的每个人必须拍一张遮住三点的猥琐裸照。然后看看，会发生什么事情。
通常来说，管理员会很快会否决这个提议。如果管理员有空，甚至会题上一句——你有病吧。但是，提议的人可能基于某种利益——例如社区解散会为他带来利益，而要求强行通过这个提议。他会怎么办呢？
他会找来社区数量几倍的人入会。
我不知道一般社区有多少人，但是我曾听说一些水军可以高达10W人。无论是哪个社区，都会在这些人手下快速的被淹没。再说，就算没有10W，你又无法验证本人。一人冒充10人乃至100人也不是太困难的事情。
于是会发生什么？我估计大部分的人会直接退出，然后社区会整个倒掉吧。
当然，为了防止某些人抓住这个荒谬的例子，宣称自己的行为不荒谬。我在这里补充一句。这个例子只是说明民主投票制度在社区行不通。基于上述的理由，无论你的行为是否荒谬，这个结论都不变。
为什么严格规定在社区不通行 另一个很容易陷入的误区，是规定制。规定是一个看起来很有道理，实现起来很有道理，但是没法完全照做的东西。
我们在各个社区，很容易看到各个社区的社区规定。不许po广告来，不许随地吐痰拉，blahblah&amp;hellip;
但是这其实不是规定，而是指导规范！
我们都知道这些规矩，但是一个行为是否符合规矩，却无法由规矩本身判定，还是需要人来判定。我们举一个发广告的例子。例如，在shlug里面，广告必须OT，和社区无关的广告/招聘/讨论，完全禁止。然后某天，一个人来发了个网站广告，是个新闻娱乐网站。理所当然，马上被禁了。他于是就叫了，为什么禁我？
因为你发无关广告了。
谁说无关，这个网站的服务器是linux的。我发上来，希望大家帮我看看有没有漏洞什么的。
——难道你跟他争这个？
因此，严格规定是行不通的。大部分通行的都是指导规范。所谓指导规范，核心要点是各个社区不同的地方。例如有的地方可以吹水，有的地方必须严格讨论。有的地方可以发招聘，有的不行。至于执行的力度，要看管理员的理解和心情。。。
权力分配的几种形态 封建制度 在普通公司中，最基本的权力是决定公司解散和盈利归属的权力。这个权力应当归属于股东，在很多企业中，总经理其实就是唯一股东或者绝对最大股东，所以公司的最基础权力都来自这个人。其他一切权力，都来自这个基本权力。因此，我们又叫这个人大BOSS。在国企/事业单位，一般也有这么个大BOSS。貌似这都是中国化管理的常态了。
由于所有权力都来自一个人，因此你的最终目标就是让这个人信任你，并最终为你行使权力，或者干脆将权利下放给你。例如经营管理权，人事任命权，等等。这个构成了一切公司内斗的基础，其本质就是对各种分支权力的争夺。在这个过程中，下级希望尽量扩大手中的权力（例如任命，提升），而上级希望他任命的下级通过转赋获得的权力完成他的工作，好让自己的上级赋予更多权力。当然，最高层并不需要获得更高的提拔和任用，盈利是他们最大的目标。
这种权力下放和争斗，几乎贯穿了中国封建社会以来的每一处。封建社会，什么叫封建？我们忽略马克思主义者的定义。根据维基百科的说法，封建社会，指由共主或中央王朝给王室成员、王族和功臣分封领地，是一种国家管理“制度”而不是一种“社会”，属于政治制度范畴。[1]
民主制度 民主制度其实是个恶政，除去能够保证每个人的自由，他就是公民的暴政而已。[2]韩寒似乎就曾经写过一篇blog，关于一个富人和10个穷人的故事。在民主制度下，可能发生的事情是10个穷人一致投票处死富人并瓜分财产。问题是，在近代社会中，每个底层的员工/社会的公民，都希望自由。于是我们设计出种种的民主制度，并赞以为好。[3]
民主制度的权力，实际上很虚无缥缈。因为从理论上权力来自每个人，但是又不是每个人都能去行使这个权力。因此实际上权力来自于“民意”。民意这个东西很抽象，但是也很实际。大多数情况下，可以通过舆论加以控制。早在古希腊时期，政治就很明显的会受到剧场中的“政治讽刺剧”的影响。[4]近代来说，希特勒的上台也是合法选举的（当然，上台后的那些事情就是另一回事）。
社区制度 当我们说社区制度的时候，我们并不是在说社区的管理员层制度。管理员层制度可能千变万化，如果论坛是一个公司，那么可能就是封建制度，如果是纯社区，那可能是民主制度。实际上这两种我都见过。在这个小结里面，我说的是社区的每个成员和社区管理层间的互动关系。
社区的规模和定位不同，管理员的风格和个性不同，管理的方式也可能不尽相同。有的社区有完整的社区指导，有的没有。有的有管理员内部投票，有的没有。有的社区对新加入人员亲切友好，有的不是。有的干脆禁止随意加入，要加入可以，找介绍人。
不服？可以。但是社区的每个成员，实际上对社区都是没有管理权的。这也是管理层为什么叫做管理层，或者管理员的原因所在。社区成员唯一制衡管理员的，就是离开。用google的话，就是“用脚投票”。你可以自行离开，然后组建一个社区。如果你的方法，或者个人感召力确实占优。你的社区会更出名。很多社群都经历过分裂。要想看传奇故事的话，大家可以看看DivX和XviD两种视频编码格式的恩怨。不过也仅此而已了。很多社群都是熟人来玩的，压根不在乎你搞多大的社群什么的。
总结 我觉得，这个结论，是很多人都应当想的到的。但是很多时候，还是有人跳出来。也许出于热心，也许没想那么多。但是社区的事情确实不是社区中每个人说了算的，这和天下事天下人可议还不一样。包括debian社区的“蝶变”音译问题，还有shlug的ban人制度之争论。本质上都是一回事情。
引用 封建社会 维基百科 自由民主制 维基百科 民主 维基百科 雅典式民主 维基百科 </description>
    </item>
    
    <item>
      <title>debian wheezy下以uwsgi安装graphite</title>
      <link>//blog.shell909090.org/blog/archives/2200/</link>
      <pubDate>Mon, 09 Jul 2012 08:45:28 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2200/</guid>
      <description>abstract graphite是一个python写的性能监控系统。这个系统是由多个分离的部分组成的。
graphite-web: 由django写的web界面系统。 carbon: 数据收集的守护进程。 whisper: 一种python写的数据库，类似rrd，便于大量的性能日志数据收集和处理。上两个组件会调用这个库。 collectd: 数据收集守护进程，向carbon中喂数据的数据源。 另外，有一点黑色幽默的就是，graphite的意思是石墨，是炭(carbon)的一种同素异形体。因此在graphite项目中，多次出现carbon这个名字。当然，另两个同素异形体是钻石(diamond)和足球烯(footballene)，你就暂时别指望看到他们的身影了。
另一个用python写的，以元素命名的著名软件是mercurial。化学元素中的汞，俗称水银，符号hg。因此mercurial的命令行简写才是hg。
以上几个的结构大概是这样的：
collectd(source) -network-&amp;gt; carbon -&amp;gt; writing-&amp;gt; whisper
database -&amp;gt; reading-&amp;gt; graphite-web
下文描述了在debian wheezy下，以nginx+uwsgi模式安装graphite的过程。之所以用这个模式，是因为我的大部分系统都是python写的，同样安装在uwsgi下面。一事不烦二主。
carbon carbon有对应的debian包，可以很简单的安装。
sudo aptitude install graphite-carbon 默认的数据端口是2003，默认的数据路径是/var/lib/graphite/，这个在下文需要用到。
graphite virtual graphite有部分需要安装到系统中，因此最好用virtualenv进行安装。
cd /var/web/ sudo aptitude install python-virtualenv virtualenv --system-site-packages graphite 我假定你的安装路径是/var/web/graphite，这个在下面要反复用到。
install 在安装路径下，执行以下内容
source bin/activite pip install graphite-web --install-option=&amp;quot;--prefix=/var/web/graphite&amp;quot; --install-option=&amp;quot;--install-lib=/var/web/graphite/webapp&amp;quot; 注意，/var/web/graphite需要根据上面的设定自行修改，webapp是你的django基础路径。
configure 在/var/web/graphite/webapp/graphite下面，执行以下内容
cp local_settings.py.example local_settings.py 然后编辑local_settings.py
GRAPHITE_ROOT = &#39;/var/web/graphite&#39; WHISPER_DIR = &#39;/var/lib/graphite/whisper&#39; DATABASES = ... 注意databases，不要在settings.</description>
    </item>
    
    <item>
      <title>一次韵达投诉经历</title>
      <link>//blog.shell909090.org/blog/archives/2198/</link>
      <pubDate>Mon, 02 Jul 2012 02:03:04 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2198/</guid>
      <description>最近婚礼，碰到个挺憋屈的事情。
婚礼不是要印请贴么？老妈说亲戚都是远道来的，请贴印的高级点，把照片印上去。再把路线什么的也打一张纸，一起邮过去。我在淘宝上订购了一家婚礼请贴公司的服务，结果邮寄过来一看，货倒是对版的，但是字太小，颜色还有色偏，偏红，纸质也不算高档。没办法，1.4元就这个质量，我也没功夫去投诉什么的。直接找了另一家，好像叫上海络客，老妈跑去现场沟通印刷的。4元一份，50份，总价200。
我找韵达给邮了过去，5.21号发件，过程还挺顺的，没出别的事情。第二天，快递员给我打电话，说对方不在。我说不在阿，不好意思，您能回头送么？他说已经放门卫那里了，让我通知对方。我心说你怎么随随便便就放那里了。但是放都放了，还是尽快给老姐打电话吧。
电话到了，张姐也知道了。事情看起来到此为止咯。不，事情才刚刚开始。
我6.10号接到老妈电话，说老爹那里没收到快递。我说张姐不是说知道了么。她说，张姐去找了，没找到。我说都半个月了，才说阿。老妈说，她联系你爸的事情忙（我爸还有别的事情请她帮忙），把这个给忘了。
我X，这下篓子大了。请人过来，连请柬都没一张，像话不像话？而且还有线路图，证婚人证词，全丢了。
没办法，还有6天就是婚礼了。老妈跑过即加急补印了一套，然后重新打线路图，还有证词，再发过去。全家总动员，一天内搞定了所有材料，结果在快递上又出了问题。
韵达是不敢用了，我找的联邦。联邦总机没说啥，快递员告诉我，请柬算文件，按照邮政法不得快递。我想没办法阿，找EMS。和EMS的快递员扯淡半天，发现：他们的件都是三天内达，到时候人都在上海了。隔日达的限于特定区域，例如长三角。但是张家港又不在这个业务的覆盖范围之内。我说我加急费用行不行。他们回答我：抱歉，没这个业务，加费用也不行。我一想没办法，用毛巾包起请柬，打给联邦说我邮一条毛巾过去。联邦的业务员说，好，你别包起来，我要检查的。。。
我X，这TM扯淡劲的？咋办？
和老爹打了半天电话，听他念了半天，最后决定：他去和所有亲戚道歉，到了上海再给人家请柬。
结果婚礼那天，没线路图，四辆车（分批次走的）里面有两辆走偏。老爹车上有GPS不会用，开去了外高桥。老姐车上的GPS数据不够新，开到浦东没下出口，一路开去了浦西再开回来。
事情闹这么大，怎么也得有个说法对吧。这里面有两个问题，一个是张姐忘记和我说了，一个是韵达丢件。张姐那里是我们有求于人没办法。韵达丢件是实打实的，所以我打给韵达总部去投诉，并且看了一下单子上的快递条件。未保价的，按照运费5倍赔偿。
请柬大概10张，一张就是4元，总价40。还有各项其他材料，小礼品。加起来大概是60朝上。我报了个80。实话说损失远不止这点。光是开错去外高桥的车的油钱就多少？加上加急印刷，我接近两天的时间浪费，总数合计可能要破千。更不提这件事情麻烦而且丢面子。但是运费只有6元，最高只能赔偿30。好吧，既然是合同，我无话可说。而且主要责任确实不是韵达的，所以我就打算弄一个投诉，拿这点小钱，小惩以戒。
投诉上去，隔天（大概13号）有人打给我，说是上海网点的人。去找了，但是这么久了，找不到了。我说那怎么办。她说你想怎么办。我说这个当然是你们说怎么办。她还是问我怎么办。我说按照你们标准来吧。我估计是她被人搞的怕了，听到这个松了口气，说明天我给你带去。
结果第二天她没来，倒是有个号码疯狂的打我手机。我的手机婚礼后就被各种人狂打，估计是婚礼中方方面面的人都拿到了我的个人资料。所以我开了防火墙，就一直没接到。第二天下午（大概是6.18号）接起来，是那个送件的快递员。他打过来要我别投诉了，说可以按照东西价格赔偿。
我当场就发飙了。东西才多少钱？后果值多少钱？我让你赔个精神损失费10000你赔么？我邮递个东西，就给你们随随便便的放门卫那里，还很不耐烦的让我通知对方去拿。放门卫是你的选择，选择了就要承担后果。你要是摸着良心说你尽到责任了，我当场就打电话去取消投诉。
结果他答不出来，但是还是吭哧吭哧的道歉。刚刚做这个不容易拉。我说，这和我没关系。我投诉的是韵达，要求赔偿的也是韵达。你的处罚是韵达的决定。因为你不容易要求我解除对韵达的投诉是没有道理的。你要是真不容易，找你们领导求情阿，真不容易假不容易他最清楚。
说完我就挂了。
结果没两天，我姐给我打电话，说小伙子跑她家里去了。这下我就更来气了。事情本来就是你自己问题，最多是你和韵达的问题，你老骚扰委托人算是怎么回事呢？我坚决的没撤销投诉，隔手又打给韵达总部，投诉快递员骚扰。
总部的接线员很无奈的道歉，我们会加强对快递员的管理。我说你们处理问题的时候，左一个电话右一个电话就算了。现在快递员都跑到家里去了，我可以不可以投诉他骚扰。接线员犹豫了一下，说可以，但是这样就会加重对对方的处罚，快递员也不是很容易，问我是不是要投诉。我想想，人家也挺不容易，就和接线员实话实说了。你想法联系他，让他别再一趟趟的求情了。我再知道这种事情就肯定投诉了。
好，这个JP快递员的事情暂时告一段落。我们说回上海网点。不知道是韵达上海网点的执行会导致快递员受罚还是怎么回事，我12号投诉的，13号接到电话说隔天赔偿。到19号一点动静都没有。没办法，再打去韵达那里投诉。这次投诉他们赔偿协议不执行。然后韵达上海网点的人终于来了，说今天不过去了，三天内赔付到位。我说三个工作日吧，下面三天放假，我都不在。他们说，周一保证送过去。我说好吧，事情总算完了。
就快递一份东西，加起来耗费两天时间，全家总动员，还打了三个投诉电话，才解决问题。我细数一下里面的问题和教训，给大家做个参考，也希望知道的朋友解答一下我的问题：
按照邮政法，快递是否可以邮递文件？请贴是否算文件？如果可以，那么联邦快递有问题。如果不行，那么韵达有问题。无论如何，我可能还得多一个投诉。 如果快递不能送文件，这就是彻头彻尾的垄断腐败。 个人资料泄漏阿，结个婚，最近我的电话都快爆了。幸好早改成接听免费了。我听到广告就说，您大声点，我听不大清。然后放一边—— 如果东西比较重要，一定要保价，而且要按照结果保价。也不贵，韵达是3%收取的。如果考虑到丢件，当时我保价100，也不过是3元而已。快递总价不过是6元涨到9元，但是基本可以保证东西不丢了。如果真考虑这东西比较重要，我会走联邦（如果可以的话），而且大概会足额保价。 韵达对网点和快递员的控制和监管很差。网点有没有和我达成协议，总部不知道。网点赔偿没赔偿，总部不知道。快递员出了问题，还可以和委托人讨价还价。这根本是淘宝的加盟模式。 对快递员的处理只有赔钱，完全没有培训过快递员，什么情况下可以放门卫。如果他是先问我，是否可以放门卫，我说可以。那我这个投诉电话也不打了。 谢天谢地的是，总算投诉是有效的，投诉后对方是有反应的。如果我投诉了，责任方完全没半点反应。这家快递可以从我的联系人中除名了。 </description>
    </item>
    
    <item>
      <title>预言和伪预言的几项判定</title>
      <link>//blog.shell909090.org/blog/archives/2196/</link>
      <pubDate>Mon, 25 Jun 2012 03:16:58 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2196/</guid>
      <description>人类很信算命，世界各地各种预言层出不穷。我碰到过真的预言，也碰到过假的。当然，真的预言并不代表我相信对方的宗教，或者其他的什么。只是说，对方的预言是有效和正确的。而假的预言，不消说，就是指预测是无效或者错误的。有很多预言披着各种外皮，让你觉得像真的一样。所以我提出几个观点，来区分两者。
预言的结果总是增加信息量。这是预言判定的大纲。如果一个预言没有增加信息量，那么就不是一个有效预言。 预言是对未发生事情的断言。预言的主体事件必须清晰明确。反例如：明天下午，你身上会发生一些事情。废话，只要我醒着肯定会发生事情，这种预言无论对错，是无效且无用的。 预言不得以隐喻，暗示方式说出，解释上亦不得附会。例如：推背图，爱怎么解释怎么解释。 预言的时间和地点可有可无，但是如果有则必须符合事实。如果时间，地点，事情细节不完全吻合，可以称为“带误差的命中”。 预言必须是可验证的，不可验证的事情不叫预言。反例如：下辈子你会投胎成什么。。。这怎么验证呢？ 预言不可以是自实现的。反例如：很有名的股市预测者预测股市涨跌，这属于“自我实现的预言”。这种情况很特殊，因为预言本身是有效的，而且是会实现的。但是不是以某种神秘的方式，而是可知的心理学。 预言的总体必须是常人无法推测的小概率事件。反例如：你一个月内将会吃到一次米饭。废话，这TM不叫预言，叫2B。 对预言者的分析，必须注意“多次预言”，或者隐性的&amp;quot;多次预言“。反例如：找1000个人，然后分别为他们预测股市。你只要对一半人预测涨，一半预测跌。理论上说，应当有一个人会连续预测中10次。这是符合上述规则的预言，但是是无效的。类似手法经常用于短信诈骗，群发短信预测股市，对预测正确的再进行预测，最后就有一批人会觉得预测者很神奇，从而容易轻信对方要求代为理财的言语。 因此，承8。对不同人，预言同一事物，必须做出一样预测。 承9，如果你不能确定预言者散布预言的范围，以及范围内是否都听到同样的预言，那就是一个无效的预言。 同样承8。在预言帝，章鱼哥之类的事务面前，你要考虑总数有多少类似的预言者在进行预言，其中有一个人做出了全部正确预测是不是一件很奇怪的事情。当然，这并不否认预言者可能是真的具备预知能力。只是以统计而言，无法区分是真的具备预言能力还是仅仅是统计上的胜利。 承1, 8，判定预言的终极方式，是将预言者对于某一事务的所有预言进行收集，计算其正确率。如果这个正确率高于热噪声选择的平均正确率向上修正三倍方差，那么这个预言者就是有效预言者。 </description>
    </item>
    
    <item>
      <title>快速深入一门语言的几个问题</title>
      <link>//blog.shell909090.org/blog/archives/2194/</link>
      <pubDate>Fri, 15 Jun 2012 07:19:45 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2194/</guid>
      <description>劳资明天要结婚了，今天婚前最后一个blog。
1.hello, world
目标：屏幕上打印出hello, world。
原因：不解释。
进阶：当命令行给与不同参数的时候，打印hello,
名字。给与开关的时候，打印hello, 123。
2.正则提取
目标：写一个正则表达式(或者类似的东西)，从一段网页源码中找到某个标签的内容，去掉前后空格，显示。
原因：测试字符串处理能力。
进阶：支持正则扩展
3.扫描排重
目标：将某个目录和子目录下的所有文件扫描，排除重复的文件。
原因：测试文件系统操作能力。
进阶：多线程处理，注意吞吐颠簸。
4.做24点自动计算程序
目标：写一个程序，能够计算24点。要求能够自定义扩展算符。
原因：检查深度优先搜索，栈，结构设计，抽象处理能力等等。
进阶：做并发处理。有数种语言可能无法实现并发，或并发实现难度大，不美观，例如python。
5.做一个计算器
目标：做一个计算器，要求能计算1+2*3=7，并支持()。
原因：表达式解析和处理需要用到程序的方方面面，字符串处理等等。
进阶：做一个本语言的eval函数出来。
7.抓网页
目标：实现一个服务，定期下载符合规则的一批网页，解析，获得格式化的数据，并存入数据库。
原因：测试系统开发能力，基础网络库，字符串处理能力。
进阶：分布化抓取。
8.留言板
目标：设计一个留言板，将所有人提交的话保存起来，能一并展示。提交不需验证，展示不需分页。
原因：测试网络服务能力，数据库支持和多国语言支持。
进阶：防止XSS攻击。
9.异步大并发服务器
目标：设计一个异步http服务器，能对请求做出响应，添加，删除，修改数据库中的数据。不得使用现有的http框架和容器。
原因：集成性测试
进阶：不使用现有数据库，自己写一个。。。</description>
    </item>
    
    <item>
      <title>multiseat简说</title>
      <link>//blog.shell909090.org/blog/archives/2192/</link>
      <pubDate>Mon, 11 Jun 2012 03:19:54 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2192/</guid>
      <description>简述 这篇文章说的是如何实现multiseat，必须的条件和步骤等等。
首先简介一下multiseat。multiseat又叫做多座电脑，和瘦客户端(thinclient)一样，是一种降低电脑平均使用成本的方案。基本思路是，买一台稍好的物理机，然后买两个显示器和键盘鼠标，让两个(或者多个)人同时使用一台电脑。和瘦客户端一样，multiseat一般只用于对电脑计算能力要求不高的场合，打游戏的一般就别考虑了。和瘦客户端不同的是，multiseat的处理都在近程，所以在体验上会略好一些，部署时也不依赖于中心化网络。不过这些年网络设备都在改善，相差也不多。
硬件解说 显示系统 显示系统通常分为显卡和显示器两部分。multiseat至少需要两个显示器，但是两台显示器输出有多种情况。
单卡单核心双输出。一块显卡，一块核心，pci上就一个物理设备，但是可以输出到两台显示器上。例如笔记本，一个输出到本子上，一个输出到投影上。大部分机器都是这种情况。 单卡双核心单输出。又叫做单卡双核心交火。交火是一个ati术语，在nv那里叫做sli。是指用两块显卡为同一个显示进行加速，达到比一块显卡更快的情况。这一般是顶级显卡。 单卡双核心双输出。在单卡双核心单输出的卡上，一般都有两个输出。如果接入两个设备，那就是双核心双输出了。 双卡双核心单输出。又叫做双卡交火，在pci上有两个物理设备。同样是为了游戏而生的电脑。 双卡双核心双输出，两个pci-e。在上面的基础上，多接一台显示器。 双卡双核心双输出，一个pci。很少见，一般都是图形工作站。 之所以在这个问题上说这么细，是因为多X方案必须工作在两个以上核心上，每个核心分别输出一路。也就是说，上文中的3, 5, 6三种情况。我们最常见的1是不可以用多X方案的。而方案5, 6，是这么分的。一般的显卡都是pci-e的，而一块主板上只有一个pci-e插槽。所以普通主板是配不上两块普通显卡的。也不要考虑板载显卡和外接显卡的问题，卖电脑的说，大部分主板上都做了自动屏蔽。外接显卡一插上去，板载显卡自动屏蔽。
键盘和鼠标 multiseat至少两套键盘和鼠标，这是常识。
声音和外设 做的好的multiseat，尤其是搭配硬件卖的商业方案，一般都会做声音和外设隔离。你接上去的u盘不会出现在另一个人的电脑里。不过有些方案的隔离就不是那么完美，有可能只有主座有声音拉，或者是声音不能用拉。或者是自己指定声音输出到哪个设备，然后再抢耳机拉，或者是干脆多装一块声卡拉。这个问题自己留心。
windows windows下可以用softxpand[2]或者betwin[3]，俗称拖机软件，不过两者的破解都不是很好找，尤其是win7可用的。windows下拖机的后果可能是，D3D加速有问题，两个人同时用的时候CPU使用率升高，其中一个人没有声音等。具体情况你设法下到试试再说。
linux 以下linux，没特别说明的话都是指debian，默认的发行版本是wheezy。
多X方案 所谓多X，就是开启两个以上的X，每个显卡一个X。这样形成的multiseat保留了原生的一切能力，包括3D加速。只要你原生显卡支持，都可以做到。多X方案的第一个显卡可以看到console，第二个只能看到图形界面，不能通过C-M-F1切换到console。
但是多X的条件也非常严格，上面列的情况1是没戏的。大部分人的电脑都被划到了这种情况。即使你有幸，弄到了3, 5, 6三种情况中的一个，也要注意，两块显卡必须是同一厂家，最好是同一型号。这点尤其对pci显卡更需要注意，pci显卡和pci-e显卡显然不能是同一型号，但是必须是同一厂家。
这个方案最鸡肋的地方在于，3, 5两种情况只有在针对游戏特别配置的电脑上才有效，而这种电脑本身是非常昂贵的。这和降低系统成本的初衷相违背。
Xephyr方案 Xephry是一个X的模块，他的目的是使用内存作为X的输出设备。因此Xephry做出来的X可以将显示内容再显示到其他地方，例如作为其他X中的一个窗口出现，等等。
利用这个特点来做multiseat的思路基本是这样的。首先我们将两个显示器合并成一个虚桌面，如同我们常规做的那样，左边的窗口拖一下可以到右边。然后再开两个Xephry，每个里面包含一个标准的X，包括display manager，session，window manager等等。最后每个X分别用一套键盘/鼠标。这样出现的效果和multiseat是完全一样的。
这个方案的优点是，支持众多的机器，尤其是我们最常见的1情况。但是，其缺点和优点一样明显。由于我们操作的是Xephry，而不是实际的显卡，因此会缺少一些X扩展，例如3D。而且相比原生设备，Xephry方案会有少量延迟。贝壳做过实际测量，至少在播放普通视频的时候，60Hz的刷新率没什么问题，播放无卡顿。
这个方案有一个封装好的实现，帮你做了整个过程。(不过我没有测试)叫做MDM[4]。
虚拟化拖机 无论是windows还是linux，都有一个不算方案的方案。安装一套vmware，然后将vmware在其中一个显示器全屏，再把其中一个鼠标和键盘指定给这台虚拟机。这样也可以做到multiseat的效果。使用Virtualbox/Vitrual
PC也是完全一样的原理。
vmware中原生是不可以将鼠标/键盘指定给虚拟机的。关于这点，文档[6]给出了完整的解决方案。在.vmx中加入下面一行即可。
usb.generic.allowHID = &amp;quot;TRUE&amp;quot; 参考 Multiseat Documentation in x.org Softxpand BeTwin Multiseat Display Manager ourbetwin VMware拖机方法 </description>
    </item>
    
    <item>
      <title>从术前和术后红包说起</title>
      <link>//blog.shell909090.org/blog/archives/2190/</link>
      <pubDate>Thu, 07 Jun 2012 07:58:24 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2190/</guid>
      <description>六六的《心术》里面曾经说到，医生比较喜欢术后红包。因为术后红包心理负担小，只是患者表达感谢而已。
听上去是有道理的，毕竟我们还是可以相信，大部分人在其他条件相同的情况下，更倾向于选择不作恶。或者说，肚子吃饱的情况下，人会选择让自己的心里好受点。从另一方面说，术后红包毕竟风险小很多。术前红包是有风险的，如果手术失败，家属可能没法和医生打手术官司，但是完全可以打红包官司。即使不打官司，给过红包的家庭比不给的家庭更容易闹事。然而术后，好坏都定了，好的就收，不好就算。
从患者角度说，听上去也很不错。做好了有红包，做不好就算。很符合我们物质激励的特性。名气大的，成功率高的医生，自然红包拿的多。而名气小的，成功率低的，则红包拿的少。这其实是一种变相的小费制度。如果把医生的工资理解为基础工资，红包理解为小费。那么要拿红包就必须有足够的成功率，所以我们预期得到的是越来越好的服务。
为什么不行？
因为手术做都做好了，谁会给红包阿，同志。
住个医院都贵的要死，一个手术下来几万没了。这是一个家庭一年乃至更多年的积蓄阿。要说再去给医生红包，很多时候红包真的就变成红包了——也就100,200图个吉利，很多时候还毛都见不着。
其实术后红包的不风行，正是能证明医生有意图希望收到红包的证据。毕竟医生也是人，9年医科念出来，再熬个10年乃至更长，他也是希望获得与之相称的收入的。什么叫做与之相称呢？医科大学不好念，能进去的学生，同等分数的，读一般学校，熬20年后是什么水平？一年30W都算混的差的。医生不收红包的情况下，一年有30W么？同样，我们再拿专家说。普通医生再熬个20年，一年收入期望多少？你说专家不收红包，一年收入多少？
不收红包人家心里能平衡么？要收的话，能等术后么？
所以，即使有风险，也肯定需要收你的红包。如果不缴怎么办？肯定要变着法的杀鸡儆猴，否则这事情就没法干了。
所以，很容易的想到。既然目前术前红包是潮流，那么： 1. 医生肯定是希望收红包的。 2. 无论比例多少，肯定有被杀掉的鸡。
但是，我并不是说，红包就一定是糟糕的。如同我刚刚说的那样，如果我们能像交小费一样的缴红包，如果红包的机制透明化，无疑，对双方都是一个很有利的事情。成了才收钱，不成就退掉，只收成本。把医院的收入和手术的直接成功率挂钩起来，这样才能提高医院的水平——当然，贵的事情另当别论。
其实，中国的医改，正在扭曲和纠结的路上越走越远。看病贵，本来是医保的事情，要医院解决。医院是什么地方？同志，医院是营利性社会机构，不是福利院阿。就算你说医院是社会性的，医院应该便宜，医院应该像福利院一样，那也得政府给钱阿。别跟我说医保，医保针对的是个人，你进去看10W，国家报销8W，和医院没什么太大关系的。你有医保，看病确实像福利一样便宜，没有？那就像扒皮一样贵了。
而且医保降低了一些人的价格的同时，又产生了供需问题。你可以看看，天天往医院跑的，有多少是老干部，有多少是民工？往往老干部连破了个伤口都跑趟医院的同时，民工连大病都不敢去医院。这道理想想就能明白。一样的包子，卖你2块，卖他10块，你说天天往这里跑的是谁？实际上，老干部被过度医疗了，而民工则是医疗不足。不得不说，这是对中国“劳动最光荣”的极度讽刺。</description>
    </item>
    
    <item>
      <title>一个超微模板系统</title>
      <link>//blog.shell909090.org/blog/archives/2188/</link>
      <pubDate>Wed, 06 Jun 2012 03:29:57 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2188/</guid>
      <description>re_tmpl = re.compile(&#39;&amp;lt;%(.*?)%&amp;gt;&#39;) def template(s, d): return re_tmpl.sub(lambda m: str(eval(m.group(1), globals(), d)), s) template(&#39;&amp;lt;%&amp;quot;ddd&amp;quot; if abc else &amp;quot;eee&amp;quot;%&amp;gt;&#39;, {&#39;abc&#39;: 1}) 限制挺多，只能在&amp;lt;%%&amp;gt;中写一行代码，不能多行。不能用跨区块的if for等控制结构。但是对于功能需求不复杂，需要可变性强，又不希望引入额外库的地方还是非常实用的。</description>
    </item>
    
    <item>
      <title>上网本的发展</title>
      <link>//blog.shell909090.org/blog/archives/2186/</link>
      <pubDate>Mon, 04 Jun 2012 07:46:39 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2186/</guid>
      <description>看了一下，小上网本几年基本没发展。1公斤以下，3小时以上的本，和我三年前买的本比，只从3000降到了2000上下。没有什么更轻更能续航的本。也许是大众不接受这种流行方式，小上网本的核心实质是“操作终端”而非“独立电脑”，使用上网本/ipad/手机，都是需要在家里安放集成服务器的。我下面从几个方面，说一下我对小上网本的想法。
上网本前几年比较流行SSD，今年找不到了。我一直觉得SSD才是上网本的绝配，用微硬盘，倒是容量上去了，可是你需要把需要的数据全存里面么？我照片43G，其他数据15G，带全部的存档。加上影片，大概就上涨到100G。问题是，未归档的数据大概只有3-5G。归档数据带在上网本上干什么呢？你有多大机会用到？你不可能只用一个上网本而不用普通电脑。把90G+的存档数据放上网本不放主机很蠢，两边各放一遍更蠢。我真正需要的，是16G的空间，可以和我的普通电脑工作区同步。从这点而言，苹果的ipad和mbp才是绝配。
我一直认为，中国的上网本不是用来上网的。现在移动上网太贵了，真正我需要的流量，一个月大概要200-300，和光纤差不多贵。可是理论速度只有光纤的1/10不到，而且还不能总是达到。而且为了让各种设备上网，我还要备多张卡？现在的流行是两种趋势，一个是使用联通的套餐，通话贵就让他贵，然后用手机tether。另一个是该怎么用还怎么用。买一个3G路由器，然后用一个便宜的上网卡。
如果在国外，用ipad和mbp，那你是不用看我下面的话了。但是国内，暂时还没办法指望云，用android的，用windows的，更是如此。既然你没有云，又要长期同步ipad。最舒服的方式就是使用专业的nas，组成modem/router/nas的家庭服务组。</description>
    </item>
    
    <item>
      <title>人际关系网络的变迁</title>
      <link>//blog.shell909090.org/blog/archives/2184/</link>
      <pubDate>Thu, 31 May 2012 06:18:05 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2184/</guid>
      <description>人类是一种社群化的动物，一个人一般会和多个人发展出朋友关系，进而产生交际圈。随着人类的进化，交际圈的规模和特征也在不断变化。但是基本假定都是类似的。两个人为了维持朋友关系，必须在生活中抽出一定的时间进行共同活动。
如果我们能够回到6000年前，仔细看原始人类的社会交往模式的话(6000年前的埃及人已经在社会化耕种了，中国人民么，大概在有巢氏的带领下刚刚学会住在树上)。你大概会发现这么一个情况：大部分的人际圈子，都分布在半径1-5公里以内。其实这很符合常识。人一小时大概能走5公里，1-5公里的距离，每天要花最高两小时往返。当时人类并没有太高的耕种技术，每天花两个小时以上往返和别人交友对于大多数普通人来说是不可能的事情。当然，这也不是绝对化的定例。如果是游牧区，那么交友模式都会发生变化。人和人见面机会少，生活孤独，因此和耕种文明模式完全不同。如果是海洋文明，也会产生另一种社会特征。但是每种闻名的社会特征，基本都脱胎于当地交通运载能力和信息传递能力——例如典型的民主社会基础，希腊城邦，就是由海洋和群岛分割造成的文明。
这个模式一持续就是5000年，历史上，交友距离的第一次全局性增加得益于工业革命。在工业革命之前，人类的动力源基本只有几类。畜力，可移动，但是需要喂养，昂贵，普通人多数用于耕种。风力水力，不可移动，不稳定。还有人类自身。在工业革命后，人类第一次得到了可持续，可移动的外动力源。廉价，而且强大。火车和钢铁轮船是工业文明的代表作。自从大型交通工具发明后，人类的交友距离就大大增加了。这很容易理解。原本无法走出村庄的人，如果每周可以乘坐一次火车或轮船去附近的都市。他就很容易和附近村庄乃至都市的人发展出人际关系。而强动力源的产生也使得生产能力大大增加，普通人有那个时间和金钱来负担中距旅行的成本。
由于社会圈子的规模大大增加，因此人类社会在工业革命后起了爆炸性的变化。如果说人类文明的前5000年犹如一个缓慢加热的水锅，那工业革命后的1000年不到就是他的沸腾期。社会圈子的增大，首先产生的变化就是破坏传统社会结构。西方文明史我并不熟悉，以中国的传统文明来说，安土重迁是中国人传统的基本思路。由于社会圈子的强内聚，因此主体社交圈子都是以村庄或是城镇为基础的。在圈子内，由推举产生一些人，来维持圈子的稳定(族长制)。虽说名义上，国家是皇帝的，但是实际施行治理的，是每个村镇的族长和乡绅。实际上这是一种民主自治的典型，只是在上层要受到国家的管理。但是在近代，由于轮船在江面上大量运行，因此交往实际上跨出了地域的限制，从而使得地域自治和市场经济发生了强烈的碰撞。当然，我不会说这导致了辛亥革命或者别的什么近代重大变迁——那是其他因素的结果。然而，在文革结束后，中国(至少大陆地区)的传统社会圈系统实际上已经基本破灭了。
这个阶段的人际网络边界，实际上是受到了生产的限制。如果你足够有钱，那么走遍整个世界还是做的到的。然而从这个时代开始，另一项阻碍社会圈子扩张的因素已经逐渐开始显现——语言和文化。
第二次大的改进，起始于网络时代的开始。如果要我比喻的话，会将其比喻为世界初始之光。由于网络互联，分组交换技术的发展，因此低价的，普通人可以接受的世界范围通讯成为可能。如果只考虑文字，按照目前的网络通讯价格等比来计算(注意，这实际是不可能的)，上海一条20M的光纤2000一年，等比来说一条100kbps的线路10元一年。即使是偏远山区的人，也可以负担和巴西的通讯——这原本是世界的两端。如果没有语言和文化障碍，任何人——包括偏远山区的人，也完全可以发展出人际关系。
想必你也觉得不可能吧，这是理所当然的。即使是和我们文化相关性很大的日本，普通人发展社会圈子的可能性也不高。尽管你可能可以阅读一些日文文字，但是却不一定能明白其意思。在这种磕磕绊绊中，发展人际关系是很困难的。同样的困难更是横跨在中文和英文世界中——这是世界上使用范围最广的两种基本语言。更细分来说，中文还要分为Mandarin，Cantonese，Min，Hakka，Teochew等几个大的系统，这还不包括方言。英文则分为British，American，Australasia三种大的系统，不包括各种方言和pidgin。英文系统我不是很清楚，但是中文的几大系统间互通基本是不可能的。这使得看似连成一体的网络世界实际上分割成了以语言和文化为基础的几个区块。
同样以中文网络世界为例(因为我毕竟熟悉一点)，中国的网络很特殊，因为有GFW。但是实际上，即使去掉GFW，很多人还是只会上国内的网站。因为其他国家的网站，1. 没听说过，2. 语言不通，3. 没有朋友在用。这是国际巨头进入中国的巨大壁垒。实际上不仅仅是中国，所有华语使用者恐怕都有类似问题，例如香港和台湾的网络。国际上，twitter是主流，台湾是噗浪，大陆是新浪微博，这不能说和墙有关吧。
以中文语言系统世界的进化而论，实际上这些年看似是开放了普通话一家独大的限制，让各地方言都有了存活的空间。其实发生的事情则正好相反，网络极大的摧毁着各地的文化。台湾，广东是典型的双语言系统使用地区，当地大部分年轻人都可以同时使用Cantonese(或者其他地方方言)，同时使用Mandarin——这不是普通话一家独大是什么？更明显的是l18n的时候，你见过说做了一家中文网站的，希望做成英文版本。也见过英文网站的汉化。你何曾见过一家网站的“广东话化”？这种事情只有wiki那帮人才干的出来。大部分网站还是做一个普通话版本就算完成了中文化。这些年香港繁体都受到了很大限制，唯一还坚持中文文字多样性的只有台湾了。
从语言角度说，这是倒退。然而从社交网络圈子的角度说，这是进化。各地通行普通话的结果，使得中文世界基本只要会普通话就可以正常浏览网页。当然，从世界发展的角度来说，如果你要真正畅通无碍的在网上来去，英文才是必备语言。从这个角度来说，只怕汉语会逐步变成今日的广东话，在存留之间诸多挣扎。</description>
    </item>
    
    <item>
      <title>语言的效率差异3</title>
      <link>//blog.shell909090.org/blog/archives/2182/</link>
      <pubDate>Mon, 28 May 2012 02:13:32 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2182/</guid>
      <description>在总结前，我们首先搞明白三个问题的差异“效率的决定因素”，“语言效率差异”和“日常使用中造成运行效率差异的因素”。
代码的效率最根本因素绝对不是语言的效率，我一直这么确信。代码效率的决定因素必然是算法的正确选择和实现的优秀程度。这里面包括了正确评估问题，选择合适的数据结构，使用合适的算法等。例如对给定数据的高速查询，用红黑树去跑查询肯定跑不过预编译的哈希算法和哈希表。即使前者使用汇编实现，而后者只是python实现。(对于这点，我对比过一个大规模数据的查询，数据是固定的。数据库效率最差，C++用红黑树的map次之，效率最好的是python的dict，底层是hashtable。当然，为了防止某些人补充，我自己先说了——我最后用了stlport的hash_map)
语言效率的差异，有很多因素。例如编译型/解释型语言，动态语言和静态语言，是否带jit优化等，都会造成很大的性能差异。甚至同样是C，不同的编译和优化参数也会造成很大规模的差异，做优化的朋友一定心里有数。然而大多数情况下，决定语言效率的关键因素都不在语言自身的效率上，而是在于底层库实现的效率上。当然，如果底层库使用该种语言直接写成(我也比较喜欢这种风格)，那么归根结底还是考验语言本身的效率问题的。以正则测试为例，实际上python是一种性能很差的语言，但是在测试上并不很低。因为python的库实现是直接引用了C库，其效率仅仅是C加上一个不高的值。而lua得分不足只能说是库的实现比python差。
最后一个问题相信大家最关心，即日常使用中造成运行效率差异的关键。到底是什么，决定了我们每天写的代码的效率？
可能要出乎大家的意料，从实际测试来看，实际上是测试能力和可变性。我们能够大致预料某些性能特别差的情况，然而对于性能在50%-200%以内变化的细节，实际上是很难提前预测的。也许我们会“猜测”某种情况性能比较优秀，但是实现下来情况可能完全不是这么回事。例如我曾经就一个C代码进行优化，预期应当能提高4倍性能，当时测试的结果是性能提高3-5倍，但是实际生产环境跑下来觉得没区别。后来发现，我自己测试用的是-O0，而生产系统是-O2。我的优化实际上在-O2的时候就全部被自动优化掉了。如果你觉得你的经验够丰富，能够预测-O2会优化你的哪些代码。那么你可以考虑一下，CPU的指令流水优化呢？系统上所安装版本的libc的实现细节和内核细节呢？如果都能精通，您可以忽略我这篇文章。但是对于我自己而言，我只能预计某个做法可能优化，而不能确定。
这时候，对于这个优化的实现难易程度，和实现完成后进行测量的难度就成为了关键。尤其是精确测量耗费时间的代码，执行时的瓶颈，这些能力才是优化代码的关键所在。我曾经写过为什么python效率不比C低，有人不服。我说了，并且反复强调了，这个仅限于“两者的生产速度一致”这个前提下。实际上如果真满足这个前提，大部分情况下C这边都输的没法测试的。因为完成同样任务，python的编码时间大约只有C的一半到1/4。即使算上优化，python完成项目的时间，C都不一定能写的完代码。更不提后面还要进行泄漏测试，复查，复杂的调试。等全部通过，开始关注效率问题，生产时间早超了。
作为日常生产，我想大部分程序员都有这么个经验。决定代码质量的实际上是项目的时间是否充裕，程序员是否用心严谨，生产流程管理是否到位。除非程序员太差劲，否则技术性代码质量差异并不特别多——一般都是远远小于赶代码造成的严重问题的。如果您那里不是这样，我建议您更换一批靠谱的程序员。同样，在真实的日常生产中，大部分项目都没有那个机会对代码进行多次的复查，深层次优化所有问题。基本是写，写完了查，没有什么表面问题。然后检查一下，用户体验效率是不是很差，找最差的地方优化一下，然后直接交货。很少有像理论代码那样，反复优化和测试，甚至受到来自不同程序员的交叉检测和沟通。如果有这种级别的反复优化，毫无疑问的，C会是常用语言中的效率之王。在[shootout](http://shootout.alioth.debian.org/u64q/which-programming-languages-are-fastest.php)给出的速度评测上，仅有Intel自己实现的fortran超越了C。当然，我相信汇编会更加优秀。
然而杯具的是，日常生产中恰恰相反，至少我是没什么时间去优化每行代码的。大部分时候，为了处理一个排序问题，我不会去网络上找一个vector库，而是直接开一个100的数组，然后qsort。前方报错了，改1000的数组。在写python的时候，也不会精细的考虑每个地方是否都用了合适的方法，某点是生成器好还是list好。大不了觉得某个程序慢了，cProfile一把，然后对着花时间最长的几个点看看是否有问题。自我感觉而言，python项目在做完之余，我还能泡个茶聊会天，自然也有功夫去看两眼代码，是否有哪里写的太难看了。而C代码就是不停的debug，即使我好容易喘口气，也绝对不会想去再看了。
最后说一下sbcl，在自身性能测试中，是当之无愧的语言之王。速度是python的一倍不到，代码量是python的一半。常规来说，出错概率，维护难度，都是和代码行数直接相关。一半的代码量基本就意味着维护成本削减一半，而一倍的速度基本和java持平，在C后面紧追不舍。但是，以上常理对lisp均不适用。lisp的学习难度惊人不说，维护难度和代码行数没有直接关系，而是取决于写作者的水平。水平越好的写作者，代码越容易维护，反之，初心者写出来的玩意那是看都看不懂的。冰河在博客上说他找了个职业lisp程序员的工作，人家视若珍宝。我不知道是哪年的blog，但是从老板的角度来说，这才是程序员的悲哀。老板喜欢什么语言？最好有个点子，跑去人才市场插个牌子，上书“我要人”。然后就会有一堆人云集过来，脖子上面都套着“五行一元”，“精通XXX”的草标。抓一只大个的，给个项目经理的头衔，让他管着别人。每个月扔一麻袋饲料下去，过两个月就能收程序了。
看起来和农场有点像，不是么？遗憾的是，lisp看来是达不到这个要求了。全国能用的python程序员不会超过5000，lisp程序员大概连500都不到。如果哪个老板不幸脑残，用了lisp来做项目，那么在招人这个问题上会比python更难执行。从这个意义上说，这才是lisp程序员不流行的关键——不好找工作。即使运行效率再高，语言本身再好，也没法过老板那关。</description>
    </item>
    
    <item>
      <title>天朝重大灾害事件的行为思考</title>
      <link>//blog.shell909090.org/blog/archives/2180/</link>
      <pubDate>Thu, 24 May 2012 01:54:08 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2180/</guid>
      <description>当事人 在天朝遇到重大灾害事件，当事人的指导思想是自主逃生，切切不可指望救助。这点不仅是在天朝，而且在全世界各个国家都同样成立。总体来说，天朝救助动员体系的效率在全球那是首屈一指的高。然而比较操蛋的事情是，往往在救助的时候会来几个记者或者领导。这时候不但不能快速把你救出来，而且在慢慢救助的过程中，你还会受到“你现在疼不疼阿”，“坚持住，我们的人民解放军马上就把你救出来拉”之类的废话骚扰。更操蛋的是，你还得表现出受灾的痛苦和得救的感激——不过鉴于天朝有效的动员体系，你就权当缴“表情税”了吧。
当然，在救助的时候，一个更可怕的事情是，你受灾的事实可能会对领导的政绩产生不良影响。因此，当有一点证据表明可以不救的时候，哪怕不足72小时，你都可能被直接埋掉。所以，更不要指望救助。
具体来说，有以下几个具体建议：
受到外来冲击的时候先护住头和胸，尤其是后脑勺。缺胳膊少腿的叫残疾人，缺脑袋少心脏的叫僵尸。
尽量逃离灾害现场。你永远不知道那里会再发生什么问题。
再贵的东西都没有命值钱。
被困等待救援的时候，最容易死亡的因素是缺水。如果你有瓶水，千万别浪费了。如果有个瓶子，千万别浪费自己的尿。如果你什么都没有，那就想法弄一个。
NGO 作为NGO，在灾害救助的时候，首要任务是组织，管理，信息传递。尤其是最后一个，千万注意时效。网上经常出现无效的求助，尤其是围脖出来后，情况尤其严重。有人曾经验证过，一条求助推，被转发上千次。但是之后的感谢推，只有不到百次。结果就是，事情已经做完，或者过时，但是信息还在传递。这种无效的信息垃圾，会严重的干扰救灾体系的运作。
作为一个比较好的对应方案，建议可以由几个人，携带便携电脑，在灾害现场收集信息，来源，时间，然后通过邮件发送给联系人。使用邮件的好处是，可以离线收集信息和编写，通过3G网络发送，信息量大，冗余数据消耗小，对带宽要求小。即使没有3G网络，邮件也可以通过tf卡携带工作（就是把邮件输出成EMAIL编码，托人带到有网络的地方发送）。不过，为了保证邮件发送人的可靠，建议考虑邮件签名技术。
受灾后，最重要的信息是，有哪些人受灾，他们需要什么物资，他们需要联络什么人（寻人报平安）。正确的第一现场信息，有助于征集社会资源，解决实际问题。为时效性考虑，每种信息都应当有一个注销和过期特性。
旁观者 作为旁观者，千万不要试图录像，或者表现出试图录像。如果你手机有偷拍能力，偷偷的拍是可以的，被发现了就删除，或者干脆把手机扔给对方，不要拿自己的命开玩笑。你对面一群人的领导，可能在这次灾害中锒铛入狱，也可能风平浪静。如果你的录像有害他入狱甚至挂掉的可能，他不会介意让你直接挂掉的。
如果你平时要救助别人，注意留下你不是肇事人的证据。但是在大型灾害面前，你没有被起诉的可能（总不能说地震是你搞的吧），因此不要吝啬于给与帮助。注意，在帮助别人的时候注意保护自己，不要轻易的到危险地带去帮助别人。如果你也变成当事人，别人还得帮助你。如果你挂掉了，家里人会伤心。
在灾害发生的第一时间，你的捐献不要考虑审计，红十字，之类的问题。就算知道有问题，你的捐献能够让多一个人活下来，就比坚持真相更有意义。然而做为后续捐助，我的建议是，自己做，或者不捐。中国的救助体系已经变成了一门生意，而且很不透明。当你不知道你的捐助做了什么用途的时候，你可以选择不捐助。当然，如果你和几个朋友（注意，这里一定需要互相认识，因为针对非特定对象的募集是违法的），有人愿意去开车送一些东西什么的，那会更好一些。
如果你到了现场，注意收集信息。在灾害信息全靠官方，官方信息全看领导的天朝，有个其他的信息流通渠道是非常重要的。
具体来说，有以下几个具体建议：
不要围观，尤其是在进出通道上围观。
看到有人受伤，不要着急忙荒抬着跑，先看看有没有伤，意识是否清醒。如果有骨折，固定后再移动，否则会产生二次伤害。
如果是外伤，尽力止血。如果外伤见骨，或者有脊髓液流出，不要着急包扎，谨防感染。可以在靠近心脏端进行扎紧，减少血流。
如果呼吸心跳停止，做CPR。CPR具体参考CPR手册，或遵医嘱。实在不会的，简单来说，捏住鼻子往嘴里吹气，然后胸压15次，两秒一次。特别注意，必须保持气管通畅，没有喉管闭合或者呕吐物堵塞，否则人工呼吸一下就送命了。另外即使出现心跳呼吸，也尽量坚持直到救护车来。当然，最后一点在灾区急救中就有点奢求了。</description>
    </item>
    
    <item>
      <title>几个小技巧</title>
      <link>//blog.shell909090.org/blog/archives/2178/</link>
      <pubDate>Wed, 23 May 2012 03:17:34 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2178/</guid>
      <description>virtualbox中使用物理硬盘 省略权限，物理硬盘分区结构基础知识，最核心只有一句话：
VBoxManage internalcommands createrawvmdk -filename sdc -rawdisk /dev/sdc -relative 在不重启的情况下调试awesome的方法 省去安装和man，也只有一句：
Xephyr -ac -screen 1024x768 -br :1 </description>
    </item>
    
    <item>
      <title>python中调用C的几种方法</title>
      <link>//blog.shell909090.org/blog/archives/2176/</link>
      <pubDate>Tue, 22 May 2012 03:12:44 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2176/</guid>
      <description>引言 别废话了，我觉得这都应当是常识的。除去最后几种包装框架，剩下都是基本知识问题。即使不知道怎么做，也应该知道有这种方法。所谓经验，很多时候不是把知识装脑子里，而是把索引装内存，数据丢硬盘。
C模块 最基本的方法，直接写个C模块。具体很长，你去找python-doc，看“Extending
and Embedding”这章，全看完就差不多了。如果没空，看几个例子就上也可以。
优点：基本没有，写起来很麻烦，要维护额外的C代码，还有交叉版本固定，跟随C升级等等麻烦。唯一的优点，就是这是唯一一个“绝对没有问题”的方法，而且没有额外依赖。如果下面几个路子全出了问题，就用C模块吧。
ctypes 去看python-doc的ctypes模块。本质上是提供一个C模块，去载入和使用其他模块。
优点：写起来很方便，修改便捷，而且跨各个python实现。
缺点：只能调用动态库，对静态库没啥办法。某些复杂数据类型的转换很麻烦，据说有时还有效率问题。
swig 自己找，一个叫做swig的项目，目标是制作C语言的各种平台包装。实现上看，会生成一个动态库和一个py。
优点：跨平台多。如果你的C代码不仅是python需要调用，还有其他语言（例如php），那么swig用起来很舒服。
缺点：编译时引入额外依赖，而且调用范式也是受限的。不过别担心，一般你也用不到范围以外的范式。
boost.python boost的自带库，只能用于C++。
优点：对C++的支持是极好的。
缺点：要依赖boost这么个坑爹玩意，摔。
Pyrex 我知道douban的python-libmemcached是使用这个来包装的，不过没用过，不是很清楚。</description>
    </item>
    
    <item>
      <title>语言的效率差异2</title>
      <link>//blog.shell909090.org/blog/archives/2174/</link>
      <pubDate>Fri, 18 May 2012 07:14:24 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2174/</guid>
      <description>问题 为了更深入的测试语言，我做了一个经典问题——24点。
这个问题主要是测试递归，循环效率，还有数组和树的复制性能。
为了简化问题，方便测试，我的问题是这样描述的：
有一个数组，里面有多个正整数。有一个操作数组，其中每个都是双目操作符。找出以两者构成算式，其值等于给定值的所有表达式组合。 要求不得遗漏，可以有少量重复。例如可交换算符的交换同构暂不做排重。 实际运行的时候，取+-*/和3 4 6 8，运行100次，查看时间消耗。正确的单次输出结果应当是这样的。
(((8 + 4) / 3) * 6) = 24 (6 / (3 / (8 + 4))) = 24 (((8 + 4) * 6) / 3) = 24 (((8 / 4) + 6) * 3) = 24 (((8 - 6) * 3) * 4) = 24 (((8 - 6) * 4) * 3) = 24 (((3 * 4) - 8) * 6) = 24 ((8 - (6 / 3)) * 4) = 24 (((4 + 8) / 3) * 6) = 24 (6 / (3 / (4 + 8))) = 24 (((4 + 8) * 6) / 3) = 24 (((8 / 4) + 6) * 3) = 24 (((4 * 3) - 8) * 6) = 24 (((8 - 6) * 3) * 4) = 24 (((8 - 6) * 4) * 3) = 24 ((8 - (6 / 3)) * 4) = 24 python python的解很复杂，长达31行，以下是我写的解。当然，还有更简单的版本，我可以用eval来干这个事情，代码只有24行，但是确实给人很evil的感觉。</description>
    </item>
    
    <item>
      <title>语言的效率差异1</title>
      <link>//blog.shell909090.org/blog/archives/2172/</link>
      <pubDate>Mon, 14 May 2012 02:52:27 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2172/</guid>
      <description>问题 为了测试语言的效率，做一个正则解析。
预先说好，正则解析的问题是老板正在做的一个实际问题，我把其他和效率无关的部分去了。因此我接受“用法不正确”这样的反驳理由，但是不接受“这不是典型用例”的理由。我欢迎你指正我的用法错误，或者对语言不了解导致的效率低下，但是别来和我吵吵这种例子太特殊。另外，在调整代码和评估速度的时候，顺便注意一下代码行数。我知道用汇编逐行写和优化会很优秀，但是这对实际工作基本没有帮助。
问题是这样的：
有一个文本文件，每行两个数，要求解析出来这两个数。
我用python生成了数据，代码是这样的
with open(sys.argv[1], &#39;w&#39;) as fo: for i in xrange(500000): fo.write(&#39;%d %dn&#39; % (i, random.randint(0, 10000))) 正则分析速率，是个典型的CPU密集操作。对于非编译型语言而言(这里的编译是指正则表达式的解析预编译，实际上除了lisp还真没有编译型的，即使是go也是现场拿到正则进行解析的)，这主要是看正则库的实现效率。很多时候，语言的效率问题并不取决于语言本身，还取决于语言的库的实现。大部分情况下我们都不可能砍掉系统的库重新来一个，那还不如换一门语言。
python 我首先贴出python语言的解答。
reline = re.compile(&#39;(d+) (d+)&#39;) def main(): with open(sys.argv[1], &#39;r&#39;) as fi: for line in fi: reline.match(line).groups() 这是性能
real 0m0.466s user 0m0.436s sys 0m0.012s common lisp 我找了N个正则包，实际能用的只有ppcre。有些包号称很快，实际测试下来还不如ppcre。
(require :cl-ppcre) (defun grepfile (filename) (let* ((cl-ppcre:*use-bmh-matchers* t) (cl-ppcre:*regex-char-code-limit* 256) (scanner (cl-ppcre:create-scanner &amp;quot;d+ d+&amp;quot;))) (with-open-file (in filename) (loop for line = (read-line in nil) while line do (cl-ppcre:split scanner line))))) 代码在slime里面测试(time (grepfile &amp;ldquo;data.</description>
    </item>
    
    <item>
      <title>新闻和八卦和概率聚集</title>
      <link>//blog.shell909090.org/blog/archives/2170/</link>
      <pubDate>Fri, 11 May 2012 02:25:49 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2170/</guid>
      <description>新闻和八卦有个共同点，就是会扭曲我们常规的概率体验，例如：今天摔了一架飞机。我们的结论往往是，飞机好危险。然而，世界上有很多没问题的飞机，这个你是不会从新闻和八卦里面听到的。因此，以这些东西为基础得出的结论，往往是错的。
从这点说开去，其实我们会发现很多东西都不可靠。首先说八卦。八卦之不可靠是全世界皆知的，要是有人神神秘秘和你说个事情，要么是一点不着边的瞎猜，要么就是一枪命中的内幕。可惜的是，到底是哪个，在事先完全无法分辨。香农说，信息就是减少不确定性，从这点来说，这些八卦里面的信息量是负数——本来一个事情挺明白，八卦一传，搞不好当事人都不明白是怎么回事了。
其次我们再说新闻，新闻倒是有信息量，但是新闻的不可靠也是人尽皆知。中国的文艺宣传理论就不去说了，老美也经常骂，大新闻集团只挑符合他们利益的说。不过幸好，人家新闻利益集团有好几个，岳飞打张飞之下，总算还有不少东西给披露出来。
最后，你的亲眼所见一定是真么？我在以前的一篇blog里面说过，我对问题的分析是偏颇的，因为我做不到随机取样。我周围的朋友，一定是具备某个特性/符合某个范式的。例如熟悉电脑，受良好教育的城市青年，中国人，这些总是没办法的事情。如果以此为样本来分析相关问题，相信一定会南辕北辙。例如你以我的gtalk和twitter好友来分析python和emacs用户的比例，那一定是高的异乎寻常。这是当然的，我本来就是以python和emacs作为自己的标签，无论是朋友也好，会fo我的人也好，多半是此道同好。以此类推，若是你不仔细分析，即使以亲眼所见，也未必能得到结论。</description>
    </item>
    
    <item>
      <title>全部和谐音程表（泛音表）</title>
      <link>//blog.shell909090.org/blog/archives/2168/</link>
      <pubDate>Thu, 10 May 2012 02:14:04 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2168/</guid>
      <description>\&amp;gt;\&amp;gt;\&amp;gt; for i in [(i, j, 12 * math.log(float(j)/i, 2)) for i, j in itertools.permutations([1,2,3,4,5,6], 2) if i &amp;lt; j]: print i ... (1, 2, 12.0) (1, 3, 19.019550008653876) (1, 4, 24.0) (1, 5, 27.863137138648348) (1, 6, 31.019550008653873) (2, 3, 7.019550008653875) (2, 4, 12.0) (2, 5, 15.863137138648348) (2, 6, 19.019550008653876) (3, 4, 4.980449991346124) (3, 5, 8.843587129994475) (3, 6, 12.0) (4, 5, 3.863137138648348) (4, 6, 7.019550008653875) (5, 6, 3.1564128700055254) </description>
    </item>
    
    <item>
      <title>论医</title>
      <link>//blog.shell909090.org/blog/archives/2166/</link>
      <pubDate>Wed, 09 May 2012 09:09:01 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2166/</guid>
      <description>医生的道德标准 要摆正医患关系，首先就必须将医生的道德标准降下来，从“白求恩精神”，降低到一般人标准。
为什么？有一则故事，叫做“子贡赎人”，挺有名的，大家可以自查。跳过故事本身，我直接说其中的观点：
如果将道德标准提高到没有人能够接受的地步，就不会有人照做了。
类似，大家都是人，为什么让别人去遵循“白求恩精神”，或者其他变态的精神，而让自己能够得利呢？拥有这种精神的毕竟是少数。以这个为标准要求多数人的结果，就是没有人能够成为医生。
医生的标准，只要能够诚实的提供服务就好了。动辄就拿奉献说事，实则是用大帽子压人，和文革无异。
当然，现今最主要的问题，是以白求恩精神要求医生的同时，连诚实服务都贯彻不下去。这种动辄涉及人命的事情上不公开透明是会出人命的。只要有一小撮是贯彻不下去的，那病人就会连剩下的医生一并怀疑，然后杀医生的戏码就会层出不穷。
貌似要立法阻止杀医什么的，其实我说，这也就是对纯粹的医闹管用，真的爆上新闻的，多半不会是医闹。道理很简单，医闹的目的是拿钱，耍赖撒泼软语哀求的目的都是拿钱而不是报仇。就算他再和医生横眉竖眼，也不会往死里下手——真的往死里整的，多半是豁出一条命的家伙。人不畏死，奈何以死惧之。解决这个问题的最好途径不是阻拦，而是有个心平气和能让他解决问题的途径。
不实施抢救的道德标准 我认为，以下两种情况下，不实施抢救不应当受到责难。
病人死亡。 病人不可避免的向死亡发展，其中会为本人或家属带来极大痛苦。 医疗会耗尽社会的剩余资源 我觉得这是不言自明的。人类社会从原始社会仅够自己温饱，发展到目前的状态。实则目前一个人的工作供养数人足矣。或者换个表达方式，全球所有人所需的食物/衣物/住房等资源，并不需要所有的人类进行生产。若非如此，贫困救助体系和养老体系都没有发展的前提。多余的人产生的物资，即是社会的剩余资源。
社会目前的剩余资源，必然会有一个出口。一方面，第三产业，娱乐业，都是基于剩余资源的。也可以看作，从事生产的人为他们提供食粮，而他们为从事生产的人带来娱乐。而另一方面，科技发展，医疗和医疗技术发展，也是基于这些资源的。
随着科技发展，人类的剩余资源冗余度会越来越大。人类需要的必需品只需要更少的人进行生产，更多的人会投身非直接产生必需品的行业。在这种情况下，我更希望他们参与医疗和科技发展。并不是说娱乐业不好，或者不需要。只是科技和医疗能够带给人更好的生活——我是这么相信的。</description>
    </item>
    
    <item>
      <title>升调降调的规则</title>
      <link>//blog.shell909090.org/blog/archives/2164/</link>
      <pubDate>Mon, 07 May 2012 09:21:06 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2164/</guid>
      <description>为什么C加一个升调变成G？
这个要从大调式讲起。
大调式是以大三度为基础构建的调式，主音到中音为大三度，中音到属音为小三度，两者构成大三和弦。主音到属音为纯五度，属音到主音为纯四度，大调式的三个基础音之间，都是和谐音程关系。以C大调而言，就是do mi so。
好吧，C大调之所以叫做C大调，是因为以中音C为do。那么G大调呢？以中音G为do？对的，问题是，C大调的所有音，是否能够不做任何变化的构成G大调的音？
这是不可能的，C大调的音不做变化唯一能够构成的只有a小调。G大调一定需要对C大调的音做升降的。
为什么？因为C大调的音程关系是全全半全全全半，这个在小学就教了。通过这个，你可以数出上面说的三个纯音关系。当我们位移到G=do的时候，你会发现，不做变化的话，音程就变成了全全半全全半全，这就糟了。所以，需要对C调的fa(即F)升半个音，来回复大调调式。
常识上我们知道，12平均率是对称关系，所以上述过程可以运用数学归纳法作用于整个中音音阶。即，每个大调可以通过升该调中的fa半个音，变成另一个大调。后者刚刚好比前者高一个纯五度。
降调关系亦然，可以类比。
小调关系亦然，不过小调使用全半全全半全全作为结构，主音到中音为小三度，中音到属音为大三度，两者构成小三和弦。主音到属音为纯五度，属音到主音为纯四度，小调式的三个基础音之间，也都是和谐音程关系。
稍微数一下就知道，小调式上的所有音，可以构成比自己高小三度的大调，两者称为关系大调和关系小调。
虽然音是一样的，然而主音中音属音的位置完全不同，因此调式色彩完全不同。</description>
    </item>
    
    <item>
      <title>关于翻墙服务几句</title>
      <link>//blog.shell909090.org/blog/archives/2162/</link>
      <pubDate>Fri, 04 May 2012 02:09:39 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2162/</guid>
      <description>目前有很多服务，其实我们都是按照非正规用法在用的。例如github，看上去像是个源码托管服务，我们拿来当blog用。GAE，看上去像是个代码托管服务，我们当翻墙工具用。空间，常规都是发布应用的，我们也拿来翻墙。
对服务的非正规用法，我们首先把这个命题分几个类。一类是服务本身没有对用法做出特殊假定，但是你的用法和传统用法相违背，例如VPS传统是作为私有主机用的，用于发布网站。但是天朝人民经常用VPS当作云存储，或者是VPN。作为这类用途，我觉得是没有任何问题的，服务商本身就没有限定你的应用类型。
第二类，是服务商默许或者半鼓励你作为特殊用途应用。例如github并不反对你用他作为blog。这也没问题。
第三类，服务商明确反对的用途。例如利用空间来翻墙。一来ssh流量并不计入你的流量限额中，二来长期使用空间翻墙会导致空间的服务器地址在中国被封。前者影响成本，后者影响销售。因此，很多空间商都封锁了ssh的跳板功能，例如DreamHost。
也许有人会骂，空间商为什么要阻止ssh，这是对自由人权的破坏什么的。我觉得这压根是骂错人了。如果你无法自由浏览你想要浏览的网页，你需要骂的是阻止你访问的人，而不是别人。空间商既没有封你，也不是帮凶。通过对人有害的方法获得自己想要的利益，别人阻止你还骂人，这是流氓嘴脸。
第四类，服务商没有明确回应，他们可能对此一无所知。这种情况最复杂，也最值得讨论。
无论空间商默许还是反对，我们都可以看作是一个附加合同。这种事情你同意就接着用，不同意就换家人，市场经济大家好聚好散。但是服务商没有明确回应，那么事情就比较暧昧。我倾向于将事情分为两个阶段，或者类型。一类是影响较小，或者刚刚出现，服务商有理由不知道。这种阶段下，该怎么用就怎么用。直到服务商有表态为止。另一类是我们有理由相信服务商知道这类用法。在这种阶段下，你不妨参照第二类。
当然，这里顺便说另外一个话题，就是很多人对翻墙的要求是——免费。
我去阿，你在中国网络上玩多了，啥都要免费，有没有写信给电信要求宽带接入免费阿。你要是真没钱，要么就不用，要么就学学怎么让自己出去。
天下的特权有几类的，一种是你通过努力来获得某种特权，一种是你付钱让别人帮你获得这种特权，一种是左求右拜，借到某种特权。这特权还不稳固，有点问题就让人收了回去，因此不得不小心翼翼，缩着尾巴做人。且不提现实中有个头痛脑热，行政手续，求爷爷告奶奶的诸多无奈。那毕竟很多时候还是不得以而为之。网络上凡是有点大小P事，全是“360度冰天雪地裸体跪求”，就这种人还自诩为“不食嗟来之食”之后，实在让人叹息。
墙的存在意义，就是要“拦截大多数”。要稳定翻墙，基本就两种途径。一者是牛，自己付出辛苦，学会了整个过程，从而翻墙出去。或者你付钱，弄到了翻墙帐号，从而翻墙出去，这也是一种。这两者都算的上少数，剩下的就是绝对的大多数。既不付钱，也不想付出辛苦，张口就求各种方法的人不知有没有想过，当某种方法会的人多了，墙自然就会把这种方法连根铲掉。法子不能用了，瞬间破口大骂给法子的人，不知道脑子里转的是什么逻辑——或者是，他们其实想过，只是：
在中国，只要考虑三天后的事情，三个月后的事情谁说的准呢。 在网络上求爷爷告奶奶也是一种辛苦阿。 ——我已经连叹息都发不出了。
最后一个话题，如果你的某种对服务的应用，对其他人会产生伤害怎么办？例如，你用某个空间翻墙，这个空间IP就可能被墙。你用GAE翻墙，GAE就会被墙。你在网站上发表很合理的言论，自己没事，站长进去了。
首先请允许我就最后一个例子向中国的有关部门表示无比的XXX。。。就这精确度还好意思指责人家老美的导弹？
我们先说最后一个。很多人往往鄙视中国的网站管理者，我写个无比正常的内容你都给我删了。实际上，在一切不正常都当作正常的国度，再正常的内容都可能是不正常的。我是挺同情网站的管理者的，删把，道义上挺站不住的，不删吧，自己进去了。某种意义上说，开网站是为了赚两个钱顺便提供娱乐的(当然，很多人是反过来的)，而不是为你表达言论挺身而出的——真是这个目的开的网站现在站长的骨头都在长草了——从这个意义看，删，不是恶。如果你要指责，应当指责的是这个制度和产生这个制度的原因。
但是，我又要但是了，这也有个度。删本身不是恶，但是捕风捉影，删了不说，不删，偷偷让别人看不到，这就沦为不道德了。只是在中国，各种事情交错纠缠之下，人人皆提心吊胆提防别人，往往事情就会走了样。
这里插一个前两天的段子。魔都地铁是要安检的，大家知道。坐地铁的经常听说保安和你争执两句就躺地上装死讹钱的例子。前两天过地铁的时候，把包拿给保安检查。保安摸到我的饭盒，说，这是啥阿。我刚要说话，旁边保安示意放行，小声说，摸坏了你赔不起。
——那地铁安检的结果就不言自明了。
因此，在层层把关的网络审查中，往往下层执行的东西和上层想的差了十万八千里。其距离大概就和客户心里的网站和项目经理笔下的网站和工程师手下的代码的区别差不多。
当然，即便结论如此，我还是管我自己。我的blog都是在自己的域名下面——结果被封，也是自己的选择。如果发到其他网站，能不能留，留多久，就看别人的意思了。
至于使用GAE翻墙的问题，我觉得适用于我们有理由相信服务商知道的情况。我相信Google一定知道上面有人放什么网站，做翻墙用途。既然他没有反对，我们可以看作是他默许。</description>
    </item>
    
    <item>
      <title>dvc和vc简评</title>
      <link>//blog.shell909090.org/blog/archives/2160/</link>
      <pubDate>Thu, 03 May 2012 03:28:18 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2160/</guid>
      <description>我有必要换git么 实话说，这得分干吗。目前的推荐是，如果是企业级项目，对权限要求比较严格，你必须用svn。如果是普通项目，你可以尝试使用git，但是这并不表示git是最适合你项目的。有的时候svn比git合用的多。
svn是什么模式 svn的核心思路是，取出，修改，提交，合并。即，你从核心库中取得数据，修改，然后提交上去。如果有两个一样的修改，那么要求你进行合并。当然，svn工具会首先尝试自动合并，然后再让你手工干。但即使如此，合并的时候还是很费力。
svn的模式很容易理解，然而在使用中却有两个实际缺陷。
保存数据的唯一方式就是提交，而提交是不可撤销的。 必须连接核心库使用。 第一点问题，就是说，如果你希望暂时保存一下当前的修改状态，然后进行某个测试性修改。如果失败，退回当前。抱歉，做不到。你的提交一定会进入svn库。虽然你可以退回到你提交前的版本，但是很麻烦，而且版本记录不会消失。而第二个问题更加致命。如果在网络不稳定/没网络的时候，还干不干活了？
因此，svn的设计模式并不鼓励你提交。当你有修改的时候，你必须保持修改的状态，直到某个稳定的状态。你需要检查代码是基本可用的，然后才应当提交。svn提交有个基础原则，不能塞住head，讲的就是这个。
所以有了hg hg正是为了解决上述问题而出现的。hg实际上是用python实现的，解决上两个问题的svn。
hg拥有本地版本库，这解决了离线模式。至于暂存性提交，你可以在本地随便提交。只要不提交到核心库上，就不会导致塞住。如果你觉得本地库不行，可以直接重新co，而不进行push。
git和hg哪个好 锤子和扳手哪个好？我永远无法回答你这个问题，因为这两个的目标根本不同，因此根本没有可比性。同样，git和hg的工作流程和模式完全是两回事，因此不要问这个问题，没意义。
哦，那么git是 git的设计核心思路，是取出，分支，修改，提交，合并分支。git的分支是处理工作的利器。
要彻底理解git，你必须接受平行世界假定。假设世界并不是顺序发展的，由于你的选择不同，而会变成不同的几个分支。git可以让你在分支间自由穿越，并且让世界变成某个分支上的某个点的状态。你可以重新选择，产生一个不同的分支。当你需要时，可以对两个分支进行合并。如果两个分支从源头分开后，对世界的影响各自不同，那么合并就是自动的。
git的同步就是在同步这颗世界树。树扩展成什么样子和你在树的什么位置没有关系，因此fetch后如果不chechout，那么就不会应用最新的修改。
我没看出多大区别 实际是非常大的。有了平行世界假定，我可以正交的对一个源码做两件以上不同的事情。而在hg中，虽然也可以做两个不同的分支，然而却很难在两个分支间切换，从而使得切换到做另一件事情非常困难。这也导致了一个人实际上只能做一件事情，否则就无法将过程同时纳入vc管理，又满足正交。</description>
    </item>
    
    <item>
      <title>首次bsp日记</title>
      <link>//blog.shell909090.org/blog/archives/2158/</link>
      <pubDate>Wed, 02 May 2012 03:09:03 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2158/</guid>
      <description>第一次参加BSP，还不错拉。因为以前没参加过，所以等搞明白了这个是干吗的再和大家说。
BSP是bug squeeze party的简称，简单来说就是修错会。debian马上要发行7了，在此之前有很多的bug没有修复。其中有一种是RC bug，即运行就会出大问题的bug，或者干脆没法编译。无论哪个，都会导致这个包不能进入最新的发布。有些bug很麻烦，需要maintainer和author沟通，这个没有办法。但是有些问题解决起来很简单，只是因为后果很严重，作者又暂时没空处理，导致包无法进入stable，实在很无谓。BSP的目的，主要是以非维护者上传(non-maintainer upload)的方式修复这类bug。因为包不是自己的，所以礼貌上，只修复半个月以上的rc级别bug，其他的留给maintainer来处理。
BSP的主要目的，就是这么一个苦力会。没有挂名，最多只有一条changelog记录，还要大量寻找和修复bug。不过BSP相当重要，因为很多maintainer往往有一段一段的不活跃时间。这时候即使再简单的问题也不会处理。按照debian的规则，别人也不会帮他处理。除了BSP，很少有一批人会专门找这种简单的Bug来修正。如果没有BSP，debian stable发布的时候一做RC冻结，就要少掉很多有用的包。BSP更大的目的是，交流和传授debian打包和除错的经验，唤起人们的关注。也许在会后，如果有人看到一些简单bug，会使用nmu的方法给与修正。不过BSP到确实是有一个额外加成的好处——基本变成了签名会。昨天估计是中国大陆地区首次DD数量接近其他人数量，我一下弄到了5个签名，2个DD一个Ubuntu员工。加上原来就有的zigo签名，我就有3个DD签名了。
本地BSP是在thomas的公司举行，欧特家博士匹萨厂商赞助了我们两天的午餐——微波食品匹萨。第一天来的人比较多，很多都是纯新手，大概有20多人。Zigo倒是在网络上说会帮助新手，但是纯新手看到debian打包系统根本无从下手，所谓指导什么的也无从说起。很多人一天一个bug都修不掉，甚至都看不懂，很有挫折感，估计有不少有热情的人在第二天就这么默默退散了，第二天只来了15个左右。
我主要是以修复自己的问题为主，python-snappy和python-formalchemy都升级到了最高级，并且修复了自己以前打包的一个问题。至于RC bug么，我修了一个。两个包在python中命名冲突了，所以在debian中需要声明为conflicts。另外我评审了一下，最终还是决定关闭了python-libmemcached的ITP。虽然对douban很不好意思，还让他们修了一下。但是python-libmemcached依赖于libmemcached，而后者已经逐步升级到了1.0.X版本，但是douban为了稳定使用，是sticky在0.4版上的。因此当更新的debian发行时，实际上python-libmemcached和系统中的libmemcached不是一回事。因此，我不能依赖libmemcached的维护者，而是需要自己去维护后者——没办法，我就是怂了。python-libmemcached的爱用者，还是自己打包吧。我倒是可以公开打包文档。
另外，我在想是否要集合一批python/debian的用户，来做投票。例如，python的一个容器——flup，在debian中实际上已经orphon了。如果有足够的人投票，我愿意为flup做接手维护工作。不过目前debian下问下来的结果，大家对flup没什么太大兴趣。</description>
    </item>
    
    <item>
      <title>关于昨天&#34;google drive你这是在找死&#34;的补充</title>
      <link>//blog.shell909090.org/blog/archives/2156/</link>
      <pubDate>Sat, 28 Apr 2012 07:04:54 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2156/</guid>
      <description>随手就写害死人阿。
昨天写了一篇google drive你这是在找死，结果被人指出了错。我忘记注明了，没有文件夹上传的是android版本，linux版没有客户端，windows版可以看到客户端下载，但是我目前没有确认下来有人能用。
即使如此，我还是觉得google drive不好用。
基于文件的数据管理 基于文件的数据管理很简单，一个文件系统有很多目录，每个目录可以放文件或者其他目录，文件里面就是各个程序的数据。基本上每个用电脑的人都知道基于文件的数据管理是怎么回事。
问题是基于文件的数据管理很不好用。
文件就有文件名，我需要找一个文档，里面是上个月的财务数据，但是我不知道叫什么文件名，这种需求并不少见。然而，要在文件系统上干这个事情，你只有搜索所有doc/xls文件，然后一个个看。
蛋疼不蛋疼阿。
基于文件的数据管理的理由，多半因为多文件组合。例如，我有一个html，里面引用了两张图片，一段音乐。在html里面，我只要写明其他文件的文件名，就自然可以指定对其他文件的引用。这省去了“复合数据存储”的烦恼。但是，大部分情况下，我们用不到这个。
因此，目前逐步在向另一个方向过渡，基于数据集合的数据存储。
基于数据集合的数据管理 数据集合，听起来和文件没什么区别，但是本质上并不是一回事。大家都用过flickr吧，也用过google doc吧。他们基本上就是“基于数据集合的数据管理”。和文件的区别在于，数据集合是有“元数据”的。照片会有拍照时间，说明。如果运气好，还有地点和评论。文档是有作者，简述等等。你可以基于数据类型和元数据进行过滤，排序等动作。而基于文件的基本没有办法这么玩。微软winXP以上版本的资源管理器可以看到，如果文件夹里面多半是图片，就会变成图片专用视图，而显示出图片的内置元数据。然而，这个是逐个扫描的，速度慢。而且万一一个文件夹里面又是图片又是音乐，至少有一个得虾米。
google drive基本是google doc的升级替代品，可以打开多种格式的文件。然而，当上传一个文件时，必须显示的“转换”为google doc文档，才可以介入管理。而且，每个类型的google文档，都有限额。以文本文件为例，大小限制在2M以内。我上传了一个5M的小说，直接报错，要求原样上传。上传后不能直接打开，必须下载打开。
整合和过渡 两者如何整合？
在文件系统的管理上，同步，而非上传，是一个非常重要的功能。我不可能每时每刻都联网，即使联网，也不能每个文件修改好了就上传一次。我需要对传统的文件系统做持续的修改，然后通过手工的，或者自动的同步，将差异转移到云端上去。而不是我手工的对比每个文件差异，然后一个一个的上传更新和删除。
没有同步工具的云端存储是个垃圾，除非你共享的目标是少数几个超大的文件，例如电影，或者资源合集之类的东西。这是以共享为目的的云，说的更直白点，就是免费的下载空间，而不是个人云存储。
在个人文件被同步到了云端后，应当能够让云端的程序直接打开和修改某个文件，而不是强迫转换。
google drive是什么 从表现上看，还是基于文件的管理。我不能通过元数据直接查看我拥有多少张相片，也没办法找所有邓丽君的歌。
然而，他们又没有同步，至少linux不行。而且android手机上连文件夹上传都没有。也许有人说了，找个数据线和电脑连起来不就得了？要是我喜欢用数据线连，我到哪连一次电脑，玩个同步就完了，还要云干吗？
所以，结论还是不变。</description>
    </item>
    
    <item>
      <title>google drive你这是在找死</title>
      <link>//blog.shell909090.org/blog/archives/2154/</link>
      <pubDate>Fri, 27 Apr 2012 03:36:47 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2154/</guid>
      <description>昨天收到了google drive的邮件，今天就做了个简单的测试。我不确定是否是我的错觉，但是google drive不支持文件夹上传。
？！
是的，我找了半天，没找到。即使有这个功能，它也被藏的很深，至少一个熟练用户花了10分钟找不到。据我看到的资料，这是因为谷歌试图抛弃文件概念。
好吧，抛弃文件概念是个先进的理念，我也认为那是对的。但是，当我需要为我的200多个手机小说，一个一个上传，然后再手工建立目录，重新分类，打tag的时候。你连从文件夹直接导入的功能都没有。
告诉我，我为什么要用你。
其余特性我就不多吐槽了，包括中国群众使用的不稳定(虽然不是你们的错，而且dropbox也不稳定)。才5G的免费空间。目前还没有客户端。至少这些问题都是可以改进的(除掉那个不是你们的问题)。
但是拿着已经存在的事实不当回事，只考虑未来是美好的—— ——那就是在找死了。</description>
    </item>
    
    <item>
      <title>和谐音程的条件</title>
      <link>//blog.shell909090.org/blog/archives/2152/</link>
      <pubDate>Tue, 24 Apr 2012 01:53:01 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2152/</guid>
      <description>和谐音程的发生条件，是冠音的震动频率和根音呈倍数关系。以此为基础，我们做一个简单计算：
首先是八度：
&amp;gt;&amp;gt;&amp;gt; 12\*math.log(2, 2) 12.0 即，12个半音(高八度)是和谐音程。
&amp;gt;&amp;gt;&amp;gt; 12\*math.log(3.0/2, 2) 7.019550008653875 &amp;gt;&amp;gt;&amp;gt; 12\*math.log(4.0/3, 2) 4.980449991346124 &amp;gt;&amp;gt;&amp;gt; 12\*math.log(5.0/4, 2) 3.863137138648348 &amp;gt;&amp;gt;&amp;gt; 12\*math.log(6.0/5, 2) 3.1564128700055254 &amp;gt;&amp;gt;&amp;gt; 12\*math.log(7.0/6, 2) 2.6687090560373763 即，7个半音(纯五度)，5个半音(纯四度)，约4个半音(大三度)，约3个半音(小三度)，为和谐音程。由数值可以看出，纯四纯五的和谐程度又超过大三小三，因为和绝对和谐震动比例的误差更小。
再下面也是可以发生和谐音程的，只是误差更大而已。
为什么是“十二平均率”的原因也很清楚了。
&amp;gt;&amp;gt;&amp;gt; 1/(math.log(3.0/2, 2)-math.log(4.0/3, 2)) 5.884949192361715 从数值上看，六平均率也是可以的。但是六平均率只能保证第二和三个和谐音程关系在音阶上，要保证第四个，就必须是11平均以上。
&amp;gt;&amp;gt;&amp;gt; 1/(math.log(4.0/3, 2)-math.log(5.0/4, 2)) 10.740053666281327 综合两者，12平均率可以基本保证第二三四三个和谐音程都在音阶上。
同时，也基本满足人类对声音的分辨能力。</description>
    </item>
    
    <item>
      <title>你认识这人多少？</title>
      <link>//blog.shell909090.org/blog/archives/2150/</link>
      <pubDate>Mon, 23 Apr 2012 02:13:41 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2150/</guid>
      <description>别误会，这篇是讲个人信息在网络上传播和留存相关话题的。但是不得不说，有点拷问人生的味道。
你究竟认识一个人多少呢？知道名字算认识么？知道性别，年龄，长相，工作单位，算认识么？
这么说吧，如果一个人留了足够多的信息在网络上，你就能找到他/她么？
本周末我就做了这个有趣的研究，事情从欢乐开始，结束于惆怅。
我自己认识我自己吧 当然，如果不认识自己，您需要做的事情是逆运真气修炼九阴真经，而不是在这里看博客。既然您能够正常阅读博客，我假定您对自己的了解超过对其他任何一个人，同时您也是所有人中最了解自己的。
在这个假定下，贝壳搜索了自己的真名。结果是——第一个？没办法，用真名给网易写过一篇东西，就像在身上绑了一根定位锚一样，看起来很长时间内褪不下去了。Google上大部分都是那篇文章的转载，而baidu上还命中了我的开心首页。好吧，鉴于名人效应，我忽略这篇文章所有有关的内容继续研究。
第二个实验是使用自己的网名，分别搜索baidu和google。结果两者都是全部命中，没有一篇是错误的。可见shell909090是一个罕见关键字，如果你只知道我的英文名shell就糟了，全是某个能源公司和自然生物，翻到10多页都看不到我呢。
第三个实验是联合限定，使用自己的真名加上描述关键词，我首先选用了“程序”。结果是google在第三页找到了两个命中，都是python相关的内容。而baidu翻了三页什么都没有。。。
第四个实验是联合限定，关键词用大学名。结果是baidu三页内什么都没有，google给出了我的一篇论文，还有一篇通知，是我在吉他社当副社长的时候的。如果你知道我弹过吉他，应该能发现那是有关我的信息。
结论：
仅仅搜索我本人而言，baidu只有一次比google强——他上面有开心的信息。后面两次google都给出了比baidu更加准确的关于我的信息。
如果没有网易的这篇文章，很多人不一定找的到我自己。你需要知道我的网名，或者知道我的职业，或者知道就读大学和兴趣。
个人身上的特征比想象的更少，尤其在网络上。我总不能联合我的身高体重吧，长相也没什么用处。一般只有职业，大学，公司这种特征才能有效筛选信息。
你对某人的了解在搜信息的时候多半用不到，在筛选哪条是的时候才用的上。
有没有什么别人肯定搜不到的 贝壳其实有一篇IEEE论文，是合作作者。师兄的论文，贝壳提供仿真计算代码，师兄客气，给挂了个名字。这篇论文里，署名是Zhi-Xiang Xu。我自己都是IEEE发通知才知道，别人搜的到才有鬼！
筛我妹看看 为什么搜我妹？我基本把人在网络上的信息的多少和类型分为五类。第一类是老太太型，例如我外婆。什么都没有，也不用网络，你搜的到才是怪事。第二类是潜水员型，使用网络，但是不会在网络上使用自己的真名。偶尔帐号丢了就丢了，再申请一个，记得多少朋友就加多少。第三类是网络活跃型，网络上信息很多，但是基本都是网名为基础的，真名信息找不到。第四型是真实人物型，真名信息很多，但是网络上的活动类比一/二型。最后是全面活跃型，主要是网络名人，真名网名都是一堆信息。
我妹妹是潜水员的典型代表。我跳过整个过程，简述一下结果：满地都是某个书记的言论，无论我用什么关键字搜，基本都找不到相关信息。唯一的命中就是大学里面的考试名单，一个xls文件被公开在了网上。
结论：
要完全屏蔽信息不是你说了算的，很多时候依赖于学校老师/管理员/公司HR有没有错误的把信息贴出去，尤其是word文档。这是大部分人最容易中枪的地方。 当你的名字或者关键字和某个热关键字重合的时候，你的信息就像被遮盖起来一样，很难从大量垃圾中筛出。 baidu基本找不到word文档，估计是没这个能力。 老婆 本人名字和著名音乐家重合，所以死活找不到。联合大学找不到，联合单位后找到了一篇关于考试的xls文档，确实是她的。
换网名，我擦，满屏的命中，基本没几个错的，很多我都不知道。。。所以，我慢慢去看了。
里面还有她的班号，顺着还检索出了她的奖学金。各种信息满坑满谷。网络活跃型典型。
小学同学 很罕见的名字，输入后直接筛出两篇内容，google和baidu都是同时给出。一篇是该同学写给哈尔滨日报的吐槽，2005年的事情。另一篇是该同学上班后发的文，被收录了。后者有她所属部门的名字，交叉检索后能够多看到一篇文档。影响力不大，估计是内部发行。还有一次去台湾出席会议的经历。资料不是太多，典型的真实人物型啊。
以前有过暧昧的女孩子1 恩，别告诉某喵，大家懂。
跳过过程，上结果：不行，只有她考试的名单。典型的潜水员。
某个朋友 出乎贝壳的意料，直接输入姓名后，直接命中开心首页。google还命中了一场官司。从公开的文档中给出的家庭地址来看，确实就是她本人打的官司。这个算是信息的被动泄露，本人还是网络活跃型的吧。
以前曾经喜欢过的女孩子 曾经听说过此人进了中国一家很有名的网络公司当经理，一搜，果然有。不但有文字材料，还有该公司公关帐号放出的活动照片。近几年基本没怎么大变化，和当初看起来差不多。资料上发的文章，职位变迁一点不少，甚至还有一些帐号。但是没有QQ/开心之类的信息。也就是说，属于真实人物型。
好吧，看起来不错就好。这么多年，同学之间也只能说看你看起来不错就好。也许再过一段时间，标准会进一步降低为活着就好。
以前有过暧昧的女孩子2 此人信息非常奇怪。首先是真名什么资料都找不到，那么就是二/三型的。我有她的hotmail，搜索之后找到了一个论坛，上面的资料非常全，而且还找到了一个QQ号。交叉检索QQ号，发现是她当时男朋友的。在德国华人社区有发言，和她说男朋友去德国留学相一致。再检索她的网名，有大量资料。但是奇怪的是，都在某个时间点以前。具体来说，大概是2008年5月前后。之后的信息就完全消失。而她男友的帐号直到今年(2012年)一月还在活跃。结合上述来说，我有种非常不好的预感。更炸头皮的是，我检索了自己和她联系的历史记录。在同一个时间点后，我发送的所有信息都没有回应。包括msn上线状态/聊天记录，手机拜年短信等。。。
结论：
此人改名搬家，去了德国。配合她男友的记录来看，这种情况不无可能。 此人曾说过，如果要躲某人，就会彻底和自己以前的生活告别，在陌生的城市里过陌生的生活，即使见到也不会相认。我相信她是做的到这点的人。 此人已死。 好吧，按照最低标准，活着就好。
总结论 现实中大部分人都是一/二型，在网络上什么信息都找不到。之所以没有在贝壳这里体现，是因为贝壳做不到纯随机取样的条件。数据源本身是贝壳自己认识的人，大部分都是受到良好教育，能够熟练使用网络的青年。有不少甚至从事相关行业。用这些人做样本，你可以认为不存在不上网的人。 真的信息上网的人中，大部分都是网络活跃型，即使用网名会命中非常多的信息。上述例子的分析中，贝壳本人/小学同学/之前曾经喜欢过的女孩子在网络上主动留存了本名相关的资料，大约三分之一。但是上面说了，这些例子本身就是网络上留存数据的人的例子。可以粗略的得到结论，大约三分之一上网的人在网络上有真实的个人信息。 根据上条，在网上要找人，用网名比较有效。如果要被人找到，网名不要换比较有效。如果不要被找到，什么真实信息都不留，然后每隔一段时间换个帐号。 但是一半以上都会被动泄露资料（尤其是xls文件），这说明网络对个人隐私的保护非常差。除去一个公示的例子是必须公开的，其余都是莫名其妙就出现在网上的。即使只通过这些资料还原，大约有三分之一人的基本信息也会被掌握。这本来是没必要的。 </description>
    </item>
    
    <item>
      <title>语义的精密表达</title>
      <link>//blog.shell909090.org/blog/archives/2148/</link>
      <pubDate>Thu, 19 Apr 2012 03:25:34 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2148/</guid>
      <description>辨析语言的微妙差异，使得语言精密的符合目的语义，此为程序员基本功的最高要求。对精密语义的追求，应当凌驾于排版美观，代码美感，代码简化之上，也凌驾于运行时效率之上。除非为特定目的小幅的修正，否则不应破坏此原则。
以此为指导，我们看几个if。
if a in python 以下代码的目标语义是，如果a不为None，就运行代码。
if a: do something 有什么问题？
有没有考虑a=0的情况？a=[]呢？
if a is not None: do something 这样才是严密表达。
if a in C 以下代码的目标语义是，a是一个int数，对a!=0的情况下，执行代码。
if (a) do something 有什么问题？
没问题，因为C是静态语言，这限定了a的使用。除了代码并没有体现a!=0的条件，没有太大问题。但是鉴于语言表达语义，最好改为以下代码。
if (a != 0) 相对的，如果a是bool型，就可以直接用了。
if (a) 如果a是char*形，那么合适的语义表达应当是。
if (a != NULL) 他们生成的汇编代码都没有差异。
if a in C++ 概念上同C，不过a是一个复杂对象。
if (a) do something 有什么问题？
问题大了去了，和python一样，C++可以重载行为。谁知道type(a)::opreator bool(const type(a) &amp;amp;a)函数被定义为什么鬼逻辑。这就是为什么我憎恨默认行为重载的原因——因为他们对精密语义表达有破坏作用。</description>
    </item>
    
    <item>
      <title>值返回和指针返回简说</title>
      <link>//blog.shell909090.org/blog/archives/2146/</link>
      <pubDate>Wed, 18 Apr 2012 01:53:48 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2146/</guid>
      <description>好吧，这是常识，我说快点。
C * c = get_c(); 这是指针返回。
C c = get_c(): 这是值返回。
指针返回的缺点是，你必须检测返回指针的有效性，也就是NULL。并且，你需要手工管理指针释放。而优点则是避免了值拷贝，还有可以返回空值，即通过返回NULL表示没有值的情况。
而引用返回最大的优势在于，变量的生存周期和作用域相同，你无需管理释放问题。然而缺陷就是庞大的拷贝开销。
在get_c返回的时候，会return一个对象。这个对象是子函数作用域对象(sub function scope)，会随着子函数退出而失效。因此，在返回值的时候会引发拷贝。这种拷贝有两种可能。
拷贝构造 当返回值被用于某个对象的声明时，会触发拷贝构造函数。被返回的对象会作为拷贝构造参数传递(引用传递)，而拷贝出的对象就是被生成对象。
赋值算子 即operator =。当对某个已经声明对象进行赋值时，会发生这种现象。
当然，近代编译器对于“在返回时进行构造用于返回后的构造”这种情况做了优化，通称RVO优化。例如上文，如果get_c中使用return C(a, b);进行返回，实际上只有C::C(a, b)的调用，而没有C::C(const C &amp;amp;
c)的调用。</description>
    </item>
    
    <item>
      <title>vps上应当装什么</title>
      <link>//blog.shell909090.org/blog/archives/2144/</link>
      <pubDate>Tue, 17 Apr 2012 07:00:21 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2144/</guid>
      <description>假定你有一台debian vps，上面需要装一些东西来——你懂。你应该装一些什么呢？
基础部分 ssh 没啥好多说，没有ssh，你甚至无法管理机器。不过注意，安全的ssh方式应当只允许使用key登录，禁止一切密码登录。而且对于没必要登录的某些用户，需要在/etc/passwd中将shell改为/bin/false。至于端口改不改，这个不重要，看你心情。
vim debian默认装的是vim-tiny，很不好用。建议改为vim，改配置的时候让自己舒服点。
安全部分 iptables-persistent 这是debian内用于iptables规则持久化的工具，你可以编辑/etc/iptables/rules.v4来修改防火墙规则。注意，目前debian stable(squeeze)中的版本还没有4/6区分，你可以弄一个testing(wheezy)中的来装。
一般来说，你的规则中至少要包含以下内容：
-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT -A INPUT -i lo -j ACCEPT -A INPUT -i tun+ -j ACCEPT -A INPUT -i ppp+ -j ACCEPT -A INPUT -p tcp -m multiport --dport 22,xxx,xxx,xxx -j ACCEPT -A INPUT -p udp -m multiport --dport xxx,xxx,xxx -j ACCEPT 而且强烈建议，先保存一个没问题的iptables，然后直接修改iptables，再保存。这样的好处是，当你脑残改错了导致你自己都无法管理的时候，只要重启就可以恢复vps工作，而不用更麻烦的动作。
denyhosts 这是ssh的连接防御进程，用python编写。如果有人试图尝试你的ssh密码，这个程序就会踢掉他的ip。
如果你已经用了我说的，通过key的连接方式，你可以一次就直接踢掉对方ip。
管理部分 ifstat ifstat是用于网络流量管理的工具，可以告诉你网络目标的流量是多少。
dnsutils dnsutils里面包含了不少用于管理dns的工具，包括我们常用的nslookup，还有相对少用的dig。
mtr-tiny mtr是一个traceroute工具，比后者好用很多。这个工具可以快速跟踪路由。
vnstat vnstat是用于跟踪网卡流量的工具，尤其对于每个月都有限额的vps，这个工具更有意义。</description>
    </item>
    
    <item>
      <title>2012年4月12日断网的技术记录</title>
      <link>//blog.shell909090.org/blog/archives/2142/</link>
      <pubDate>Mon, 16 Apr 2012 02:24:40 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2142/</guid>
      <description>4月12日上午, 大约北京时间10点(UTC02:00前后),
中国大部分地区发生了一次断网. 这次断网我有幸正好在使用网络, 因此跟踪调试了整个过程.
网络开始中断 当时我在公司里面用ssh调整一台国外的机器, 同时用另一台机器作为ssh跳板访问google. 问题发生的时候, 很多国外网站都无法打开, ssh指令不能工作. 我的第一反应就是, GFW针对ssh做了拦截.
鉴于其他可能, 我登录回了家中, 从家里的机器直接ssh到国外的跳板, 一切正常. 莫非只是我这里的ssh发生了断路? 我正在这么猜测的时候, 家里的ssh也随即断开. 我kill了当前进程, 重新连接后, 恢复了对家里服务器的控制, 但是境外的ssh跳板已经不能连接.
至此, 可以确定中国出国网络逐步发生中断, 针对什么协议, 机制如何尚不清楚.
但是, 我同时用同一台机器打开了openvpn, openvpn会提供一个内网接口.
我偶然的用这个内网iface访问了一下, 一切正常. 再尝试了一下, openvpn上网正常. 这说明问题可能局限在ssh上.
这不是一个个例, 这是大规模断网 既然我对境外服务器还有控制能力, 我就更换了一个ssh端口, 但是问题并没有解决. 这似乎说明封锁不是针对端口(port), 而是针对协议(protocol)的. 为了确证这点, 我对通讯过程做了抓包, 但是结果出乎我的意料. 问题并不出现在ssh握手的时候, 而是tcp第二步的syn-ack回包彻底消失. 这表明封锁并不针对ssh协议, 而是tcp协议栈!
这非常疯狂, 如果是这样的话, 大部分基于tcp的网络协议将无法工作, 包括境外大部分网站的http协议. 我从twitter上看到, 很多人的各种工具都相继失效, 并且境外很多的http(而非https)确实无法访问, 这和我的判断相一致. 这是针对tcp协议栈的大规模拦截.
为什么特殊 通常而言, GFW有三个常见工作模式.
dns污染
ip封锁
深度包过滤(关键字拦截)
其中dns封锁只对域名有效, ip封锁只对ip有效, 只有深度包过滤才是最麻烦的.
但是通常深度包过滤是使用旁路过滤的方式, 在连接出现问题时发出rst包干扰tcp工作. 而本次的模式是将境外向境内的tcp包直接丢弃, 而非rst.</description>
    </item>
    
    <item>
      <title>mirrors.geekbone.org软件仓库镜像站将于4月中旬下线</title>
      <link>//blog.shell909090.org/blog/archives/2140/</link>
      <pubDate>Fri, 13 Apr 2012 01:38:56 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2140/</guid>
      <description>原文在此我用了5年多的cn99和geekbone两大镜像终于全部下线。
需要通告的一点关键问题即是, 由于tux下线早于新一个版本的debian发行,
因此目前mirrors.geekbone.org还是已经发行的debian安装盘的官方源之一.
请大家在安装debian6的时候不要再选择geekbone, 并请通告其他debian用户.
在09年加入shlug之初，就知道当年用了很久的geekbone服务器是shlug管理维护的。当时就很惊讶，以捐助方式运作一台镜像服务器，这个是相当不容易的。包括募集，管理，账目，在中国要做整套过程需要相当心力。而且geekbone还是在debian有注册的镜像站之一。可以看Debian 全球鏡像站。
大约在11年，中科大的ustc服务器上线后。在一次和lightning的闲聊中，lightning就谈到了tux服务器的问题。当时tux的服务器硬盘已经不足，最多在数月后就会满额。lightning删除了部分上面的无用数据，让服务器可以稍稍多工作一些时日。我当时就建议不要全面镜像所有的debian镜像，毕竟当时中国已经有anheng和ustc两个全面源，其中ustc还在申请大陆一级源(他们的资源投入确实不错，镜像速度相当快)。tux毕竟是老服务器，可以转做i386和amd64两个主要镜像。国内大部分人用的都是这两个arch，sohu的部分镜像也是针对这部分的。lightning表示看看再说。
今天，看到了shlug通告，tux服务器准备下线。想想也的却是，tux已经在超期服役，而国内已经有了ustc, anheng, sohu, bjtu四个镜像.
再进行一次募捐让tux恢复服役看来是没什么必要了.
在此, 感谢一下shlug服务器维护团队, 谢谢你们的努力让我五年来得以享用快速的源服务. 祝tux一路走好, 愿电脑诸神与它同在, enter.
另外, 提一点我们和欧美的工业水准差距. 我曾经撰文说过, 中国要追赶美国还有很长的路要走. 当时列举的证据就是dd和debian mirror lists. 当时我们也是4个源, 目前加入了bjtu, tux退出, 还是4个源.
相比美国那个深不见底, 鼠标滚轮滚好几下都没看到头的列表, 实在是太差距了.
这个差距不仅体现在源少, 更体现在用户少. 用户少就是源少的原因.
如果用户增长一个数量级, 目前这些源肯定会发生不足, 然后吵着让各个大学再开一两个镜像出来. 我倒是觉得这样不错, 至少sjtu有机会露个脸.
其实sjtu也是有自己的源的](http://ftp.sjtu.edu.cn/debian/)%E7%9A%84), 只是没有对普通网络用户开放, 访问速度缓慢而已.</description>
    </item>
    
    <item>
      <title>segment的核心数据结构空间和时间效率估量</title>
      <link>//blog.shell909090.org/blog/archives/2138/</link>
      <pubDate>Thu, 12 Apr 2012 01:55:37 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2138/</guid>
      <description>首先我们简述核心词典的目标。词典最主要的目标是，给定一句句子S，匹配出所有和句子开始拥有完整匹配的词语。所谓完整匹配，就是句子开始的一定长度的连续序列和词语相等。例如，中华，中华人民，中华人民共和国，都是句子：中华人民共和国今天成立了，的完整匹配。
要解决这个问题，直观方式是使用tied tree。但是中文的tied tree非常不好实现。英文的tied tree在一个节点上最多拥有不超过26个子节点，而中文的在根上面会拥有6000个以上的子节点，使用同样的结构在子节点上会浪费大量内存。
我们先跳过tied树本身的细节，来讨论如何使用python内置数据结构高效简洁的完成这一工作。作为一个读比写高频很多的结构，无疑hash table是一个非常适合的结构。我在hash table的性能分析中说过，hash table的查询性能是O(1)量级的。无疑，可以使用hash tree来高速完成查找。同时注意一点，词语的最小长度是2，因此不存在只有一级的结构。所以，hash tree的第一级结构可以从2开始，而不是1。
实现效果如何？我们正式给出的词典拥有127K的词汇量，平均第二级宽度为6.8，因此大致可以推算出，第一级的词典含有元素19K个左右。python源码解析中说过，当表项小于50000个时，扩张大小为当前活跃表项的4倍，最高填充率不超过2/3，即填充率最低25%，最高66%。平均来说，填充率应当在45%上下波动，我们以0.5计算，实际上一级词典的Entry个数应当是40K个上下。在源码Include/dictobject.h:50有给出Entry的结构，这应当是三个平台相关的数据结构，以贝壳的64位系统而言，长度应当是24字节。忽略掉辅助结构，一级词典的大小应当是960K，即约1M。而词典指向的数据，即2字长的str对象本身头部长度24字节，辅助数据长度12字节，数据长度4字节（utf-16编码的两个unicode），null term1字节，共计41字节。由于python对象是8字节对齐，因此实际占用48字节。19K个数据总计占用912K。
二级表项平均长度6.8，这个长度很难估量。因为5的话总表项刚好是8，而6就会增长到24，我们取中间数20做一个估量值（因为6.8毕竟大大偏离了5），一个词典的大小应当是480字节，加上头部大约是512字节（算的粗糙点吧），19K个词典就是8.5M左右。指向的对象长度更加难估量，我们粗糙点按照96字节一个对象（别忘记了，unicode对象不但成员多，而且超出了BOM，一个字占4字节），127K个对象大约是12M内存。而float内部使用C的double类型，一个对象占据32字节，127K个对象占据4M内存。
以上总计，初级词典本身占用1M，关键字占1M。二级索引占据10M，关键字占12M，频率数据占4M。总计28M内存，基本上一个12.7W词的词典，大小2.5M，占据30M内存，这就是dict核心词典的空间效率估量。
时间复杂度估量更加复杂，不过我们可以简化来说。初级索引需要多少时间？O(1)量级，毋庸置疑。问题是二级词典的复杂度，异常难算。凑合一下，按照比较6.8次计算（因为必须通过遍历才能知道全部的匹配）索引出一个句子所有的完整匹配的时间复杂度O应当为O(n)，其中n是平均二级索引宽度。目前而言，实际测量结果，平均6.8。当词汇量大于一定值后，随着词典的加大，这个值基本是线性增加的，我们粗略的可以认为O(n)即是正比于词典大小。
而后我们顺便给出分词核心算法在处理一句话时的效率估量吧，证明太长，这里写不下。假定句子长度S，词典大小N，匹配数目M，分词算法的时间复杂度量级为O(N*M*S)，有兴趣的可以帮我复核一下，这个证明颇为困难，不知道有没有证错。在实际运行的时候，匹配数目会跟着词典的增长而增长，而句子长度则相对固定。当然，明眼人一眼就可以看出，所谓匹配数据随着词典增长而增长，其中并不是正比的。而是O(1)&amp;lt;O&amp;lt;O(n)。因此我们可以看作时间复杂度为O(N)&amp;lt;O&amp;lt;O(N^2)，具体是什么，做不出来。
然后是纯粹的tied tree的性能估量。讲到tied tree，我们就必须要提到如何实现一个有效的tied tree。实际上纯粹用区域哈希映射太浪费内存了，而顺序查找太浪费时间。比较折衷的办法还是只有——dynamic hash table。
不过这次我们就可以控制一下哈希表的大小了。对于大小不超过6W的哈希，我建议采用crc32，虽然离散度并不高，但是作为一个近似填满的hash table的hash key足矣（这点需要实际考察一下）。如果是自己实现，表项直接存字符串，连指针都不需要，采用开链法。总计大小1M即可以保存所有的一级数据。
二级数据就无法这么偷懒了，因为二级结构中字符串长度不定。但是以数据展开大小只有2.4M来看，无论这一级别如何扩张，字符串本身大小不应当超过3M。开链法一个节点24字节，平均填充率0.5计算，14个表项一个词典（这个也可以自行控制了），336个字节一个词典，乘以19K个dict。大约6.23M。127K个频率数据1M，这是常规占用。
以上总计，初级词典本身占用1M，二级结构本身占用10M，不超过20M应当就可以构建起一个高效的核心数据结构。由于实现类似，时间复杂度也类似，就不详细推论了。
以上还有一点可改进之处，dict作为二级存储的绝对劣势在于，必须要对比全部词典才能确定完全匹配数量，于是时间复杂度正比于词典大小。严格的tied树只需要沿着顺序进行几次索引即可，复杂度取决于词语长度——基本来说和词典大小无关。按照这个推论，实现一个紧凑的，高效的二级小结构，可能比较有利于减小总体大小，增加工作速度。</description>
    </item>
    
    <item>
      <title>赞一下京东</title>
      <link>//blog.shell909090.org/blog/archives/2136/</link>
      <pubDate>Wed, 11 Apr 2012 03:18:48 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2136/</guid>
      <description>昨天觉得背不舒服，买了个按摩器，200。
10点下单，下午两点就送到了，效率不错。
但是用了20分钟，不动了。照说明冷却了一阵，还是不动，遂报换货。
下午四点打电话，10分钟后就来电确认了，五点来了个人，把东西拿走了。
我要求换货，目前页面写的是退货，不知道会不会把新品送来。
不过效率很不错呢。</description>
    </item>
    
    <item>
      <title>如何用tabbar插件做emacs的tab定位切换</title>
      <link>//blog.shell909090.org/blog/archives/2134/</link>
      <pubDate>Tue, 10 Apr 2012 06:50:56 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2134/</guid>
      <description>说明一下，定位切换的意思，是像chromium那样，用Atl-1-9直接切换tab。而不是用上一个下一个慢慢换。另外，是切换buffer，不是切换frame。
以下是实现部分：
;; 全部的buffer都分一组，否则这个修改是没任何意思的 (setq tabbar-buffer-groups-function (lambda () (list &amp;quot;All Buffers&amp;quot;))) ;; 去掉emacs自带的几个buffer (setq tabbar-buffer-list-function (lambda () (remove-if (lambda(buffer) (find (aref (buffer-name buffer) 0) &amp;quot; *&amp;quot;)) (buffer-list)))) ;; 切换到第N个buffer，1为第一个，负数表示从后数，注意0会出错，这里就不处理了 (defun switch-tabbar (num) (let* ((tabs (tabbar-tabs (tabbar-get-tabset &amp;quot;All Buffers&amp;quot;))) (tab (nth (if (&amp;gt; num 0) (- num 1) (+ (length tabs) num)) tabs))) (if tab (switch-to-buffer (car tab))))) ;; 不说废话，绑热键 (global-set-key [(meta 1)] (lambda () (interactive) (switch-tabbar 1))) (global-set-key [(meta 2)] (lambda () (interactive) (switch-tabbar 2))) (global-set-key [(meta 3)] (lambda () (interactive) (switch-tabbar 3))) (global-set-key [(meta 4)] (lambda () (interactive) (switch-tabbar 4))) (global-set-key [(meta 5)] (lambda () (interactive) (switch-tabbar 5))) (global-set-key [(meta 6)] (lambda () (interactive) (switch-tabbar 6))) (global-set-key [(meta 7)] (lambda () (interactive) (switch-tabbar 7))) (global-set-key [(meta 8)] (lambda () (interactive) (switch-tabbar 8))) (global-set-key [(meta 9)] (lambda () (interactive) (switch-tabbar 9))) (global-set-key [(meta )] (lambda () (interactive) (switch-tabbar -1))) </description>
    </item>
    
    <item>
      <title>empathy的无聊问题——记一次排错</title>
      <link>//blog.shell909090.org/blog/archives/2132/</link>
      <pubDate>Mon, 09 Apr 2012 03:55:40 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2132/</guid>
      <description>废话不说，debian testing，装了empathy后没法用account，等于废物。
先看bug report，开reportbug，看empathy的bug，有一个“Accounts window does not open”，估计就是我要的。
在浏览器中打开，http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=594945&amp;amp;archived=False&amp;amp;mbox=no，里面说了大致情况，和我这里非常类似。
第一个意见，killall -9 empathy-account，无效。
第二个意见，需要装CM。
跑去看看，一个都没装。跟着看说明，应该在recommand里面的。OK，我这里有这个配置。
shell-deb:\~\# cat /etc/apt/apt.conf.d/20norecommanded APT { Install-Recommends 0; }; 这是对付很多无聊包把recommand当作suggest用的，结果这次中标。其实这次的recommand应当放入dep里面的。
OK，完事。
PS.虽说如此，记得把telepathy重启一下，否则jabber协议看的到但是无效。</description>
    </item>
    
    <item>
      <title>无线网络问题的诊断</title>
      <link>//blog.shell909090.org/blog/archives/2130/</link>
      <pubDate>Sun, 01 Apr 2012 03:10:12 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2130/</guid>
      <description>今天看到ZQ在坛子里面说无线网络卡，想想这对很多人是个问题。现在越来越多设备采用无线网络，本来看似够用的无线网络应该也会逐渐变的不怎么够用。这篇文章的大部分内容在blog中都有说，但是没有集结成文。今天集结一下，为大家提供便利。
关于无线网络卡这个问题，有多种可能，我们逐个分析原因/诊断方法/解决方案。
有终端连不上，即使这个终端就在路由器附近 这个主要是因为无线网络负载的设备达到极限所致的。这个极限，我见过最差的路由器是8个，普通路由器（包括dir-825刷openwrt）大概是50上下，苹果的要超过100。一个/24子网的最大负荷是253个IP地址，如果不另行设定，大多数的默认配置都无法超过这个极限。
解决方案很简单，加路由器，或者换一个更好的路由器。加路由器具体参考这篇。换路由器的意见是，不要用fastnet，推荐tplink或者dlink的设备，buffalo的也不错。如果你已经用了这些路由器，但是终端超过50个（好像通常只有公司会碰到吧），可以考虑苹果的，或者多扔两个路由器，辐射小信号好。
有终端离开一点距离后就连不上，或者离开一定距离后速度变慢 这是典型的信号衰减。作为不严谨的测试，你可以在android上安装wifi测试仪，然后走到各个角落。如果你的信号质量不足80dbm，那么就属于比较差的情况。大概能连接，但是经常断线，或者速度很慢。如果不足90dbm，基本就不可用了。
解决方案也很简单，同上一个。总之优化到家里的每个点信号质量都可以就好了。
明明信号很好，速度就是上不去 有可能是因为周围的channel干扰，也可能是因为你的路由器CPU不足。你可以用wifi测试仪，看看你周围当时有多少人在用你路由器的channel。两个channel相隔5以上才不互相干扰。所以，如果你使用channel6，那么channel2-channel10都会对你的信道造成一定干扰，相隔越远干扰越小。而如果你隔壁有一堆和你同channel的AP，实际带宽是均分给你们所有channel的。如果对方用的比较多，也会对你造成干扰。
这是非常难解决的问题，你总不能跑到隔壁说，你们改个信道吧。一方面，如果有条件，你可以对墙壁，门缝做信号屏蔽。这样能减小一点隔壁的信号干扰。另一方面，建议你采用5G频段。这个频段的信道更多，更不容易串扰。但是目前支持5G频段的设备少，而且5G的穿透能力比2.4G更差。
CPU不足呢 CPU不足最典型的确诊就是关掉加密，你的无线网速就会突然暴增。或者你保持无线空载，用有线狂用网络，无线的ping值从10变化到上千。
碰到这种情况，扔掉垃圾路由器重新买一个。
明明有些设备一点问题都没有，有些设备就是连AP都找不到 看看你的channel是否设定到了11以上，例如12/13/14之类的。各个国家对channel的许可范围不一，欧洲日本美国的许可比中国宽一些，因此有12等信道，中国最高到11。因此你用水货手机连外贸版本的路由器的时候，channel12没问题，而用中国许可的设备的时候就连AP都找不到。
解决方法很简单，换个中国许可的channel。
无线速度跟不上外网速度 自从20M以上光纤出现以来，这个问题就逐渐变成主要问题。11g的标准速度号称54Mbps，但是实际上通常只有18Mbps。而外网速度从常见的1/2/4Mbps骤然升到了10/20/30Mbps，就出现了严重的外网速度反超内网速度。
这个一点办法都没有，只能把11g的设备都淘汰光。只要有11g的设备在，11n就无法发挥极限速度，导致你的无线只能在18Mbps上晃。而换用11n的设备后，速度一般可以达到30-40Mbps以上，基本够用。
路由器被打爆 由于速度加快，导致现在有更多的小包可能被传输。虽然传输速率要求不高，但是由于路由器对每个包都需要做同样处理，所以大量小包的资源消耗和同样数量的大包是同一个量级的。我们做一个简单的计算。如果一个包是1500字节，128KB/s的网络可以每秒传输90个包。而如果每个包是64字节，就可以传输2000个包。而当速度升级到2.5MB/s（20Mbps光纤），如果是1500字节，每秒1700个，而64字节的就是40000个。如果路由器的处理能力是每秒10000个包，升级到光纤一跑小包就挂了。很多人在ADSL的时代没问题，升级到光纤反而频繁出问题就是这个原因。
现象比较多，如果是交换机挂掉，往往是一个机器链路OK但是就是有TX没有RX。怎么整也没用，但是过一会，这台机器突然就OK了，换下一台出同样问题。而如果是整个路由器挂掉，可能是路由器突然重启，或者ppp0断线重新拨号。还有的机器是死在那里没任何反应，必须拔掉电源线重新插才有效。</description>
    </item>
    
    <item>
      <title>redis的rdb和aof模式性能对比</title>
      <link>//blog.shell909090.org/blog/archives/2128/</link>
      <pubDate>Fri, 30 Mar 2012 04:10:30 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2128/</guid>
      <description>由于是同一台机器，进行相对对比，我就不列配置了。系统是debian testing，kernel 3.2 686。redis 2.4.8。
测试方法是用python写的脚本对redis数据库进行写入，看写入速度。
100000/300000/1000000是数据量，插入的都是string。第一个数据是最小时间，第二个是平均，第三个是数据大小。
100000:
dbmode: 4.8, 5.1, 1477792
aofmode: 9.1, 9.3, 3677803
300000:
dbmode: 16.5, 17.6, 4877792
aofmode: 21.1, 21.4, 11477803
1000000:
dbmode: 61, 65, 16777792
aofmode: 77, 85, 38777849
从简单分析来看，aof比rdb慢25-80%，但是大规模数据都比较支持慢25%这端。估计在低数据量下，rdb模式更加占优势。数据规模增长时，速率比接近于4:5。aof的数据比rdb数据大150%（2.5倍上下），这点随着数据增长基本不变。
从读性能分析来看，两者差异不大。同样，数据分别是最小时间和平均时间。
dbmode: 55, 60
aofmode: 62, 63
差异在10%以内，甚至比最小-平均差异还弱。基本可以视为一致。</description>
    </item>
    
    <item>
      <title>假如生命可以重来——致80后的家长</title>
      <link>//blog.shell909090.org/blog/archives/2126/</link>
      <pubDate>Tue, 27 Mar 2012 03:19:19 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2126/</guid>
      <description>假如我们的生命可以重来——好吧，这个听起来像七老八十的老头说的话，不过，确实，人过到而立之年，会发现很多遗憾，很多很多的已经太晚。假如人生可以重来，我们也许就能弥补其中一些。
假如生命可以重来，我首先要干的第一件事情是在中学和大学多去旅行几次。这不是说我中学没有旅行过，而是都太“安全”了。苏州？杭州？拜托，这些地方在工作后都有的是机会去。如果回到初中，也许我会跟父母申请，在中学的时候就跑去黑龙江，看看松花江上的雾凇，索菲亚大教堂。高中跑去敦煌看看莫高窟，看看大漠风光。跑去云南看玉龙雪山，看西双版纳。大学跑去喀那斯，纳木错。
现在？我现在哪里都能去了，都可以去了，都有钱去了，可惜没时间去。我毕竟有一个家要养活，不能任性的丢下工作，突然和老板说，我要去西藏一个月，您看着办。
也许初中去听起来不是很安全。可是想想，现在去，比初中生安全到了哪里去？旅行中的安全，来自出门的阅历。我们都是在不断的出门中学习到，什么是安全，怎么样才安全。也许，在初中学到这些东西，会比毕业后学到更加有用。
假如生命可以重来，我要做的第二件事情是学个乐器，当然，也可能是画画。这也不是说我没学过乐器，小学的时候我学过电子琴，大学学过吉他。从哪个角度看，都和“没学过乐器”沾不上边。不过我要说的是，并不是说“会使用一种乐器”就算“学过一种乐器”的。
小学的时候，当时好像流行让小孩学各种班。当时我对音乐挺感兴趣的，所以就老妈做主，买了个很贵的电子琴。那时候才刚刚脱离36块工资，一户人家一个月也没多少钱，一把YAMAHA的电子琴要价1600。既然买了这么贵的电子琴，总不能让孩子瞎玩对吧？于是老爹老妈就给我报了一个班，每周接送去学两个小时，家长就在门口等着，到时间了再接回来。
于是，音乐对我的意义就从好听的歌曲变成了跳跃的五线谱，琶音，休止符，三拍子，每天一个小时的练习。我顿时就觉得不好玩了，每天哭闹不止。三个月不到，父母的音乐家梦想破灭了，电子琴现在还在家里不知道哪个角落扔着。
高中的时候，有个同学吉他弹的不错，经常跑出去一起练琴什么的。我就跑去听他们玩各种各样的声音，唱歌。高考结束，我有点自己的时间，才开始又学起了吉他。如果让我重新选择，也许我那个时候不会去弄那么贵的电子琴，而是弄一个小孩子玩的乐器，找朋友玩玩看。那是一种乐趣，一段人生，哪怕其实我们的歌不忍猝听。
假如人生可以重来，我要做的第三件事情是多谈几个女朋友。首先要发表的一点声明是，这不代表我对老婆有任何不满，也不代表我很花，打算——咳咳，你们懂。
我曾经有一条推，被广为转发，大概意思是。父母在初中高中甚至大学的时候，以学业为名，尽力不让我们恋爱。等大学一毕业，又逼着我们赶快找一个好的老公/老婆出来。怎么可能做的到，你当恋爱不需要学习么？
也许我们在初中时候谈的女友，十个中有九个走不到最后。我翻阅开心上高中同学的结婚记录时发现，基本所有的高中恋人，哪怕当时看起来多么金童玉女，基本都很少有走到最后的。唯一的一对例外可以说是相当的有决心和坚持，据我所知，男女双方一起报同一所学校的不罕见，可是男方没考上就硬是复读重考，女方还肯等的，就非常罕见了。这里恭喜一下杨亮刘莹，很遗憾没参加你们的婚礼。
但是，无论如何，在小时候谈的恋爱，会成为长大后的青涩回忆。当你越长越大，论及婚嫁，恋爱也就越来越不单纯。你不会简单的评判你是否喜欢拉着他的手，带你在街上走。而且还会考虑当你需要用车的时候，他是否买的起。你希望你的青春回忆中，充满了酸甜的爱恋，还是父母和老师的斥骂？或者更糟糕的，根本就是彻底的一片空白？
更何况恋爱中的失败，会成为你下一次不会轻易犯下的错误。在中学，我们很可能不会上床，也没有孩子。如果有什么错误，我们还来得及修正。而如果到了需要结婚的时候再开始积累经验，一个不留神就会碰上一个看似合适的陷阱。结果必然是悲剧。不是在痛苦中挣扎一生，就是带着伤心，争斗财产/孩子之类的问题。
好吧，上面一堆，和80后的家长有什么关系？
我们的人生有很多遗憾，有不少遗憾，是因为我们承载了家长的梦想，受到家长的管束。家长认为他们没有接受过正规的音乐教育，所以他尽力让我们接受正规的音乐教育。家长认为初中生旅行是不安全的，却没有想过他们十几岁就离开家乡去了大城市闯荡。他们没有接受过高等教育，所以认为我们需要高等教育，所以不能谈恋爱。但是这一切的一切，却并没有使得我们的人生完美。
所以，当你决定你孩子的人生的时候，不妨想想。假如我的人生可以重来，我想要的是什么？</description>
    </item>
    
    <item>
      <title>设计的艺术</title>
      <link>//blog.shell909090.org/blog/archives/2124/</link>
      <pubDate>Mon, 26 Mar 2012 09:48:17 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2124/</guid>
      <description>1.标准，简洁但不简单
有一天，你买了一个机箱。很不幸的，这个机箱的后座螺丝少了一颗。当然，这是卖家的错。不过你不会让卖家从遥远的远方给你邮递一颗螺丝钉，而是去附近的电脑市场/五金店，或者各种可以搞到螺丝的地方弄一颗，替代上去。看起来很简单，实际上你知道螺丝有多少标准么？
贝壳在大学学机械的时候，曾经有幸拿到过一本手册。标准A4大小，一厘米多厚。里面全是各种常用机械部件的标准参数，螺丝大概占了半厘米。这还是常规齿形，非常规的大概和天上的星星一样多吧。
螺丝可以设计出这么多变形来，然而机箱上的螺丝，只是最常用的齿型，最常用的螺距，差别基本只在孔径大小而已。
于是，当你买机箱的时候，你不用考虑备件储备问题。
2.拆分和完整
你有点闲功夫，想喝咖啡，或者喝茶。然而不幸的是，这两种饮料喝起来都不怎么方便。茶比咖啡简单点，用飘逸杯的话，上面一个杯子，下面一个杯子。上面杯子放茶，下面杯子接水。水倒入上面杯子，泡好一按，到下面杯子，茶就算泡好了。
如果不幸，你想泡茶的时候，照做如仪，茶水没到你的嘴里，你怎么办呢？
如果不是脑子有问题，估计都会看看上面的杯子是不是水流出来了。如果流出来了，看看下面杯子是不是漏了。如果没流出来，看看上面的杯子是不是堵塞了，是不是漏了。差不多就这些问题而已。
一个复杂系统被拆成多个简单组件，我们就可以看组件是不是正常工作，从而便于诊断问题。洗衣机算比较复杂的系统，但是我们可以看，如果无法洗衣，是水没进去，电机不转，还是什么别的问题。当然，即使知道，具体部件也不是我们修复的了的。
同样，多个重复组件便于批量生产，也便于在不修改整体的情况下，更换部分组件。
当然，也有另一种思路。将系统设计成一个完整的系统，你不需要关心哪里出错。例如苹果。
如果这种系统发生问题呢？你要么完整的返厂修理，要么扔了算了。</description>
    </item>
    
    <item>
      <title>从对称性说男女平等</title>
      <link>//blog.shell909090.org/blog/archives/2122/</link>
      <pubDate>Thu, 22 Mar 2012 02:44:21 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2122/</guid>
      <description>一切号称男女平等的朋友们，作为一个死硬理性派，我认为真正男女平等应当满足对称性。简单来说，你们话中的“男”和“女”对换后，说法仍旧成立，那么这个论调就是满足对称性的，也是真正男女平等的。
我们举个例子。我和猫咪去云南旅游的时候，我们听过摩梭人“走婚”的习俗。具体不介绍了，大家自己查。简单来说是这样的，男孩子和女孩子互相看中后，男孩每天去女孩的房间里过夜，白天回自己家。孩子不用爸爸养，由女方的兄弟养。所以舅舅是一个孩子最值得尊敬的男性长辈，而不是父亲。一个朋友说，这不是很爽？男的和女孩子发生关系，还不用负责，小孩不用自己养。我说，你要记得，摩梭人是母系社会，男和女的关系都要对调的。我们把它们习俗中的男和女对掉过来听听？
女孩子晚上都要去男孩家里，过夜后回自己家中，不能带自己的小孩，还要帮自己的哥哥带小孩。
听起来——对女孩子好像很悲惨的样子——我们再把这个“女”还原回原始的“男”，你还觉得那里的男人真幸福么？
我们在讨论一切事情的时候，口头说“男女平等”。其实潜移默化中，还是受到中国传统男女思想的影响。从数学上说，利用对称性消除这种影响是最好不过的了。例如这个论调，是否男女平等呢？（女孩子把人生中最好的岁月给了你）。我们对掉过来看看？（男孩子把人生中最好的岁月给了你）OK，相信大家都笑了。
先不要笑，尤其是觉得得意的男同胞。男女平等在消除了女性的特权同时（包括撒娇，房子应当男方买），也消除了男性的特权。你看看是否能接受以下情况？（为了妻子的事业丈夫应当作出牺牲）我想很多男同胞已经在拍桌子跳起来了。那这个呢？（孩子要跟母亲的姓）OK，现在笑不出来了吧？
上面讨论了一堆怪论，很多人也许会说贝壳是断章取义，或者别的什么的。实际上，有问题的不是贝壳，而是“男女平等”这个词。真正的平等，为什么不能满足对称性呢？
实际上，多数人在说男女平等的时候，包含的意思并不是，男女双方对称。而是，男女各自为了不同的事情让步，互相达成交易。女孩子要生育，男孩子就要负担家庭。实际上，双方的关系并不是对等关系，而是交易双方关系。两者既要达成合作共赢，又要争取自己的利益。对这点，一个很明显的事实是，男女的婚姻条件改变依赖于适婚男女比例。在战争年代，一堆寡妇找一个男人，男人娶媳妇容易，三妻四妾也不难。但是近代，尤其是计划生育造成男女比例失衡后，女方明显就压在了男方上面。
因此？一个明显的悖论是，如果要改变社会的男女关系，让优势向某个方向发展，应当做的实际上是尽量设法减少该性别的人口。想让男方占优势？让男人去打仗就对了。</description>
    </item>
    
    <item>
      <title>被警告了</title>
      <link>//blog.shell909090.org/blog/archives/2120/</link>
      <pubDate>Tue, 20 Mar 2012 06:22:39 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2120/</guid>
      <description>OK，所有用贝壳vps的童鞋，你们今天应该都不能用了。因为我自己也不能用了。
早上到公司，发现翻墙失效，去vps供应商那里看了看管理，貌似是因为vps被停用了。我翻了一下billing，确定没忘记付钱。然后看到有一个ticket，上面写着abuse，大概就知道怎么回事了。问题是gmail里面没有——回来翻翻，shit，他们用不同的邮箱发，导致被定到了spam里。
ticket的原文我就不摘抄了，大概意思是他们公司是某个电影的版权所有人，发现这个IP有这个电影的源，因此发函警告。我看了看要求，也不算太过分。停止上下传，删除文件。
生气么？
实话说，收到这封邮件的时候我一点都不意外，而且挺高兴。因为他们做了正确的事情。如同我在某篇blog里面写的，不仅是程序，电影，电视，图书，文字，也都是有版权的。为某件事情努力的人应当得到报酬，除非他们自愿贡献。而免费观看和传播这些内容本身就是偷窃，这是一定的。不能因为所有人都在做，就理直气壮的认为这是天经地义。公平的想一想吧，如果没有版权会如何？程序员为了能够赚钱，大概会产生流氓软件，或者转行。而在其他行业，例如电影，大概就没有新的影片了。
既然知道不好，为什么还做？
人类是矛盾的。除掉版权没问题的资料外（至少我觉得没问题）。我有不少片子是无法付钱的，国内根本没有引入，这里面以动漫类为最。有不少片子是我仅仅想扫两眼的，如果你告诉我这玩意真的要付钱，那还是谁爱看谁看吧。
怎么发现的？合法么？
首先，对方是如何发现我的文件的？我估计是内容扫描。在服务器上找到这个文件的下载，然后扫描所有的源。如果这个源位于一个可诉讼的位置，就发函。如果不行，就试图阻截。
这个过程在法理上是行的通的，而如果要在每个ISP上扫描传入传出的数据本身，在法理上（我说的是美国的法律，不是天朝的）是行不通的，因为违宪。
那么，edonkey/kad/bittorrent有没有什么办法来规避这个问题呢？
首先，必须提供虚假源。以一定比例向客户端传送虚假的源数据，这会导致单纯的从edonkey上下载源列表不可行。因为即使只有百分之一，你也没办法证明你得到的源列表是有效的。警告也许可以，拿这个当证据去诉讼就要出篓子了。
其次，可能要发展数据混合传输方式。将一段内容正交拆分，得到两个比1/2的块，或者N块1/N。单独的块必须保证无法还原出数据，一个字节都还原不出，而且不能保证必须有原始数据才能生成这个块。为了满足以上条件，直接将内容条带化是不可行的，可能需要某种编码转换算法。
当你需要下载某一块真实数据的时候，你必须向不同的人请求将这一块内容1/N之一后的某一个编号块。从理论上说，这样能确认数据来源者拥有原始文件么？不能。虽然这么说很奇怪，但是你并不能确认来源者拥有这个文件的任何一个部分，也不能确认来源者自愿上传这个内容。因为你去获得数据，仅仅是因为源拥有这个数据。这个数据完全可能是某个合法资源的一部分。
最后，我觉得最合适的可能是大DHT，不过这会违背人性。DHT的全称是分布式哈希表，而从hashtable结构上说，完全可以将影片的所有数据全部保存到这个hashtable里面，虽然代价是相当大的。每当有人共享数据，这个数据会先传输到key附近的支持节点上，消耗这些节点的存储空间——而这个存储空间的消耗对他们完全没用。整个过程，还会额外的消耗网络带宽。
其实我也不想先付钱。
但是我也并不是很愿意先为了我下载的电影付钱，这和我上面说的不相矛盾。这个大概就是吃饭前付钱和吃饭后付钱的区别。其实我更喜欢吃饭后付钱的——尤其是对于内容质量差异很大的图书和电影。很多垃圾电影还是不看的好——也许这就是评分系统的优势。但是对于营销者来说，真的会甘心被打上一个很低的分数，然后血本无归么？所以你可以在任何地方看到通过营销方式干扰评价。
我对一个朋友说，盛大的书我一般喜欢看完再付钱。道理很简单，我追了无数本书，被太监，腰斩，烂尾，质量下降，换人。我觉得，还是让我们吃完全餐再付钱比较有道理。
版权有没有不合理的地方？
其实挺多——我说的是美国版权法。
首先，软件产品只有20年，但是电影音乐有70年——难道程序员特别贱，或者特别短命？
其次，阻碍学习。版权应当排除所有以学习为目的的使用，人类学习新知识的权利不言自明，不应受到阻碍。
最后，版权剥削。苹果销售的提成是多少？总数的30%。而普通媒体集团购入版权的费用是多少？不会超过最后收益的三成。这就是为什么我更喜欢在苹果上买app的原因——起码这对作者好，而且我也不用堆一堆纸或者没用的光盘在家里。</description>
    </item>
    
    <item>
      <title>kvm虚拟化的性能对比</title>
      <link>//blog.shell909090.org/blog/archives/2118/</link>
      <pubDate>Mon, 19 Mar 2012 07:09:38 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2118/</guid>
      <description>废话不多说，4G的机器，debian testing，amd64内核32位环境。用kvm切出一个768m的机器，debian testing，64位内核64位环境。对比起来有点不公平，不过基本说明问题。
用lmbench对比两者的性能，报告我就不贴了。基本结论如下：
1.纯计算: kvm内比真机还快，或者至少性能相当。估计是32位环境的关系。
2.syscall, read, write, select: 都是kvm快。
3.Protection fault,AF_UNIX sock stream latency,fork+exit,fork+execve: 真机比kvm快至少4倍，最多可达6倍。
4.文件读写api: 真机比kvm快3倍以上。
5.socket性能: pipe是kvm快，unix file是真机快。
6.iozone: 两者吞吐性能几乎一致，有时kvm比真机还快。可能和真机的ext3上面堆满碎片结构有关。
基本结论，kvm在计算和io上都没什么太大问题，主要问题在于各种涉及ring0指令的内核调用方面（好像这也是虚拟化的通病）。在虚拟化系统中，尽量避免大量的内核调用，尽量减少碎片调用，增大IO块。</description>
    </item>
    
    <item>
      <title>答一封读者来信——同机构内不同组织合作的分析</title>
      <link>//blog.shell909090.org/blog/archives/2116/</link>
      <pubDate>Fri, 16 Mar 2012 09:04:25 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2116/</guid>
      <description>这次的题目是一个读者的问题，她的原文很复杂，我不记得了。我大致的理解是，在同一个领导下面的多个不同的组织间的合作，对其进行分析。
唔，怎么说呢，这个问题其实挺好玩的。我首先给没参加工作的同学们讲解一点基础常识，一般来说，公司/企业/组织，都是树形结构的，又非单纯的树形结构。所谓树形结构，就是一个头，手下有几个人，每个人负责一个方面。每个人又有一些手下，如此往复，就形成了一颗管理树。管理树的一个关键禁忌是越级，没有毕业或者刚毕业的同学千万要记牢，越级是很忌讳的，无论是哪个方向。如果你有个问题，需要向上反映，一定要经过你的直接领导，或者在你直接领导在场的情况下反映。而作为领导指挥下级的时候，也一定要交代他的直接领导，或者他的直接领导在场。通常你作为二层领导的时候，资历已经足够让你知道越级的害处。因此经常发生的问题是向上越级。
一般来说，这个管理树的层级越多，公司效率越低。你可以很容易的想明白，如果你对一个关键问题的报告，要通过20层领导才能递交给足够关键的人，你们公司的决策和反应速度怎么快的起来。但是反过来说，在节点不变的情况下，如果要降低树的高度，那只有在一个节点上挂更多的子节点，即一个领导需要直接管理更多下属，处理更多问题。
而更复杂的是，正统的树形结构，应当是由上级进行信息协调。但是为了增加效率，通常来说管理树还不是一个严谨的树形结构，而是一个网状结构。例如，理论上说，销售问题应当是由销售部门搞定的。但是销售中可能涉及很多技术问题，因此需要工程师来参与，而且是长期参与。因此我们有个职位，叫做售前工程师，专门负责这个问题。售前工程师属于销售部还是研发部负责呢？我们在行政级别上归属销售部管理，但是实际上这些工程师还要长期参与研发部工作，这期间他们实际上受到研发部管理。这就是所谓的交叉管理状况。
直观上看，我们很容易得出一个推论。当组织规模增加的时候，这些问题就会如同一团乱麻一般纠结起来。事实上也是如此，同样的组织结构，当组织规模增加的时候，效率一定是严格下降的。只是不同的结构下降的速度不尽相同。我们常听到小公司比较有竞争力，原因很大程度上是因为小公司只有职能和级别划分，而没有严谨的管理树。甚至有的时候，连职能和级别划分都没有。这种管理在感觉上会比较混乱，因此一般只能在大家都是哥们的时候用这招。
因此，很多大型公司采取的一种常见管理方式是组织化，OU。所谓OU，即脱离集团的直接领导后仍然可独立存在的组织。这些组织可能是控股公司，子公司，分公司，公司内部门，产品线，项目组，形态很多。OU化的核心意义是，为交叉管理提供了一个最大化边界，为集团管理提供了一个最小单元。由于集团管理的最小单元的增大，因此集团可以管理的规模也更加的大。通常来说，OU就是这么被理解的。
OU和正常的组织部分有几点不同。通常来说，OU有独立的财政系统，OU间互相是需要结算的，OU的老大是要部分承担OU的盈亏的。所以有的时候，你受某公司邀请前去开会，往往能看到组织者和行政部的人。行政部的人管理整个会议室，完事后是要管组织者结帐的——如果这个集团的行政部是独立的话。同样，如果OU总是亏，这个亏损就会被评估。老板会考虑，外包是不是更合算。如果是，这个OU很可能就被裁撤。
因此OU间的关系既是在同一个集团内的合作关系，也属于竞争关系。因此你可以看到，去年腾讯网的广告位放过淘宝，而不是拍拍。原因就非常简单。淘宝不是同一个集团的，走的是正对正的生意关系，一般来说给的钱更多。拍拍是自己人，老总为了省经费，总会想拉关系少给点。如果给拍拍不能带来现金，也没法带来KPI，那就给淘宝吧。这就属于集团内协调不善导致拆台的结果。
OK，上文废话半天，总算言归正传。在不同的OU之间，进行产品和技术合作，基本来说得依据OU的级别来细说。越是细小，合作越多的OU，其特性就越接近非独立部门。而越是庞大的OU，例如下属控股公司，就越接近独立公司。非独立部门间进行产品和技术合作的好处是，双方有充分的信任关系，因而双方可以充分讨论其中利弊，并且得到比较好的结果。而独立公司间，往往有互相不信任的情况（这个也看的，不少公司间的关系甚至好的工程师会互相为对方修bug），因此有些时候就很无奈的出现了纳什均衡。
这个现象其实正是OU所带来的双刃剑。越是OU化充分，公司的可管理规模就越大，但是手下间互相打架的情况就越严重。如果你愿意这么理解的话，红杉每年投了一堆风投，其中不少是做同一领域的。理论上你可以把这些公司都理解为红杉的下属，只是红杉没有参与管理——也没道理参与管理。这些公司间，不少是死对头。这正是最强的OU化和松散的外部协调管理所带来的结果。如果情况对红杉有利，他是否可以凭借庞大的股份介入，终止持有股份的几家公司间的对立呢？这会为红杉带来庞大的利益。这同样也可以看做是削弱OU，加强外部调整的结果。</description>
    </item>
    
    <item>
      <title>被实名制了</title>
      <link>//blog.shell909090.org/blog/archives/2114/</link>
      <pubDate>Wed, 14 Mar 2012 04:13:42 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2114/</guid>
      <description>大家听说新浪围脖要实名制了吧？贝壳不大想实名制的，但是今天早上开围脖，收到一条消息，“您已经成功绑定了手机，具备真实用户身份，您已获得&amp;quot;微身份&amp;quot;勋章。&amp;ldquo;微身份&amp;quot;勋章用户，帐号更安全，交流更放心，与朋友互动更便捷。查看详情。” TMD我连自己手机号隐私都保护不住，安全个P。
列一下新浪围脖的权限：
查阅敏感日志数据 发送短信 GPS位置 网络访问权限 修改/删除SD卡内容 录音/拍照和视频 读取手机状态和身份 更改网络连接性 对，每条都是必要的。围脖可以附加位置，所以新浪需要GPS信息，围脖可以发照片和视频，所以需要拍照和录音权限。但是这些合起来，看看我能做什么。
有“读取手机状态和身份”和“发送短信”权限，可以伪装本人登录网银，操纵资金。
有“GPS位置”和“录音/拍照和视频”权限，可以监控你的行踪，观察你在和谁说些什么东西。
既可成为神也可成为恶魔的程序阿。
我准备立即删除应用，封存新浪围脖帐号。并建议大家也如此。
另外，我随便翻了几个程序，发现国外的app，或者说大厂app，谷歌原生app，权限都十分干净。身份验证器，权限只有“控制振动器”。快图浏览，权限也只有“修改/删除SD卡内容”和“防止手机休眠”。slice it的权限是，“修改/删除SD卡内容”，“完全的互联网访问权限”，“读取手机状态和身份”和“系统工具”。其中最后两个权限比较可疑。
而国内的app，权限都十分古怪。我就光列一些比较奇怪的吧。京东，需要精准GPS位置，拨打电话号码，读取手机状态和身份。支付宝，需要联系人数据。手机QQ，需要精确的GPS位置。
感觉上，app的权限都被滥用了。是的，android设定了权限。是的，我们可以查看app权限，并且阻止有疑问的应用的安装。但是，我查看的一大半应用，都具备“读取手机状态和身份”这个权限。就是说，他们可以知道你的手机号，然后找到你是谁（中国手机大半都是实名制的）。而我从来没听说过有人对此有过疑问和警惕。
而且即使你有疑问，也没什么办法。android没有提供一种机制，对权限有疑问的程序，封闭一部分权限。例如你对QQ的摄像头访问权限有疑问，可以关闭摄像头。这样会更加安全，当然，代价就是无法在QQ中使用摄像头了。如果你信的过雷布斯，小米有提供类似的功能，不过只能封闭某类的权限。</description>
    </item>
    
    <item>
      <title>普吉岛游记下</title>
      <link>//blog.shell909090.org/blog/archives/2112/</link>
      <pubDate>Mon, 12 Mar 2012 06:31:19 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2112/</guid>
      <description>第三天的行程最复杂，也最精华，但是最让人郁闷。因为我们是国内团体出游，而且是公司组织。所以我们的团费是公司付的。上一个团有小PP岛的项目，感觉最好玩，所以我们是打算自费参加的（要自己掏钱）。结果在出国前一天（注意这个时间），旅游代理才传来消息，自费项目被打上了一个超级贵的价格，而且离团要收取1500元/人/天的费用。一天时间根本不够我们商量处理的，我们就出了国。当地导游更夸张了，直接把我们的项目打了个包，不能拆散了卖。要去小PP岛，可以，一堆项目，7500B起。而且头天车上把原定行程说的一钱不值，彻底影响游玩心情。没办法，我们自费去的小PP岛，这点很不爽。
但是实话实说，由于大小PP岛我们都转了一圈，至少旅行社还没彻底骗人，小PP岛确实比大PP岛好玩。海水清澈透明，快艇也很爽很给力。如果不是这样的话，我估计全团的人要彻底吵翻天了。不过鉴于我们的状况，我建议大家去普吉岛一定要自由行，然后再找当地华人旅行社报价，价格非常给力。网络上有人说1200B就玩到了，最贵不过1800B。
早上我们在海边坐一个30多人的快艇，向东南方向开。旅行社号称船上水和水果不要钱，其实携带是有限的。只有一个大的保温箱，里面装了不少饮料和冰块，水果相当少。早上的阳关还比较温煦，所以我选择坐船头。快艇开往波光粼粼的印度洋，迎着海面的朝阳，吹着咧咧的海风，舒服是挺舒服，但是结果就是——我晒伤了。千万记得，不要以为晒到不热就不会晒伤，也不要以为涂了防晒油就无敌了。
小PP岛行程的第一天是猴子沙滩，沙滩上有很多猴子，拍照千万记得给吃的。我们团出了点事故，有个游客，我们不知道是谁，逗猴子玩。猴王发怒了，结果他自己跑掉了。然后一个温州的老阿姨没看到，看见猴子跑过来很开心的拍照，结果就被猴子抓伤了。这件事情导游在车子上说过不要随便招惹猴子，所以怎么定性都是意外。隔壁一个团也在逗猴子，不过他们有给吃的。而且领队说自己带队数年，头一次听说猴子伤人的情况。因此，出来玩注意人身安全，逗猴子要给吃的，而且千万记得不要让猴子看到你从包里面拿吃的，否则他还会抢你的包。
猴子沙滩旁边是大堡礁，这是另一个精华景点。大堡礁海水清澈，带上浮潜装备后，可以清楚的看到海水下面的礁石和鱼群。我们玩了一个多小时，多数人都晒伤了。猜猜最容易晒伤的位置在哪？不是手脚，不是面部，也不是背部——那个有救生衣。是两个肩膀。如果要玩浮潜，建议在肩膀上多涂抹防晒油。
然后是情人沙滩，目前这个景点已经不是特别好玩了。这个景点本来有个钟乳石，和男性的某个器官特别类似。但是在年初涨潮的时候，被一个长尾船撞坏了。因此去拍照的时候，基本照不到什么。不过青山，海滩，还有美女，还是值得一看的。尤其是有不少MM穿着泳衣跑来跑去，有的还系上一条纱笼，很养眼。
情人沙滩的隔壁就是三峡湾，那里三面环山。进出的狭长甬道水位很浅，因此显现出苹果绿色。而进去后水位反而增加，显现墨绿色。海水温度冷热适中，比较适合游泳，但是不适合浮浅。在那里游了一会就走掉了。另外所谓水温冷热适中这话也说的很有技巧。我们游下来的结果是，海水温度循环，导致部分区域温度高，部分区域温度低。好像家里冷水和热水龙头一起开的时候，在脸盆里面感觉到的情况一样。温差不是很大，有救生衣，也不用怕抽筋呛水，还是挺好玩的。
中午在大PP岛上吃的自助餐，海水果然更加浑浊一些。自助餐很难吃，但是有一种粉条还是味道不错的。下午参观了一个燕窝洞，燕子没看到多少，但是看到不少鱼。由于水位浅，燕窝洞前的海水还是浅绿色，和远处墨蓝深黑的印度洋完全不同。从高处往下看，鱼群清晰可见。扔点面包屑下去，鱼群就跳出水面争抢。实话说，也就这点还算好玩。
中间插一句，就我看到的印度洋的海水，每天每时每刻都不相同。早上和晚上的时候，基本呈现浅蓝色，天气好的情况下就波光粼粼，而天气不好就带有一丝灰色，部分海面会比较平静。而中午的时候，海水就呈深墨绿色，如同一块巨大的翡翠。海水浅的地方，会显现出神奇的苹果绿色。海面上风吹过，海水就在底下的沙滩上形成变化万千的光斑，如同我们在电视上看到的那样。当渐渐变深的时候，颜色会逐渐从苹果绿过渡到深绿再到深蓝。清澈的海水可以见到2-3米以下，而浑浊的海水则很难看到1米一下的情况。珊瑚岛，大堡礁，都是属于清澈的海水。而大PP岛，帝王岛则是比较浑浊的海水。
帝王岛其实并不如想像的好玩，我们玩的地方旁边就是礁石，我的脚掌被礁石划伤了两道，红肿，但是没有破。海滩上死珊瑚很多，非常扎脚，比起来猴子沙滩上根本不用穿鞋。海水很难看到2-3米以下的情况，而且沙滩上没有什么美女。唯一比较开心的是我们在这里玩了一个多小时。我怀疑为什么没有在大堡礁那里玩多点时间，暗自猜测大堡礁也许是收费的吧。
从行程回来，我们在码头那里买NaRuYa的包，据说是泰国特产。码头会贵一点，但是我们不知道后面还有没有机会，没办法，还是买了。后来算下来，贵了将近20%。晚上是购物行程，参观腰果工厂。我买回来的酸辣腰果大概是280B，合人民币58左右。而淘宝上这东西200g的售价大约在40左右，由此你们大概就知道所谓合算是什么一个概念了。
晚上我们在街边买了不少衣服，由于是临时决定的购物，所以导游大概只能拿一点回扣。我用1000B买了6件衣服，合34一件。不算很便宜，但是由于都很有特色，所以很喜欢。女孩子去泰国可以买一条纱笼，穿着很漂亮的。那里的长裙穿着也很有气质——当然，这个是因人而异的。
最后一天是纯粹的购物行程，早上去寺庙参拜。泰国寺庙有一点好就是，你给的供奉多少随意，我基本没听说过硬要收的香火钱。也许是因为当地人笃信佛教，敢这么干会被当地人鄙视吧。但是如果你许了愿望就记得去还愿。我没有进经堂，就在外面拍了拍寺庙大殿，还有经堂门口的猫和狗。开始我还以为猫狗都有佛性，流连在经堂门口不肯离开。结果过去一看，隔壁放着一个牌子，上面写着猫狗饲料10B一包。东西并没有人看管，猫狗也不随便去吃。我想这个此情此景，应该没几个煞风景的会倒饲料不付钱吧。
中午我们去医院接了一下被猴子抓伤的阿姨，据说是手筋断了，在岛上没有缝针，只是简单的注射了狂犬病和破伤风疫苗，然后包扎一下就走了。结果手臂血流不止，到晚上没办法，送去医院。第二天传来消息说手筋断了，去私立医院做的接筋。因此再三强调，旅游有风险，大家要小心。尤其不要乱逗生物，逗大象什么的，记得最多一次就要给他。逗猴子之类的最好离远点，还要小心抢包。摸海洋生物更是要小心，水母，珊瑚鱼，都是有毒的。海胆没毒，但是扎到很痛。
下午是一个宝石店，一个皮具店，一个毒蛇研究中心。除了玩蛇表演无善可表，因此不细说。不过晚上老杨看到他在皮具店里面买到的钱包，在超市中仅售1/3的价格——那个——你们自己去想吧。泰国的宝石还并非特别出名，真正以宝石而闻名的应当是缅甸和斯里兰卡。尤其是缅甸密支那的翡翠，更是独一无二，而且基本接近开采殆尽。但是泰国还是很著名的宝石产地，其红宝石在欧美市场尤其受到欢迎。但是不得不说的是，宝石这个东西是高度专业的领域，不懂还是不要随便购买的好。虽然说我们去的那家店属于皇家店，不用担心假货之类问题。但是价格就是另一个问题了。
晚上我们逛了一下超市，这才真正买到了不少好东西。蜂蜜，腰果，调料，咖哩，榛子酱，非常便宜，而且不用担心假货。泰国有三个死刑，贩毒，杀害父母（杀其他人还不是死刑），还有食品药品造假。因此国内很多蜂蜜都有问题，泰国的蜂蜜基本都是OK的。
上飞机前，我们去办理了退税。泰国退税的流程是，你要在可以退税的商店中，消费2000B以上（同一家商店）。然后在那家店里面办理退税单，对方会要你的护照号码，并列出你能够拿到多少的退税。通常是7%，在单子上会写有多少泰铢。然后在机场进入海关第二次安检，等待飞机的登机口那里，可以有一个VAT退税窗口。以你的护照和登机牌，退税单办理退税手续。要注意，一次退税有100B的手续费，因此建议熟人合到一起退税。退税可以选择人民币或者泰铢，看你自己高兴。但是不得不说，退税的实际额度非常小，我们一行9人消费了7000多B，合人民币1500上下。退税才500B，到手400B，合人民币80，一人10块。但是退税要排队将近半个小时，没那个美国功夫的可以省省了。我看到温州团的阿姨们一帮人，一次退税10000B——这TMD才值得退好吧。
另外，附上泰国购物的物品价格对照。
豆奶，别算价格了，泰国那里豆奶明显和上海不是一个档次的，10B。
腰果，上海这里大概是100元/500g，泰国那里超时里大概是120B/200g，我们的购物景点是280B/200g。
榛子酱，上海这里是55元/750g，泰国那里是300B/750g，亏。
蜂蜜，不算价格了，中国的蜂蜜里面都是结晶的，泰国那瓶现在在我冰箱里面还是液体。
nex-3c相机（因为我也用这个相机，所以知道国内价格，作为电子类产品代表关注了一下），泰国大约是21000B，国内是4300，差不多。
NARAYA包，国内有搞代购的，因此大包100上下，小包10-20不等。换成泰铢，在泰国那里大概就便宜个10-20%。注意，如果是购物点，或者导游推荐的点，通常和国内一个价格。
衣服，我买了6件，包括短袖，polo，纱笼，连衣裙什么的，都比较有当地特色，1000B。这个国内价格很不透明，不过换成人民币，我想我在国内也很难买到更便宜的东西了。
化妆品。只能说，去了就装一堆欧莱雅回来，基本都是50%discount。我买了1000多人民币的化妆品，大概省掉了1000多，是此次旅行中最合算的部分，其余最好也就是做平。</description>
    </item>
    
    <item>
      <title>普吉岛游记上</title>
      <link>//blog.shell909090.org/blog/archives/2110/</link>
      <pubDate>Fri, 09 Mar 2012 02:11:41 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2110/</guid>
      <description>来到普吉岛的第一天，是晚上一点左右。布吉国际机场是一个非常小的机场，大概和国内普通城市机场差不多大，但是每年却拥有上百万的人流量，其中主要都是来普吉岛渡假的欧美游客。我们坐车从布吉国际机场到芭东的The Blue Marine Resort &amp;amp; Spa Hotel，到达的时候已经是两点多了。
首先讲点泰国旅游常识，泰国在东7区，使用曼谷时间，和北京时间差一个小时。当地使用的语言是泰文，大部分人不会讲英文和中文。当然，如果去到旅游场所，中文和英文使用比例是高的吓人的。有一个旅游商店，所有营业员都是中文英文泰文，部分我听到了日文。。。
泰国是王国，人民很尊敬王室，所以不要拿王室开玩笑。对方听不懂，没事。听懂了，自找麻烦。泰国有九成的人信奉佛教，泰国的佛教属小乘佛教，僧侣可以吃肉喝酒，但是不可接近女色。所以去旅游的MM看到僧侣一定要避开，去寺庙参观的时候一定要穿戴整齐，不可以穿太露的衣服。
泰国的货币是泰铢，简写为B。目前泰铢汇率大概在4.3-4.9之间。在中国银行可以以很高的价格拿到泰铢，我是4.8左右拿到的。而到了机场和当地就会价格低一点。当地很多商店是不支持visa和银联卡的，因此去之前都要打听清楚。visa可以刷美金，银联刷人民币，都是以中国银行的卖出汇率当场结算。但是有些商场可能需要手续费。另外，如果现金不足，从卡中取泰铢也是可以的，但是同样需要手续费。普通银行卡需要具备这个功能，每次手续150B。而信用卡则作为预借现金计算费用，具体费用查自己的发卡行。
泰国的东西很便宜，我们酒店隔壁的超市，一瓶黑豆奶10B，很好喝。我买了120ml的防晒霜，327B，合人民币大约70不到。普吉岛地区日晒严重，一定要spf50+的防晒霜，而且要注意防晒，否则就一定会晒伤。
泰国主要有三种民族，穆斯林，泰国人，华人。泰国的华人也要看出国时间长短，有的是百年前的潮州和福建人到此定居的，因此除了习俗还保留中国人习俗，基本已经不能听说汉语。有些是国民党93师的后裔，因此还能听说汉语。我们导游的爷爷，就是93师的。下文会细说这个师。
普吉岛第一天的行程很简单，就是去割喉群岛而已。割喉群岛位于攀牙府，在普吉府的北边。海岸边生长着密集的红树林，需要坐长尾船从红树林中穿出去。这边的红树林规模非常大，我在杭州和北海都有看到过红树林，远远看过去一片已经算是非常大。这里居然坐船连续开了20多分钟，所见全是红树林。据说只有巴西的红树林可以和这里媲美。
从红树林开出，我们到回教村落是午饭。当然，既然是回教村落，就肯定没有猪肉和酒。我们吃到了一种鱼，这边吃饭的时候几乎顿顿都能看到。同事说中国也有的卖，不是很特产的鱼。村落很有意思，整个架在水面上的，彷佛一条大大的船。我们在餐厅经常可以看到包着头巾的穆斯林。
从村落开出，我们就到了割喉群岛观光点。那里是两艘船，每艘的侧面可以停靠长尾船，而尾部可以停靠皮划艇。有当地人会用很小的皮划艇载着我们划过割喉群岛。那里的岩石下面有不少洞穴，涨潮的时候会彻底淹没。我们去的时间差不多，因此人躺下后可以从洞穴顶部划进去。最近的地方，我必须努力吐气才能避免肚子碰到岩石。旁边同样生长着不少红树林，还有老外爬上去照相的。
皮划艇上的工作人员是当地人，不会说英文，但是居然会说一点中文。泰国是资本主义国家，因此不少地方都需要给小费。皮划艇上下来后，你需要给工作人员100B的小费。和愉快的旅行相比，100B的小费很值。
晚上是去普吉市内的一家店吃烧烤，泰式烧烤很不错，我们都可以去自己拿，拿了就随便吃。不过墙上用中文写着，吃下去是福气，浪费是淘气，浪费食物罚款300B。估计有不少中国人都是随便拿，浪费掉的，感觉十分尴尬。老板是华人，而且会说中文，估计是从大陆过去做生意的。东西上面有涂调味料，有点辣味。很好吃，但是我吃不大习惯。到了后期都是烤好了在旁边的水里洗一下再吃的，回去还是有点小小的闹肚子。
当晚我和领队聊天，发现领队居然很熟悉93师的事情。国内了解93师的人应当不多，做一下简要介绍。当年国共内战，93师在云南地区作战。国民党打不过共产党，蒋介石就想到了退守台湾。93师人数庞大无路可退，就退入了缅甸-老挝-泰国交界的金三角地区。虽然内战打不赢共产党，但是93师和泰国人打却没怎么输。硬生生在金三角地区打游击，打的泰国人无计可施。但是国民但始终对93师不闻不问，这样下去也不是办法，最后部队投诚泰国，帮泰国人打仗，换取子孙的泰国人身份。93师付出惨重代价，才换来了子孙的合法地位。我们的导游，身份证号就是8开头的，因为是从难民证办理出来的。而投诚之前，为了维持生计，他们就在驻地种植鸦片。金三角于是成了世界闻名的毒品源头。有一个叫坤沙的人，中文名字张奇夫，成了世界闻名的毒王。导游的爷爷就是93师成员，当年导游曾亲眼见到如何制作和吸食鸦片，爷爷也因为鸦片过世。
因为是敌对部队的后裔，因此大陆对93师也不怎么关心。据导游说，邓公当年曾经有心让93师归国，但是被指挥官拒绝。台湾对93师虽然有心，却鞭长莫及。领队因为好奇，曾经雇人驱车前去美斯乐。当时遍地的罂粟已经被铲除，改为种植高山茶。经常可以看到台湾商人前去旅游，并向当地人购茶。不但不砍价（貌似砍价已经是中国人购物的标准流程了），而且还多付。当地的汉语小学就是由台湾方面出资修建的。
第二天的行程稍稍复杂，早上乘坐快艇去珊瑚岛，下午去神仙半岛。早上乘坐的快艇是20人左右的小艇，一团要分两艘，经过10多分钟的航行就可抵达珊瑚岛。沙滩上海水湛蓝，很适合游泳。领队和我们强调一点，必须在浮标划定的区域内游泳，不可离开。原来没有浮标的时候，经常有老外不慎游到快艇航线上，避让不及结果惨死。因此浮标内是游客玩水区域，浮标外是航道。早上的时候潮水还浅，我们站在海滩上根本游不起来。下午海水涨潮，才比较适合游泳。
当地有一种降落伞项目，是让游客穿上降落伞，然后由快艇拖着放风筝。要求必须在80公斤以下，所以我就没玩。据李俊说，他在80公斤以上，却顺利玩了，很好玩。我报了深潜的自费项目，要价2100B，照相需要加750B的费用。
深潜和浮潜的区别在于，浮浅使用蛙镜和呼吸管，一般是潜不下去的。说是潜水，你最多在水面上浮着，因此才叫浮潜，不过能清楚的看到水里的东西。深潜是直接潜入水中，靠氧气瓶和呼吸管潜水。我们这次深潜的深度是3-5米，时间大约30分钟。计算压强大约是1.3-1.5个大气压，危险性不是很高。
首先会有教练教你如何在水中沟通，如何进行呼吸和排水。然后会帮你穿上整套的装备，从沙滩潜入水中。近视有专用的蛙镜，也可以参与潜水。入水后，可以看到成群的鱼在水里游动。有色彩斑斓的小丑鱼，有银蓝色长条的鱼，还有一些纯蓝色的鱼。可以伸手去摸，但是鱼很灵活，摸不到。偶尔可以看到几条黑色或者褐色的鱼，我们都不敢伸手。教练说这些鱼有毒，虽然不致命，但是会让手臂麻木肿胀一整天。
教练给我们戴上手套，然后给我们几块面包。顿时周围围上来成群的鱼，我基本看不到周围的情况。鱼不停的啄食面包，偶尔还有啄到我的手臂的。扔掉面包，我才能继续看到周围。后面教练还带着我们看贝壳，珊瑚，海葵和海胆。珊瑚和海葵都是软软的，海胆是一个带刺的球，据说扎到很痛，我没敢摸。
深潜是背氧气瓶潜入的，因此活动时间受限于氧气瓶内容量。如果呼吸慢，耗氧少，最长可以活动一个半小时。常规人是一个小时，教练预留15分钟安全区域，活动45分钟。而我的耗氧量比较大，才活动30分钟就开始上浮了，对不起我的同伴了。就我实验下来的结果，呼吸器有时会有吸不过气来的感觉，但是脸朝下后就好很多，猜测是因为海水压力所致。当肺部高于出气口时，吸气顺利，呼气受到压迫。而肺部低于出气口时相反。由于我们大部分时候都是缓慢呼吸以节约氧气，因此都是处于吸气不足的状态，脸朝下后问题就会缓解。
中午的午饭是在岛上吃的，只能说一般。下午继续游了一下，就回去了。下午参观四面佛。四面佛其实是印度教和婆罗门教的主神之一，梵天。但是在泰国很兴盛，而且基本都是在佛教寺庙中拜的，这点可以看到印度次大陆宗教互相影响的状态。我们路过很多人家，那里都有供奉四面佛。有一些很大的商场，门口一个麦当劳，麦当劳外面就是一尊四面佛。看着很不搭，但是很漂亮。如果在上海的朋友想看看，可以到正大广场门口，不知道那里供奉的四面佛还在不在。泰国的四面佛据说很灵验，有很多香港人都非常相信。具体对四面佛的解释可以自行查找wiki，本blog不解释宗教问题。
贝壳不信仰四面佛，不过那里的景色不错，拍了不少很好的照片。晚饭前去看了一个很无聊的农家表演，骑了一会大象，看了斗鸡，猴子摘椰子，割橡胶。然后就去了第一个购物景点，乳胶枕头。
泰国的却是乳胶的原产地，但是以为乳胶枕头比较便宜是没道理的。浙江杭州西湖旁的龙井山是龙井的原产地，你作为一个游客去那里买茶看看？不坑死算你厉害。一般来说，购物景点最好的情况下也就是能卖到你常规能买到价格的80%，甚至有的时候比你能买到的价格高出一倍类。所以旅游购物不必太疯狂，任凭导游吹的天花乱坠，不理他。如果你觉得导游服务不错，东西还算值得，而且真的用的上，可以适当买点。反之就不要买。如果你真想买点好东西，那就不妨看国内导游。他们在买的东西，那就不要犹豫了，大胆买吧。
晚上的行程预定是没有的，但是当地导游和我们推荐成人秀，当地叫神秘秀。说清楚是色情表演，而且不在自费名单里，小孩子不可以去看。这种就属于周瑜打黄盖，一个愿打一个愿挨。导游希望多赚点外快，游客希望多看点新鲜的东西，偏偏这个是不能列入标准自费行程中的（道理你们懂）。希望看就去看，色情是比较色情，刺激也比较刺激。我们这次一行九人出来，就不方便去看了。你问我好不好，我也不知道。</description>
    </item>
    
    <item>
      <title>销售的几大手法和防御</title>
      <link>//blog.shell909090.org/blog/archives/2108/</link>
      <pubDate>Thu, 08 Mar 2012 03:11:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2108/</guid>
      <description>1.减少对方做选择的机会。一般来说，不怕不识货，就怕货比货。一旦买家有了选择权，卖家就少一个手脚可玩了。因此常见方法是封锁对方做选择的机会，例如，你们去南浦大桥下的沃尔玛，里面手机是没信号的吧。
2.减少你的思考时间。通常这点是多少时间内购买打折，今天最后一天之类的说法。总之，让你的反应时间减少到24小时以内。
3.非透明定价。通常来说，有市场价的东西是很难做销售的，例如电脑。也许你会说电脑卖家如何如何。但是我实话告诉你，如果他没有在硬件上骗你，给的是真货好货，全装好了，扣除成本（包括给自己发的工资），最多赚你1-2%。电脑卖家最稳定的赚钱渠道还是大量的小公司单。
4.口头误导。在没有任何证据的场合下，他往往告诉你很多错误信息。这个东西其他地方卖多贵阿，效果有多好阿，一概是忽悠。如果你录像，他的手法就变成了强调特例和误导。不过后者是没有任何办法的。
5.隐藏细节。很多sales，往往是会推敲你说话中的每个字。你要没注意到某个细节，他也就打马虎眼过去了。注意到了也尽量打马虎眼。例如一块显卡，64bit和128bit差40，你不说，他按照128bit的价格卖你64bit的卡。你即使有意见，这个也不是不合理，很难再退回来。这种事情很难防御，你要是注意每个细节，成本会太高。
6.友谊策略。很多sales会尽量聊你熟悉的东西，让你产生亲切感。例如同乡，同学。反正他总能找出和你的共同点。有的时候你觉得帮帮朋友，该坚持的地方就没有坚持，钱他就赚到了。这个策略有的时候还有点变形情况，例如他可能会说，这个东西你不一定要买，因为什么什么。我们尽量卖对的，不卖贵的，什么什么是我们的企业文化。你会觉得好激动阿，见到好人了。然后他推荐你一家，你一买，上当了，那是他的另一家店。
7.面子策略。有的时候，sales会营造你需要面子的情况。例如电影院门口给情侣卖花，饭店吃好了抢着买单。甚至据说有培训的时候，拉一帮人上来，问假定性的问题，你们愿意花多少钱和我做朋友。你说多少OK，行了，小弟，给他拉卡，按这个价格买我课程，你能不买么？
8.花钱买故事。很多时候，sales会准备一个故事，或者一个环境。例如寺庙门口，坐着喝水，你问路，给你指路。然后随口和你说，烧香前一定要洗手，不洗手晦气。那你就会问，怎么洗手。他会接着领你去洗手。洗好了，旁边就有人说，这水开过光的，问你要钱，不付钱也可以，家人就会怎么样怎么样。来烧香的都是求平安的，这么一搞还有不付钱的么？或者有的时候，在车站那里，拉要旅游的人说，那边是收费项目，我建议你去一个地方，景色很好看，免费的。你去了，然后又有人说，到这里什么什么是特产，很便宜，就是不好买。等你从七八个人的迷魂阵里面出来，往往手里已经拎着这个月工资了。
建议：
1.首先一点，不是买所有东西都要唧唧歪歪。买一块面包都要货比三家，你烦不烦阿。有些东西你不是很在意，就买个价格合适的就好了。
2.尽量增加信息量。你要看看别人对这个事情怎么评价的，网络上其他供应商报价如何。建议在手机上多准备几个应用，多准备点流量，怎么也比你吃亏来的便宜。
3.从便宜的开始买。你不懂的时候，可以先买个便宜货。当你被这个便宜货折腾了几个地方，你就会注意到贵的东西为什么贵。再买的时候就比较不容易出错。
4.买一个东西，必须经过48小时以上的思考和听取他人意见时间，否则不买。当然，这个可能错失不少好东西。但是我的经验而言，采取盲目购买造成的浪费通常比快速购买获得的好处要大一个数量级。
5.和任何sales打交道都别上一个录像设备，也不一定要开，但是一定要别着。他们吃不准你是不是在录像，说话就会小心很多。如果sales要求你关掉，你可以掉头就走。或者堂而皇之的质疑他，你为什么不敢公开你说的话。
6.不要在意和sales的关系，亲兄弟明算帐。和sales搞好关系没啥奇怪的，我和一个卖电脑的关系不错，从他那里买了6年多电脑。我知道他有赚钱，不过没关系，赚的不比市场价格高太多就行。东西一定要OK，不行的话我会要求他给我换一个，有的时候还会因为东西有问题要他打折退钱什么的。大家是生意上建立的关系，明对明才容易维持。
7.不要相信sales的任何一条信息，除了他需要和你达成的意向以外。他说1000卖你，这个你得听。他说这个东西好，那个东西不好，哪怕无关紧要，都不要听。
8.不要脸。自己评估一下，值得不值得，值得的话，就干脆不要脸了。反正他也不要脸，你也不要脸，难道他会讲你么？
9.不要好奇，拒绝故事。什么洗手之类的东西，一概听都不听直接跑掉，他拿你也没办法。硬要追你，还不如省点时间搞下一个。
10.拒绝威胁性的负面信息。中国人的传统是说话挑好听的说，因此他一些负面信息出来的时候，你可以告诉他，行了，我明白你意思了，你说点别的吧。他继续说，你马上翻脸骂人，有TM你这么说话的么，我都说明白你的意思了，你要寻我晦气还是怎么。反正只要不开打，他拿你没任何办法，你也可以借坡下驴找个借口脱身，怎么说都是对方没理。
11.假信息钓鱼。一般来说sales都有工作基础，即对方的某些真实信息。从口音判断家乡，从穿着判断收入，等等。很少有sales会假定客户是在说假话的，因为太麻烦太累了。因此，你可以放出一些错误的诱导信息。例如编造家乡，我外婆是宁波人，所以我可以说，阿，我老家宁波的。到时候他说他老家也宁波的，不好意思，那是我外婆老家，我爸爸老家江苏沙洲。再跟？我老家北京，我外公老家湖州。到了湖州都没听出来，这sales也做到头了。碰到这种客户，sales也知道对方在防他一手，往往不会太过明目张胆的玩什么技巧，只会设法在细节上阴你几下。</description>
    </item>
    
    <item>
      <title>每个程序员都是铁蹄下的尘埃</title>
      <link>//blog.shell909090.org/blog/archives/2106/</link>
      <pubDate>Tue, 06 Mar 2012 06:01:08 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2106/</guid>
      <description>这个标题很文艺，我知道。实际上我想说的问题是，未来的计算机会是什么样子。在讲正题前，我们先得说说一个我相当成功也是相当失败的项目。
在很久很久以前——好吧，其实大概就是八九年前——我还在上大学，学习机械工程。当时我对电脑很感兴趣，所以父母给我装了一台电脑。这台电脑有512M内存，PIII800MHZ的CPU，120G硬盘，是当时比较新的配置，相当好。实际上，我是用考入大学时的配置升级来的，而且花了不小的一笔钱。当时我迷上了看动漫，交大有一套系统叫做comic，用过的人都有印象吧？这套系统开始是为了动漫而设计的，上面保存了相当多的动漫，而且有管理员定期更新。后来上面更是放上了其他的影像资料，做了视频点播系统，并且为全校师生服务。交大的网络滥用警告（例如国际流量超标）并不直接张贴在校务栏上，那样没多少人能看到。这些警告张贴在comic上，并且会ban掉你对comic服务器的访问。我们哪天看不了comic了，就会去看看上面是否有警告，然后去网络中心处理掉。
好吧，扯远了。在毕业的年代，我担心自己将来不能访问comic了，所以打算带走一批我觉得有价值的数据。我毕业时新增了一块硬盘，组成了双硬盘系统，但是没有组成磁盘阵列(Raid或者动态磁盘[1])。除去系统中的80G左右的程序和数据使用空间，我还可以使用300G左右的空间。但是comic上我喜欢的数据远远超过了1T。为了解决这个问题，我就设计了volcpy系统。这个系统是这样设计的，将硬盘上的数据保存在光盘上，而将他的元数据——包括文件名，大小，光盘卷标等——留在磁盘上。这样我可以以1M的空间存储上T的数据。当时250G的磁盘大约700元，平均2.8元/G。而光盘4.3G大约1元，合0.23元/G，大约相差10倍。动漫数据是不会经常更新的，事实上应当是几乎不更新。volcpy系统负责将光盘上的文件在硬盘上生成描述文件，在将来需要的时候也可以进行数据还原。
这个设计还是挺成功的，时至今日这个系统还在工作。我手头有接近2T的光盘，也不可能不使用这个系统。不过这个系统设计的时候，我还没接触linux，因此系统在设计上有一点缺陷——他的内部结构直接照抄了windows的卷描述和文件描述数据结构[2]，这对于windows下的存储很方便。要拼装存储数据，我只需要memcpy[3]就可以了。但是这也导致linux下想读取这个数据就必须进行解析，然后对照windows文档（电脑诸神阿），将内容解析和转换。如果是今天，也许我会使用基于文本的格式，例如json，yaml，或者xml。文件大小会膨胀2-4倍，但是也只有2-4M而已。
但是我最近正在试图将数据拷贝回硬盘，并且废弃这个系统。为什么？我们再来看看刚刚计算的账单。目前光盘还在1元左右——除非你只打算保存几天的数据，否则廉价光盘的损坏率太高了。但是硬盘的价格却下降到了2T600元，合0.3元/G。有0.3元/G的可变数据存储，谁还会想要0.23元/G的光盘呢？更不提每次使用都需要启动volcpy，插入光盘，然后以7M/s的速度读取。硬盘的速度从50M/s提升到了接近100M/s，大约是光盘速度的10倍，而且还不用找到底是哪张光盘。
可写光盘存储已经死了，除非大容量固定数据的短期分发，例如软件发行，或者盗版电影，否则没人会用光盘。我在拷贝东西给别人的时候，都使用U盘——拿回来重新格式化过就不必担心中毒（windows用户不要学，没用的）。8G的usb存储只要80元，还可以重复使用。U盘还遇到了更加强劲的对手——云存储。1G网络空间基本不要钱。以现在我的带宽，我需要3小时填满，9分钟下载。主要麻烦还在于3小时缓慢的上传速度。如果上传和下载对称的话，我也没道理会使用8G80的U盘，而且花费不少时间去拿给别人。我只需要将1G数据（大概8部动漫），花费10分钟多点上传到我的云端存储，然后把地址和密码（如果需要保密的话）传给对方，让对方再用10分钟下载。我甚至不需要自己保存数据，只需要问云存储机构购买40G的空间和一定数额的带宽（这个应当比自己的硬盘便宜），然后直接使用就好，就像一块只有2.5M/s工作速度的本地磁盘一样。我可以在家里和公司使用一样的存储，把数据共享给别人，在不开启电脑的情况下下载。这简直是价廉物美的无敌方案。
但是这也是为什么我痛恨低上传网络的原因。
OK，我们说回来，未来的电脑是什么样子。本质上说，上面一个题外话（而且是相当长的题外话）正是说明这个问题的关键——软件技术受制于硬件体系的发展，在高速时代使用低速技术是不可能的。我们现在不会满足于使用光盘的廉价存储系统，也不会满足于只能传输文字的聊天系统。同样，当硬件快速发展的时候，我们更没道理满足于快速但不可变的程序。
在我大学的时候，那台老电脑（现在是老电脑了，当时可是新鲜货咧）是相当强劲的编译机，我也是个不错的程序员。经常有同学过来问一些程序问题。我一般会听一下大致问题，看看是否需要开机。如果需要，我坐下，打开vs6[4]（那还是盗版，不过当时我也是学生）和合适的项目，然后拉过一把椅子让同学坐下，然后扯一些题外话，讨论一下问题。大概15-20s后，vs6那个难看的界面打开了，插件也初始化完毕，lazy eval和swap[5]也完成了，我可以很自由的操作电脑了，才会和他说。不好意思久等了。一般人都会说，没关系，你这个相当快。我觉得他们不是在恭维。
今天，我已经不用vs了，不过很偶尔还是会用到。vs已经从6升级到了2008，更复杂，界面也更漂亮了，没有什么可比性。但是我们做一个不伤脑筋的计算。目前我的电脑是3.0GHz4核，8G内存，1T硬盘的货色。CPU的线性速度增长了4倍不到，速度已经不能更快了。但是相应的，核心多了4倍，所以计算能力大概增长了16倍。内存大了16倍，硬盘大了4倍，硬盘速度快了一倍。单从集成电路的角度说，这个很符合摩尔定律。不过四个摩尔周期花费了不止6年，而是9年。也许这和设备价格下降了不止一倍有一定关系。实际上今天的瓶颈已经更进一步的向磁盘转移了。如果硬盘速度也增加了4倍或者4倍以上，我大概猜测，vs6的打开速度也许只需要1-2s，编译速度也至少应当增加了10倍。
这种速度下，我当年做了很长时间的一些修改，使得计算速度可以增加30%的努力，顿时变得黯然失色。固然，这些修改今天依然有效，1-2s的时间会加速0.3s。但是这0.3s绝对不是我如此长久努力所期待的结果。如果这个事情重演，我们在10年后，反观今天一些能够让速度加速1倍的决定，会觉得无比的愚蠢。当时为什么我不决定使用一种简单的方法呢？虽然响应时间从0.3s变成了0.6s，但是易变性很好，对未来的兼容也很好，谁在乎0.3s呢？
原因在于，你不知道什么时候会发生什么事情。我刚刚说了，我们今天的瓶颈在于硬盘吞吐。那么你怎么知道什么时候这个问题会有突破性的新技术出现呢？也许是明天，也许是10年后。难道你先去做别的，10年后再继续你的程序员生涯？我们必须基于我们当前的硬件假定编程，然后再把这个假定放在时间面前评判。而这个假定当出现新的硬件技术体系的时候，就会变得无比愚蠢。
如果要我预期将来的计算机系统，我首先就会猜测他无比的快，而且小巧省电。足够快，代表我们不需要把code载入内存中再运行，而是可以直接从外存（或者外存缓存）中直接运行代码。或者直接从网络（或者网络缓存，下同）中直接运行。足够小巧省电，代表我们可以带着计算机到处走，就像今天我们带着手机一样。然后在工作地点，或者其他地方，把机器接入一个输入输出设备上。所以？我估计好多人已经在泪流满面了，是不是呢？做磁盘检测和恢复的孩子们？当然，不是说这个行业会消失。但是他会变成一个相当小众的行业。小众到如同TBBT的笑话一样——25个人已经是一个嘉年华了。专家会通吃所有人，而普通程序员则根本进不去。然后——Bang，硬件又升级了，专家瞬间变成了转家。
每个程序员，或多或少，都生存在硬件升级这只巨兽脚下。你一不小心猜错了他会抬起左脚还是右脚，就会直接化为尘埃。如果猜对了，没事，你只是比别人多生存了一会而已。
1.两者都是将多块硬盘逻辑上变成一块硬盘的方案。
2.描述结构指属性存储格式和顺序，例如卷描述结构就是光盘的大小，卷标等等数据和他们的顺序。
3.指直接在内存中复制数据，不做任何其他操作。
4.visual stdio，Microsoft公司上世纪出品的编程工具，一般用于C/C++语言。
5.lazy eval指程序在加载一段时间后才会执行的一些工作。把这些工作分开有助于加快程序的启动速度，但是在操作时会感觉到速度变慢。swap也有类似效果。</description>
    </item>
    
    <item>
      <title>电池阿电池</title>
      <link>//blog.shell909090.org/blog/archives/2104/</link>
      <pubDate>Mon, 05 Mar 2012 03:03:52 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2104/</guid>
      <description>三个月之内，连续两次碰到电池问题。一个是p81hd的充电口损坏，送修两个月没法用。拿回来后，发现因为无电时间过长，电池受损，大概只有2.5小时的电量（原来至少4小时）。另一个是hpmini 1017TU已经损坏的电池，居然鼓起了一个包！！！一个包在电池中央，吓得我顿时就拆下电池，放的远远的，以免爆炸。
贝壳自认还是比较爱护电池的，没有频繁冲放，没有过充过放，基本都是10%-90%区间放电。但是电池还是连续出问题，只能说目前的锂电池性能还远远不过关。
现在已经预定了一个新的hpmini电池，但是p81hd的电池就不知道该怎么处理。而报废的锂电池也不敢乱扔，不知道有没有什么地方可以处理旧电池的。</description>
    </item>
    
    <item>
      <title>关于酒精带上飞机</title>
      <link>//blog.shell909090.org/blog/archives/2102/</link>
      <pubDate>Mon, 27 Feb 2012 02:03:48 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2102/</guid>
      <description>刚刚看空中浩劫，有个哥们，是飞行员，空难调查专家。去度假的时候摔在了关岛。等他好了，就开始鼓吹飞机的座椅应该去掉个横杠，而且酒精不能随身携带。
因为飞机出事的时候，氧气泄露，都在往天花板跑。而当时关岛去的时候，很多人带了很多免税酒。这些酒在摔飞机的时候挥发的酒精和氧气结合，被点燃，然后引发了大火。所以这哥们说，酒精不能放入天花板的行李舱里面。
这绝对是从血里面学到的东西，想带酒的不妨考虑一下。
至于为啥不让带液体，则是另一个哥们。这兄弟是纽约摩天大楼爆炸案的主角，在菲律宾飞往日本的飞机上，带上去了一个炸弹做测试（测试。。。）。炸弹使用液态材料，用一个电子表做触发，两个电池做外部能源。这哥们放好炸弹自己跑了。飞机飞到一半的时候，把一个小日本直接炸了个暴菊而亡，飞机迫降那霸。如果不是这哥们对飞机的了解不深，查到的资料是同型号飞机的（型号差一点害死人阿）。这颗炸弹就会直接炸穿主油箱，然后引燃燃油，再炸掉整个飞机。幸好，他放炸弹的地方刚刚好差了一两排。
想带液体的不妨考虑一下。
至于为啥锂电池不能带上行李舱——估计是太多国产山寨手机炸的老外暴菊而亡，他们不敢让你离开这种危险品吧。</description>
    </item>
    
    <item>
      <title>从黑客到极客——hacker文化的演化</title>
      <link>//blog.shell909090.org/blog/archives/2100/</link>
      <pubDate>Tue, 21 Feb 2012 02:17:42 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2100/</guid>
      <description>说到黑客文化，就不能不提到技术。黑客是一个复杂的文化，不同的人，不同的时代有不同的解读。黑客的一端是技术，另一端是文化。如同武侠一般，一端是武，一端是俠。金大侠说过，武好写，侠难写。同样，要讲述技术，虽然艰涩，但总是可以表达的，难以表达的是黑客文化中的种种现象。对于没有背景的人来说，这些文化现象并不比技术易懂到哪里去。下面我们首先统一解说一些名词概念，以便下面的阐述。
名词解说 hacker 从原生意义上说，是喜爱计算机技术而充满叛逆的年轻人。藐视传统，不按照常规方法使用软件和服务，而是通过自己的洞察力，非法（或在后来被定义为非法）的使用。例如音频拨号时代，某位（绰号Captain Crunch）发现通过发出特定音频可以绕过收费机制，于是就公开了这个机制。hacker的原生目的不是破坏，而是表达自己的叛逆，炫耀自己的技术。而目前在主流媒体和民众中的形象是恶意的系统破坏者，会给你带来麻烦，并且以技术手段获得不法收入。在文中注意区别hacker的前后两种不同含义。
cracker
没有歧义，从一开始，就指软件的破坏者，但是不一定以此牟取私利。cracker和hacker的界限很模糊。
geek
原意是怪人，善于研究不善于交往的怪人，和书呆子(nerd)类似。但是近些年随着网络文化兴起，逐步变成褒义词，指喜爱技术（不特指计算机技术），充满DIY精神的人。
black hat
黑帽子，hacker中为了达成私利性目的而非法使用系统的人。通常常见的情况有，勒索（例如不付钱就会破坏系统和数据），盗用账户，获得非法虚拟货币等。
white hat
白帽子，和黑帽子相对，为了修补系统问题而研究系统的人。白帽子不代表免费，相反，白帽子通常催生了某类安全产业，不少白帽子是挂靠在安全公司名下，甚至自己经营安全公司。他们致力于寻找大型系统中的漏洞，并且向企业汇报漏洞，换取收入。白帽子可以看作是企业对hacker妥协的一次结果，与其让这些年轻人精力充沛的寻找漏洞，然后不知道发生什么事情。不如雇用他们为自己寻找漏洞，减轻自己的风险。
grey hat
灰帽子介于白帽和黑帽之间，你可以理解为，他们有的时候当白帽，有的时候当黑帽。也可以理解为，如果我卖你漏洞你不要，那我就卖给要抢你的人。
script kids
脚本小子。指一些并没有技术能力的人，利用他人已经完成的脚本进行攻击行为。这显然有悖于传统黑客伦理，充满乐趣的发现问题是第一位的，至于漏洞只是发现问题的结果。通常而言，普通人碰到的90%以上被认为是hacker的人都是script kids。
红客红客是一批非官方的，使用技术“维护国家和民族尊严”的人。严格来说，有不少“红客”是原生的hacker，只是激进的表达爱国主义和民族主义，这批人可以视为黑客中的一个特殊群体。然而不断有技术不足的人为了“维护中国尊严”而加入，导致一些自称红客的人实际上只能算是利用技术的script kids。由于试图以技术为手段表达政治意图的人数量庞大的关系，因此红客在一词在使用的时候，script kids的比例异常的高。在不少文章中经常混谈两者，阅读的时候应当注意区别。
飞天面条教 具体查wiki“飞天面条怪物”一词。这个是用于反对“智能设计论”的。即某些宗教主张，人类是由一个超自然的智能所设计。因此Bobby Henderson同样创造出一个符合智能设计论的神进行反讽。列入本文是因为很多geek本着找乐子的心情加入了相关恶搞。关于这个问题请仔细阅读飞天面条怪物的相关页面并去那里讨论，本文不掰扯宗教问题。
海盗党 具体wiki“海盗党”“盗版党”。瑞典的一大政党，主张现有的版权制度过度的限制了知识的发放，阻碍了人类的进步。主张减少版权限制，增进知识交流，注重隐私保护。
DDOS
分布式拒绝服务攻击。使用大量的肉鸡（傀儡）来访问某个服务，导致服务器过载，从而无法继续服务。本质上说DDOS很难防御，因为他实际上就是一种过载。
黑客文化历史 我们首先阐述的是黑客文化的背景。在大部分的文章里面，会提到黑客起源于美国的朋克文化。实际上基本如此，但是黑客属于朋克文化在校园中的一个变种，更专注于技术。这个变种是如此的具有生命力，以至于今天仍在极大的影响世界。关于这点，更进一步可以阅读（http://man.lupaworld.com/content/develop/joyfire/project/7.html），其中《黑客文化简史》这部分。说一点题外话，链接的这篇文档收录了ESR的不少名文，可以看作是传统黑客文化的讨论和总结，是相当不错的文档。
时代在变化，背景在变化，黑客在大众中的形象也在变化。黑客首次为大众所知，是在1988年，莫里斯蠕虫造成大量主机宕机。此次事件经过媒体大规模渲染，很大的影响了黑客文化在大众中的形象。实际上，传统的黑客文化很不稳定，极易被误解。因为传统的黑客文化信条之一是表达叛逆，而表达叛逆往往跟随着破坏现状，这点非常容易被滥用。很多人无视了注重技术，充满趣味的工作等其他信条，而只专注于挑战权威，从而成为臭名昭著的破坏者。而另一些人则在不违背信条的情况下，试图利用自己的技术赚钱。这催生了黑客产业链（当然，这不全是坏事）。而黑客产业链肯定会为用户和企业带来额外的麻烦。
另外提一句，在亚洲地区，黑客第一次为大众所知估计是CIH病毒。这也是第一个大规模破坏硬件的病毒。
由于种种因素，黑客在大众中的形象逐步变为了破坏者，找麻烦的人，以技术作恶者。实际上，在hacker的原始含义中是没有这个意义的。
从黑客到极客 在现代，hacker这个词和cracker这个词实际上已经很类似了。如果说区别的话，cracker更偏向于破坏程序本身，而hacker则引入了以技术作恶的意味。但是hacker的精神不死，他以其他词的形态出现。现代替代hacker出现的词是geek，这个词类似于原来的hacker，但又有所不同。我们首先回顾一下hacker的信条。
1.充满乐趣的工作，为了乐趣而工作。
2.挑战权威，自由万岁。
3.专注技术。
4.一个问题不应该被解决两次，无聊的工作是罪恶。
我找不到一个权威的geek信条，但是我个人总结如下：
1.关注原理而不关注结果。
2.为了自己的乐趣而非利益工作。
3.乐于挑战其他人无法完成的事情，并视为一种成就。
4.不限于coding，也包括以各种有技术含量的手段达成炫耀技术的目的。
对比两者，我们可以看出差别。hacker主要注重的是计算机技术，而geek更偏向于指代各种技术。hacker叛逆，挑战权威，自由万岁，而geek虽然喜欢自由，但是并没有强调挑战权威。两者都强调乐趣，强调技术。这些区别主要是由于各种时代的变化所致的。相比起来，geek文化更类似于hacker文化的一个普及和切割。去除了挑战权威的味道，泛化了技术，使得更多人有可能成为geek。
我们举一个当代的传统hacker的例子，Arron Swartz试图下载JSTOR的论文并散布，这是典型的一个hacker行为——下载并散布论文并不是出于为了获得私利，而是为了表达自己的观点——人类获得知识的权力不应当被阻碍。从法律上说，是的，这是违法行为。但是这个事情反过来，让我们关注了这么一个事实——JSTOR的收费论文库是否还有必要存在？或者说，一个更本质的问题。以校园墙为界限阻止知识获取，并以这种行为牟利是否合理。当然，思考的结果可能是合理的，也可能不合理。hacker并不在乎违法，实际上，很多hacker就是在违反法律的同时走向伟大。要找类似例子，可以wiki“五角大楼文件泄密案”，当然，主角不是黑客。
而geek就没有这么叛逆，以当代的典型geek形象——TBBT中那一帮书呆子而言，基本就看不到多少反叛气息。Sheldon的却进过监狱，可是理由可不是因为挑战现有制度，而是在法庭上找抽。很多geek有自己的政治主张，会讨厌某个政党，或者认同hacker文化中的思想。但是并不会像hacker们那样，无视法律，使用技术手段直接表达。
当代其他和黑客有关 另外有一些很特殊的例子，是黑客文化极端介入政治，导致产生的各种政治和宗教流派。例如飞天面条教，就我所知有不少geek程序员加入了恶搞行为，甚至参与了网页制作或线下活动。另外一个不得不提的和黑客文化有关的政治事务则是海盗党。海盗党的主张和hacker挑战权威，自由万岁的想法完全一致。不同的是，hacker（此处取褒义）以技术手段，破解他们认为非法的数据。而海盗党则以政治运动和政党体系为手段，推进政治改革。
介入经济的黑客则演变成了很有名的黑客经济链条。大致上说，这个链条呈金字塔结构。最上层的是极少数黑帽子，负责寻找系统的“硬”漏洞。其下则是为数不多的程序员，通过各种手段购买漏洞，非法的内部文件，实现各种破坏性工具。这些工具被各个地区的老板购买，分发到大量的普通技术员（甚至不需要技术）手中，利用技术来作恶。例如种下大量木马，利用获得的肉鸡进行DDOS，收费破坏敌对系统的运行。或者是诱骗用户点击木马，收集用户游戏账户或银行/支付宝账户。
链条的意义在于，链条上每向后推进一个环节，牵涉到的人和财富会以倍数增长。一个价值数十万的漏洞从黑帽子手中流出，到了程序员手里成为工具时，可能价值已经上百万。而这个工具最终被分发到技术员手中，用于诈骗的财富可能高达上千万。这个链条，使得上游精通技术但没有足够时间的专家，和下游渴望获得金钱但是没有技术的普通人相结合，使得少数专家可以指导大量普通人进行犯罪活动。因此才出现了灰帽子和白帽子两个行业，毕竟直接收购漏洞相比损失来说小的多。
当技术为政治所用，产生的则是GFW，JFCCNW等。关于这个不进一步阐述。
在中国，我如何成为一名geek 本文不会谈论如何成为一名hacker，毕竟后者在大众眼中的形象不佳，同时ESR也有一篇《如何成为一名黑客》说的甚好，我就不拾人牙慧了。不过限于中国特殊的情况，我还是说说你如何成为一名计算机技术geek。
geek不是能够培养的，而是自发产生的，geek是在苦逼的道路上蛋疼且快乐着。
要成为geek，一个首要的条件就是能够享受技术的乐趣，而不是被吓倒。在面对复杂的文档（对于国人而言，尤其是英文文档）时，仔细的阅读，并且找到系统工作的原理。无论是hacker还是geek，对于他们感兴趣的东西，仅仅知道如何使用是不够的。通常而言，大部分的geek都有自己动手拆解修改一些系统的经历。这个行为有一个术语——hack。例如，我们可能会希望http在转发请求的时候增加一些头部帮助识别信息，而原生的http服务器没有这个内容。怎么办呢？下载一份源码，然后找到相关部分，修改并重新编译一遍，这是最简单的hack行为。如果你不知道怎么修改，可以阅读文档。然而你完全没有“我可以修改http服务器”这个想法时，是注定无法培养成为geek的。也就是说，成为geek的必要条件是强烈的求知欲和与之相匹配的动手能力。
有了求知欲，我不相信你还可以若无其事的使用windows系统。你有没有希望了解系统开机时发生了什么事情？希望知道系统是如何工作的？如果有，你必定会想要下载一份linux的源码，并且进行编译安装。当然，对于初学者而言，我建议你先从ubuntu开始入手。
ubuntu的安装门槛相对比较低，但是对于初学者，还是会有很大的门槛。你可以求助于当地lug，目前中国比较大的lug有，bjlug，shlug，szlug，gzlug，hzlug。对应于北京，上海，深圳，广州，杭州。以上几个地方的同学，可以直接搜索lug，然后寻找同好求助。其他地方的只能更多的求助于线上资源。
有了ubuntu的使用经验，也许你的脑子里会跳出更多复杂的念头。例如有一台多余的旧电脑，是否可以配一块硬盘，作为nas来服务整个家里。是否可以在这个nas上加载其他系统，完成自己的需求，例如在上面开一个网页服务器。这个网页服务器是否可以监控家中的摄像头等设备，等等。
自由的思考，进而发现现状中的不足，然后快乐的折腾改进，这是geek的根本。当然，这会花费大量的时间，甚至金钱。你可能会没有时间交往男女朋友，或者要自费购买价值不算低的高阶路由器。这就是为什么我说，geek是在苦逼的道路上蛋疼且快乐着。
而进阶则可以安装arch或者gentoo。最后，你可以试试lfs。当然，所谓试试lfs，绝对不是复制粘贴，而是通过自己的了解，改变lfs适用的过程。例如你可以通过脚本和make来简化复制粘贴过程，简化测试过程。或者通过自己的了解在虚拟机上跑起lfs来。如果这些都没问题了，那么你可以看看《如何编写操作系统》和《操作系统：设计和实现》两本书。这些都没问题后，基本就可以通晓系统的方方面面，然后用mac或者用回windows。
是的，这不奇怪，geek中有不少windows用户，也有不少macos用户。一旦了解了系统的方方面面，没道理还保留一个实验用的系统在自己日常工作的机器上。
其次，你需要学习至少三种语言，一种是汇编，一种是C，一种是lisp。如果你需要经常使用，也许还要学习一种快速开发语言，例如ruby或者python。作为一个geek，没有掌握一种以上语言是不可能的。
为什么要学习语言，而且学习那么多种？因为语言是人类操纵机器的大门，不同的语言会改变你对机器的认识。汇编语言教给你的是机器的硬件工作原理，包括中断原理，输入输出控制。C语言教给你的是内核工作机制，如何结合硬件和软件进行工作。而lisp教给你的则是数学。
当然，作为入门，你可以先从bash开始，这种语言相当的简洁而且对人友好，可以很好的粘合系统中现有的程序开始工作。但是在进阶的时候会变得复杂，所以一般很少作为一门主力语言使用。</description>
    </item>
    
    <item>
      <title>有一种错误，叫做太常见了以至于视而不见</title>
      <link>//blog.shell909090.org/blog/archives/2098/</link>
      <pubDate>Mon, 20 Feb 2012 06:19:51 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2098/</guid>
      <description>最近整XEN，出了一个奇怪的错误。
ERROR (SrvDaemon:355) Exception starting xend((22, &#39;Invalid argument&#39;)) Traceback (most recent call last): File &amp;quot;/usr/lib/xen-4.0/lib/python/xen/xend/server/SrvDaemon.py&amp;quot;, line 335, in run xinfo = xc.xeninfo() Error: (22, &#39;Invalid argument&#39;) 根据网络上的内容，首先排除没有xen模块——有了，然后是/proc/xen目录是否mount——有了，然后是/sys/hypervisor/下面的一堆属性——有了，然后是版本——不对。xen-utils-4.1是4.1.2版本，而xen-tools是4.2版本。不过xen-utils并不依赖xen-tools，没有后者应当也可以运行这些玩意。hypervisor和xen-utils的版本是一致的。那问题是什么？
出错的文件是/usr/lib/xen-4.1/lib/python/xen/lowlevel/xc.so里面发生的异常，下载xen的源码检查，这个函数主要是检查属性。属性检查会出什么错？
正在一头雾水的时候，突然想起一个问题。我安装的是xen-hypervisor-4.1-amd64，因为kernel是linux-image-3.1.0-1-amd64。然而，我这个系统有一个非常大的特殊——在64位CPU上运行的32位系统。因此，实际上xen-utils是32位的。行了行了，下面的事情用膝盖都能想到。
叹气，这世界上，真的有种错误，叫做太常见了以至于视而不见。不要认为自己不会犯。</description>
    </item>
    
    <item>
      <title>最新一期的freenas测试报告</title>
      <link>//blog.shell909090.org/blog/archives/2096/</link>
      <pubDate>Fri, 17 Feb 2012 03:57:59 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2096/</guid>
      <description>去年我写过一篇freenas和解决方案，今年我又测试了一下，发现这玩意更加完善了，更企业化了，也更不适合玩玩了。今天写一下大概的步骤，供需要的参考一下。
freenas提供以下几种服务，afp，活动目录(AD)，CIFS(windows共享)，动态DNS(绑定域名到动态IP)，FTP，LDAP，NFS，Rsync，SNMP，Ssh，tftp，iSCSI。基本涵盖了非IT企业常见需要的所有服务（除了邮件服务）。目前镜像的大版本已经升级到8，所以我下到的是8.0.3，大概100M多点。
新版和旧版最大的区别在于，新版本去掉了bt下载，upnp，iTunes和http这四个家庭常用服务（实话说，http还是企业常用的）。加入了远程同步，snapshot，10G网卡等功能。内存要求也更加高，从7的256M-512M，变成了4-6G。对比起来更加企业化和专业化，但是更不适合随便玩玩。
首先，你需要准备合适的硬件。一台老式的机器，或者atom平台的mini-itx板子都是很不错的。即使是新的atom板子，便宜点的400也能弄到手，加上一条2G的内存，除掉硬盘大概也就1000。故障毕竟比较少，而且省电。存储需要一块硬盘和一个U盘，注意，两者不是或的关系。因为FreeNAS安装到某个物理设备后，会强制使用设备的全部空间，因此这个设备无法再用来存储数据。整个FreeNAS才500M，4GU盘绰绰有余，读取速度也不慢。除了升级和改配置外，没有什么太大写入，很节约。
然后，你需要去官网下载最新的iso镜像，用这个iso启动系统（注意，此时最好不要接上数据硬盘，只挂U盘）。当然，要省事的可以在windows下用vmware来装，不过对非IT专业人士来说，有点困难。启动后，在出现的选择中选择1，安装到硬盘上。在出现的安装目标选项中选择U盘（如果只挂U盘，这里就一个选项），然后等。最多两分钟，安装就完成了，选3重启系统。
去掉光盘（甚至可以去掉光驱），使用U盘和数据硬盘启动系统，并且将系统设定为从U盘启动（这点很重要，因为硬盘一般比较优先，但是硬盘上没有系统）。进去后什么都不干，会自动识别你的网卡，并且dhcp到一个ip。你可以在系统启动完成后使用选项1来重新配置ip，或者在dhcp上干脆给这个mac指定一个ip。对于使用路由器的小型公司来说，这点并不困难。
用浏览器访问这个ip，你可以看到freenas的控制界面。作为中国用户，先去setting里面改为中文，保存。然后关闭浏览器页面，重新打开（这点很重要），后面的设定都是中文了。然后，在存储，卷下面，新建一个卷。你现在可以把数据硬盘挂起来用了。
然后，再去服务里面把你需要的服务全部启动起来，并且配置合适的用户。这些就按照自己的高兴配了，界面都是中文的，应该不用我教吧。
如果无法启动服务，重启再试。你也可以参考这篇（http://www.c-dd.org/post/214/）。写的很详细，不过他安装的版本稍旧，是7。</description>
    </item>
    
    <item>
      <title>简易debian livecd打造手册</title>
      <link>//blog.shell909090.org/blog/archives/2094/</link>
      <pubDate>Thu, 16 Feb 2012 01:10:21 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2094/</guid>
      <description>废话不说，上干货。先装一下syslinux，genisoimage，kvm，debootstrap，squashfs-tools。
$ mkdir debcd $ cd debcd $ mkdir isoroot $ cp/usr/lib/syslinux/isolinux.bin isoroot/ $cat &amp;gt; isoroot/isolinux.cfg &amp;lt;&amp;lt; &amp;quot;EOF&amp;quot; prompt 0 default linux label linux kernel vmlinuz append initrd=initrd.img EOF $ cp /boot/vmlinuz-3.2.0-1-amd64 isoroot/vmlinuz 完成上述步骤后，你就准备好了一个基础的iso镜像文件系统，并有了一个基础的引导模块和内核。现在，我们尝试把这玩意烧到iso上，并且测试一下。
$genisoimage -o output.iso -b isolinux.bin -c boot.cat -no-emul-boot -boot-load-size 4 -boot-info-table isoroot/ $ sudo kvm -cdrom output.iso -m 512 如果没法装kvm，换成qemu。屏幕会停在内核引导过程中——因为你没有initrd.img，所以在isolinux.cfg中指定的initrd就不正确。下面我们会设法弄一个initrd.img。
$ cp -a /etc/initramfs-tools/ initramfs $ mkinitramfs -d initramfs -o isoroot/initrd.img $genisoimage -o output.iso -b isolinux.bin -c boot.</description>
    </item>
    
    <item>
      <title>Progress Linux</title>
      <link>//blog.shell909090.org/blog/archives/2092/</link>
      <pubDate>Mon, 13 Feb 2012 01:56:41 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2092/</guid>
      <description>别紧张，我不是要progressLinux，这是一种新的distribution（算是吧）。http://progress-linux.org，是一个基于Debian的dist。
为什么要有这个dist？其实严格意义上说，这不是一个完整的dist。不同于Ubuntu，这个dist可以完全的寄生在Debianstable(squeeze)上面。你不需要真的去官网上下载一个ISO，然后安装。只需要安装Debianstable，然后加入
Progress-Linux的source就好了。如果你胆敢在Ubuntu上这么干，只会把系统弄的一团糟。当然，直接下载Progress-Linux的安装ISO也是可以的，这个ISO基于Debian Live，作者(Daniel Baumann)本人也是DD，是Debian Live的主要作者之一。
为什么要这样？因为Debian是以严谨到变态而闻名的系统。例如，mdadm这个包有一个很小的不便。每个月当检查RAID的时候，会发一封mail。如果你有一堆电脑需要管理，这件事情就非常烦人了。要修正这个问题，只需要在其中一个脚本中加入参数-q。但是Debian修这个bug修了9个月。因为具体的包维护者并不是很关心这个事情（低优先级），而Release
Term需要确保这个bug必须先在Sid中修复，确认没事了（基本是没问题的，只加一个-q而已），再修复testing的，最后修复stable的。于是，你的邮箱要被一堆垃圾持续淹没9个月。
Progress-Linux就快多了。
但是为什么要做成dist呢？
Debian的模式设计，是方便fork，而严格控制release的。Debian的版本库更新要很多条件，例如符合DSFG（也就意味着符合一系列的开源授权协议），更新的时候首先作用于SID，Release
Term说了算等等。DD也没有权利要求更新Debian
stable中的包，他必须申请Release
Term批准。想想也能明白，如果真的每个DD都能直接更新包，那才天下大乱了。我们不能绕过Release
Term去解决问题，也不想让这些问题留着。
那么怎么办？只有自己做一个仓库。Debian鼓励这么做（有很多dist就是这么做的），但是这时就不能用Debian的名字，因此作者才做了一个新的dist。DSFG这时变成了一个优势，Debian的所有包，都满足DSFG的第8条，“不仅仅对Debian授权”，可以直接应用。
因此，其实Progress-Linux是一个基于Debian的改进。更快的bug
fix，更多的backport，更少考虑版权问题。当然，限于作者关心的包。另一个激动人心的特点是，
Progress-Linux的包和backport包不会碰撞，因此使得stable可以简单的安装很多新的包。如果你喜欢，可以在安装系统后加入他的source，作为系统的改进。但是不要指望有什么实质性变化，都是一些细节改进而已。如果你希望知道几个例子，可以看这个页面（http://www.progress-linux.org/project/about/）。
也许你希望使用一个中国区的mirror来做这个事情（这样更快，也省去中间的一些其他麻烦），http://mirrors.ustc.edu.cn是debian中国区域的主镜像(即http://ftp.cn.debian.org)，这个节点已经完成Progress-Linux的镜像。
Relax, I don&amp;rsquo;t mean to progress Linux, it&amp;rsquo;s a new distribution (kind of). http://progress-linux.org, a new dist based on Debian.
Why people made this dist? Technically, it is no a fully dist. Unlike Ubuntu, this dist can totally on the top of Debian stable(squeeze). You don&amp;rsquo;t need to download a ISO from website and install.</description>
    </item>
    
    <item>
      <title>外包和派遣的一些问题和顾虑</title>
      <link>//blog.shell909090.org/blog/archives/2090/</link>
      <pubDate>Fri, 10 Feb 2012 07:01:39 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2090/</guid>
      <description>很多公司老总很头痛的一个问题是外包。相比自己生产程序，外包有一定的优势，也有劣势。
优势
1.外包便宜，从实现角度，比自己养程序员便宜很多。毕竟自己养程序员还要交三金所得税，外包程序员需要自己管理自己的三金所得税——通常都不会交。所以比自己养的要便宜的多。
2.在安全性上，外包并不一定比自己养程序员差。毕竟自己养程序员也没法杜绝跳槽，也没法杜绝恶意的underhand代码。
劣势
1.不稳定，极度不稳定。能不能完成并不像自己养的程序员那样有一个项目经理在跟踪，搞不好就是到期了，基本什么都没有。虽然可以不付钱，但是被耽误的时间更麻烦。
2.逼良为娼。如果你的需求类似一个论坛，他们就会诱使你做一个论坛。论坛可以用开源的项目经过定制和修改来完成，看起来工程浩大牛逼XX，实际上没花多少时间，实现小开销大收入的目的。如果你真的没被说动，他们会先答应你的一切需求，等期限快到了再告诉你，论坛做起来很快的，改一点需求吧。如果再说不动，参考问题1。
3.良莠不齐。多年筛选下来，很多优秀的，可靠的外包团队真的很厉害。但是混事的团队混事能力也很厉害，很多问题说的头头是道，价钱也比正儿八经做的便宜不少。你觉得便宜的就是混子？错，有时混事的团队比正经外包公司还贵。万一一个没看准，那就又参考问题2了。
4.外包没法解决资金来源。很多老板对这个问题只会哈哈一笑，不过有的时候这确实是个问题。不是每个外包团队都能提供发票的，很多团队没有挂靠公司，或者挂靠公司但是发票加税点。这时候你开出来的外包费用就无法按照服务费计算，只能当作其他费用处理。要么你自己找发票填上，要么就扣税。
我看下来，愿意做外包的老板，大概不足一成，而且大多都是逼上梁山没办法了（要么人力来不及按时完成了，要么没人会做了），才外包一部分。
相比起来，人力资源派遣是个新行当。这行当和外包差不多，只是他们不分离做，他们找人去你公司做。
优势
1.你的项目经理可以盯着他们了。
2.派遣多数都是从公司来的，大半有发票。
3.你让干吗就干吗，不行滚蛋。
劣势
1.可没比自己养程序员便宜，搞不好还贵。
所以很多公司对人力派遣也不是很喜欢。不过我说句实话，要是需要一个特殊类型的人才，预计时间不长，或者想试用一下，不妨考虑考虑。
目前很多外包也参考了HR派遣的做法，他们的做法是这样的。谈项目。达成协议。派团队去你的公司，该干吗干吗。验收。撤回团队。
你的项目经理可以随时验证他们的工作，因此也不会出现逼良为娼的情况。
但是无论如何，请自己找一个项目经理！不要让你的程序员来做项目经理的事情，更不要指望什么都不管丢钱下去程序就会自动长出来！</description>
    </item>
    
    <item>
      <title>lfs under debian注记</title>
      <link>//blog.shell909090.org/blog/archives/2088/</link>
      <pubDate>Thu, 09 Feb 2012 07:04:06 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2088/</guid>
      <description>1.严格按照说明做，少看一点无关内容后面就一堆err了。
2.新分区大点，4G不够的，最小用8G。我用了20G的，硬盘不值钱。另外说一句，并不是4G不能够做到，而是你可能被迫删除不少有用东西，或者是移到其他位置，增加复杂度。
3.每次你进入一个section，以前针对这个包进行解压，打补丁，并修改的source都作废了。直接删除它们，然后重新解压。lfs不依赖于以前解开的源码，在任何一节的开始都不需要翻以前怎么处理（解压，打补丁，修改）源码的。你在任何一节都可以（并且必须）独立操作源码。
4.mawk会出错，装一个gawk。
5.yacc没有的时候，装bison，it&amp;rsquo;s works。
6.如果碰到见鬼的tar.xz，用tar Jxf。或者更简单的，现代tar都支持xf直接解压，不用再自己选择zjJ。
7.chapter5的流程？先用系统的编译器编译了binutils，gcc和glibc，然后再用刚刚编译好的再编译这三个，这样编译系统就统统连接到了/tools上。然后用/tools的连接编译了一堆编译用工具，bash啦，make啦。这样，就完成了编译环境的建立，/tools是一个独立于主系统的，完整而可用的编译系统。用这个编译系统编译任何东西的结果应当是相对可控的。
8.如果我是你，在chapter5完成的时候会tar czf ~/tools.tar.gz /tools。这样会让你在chapter6中犯错的时候不至于血本无归。
9.chapter6的流程？用chapter5的编译系统，编译了新系统的编译系统。当然，这个不容易，因为刚刚的编译系统所有指向都是/tools。所以lfs指导你做了不少patch。然后重复chapter5的过程，逐步把源码编译安装到正式系统中。
10.lfs真TMD的辛苦，连source code的typo都需要在书中指出和fix。。。而且lfs自己还有errata。
11.lfs的56两章看起来像是两个人写的，风格习惯不一致。chapter5用``，chapter6用$()。还有gcc-pass2的时候，cp -v XXX{,.tmp}; sed XXX.tmp &amp;hellip; &amp;gt; XXX。而chapter6的binutils则是sed -i.bak。当然，有可能是因为有些系统的sed不支持-i，例如redhat的系统始终不支持netstat -nlp46，I hate it。BTW，我喜欢sed -i。
12.编译过程真心傻X，大部分都是解开源码，configure &amp;ndash;prefix=&amp;hellip; &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make check &amp;amp;&amp;amp; make install。这些过程好像可以用一个不知道啥脚本来简化，建议不要手工干这堆事情，没意思的。相反，倒是很多调整有些意思。</description>
    </item>
    
    <item>
      <title>windows下那些好用的免费程序</title>
      <link>//blog.shell909090.org/blog/archives/2086/</link>
      <pubDate>Wed, 08 Feb 2012 01:44:01 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2086/</guid>
      <description>大部分开源，不开源的特别注明。
firefox或者chrom替换掉IE。
不解释了。本公司UED坚持认为在windows下使用IE是一类人格缺陷，有这种缺陷的人应当被自然淘汰。我当然不支持他人格缺陷的论点，我认为是智力缺陷。
Everything(不开放源码)
文件搜索工具，肯定要装，平时不消耗资源，需要的时候闪电一般的把你需要的东西找出来。这个东西会彻底的改变你文件管理的习惯。
klite codec
还在用腾讯/暴风影音？我推荐klite codec。这个玩意里面内置了Media Player Classic - Home Cinema作为播放器，并且把常用的解码器组件都装上了。基本好用。当然，所谓基本，和商用播放器的一堆花哨功能不同。klite的功能还是略差的，比较偏向基本功能的稳定。不过好在，有的地方klite更强一点——例如没有烦人的广告和插件，性能和稳定性都很不错，而且有些生僻格式也做了支持。实际上，我觉得出问题最多的还是这些生僻格式和wmv。
mplayer
比klite还强的播放器，和vlc并称最强播放器之二。就是太难玩了。
另外，我不推荐在windows下用vlc，不太稳定。
MediaCoder
转编码不错，除了rmvb格式外都很好转。压个片给手机的时候很方便。
putty(英文版!)
远程命令行工具，基本是做linux开发的不二选择。即使我没事用windows也习惯装个虚拟机，跑个linux，然后用putty连上去。当然，putty肯定是要用英文版的，具体自己google吧，不要baidu。
foobar2000(不开放源码)
音乐播放器，替换千千静听和酷狗的。确实是超级强的定制工具，居然支持从zip/7z中加载音乐。这样我下的音乐包都可以直接用了，不用解压。
launchy
启动工具。有更好的启动程序可以给我介绍一下，我现在用的是launchy。按热键，敲几个字母，就可以启动程序了。而且这个是linux/windows支持的，两者习惯完全一致。当然，如果你stick在某个系统上，可以找找更适合的软件。
honeyview(不开放源码)
漫画工具，主要是还在维护。能用的漫画工具也没几个了，comicviewer不维护了，acdsee根本是个庞然大物。
peazip
压缩工具，挺不错的。现在大多数都用winrar了吧？一个是这玩意需要破解，不然就乱弹窗。作为一个程序员，我实在不好意思破解。另一方面，这个东西对samba的支持不好，在win7下，他没法打开samba共享出来的文件，而且某些文件会乱码。peazip可以解压我要用的全部格式，包括rar。并且可以生成我要的大部分格式，包括linux格式，不包括rar。这个主要受限于copyright问题。
不过peazip对某些比较奇怪的字符支持不如winrar，有时会不认识一些日文压缩包。这个问题对honeyview等程序都存在，我认为是这些压缩包自己的问题。
Foxit(不开放源码)
pdf阅读工具，国产软件，比adobe的强。不过细节总是做的不是很好。例如书签不够强大，注记功能不足，不支持zip文件读取等。不过要不用foxit，就要用回adobe，你自己看着办。</description>
    </item>
    
    <item>
      <title>国产软件更换计划</title>
      <link>//blog.shell909090.org/blog/archives/2084/</link>
      <pubDate>Tue, 07 Feb 2012 01:52:47 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2084/</guid>
      <description>首先声明，我不是歧视国产软件，我自己做出来的也算国产软件，如果我真的在玩歧视，我是歧视我自己，OK？
不知道为什么，中国人做出来的软件，或者中文软件，和外文软件有完全不同的风格和特性。我很早就骂过，我们的软件充斥着免费的流氓和收费的冷屁股。现在更改一下，我承认有的软件很好用，所以中国的软件是好用的流氓大集合。
为什么？我怎么知道为什么？前两天千千静听的事情把我恶心坏了，而且还有中文putty后门事件。难道国内就没有好用的软件了么？自己想想，很杯具的发现，貌似可能性不大。首先，如果我们的程序好用而且免费，程序员就得从其他渠道赚钱。这年头程序员的第一需求是老婆需求，这是刚需。有老婆需求就有丈母娘需求，有丈母娘需求就有房子需求。OK，哪怕我们的程序员是个只对程序感兴趣的大宅男，只要他不是个Gay（说明一下，只要一不找我，二保持固定关系，我没有歧视的意思），最终还是会归结到钞票需求，而且还不是一般的钞票需求。
所以，大量的程序员都必须赚钱，赚大钱。相比起来，很多老外程序员的想法我们就觉得很奇怪。我有位朋友（在此先恭喜他喜得贵子，然后按照他的习惯隐去名字，请认识的人也不要写出本名给搜索引擎搜），他希望办一家中国公司做一项技术，因此曾经找上中国的干部。干部对这个技术很感兴趣，因此愿意给支持。我提醒他，有支持就有相应的条件，他以后将不能撤资，而且赚到的钱也不完全是自己的。他很奇怪的看我，开公司的目的是推广这项技术在中国的应用，只需要基本收入就好了。作为一个同样需要赚钱的中国程序员，我顿时觉得我们在两个世界。
而且，中国软件界普遍的情况是对恶和权不敏感，例如很多程序员都在用盗版VS。当然，我会听到很多理由，但是我觉得他们只能被称为借口。我认为盗版只在两种情况下合情理——用于教学实验目的和为了表达对版权制度的抗议。当然，后者虽然合情理，但是违法。如果说国内程序员用盗版的理由是一，那太侮辱智商了。而如果是二，我从没有看到他们举着反对版权的旗子去游行，也没有看到他们所写的所有软件都声明——本程序没有任何版权。
我也和不少程序员谈过所谓授权和回避方法，基本都是新手程序员觉得“很有道理”，老手就付之一笑了。因为老手知道，这些事情是没必要的。是否在软件包中声明使用了某个BSD的库？没有区别。商业软件使用了GPL的库？没人关心。你多此一举，只会引发项目经理的反感而已。OK，既然程序员对作恶和权不关心，那么绿坝版权问题的发生只是迟早而已。
难道中国软件界改良的希望需要寄托在培养基友程序员上？
这么大的问题我暂时无解，但是我需要做和我有关系的部分。我会逐步移除电脑中的国产windows程序，并且将其余国产程序加入观察名单。中文软件主要是指在国内制作和汉化的闭源windows软件，原生软件汉化不算，开源不算，linux软件不算。实际上，观察名单对我而言不会太长，基本就是QQ国际版，Foxit，和几大网银。
我建议读到这篇文章的人，也好好考虑一下，哪些软件真的是有风险的。这并不是让你马上回家删掉所有国产软件——实际上我至少得留着网银，他们没替代品——而是说，我建议你在脑子里面转一下，自己装了些什么东西，会造成哪些问题，是否愿意接受。这会花掉你几分钟的时间，但是也许会让你少碰到一些恶心问题。</description>
    </item>
    
    <item>
      <title>千千静听被百度收购了，WTF</title>
      <link>//blog.shell909090.org/blog/archives/2082/</link>
      <pubDate>Mon, 06 Feb 2012 03:00:24 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2082/</guid>
      <description>我挺喜欢千千静听的，这玩意被我调整到习惯和winamp差不多。自从winamp变成一个庞大的怪物以来，我一直用的这个。
不过在win7上，我一直删除不掉百度插件。每次我请他们出去，他们又会装上。后来我启用了严格的UAC，并蓄意把目标文件夹标记为没有人拥有权限，发现了问题——千千每次启动都查找并试图重装baidu插件。我开始以为是我下载的版本不对，被捆绑了其他组件。然后我去他们官网，下载了一个最新版本。安装的时候，我留意到发行者是baidu online&amp;hellip;。OK，问题看来不是我下载的版本被恶意捆绑，而是原始版本就写入了这个代码。
用过firefox或者比较正规的软件（包括微软那个IE）的人都可以留心到，在关于页面中，可以看到这个软件使用了哪些开源组件。这个大部分是因为这个库的版权限定要求使用者必须列出库的名称。不过这点在中文软件上就做的比较差，也许是根本不拿授权当回事吧。
但是，在软件内打入和软件功能无关的其他组件，那是另一回事情。个人认为，一个程序如果在安装包内捆绑插件，让用户选择安装，我还能接受。毕竟很多软件作者也要吃饭，做插件推广是一条路。如果捆绑强制安装，那就有流氓之嫌了。如果捆绑完了不算，还在每次启动的时候都检查插件是否还在，那就是确定无疑的流氓。
当然，千千的行为比这个更糟糕（我不选择说更流氓）。千千主页上没有任何地方说明千千归属了百度旗下，只有最下方有一条&amp;lt;千千静听联手百度娱乐推出“百度新歌汇”&amp;gt;的新闻,以及最下方有百度软件世界的连接。我也是从UAC的警告中发现，千千的软件包是用winrar打的（不知道是否是正版），而签名则是Baidu。至于选择，软件安装的时候的却有选择，不过即使选择了“不安装百度工具栏”，“不将hao123设为主页”也没用。还是会有一个叫做BaiduMusicCtrl的东西伴生安装进去，每次ttplayer启动时伴生启动的就是这个。说是和音乐有关的东西么，我在IE的插件和系统启动项中都找不到这个东西的影子，不知道是干吗的。千千删除的时候也不会跟随删除，不过可以找到独立的“百度音乐控件”项目，并且手工删除。更神奇的是，我在主页上找不到任何关于此事的说明还不算，连软件的发行授权都没有。没有发行授权，这软件我们用着算怎么回事呢？
我又安装了一遍千千，找到了软件使用协议“版权归属所有者所有”。这不是TM废话么。
OK，很多人在我说，中国人不大在意版权，这句话的时候，要我拿出证据。现在就是一个明证。从整个过程中，我感觉到的并不单是恶意捆绑这么个事情，而是对版权和授权的一个漠视：
1.没问你要不要，总之给你捆绑安装百度音乐控件，每次千千启动时自动启动更新。
2.被百度买了，页面上什么关联都没写。
3.关于授权，这个软件什么都没写。（另外，写授权的时候不要写“保留一切权利”，这是句屁话。你最起码得度让使用权，否则发行软件给别人就是故意诱使别人犯罪。千千的“保留知识产权”还是正确的。）因此，不要问我如果你把千千放到你的主页上会如何——这算再发行，合法不合法就看作者定义了——虽然我觉得他自己都不一定觉的出区别。
现在改用了foobar2000，很满意。这个东西可以接受samba共享系统，并且支持从zip/7z中读取文件。我很多下载的zip音乐包就可以直接使用了。虽然界面简陋很多，不过用起来更顺手。千千还是留给度娘控吧。</description>
    </item>
    
    <item>
      <title>教育的思考</title>
      <link>//blog.shell909090.org/blog/archives/2080/</link>
      <pubDate>Thu, 02 Feb 2012 03:57:42 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2080/</guid>
      <description>首先说明一点，这是贝壳自己对自己受到教育的反思。由于本人不从事教育行业，所以结论可能和现有的理论相悖离，也不保证正确。
教育最重要的时刻，不是在高中，而是在幼儿园。幼儿园的老师不应当教知识，而是应当教常识。常识是非常重要的，我们有意无意，善意或恶意，都会给小孩子灌输扭曲的常识，例如孩子问你他是哪里来的，你说是从垃圾桶中捡来的。等孩子成长了，他的第一件事就是推翻不正确的常识。还记得那个笑话么？——我知道你的父母和老师都对你这么说，但是，圣诞老人是不存在的。是的，超人也不存在。哦，不不，驯鹿和美国总统是存在的。
孩子听到越多不正确的常识，就需要浪费越久的时间逃脱常识的束缚。大部分孩子甚至终身会带着一些偏见——例如以前的“地球是宇宙的核心”，到不久前的“空间是连续的”。从有意的“抢到的东西就是自己的”，到无意的“大人说谎也不受惩罚”。越多错误的束缚，孩子需要浪费越多的时间逃离束缚，将来的成就就越小，这就是为什么我觉得幼儿园是一个孩子成长的关键的原因。
至于第二语言，真的没有必要在幼儿园就开始学起，我甚至觉得语言不应当被独立教授。还记得你的打字是怎么练成的么？我打赌我的读者中，有一半以上不是在正规的课堂中，按照老师的指示一点一点去练习每个键位，最后成为打字高手的。我自己是在QQ起步的时候，在网络上和别人聊天。从开始的一对一还是被人家嫌慢，到最后可以很轻松的一对二甚至一对多，大概只花了我半年多的时间。同样，要在课堂上学习语言，比不上在语言的环境中学习，这个大多数人都知道。但是什么是语言的环境？这不是说找个外教，或者用英语授课就解决的。孩子使用语言的关键，在于和同龄人组织学校社会的时候。如果他们圈子里面用英文，你的孩子只有三种可能，1.不和同龄人交往，变成书呆子，2.根本不去上课，退学了，3.英文熟的你根本听不懂。问题是，在中国如何控制学校中的学生交际圈呢？所以从这个意义上说，在中国要稳定的学好英文，而且和老外差不多，是不现实的。只能靠你孩子的天赋和运气。
很多人把孩子送到了国外，实话说，这是一个不负责任的选项。孩子可以没有很强的英语能力，但是在成长中，脱离家庭的关心是致命的。除非你送到国外后，在当地有其他人可以替代你关心孩子，否则将来成长的结果只能靠运气。有很多人，在出国后交往男女朋友（这个很正常），颓废，不用功学习，失去生活目标（这个不应当在初中和高中出现），乃至吸毒（这个也不算太少）。当然，以国内不少家长的情况而言，陪着孩子成长只会导致更严重的问题。
中国的小学和初中教育，是一个学习的过程，这个没问题。但是学的内容太深入，又不够广泛。现在家长都在喊教育内容不要超纲，喊教学速度过快，喊小学上大学内容。但是，什么是纲，为什么要有纲。诚然，学习的问题上，有些时候不到一定年龄，学生是理解不了某些问题的。但是在学习知识上，实际是没有边界的。我们拆掉考试的问题来反观教育，如果真的是为了更好的工作，那么凡是需要的知识都必须要学，可以多不能少，何来超纲？超纲是一个基于考试产生的现象，本质是考试的难度无法增加，就通过增加范围来提高分辨率，强行区分学生。
以初中数学为例，我们初中数学的很大一部分都在教授二次方程特性和解法。实际上呢？二次方程用到的机会非常少。大家也都是从考试中走出来的社会人，你们凭良心告诉我，毕业后有多少机会用到了二次方程？个人觉得这部分教到过概念和解法就可以了，不必对特性深入到奇怪的地步，特意构造一些特例问题来考察学生的解题能力。其实只要在需要的时候，找一下wiki，然后根据问题能解出来就行了。我的高等数学学了很久，现在也差不多都还给了老师。但是需要的时候，我可以通过很短时间的查找资料，把问题现场解出来。反倒是从小学到高中，对一些现代数学的基础学习不足，尤其是线性代数和统计学。高中没有教授现代统计学，因为这依赖于高等数学。线性代数只教了方程组解法和行列式，没有教授矩阵运算。实际上这是现代数学概念的基础，应当在足够的时间内深入学习。
至于语文和思政，更是沦为执政党的免费广告课程。这部分课程大部分人在高中开始就吐掉了，吃都吃不下去。
高中开始，学校教授的不应当是知识了，而是研究方法。当然，研究方法其实应当从小就开始学习了，包括论文格式，研究过程和方法，预算控制等等。尤其是一些现代科学中基本的精神，都应当在实际的课题报告中做足够的检讨。国人经常在一些莫名其妙的地方出奇奇怪怪的毛病，部分可能就源自没有系统的接受过研究方法论的影响。例如，在研究效果的时候，应当应用双盲法。如果这是一道填空题，我估计大部分国人都能做对。但是实际操作的时候，有很大可能陷入双盲误区中。尤其是单向相关性断定，当有A，就发生B时，就开始断定是A导致了B。又例如中医问题，对于接受过研究方法论的人而言，双盲法检验需要不需要根本不应当是一个问题。要么就拜托你，不要自称中医是科学，这也行。不是每个结论，在科学上都有解释。不管你信不信，反正有人信。这没什么，有人信上帝，有人信科学。但是不要对外声称，我们的上帝经过科学检验。。。
至于有些民科，或者一些不知道什么的人，写出来的东西就更神奇了。为什么地球在远处向太阳坠落就会形成旋转，为什么太阳是黑洞在发光。他们写的每个字我都认得，但是连贯起来就完全看不懂说了些什么。老外的神奇论文，是从常识性的结论和公式出发，通过推导，得出一个反常识的结果。然后再验证这个结果，而且居然是对的。例如泊松斑，水星近日点漂移，宇宙膨胀。对于这些东西，我虽然看不懂，但是每个上下文的联系都能看到，只是不明白基础知识，也不知道为什么要如此推导。民科的论文则相反，是从常识性的结论和没有公式出发，跳跃性的得出反常识的结果，然后没有人能够验证。我不但看不懂上下联系，而且连他想说什么都看不明白。当然，最神奇的是这样的东西也有人买。。。
至于大学，会在大学学习知识的人是傻子。大学是一个教授研究方法论和寻找人生意义的地方，如果一个学生大学毕业，能够找到自己的人生目标，认识一群好兄弟，就已经很满足了。至于学到的知识，真的和大学无关。如果要说有什么关系的话，最多是借助大学的环境，可以更广泛的接触自己想要接触的东西。当然，后者即使对于毕业的人也不是无法做到，所以去大学绝对不是学知识的。
说到这里，国人有个奇怪的现象。大部分人好像都相信知识改变命运，更多的知识就能带来更成功的人生。但是实际操作的时候却都是脑体倒挂，进行脑力劳动的不如进行体力劳动的。程序员赚钱靠什么？加班。书本靠什么赚钱？印刷。</description>
    </item>
    
    <item>
      <title>如何写基于google code的watch file</title>
      <link>//blog.shell909090.org/blog/archives/2078/</link>
      <pubDate>Wed, 01 Feb 2012 04:06:39 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2078/</guid>
      <description>google code很好用，可是他的下载页面很恶心，很难跟，而且还改过一次。debian打包党要做watch file的时候，估计会很郁闷。
去http://googlecode.debian.net/，然后提交你的包名，你会得到一个url（其实自己猜也可以猜到）。每次访问这个url的时候，他会代你解析google code，告诉你有没有更新。</description>
    </item>
    
    <item>
      <title>PXE模式使用openwrt网络安装debian</title>
      <link>//blog.shell909090.org/blog/archives/2076/</link>
      <pubDate>Tue, 31 Jan 2012 03:14:14 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2076/</guid>
      <description>废话不说，上干货。
首先，禁用arptables。当然，如果你没开这个防火墙，那么没必要。其次，注意你的openwrt必须有udisk，否则空间相差太多，根本没有实现的可能。
然后，如果你用的是新版的rom，应该在/etc/init.d/dnsmasq里面看到，dnsmasq()这个函数里面有。
append_parm &amp;quot;$cfg&amp;quot; &amp;quot;tftp_root&amp;quot; &amp;quot;--tftp-root&amp;quot; append_parm &amp;quot;$cfg&amp;quot; &amp;quot;dhcp_boot&amp;quot; &amp;quot;--dhcp-boot&amp;quot; 如果没有，加一下，有的话说明原生支持。下面可以直接修改。
dnsmasq是一个dhcp/dns双重服务器，而pxe引导的第一步就是支持bootp协议。这个选项在/etc/config/dhcp里面。config
dnsmasq一节上，增加。
option &#39;dhcp_boot&#39; &#39;pxelinux.0&#39; 重启dnsmasq，完成bootp准备。
然后，安装tftpd-hpa，opkg update，opkg install
tftpd-hpa。这是一个tftp服务器，默认不启动。如果你打算让pxe引导模式持久化，那么就改为默认启动，同时永久关闭arp防火墙。在/var/tftpd-hpa里面，可以看到tftpd的根路径。从参考3的的连接里面，你可以找到合适的一个下载路径，下载netboot.tar.gz到这个文件。解压后，可以看到pxelinux.0，这个和上面的pxelinux.0相对应。这是pxelinux的组件，隶属于syslinux项目，可以用来完成启动。
这样，就完成了安装的所有准备工作。你可以找一个设备实验一下，应当可以完成网络安装的步骤。
另外，如果需要启动选择amd64或者是i386，或者更进一步定制。那么需要下载其他镜像，自己生成pxelinux.cfg这个目录中的内容。
PXEhttp://wiki.debian.org/PXE
NetbootPXEhttp://wiki.debian.org/DebianInstaller/NetbootPXE
netinsthttp://www.debian.org/distrib/netinst
配置pxe，安装debian和ubuntuhttp://my.unix-center.net/~whtbie/wordpress/?p=290</description>
    </item>
    
    <item>
      <title>tcp连接的建立和释放</title>
      <link>//blog.shell909090.org/blog/archives/2074/</link>
      <pubDate>Sun, 29 Jan 2012 02:03:43 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2074/</guid>
      <description>大家新年好，新年第一博，我们来写一点干货。
建立tcp为什么是三次握手？
从两军问题说起太远了，三次握手的假定是一条双工线路的每个方向，要么持续通，要么持续不通。就好比一个电话，你和对方可以同时说话，所以是双工线路。你说了对方能听到，这叫单方向。单方向上，要么通，要么不通。
如果从一个不保证稳定的电话线上（例如移动电话，这是典型例子），你怎么确定你们通话是正常的？
假如你首先说“喂”，这时候你什么都不知道，对方能听到，他就知道你到他这里的电话是好的。他会说“喂，我听到了”。你听到了，会知道他到你这里的电话是好的。
事情结束了么？没有呢，他还不知道你能听到他讲的东西，所以你还要回“我听到了”，然后开始说正事。
回想一下自己打电话的经历，是不是往往漏掉了最后一个“我听到了”呢？这样会使得对方无法确认你能听到他说的东西。不过一般来说，当你开始滔滔不绝的时候，他会假定你听到了那句“喂，我听到了”。因为通常没有人会没听到对方的回应就开始说话说个不停。这个模式在tcp中也是可以做到的，在最后一个ack上附加数据。
为什么由发起方开始？因为我们必须要假定有一个方向开始，任意开始就需要处理碰撞问题（就是同时开始）。接通socket总是由发起方开始传输第一个包，你不觉得直接在这个包上面开始测试连通会比较合理一些么？
电话为什么由被叫方开始说话？因为主叫方打电话后，被叫方决定了电话什么时候接通。电话接通的时候，被叫直接就可以说话了（假如电话稳定的话），而主叫要等到下一个“嘟”不出现才能有所反应。所以通常都是被叫先开口。当然，也有被叫方接起电话来等着主叫说话的情况。
另外提一句，如果你使用手机拨打的话，当听到对方“喂，这里是XX，您好”之类的信息的时候，应当先说“喂，我是XX，您好”。等对方确认能听到了，再开口说正事。因为手机有不算太小的几率，双方都听不到，或者单方向听不到。如果不巧是后者，很容易引起不必要的误会和麻烦。例如你滔滔不绝的说，对方作为反应，说了几句。然后你什么都听不到，继续说。对方当然会生气，对不对？
OK，现在我们来说说挂电话。
tcp的fin机制，其实是要解决这么一个问题。当你说“再见”后，能够马上把电话放下么？
不行的，因为对方可能还有一些重要的事情还没说。你一说再见就挂断，这个会造成问题。从简单的思考上，我们会得出一个结论。当你说了“再见”后，对方可能还需要说一些事情。当对方也说了“再见”后，你就可以挂电话了。
可是且慢，对电话而言这个模型成立，我们得稍作修改才符合网络——当你挂下电话机后，对方不会出现忙音。于是，当你说再见，对方说再见，你必须再说一次再见，对方才能确定你听见了再见。而且这次，事情非常符合两军问题——你们永远也无法就什么时候挂机达成一致。这个问题再折衷回来，也是一个三次模型，对方说再见，你说完你要说的话，然后说再见，对方再见，挂机。
被动关闭上，这个模型基本是正确的。当你收到“再见”后，把你要说的事情说完，然后再见。这时候不能挂电话，因为你不确认对方听到你的“再见”了。如果你的“再见“对方没收到，那么对方会死等到天荒地老。至于为什么对方可以肯定你收到了他的再见，是因为刚刚你说的那堆废话里，应该已经包含了“我知道你要挂电话了，我会尽快说完”的意思。所以，你需要等对方的“再见”回来。
当然，在tcp的实现上说，所有对对方的回应，都在ack里面。所以是FIN FIN-ACK ACK，关闭。最后一个ACK前，叫做LAST ACK状态。如果ACK丢失，会造成被动方挂断有问题，因此这里需要一个超时机制。用电话术语来说，就是最后一个再见没听见，你就要等到天荒地老，因此当对方首次再见完成的时候，你说再见，如果一定的时间等对方的最后一个再见等不到，就别等了，直接挂机。这个时间比等不到对方任何消息而挂机，要来的短。tcp标准设定为两倍最大生存周期，即2MSL。当然，如果等到了最后一个ACK，就直接删除连接数据结构。
主动关闭的时候，情况会更加复杂一点。为什么？因为刚刚的超时机制。我们从你说再见之前开始说起，这次你是主动告别一方。
你首先说了一个再见，然后进入FIN_WAIT1状态，换成电话术语，就是等对方说再见。tcp机制上，对方的ACK先到，就是FIN_WAIT2。对方的FIN先到，就是CLOSING——这种情况不多见，只在双方同时想挂断的时候发生。如果对方的FIN-ACK一起发送，那就直接保送上TIMED_WAIT。无论是哪种先，最后会收到一个ACK和一个FIN，并且发送一个ACK。换成电话术语，就是你说了再见，对方一定会说知道了和再见，并且你会说知道了。差别在于tcp需要用多个状态来表示哪个事情先，哪个事情后，打电话就不要这么麻烦了。
最复杂的事情，在于说了最后一个再见之后。当你说完最后一个再见，就可以直接挂电话么？电话可以，但是作为tcp，却不可以。因为某些情况下，对方的FIN包没有到就会进入TIMED_WAIT状态。另外一些情况下，对方的LAST_ACK等不到你的ACK，会把他的FIN重发一遍。如果直接销毁连接结构，那么最后一个FIN包可能对新的连接造成干扰，而且会阻碍对方关闭连接。所以，作为主动挂断一方，你有一点很不利的是，无论如何，你必须等这个2MSL的时间。这个值在linux中一般是60s，更进一步可以查看rfc1337。
刚刚解说的最后一个情况，就是很多机器TIME_WAIT很高的原因——因为你的服务器主动关闭了连接。作为本质解决方案，你需要理解为什么会发生这件事情，服务器端关闭连接是否正常。如果正常，那么加一些内存，并且启用tcp_tw_recycle来减缓这个问题。注意，这个参数不应当在NAT后的机器上被启用。具体可以查看rfc1323。</description>
    </item>
    
    <item>
      <title>龙年新年</title>
      <link>//blog.shell909090.org/blog/archives/2072/</link>
      <pubDate>Sun, 22 Jan 2012 20:24:55 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2072/</guid>
      <description>大家新年快乐哈。</description>
    </item>
    
    <item>
      <title>python的字符串相加效率</title>
      <link>//blog.shell909090.org/blog/archives/2070/</link>
      <pubDate>Wed, 18 Jan 2012 01:51:37 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2070/</guid>
      <description>今天文章被人纠了错，就跑去人家主页上逛。结果看到有篇文章说字符串相加速度的，看看结论很奇怪。就做了一下实验。原文可以看这里。我们只讨论python部分的行为。首先是论证我观点的测试，无关部分就跳过了，大家应当可以自行补上。
def f(): s = &#39;&#39; for i in range(3): s += &#39;123&#39; print id(s) return s f() f() 输出：
138190216 138276992 138276992 138190216 138276992 138276992 至少在几十的规模，这个结论还是成立的。说明对象确实被缓存了，这导致了字符串相加的多次测试中，后续次数都没有实际的执行字符串分配动作。召dis来问之。
14 0 LOAD_CONST 1 (u&#39;&#39;) 3 STORE_FAST 0 (s) 15 6 SETUP_LOOP 46 (to 55) 9 LOAD_GLOBAL 0 (range) 12 LOAD_CONST 2 (3) 15 CALL_FUNCTION 1 18 GET_ITER &amp;gt;&amp;gt; 19 FOR_ITER 32 (to 54) 22 STORE_FAST 1 (i) 16 25 LOAD_FAST 0 (s) 28 LOAD_CONST 3 (u&#39;123&#39;) 31 INPLACE_ADD 32 STORE_FAST 0 (s) 17 35 LOAD_GLOBAL 1 (print) 38 LOAD_GLOBAL 2 (id) 41 LOAD_FAST 0 (s) 44 CALL_FUNCTION 1 47 CALL_FUNCTION 1 50 POP_TOP 51 JUMP_ABSOLUTE 19 &amp;gt;&amp;gt; 54 POP_BLOCK 18 &amp;gt;&amp;gt; 55 LOAD_FAST 0 (s) 58 RETURN_VALUE 我们看到s是local变量，这个符合我们的预期。但是后续确实发生了add，而string的+算法，我们可以参考Objects/stringobject.</description>
    </item>
    
    <item>
      <title>计算机自动化的方向</title>
      <link>//blog.shell909090.org/blog/archives/2068/</link>
      <pubDate>Tue, 17 Jan 2012 06:56:19 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2068/</guid>
      <description>我认为，人类操纵各种设备的权利不言自明，这是软件/电气设备进化的必然结果。
OK，我在吐槽什么？
昨天，老婆用了一次家里的新自动洗衣机。很好用——晚上把衣服全丢进去，然后设定模式，倒进去洗衣粉，今早六点他会自动启动。早上就拿着半干的衣服去阳台晾晒，整个过程没有一点麻烦。外婆家里的那台老洗衣机，每次使用都需要搬进搬出，连接一堆管线，然后发出巨大的响声，再由人工把半湿的衣服拿去晾。
——如果要那样的话我们还得看着洗衣机，或者任由刚刚洗好的湿衣服在洗衣机里面闷六个小时。
我觉得，这才是享受人生的方式。当然，老婆和我也是一样的观点——我们在父母家里可是受够了老式洗衣机的刁难。她在发现这玩意的好处后，脑筋动的可比我快多了。早上还没有睡醒，我就被她吵起来，然后问了一个问题。
怎么远程遥控家里的微波炉和空调？
OK，很得意的说，这是家居设计时我早就发现的一个问题，然后很遗憾，我告诉她——暂时不行。这个是我调查了很久后得出的结论。我不大不小好歹是个程序员，怎么说在控制电器上也是有点经验的，不过这个问题确实超出了我的能力范围。目前我所知道的，控制电器的方式基本有三种。
1.电器本身支持某种协议，例如wifi，或者蓝牙。我的电视机就支持eth网络，我可以通过手机遥控电视，或者直接在电视上观看某些节目，而不用打开电脑。
2.通过电源接口做。例如我看到房屋装修中卖的最多的，号称智能屋的系统。大部分都只能支持电灯的开关，或者电灯开关支持的最好。因为电灯的开关是一个只和电源有关的问题，我们只需要做一个很小的单片机系统，装置在开关面板上。当这个机器收到无线信号的时候，就打开或者关闭电灯开关。
3.通过红外线仿真做。这个适用于IrDA兼容的无线红外遥控设备。通过购买一个红外线装置，接收遥控发出的红外信号，再对着设备重发。
而以上三种方案，都是有缺陷，而且是严重缺陷的。
方案一，需要设备支持。通常来说，这样的设备都是相当昂贵的，而且不是每类别的设备都能买满意了。如果有一个很小的厂子生产一种空调，支持wifi。但是这个厂的空调机以不稳定而出名，你是否愿意为了遥控而冒常常要去修空调的麻烦呢？
方案二，不是每个设备都能灵活控制。空调和微波炉接入电源后处于待机阶段，而不是启动——这是最有遥控价值的两台机器。即使能启动好了，我再如何通过电源告诉他，把里面的东西给我加热10分钟？而且单片机接收信号必须有相当复杂的加密，至少能对抗差分攻击。否则就会陷入汽车解锁遥控器同样的问题——被破解。
方案三，更加糟糕。红外是一种指向性相当强的方案，所以当年的红外数据传输方案很快就被蓝牙替代了。也就是说，我要遥控三台空调，需要买三个红外设备，做固定指向。或者买两个电机来摇动红外设备。即使给我做出来了，不支持遥控的微波炉，自然也无法使用这个方案。
然而你很容易的想到，如果一个完全不明白技术关键的外行，在接触程控的第一天，就把我摇起来问这个问题。那么这个问题，肯定是我们将来的目标。
未来的设备，不但需要一套硬件界面（这个是必须的），而且还需要一套协议界面。为什么？你可以在家里的电脑里，通过符合协议的软件，一次性控制家里的所有设备，这就是所谓的“完全中控”。如果你觉得我是瞎说，鬼才会想要这种东西。请自己问问手里有一台ipad的同学，他们是否想在ipad上装个软件，直接遥控家里所有的电器？
他们想死了。
晚上的时候，把面包放进烤炉，执行一个good morning app。早上到时间了，闹钟会自动叫你起床，同时餐厅空调开始工作。当你确定起床后，面包就会自动开始烤，刷牙完毕正好出炉。出门的时候，所有设备都会自动关闭——整个房间里面没有任何一台中控设备了。晚上回家前，你的移动中控设备会通过3G自动唤醒灯光和空调。出门购物的时候，家里的冰箱会把缺什么东西传到你的手机上。
这才是人生阿。
睡觉前总是习惯要听点音乐，睡着后需要自动关闭么？装个app吧，亲。那个app不能连带关闭空调么？换这个app吧，亲。想要起床前空调就开始工作么？我们的app带定制功能，而且有默认配置模板提供修改哦，亲。Bill Gates在《未来之路》里面所幻想的美好未来，其实和我们只有一步之遥。
这一步问题在哪里？协议。
其实我们是可以做到的，这样美好的生活。问题是，我们缺少一个协议。
有专业公司，提供装修服务。他们可以对你的家里进行改造，部分安装他们的外接设备，部分改为专用电器，并且在iphone上安装专用软件，实际上可以部分做到我刚刚说的。
问题是，贵，而且不开放。
开放的好处在于，如果这个系统不支持晚上睡觉前关闭空调，我可以自己写一个替换掉。而且如果某个电器坏了，我不需要高价问他们买一个新的专用电器，而是直接可以在商场里面买一个。而专用电器支持的问题则是，我必须持续使用他们的设备和服务，他们也不能关门。
所以我才说，我们需要一个协议。</description>
    </item>
    
    <item>
      <title>加密学中一个规定的来历</title>
      <link>//blog.shell909090.org/blog/archives/2066/</link>
      <pubDate>Mon, 16 Jan 2012 03:24:54 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2066/</guid>
      <description>为什么密码学中总有个假定，算法是对方已知的，密钥是可以更改的？
因为在很久以前，密码算法是靠人工运算的，更改算法每次都需要培训一堆人，很麻烦。所以变态的需求催生了变态的解法——算法彻底公开，靠密钥保密。
还记得很多谍战片中的“密码本”么？如果在现代，那就只一个记载着256个字符的纸条。因为整个过程其实地球人都知道，双方只是相差一个纸条上的256个字符而已。
觉得这点东西不靠谱，随便记忆一下就搞定了？你想想，以前的密码本也可以照相阿。是重建一个密码本，并且分发给各处安全，还是重建一个纸条并分发方便？
现代？其实还是很有意义的。因为很多遗留系统/硬件模块中的算法会长达10多年不变，如果依靠算法保密来保护安全性，哪天泄露了不是开玩笑的。上千万的硬件模块，没有人维护的遗留系统，都要整死人的。
而且算法本身也必须足够强，如果没有公开算法，“足够强”这个事情本身就是含糊不清的。没有人见过你这个算法，没有人讨论，谁知道是不是“够”安全呢？md5以前一直作为哈希的标准，我们都觉得够安全了，但是哈希碰撞的研究使得现在基本都推荐sha256了。同样，DES也不要再用了，换成AES吧。</description>
    </item>
    
    <item>
      <title>昨天那个事情的后续——也谈网络安全</title>
      <link>//blog.shell909090.org/blog/archives/2064/</link>
      <pubDate>Fri, 13 Jan 2012 04:06:09 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2064/</guid>
      <description>安全无小事阿，昨天批评到一半，发现遇到李鬼了。尴尬，赶紧修正文章，不知道影响多大。
我们事后推理，问题可能是这样的。有人故意在赶集网上用别人电话发布信息，然后等你的电话被打爆。赶集网本身只允许举报手机滥用，而不支持座机举报。所以你会找客服电话，但是他们客服电话又找不到。他们做一下SEO搜索，或者直接买关键词。你通过搜索，找到的就是他们。你要取消，他们就要你汇保证金。保证金进去了，然后你就被骗了。
当然，文章本身的批评也算是成立，常规发布电话信息应当是先确认再使用的，投诉的系统也应该支持座机等方式。由李鬼客服的存在，你可以想见到底有多少人试图投诉电话被错误使用，在系统中又无法删除。
但是我要说的是，这个诈骗差点成功的关键原因在于——赶集网没有公布自己的客服电话。由于没有官方公布，因此使用搜索引擎搜到的根本是李鬼。当然，如果打官司，赶集网肯定是无责任的。但是，被骚扰过的公司都知道，真的到了这个地步，你会很烦，非常烦。我相信对百度恨之入骨的不少公司应该都知道我的意思——明明不是我的事情，脏水泼头上，客户在骂娘。
我更进一步看了一下赶集网这个网站，安全么？也不安全。别的不说，登录系统还是使用http，而非https。两者差异非常大。使用http的，只要通过一个恶意的网关，就可以捕获到用户密码。作为玩玩而已的网站，我觉得使用http也就算了。作为一个商业公司，登录系统不使用https，实在是有点不专业。至于投诉电话也是一个例子。如果你打算联系新浪，打开网页，拉到最下方，直接就有400电话，根本不用担心这个问题。
各个网络教材反复告诉我们，安全不是一个技术问题。实际上，安全是一个从最高层到最下面的意识问题。作为安全的头一步，首先你要告诉你的用户——你应当信任什么。
如果你的公司是一家实体公司，以电话业务为主。那么你的宣传要点可能就是电话，而网站的具体网址可能就是通过短信方式进行分发（至少要有这个功能）。这方面的例子有携程。而如果是一家网络公司，以网络业务为主。那么你的宣传要点就是你的网址。为了安全，我建议稍微做大一点的时候，就干脆点，把常见的拼写错误全买下来，省的李鬼入侵。你的地址，联系电话，都通过网络分发，而且要让别人找的到。
上面一段简单点来说，就是，一个主要的宣传方式，上面发布所有的可信联系方式。为什么？如果你不发布，就可能有李鬼进来。到时候再处理，就非常困难。
盗梦空间里面说过，要确认你在真实的世界，而不是梦境中，并不容易。现实中，要确认和你说话的人的真实身份，也不容易。通常来说，如果你问我借钱，我要给你钱，你都能在对话里面发现我会问你一些有点奇怪的问题。frank应该心领神会，他问我借卡的时候，我可是在敲定事情后直接抄起手机给他打了个电话。通常来说，IM可以被偷，但是电话没有道理一起被偷。即使被偷了，还能伪装声音，那我也认栽了。我现在还欠着钱没还的小一，某位报社编辑，还有我帮忙充过卡的老燕子。如果你们看到这篇文章，应该也能回想起我给你们相关信息时问过一些奇怪的问题吧。
这些问题，叫做背景知识验证，我在前面的一篇文章中提到过。背景知识验证的基础是你们拥有相同的知识。而对于一个网站，你没办法使用这个办法的。所以，为了防止李鬼，你要反过来，使用无知假定。所谓无知假定，就是，在你面前的人充分证明自己之前，没人知道他是谁。也就是俗称的《互联网上没人知道你是一条狗》。所以作为客户来说，不要轻易相信搜到的联系方式，最好用114。当然，114上如果没有，那也没有什么太好的办法。
另外昨天和42区的同学谈了谈，他说会警告赶集的朋友。毕竟李鬼的存在对正品网站是一种伤害。但是从现在来看，只能采取防御策略。具体什么策略，就看赶集网的计划了。不过比较有意思的是，昨天我们谈到李鬼的时候，说到“互联网人士也无法分辨”，他给了我一个例子。在淘宝被诈骗5.46万始末。我看完吓了一跳。千鸟是小米的信息架构，算是IT圈子里面的人，不能算外行。在购物的时候，也是小心又谨慎。即使如此，还是被骗了！这只能说一点，即使是内行，也不要仗着自己专业就放松警惕。
我仔细看了一下流程，主要能找到的问题有以下几个。不过需要提前说明的是，这些都是马后炮。很多事情我们知道不应该，但是真的都有避免么？如同我某篇文章说的那样，就是彻底的神经质了。
1.在不可信环境中消费。这是一切问题的根源。本质上说，应当把环境分为“可信”和“不可信”，并且在几个信任等级间架防火墙。可信机器可以通过虚拟机产生一个不可信环境（沙盒），但是反之不可以。同密级机器可以弱密码或无密码互联。高密级机器可以无密钥连接低密级，反之不行。
2.没有在发生问题的第一瞬间进行止损。对于大额支付（对我而言，1000以上统统叫大额），网银一旦提示成功，而支付宝里面没看到钱。第一瞬间反应绝对不是再来一次，而是直接敲电话给网银，然后是支付宝。绝对不要试图在支付失败问题没搞明白的时候再试验一次，就算试，最多也只能试一毛钱。
但是归根结底，这件事情轮到谁头上基本都是中招的，因为要管理的问题太多了。
反思了一下自己，我打算在自己的环境中推进几个事情。
1.重新设定防火墙，关闭不需要的服务和开放设定。
2.重整U盾，假定他可复制，因此需要使用特殊的保密环境进行支付。
3.对环境中的几台不可信机器进行行为监控。
4.定期读日志，尤其是异常报告。
5.关掉“仅使用手机动态密码支付”的选项。
PS.这篇文章不代表我支持网络实名制，但是我觉得应当让自己想实名制的人实名制。</description>
    </item>
    
    <item>
      <title>越想避开2B事，事情就越找上门——一个朋友的隐私泄漏问题</title>
      <link>//blog.shell909090.org/blog/archives/2062/</link>
      <pubDate>Thu, 12 Jan 2012 05:19:34 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2062/</guid>
      <description>首先向赶集网道个歉，核实下来居然是李鬼，主题还真没写错。下文根据事实情况做了修正，看过原文的可以对比看看。
今天一个朋友中午给我打电话求助，问我能不能在网络上把一个信息给删了。我顿时一惊——你被陈老师了？还是有人曝光你们家怎么怎么，所以花钱删帖？
结果都不是的，她家里电话被登在了赶集网的某个页面上，还置顶了。一个中原地产的人发布房屋消息时，用的是她的座机。
我顺手查了查，赶集网有删除错误信息的选项阿。
——你自己用用试试看？
我输入号码，我去阿，居然是js验证，要求号码必须是手机。仔细看看，是输入手机后发送验证码，输入验证码删除。
有点道理，可是我朋友家里是座机，咋办？
她找了找赶集的客服，但是没找到客服电话。搜索了一下网络上，有个人表示是赶集网的客服部，他说对方是付费用户，自己选择的置顶，她们无法删除。要么，交1000押金，立刻删除。对方三天内没提出意见，押金退还。
这个事情就很搞笑了，我自己的信息，要付费才能删除？传说中的百度产品经理去了赶集网么？
我说，你要么找发布者看看？
她说我找了，对方是中原地产的，说话很不客气。说这个事情我们检查一下，如果有问题，我们会处理的。她怀疑是对方在故意整她，不过这个事情目前没有任何证据的。
然后她只能等着，期间电话还是一个接一个的进。她家里也是开公司的，电话不能不接，也没法做垃圾过滤。
逼急了，她准备去报警，还不知道警察受理不受理。
42qu的某同学找我，说他认识一个赶集的人。他准备和对方沟通一下，看看能不能删除。先谢谢该同学。
过了中午，赶集的产品给了我一个消息。只要打给客服，客服会要求你提供电话。然后他们会回拨你一下，你接，就可以认证身份，然后对方就会删除信息。
我联系了朋友，她顿时觉得——怎么和上一个说的一点都不一样阿。
我和42qu的同学联系了一下，要了一下他们的客服电话（我们都找不到客服电话，他们的产品只有打过去要）。然后我朋友打过去，很快，问题解决了。
OK，大家现在应该猜到了，上午我们碰到了李鬼，也不知道我朋友是不是用百度搜索的。
如果真的打钱过去，就完蛋了。
先不说登录信息人的问题，我首先说赶集网的策略。
对于没有验证过的个人信息，采取“首先使用”的策略合理么？如果我找个虚假信息登记一下，成为用户，然后付费置顶，再录入某人或者某公司座机为火车票预定电话。那他们的电话不是瘫痪了？
其次，对于问题的反应，赶集网并不是很上心。网站的快速删除根本没有考虑座机如何操作，只考虑了手机。普通投诉在24个小时内也没有响应。而且没有明确的提供客服电话——至少两个程序员没有找到。如果赶集网本身提供了客服电话，或者快速响应了人工投诉，那么也没有后文的问题。问题是赶集网本身对客服并不是很热心。也许这是因为他们需要压缩客服成本。
最后，归结到根本上，赶集网对于有可能侵犯客户隐私的事情，有什么成本呢？
我怀疑没有成本。
我朋友如果去报警，最大可能是警方只提供记录，但是不处理。要解决，可以，自己起诉赶集网去。首先去公证处取证，一个页面3000（这还是07年的价格），然后去侵权所在地。赶集网的总部在北京，中关村软件园八号楼，所以要在北京市海淀区法院进行起诉。然而起诉前不能排除调解，因此可能还要过一遍调解过程。如果调解无效，那么开始起诉过程。如果对方不服，还有上诉。我不说隐私泄漏的结果如何计算，仅仅是这个时间和成本，就远远不是一般人能接受的。
因此赶集网实际上是没有风险的，因为很少有人会去执行。既然没有风险，那么自然也就没有动力考虑，如果被错误使用的不是手机如何，如果被错误使用的是地址如何，如何规避不慎泄漏了对方信息造成的风险——反正也没风险么。
在这里我批判的不是赶集网这个网站本身，作为一个公司，天大地大赚钱最大，你不能说这个是错的。那么和赚钱无关的事情不优先考虑，同样，也不能说是错的。我固然欣赏谷歌“不做恶”的信条，但是同样深知，你不能指望每个公司都信奉这点。
然而，难道说用户信息泄漏就是对的么？我们的电话被登录在网站上，被打爆，关键电话接不到，导致经济上的损失，或者其他一些事情，难道这就是对的么？
你必须让泄漏用户隐私变成公司的成本，而且是很大的成本，公司才会去关注这个问题。这点不仅对赶集如此，对百度如此，对人大代表如此，对你我也是如此。
你是否有把自己的手机写在人人和开心的页面上？
有写的话，就不要在接到垃圾短信的时候光抱怨各个公司泄漏你的个人消息。
你是否也有侵犯别人隐私的时候呢？例如你问，结婚了没？工资多少？在哪里上班？父母还在不在？
这些难道就不是隐私了么？
你见到没信用的公司的时候，是否还会用他们的产品呢？例如三鹿。虽然现在他被并购了，但是并购前，你还会喝他的牛奶么？如果不会，你看到侵犯隐私的公司，你会不会和他们提出意见呢？会不会用他们的产品呢？还是笑笑当作没事一样？
我知道这个社会一向不大把隐私当回事的。大到公司能大喇喇的把别人的家庭电话具体住址贴出来。小到我们每个人每天都在问别人的薪水。远到网络实名制的时候有人说，要么我们全填方老师的信息好了，并且把方老师的信息全公布出来。近到你看着看着这篇文章，突然手机响了，打开一看——又是垃圾短信。
我们每天都在被别人侵犯隐私，也在侵犯别人的隐私。我相信，即使在隐私保护比较好的国家，类似的问题也是层出不穷。问题是，我们多关注，多做一些事情，也许我们的情况就能好转点。虽然听起来没有联系，但是你少问别人工资，看到垃圾短信多举报（前提是这个机制要有用），看到网站对隐私保护不利要多投诉，也许在几千次的尝试后，你自己，或者你的后代，就能拥有更好的生活。
当然，如果你也不关心这个问题，那请当我没说。
最后，赶集网的客服电话是：010-59013666。特此公布以正视听。如果你发现有问题，可以在关于那里找到我的联系方式，我会尽快响应。</description>
    </item>
    
    <item>
      <title>最牛电商</title>
      <link>//blog.shell909090.org/blog/archives/2060/</link>
      <pubDate>Wed, 11 Jan 2012 07:25:56 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2060/</guid>
      <description>昨天聊天，聊到最牛电商的问题，大家都笑了。
frank订票45分钟花了45分钟，还没搞定。先是从chrome换到IE，因为前面的部分chrome能用，付款不行。然后从工商付款，上限500，不行，必须一次付款800，而且不能用支付宝。问我借卡，我的也不行。最后借到卡了，结果过45分钟了，重排，没票了。
淘宝买东西要是需要超过5分钟，喵喵就会少买好多东西。
还有个朋友说，他的卡能支付5000，买票，扣款后没票。人家说钱能拿回来的——钱能回来可是票回不来阿。好，再买，又扣钱没票。再买——没钱了。
我去阿，这TMD不是坑爹么？
这种网站，转化率还是100%，广告成本0，绝对最牛电商阿——没有之一。
关于顶不住这个问题呢，大家都懂的。我自己也做过类似的事情——甲方设法让自己的厂家中标，也不管人家有没有能力做。厂家领导是先中标再说，不中标自己就完蛋了。下面的人没能力，要么是不知道自己没能力，要么是知道也不敢说。做着做着问题一堆，也不敢和甲方沟通。不沟通问题就越来越多，交货的时候一看，甲方吐血。然后厂家领导就和甲方领导搞协调，厂家要去修一些问题的，甲方延一点时间，最终还是会让这个系统上去的——否则领导也麻烦阿。
最后只要这个烂摊子不被揭出来，大家皆大欢喜。中国政府领域的IT，大多都是这个样子。
比较大的烂摊子揭出来的，一个是绿坝。没办法，太烂了，还要所有机器供应商都来做支持。索尼干脆发了个文，这是中国政府让我们装的，出了问题不要找索尼，谢谢。结果这样还被告上美国法庭了。最后领导实在顶不住压力，撤了。另一个就是这个，最牛电商，估计回头也会撤的。因为后面订票压力越来越大，搞事情的人也越来越多，烂摊子搞到后来领导也会怕的。
其实昨天gary说了一句比较实在的话，这个系统不应该做成这个样子的。一切说中国买票的人太多，瞬间交易压力大，刷不出票的人持续刷的，都是借口。知道压力大，搞分时销售和抽签制分散压力。前端做负载均衡和CDN负担压力，后端真到订票的时候转换成MQ去操作。大型机再怎么做的差，每秒1000个transactions是出的来的。一小时就能完成360W的交易，一天八小时，3000W的票就出来了。中国有多少人需要订票的？3亿？就算做瞬时压力，铁道部车票成交比纽约股市买卖还快，要求还高？技术做不到根本是扯淡，最多是钱的问题——现在还是花钱没解决问题。
为了见证奇葩，我特地上去看了一下，结果第一眼就晕倒了——铁道部需要你自行下载根证书。我去阿，堂堂铁道部，一个多少万的项目，连TM买一张证书的钱都没有？！
其他细节就不多写了，相信用过的人比我都清楚的多。需要多次点击才能买到一张票，访问过程长导致压力大。定时开票，时间集中导致压力大。需要注册，导致注册过程冗长，也是增加压力。这些都不是技术问题。
整个过程中耗时最长的（抱歉我懒得注册，只去看了余票查询），一个是http://dynamic.12306.cn/TrainQuery/leftTicketByStation.jsp。这个的服务器响应表明是来自Apache-Coyote/1.1，由squid/3.1.18缓存，未命中。另一个是http://dynamic.12306.cn/TrainQuery/passCodeAction.do?rand=rrand。这个的服务器响应表明来自Apache-Coyote/1.1，是一张image（验证码），同样未命中。基本squid命中的都在ms级别返回了，出问题的都是dynamic.12306.cn这个域名没有命中的页面。这个表明前端的缓存还行，压力都压到了后端。至于造成这个现象的原因是前端缓存策略错误，还是后端性能相对不足，就不知道了。
我注意到，至少有一个页面https://dynamic.12306.cn/otsweb/css/contact.css。Server字符串是asfep/2.3.0 svn:3075。asfep是什么我不知道，google了一下也没出来。不过svn？这文件是从svn服务器上出来的么？！如果是，这就有点奇葩的味道了。
然后我点了一下查询，这下大奇葩出现了。一个query居然执行了30s以上。在验证码故意输错的情况下，返回速度在10s这个量级，而输入正确就天长地久了。由此可见系统是分成多个部分的，最外面是dynamic.12306.cn和12306.cn两个域名，上面用squid做了缓存。后面是一堆应用服务器。其中有一些Coyote服务器的响应特别慢，大概在1-10s这个量级。而这些服务器当访问数据库的时候，就彻底变成访问无望了。按照网络上说法，铁道部用的是Oracle数据库，估计已经半瘫痪了。
说是Coyote，其实如果没什么意外，这个就是Tomcat。那么铁道部的架构底子基本也就出来了，是J2EE的架构。估计是一帮ERP工程师照猫画虎做出来的。J2EE不是不能用来做电子商务，有些网站还做的很成功。但是不做任何优化，直接就敢拿J2EE做ERP的架构去做大规模电商的，这就是找死了。尤其是某些ERP严重依赖于Oracle，业务逻辑根本就是用Oralce写的，用J2EE封装了一个壳子。这种就更麻烦。
目前还不能确定铁道部订票网站到底是什么情况，不过可以确定的是，这个网站的状态在未来几天内还会继续恶化。搞不好到一定程度就直接没法用，或者被铁道部直接关闭网站一段时间了，需要订票的同学最好尽早想办法。</description>
    </item>
    
    <item>
      <title>两天的生活</title>
      <link>//blog.shell909090.org/blog/archives/2058/</link>
      <pubDate>Wed, 11 Jan 2012 03:39:23 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2058/</guid>
      <description>我刚刚看了酷壳上的一篇文，讲的是女程序员的故事。然后我准备说个无关的故事——数一数我两个典型的日子，2012年的1.3和1.4。这两天，一天是休假最后一天，一天是工作第一天，又刚刚过去，所以我还记得。听上去没什么关系，你听完就知道联系了。
1.3日
8:30
早上8点半就醒了，工作时间醒习惯了，睡不着了。起来洗脸刷牙开机煮饭——是的，老婆暂时回娘家，我要自己烧饭。（吐槽一下，程序猿婚后还是得学做饭）半个多小时后，大概吃喝完毕，开始处理邮件。
9:00
从九点到十一点，处理了所有的邮件，回了blog上的评论，顺便把整个广西游玩过程写成blog，大概4500-5000字。
11:00 从网络上买点东西，然后继续做饭——水饺。
12:00
吃完东西，开始研究hash冲突漏洞，大概研究到下午三点。收集了一下相关的问题，大致读了一下paper，包括squid上可能出现的情况什么的。把基本问题写了个blog。
15:00
给老婆发个消息，看看醒了没，给老妈发个消息报平安，收拾一下家里，大概花了半小时。给外婆打个电话说晚上去吃饭。然后开始健身。三组动作重复四次，总共半个小时。
16:00
去京东和淘宝上买点东西，看到有音箱，想起来家里的播音系统和视频系统还没有搞定。于是开始研究linux下的视频系统。
15:30 外婆打过来问什么时候去吃饭，出门去吃晚饭。
20:00 晚饭回来，装吃的，做家务。
20:30 看了一下，又是一堆邮件和评论，继续处理评论。
21:00
hash冲突需看一下python源码，然后写一个程序验证一下，发现maillist里面的过程有点问题。发个邮件过去确认一下，然后接着看了一下相关部分的python源码，三个版本。
23:00 看会动漫，然后洗澡。顺便说一下，最近在跟《便当》。
00:00
确定似乎要看一下论文，翻了一下论文，大概搞明白了什么意思。不过差不多一点了，该上床了。
1:00 在床上玩手机，安装一下各种程序，看点动漫，遂觉。
共计如下：写游玩过程的blog和整理相片两小时，研究技术和写程序六个半小时。
1.4日
8:10 开始起床
8:20 努力起床
8:30
起床（没老婆的日子里，闹钟要提早20分钟，不然会迟到），洗脸刷牙做早饭吃饭上班，路上听两首歌，处理一下私人邮件。
9:30 到公司，开始处理各种邮件，开始解决bug #600。
10:00 bug
#600验证出了问题，等待测试验证，开始写cmdb项目的映射部分代码。
11:00 hash那里想到一点问题，写个代码验证一下。
11:30 吃饭了，hash那个问题可以走通，不继续写了。
13:30 午觉醒来，开始继续cmdb的代码。
14:00 测试验证出了bug #600的情况，开始修正问题，并出补丁。
14:30 开始写年终总结报告
15:00 继续cmdb的映射代码
16:00 健身一下，处理一下自己的邮件
16:30 从淘宝和京东上买了点东西
17:00继续cmdb的映射代码处理
18:00 本来应该去健身的，没带衣服，算了，吃了饭回家自己健身去
19:00 开始做家务
20:00 开始研究mp3文件格式
22:00 健身，WTF
23:00 洗澡看动漫咯</description>
    </item>
    
    <item>
      <title>广西游记下</title>
      <link>//blog.shell909090.org/blog/archives/2056/</link>
      <pubDate>Mon, 09 Jan 2012 02:24:51 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2056/</guid>
      <description>阳朔 我们前后两次路过桂林——先从南宁坐过夜火车到桂林，吃过一碗桂林米粉马上上船去阳朔。桂林米粉就是普通的煮米粉，然后自己加上各种配料。当地人是干拌，吃完加点汤。我们吃就是加汤吃，味道很鲜，但是没有老友粉那么特色。我怀疑外面卖的桂林米粉多是因为这东西比较容易操作。作为师傅，只要配料和汤料准备完，剩下的就是小碗煮米粉而已。人多的时候也可以很快操作。老友粉和螺蛳粉就没那么快的操作速度了。
从桂林到阳朔的船是旅行的重点。上船先买票，到了船上还可以包包厢。我建议——最好是多人去，直接包一间包厢，6人间600，送一套午餐。这样既不吵，而且中午吃的也会比较好一点。我们看过他们的普通午餐，根本就是白煮白菜加上米饭！上层的风景非常好，可惜我们去的不是时候，漓江正好处于枯水季。不是上游水库放行部分水流的话，我们今天的船根本一步都开不出去。而且当天略有阴雨，看漓江风光的时候朦朦胧胧。往好了说是别有风味，往糟糕了说就是白干一场。不过这次有几处，江面上开阔大气，两旁山水气势磅礴，船头上又没有什么人，感觉这几处还是值得的。
阳朔据说是最早的旅游酒吧聚集地，资本主义的桥头堡——比丽江早多了。我们看了看，不算大，只有三条街的大小。看看点评，里面最热门的是“谢大姐啤酒鱼”，出门发现谢三姐啤酒鱼，后面什么刘大姐张大姐全都站出来了，李鬼不但比李逵还多，而且多多了。我们找正宗店家找了半天，吃完还没法肯定自己吃的是正宗的。不过东西不错，啤酒鱼中午也有吃，是用啤酒来烧鱼，而不是清水。鱼的味道很赞，和中午效果完全不同——中午连鱼鳞都没有去干净。
我们吃东西的要点是——找一家，少点点，好吃再加，不好吃付钱去别处。因此啤酒鱼垫个肚子，我们又去了点评上的第二家——黄记玉米汁。讲到这里，感觉这趟游玩纯粹变成吃喝之旅了，没办法，两个吃货出门，还能指望点啥呢？
玉米汁不错，据说浦东也有分店，就在八佰伴旁边。好像是用煮过的玉米，用豆浆机打碎，滤过其中的植物纤维，只剩下植物蛋白的粘稠溶液。店里的特色是准备了很多便利贴，让客人自己写各种东西贴在墙壁上作为装饰。我们去的时候，墙壁上已经贴了一层又一层的便利贴了。
黄姚 黄姚不大不小也算是个旅游城市，不过名气上远没有阳朔和丽江那么响亮。猫咪不知道怎么把这个地方挖出来的，绝对赞，强烈推荐。我们去的时候还算是淡季，街道上的人不多不少。看着热闹，又不会拥挤。据说每到逢年过节，春秋风光明媚的时候，镇子上的民宿和镇口的旅馆全部爆满——镇口有一家四星级旅馆。由此可见这地方值得一去。
黄姚古镇是一个很小的镇子，离桂林大概3小时的车程。镇上水土很好，旅游业小有规模，又没有像阳朔和桂林那么夸张，感觉进去好像进了义乌一样。当地的小巷子还是很原生态的，大概有一半不到改成了商店和民宿，另一半还是普通民居。巷子四通八达，山水相连风光秀丽。据说有不少电视剧都是在此取景，因此墙上有很多民国年代的招贴画，像是回到那个年代一样。镇子上特产豆腐和豆豉（都是豆制品哈），尤其是其中一家的姜糖水豆腐花，超级赞。豆腐白花花，入口即化，姜糖味道很明显。一碗两元，一定要吃。
镇子白天进去是收门票的，晚上就不收钱了，随便进。住民居，吃农家饭，都随意。这里的农家饭真的是农家，我们在前厅吃饭，一墙之隔就传来小孩的哭声和笑声，门外还有只黄狗，每次有人经过，就汪汪的叫起来。我们吃的鸡是自己挑的，走地鸡——不走也不行啊，这里根本没有专门的养鸡器具，晚上都是关在一个小笼子里面。笼子顶上还有个洞，居然有一只鸡从里面跳了出来。行，公鸡中的战斗机，就是它了。
先上的是一道扣肉，用芋艿和五花肉烧的。热的时候很香，冷一点就不好吃了。然后是枸杞梗烧鸡杂鸡血什么的，用枸杞梗烧汤是这里的常态，我们两顿都吃到了这样的汤。鸡肉果然鲜美好吃，我们基本干光——剩下的骨头就喂了前面的阿黄。他倒是很挑剔，好吃的吃，不好吃的就不吃了。一点不像我们后来碰到的一只在路上的狗，给什么吃什么。
桂林 桂林基本就乏善可陈了，我们只在桂林停留了半天，而且还没吃到什么好东西。
中午的老字号米粉怀疑是李鬼店，汤头不鲜，而且免费的料太辣。辣不要紧，关键是一点都看不出，而且吃下去过一会才辣起来。我们一行人全都跑出来买水喝，喵舌头还吐个不停——我说这家原来是做辣酱出身的吧。下午去了象鼻山——既然来了，总不能不去吧。象鼻山现在在枯水季，所以不算很好看。然后我们到正阳路步行街逛了一下，回来吃了一碗螺蛳粉。螺蛳粉其实里面没有螺蛳，是用螺蛳肉煮汤，然后放酱料做的。感觉和老友粉非常类似，只是不放酸笋，略有差异。如果去柳州，记得吃上一碗，看看差异。
OK，广西之行基本就是这个样子，如果你也要去，不妨参考一下。另外补充两个值得去的地方，七星山和龙脊梯田。这次我们时间有限，未能成行，非常遗憾。</description>
    </item>
    
    <item>
      <title>广西游记上</title>
      <link>//blog.shell909090.org/blog/archives/2054/</link>
      <pubDate>Thu, 05 Jan 2012 01:46:45 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2054/</guid>
      <description>说是游记，大概会写成一笔流水帐吧。我写东西大多数情况下，信息多于修饰，一贯如此。
北海 头天飞的北海，天气不错，气候宜人，下了飞机我就脱掉了棉裤棉衣。北海位于广西最南端，几乎是中国大陆最南方的城市，规模并不大，冬暖夏凉气候宜人。我们住在侨湾那里，听当地人说，是当年东南亚排华的时候，从国外逃回的华侨，当地政府在这里安置，形成的村落。所以当地居民很多会说越南语，而且很多东西上标注的都是泰文或者越南文。这里离著名的北海银滩并不很远，打车15就到。
银滩其实没有想象中的好，主要是因为现在是冬季，海水虽然不刺骨，但却不能游泳，因此来的人几乎没有。据当地居民说，这里在旺季的时候，几乎全是人，完全无法游泳。银滩的海浪冬夏不尽相同，不便评价。但是她的沙滩非常好，沙子洁白细腻，踩上去一点都不痛，粘在脚上拂拭不去，干了还是薄薄一层。不仅远离海岸的地方如此，而且海岸边上的沙子也如此，明显是冲积形成的。厦门的白城更加商业化一些，一年四季都有人，卖小吃的，栈道上观景的，冲淡的，始终不断，但是沙子是个先天劣势。厦门远离海岸的沙子是细沙，但是岸边的就是粗砂，踩上去如同足底按摩一般，明显后面的沙子是运过来的。但是银滩在淡季的时候，冲淡的，卖东西的，基本都没有人经营，明显只做一个季度的生意。
我们去了南珠宫买了点珍珠，这里的珍珠非常好，属于当地特产。珍珠的常识是，海珠比淡水珠好。但是海珠更加圆滑透亮，不适合做胸针什么的，大部分都是项链手链。珍珠项链又不适合每个人，所以要不要买，见仁见智。我们买的是淡水珍珠胸针，也不算贵，就是买着玩玩而已。猫咪倒是对这里的甘蔗汁更加感兴趣，喝过一次后念念不忘，吵着要喝。这里的甘蔗是青皮甘蔗，现场压榨。汁液鲜甜，在上海可是很难喝到哦，来的不妨买一杯尝尝。
侨湾那里也有个海滩，和银滩差不多，只是名气没那么响。我们在旁边饭店吃的晚饭，贵死了！！！不过饭店外的风景甚好，我还抓了好几张不错的夕阳，算是心理平和点。
从北海坐火车到南宁只需要三个小时不到，不过一天只有两班火车。与此相对的，火车站修的广大气派，不知道是干什么用的。照我说不妨学学杭州的火车站，把上面的部分改建成商业建筑，还能充分利用。列车上一点让人不爽的地方就是，上去后一趟火车3个小时，推销东西的有四批。一个卖毛巾的，一个卖鞋油的，一个卖牙刷牙膏的，一个卖速算书的。从头卖到底，五分钟清静都没有，猫咪想睡觉都睡不着，铁道部最近穷疯了还是怎么？
火车上我们对面的一对老头老太是北京人，石油部的，退休了到处玩。老爷子心脏有问题，所以在气闷的火车上非常不舒服。问老太太为啥年纪这么大了还到处跑，老太太说，老爷子心脏不好，装了支架，闷在家里不痛快。出来和老朋友见个面，顺便在北海休养休养。北海气候宜人东西便宜，他们住了一个月了。说着呢，老爷子散步好久没回来，我跑去厕所敲了半天门，没开。刚说要不要找列车员开门，老爷子回来了。他去后面车厢上了个厕所，顺便透透气。没事我就准备回去和老太说一声，老爷子继续往前走。过一会，老爷子从前面绕回来了——他原本倒是想回座位，可是找不着座位在哪了。我们的火车上下两层，他光在上面找，是找不到。我碰到了他，以为想继续散步，也没拉他回来。
南宁 我们只在南宁呆了半天，但是对南宁的夜市印象非常深刻。除掉下午去了一趟广西博物馆，剩下的时间就是吃吃喝喝。先是打油茶，狗肉（都是好东西啊），后来还有一个艾粑粑。打油茶是当地特产，用糯米脂肪和茶打出来的一种饮料，具体可以自己百度。我喝喝感觉口味一般，味道不算好也不算糟。艾粑粑是用艾草汁做的一种糯米食品，大概就是没有馅的艾草青团拍扁。不过这年头还有哪里有正宗艾草青团？
夜市里面吃到的各种奇奇怪怪的东西就多了去了，我甚至在里面看到了整只的鳄鱼和鲨鱼。我们首先吃的烧烤，旁的不用细说，里面最特殊的就是猪鞭，平时烧烤这东西可没有当成鸡翅一样在卖吧。然后还有南宁特色，老友粉。广西这里偏爱米粉，而且各地做法不同。到桂林要吃桂林米粉，到柳州要吃螺蛳粉，到南宁就要吃老友粉了。这个是用酸笋和各种料来烧的米粉，味道酸酸馊馊，据说很多人吃不惯。我吃吃很好吃啊，和北京的豆汁完全不是一个概念。
后面有一碗牛杂汤，是用各种牛的下水熬的汤。猫咪不吃内脏，所以让我来吃。我貌似吃到的是牛肺，也好，润肺通气。然后，今日重点登场——王老吉。我们是在一个糖水铺里面看到王老吉的，当地朋友立刻就一脸暧昧的笑容。我们点上各种糖水，然后点了一杯王老吉来品尝。我第一个下手，一口下去——我去啊，这玩意苦的厉害。不过还好，当年我也是喝了好几年中药的，脸上神色不变，点点头，恩，这玩意有点苦。还记得那个笑话么？三个傻瓜摸烧红的秤砣是什么味道的——傻喵马上说，是么是么？多苦啊，我尝尝。恩，很好很好，马上看到某只喵像被掐住喉咙一样的扑腾——我趁机喝掉她的糖水，缓解一下嘴巴里的味道。
后面一帮不信的人，前仆后继的相继中招。这玩意的味道不但苦，而且从喉咙里面不断散发出来，根本不是喝口糖水就能压掉的。这是当地正宗凉茶，可不是外面卖的王老吉那种水货。当地朋友是感冒，当作药喝的。我们几个就傻傻（好吧，里面也许有一点点我的因素）的分别中招。
最后一个吃的是南宁的小馄饨，这个很赞。里面放的丸子是牛肉丸，打的很彻底，很Q很有弹性。馄饨包法很特殊，是用皮子卷出来的，馅料粉红色，煮开后有嚼劲。就是吃的时候有点苦——这个绝对是王老吉惹的祸。总体来说，南宁之旅还是留下了很深刻的印象的——东西好吃！！！</description>
    </item>
    
    <item>
      <title>哈希冲突漏洞的原理和对策</title>
      <link>//blog.shell909090.org/blog/archives/2052/</link>
      <pubDate>Wed, 04 Jan 2012 03:59:57 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2052/</guid>
      <description>cpug上面最近在讨论一个严重级漏洞，漏洞的相关资料如下： ERT-VN:VU#903934 CVE-2011-4815 CVE-2011-3414 CVE-2011-4838 CVE-2011-4885
上面主要讨论的是这么一个概念，当用户post一个数据，而且这个数据又是一个form的时候，应用需要先将form解析为dict，然后才能方便的使用。例如a=1&amp;amp;b=2，可以解析为{&#39;a&#39;:&#39;1&#39;, &#39;b&#39;:&#39;2&#39;}。之所以1和2是字符串，是因为只有用户自己才清楚这个数据的类型。
通常情况下，这个form的key都是随机的，生成的hash碰撞概率很低，因此dict的默认实现——hash table没什么问题。但是当攻击者恶意构造数据的时候，情况就完全不同。我们首先讨论一下hash table的实现——开链法和二次探测法。
所谓开链，就是指对所有同余hash，将他们挂到一个hash表项上，形成一个链表。而所谓二次探测，就是在第一次hash冲突后，再进行一次hash，作为第二地址。
开链法对碰撞冲突是有先天缺陷的，因为同余碰撞的构造远比hash碰撞的构造简单。假定hash
table有11个表项，那么平均11次尝试就可以得到一个元素，和原始元素hash同余。如果选用这样的恶意key序列，在执行构造的时候，hash
table就退化为了链表。链表的插入复杂度是O(n^2)级的。而作为攻击者，为了获得n个hash同余对象，所需消耗的复杂度做如下估量。首先考虑hash table length和n同阶，因此以n作为hash table长度。这样每n次尝试就可以获得一个恶意元素，获得n个元素的复杂度为O(n^2)级。
也就是说，即使是sha256这样强的hash算法，只要保证哈希函数特性，对同样的值得到同样的哈希，就无法保证开链法的安全。
而二次探测法对这个是有先天抵抗的，二次探测法的第一次碰撞并不难构造，但是第二次哈希后依然保持同余的构造难度就由n增加到了n^2，多次碰撞的构造难度以此类推。虽然我没有完整的计算过这个值，但是猜测难度量级应当是O(n*n^n)级别的。这个级别基本就不用玩了——前提是哈希算法必须是安全的。
由于为了节约计算过程，因此python和php的hash算法都没有采用md5之类的高散列算法，而是一个很简单的算法。我摘抄一下Python2.7.2中的这段代码。python_string_hash.c
static long string_hash(PyStringObject *a) { register Py_ssize_t len; register unsigned char *p; register long x; if (a-&amp;gt;ob_shash != -1) return a-&amp;gt;ob_shash; len = Py_SIZE(a); p = (unsigned char *) a-&amp;gt;ob_sval; x = *p &amp;lt;&amp;lt; 7; while (--len &amp;gt;= 0) x = (1000003*x) ^ *p++; x ^= Py_SIZE(a); if (x == -1) x = -2; a-&amp;gt;ob_shash = x; return x; } 按照&amp;laquo;python.</description>
    </item>
    
    <item>
      <title>理想的平板</title>
      <link>//blog.shell909090.org/blog/archives/2050/</link>
      <pubDate>Mon, 02 Jan 2012 14:37:32 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2050/</guid>
      <description>7寸以下宽屏，原因，可以一手拿住。
300g以内，原因，可以一手拿住。
厚度1cm以内，原因，拿得舒服。
10小时续航，原因，一天可以只充电一次。
3g支持，原因，不支持3g的不叫理想的平板。
IPS/PLS屏幕，原因，普屏的视角的却有的时候很不爽。
usb可充电，原因，外部电源续航方便，充电方便。
支持TF卡，原因，方便。
USB OTG，原因，可以拖U盘和键盘。
GPS支持，原因，地图是很重要的。
好吧，我们合并要求起来看看。300g以内10小时续航，目前芯片和屏幕的功耗连电池重量都不够。所以这个无形就要求更加节能和强劲的芯片，还有更加节能的屏幕。同时，这个屏幕还不能比IPS视角差。
继续等吧。</description>
    </item>
    
    <item>
      <title>语言的继承和历史包袱</title>
      <link>//blog.shell909090.org/blog/archives/2048/</link>
      <pubDate>Sun, 01 Jan 2012 02:03:01 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2048/</guid>
      <description>出去玩，在阳朔过的新年，随便发点吧。
我们知道，C++继承了C语言的语法，并且号称完全兼容。实际玩下来，C标准自己也不怎么统一，说基本兼容大家是没异议的。这个给C++带来了无限的好处，从一开始，C++的用户数量和其他语言就不在一个数量级上。《C++语言的设计和演化》一书中说，作者设计出来后没多久，基本没有做宣传，就有无数人给他打电话，用户数量飙升。作为一个新出的语言，即使是Go也没有如此的待遇，这就是继承了C的好处。
有好处就有包袱，C++兼容C，出现的包袱也很大。想做GC？想使用智能指针？那就没法兼容C（具体不细说）。此外里面有无数的问题是因为“需要兼容C”而变成一个四不像的。再后来，为了在语言上更进一步，Java继承和吸收了C++的部分语法。这给Java带来好处，也带来问题。
继承一个东西的好处，就会带来一定的包袱。这个也同时体现在Zope社区和Python社区里面。Zope3把2直接推倒重来，导致了用户纷纷出走（当然还有别的原因）。从而出现目前Python
Web框架满天飞，各自为战的局面。而Python3则是不完全兼容Python2，导致目前上面的可用库依然不足。在Python3.2的时候，几乎是被迫的做了一些前向兼容，来换取用户可接受的过渡。同样，前几天我在说Django的演进的时候，也说过。如果我要做一个jinja版本的Django出来，大家接受度如何？当然，这不代表你无法在Django中使用jinja，不过发行版中不会作为标配。
还有什么语言继承和革新的事情？大家不妨想想。自己做的时候，对照一下，谨慎取舍。</description>
    </item>
    
    <item>
      <title>大家帮我验证一下证书</title>
      <link>//blog.shell909090.org/blog/archives/2046/</link>
      <pubDate>Wed, 28 Dec 2011 17:53:05 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2046/</guid>
      <description>今天一个朋友和我聊天的时候，问我，是不是hosts不安全。我说，都不安全。翻墙的话，必须对翻墙服务器的拥有者相当信任才可以。不但要相信人品，而且要相信技术，相信服务器不会被入侵。使用gae的话，服务器要自己组建，否则你无法确定组建者是否会修改代码，加入监控代码再上传。hosts引入的问题是，你自己对自己进行了一遍dns毒化，如果目标本身是错的，你就傻乎乎的跳到了一个攻击者的机器上，而且你的行为使得域名核查不能阻止你犯错——他们也认为这个机器拥有你要去的domain。
不过有意思的是他给出的一个例子：
https://199.59.149.208/
这是用于访问twitter的一个hosts。
https://twitter.com/
问题是，两者的授权是不一样的。我在《论不同系统和客户端的证书管理》里面说过，如果你访问google的时候发现证书是cnnic签署的，你是否觉得可怕。而这次，我发现hosts的证书是GeoTrust签署的，但是我访问twitter的证书是VeriSign签署的。
一家网络公司会找两个不同的供应商签名么？我不清楚。chrome的自动验证对这个无效（所以很危险），因为域名和ip对不上。我试过用openssl验证，但是debian的openssl有个bug，我用CApath无法验证任何证书，包括真实的twitter证书。所以我也无法解答这个问题。从IP上看，这个IP到确实是Twitter的。
NetRange: 199.59.148.0 - 199.59.151.255
CIDR: 199.59.148.0/22
OriginAS: AS13414
NetName: TWITTER-NETWORK
不过这不说明任何问题，完全有可能在路由器上把这一地址段定义到了其他设备上，从而实现man in middle。关键是证书——谁可以帮我验证一下这本证书是否有效？</description>
    </item>
    
    <item>
      <title>密码三文的补充</title>
      <link>//blog.shell909090.org/blog/archives/2044/</link>
      <pubDate>Tue, 27 Dec 2011 10:01:11 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2044/</guid>
      <description>前两天写了两篇关于密码的文章，其实没说什么，都是程序员的常识和经历。实话说比较有意思的是大家的反应。
一个是，大家为什么纷纷盯上了第一条？我在写的时候，主要考虑的最多的是第五条，就是网站本身方便盗窃其他网站资料，或者为网站本身提供便利。具体可以看某个投诉知乎的帖子。但是来的人几乎无一例外，都在和我讨论第一条。我不知道理由是什么，大家都觉得政府这么值得怀疑么？实际上，除非政府觉得你有资格收集密码，否则基本没有听说密码必须明文存放的潜规则。你想想，你在国内搭建一个小论坛，需要备份明文密码么？
上级要求明文密码的过程大概是怎么发生的？我听一个朋友聊天的时候说到，网管部门要他们系统上某个用户的密码原文，还必须是原文。当然，作为管理部门，是不需要解释原因的。他们表示，密码都是md5之后的。做不成，对方也没有什么表示。后来老板说，设计系统的时候，密码就用明文吧。从这个闲扯中反推，我大概能窥见事情是怎么发生的。不过神奇的是，这个简单的事情，怎么会发展成“网管部门有保存明文密码的要求”的，我描述的太模糊了？
另一个是无所谓的忧虑。我发现很多过来的搜索都是“哪家银行明文保存密码”，还有朋友加我gtalk问我google是否安全。实话说我觉得大家太多虑了，而且考虑方向还错了。与其考虑谁明文保存密码，不如先无良的假定“你们都是坏人，密码都是明文”。然后再想，我的钱是不是还安全？我的系统是不是还安全？我要不要关注这个安全？你指望对方设计的时候使用了hash，多重hash，salt，还不如指望自己的密码强度足够，而且符合使用规范。
密码是什么？从信息学角度说，密码是某个密码空间中的一个随机值。你和服务器约定，提供这个随机值，服务器就验证你的身份。从这个角度说，每两个实体间验证身份都需要一个独立的随机数，而且这个随机数空间还必须够大。现在的主要问题，是大部分人对这个值的选择太过有规律，太过简单，而且更危险的，对所有场合使用同一个值。如果真的需要使用同一个密钥，除非你的密码体系是公钥体系。否则即使是challenge-response模式，也有差分攻击这个问题。
另外顾虑google的那位朋友就有点神经过敏了。当年google退出中国的理由是什么？被攻击。作为一个被攻击后，事情没人知道的情况下，反应这么大的公司，无论如何比其他闷声不响的公司更加重视安全，也应当更加安全吧？你们知道索尼的网站也有密码泄露么？你们知道国内网站在这次之前有多少入侵事件么？在事情没有曝光前主动反应的，google是最大，最严重的一家。如果他不可信，我觉得要找另一家可信的公司就更困难了。</description>
    </item>
    
    <item>
      <title>geek们在圣诞夜玩什么</title>
      <link>//blog.shell909090.org/blog/archives/2042/</link>
      <pubDate>Mon, 26 Dec 2011 00:21:14 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2042/</guid>
      <description>24号，几个geek跑到我新家里面来玩，frank，ltn，thomas迟了一点，不过还是来了。gary跑来坐了五分钟。实话说，家里没这么热闹过，谢谢你们。
一帮geek在圣诞夜玩什么呢？首先是诈金花，我好像赢了一点——不过记得不是很清楚。我和猫咪不会打，ltn和frank会，老妈打了一阵就去烧饭了。然后是一顿很不错的晚餐——谢谢老妈。晚餐过后，我们开始摆弄数码相机，拍各种照片。我弹了一把吉他，好久不弹，都不会了。然后继续诈金花，同时电视里面在放哆啦A梦——用一台主机上的虚拟机里面的chrome放，这大概是整个客厅里面唯一符合geek聚会的东西。过了一会我累了，猫咪也困了，就中场休息，猫咪洗澡睡觉。
真正的geek聚会是在十点左右，猫咪睡觉/thomas到场后开始的。我们开始玩——愤怒的小鸟。不过我们不是打电脑游戏，而是用椅子摆了一个真实的物理模型，然后摆上我送给喵喵的猪头，和frank送我们的小鸟。每人五次，用小鸟打猪头。当然，猪头前面一般都是有一把椅子阻挡的。OK，这个——算不算Geek聚会的正常内容？
感觉geek就是一帮长不大的小孩，有点意思但是父母说不能玩的东西都要凑在一起玩一玩。不过以前多数是写程序，或者组装个硬件进行编程之类的事情。现在只是改成了组装愤怒的小鸟现场版而已。现场我们也没人在意战绩了，反正就是玩呗。
然后是例行的德州扑克大战——在weibo平台上面。我们原来在thoma家就是一帮人一起玩德州扑克的，不过现在地方没那时候大，来的人也不够多，所以不够热闹。我用电脑接到电视上玩，而其他人就各自用自己带来的电脑。四个人聚在一起互相打牌——这个有必要见面再打么？
然后？我困了，所以就收拾东西睡觉了。
第二天早上起来，我和喵喵就开始烧早餐——小馄饨。实话说这个简直外挂，不是我们自己包的，不用我们收拾。只是简单的找个锅子，烧热水，放下去，然后加冷水。不过有纪念意义的是，这勉强算是我和喵喵第一次一起做饭，也是第一次在新家烧饭。吃过早饭，大家继续德州扑克。猫咪用我的帐号输了好多，用会自己帐号就开始赢钱。可见根本没用心给我打——可恶。中午吃过点东西下午就去shlug活动了。
这次活动非常的吊诡，大家知道shlug的主题分享历来是比较正统，但是后面聊天就离题万里，OT到不知道哪里去了。今天我们分享的是bigdata，结果——我们会后讨论，OT了五六次，内容倒是很有趣，涉及了普朗克时间，玻尔兹曼常数，人类进化历史，中国和世界古文明史，世界宗教和基督教史，特种半导体技术，基因表达过程，蛋白质折叠计算。最牛的不是我们讨论了什么，而是每次都绕回到bigdata上面。只能说，今天的选题实在是太广了点。
好吧，一篇流水帐，没什么好多说的。geek每天的生活大概就和普通人一样。gary的车要去修，chaos要担心自家宝宝，ltn闹了肚子（不知道是不是和晚饭有关）第二天还要考试，thoma的老婆怀孕，圣诞夜还得陪着不能玩——哦，对了，她的预产期是明年，希望能生一个漂亮的小宝宝。
Merry Christmas，大家圣诞快乐。顺便——Happy new year。
PS: 照片我就不发了，大家看看这个得了。
http://shell909090.3322.org/shell/IMG_20111225_004833.jpg</description>
    </item>
    
    <item>
      <title>关于今天六点到十点间无法访问的事情</title>
      <link>//blog.shell909090.org/blog/archives/2040/</link>
      <pubDate>Fri, 23 Dec 2011 22:24:26 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2040/</guid>
      <description>别瞎猜了，我下班前写密码的文章时，想起自己的keepass里面有不少密码过期了，然后就更新了这些密码。结果把我的虚拟主机密码更新后，忘记在config.php里面跟着更新密码，然后网站就挂了。
非常抱歉。</description>
    </item>
    
    <item>
      <title>网络安全——你需要知道的东西</title>
      <link>//blog.shell909090.org/blog/archives/2038/</link>
      <pubDate>Fri, 23 Dec 2011 12:00:41 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2038/</guid>
      <description>首先，我也不是专家，如果里面有什么错漏，欢迎补充。补充和转载请注明我的blog: http://blog.shell909090.org/blog/，我会根据你的发言在上面直接修改，没同步过去可不赖我。
要安全的使用网络/服务，你所需要注意的头两个问题就是你的安全级别和客户端的安全级别。对于零级密码，你随便在什么客户端上输入，都没有关系的。但是网银之类的最高级别密码，你不能在不可信机器上输入。什么叫不可信？别人的机器，你要相信这个人的技术和人品。自己的机器，你要在上面装了杀毒软件，没有执行过各种奇怪的程序/小游戏。这才叫可信的终端。如果你的密码在别人机器上用了，回来马上修改密码（不要在对方那里修改，没意义）。最好的方法，就是找一台旧电脑，专门装一个系统，装杀毒，用来使用网银和各种安全应用。别用深度定制版的操作系统，别人用过就重装。
当然，大多数的人都觉得，这样好麻烦啊。好吧，你可以无视这条规则——只要你对下面的各种病毒隔离和恢复措施做的够到位，对自己的技术够自信——至少我还没有这个自信。或者你可以认为我在危言耸听，彻底无视我的建议。大部分的情况下，你都是对的。这些事情都是徒劳的白做工。不过很低的概率下，你会中招——自己考虑。
其次，不要使用不可信的服务/产品。这条的执行力度自己考虑。一家公司，曾经做过流氓插件，你用不用他的产品？一家公司，曾经被央视曝光，你用不用他的产品？一家企业，敢于劫持客户的数据，将内容替换成自己的广告，你用不用他的服务？很多时候，我们都是别无选择，只能听天由命。不过当你有的选择的时候，尽量使用名声比较好的公司的产品。也许你觉得——这个不重要。好吧，Who care是最大的无力。
接下来，你要注意你的个人信息。被各个地方窃取使用个人信息已经很无奈了，你自己再爆出去就是无语了。你有没有在开心上公布手机号？有没有公布自己生日？有没有写自己的邮箱地址？有没有说过自己的家庭地址？这些信息都会被用于社会工程攻击，例如伪装你朋友的邮箱给你的邮箱写信，说借我二百。。。别笑，从开心上很容易收集这样的数据，伪装和发送也很自动。
后面一点对一些普通人可能比较困难——你要区分什么是可以信任的，什么是不可信的。下面的事情你权当笑话去听，是否照做自己判断。
1.来电号码是不可信的，来电无法验证身份，短信和电子邮件也不行。如果你的一个朋友来电或者发消息说让你干什么事情，认证身份的最低办法是打回去。更加通用和安全的方法是共同知识验证——哎，大学的时候，我们隔壁宿舍摔断胳膊那哥们当时干啥摔断胳膊来着？伪装者怎么知道TM那倒霉孙子胳膊是怎么断的？通常人人上也不会说这个吧——除非丢的正好是人人帐号。
2.传票是邮寄到家的，公安局找你都是上门或者通过街道。如果有人电话给你说是某法院/公安局，你不妨要他的电话和部门名称，然后打114查号，再打过去。通常情况下，不管也行——真有问题他们会上门找你的。
3.网站什么都不能说明，即使那个网站里面有所谓的标识。例如qq.c0m（假如这个注册的出来的话）不代表腾讯，这个上面有人说你中奖一点意义都没有。即使来源真的是qq.com，那也不代表事情是真的。同样，靠谱的方法是要他的号码和部门，114查证后打过去。
4.400电话打过去都不可信，你要是打一个400电话，和打一个民居没什么区别。对方有个声音很好听的小姐接听，还有——请稍等，我为您转接一位同事——也一点意义都没有。号码来自百度也没意义。
5.用114电话比用百度的好处是，百度给钱就可以瞎排，这个都上央视了。114目前我还不知道有什么竞价排名的东西，所以你找一个电话多数都是靠谱的。注意，这个不绝对。
6.手机这东西少借给别人，尤其是不熟悉的人。里面多个窃听器发信器你都不知道是谁干的。现实中没那么玄乎，也就是拿你的卡号申请动态令牌，申请前找你借五分钟手机而已。
7.软件怎么判别是否可信？通常来说，敢开源的都是比较可信的，毕竟里面干了些什么大家都看的到。闭源的软件和服务就看你是否信的过这家公司了。
8.对于别人推荐的玩意，尤其是朋友推荐的玩意，你最好确定一下确实是本人推荐的。即使是，我也保留的打开——技术上说，就是专门找台机器来运行。
9.有的时候，要敏感。你打给一家订票网站，他们需要你的身份证和信用卡号，给不给？实话说，这是个风险，而且不小。很多人的问题不是评判失误，而是根本没意识到这样做的风险。要知道，目前一代身份证还没有完全废弃，万一对方拿你的身份证号伪造了一张身份证，然后申请重置密码之类的事情。虽然能不能成两说，但是这两个号码同时泄露给一家网站总归是个风险。同样的还有携程——去年我曾经向他们的客户经理投诉，他们的电话语音系统居然要我人工报卡号，身份证之类的。我说如果是电话输入系统还好说，人工操作万一你的接线员记下来怎么办？这个你能保证么？今年大家打携程电话去看看？虽然我没有完全信任携程，但是电话系统比人工系统的安全性总是高那么一点点——除非他们故意在设计时捣糨糊，明明是电话录入系统，还是能让操作员看到全部卡号。
其实万千方案归结到后来都是八个字，多听多看，谨小慎微。会来看这篇blog的都是多听多看的，那么只要谨小慎微就好了。哪怕这谨小慎微有的时候显得有点小人和扭曲——不敢用别人的电脑上自己的帐号，不敢打开别人给的软件，不给别人玩自己的手机。到底多谨慎，看你自己觉得自己多重要。要是觉得一人吃饱全家不饿，就算全国密码泄露也与你无关。如果你觉得自己还是有点身家，有些该坚持的问题上还是要坚持一下。
最后说一点无奈的事情。即使你上面的事情全部做到，有很多事情还是无可奈何。例如携程的问题，他们有一个业务是只需要输入卡号后四位就可以订票，很明显，这是记录过全部的卡号才可以做到的事情。如果他们的数据库泄漏，攻击者是否就可以直接从中划帐呢？外推考虑这个问题，你会发现所有输入过信用卡号的公司，无论他们是否可信，你都要假定他们保存了你的卡号信息。所以事情就只能信赖银行的信用卡系统，包括大笔消费警告，未经手消费复核，先行赔付等等。只有消费后能够复核的信用卡公司，才是可以信赖的公司。
PS:
另外做一点广告。全国各家涉密公司，如果你们不希望你们的管理员/操作员随意接触高级管理帐号，希望能够审查谁接触过用户账户信息，你可以用我们的系统。http://www.shterm.com/。我们目前做的是堡垒机密码托管，除了一个最高管理者外，管理员都不知道自己使用账户的密码是多少。同时，访问过用户账户信息会留下无法清除的记录，事后可以审查。
注意：普通用户上这套系统没用！</description>
    </item>
    
    <item>
      <title>关于密码——你们不知道的很多事情</title>
      <link>//blog.shell909090.org/blog/archives/2035/</link>
      <pubDate>Thu, 22 Dec 2011 23:32:27 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2035/</guid>
      <description>1.hash密码安全么？
只要你的原始密码不大复杂，hash密码也完全没有安全性可言。不信？echo &amp;lsquo;abc&amp;rsquo; | md5sum，去www.cmd5.com，看看有没有。同样，拿你自己的密码试试看？
注：null同学对此提出了异议，表示这个网站的可信性也值得怀疑，不要输入你自己的密码。我考虑过后觉得有道理。从基本安全性上说，网站只能收集密钥，无法收集用户，所以密码泄漏的风险不大。从我个人来说，一个网站如果爆出hash泄露，基本等同于密码泄漏。所以本质上避免问题的方法是一次一密。但是鉴于国内很多网站还是直接使用了hash（尤其是md5）保存了密码，在这个网站上输入了密码等于将自己的密码加入了字典，从而减低了安全性。
在此，向所有被我忽悠的同学诚挚致歉。如果你在里面输入过密码，建议你将密码改为一次一密。即每个网站使用不同的密码。通常一次一密的同学不会再把自己的密码到这个网站上进行搜索了吧？
2.国内哪些网站不是明文密码。
我说出来你信么？再说，配合1，这个问题重要么？一次一密，经常修改才是王道，长度和频率看这篇文章《密码管理规范》。另外，现在记得去公布出来的密码表里面搜一下自己的密码。
3.一次一密就安全了么？
差了远了去了。你有没有在别人机器上登录的经历？你可以信任他么？你自己家里装的一堆插件你都相信么？你确定他们对你的银行密码没有兴趣？你要知道，银行开发安全插件的人和做恶意插件的人是同一个圈子的人——不会攻击就不能防范么。而且我们阴谋论一点说，你就确定这些软件商没有接到上级指令要求加入后门？现在你还敢在自己家里的机器上装中国软件么？QQ，迅雷，这些都算大软件，看着的人比较多。你自己可以搜他们抓你行为上传的文章——用谷歌搜。其他小站点的各种软件呢？你装了多少？
4.还有哪些比较低级的情况？
当年，有一个网站，提供一个功能。你可以在他的网站上直接登录其他邮箱。相信我，这可比这次的问题严重多了，那可是一收集一批阿。
5.为什么我以前都不知道？
要和你说我们有安全问题，你还用不用了？
再说我和很多人说起过这些问题，他们当年的态度都是——没关系，反正没人会对我的信息感兴趣的。我估计这次，还有不少人会说——没关系，反正我没有CSDN帐号/人人网上面的数据看到就看到咯。
很多人第一次知道安全问题的严重性，都是在他们丢了钱之后。往往都是莫名其妙，钱怎么丢的？
6.那银行呢？
银行还是相对安全的，不过你要确认银行有以下几个功能。登录失败警告功能。五次登录失败自动锁定账户，要隔天由本人解锁，解锁后最好强制更换密码。关闭网银和电话银行功能，不拿着本人身份证经过24小时以上申请不能打开。密码丢失需要一周以上的时间才允许重设。大额取款通知用户功能。
听上去很麻烦？通常来说，越麻烦的银行越安全。以上功能都有了，并且使用了，那么银行本身而言，还是比较安全的。
7.可是我要用网银。
那你用U盾，而且不要用水货版的。我07年选择招行的理由是，招行是唯一当时我觉得没有安全问题的银行。现在这个列表应该加入浦发，并成为首选——对linux友好而且不容易破解。但是不要用只有手机动态密码的模式。
有些U盾就是密码文件隐秘的放入的一个U盘，这种U盾我都可以复制出一堆来。用上这种U盾，最多满足你自己的心理因素。
而且，更好的方法是对信用卡申请网银，而银行卡关闭（如果银行支持的话）。这样的话损失最大不超过一张信用卡可用额度，我目前的信用卡而言，最多一次损失几千——总好过几万的学费吧。同类的思路可以选择支付宝，你一次打个1000进去可以用一阵，丢了只有这1000。
8.你知道U盾的正确用法么？
U盾应该在需要的时候才插上去，用完立刻拔出。虽然说不像拆炸弹，不过还是插入时间越短越好。
因为很偶尔的情况下，入侵者刚好在看你的电脑。发现U盾后，可以指挥你完成登录的网银系统进行交易。但是网银交易必须以U盾为基础，拔掉他们就干不了坏事了。
9.为什么手机不是安全设备。
手机安全是相对的，只能说比电脑安全。你以为手机就安全？首先，智能机上面已经满足了恶意软件存在的基础。例如小米——虽然我很喜欢他——你确定雷布斯没有在小米里面加入后门，截取你的密码再偷偷转发？现在没有——以后呢？同样，你确定你信得过苹果？将来苹果也不会出现安全漏洞？
即使退一步说，你的手机很安全。来，把手机给我，不要看它，然后告诉我，手机里有多少软件可以读取你的本机信息，有多少可以读取短信？即使是完全安全的系统，我只要写个小游戏，号称因为需要短信分享，需要操作你的短信。你会怀疑么？我趁着你不注意，读取你的手机，和泄露出来的卡号-手机信息交叉比对。对你的卡号申请动态密码，然后让我的程序偷偷的拦下来短信，不让你知道，发送到服务器端。你是不是丢钱丢的莫名其妙？
相信这条写到这里，九成九的用智能机的朋友已经满脸汗了——妈的这些程序能读取我的银行卡动态密码？技术上说，真可以。
普通手机用户也别高兴，我没记错的话，GSM协议已经被破解了。就是说，我可以在你旁边拿个设备直接接受你能收到的短信。这TMD叫安全设备？
10.那你说的keepass？
这东西能在手机和电脑上运行，就肯定不安全。数据文件放在硬盘上的时候没问题，即使入侵者拿到也没办法。但是你输入密钥的时候有keylogger就完蛋了。
所以我只在linux和android上用，虽然android不安全，但是目前我还不知道有keylogger。
11.妈的，我还有什么安全的。
这个真没有，RMS说过，安全是个笑话。让用户来完成安全更是笑话中的笑话。当然，没有用户的安全意识，银行/网站再努力也没用。但是本质上说，应当以侵犯隐私去起诉泄密单位，而且应该打下来是巨额赔偿。
然后这个事情就会变成，各家单位纷纷表示，我们不对免费用户的信息安全负责，并且推出免责条款。然后又是扯不清的糊涂帐——如同我们今天的EULA一样。
只是在景德镇，你连操作第一步的机会都没有。还是用脚投票，放弃一些实在不安全的公司吧。例如业界很知名的某个做恶意软件出身的公司，还有某个买了这个公司的前身的大搜索软件商。某个以动物作为Logo的公司，还有被国家大哥曝光多次的某家公司。凡是业界已经臭了名声的，最好都别用。
12.日子还过不过了？
淡定，我明天还会写一篇，你要注意的东西。虽然不说一定安全，不过普通用用问题不大的。</description>
    </item>
    
    <item>
      <title>密码为什么明文存放</title>
      <link>//blog.shell909090.org/blog/archives/2032/</link>
      <pubDate>Thu, 22 Dec 2011 11:02:49 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2032/</guid>
      <description>很早就写过一篇blog，说到过，你的密码应当一次一密，至少某些密码泄露时不至于波及太广。结果这次CSDN不幸中枪。我不去讨论多少人急急忙忙修改密码，多少人数据泄露，单说说为什么很多时候密码是明文存放的。
就我有记忆以来，我写应用就从来没有明文存放过密码。最起先是md5方式存放。md5可以让你找到hash值，有的时候也会被用于穷举。但是无论如何，md5密码本身比明文安全很多。后来改成了challenge-response验证模式，也是用md5做的hash后进行c-r的。再后来，md5的碰撞冲突的论文出来，后面用的多数都是sha256了。从头到脚，我就没做过密码明文存放，并且，我认为这是正常程序员最起码的修养。（当然，明文存放的代码不是没有，不过那是调试模式）
但是现在我所知，很多系统的身份验证都是密码明文存放的，为什么？其实我不大理解。不过有时候问起，有些人和我说了几个我觉得不是搪塞的理由，现在抄录如下，告大家知。
1.不用明文密码没法应付检查。大家知道互联网审查，有时往往会一个电话过来，要XX用户的密码。如果你没法给出，上头就认为你不配合，事情各种难搞。作为审查机构的老板，当然没必要知道明文密码的危害。他们只知道，我要密码，为什么不行。所以，悲崔的程序员们就往往会得到一条死命令，保存明文密码。
2.压根不知道明文密码有什么问题。中国的互联网有太多的没基础的新人，从石头的缝隙中顽强的生长出来。这不是坏事，坏事的是这些人往往会在一些基础问题上出现奇怪的毛病。例如有些程序员，写程序很快，但是居然从来不知道密码明文存放会导致什么问题。更神奇的是，这些人中，有一家银行&amp;hellip;
3.自信暴棚的混帐。有些人的自信总比别人强，而且强在莫名其妙的地方。例如：我的服务器肯定是没问题的，所以我的密码一定要明文存放。如果不，就是质疑我的技术。
实话说，这种人真是少数中的少数。
4.遗留系统。很多系统设计的时候因为某个其他理由，使用了明文密码。等后来这个理由不存在了，密码系统升级成了一个困难。因为密码系统太重要了，所以在没有太大利益的情况下，总是倾向于不修改系统。但是有什么足够利益来推动系统修改呢？用户安全问题在发现前不是一个问题——好比这次的CSDN，不是被暴出来的话就根本不会被当作一个问题。系统的管理者，每个人都没有足够的动力去修改系统。
5.世界的阴暗角落。有的时候，程序员/老板明文存放的理由，是为了方便盗窃用户其他网站资料。例如我所知的某钓鱼案例，你注册网站，就提供很多免费服务，网站看起来也很靠谱——除了后来突然爆出这家网站其实暗地中用你的生日/密码猜解信用卡/银行卡密码，大家才突然发现，这家网站其实根本没有在美国注册，而是一个听都没听说过的国家。
而且很多网站提供从其他网站导入之类的功能，更加的危险。以前经常爆出twitter密码被窃取，主要就是因为OAuth开放以前，twitter上的第三方应用需要提供原生密码，导致很多小应用的目的其实就是收集密码&amp;hellip;
6.为了给用户提供方便。这个理由和上一个很类似，不过不是为了某些险恶的目的。而是客户经常要求——为什么我不能做XX事，为什么我不能blahblah。好吧，为了让你能，我们就必须保存明文密码。
明文密码的保存原因很多，不过结论都是一样的。在任何网站/服务上，你绝对不能使用同一个密码，零级密码除外。尤其请注意，不要在两家银行使用同样的银行卡密码/网银密码，原因不说。
从未来进化的角度说，密码的未来进化趋势是核心授权体系。就是你要向某个网站验证身份，只需要向身份验证商验证，剩下自动完成。现在的openid就是一种解决方案。密码都没了，还谈什么泄露呢？同时，实体交互和授权的精细划分也是一个趋势。某个网站访问别的网站的数据的时候，会形成一个访问令牌。这个令牌对需要访问的内容详细写明，并且需要用户授权。OAuth就是这个趋势的代表。另外一个趋势是利用某个足够安全的设备作为以上两者的终端载体。目前这个设备用的是手机，可是——手机不是一个足够安全的设备。也许这会是下一个XX门的隐患吧。
参考：《密码管理规范》</description>
    </item>
    
    <item>
      <title>Py 有什么缺点?!</title>
      <link>//blog.shell909090.org/blog/archives/2029/</link>
      <pubDate>Wed, 21 Dec 2011 22:06:20 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2029/</guid>
      <description>在 2011年12月21日 下午2:24，Zoom.Quiet 写道： &amp;gt;
在昨天内部分享交流中,俺回顾了 PyCon2011China 中透露出的 Py
最新使用/发展和体验; &amp;gt; 最后有同学问: &amp;gt; Python 有什么缺点!? &amp;gt;
直接HOLD 住了俺的思路&amp;hellip; &amp;gt; - 是也乎!? &amp;gt; -
世界上没有完美的语言 &amp;gt; - Python 相比各种开发语言也有缺点,当然的!
可是,是什么呢?! &amp;gt; &amp;gt; - 没有 {} ? &amp;gt; - 不支持多CPU ? &amp;gt;
大家在学习使用过程中,对 Python 有什么失望的地方?! &amp;gt; - 兼听则明
现在不满意的,就是我们努力的方向.. &amp;gt; &amp;gt; PS: &amp;gt; - 俺现场憋出的回答是: &amp;gt; - 由于 Py
历史上积累的好用模块太多，会导致开发人员更加懒惰，不思进取，不论什么都可以直接搜出可用的现成模块来!
&amp;ndash; &amp;gt; 人生苦短, Pythonic!
冗余不做,日子甭过!备份不做,十恶不赦! &amp;gt; 俺:
http://about.me/zoom.quiet &amp;gt; 文字协议:
http://creativecommons.org/licenses/by-sa/2.5/cn/ &amp;gt; &amp;gt; &amp;ndash; &amp;gt;</description>
    </item>
    
    <item>
      <title>小米手机入手体验</title>
      <link>//blog.shell909090.org/blog/archives/2026/</link>
      <pubDate>Wed, 21 Dec 2011 09:48:05 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2026/</guid>
      <description>很好很强大
LTN和我说的时候，开头用的词就是，我的小米不打算卖你了。既然前面有“我的”两字，可见东西差不到哪里去的。入手之后感觉很好，起码比g2强多了(233)。我把一些直观体验说一下吧。
手感不错，性能优异 机器的手感沉实，屏幕贴上膜后手感流畅，g2上的光膜也很滑，但是偶尔沾水就阻力大了。小米的膜很少出现这种现象，而且触感很灵敏——当然，太灵敏了也是个问题，经常手不小心碰到返回键，然后程序就没了。
程序滑动很流畅，不愧是双核的。内存足够大，ROM也够了。我完全不折腾app2sd之类的问题，也不管内存回收，每个程序都跑的很流畅。这种表现让人用着很省心。
周边齐全 我到小米的官网上，看到了后盖，保护壳，贴膜，背贴，耳机，数据卡的官方销售。虽然和小米2000元的价位比，这些周边并不便宜，但是他们很方便。作为智能机爱好者，往往会买一些国外的水货机，这时你就知道我在说什么了。往往表面膜坏了，只能买第三方的膜，偶尔尺寸还不匹配。还有的时候线控坏了，买一个很贵，还不知道好不好用，有时候还没地方买。后盖摔坏了，也没地方配，只能去店里花大价钱修。这些问题，每个都不大，但是解决起来很麻烦，不解决很恶心。
一些问题 屏幕偶尔会卡死，大约三秒后恢复。猜测是双核cpu全部耗尽，导致失去响应。更进一步猜测，还可能内存耗尽——虽然看起来不大可能。
原配膜为了保证使用，尺寸精度相当精确，只要错一点，就没法贴上去。我自己贴了半个小时，结果满脸青春痘。没办法，只能出钱找了个专业人士。其实卖的时候，完全可以让客户选择贴好了发出来。
ROM版本控制的隐患 在一周的周期上，说这个并不合适。不过我入手后，ROM自动升级。然后就出现了有时突然没有信号的问题，只能重启。
我肯定这个问题不是真的没信号了。将手机切入飞行模式，返回后有一瞬间信号是恢复的，过三秒左右信号就没了。而且手机状态中有信号数据，但是手机打不通。这个问题反复出现，经常是在某处没有信号，重新恢复信号后就出bug，死活保持无信号状态。
按照我前一个手机的经验(G2)，这个往往和手机的ROM或者基带有关。我前一个手机的所有ROM中，有两个有这个问题的，有两个没有。而按照网络上一个帖子的说法，楼主在降级后问题也消失。反复印证下来，推测很可能是因为最新升级的ROM有这个问题，而我升级后就出现了问题。
这个属于ROM版本控制和测试的不严密，在一周不到的时间内我无法确认这点。但是我希望不是，因为一旦是ROM版本控制问题，将来后续问题还会层出不穷。个个都是莫名其妙的出现，没有精力一个个的跟。</description>
    </item>
    
    <item>
      <title>某日的一点小事</title>
      <link>//blog.shell909090.org/blog/archives/2024/</link>
      <pubDate>Tue, 20 Dec 2011 10:12:29 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2024/</guid>
      <description>三四年前，尚在前一家公司上班。晚上加班到9点，坐9点半的末班车回家。从漕杨路开出没一站，还没到中潭路，我看到旁边有个MM，打扮入时脸庞明丽。奇怪的是，晚班车上人不多，座位都有空，她却不坐，只是在门口站着。晚上灯不好，看不出什么表情。再过一站，到了镇平路，这MM要下车了。迈开两步，不知道怎么回事，身子一软直接摔了下去。我当时就蒙了，什么情况？
开始我也没有反应过来，只当是MM一个步子不稳摔在地上，等到MM摔到了地上，一动不动，才发现情况好像不对。晚上加班，身无长物，对着一个MM也不怕抢劫。何况车上人也不少，又是封闭站台内。我当时一没结婚二没女友，多少还有点英雄救美的情节。刚刚打算去扶，MM却在地上抽了起来。这一下又把我吓了一跳，迈出去的步子也缩了回来。一个MM倒在地上抽搐，这——是什么情况？
那时已经知道了彭宇案件，车撞上老人是不敢扶的。可是事发突然，脑子到也没转到这方面去。反倒是在为什么抽搐上，我心存疑惑。是癫痫发作？有些外伤性癫痫会在年轻人身上发作，症状的却包括抽搐。还是毒品反应？毒品反正中好像没包括急性抽搐的。药物中毒？记得一氧化碳中毒或者氰酸化合物中毒都有抽搐反应。还是疾病？狂犬病和病毒性脑炎也有急性抽搐反应。大家别笑，在步子迈出去再收回来的一瞬，我真的想了数种急性抽搐的可能。想到癫痫，氰酸化合物，狂犬病，病毒性脑炎，这些词在脑海里盘旋。别的感觉没有，净感到害怕了，背上凉嗖嗖的。
然后，下面一个小女孩，抱住了倒下去的MM往外拖。我也不知道这个小女孩多大，我在看女性年龄上向来没有什么眼光，一倍左右的差距是很正常的。大概猜猜，最小不小于10岁，大的话，我知道某些30多岁的MM还是能冒充10岁小女孩的。不过身材较小毋庸置疑，刚刚倒下的MM个头不算大，小女孩却拖不动。我想想，是福不是祸，是祸躲不过。走上去，和小女孩换了个位置。因为还是害怕，也为了避嫌，没敢抱MM，直接从背后穿过腋下，抓起MM的两只上臂往外拖了一把，小女孩抬了一把脚，旁边也有个阿姨来托了一把。最后我们把这个MM抬出了车厢。
然后，就是比较让我放松的事情了。在站台上把MM放下，站台工作人员就走了过来。估计是刚刚看到了情况，和列车司机打了个招呼。MM倒下的位置正好在门上，要是关门，虽然不至于伤人，但也不是很恰当。工作人员看了看情况，一个小女孩，一个胖子（那时候还没减肥），一个50多岁的阿姨，把一个MM拖出来，看上去也不像是偷东西的样子（主要是小女孩衣着干净整齐，像是邻家小妹去补习班的样子，我也是一副死程序员的样子，还带着上班用的电脑包——他当然不知道包里面是空的，上海阿姨就更不说了，地球人已经不能阻止他们了），就没多留心我们，去查看这个MM的情况。小女孩和阿姨还是不放心的样子，继续陪着。我上班上累了，加上也怕麻烦，就回到了车上。不过一分钟，车就关门继续行驶了。
车门一关，事情抵定，中国人天生的好奇心和凑热闹情节就冒出来了。我想，顶好刚刚顺手去看看热闹，那个MM到底为什么倒下呢？但是转念细想，要是撞上麻烦，无论是惹上官司还是染上疾病，都很麻烦的样子。加上今天加班也累了，明天过来还要继续。也就随他去了。
这事情我一直没想起来，直到小悦悦的事情发生后，我才想起。在我过去的日子里，还有这么桩事情。也不知道那个MM是什么情况，怎么样了。小女孩为什么敢去帮忙，现在好不好。不过，这至少不是一个悲剧，无论从哪个角度来说。</description>
    </item>
    
    <item>
      <title>linux tty部分源码阅读</title>
      <link>//blog.shell909090.org/blog/archives/2020/</link>
      <pubDate>Mon, 19 Dec 2011 16:08:11 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2020/</guid>
      <description>1.事情从file开始 file的定义在include/linux/fs.h中，其中有两个field，一个叫file_operations
*f_op，一个叫void *private_data。file_operations定义了所有file能够进行的操作，在tty这个层面而言，drivers/tty/tty_io.c能看到有个叫做file_operations tty_fops的东西，下面有个叫console_fops的东西。两者区别不大，就是write函数进行了一下包装而已。从这里可以看出，系统将某个file的读写操作，转包给了tty_io.c这个文件。这个转包的手法非常类似虚函数。如果将tty_io.c里面的函数看作一个类的所有成员，那么tty_fops就是虚函数表，而f_op就是虚函数指针_v_ptr。
2.tty_io的二转包 tty_io做了什么？他直接转包给了ldisc来处理这个事情。从tty_struct的结构我们能够看到，有这么一个field，tty_ldisc *ldisc。而tty_ldisc.h文件里面，我们能看到这个结构又有这么一个成员，tty_ldisc_ops *ops。同样手法，第二次使用。目标是tty/下面很多n_开始的文件，例如n_gsm，估计是处理手机的。我们的目标看起来像是n_tty.c中的tty_ldisc_ops tty_ldisc_N_TTY对象。
3.n_tty做了些什么 n_tty也做了很多转包，例如对于n_tty_write而言，他使用了tty-&amp;gt;ops-&amp;gt;write这个函数。我们从struct tty_struct中可以看到这个field，tty_operations *ops。目标是谁？看起来像是pty.c，他里面有很多定义，例如tty_operations master_pty_ops_bsd，tty_operations slave_pty_ops_bsd，tty_operations ptm_unix98_ops，tty_operations pty_unix98_ops。
4.pty总不转包了吧 以write而言，pty.c做的很简单，就是tty_insert_flip_string而已。不过之后调用了tty_flip_buffer_push，这个又会调用flush_to_ldisc，这个里面会调用ldisc-&amp;gt;ops。从上文中我们知道，这个函数的实体在n_tty.c的n_tty_receive_buf。
5.n_tty_receive_buf做了些什么 这个函数对每个字符依次处理，如果是普通字符，就调用n_tty_receive_char。这个函数会调用put_tty_queue，经过两次转手，最终，这个字符进入了read_buf。这是一个循环队列。</description>
    </item>
    
    <item>
      <title>android几个常识</title>
      <link>//blog.shell909090.org/blog/archives/2018/</link>
      <pubDate>Fri, 16 Dec 2011 10:41:28 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2018/</guid>
      <description>内存问题 首先，总内存量需要被各种CPU划出部分使用，剩余才是系统可用内存。这个概念差不多相当于电脑上的共享显存，系统对划走的内存是没有管理能力的，因此在/proc/meminfo中找不到这部分内存。这部分内存既不能优化也不能使用，因此其实是不可使用内存。厂家出厂内存（标称内存）和可使用内存一定存在差，具体多少看各种机型。htcg2是288m标称191m可用，p81hd是512m标称288m可用。
可用内存是linux kernel能管理的内存，这部分再会被划出一些供系统使用/服务使用/常驻程序使用。这部分是可以优化的，少编译一些ko模块，少开一些服务，少一些常驻程序，内存就会节约一点。
最后，剩下来的内存才是程序实际能用的量，htcg2和p81hd都在100-150M上下。不过程序退出时，内存并不交还给系统。而是当系统内存不足时(memory threshold，通常24m)，由系统分析目前内存中，使用频率最少的一块，然后去释放这个内存。通常而言，你在系统中开了三五个程序，然后按Home退出到桌面，再进入时程序还处于退出当时所处的状态，这就是因为还在内存中没有释放的缘故。而当你开的程序比较多，例如十多个程序，也是由Home退出到桌面，再进入最老的一个程序时，程序已经处于初始的状态。这就是因为内存不足，系统帮你杀了这个程序的缘故。如果用Back键退出，程序会直接关闭，内存释放，这个无关系统是否有空余内存。
所以，对android而言，内存只代表两件事情。一个是所能运行的最大的程序。如果总内存不足，一些一次性需要内存比较大的程序就会无法运行，特征是一运行就退出，系统没有提示错误。另一个是同时在内存中不关闭的程序的数量。内存越大，在机器中就可以保持越多的程序处于打开状态。对于新打开程序（此时内存请求较多），或者程序突然申请大量内存，系统就开始释放其他程序，此时系统会稍慢。但是在考虑是否需要使用内存优化软件的时候，不妨这么想。内存优化软件运行的时间，一般比直接kill进程还长呢。
如果觉得自己内存不足，想要优化的话，需要非常注意系统中的服务。系统中一般会有很多服务在运行，很多都是消息通知类的，例如fackbook的新消息，twitter的新消息通知，google plus的消息通知，还有微信，等等。这些消息通知每个大概都是5-10m内存不等。有的时候，如果你不需要消息通知，关闭消息通知可以有效关闭服务，例如ubersocial的消息通知是可以关闭的，而google plus和facebook就没有这个选项。如果你觉得这两个的消息浪费内存，那只有卸载他们。至于微信，你可以使用程序中的退出功能关闭微信。一旦关闭，通知服务会自动关闭。
内核模块问题 一般而言，系统内核会编译进很多东西，但是也有不少东西是不编译进去的。这些可以动态载入的东西，就叫内核模块。对android而言，其实普通用户没必要在意到底机器内的某个模块是模块形式还是编译进入了内核，所以下面统称内核功能。无论是模块还是内核形态，只要能用，就称这个功能打开。
内核常用的几个功能有，cifs，tun。
cifs是用于smb挂载的内核模块，如果内核中有这个东西，你就可以把你的某个samba服务器当作机器本地的sd卡来用。samba服务器可能听起来很陌生，不过windows文件共享就是一种samba服务器。也就是说，拥有cifs，可以将windows下面的文件当作机器的本地sd卡来随意读写。这对于家庭内使用android是个很方便的事情。
不过cifs现在用的比较少，因为ES文件管理器有个功能，可以把远程文件转换成一个http流。视频之类可以以http流模式工作的文件就可以直接远程打开。
tun是一个很重要的内核模块，因为openvpn/anyvpn都需要使用这个东西来工作。没有tun模块，这两个程序将无法工作。
存储形态问题 任何一个android设备都一定会搭配一块存储。这块存储会被切分为多个区域，模拟成一个硬盘的多个分区来使用。我们来看一个内核的启动参数，以下数据来自我的P81HD。
console=ttyS1,115200n8n androidboot.console=ttyS1 init=/init initrd=0x62000000,0x800000 mtdparts=rk29xxnand:0x00002000@0x00002000(misc),0x00004000@0x00004000(kernel),0x00008000@0x00008000(boot),0x00008000@0x00010000(recovery),0x00078000@0x00018000(backup),0x0003a000@0x00090000(cache),0x00100000@0x000ca000(userdata),0x00002000@0x001ca000(kpanic),0x00080000@0x001cc000(system),-@0x0024c000(user) bootver=2011-08-05\#2.06 firmware\_ver=0.2.3 能明显看出，存储使用的是nand，编译是针对rk29xx的，所以模块叫做rk29xxnand。mtdparts里面规定了rk29xxnand的分区特性，每组三个数据，第一个是大小，第二个是起始位置，第三个是分区名。其中userdata实际大小256m，表上面写的是1m，因此1相当于256字节。下面可以再看一下mount表。
/dev/block/mtdblock8 on /system type ext3 (ro,noatime,nodiratime,data=ordered) /dev/block/mtdblock6 on /data type ext3 (rw,nosuid,nodev,noatime,nodiratime,errors=continue,data=ordered) /dev/block/mtdblock5 on /cache type ext3 (rw,nosuid,nodev,noatime,nodiratime,errors=continue,data=ordered) 可以看出存储编号是从0开始的。分区后，存储的内容即是以ext3格式存储。
系统组织问题 android的系统组织很有意思，并不是按照FHS来组织的，却部分兼容于FHS。
android最基础的一个分区是system，这个分区被mount到/system。/etc一般都是直接link到了/system/etc下面，由此可见这个分区的重要性。这个分区一般存放所有系统内置的，不能更改的程序和数据。例如系统的内置app，framework，java基础库，so库，系统程序，等等。一般的刷机包里面，都是以zip格式打包了system的新内容。一旦这个内容被替换，系统就有了新特性。一般一个system的大小是200m-500m，不会全部用满，会留出一些方便后续的升级改造。
data里面是系统内置的存储区域，这个区域常常被误叫为手机内存。实际上内存是ram，这块类似于rom。一般是500m上下，程序安装后就是装到了这个，包括数据也保存在这里。如果这个区域不足，系统就不能安装新程序。因此有些人想出了app2sd的把戏，说白了，就是通过bind，把sd卡上的一块区域映射到这个区域的某个目录下，使得某个app的数据可以存储到sd卡上。当然，这个能够转移过去的只限于数据，代码好像是不能转移的。而且，mount需要时间，sd的读取一般也比rom更加慢和麻烦。因此app2sd后，系统启动速度会变慢，程序运行也会变慢。
一个更好的扩充data的方案（当然，也更危险）是，通过修改刷机包，将上面kernel参数改变掉，并且重新分区nand。这样，data区的大小可以增加到1g左右，而user区的大小会减小相应的量。这样处理后，手机上可以安装更多的程序，而且没有什么后遗症。
cache里面是缓存，这个直观感受并不多，也很少用满，所以不解释。程序里面一般会列出，使用多少缓存，就是指的这个区域。
权限管理问题 android手机的权限很有意思。和macbook有点类似，但不完全相同。
android手机的每个程序，都有一个权限和他相关。规定的事情可以做，不规定的不能做。估计是给程序新建了一个身份，可以做的事情做成组，然后对身份加组。但是其中，有一类特殊的权限，正常情况下是任何程序都无法申请的，即是sid权限。学过linux的应当知道，就是可以切换成root身份的权限。
android的root，基本方法都是通过某种方法将/system改成可读写，然后用自己做的su替换/system/bin/su文件。自己做的程序，会以一些方法验证某个程序是否具有su的权限（一般是弹出对话框确认），然后让他们可以拥有最高权限。可以su的程序，他们的权限表就没有意义了。
adhoc问题 adhoc是一种常见的wifi形态，特征是没有一个ap（常见的路由器即是一种ap），全部由普通的客户端电脑来进行网络连接。
android的wpa_supplicant文件做过一些修改，过滤了adhoc网络的essid。所以，如果你使用adhoc模式共享了网络，你的android设备将无法使用。
但是android是可以做出adhoc的。这是很悖论的一个事情，android自己做出的网络分享，另一台android是无法使用的。</description>
    </item>
    
    <item>
      <title>从python-support改为dh_python2的方法</title>
      <link>//blog.shell909090.org/blog/archives/2016/</link>
      <pubDate>Thu, 15 Dec 2011 11:00:46 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2016/</guid>
      <description>在debian/rules里面，将这个：
%: dh $@ 改为这个：
%: dh $@ --with python2 其余看这里。</description>
    </item>
    
    <item>
      <title>家庭网关，三网融合</title>
      <link>//blog.shell909090.org/blog/archives/2012/</link>
      <pubDate>Mon, 12 Dec 2011 10:24:48 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2012/</guid>
      <description>Sunny Sunny&amp;laquo;sunnyboyme@gmail.com&amp;raquo;:
要做一个关于home gateway的论文，讨论不同服务下的 Service Level Agreement （SLA），带宽，延时，数据包 schedule 策略 等等。不知大家有什么好的 想法/Question/Hypothesis，或者 以往的使用体验。
希望来个 头脑风暴，呵呵 ～～
shell:
我好像全都部署了，就是不整那么多名词而已，不知道你要干啥。
出口是光纤，20M下行/1M上行。路由器是dir-825，上面部署iptables arptables 还有tc。可以控制端口进出，还有控制机器的访问权。tc负责控制QoS。
后面主要是两台机器，一台atom，上面放2T硬盘，作为NAS/开发服务器/电视的长期支撑设备/家里的定时通知机器/闹钟/将来准备接个摄像头做更好玩的应用。
另一台amd x955 8G，两个人用。一个DVI连接显示器，一个HDMI连接电视，可以看看高清电影，开发也很舒服，一般开虚拟机干各种应用。
其余设备都走了网线或者无线，最近考虑装一个网络电话。
电视是三星的，上面集成了一个简单的android，就是app market是专用的，里面没有vnc/rdp客户端，否则我连atom都不需要登录就可以直接访问各种服务器了，更方便。
电话，电视，网络，全部走在了ethernet上面，不知道算不算三网融合。不过我吐槽过一篇文章，这年头不知道要电视和电话干吗用。给我视频网站和手机就能很high了。
在 11-12-11，Sunny Sunny&amp;laquo;sunnyboyme@gmail.com&amp;raquo; 写道：
哇咔咔,不错不错,可以拿来当模板用~~
不知道你的电视和电话走网路时候用的是什么协议?或者说,用的哪家公司的服务?
电视走网络(IPTV?)会带来巨大流量,相比普通电视/数字电视有什么优势?
在 2011年12月12日 上午9:16，Stone Zhang&amp;laquo;kelxzhang@gmail.com&amp;raquo;写道：
其实，我感觉三网融合现在最大的问题是，在三层没有连上的时候，如果可以打电话。
就是说，在断网时（就是物理连上，但拿不到IP
）普通用户如何能够打电话。 还是就是收费问题。
何必走专用协议呢？现在中国没有一家服务是大到可以称为标准协议的。
电话我还在考虑，用SIP还是skype。前者有很多现成的网关，也很容易和普通电话通话。后者看样子也不差。反正我手头有atom服务器，用skype长期开机也是没什么问题的。
电视更简单，直接上youku/tudou/verycd搜索就好。其实你本心的想一想，我们到底是为了解决问题而发明标准还是为了制造问题而发明标准？使用目前已经存在的服务能解决需求就好了。这些点播唯一的缺陷是还缺少一些连续播放的视频DJ/选材制作，我在吃饭的时候看节目往往还要自己挑。所以目前我吃饭的时候都在看电影，atom机器一天能下N部高清下来，就是我怕现在的导演们没那么多时间去拍。。。
视频走网络有什么好处？论广播能力，格式兼容性，不如RF。论节目，也比电视台差了很多。但是电视走网络胜在制式可以几乎无限上升，目前我看1024x768已经觉得不够清楚了。你觉得目前的IPTV，就算加上数字电视机顶盒，能够到多少分辨率？
至于电话问题，断网是极端情况。虽然网络比电话线不稳定，但是也不是天天断的。有网络用网络，没网络用手机。android加上sipdroid也可以当作sip客户端用。如果手机都走不了，那问题就不在三网融合的设计上了。
你可以想想，网络电话到底有什么优势？电话到底干吗用的？在我们业务类型大幅变化的时代，讨论如何将上个世纪的业务完全不差的照搬到网络时代真的有帮助么？我们真的需要在网络时代，等待一个前向兼容的标准么？实话说，这是中老年业务。我家里没有普通电话，外婆和岳母说要装一个，我和老婆都没什么兴趣。因为除了多交钱，没有任何帮助。要找我们，手机总能找到。手机找不到，电话也找不到。
传统认为，使用可以容忍的语音标准，提供持续而稳定的服务是电话服务的第一要素。实话说，在网络时代，这个可能要改为低成本，高可用性。网络（尤其是中国网络）已经把我们训练的很有抵抗力，对无法服务的系统基本可以接受，只要这个系统大部分时候能跑通。让我选择十年保证故障在1小时以内的普通电话服务，我宁可选择一年保证故障在五小时以内的网络电话服务，只要这个电话服务可以：
1.大部分时候打的通，比移动/联通打不通的机会低。
2.便宜，我可以和远程一聊数小时，甚至干脆保持一两天不断线。
3.功能集成，例如视频电话？多人电话？
为什么不选择后者呢？我正在准备把老婆家里的设备做一下定制，让她的电脑可以很方便的视频保持和我服务器的连接。这样岳母可以通过她家里的电脑和我这里保持持续通讯几个小时，甚至可以一边吃饭一边聊天，双方还能互相可见——免费。我不觉得普通电话业务能够提供这种优势，更不提昂贵的话费。
另一个例子是我一个朋友，也在shlug里面。他十月去日本，带的是一台iTouch。在日本可以很容易的连上wifi，速度还很快。通过skype打电话回家，价格便宜服务稳定。如果是我，我更希望带一个3G设备，直接用当地的3G接入保持持续通讯。你觉得带传统手机出国然后办理套餐需要多少手续和多少钱？这是一个移动电话被网络服务比下去的例子。也许有人说中国的网络没这么好——好吧，看看五年前的网络，看看今天的，想想看五年后，这个论点还有没有优势。
同样，在网络时代抱着电视不放也将会是种无谋。目前网络视频还是替换不了普通电视，不过这天总会来的。</description>
    </item>
    
    <item>
      <title>吐槽招聘几件事</title>
      <link>//blog.shell909090.org/blog/archives/2010/</link>
      <pubDate>Fri, 09 Dec 2011 10:06:55 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2010/</guid>
      <description>海投海发，要件不全 这TMD是招聘/猎头/投简历中最我X的事情了，没有之一。凡是招聘不写公司名字，不写工作地点（跨城招聘的时候），职位不写工作要求或者工作范围，一概视为不靠谱。同理，凡是简历不写自己名字（别笑，真TM有），联系方式的（哥们，我找您得烧纸是不？），工作资历或者技术专长（您干嘛来了），也一概不理。
另外，我好像写过，原来面试过一姐们，两次！这姐们一看就是内向人，话都说不利索。干IT起码得有能耐把一件事情讲述清楚（好听不是要件，易懂也不是，清晰不歧义才是），也得善于听明白别人的问题。这话都说不利索的主，您就算来八次都一样。明显是海投的时候，压根不记得这公司自己是不是来过了。
别笑，php跑到python地界上捞人的，您也差不多。事情一着急就满世界散传单的，您还指望来啥人？
乱叫乱收，文不对题 任何一个事情，信任和合作是成功的基础。所以从现在HR市场的运作来看，这事情就成不了。三四个人办的小公司，敢宣传自己资金雄厚。一个才学了半年电脑的人，做一个项目挂一个，敢说自己被多家公司挖角。
这事情是怎么来的？貌似开始的时候，小公司不说资金雄厚就没人关注。简历上说才学了半年，做项目全挂了就找不到工作。反正工作这个事情又没人核实，就拼命往里面注水。结果市场上充斥着注水猪肉，你还没辙。技术手段在高端市场是有效的，低端就不用想了。高端市场的人，往往在一个领域里面投入了相当的心血。为了简历注水被臭掉名声是不合算的。但是低端市场的人，学三个月电脑，来这个市场插草标卖一番，卖得不动，隔天就转了行。我听说过最夸张的传说是一个程序员三个月后去做了厨师，当然，另一个人也差不多，一个前端MM三个月后开了甜品店。不过后者是真心喜欢，前者算啥？
所以，这事情博弈下来，劣币驱逐良币，市场上就充斥着无效的信息。到处都是资金雄厚的公司和技术强大的程序员，偏偏HR说招不到人，程序员说找不到工作。
描述绕弯弯，内行听门道 HR懂不懂技术，招聘上就看的出。拿好听的词乱堆的，肯定是外行。
网管不叫网管，叫网络工程师。杀毒不叫杀毒，叫系统安全管理。要加班不叫要加班，叫抗压性强。工资低不叫工资低，叫做合伙。小公司不叫小公司，叫创业团队。薪水能开多低开多低不叫薪资面谈，叫待遇从优。会不叫会，一律叫精通。
MD我出门看个招聘，创业团队寻求合伙网络工程师，要求抗压性强，精通系统安全，待遇从优。
你干吗不干脆直说小公司低价招聘几个肯加班的网管，会杀毒就成，薪资面谈。这招聘写的我还以为google传奇在中国开服了呢。
招聘不妨写的肯切点，有啥说啥。尤其是在论坛之类的可以互动交流的地方招聘，大家不都是傻瓜。
关键不是你有多少，而是你给我多少 有些公司，招聘上面动辄写公司有多少多少投资注入。实话说，这有什么关系呢？如果一家有钱的公司，开3000薪水。一家小公司，开4000，我觉得还是后者更有吸引力。倒闭？找工作也就是一两个月的事。我们按照3500一个月算，差值就是7000。做半年基本就持平了。小公司只要能干上一年，肯定比号称有钱的主来的实在。
同样，类似的问题也有招聘上面写我们有多少多少大牛。实话说，这个也不重要，我们的直属领导和工作同事是不是大牛才是关键。后者对自己有直接帮助，工作起来也开心。要是总架构是个大牛，但是同事都是一帮菜鸟，那大家一起辛苦。所以我写过一篇blog，为什么大牛都爱扎堆。</description>
    </item>
    
    <item>
      <title>python为什么叫好不叫座</title>
      <link>//blog.shell909090.org/blog/archives/2008/</link>
      <pubDate>Thu, 08 Dec 2011 10:15:31 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2008/</guid>
      <description>python的招聘，看似火爆，各家都在抢人，还抢不到。但是实际操作一下，发现实际上还是较好不叫座。八成以上的人去应聘，都找不到心仪的工作。当然这个原因很多，我只说我听闻的几个。
1.python的快速开发名气
这是中枪最多的原因，这个传说是从阿北开始的。想当年他一人做豆瓣，几个月就出活了。后来一帮做系统的一听这名声，都投靠了python，而且无一例外的都是django。他们的希望，就是超越阿北的传奇。一个人三个月出个系统，那我们找三个人，加班加班，一个月也能出个系统了。好，后来的事情大家都懂了。
当然这个故事纯属虚构，很多公司在计划上还是半年出系统的。但是实际执行上，老板要求能多快就多快，工资能多低多低。这种公司你指望他开多少薪水？15K？别傻了。偏偏python这东西学的贼快，有三个月就能出来混事了，你和他们比工资低，傻了吧。
这帮人也许接触过网络开发，也许没有，不过他们应当都没看过“人月传说”。即使没看过，傻子也应该想到，阿北当时的工作状态和水准，要给自己发工资该发多少？找一帮接触电脑都没满一年的人来搞人海战术，那铁定是找虐的。
2.在找第二主程
我和thomas说过一个观点，一家IT公司永远也不应当停止招聘，他们只有提高标准和降低标准两个情况而已。在公司里面缺人的时候，标准低一点。在不缺人的时候，标准高一点。一旦停止招聘，停止HR相关的工作，有些大牛刚好出来你就抢不到。
去这样的招聘是很容易被鄙视的，因为标准很高。他们也不担心招不到人，反正只是碰碰运气而已么。有一些大公司发招聘你去了什么消息都没有，就是这种情况。
所以，对一些已经成熟的团队，你还是认识一下里面的人，多接触多聊聊比较好。一方面可以学一些东西，另一方面搞清楚里面现在是缺人还是爆仓。也许一家靠谱的公司，本来处于爆仓状态。讨论决定做一个产品，一下子就缺人了呢。
3.其实我们在找披着python皮的其他工种
python用途很广，所以老耿说过，我们不招python程序员。他的本意大概是，你是个好程序员，又刚好会点python，那就是我们找的人。如果不会python，学一下就是我们找的人。很多公司在表达的时候，其实反了过来。他们要找一个sa，会一些python，能够写程序，于是HR的需求出炉就是——python程序员。系统程序员，抓取分析，报表统计，凡是需要你会一些python，但是主要是其他工作的时候，这其实都是一样的。他们找的是披着python皮的其他工种。
你要是个程序，去了一准被鄙视。</description>
    </item>
    
    <item>
      <title>啥叫智能</title>
      <link>//blog.shell909090.org/blog/archives/2006/</link>
      <pubDate>Wed, 07 Dec 2011 10:16:02 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2006/</guid>
      <description>这年头的营销人员老爱乱用术语，瞎整个词就在那里吹。据说这是个营销行业历史悠久的传统，当年圆珠笔就叫原子笔，配合原子弹吹了一把。这年头连化肥都用上了纳米科技——估计真相是生产化肥的机器的某个核心部件使用纳米材料来减少磨损。营销在那里乱吹，搞的普通用户晕呼呼的也就算了——不晕就没法骗钱，没钱技术人员也就没工资。偏偏很多技术人员也不靠谱，居然也跟风晕。
我问你们，如果你告诉一个人，红灯的时候停车，绿灯的时候开车。然后他照做了，这个人叫智能么？如果你写个操作手册，看到上面有红头文件下发，就组织传达精神，这叫智能么？如果你写个程序，依次判断几个地方是否有文件，如果发现就加载执行，这叫智能么？
如果这叫智能，那你的脑子就是个图灵等效机。
偏偏有人说，我的程序会智能判断你的系统类型，然后加载合适的组件。。。
什么叫智能？相对来说，贝叶斯，相似性判断这些东西更接近智能。程序员没有写过，给某某用户推荐什么。但是很神奇的，程序会告诉你——有人和你兴趣相似，什么什么是垃圾邮件。
区别在哪里？一个是程序员预设了逻辑，然后交由电脑执行。这种情况叫智能太过了点，叫自动差不多。而另一个是程序员没有预设逻辑，程序由行为数据中学习到了下面的行为，如果要把这个称为智能还是有道理的。</description>
    </item>
    
    <item>
      <title>拨号的几个简化</title>
      <link>//blog.shell909090.org/blog/archives/2004/</link>
      <pubDate>Tue, 06 Dec 2011 11:41:59 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2004/</guid>
      <description>1.pptp client
安装pptp-linux，使用pptpsetup，按照man来。使用pon configname启动，poff关闭，plog看日志。
2.3g网卡拨号
应当使用usb_modeswitch进行编码转换，然后用wvdial拨号。MF190而言，至少我这里modeswitch会自动转换的。后者直接编辑/etc/wvdial.conf，然后输入wvdial开始拨号。wvdial有个包装叫做gnome-ppp，依赖很少，在其他桌面也可以用。我还没有研究出来怎么玩。
附，MF190使用的usb_modeswitch配置（debian自带）:
######################################################## # ZTE devices DefaultVendor= 0x19d2 DefaultProduct= 0x2000 TargetVendor= 0x19d2 TargetProductList=&amp;quot;0001,0002,0015,0016,0017,0031,0037,0052,0055,0063,0064,0066,0091,0108,0117,0128,2002&amp;quot; MessageContent=&amp;quot;5553424312345678000000000000061e000000000000000000000000000000&amp;quot; MessageContent2=&amp;quot;5553424312345679000000000000061b000000020000000000000000000000&amp;quot; MessageContent3=&amp;quot;55534243123456702000000080000c85010101180101010101000000000000&amp;quot; NeedResponse=1 CheckSuccess=20 附，MF190可用的wvdial.conf:
[Dialer Defaults] Modem = /dev/ttyUSB2 Init1 = ATZ Init3 = ATE0V1 Init5 = ATS0=0 Init6 = AT+CGDCONT=1,&amp;quot;IP&amp;quot;,&amp;quot;uninet&amp;quot; Init7 = AT+CFUN=1 Modem Type = USB Modem Baud = 460800 New PPPD = yes ISDN = 0 Phone = *99# Password = any Username = any Stupid Mode = 1 3.</description>
    </item>
    
    <item>
      <title>python conf 2011无线组网总结和分享</title>
      <link>//blog.shell909090.org/blog/archives/2002/</link>
      <pubDate>Mon, 05 Dec 2011 10:44:38 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2002/</guid>
      <description>这次python conf 2011结束了，具体成败sting去总结。我主要负责网络部分，把网络部分的总结一下吧。总体来说，网络不算成功也不算失败。在现有条件下，资源没有都发挥出来。但是万幸的是，关键部分还没有掉链子。下面是具体总结。
1.没在场地里面拉好线并且实地测定过所有地点信号的不算部署完毕。
这次的会场平时不允许进入，只能在工作日去，所以只能在会议前一天跑现场。而且进入时没有长网线，墙壁上也没有网线接口。因此是会议前一天先根据具体环境完成了设定，支支下午去买了线，第二天早上部署的。这留下一个严重隐患，我把设备间当成了贵宾室，凭经验估计信号覆盖范围的时候出了错，信号没有覆盖到贵宾室，而且没有考虑门口。第一天的嘉宾和志愿者们，是否感觉信号像渣一样（尤其是杨毅涛）。其实这主要就是因为根本没有考虑到信号覆盖的问题所致的。
要解决这个问题，必须先知道会场结构，包括贵宾室，设备间，签到处等等重要但是部署时又不容易想起来的地方。然后估算需要多少个多强的AP才能覆盖。例如本次的贵宾室，最佳方案是拉40米网线到贵宾室，然后再架一个AP。会场往往没有线，需要自带网线。因此最好是有人知道会场大致结构（手绘亦可，但是标注一下承重墙），然后计算AP位置和网线长度，再去购买。或者直接买一箱网线，配上水晶头打线剪自己做。会议前至少一天去部署，用android测试每个点的信号强度，最好都达到-70db以上。完成后把电线和网线都用胶带封在地上，以防绊倒。
2.足够的AP和信号。
在估算AP和信号的时候，这次经验是，多一个天线，信号强10db。支支的三天线AP信号明显强于我的双天线AP。AP的信号是和距离的立方成反比的，一个AP保证20-30米的无阻挡会场是没问题的。但是每穿一道墙，信号就会下降大约20db。低于-70db就开始出现大量掉包了，-80db的时候tcp重传严重，导致基本无法使用。
一个AP可以接入的客户端是有限的，按照我看下来，大约在50上下（TP-LINK）。这个和事先估计一致。本来我想用6个AP，但是很难凑够这么多，而且带宽不足，就没借这么多。预定就是需要一些人没有设备或者接不上去的，否则就是所有人都不能顺利上网了。结果有一个AP在连接10个设备后就会崩溃，所以等于无法容纳用户。大部分用户都拥挤在同一个AP上，导致踢掉非常严重。会场峰值时刻，300人，有120个设备试图获得IP或者已经获得成功，但是AP在线只有20/50（AP1/AP2），即40%左右的设备被踢掉或者自动断开了Wifi（部分手机为了省电会发生这样的事情）。如果三个AP完好，120人在线刚刚好支撑的起来（20/50/50），但是这样的话连线设备可能还要多一些。
下次部署的时候，除了要考虑信号覆盖问题，还要考虑预留一些AP作为备用。因为会场AP都是民用过去支持，这些设备以前也没有做过大容量测试。我只能说TP-LINK的两台机器很给力，说到50就到50，多了就不能支撑，但是不死机。有台机器就频频死机，这样就需要备机更换。
另外，我们这次最高三个AP，因此分别设定为1/6/11频道就行了。如果AP还要多，请注意让同样频段的设备分到会场的远端。
3.世界真的很麻烦，有的时候有位置却没有电源。
这次电源还算给力，从墙上引出了不少拖线板，基本满足组委需求。至于普通听众就抱歉了，自带拖线板坐到边上的，互相交错给便携设备还能充个电。中间听众只有依靠地接。偏偏地接基本都拉给了组委的摄像机，周围一圈的人可以沾沾摄像机拖线板的光，其他人就只能相信电池续航了。
我们的AP3，第二天搬到了贵宾室那个方向。反正上面只能接不到10个人，给贵宾室小规模用用还可以。结果线只有30米，拉不到贵宾室。合适的位置又没有电源。只好委屈在后门口接了一下，把贵宾室的信号提高了不到10db。
据说有的会场更恶心，只有一两个电源接口。这种会场就必须带够插线板和移动设备来保证电力。
3.留出会议运营所需资源。
这次还算成功的一点，是为大会组委和志愿者/嘉宾保留了一路AP。大会的签到系统，嘉宾演讲都需要Wifi支持，为了让听众上网导致演讲失败就本末倒置了。为嘉宾保留的是AP1，上面还有一些比较活跃，或者着急使用网络的普通听众，一般大约20人左右，相对比较空。可是这个AP又不敢开放给听众使用，一使用就怕嘉宾没法演讲了。
wifi管理者比较怕的问题，主要就是有人使用wifi下载比较大的内容。因此开始的时候，会议需要网络的时候，我都用平板监控网络使用状况。如果有人正在使用大流量，就准备踢人。幸好，大家都很安分（或者是AP上不来）。后来也就放松警惕了，结果老外演讲的时候延迟很厉害，我差点就跑去拔掉AP2的电源了。这会断开所有人的网络，但是演讲者的使用就通畅了。
按照雨苍说的，组委wifi组一个重要任务往往就是封锁各个debian/ubuntu镜像的下载。我们这次没有出现这么恶劣的问题，谢天谢地。
4.会场的网络使用有非常强的峰值效应
这次会议只有2M带宽，因此我一直担心不够。后来开始看看还不错。但是休息的时候一直接到wifi很慢的投诉，空下来一直测不出。我第二天休息的时候去测试了一下，我的天，带宽全满，延时超高。说明演讲者水准很不错，大家专心听会，不怎么用网络。一休息，得，网络不够了。
这个没法解决，要解决只有增加带宽，或者在不休息的时候再使用一些比较耗费流量的业务。一个缓解的办法是使用qos系统，但是这次dir-825没有前往会场，所以没机会调试qos系统。
相对来说，路由器的NAT让我很放心。TP-LINK普通路由器的NAT在支撑80-90人的极限在线的时候仍然很稳健，速度不快是带宽问题，路由器没有崩溃就是万幸。
5.根据具体情况配置。
WEP比较节约资源，所以我们开始配置的是WEP信号。但是测试下来，苹果系统对WEP的支持非常差，基本接不上去。所以就不要节约了，使用WPA/WPA2。
运营商的接入情况比较多变，而且很难控制。这次运营商给我们的是一个内网IP，192.168.1.2。他们已经有了一个路由器在前面。我使用了双重NAT方案，而且避开192.168.1.x网段，来避免修改它们的路由器（我们无权控制）。
这次我们使用的是192.168.0.1/24网段，三台AP的连接模式是一主多桥。一个主router负责DHCP和NAT，其余的全部当单纯的AP使用。从1到3分别分配0.1-3的IP，2/3的DHCP关闭，1的DHCP从20开始分配起，直到254，共计最高容纳234人在线。20以前的IP让组委的人作为静态IP预留。如果还要多，建议使用192.168.2.0/23网段，最高可以容纳500人不到，足够大部分的会展使用。如果再不够——你们考虑10网段吧。
最后的经验总结。
1.会前勘察真的很重要，尤其是会场平面结构，承重墙位置，会场部署，电源插座位置，一定要提前至少三天确认。提前一天的时候要配好所有AP，备件和网线到会场部署，然后测试信号。
2.会场带宽一定要大，万一实在不够大，想办法ban掉debian/ubuntu的镜像，然后做qos或者squid。
3.自带足够材料，如果没有胶带/接线板/剪刀，那很多事情就要抓瞎。
4.据说TP-LINK之类的路由器在人数多到一定程度的时候会自爆，推荐使用高级设备或者电脑来做NAT/DHCP。不过我至少肯定100人的时候还没问题。</description>
    </item>
    
    <item>
      <title>从网页中爬链接的一个小技巧</title>
      <link>//blog.shell909090.org/blog/archives/2000/</link>
      <pubDate>Fri, 02 Dec 2011 15:00:11 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/2000/</guid>
      <description>没啥好多说的，从verycd中爬所有的ed2k链接。
lynx -dump -listonly -nonumbers &amp;lt;http://www.verycd.com/topics/XXX/&amp;gt; | grep ed2k &amp;gt;&amp;gt; ed2k.txt 要看到ed2k未转码的内容也不难。
import sys, urllib with open(sys.argv\[1\], &#39;r&#39;) as fi: print urllib.unquote(fi.read()) </description>
    </item>
    
    <item>
      <title>五网融合——看起来很美</title>
      <link>//blog.shell909090.org/blog/archives/1998/</link>
      <pubDate>Thu, 01 Dec 2011 15:18:33 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1998/</guid>
      <description>本文是一篇牢骚文。
大学的时候，和传播学老师讨论三网五网融合问题，我说，这就是一个概念性问题。从技术上说，音频信号视频信号从以太网走已经不是什么新鲜事情（当时04年），只是尚没有产生足够影响的工业标准。手机网络情况特殊，不好说，金融网络的融合依赖于电子加密技术（当时不清楚，现在来说，应当是电子授信技术）。这些事情的技术准备已经充分完成，将来几个融合也是顺理成章的事情，没什么好专门提出来炒作的。
事情的发展证明——是我太天真了。虽然三网融合并没有技术难度，但是有炒作性，也能触动某些人的神经。时至今日，不但三网融合没有完成，反而情况越来越糟。上海的网速只有国际标准入门级网速（4M）的四分之一这个事实常年不变不说，而且几个网的入门技术难度越来越高，门槛越来越高，各大运营商都把用户当作自己手里的筹码，仗着垄断优势倒行逆施。我们数数这些年，电视网互联网接入手机网络的“发展”：
1.机顶盒改造
这是有史以来，我听到被骂的最严重的技术改造，没有之一。我老爹，原本会看电视的。在完成改造后，只会看八个台。因为他一直不能理解电视遥控器和机顶盒遥控器的区别。为什么电视开了还得开机顶盒，机顶盒遥控能关电视，但是不能开电视。电视能看八个台的时候就不能看机顶盒，机顶盒有的时候还会死机。当然，他老人家没有我这么详尽而专业的表述，在我问他情况的时候，他反复只有七个字，太麻烦了，不会用。作为一个六十岁不到的人，我觉得他应当还没有太过失去正常的学习和操作能力。这种人学不会操作电视，只能说明机顶盒太麻烦了。无独有偶，外公和大舅操作电视经常有问题，楼下阿婆也不会看电视，种种迹象表明，这不是一个个例。
机顶盒改造的原理是这样的(请技术小白跳过这段)。首先通过RF射频线（同轴缆线）将机顶盒和小区机房连接，在这个连接技术的基础上封装出一个eth网络来，然后让视频信号通过eth走，而不是PAL或者NTSC格式的RF信号走。机顶盒通过AV接口输出信号，再输入电视机内部。因此，在使用的时候须要打开电视，将信号调整到AV输入模式，将电视机作为一个纯粹的显示器用。然后再通过调整机顶盒来操纵电视跳台或者音量，更进一步的可以拥有历史播放等进阶功能。
看起来很美，但是由于要多一个机顶盒，因此必须同时使用两个遥控器。对老阿婆们来说，这就是一个让她们永远搞不懂的事情。而且，由于机顶盒的软件稳定性不高，我在一年多的使用中，碰到了两次死机。就是任何输入没有响应，不要通过开关关闭，而是直接拔掉电源，再接上，设备就恢复的故障。这是典型的内核死机。作为程序员尚且觉得麻烦，老阿婆们可想而知。
至于机顶盒最大的针对对象——年轻人呢？实话说，我老婆虽然要求家里装电视，但是我一般用不到。我大部分时间都在上网，基本不看电视。有新闻也是看微薄而不看电视，网上娱乐也比较多。就算要看节目，土豆优库的内容多，可以自由前进后退，还没有太多广告骚扰。我要电视干吗？我老婆也就偶尔看看湖南卫视用。我想湖南卫视要是关门，她就会直接退掉电视线的。
2.有线通宽带
上面说到，有线电视是使用eth来传输信号的，所以理论来说，这个也可以作为宽带接入用。在某些人看来，这也叫做三网融合。其实如果这个叫做三网融合的话，那电话拨号上网也可以叫三网融合了。
有线通是使用电视网络为基础的上网业务，我简单点评来说，网络延时长，选择性封锁ed和bt协议。打给客服，她们说，我们只承诺保证http流量速度。我说协议上没写所以我们要按照国家标准——我们有权更改协议不另行通知。
我有权不用你们的服务。
3.上海电信IPTV
电信是网络的总接入商，任何其他网络运营公司必须向电信结算网络费用。所以其他ISP的接入永远比电信延迟高一些——除了教育网。
仗着这点，电信不但耍流氓，在正常的网络http数据流中插入广告，而且准备涉足电视业务。最近电信不是被调查是否垄断么？除了移动可能在搞他们外，电视媒体界也是候选之一。上海电信的IPTV是利用我们的上网带宽，将电视信号从电信机房传输到终端的一个方法。实话说，P用没有。特性和情况和OCN的机顶盒没什么区别。年轻人嫌没用，年纪大的不会用。
而且，这玩意是吃上网带宽的，不过电信一般会给你一定补偿，将1M升级到2M或者4M，多余的带宽你不能用，但是可以为IPTV额外提供带宽。不过最近带宽还是不够用，电信就在上海推了一个新业务——FTTH。
4.光纤接入
FTTH的全称是光纤到户。具体来说要从ADSL说起。原先从小区电话机房里面部署一台边界路由器，然后在电话交换机上面搭载一台ADSL调制解调器。这个设备和家里的设备配成一对，把你的电话线模拟成一根网线。没有概念的朋友，买个电力猫回家就明白了，只要有两根以上质量不差的电线，就是可以模拟成网线的。你在家里通过这根模拟出来的网线，把自己的电脑连接上边界路由器，通过PPPoE协议拨号上网。
ADSL有个问题，带宽最高只到4M，还得信号过关。电信想想，我的小区电话机房这么密集，干脆用光纤直接从机房接到用户手里得了。接到大楼里面，部署一个核心路由器，大家共享这根光纤带宽的，叫做FTTB（光纤到楼），而接到家里的，就叫光纤到户。
光纤到户其实是一种非常好的技术，光纤技术经过多年发展，成熟而稳定。通过单模光纤替代ADSL，能够提供5倍以上的带宽，真正让上海进入宽带世界。但是电信居然就能把这么好的想法给硬生生做成体验差到没边的业务。
上面说了，光纤是ADSL的替代品。从实现上说，原本是ADSL猫来完成的eth模拟行为，现在由光纤转换器来完成。用户其实只要在边界路由器上直接拨号就应当可以上网。可是电信为了在上面捆绑IPTV，或者为了将来的其他业务扩充，或者我们更不惮怀着最大的恶意揣测的其他行为，居然在这个光纤转换器上绑定一个路由器。于是，原本我们是拿外网IP的，现在就变成内网了。什么区别？如果你开ed/bt，速度自然下去。有很多游戏机不支持。只能支持几台设备，不能多支持（好像加交换机也不行）。
太恶心了，我弄个10M光纤，往往就是一家人上网的，一个人用那么大带宽干吗？（我是例外）现在？想一家人上网可以，订他们的一个什么业务，我不知道要不要加钱。把我们自己能做的事情硬生生做成只有电信授权才可以，你干吗不说你不授权我就不能上床算了。而且即便如此，还是缺这个缺那个功能的。好比套子必须选用指定牌子，否则无法保证你们满足计划生育。。。
5.3G接入
这TMD也是一个相当值得吐槽的地方。3G接入在其他国家都相当标准了，中国非出一个自己的TDSCMDA，速度慢不说，还发热大辐射大信号不稳定。不仅如此，我用了多年的移动号码，还不能用WCDMA，因为移动没有这个业务。我买的每一台android手机都是个悲剧，因为android基本只支持wcdma的3g接入。有人建议我干脆买两台手机，一台专门打电话，一台专门上网。问题是，那联系人呢？总之，这是一个悲剧。
6.电子支付
我了个去，我就没见过电子支付这么不靠谱的东西，居然全中国都在掩耳盗铃。
基本每一家，都是用IE的插件来做安全的。实话说，不但不支持大多数系统，而且这本身就不怎么安全。更值得吐槽的是，很多银行的网银看似密不透风，但是往往转头一看——他们还提供更加便捷的服务——换句话说就是更加不安全——这不和本身就不安全一致？
实话说，中国的支付现在还是大幅依赖于支付宝，而且支付也只限于小额。五网合一的正式形态，应当是使用硬件加生体密码，加上3g网络和签名技术，做成标准的认证授权服务来使用的。说直白点，网银使用起来和普通网页没有任何区别，就在付钱的瞬间，需要一个小小的独立设备，通过3g网络进行请求确认。设备上显示付款的目标金额等等信息，你可以同意，然后用你的指纹加上密码确认。或者否认这个请求。这样不但安全性相当惊人，而且兼容各种系统，甚至可以包括手机。目前的手机看似能够完成这一系列工作，但是手机上毕竟是可以安装各种软件的，包括针对这个系统编写的病毒也并非不可能。
综上所述，一个相当大的问题就是，本来接入商应当干干净净的提供接入业务。可是中国的接入商不是，非要在接入上捆绑别的。偏偏这捆绑的东西非常差劲，我们得费尽心机给去了。例如电信捆绑的iptv，3g手机。其实三网融合的核心在于，我们没有电视接入供应商，没有电话接入供应商，只有网络供应商。在网络供应商提供的带宽基础上，我们的电话和电视都通过网络实现。这样我们可以在上面变换各种花样，使用先进的业务。例如十年前就出现的ip电话业务，其实在三网合并后的形态，就是人人家里一个qq而已。例如我们现在一毛钱一条的短信业务，其基于网络的目标形态就是gtalk或者任何一款IM。由于手机随时在线，你给好友发消息他可以即时收取（真的是即时）。这和短信有什么区别？而且功能更强大。又例如iptv业务，其真正的目标形态，应该是土豆优库之类的进阶业务，更接近youtube和Netflix的混合体。说的更直白点，netflix是web1.0类型的传统网络电视经销商，而youtube是web2.0形态的网络电视经销商。中国的所有iptv都做的是一个四不像的怪物，核心目地是骗钱。说明白点，如果中国真的玩多网融合，短信不要钱，电话不要钱，电视不要钱，银行服务不要钱，那这堆单位怎么活？只有一个网络供应商活的很滋润。
其实说白了，中国的电信/移动/电视，都是垄断行业。本来各司其职相安无事。现在世界大潮非逼着他们变成一样的供应商，他们就都希望变成那个最后中选者。偏偏他们都基于自己的经验去做三网融合，结果就不伦不类四不像。又偏偏，我们没什么替代选择，再恶心也非用不可，所以开始我就说了，这只是一篇牢骚。
希望？早点把中国电信的总结算商身份给去了，让其他isp可以交叉结算。通常来说，战国时代才有的玩头。可惜，这个更加触及某些人的利益了。</description>
    </item>
    
    <item>
      <title>python中dict的插入复杂度估算和排重复杂度估算</title>
      <link>//blog.shell909090.org/blog/archives/1996/</link>
      <pubDate>Mon, 28 Nov 2011 10:22:43 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1996/</guid>
      <description>在做分词核心词典数据结构分析的时候需要，就先写一篇吧。
具体可以参考python源码解析读书笔记（一）——内置对象，这里面有说：
7.dict对象的索引方案
dict对象的索引方案使用的是哈希表，而且是开放地址法的哈希表。当装载率达到一定规模后，会新申请一块内存，将有效数据复制过去。最小的表空间为8个对象，当装载率超过2/3时，会扩大规模到当前active的4倍（超过50000个对象为2倍）。目前为止，在对象被删除后，其表空间并不释放。因此曾经增长的非常大的dict对象，可以定期复制以回收空间。
最初的表项空间为6个以内，满了之后，会自动扩张到24个，有效16个。从大致来说，如果要放下N个表项，大概就要扩张T次，他们满足以下关系。
A0*(8/3)^(T-1)&amp;lt;N&amp;lt;A0*(8/3)^T 而每次扩张，就要进行全表项复制，因此复杂度大约是O(N)量级。当扩张到放下N个表项时，就需要进行的复制的总数是：
sum(i, 0, T-1){A0*(8/3)^i} 这是一个典型的等比数列求和问题，我们知道问题的答案应当是：
A0*3*((8/3)^T-1)/5=A0*(3/5)*(8/3)^T-(3/5)*A0 因此，(3/5)(N-A0)&amp;lt;O&amp;lt;(3/5)\*((8/3)\*N-A0)。如果只考虑数量级的话，插入的复杂度量级为O(n)，即哈希表的平均插入复杂度为n级。
也许有人奇怪，哈希表的插入复杂度为1级阿，怎么得到n级的结论的？看上面，都说是放下N个表项时的总复杂度了。
我们可以和红黑树对比一下，红黑树的平均插入复杂度为logn级，平均查找复杂度为logn级。哈希表的平均插入复杂度为1级，查找复杂度为1级。但是红黑树在一点上比hash优秀——他的插入时间基本稳定，hash table的插入时间有可能会暴长。
于是，当我们有N个元素，需要进行排重的时候，我们可以set化。假定set和dict基于一样原理运作，我们的时间复杂度为O(n+m)级，m为排重后元素个数。其实按照最差情况来说，也可以认为是O(n)级。</description>
    </item>
    
    <item>
      <title>正好聊到django——论他的模板问题</title>
      <link>//blog.shell909090.org/blog/archives/1994/</link>
      <pubDate>Thu, 24 Nov 2011 16:54:56 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1994/</guid>
      <description>首先先广播一个纠错，我那篇《几个模板的性能对比》，对cheetah模板没有做渲染处理，只生成了对象。因此性能出现严重误差，在此向所有被误导的朋友致歉。
——不过这并不影响django慢到渣的结果。
Shell: 他们用了django的orm，映射到了mysql
我一点办法都没有 mysql唯一能做的，就是一写多读 或者可以加入handlesocket
Bill: 为什么facebook以前好像用mysql能处理那么NB.
Shell: 多久以前的事情啊？
而且你得想，他们以前还用php呢 他们自己开发了hiphop，把php编译为了C 同样，我估计mysql他们也做了手脚 那玩意我学不来 而且，即使学的来，也不可能在django固定了范式的前提下 ——起码得给我修改范式的机会吧
Bill: 你可以改django嘛.
Shell: 太麻烦了
django已经积重难返了
这个问题，并不来自于django本身，而是来自于所有学django的人 Bill: 为什么这么说?
Shell: 由于他们的努力，django变成了一个固定的商业标准
试图对django进行修改的行为，哪怕是正面的努力，都会受到已经存在于上面的系统的抵制 例如，我开发一个django的分支，允许使用其他模板，你觉得会如何？
压根不会有人理我 因为大家都使用现有的模板系统，并且在上面做了无数的代码 很多人甚至无法升级django的版本 很多app也已经使用了现有的模板 如果我对django整合cheetah，那只能限于自用的范畴
Bill: 这么说还真是一条不归路了..
Shell: 除非他们的维护者作出很大的努力
说白了，就是官方强推
Bill: 不过到时候遇到瓶颈了,怎么办..
Shell: 但是，这样一来，很多人就根本不会升级了
怎么办？
要是有办法，他们还会找我么？
Bill: 靠硬件..
Shell: 他的页面就是3-5秒的打开时间
硬件上再增加，一个花钱，另一方面，也不可能增速啊 只能增加并发访问量
Bill: 也有点增速效果吧..处理速度快乐 快了
Shell: 怎么会呢？
你想，靠硬件是怎么靠的？
换更高频率的机器，还是加同样的机器？</description>
    </item>
    
    <item>
      <title>新手？新手！</title>
      <link>//blog.shell909090.org/blog/archives/1992/</link>
      <pubDate>Wed, 23 Nov 2011 15:20:10 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1992/</guid>
      <description>《新手？为什么需要关怀》在42区上挺热，看到很多人留言说新手，诚惶诚恐。我说你们也别太那啥了，一般只要不是求作业求妹子的，基本都还是能忍的。就算你问问题前言不搭后语，问题叙述的乱七八糟，老是求解释。通常我最多告诉你看某文档就不再回话——意思是事情到此为止。你不用担心我恼怒或者生气，我的时间很宝贵，没空浪费在这么无聊的事情上。如果下次你问出个有内涵的问题，咱们不妨讨论讨论。
写这篇的主要目地，是给新手一个指导。我不知道现在所谓新手的水准，以我在42区上看到的而言，是高的吓人。但是我实际接触到的，可能如一位朋友所说的垃圾，水准是差的吓人。其中有很多是不高兴学，或者打算做了再说的。您走好，这篇文章不是给您的。这篇文章是告诉一些真的是新手的程序员，如何稍微的提高一点水平。我假定你们会用vc写一些简单的程序，拖拖拉拉控件能做一个简单的计算器。在计算机上，我相对偏向实用。您和我说在算法课上能拿多少分，对我今天所说的内容意义不大。所以无论您课业上不及格也好，满分也好，本文告诉你如何成为一位牛逼或者可以装逼的程序员——如果你做了整个过程，学到了东西，那就是前者。如果没学到，没关系，至少你可以拿着本文的经历去装逼。
首先，请保存好你们的照片什么的，然后，把你们面前的电脑格式化掉。对，所有windows的内容一点不要留，已经是linux的朋友，请确保你“没有”windows了。作为程序员，你无论如何都需要自己做很多事情，直接使用linux是一个良好的开端。但是学linux是痛苦的，只要有退回windows的可能，你就没法真的学会linux。学着用linux工作和学习（对于某些人来说，娱乐更重要，在这方面，linux确实不怎么样，幸好，如果您是这样的人，本文也没看的必要了），并且熟悉整个系统，最快需要2-3个月的时间，慢的话需要半年到一年的努力。你需要不断磨合，学习新的程序使用方法，请教前辈，实验，最终能够掌握这一系统。掌握的标准是什么？你知道哪些事情是不能用linux做的。之所以这么说，是因为新手根本不知道哪些事情是不能用linux做的，他们所有事情都没法用linux做。而老手会使用最合适的方法来用这个系统。
当你已经能够熟练使用linux，甚至比windows还熟的时候，你的桌面装什么东西就随便你了。我的桌面是win7，因为老婆需要。我知道不少程序员的桌面是mac，这也很好。不过一旦你熟悉了linux，你最少会装个虚拟机来做开发，并且觉得试图在windows下做这些事情很蠢。windows的console是cp936编码的，网页很多都是gb2312编码的，但是用gb2312去读他们却未必能行（这是因为windows下的gb2312/gbk说的都是gbk，抽风啊）。linux下面大多数term都是utf-8，世界清静很多。windows下开个小网页服务器要跟着一个图形管理界面，linux下服务就是服务。总之，如果你真的打算开发，你会发现windows其实非常不友好。所谓友好是指已经被微软封装过的部分，还有他们的文档——那个真的非常不错。
第二步，你得打造一个自己的工作环境。我知道你习惯了微软的IDE，进入linux后还试图用一些WYSIWYG的系统。不是每个WYSIWYG都是错误的，然而作为最适合你的程序而言，他未必就是WYSIWYG的。你在windows下一般用什么开发工具？vs？盗版吧？好吧，你是学生。但是你能用vs编译一个linux kernel么？在没有SDK扩展包的情况下，vs也不能用来做android开发吧？这就是vs的真相，将一些特定的开发，做相当程度的简化，以换取大量的初级开发者。当然，你会反驳说vs可以开发WDM，或者做DDK级调试都可以。然而，这也是特定领域——凡是微软给你能做的领域，你都可以做。但是微软不允许你做的领域呢？虽然微软允许的范围很大，但是作为初学者，了解开发是如何工作的更加重要。
你可能需要一个编辑器，通常这只有三个选项，vim/emacs/其他。而后你需要一个编译器，如果使用C，多半就是gcc。调试工具一般会选用gdb，编译项目管理工具一般是make。这四者的用法都可以google到，并且通过合适的配置配合到一起，达到和vs类似的结果——你写一些代码，然后按开始调试，程序就开始一步一步运行。到你需要的地方，输出一些数据看看？然后再继续运行。和vs没有什么太大差异。不过作为自行配置环境努力的回报，你有两项比较大的优势。一个是你的各种工具都是千锤百炼的，最优化的工具，他们一定真的能工作，而且可以信赖。另一方面，当你需要改变工具的时候，你可以保持其他工具不变。例如，你现在需要通过go语言快速的开发一些web程序，你需要将gcc换成gogcc，gdb也需要换掉。然而make只需要新增一些规则，vim/emacs也无需变化。回想一下你在vs里面如何编写go代码？——这个——好像——似乎——需要第三方插件吧。找找看？运气好的话有收费插件可以达到这个目地，找一个破解版来——如果开发者都对破解无动于衷，你还如何指望别人来尊重你的知识产权？也许你想，我可以不使用go语言来编写。好吧，go的效率是编译型语言中比较高的，你要和go比效率，可选的只有C语言。那么你准备在vs上用C开发一套web？——我尊重你的选择，并为你逝去的人生默哀。
第三步，找一个合适的项目。这点我在《如何参与一个开源项目》一文中有说，不过那篇文章建议你尽量做一些代码之外的工作。为了磨练你的水平，你可能需要做一些和代码有关的事情。不过无所谓，大概来说事情是不变的。找一个合适的项目，和他的领导者谈谈，看看有什么可以干的，并且努力干完。
第四步？没有了，继续这么干吧，应该没多久，你就是N个项目的参与者，有一定的代码贡献，并且和一些大牛们交流一些业界最新的东西。如果这样都不算入门，我真不知道你入门的标准是什么了。
听起来很简单，那么事情的难点在哪里？
关键在于，无论事情看起来多么困难，多么不可能，你觉得多么辛苦，你都立刻，马上的去做。而不是看完文章后点一下“mark”，“like”，“+1”，然后让他躺在你庞大的文库里面生灰。</description>
    </item>
    
    <item>
      <title>python-segment使用示例</title>
      <link>//blog.shell909090.org/blog/archives/1990/</link>
      <pubDate>Tue, 22 Nov 2011 10:18:15 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1990/</guid>
      <description>项目的主页是http://code.google.com/p/python-segment/，如果有问题，可以在上面提交issue，我会收到邮件（google code会么？应该会吧）。如果你希望协助开发，可以加入项目。一些简单问题可以直接看项目的WIKI，Wiki中有的一些内容我不会进一步解释，只会告诉你在那里可以看到。
1.如何获得源码
你可以使用以下代码，直接从版本库中复制一个可用版本出来。
hg clone https://shell909090@code.google.com/p/python-segment/ 或者可以从这里下载一个最新版本的包。
2.如何准备环境
你可以看INSTALL，里面讲解的比较详细了。如果你不准备进行安装部署，可以跳过安装和打包这两步。但是如果你打算使用cutter工具，请安装chardet。如果你打算使用spider工具，请安装html2text。
首先按照如下方式生成词典。
gunzip dict.tar.gz ./ps_dbmgr create dict.txt 然后，你可以看到生成了frq.db，这是词典的默认文件名。注意，词典文件的格式和具体的版本有关，换用版本后最好重新生成词典。
3.试验分词
假定有一个文本文件，test.txt，里面内容是中文平文本，编码任意。
./ps_cutter cutshow test.txt cutter会自动推测编码。
4.代码使用
假如当前有一个frq.db词库。
import segment cut = segment.get_cutter(&#39;frq.db&#39;) print list(cut.parse(u&#39;工信处女干事每月经过下属科室都要亲口交代24口交换机等技术性器件的安装工作&#39;)) 注意，仅仅使用parse是不会进行分词的，因为parse返回的是一个生成器。</description>
    </item>
    
    <item>
      <title>新手？为什么需要关怀？</title>
      <link>//blog.shell909090.org/blog/archives/1988/</link>
      <pubDate>Mon, 21 Nov 2011 10:50:34 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1988/</guid>
      <description>最近老是收到“新手，求帮助”的邮件，很多人很有礼貌，但是实话说，我总觉得这些新手邮件的想法有问题。今天不妨开诚布公的说一下我对新手的态度。
很多人总是很客气的发邮件“新手，求帮助”，里面提出一些很傻的问题——这不奇怪，无论多强的人都有傻傻的时候。这些邮件写的也很客气，一切没有什么不对。除了一点——其中某些邮件中总是充斥着一股说不出的“不劳而获”或者“傲娇”的情绪。说的更直白点，就是“我们是新手，所以说的简单点，但是又要说明白”，”XXX的最好途径是什么？适用于新手哦“，或者更过分的“我的作业马上要截稿了”，“我女朋友要我做题”。
实话说，我对一个人是不是新手并没有太多兴趣。新手对我的区别只有——你没有关于XXX的相关背景知识，所以，也许你要先看OOO书，有一个大致概念，然后再看XXX文档，详细了解一下，然后你看XX书，就能够解答你的疑惑了。这是知识依赖的关系，你没有相关知识，自然看不明白。作为声明新手的结论，我会帮你指出你所需要的知识在哪里能够找到，免除你自己去google，还有可能找不到的困扰。差不多这就是我能为新手做的所有事情了。
至于那些说，为什么不把相关知识截取下来发出来，为什么不详细解答疑惑的人，我没什么好多说的。如果新手的行为就一定是可原谅的，我们每个人都会在路上横冲直撞。我们总会在某个领域成为新手——哪怕有10年经验的程序员，也会是一个新手驾驶员，或者新手厨师。作为新手驾驶员，我们有责任通知别人——躲我们远点。并不是因为我们是可原谅的，而是因为我们不能自制的作出不可原谅的事情。作为厨师，尤其是程序员厨师，这点更加明显。程序界有句行话叫做——吃自己的狗粮（eat your dog food），意思是自己做的程序一定要自己用一下才有体会。同样，厨师自己做的菜一定要自己先吃，自己都不敢吃的东西是不好意思端出来的——哪怕我们都知道你是新手。
没人应当对你的无知负责，你自己无需负责，你父母无需负责，我也无需负责。人总是新手，但这不代表老手要无偿的呕心沥血教会你——哪怕他是个教师。新手没什么了不起，或者值得无限原谅的地方。你到底是我的老板呢？还是我的衣食父母呢？我需要为你把所有的材料看一遍，摘出合适的部分，讲给你听，并且还保证你能够学会。我想即使是老师，也不会帮你做这些事情的。不要和我说论文马上就要截稿，或者你们老板多黑心，你女朋友和人跑了，或者你这课挂了，就白花了四年的时间和无数的钱——这些钱和时间都是你自己浪费出去的，我帮你解决问题并不能节约下来这些时间和钱，这样只会浪费我的时间。何况如果我用最快的方法教会你，你出来后不是就直接和我竞争了。你看，我不但包教包会，而且成功后还要降低自己的工资——我要多么的脑子进水，才会干这种损己损到家的傻事呢？
而且，作为一个要辛辛苦苦从学校招一些靠谱的学生的程序员。我无比的痛恨出题太简单的老师——虽然我在学生的时候痛恨的是出题太难的。题目可以抄，出题太简单，找人代写，改头换面，和老师搞好关系。这一切我们在学生时期耍的小聪明，到了工作中都会结结实实的还给我们自己，除非你不从事技术相关行业。如果你从事的是销售行业，这些小聪明，手腕和技巧，也许是有帮助的。但是作为技术行业，这一切是我们深恶痛绝的根源。新毕业出来的学生中，大概只有不到一成的人理解为什么java不能使用双重检查成例——哪怕你详细的给他们讲解原理，他们仍旧一头雾水。因为从一开始，最基础的，理解关于锁定和单例的相关技巧，就没被认真的学起来过。大多数的人都可以熟练的作出B+树的实现，或者排序算法——因为这是考试时需要的东西。但是你在和他们谈论实践技巧的时候，会非常伤心的发现，他们所谓的实践技巧，就是在某个特定的框架上，如何用教科书上的方法搭建出一个网站，或者是应用程序。如此我大概就知道，为什么我们全国一年有将近200W的计算机系毕业生，但是全国程序员总数才150W上下——这是07年的数据吧。
其中有一些比较靠谱的人，是真心想学好计算机的——我姑且不论理由是爱好，还是因为程序员工资比较高。但是这些人的信件里面，也有说不清的傲娇情绪。我为什么要对你负责，把具体过程实现给你？因为你说的比较好听？抱歉，就算是MM，我也已经结婚了，所以对你没兴趣。如我上文所说，我最多告诉你，从理论上这样可行。至于我是不是有能力实现，或者为什么不实现给你，这个和你没有关系。如果你自己不高兴去翻那厚厚的一叠文档，那就保持不会好了，我在招人的时候会轻松很多，而且你也会少很多伤心往事。我知道不少公司招人的时候，往往会出一道题。然后有那么几个学生，题目解答的异常完美。这个故事的结局往往两级分化，一种是这个公司把所有的优秀解答凑一凑，直接取消了这个职位。另一是这几个学生进公司后，一塌糊涂一头雾水，结果连试用期的三分之一时间都没过去就被一脚踢出大门——仔细看看你们的合同，试用期辞退是不是不用赔偿？
工作不是考试，只要技巧过关，一次通过，没人能找你麻烦。工作，尤其是技术工作，是一个长达数周乃至数年的过程。没有足够功底的人会在几天内被戳穿，然后扔出去。我知道你们会怎么做，你们会在简历中添加这家公司，然后向下家编造一个公司不靠谱的理由——阶级斗争啦，项目做完啦，或者如我上文所说的，凑凑答案取消职位啦——看看他们会不会买你的帐。如果他们做了背景调查，你没有机会。如果他们没做，你的简历上就会又添加一笔资历。三五次后，你就成为在多个公司供职的高手，月薪一次比一次写的高。大多数的HR不是傻瓜，如果真有这种高手，他们绝对不会投出简历然后乖乖的前来面试。通常这种人的手机上有N个猎头的未接来电，想要跳槽的消息传出去后，简历还没开始动笔已经有人开出了天价的薪水。如果有那么个冤大头愿意相信你，我得说，你的传销技巧做的很好。不过大部分这样做的学生，最后都去了销售职位。至于他们的结局，我就没有关心过了。
所以，干脆让我们省掉这些无聊的功夫吧。您不如直接去销售职位，我就去安安心心的挑一些不是那么无药可救的学生。看看他们能不能安下心来看这些文档，在一个个不能成眠的夜晚悔不当初，为什么不在别人指出这些资料后就去老老实实的看一遍。那些看了的学生？他们在被猎头围追堵截中，我就不凑热闹了。</description>
    </item>
    
    <item>
      <title>openwrt特性——2.4g和5g频段的冲突</title>
      <link>//blog.shell909090.org/blog/archives/1986/</link>
      <pubDate>Fri, 18 Nov 2011 17:02:30 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1986/</guid>
      <description>贝壳昨天想起，自己的平板是支持11n的，路由器也支持，为啥不做呢？于是把路由器的第二AP打开。结果——报错了。
具体过程就不废话了，老妈和外婆在唠叨各种废话，没那个心情。
DIR-825用户，把你的第二AP设定成和第一AP不同的频率。如果两者使用同一频率段，系统就会报错。估计是两个频率各自给了一根天线，混用没那么多天线。</description>
    </item>
    
    <item>
      <title>mongo无法利用多核？</title>
      <link>//blog.shell909090.org/blog/archives/1984/</link>
      <pubDate>Wed, 16 Nov 2011 17:12:34 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1984/</guid>
      <description>太伤心了，本来以为mongo的速度很快呢。测试插入数据，结果当场被泼了冷水。
conn = pymongo.Connection(&#39;localhost&#39;, 27017) db = conn[&#39;perform&#39;] coll = db[&#39;test&#39;] testdata = [] def init_testdata(): for i in xrange(1000): s1 = &#39;&#39;.join([random.choice(string.hexdigits) for j in xrange(16)]) s2 = &#39;&#39;.join([random.choice(string.letters) for j in xrange(200)]) testdata.append((s1, s2)) init_testdata() def insert_mongo(): for s1, s2 in testdata: coll.insert({&#39;_id&#39;: s1, &#39;content&#39;: s2}) def find_mongo(): for s1, s2 in testdata: s = coll.find_one({&#39;_id&#39;: s1}) def testfunc(funcname, times=1000): from timeit import Timer t = Timer(&amp;quot;%s()&amp;quot; % funcname, &amp;quot;from __main__ import \*&amp;quot;) print(&#39;funcname: %s used %f&#39; % (funcname, t.</description>
    </item>
    
    <item>
      <title>语言的易读性</title>
      <link>//blog.shell909090.org/blog/archives/1982/</link>
      <pubDate>Tue, 15 Nov 2011 16:32:31 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1982/</guid>
      <description>何谓语言的易读性，简单来说，就是看到一段代码的时候，能够了解其意思。易读性最差的典型代表作是汇编语言和机器语言，因为在读这两种语言的时候，其实是你的大脑在替代模拟CPU的功效。说起来，自从汇编以后，每种语言多多少少都注重了人类阅读的习惯，像brainfuck这种特例是万难一见的。例如下面的例子。
printf(&amp;quot;hello, worldn&amp;quot;); 即使没有任何C基础的人，也能够看懂这是在做一个字符串打印。
语言的易读性其实是语言非常重要的特征，比其他特征都重要。因为人类的大脑不可能记得所有的代码细节，并且能够直观的反应出如何修改。往往我们需要阅读一下代码，搞明白每段的意思，然后才能动手——哪怕这段代码出自自己手笔，只要过得一两个月，还是要重读一下的。正是因为读这个技能的使用频率非常高，所以语言的易读性非常直观的影响到语言的易用性。而易读性差的语言和习惯，目前来看有以下几个典型例子。
1.罗嗦
典型代表是Java。下面是一个Java解压Zip的代码，引用自参考1。
public class Zip{ static final int BUFFER=2048; public static void main(String argv[]){ try{ BufferedInputStream origin=null; FileOutputStream dest=new FileOutputStream(&amp;quot;E:testmyfiles.zip&amp;quot;); ZipOutputStream out=new ZipOutputStream( new BufferedOutputStream(dest)); byte data[]=new byte[BUFFER]; Filef=new File(&amp;quot;e:\test\a&amp;quot;); File files[]=f.listFiles(); for(int i=0;i&amp;lt;files.length;i++){ FileInputStream fi=new FileInputStream(files[i]); origin=new BufferedInputStream(fi, BUFFER); ZipEntryentry=new ZipEntry(files[i].getName()); out.putNextEntry(entry); int count; while((count=origin.read(data,0,BUFFER))!=-1){ out.write(data,0,count); } origin.close(); } out.close(); }catch(Exceptione){ e.printStackTrace(); } } } 我下面给出python版本。
import os, zipfile with zipfile.ZipFile(&amp;lsquo;filename.zip&amp;rsquo;, &amp;lsquo;w&amp;rsquo; ,zipfile.ZIP_DEFLATED) as zf: for name in os.</description>
    </item>
    
    <item>
      <title>NSIS在64位下安装时无法写入注册表的问题</title>
      <link>//blog.shell909090.org/blog/archives/1980/</link>
      <pubDate>Mon, 14 Nov 2011 15:54:50 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1980/</guid>
      <description>最近公司碰到一个问题，NSIS在64位下安装时无法写入注册表。
首先，这个问题不是UAC没有权限的问题，因为我使用administrator安装依然有问题。其次，问题和win2008没关系，只出现在64位上。
问题在哪里呢？在写入注册表前，SetRegView 64，写入后换回32，问题解决。
真TMD的。</description>
    </item>
    
    <item>
      <title>关于网站架构的几封邮件摘抄</title>
      <link>//blog.shell909090.org/blog/archives/1978/</link>
      <pubDate>Fri, 11 Nov 2011 16:18:45 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1978/</guid>
      <description>Shell.Xu &amp;laquo;shell909090@gmail.com&amp;raquo;:
我知道，我自己写过一个greenlet + epoll的实验性框架。
http://code.google.com/p/py-web-server
最主要的问题是，写到后来我发现，这东西对用户的要求太高了。要用好这种框架，用户必须具备系统经验，知道阻塞操作实际上是由非阻塞操作和上下文调度去模拟的，知道代码处处无阻塞（其实是不能有无调度的阻塞），能够想像系统是如何运行的。
这种人不会太多。在cpyug里面不算少，抓10个20个肯定能抓出来，抓上100个也不是没希望。但是实际在操作的时候，平摊到上海这么个地方，会python的也就见过那么不到100人，有这种要求的几乎可以一个个数出来。而且大多数已经在一个不错的公司里面有个不错的职位，你没法指望招个人来做事。
这也是为什么很多公司凡python必django的原因，毕竟用了django，虽然罕见，但是可以招人。用了tornado，能招的范围就少了很多。我自己做的这个实验性的玩意，风险大不说，HR角度来说，可选程序员只有一个。一旦在上面做了系统，不废弃系统的前提下，你压根没法谈判工资。。。
从语言角度来说，我更倾向于lisp，那个比较优美一些，而且也有编译成C的选项，速度不慢，天然的fp。问题是lisp从语义的自然可理解性来说非常差劲，那个传说中某AI实验室源码最后一页全是)并非空穴来风。对于新手入门而言，lisp成本更加高，使用lisp做系统，HR执行的难度也更高。haskell我并不懂，不过从语言理解来说，大概介于lisp和python之间吧。
协程型框架和进程/线程型框架相比，最大的好处就是减少了锁的问题。因为上下文切换的位置都是已知的，是否需要锁很容易考虑。很多时候甚至不需要严格锁定，只要置标志位就好，速度很快。使用fp，也可以大幅减少锁的问题，但绝对不是避免。目前的系统架构设计，已经越来越多的把锁的问题扔到了数据库层。
例如，我在操作一条记录的时候，一定会发生行级锁，否则就是不安全的。而在添加一条记录的时候，必然会修改这个表上关联的索引。而修改索引的瞬间，就会发生瞬时的锁定和解锁，否则也是不安全的。这个过程虽然对用户不可见，但是并非不存在。诚然，数据库访问是基于网络的，而基于网络的read是一个阻塞操作，在架构级别一定会调度到别的上下文执行。但是没意义阿，大规模的用户访问，除掉可以缓存的部分外，都被压到了数据库上进行读写。这些访问，在表级频繁的发生冲突，被各种锁序列化成顺序访问。到最后，我们不断的向系统中添加机器，来换取性能增长的时候，应用服务器实际上变成了问题最小的一个——小到用也许bash去写cgi都可以满足。与此同时，我们的数据库问题越来越大，还没法拆分——你没办法像应用服务器负载均衡那样把数据库拆到多个机器上去，然后让他们的写入性能成倍数增加。
无论是mongo，redis，还是mysql，都没有本质上的解决锁，尤其是写入锁的问题。mongo的读取性能可以上到15kreq/s，但是写入只有5kreq/s，而且好像还不能由sheding做加速——至少不是成倍级别的加速。mysql目前比较成熟的方案还是单写多读。当然，还有所谓水平拆分和垂直拆分的方法。垂直拆分对业务有要求，水平拆分只解决了大规模数据吞吐分布到多个存储媒体的问题，不解决索引访问的问题。redis压根没有自己的分布方案，你必须自己来做。
k-v受到热捧的原因之一，在它给了你一个从某个层面绕过这个问题的方法。目前写入锁最严重的点在于索引。无论是插入还是修改记录都需要在数据库上变更索引，而索引的变更就必然会发生锁。K-V的要点在于不允许在记录上做索引——所以mongo不是k-v数据库——从而允许用户将庞大的写操作分布到数十乃至数百台机器上的同时，获得倍数级别的性能增长。我们先不考虑添加/删除——这个是一致性哈希的目标，也不考虑可用性——这个是冗余的目标。仅从这点来说，k-v数据库受到热捧是有原因的。
问题是，这也不是解决问题，这只是绕过问题。相信使用k-v的人应该有所感受，这玩意根本没法替代常规数据库来用。没有事务，没有一致性隔离就算了。连索引都没有，这TMD的怎么用阿。目前来说，更加实际的使用还是用k-v来存储一些确实没必要进行索引的东西——例如大量小规模图片，用户的属性数据。
Zoom.Quiet &amp;laquo;zoom.quiet@gmail.com&amp;raquo;:
那么这样的话,可以考虑用 Erlang ,这货天然就是为了大分布高迸发服务发明的
而且从语义行文角度看也很好理解
更加要命的是 erl
提供了丰富到变态的动态调试工具,风骚无比的热部署无缝回滚&amp;hellip;
只是,摧悲的是 erl 对于计算无爱&amp;hellip;
不过,反过来想一下:
现在 web2.0
的世界,以及在爆发中的移动互联应用中,有什么是非要复杂关系查询的?!
通过业务的良好统计,可以从业务角度就异步化
那么,不论什么语言来开发,都没有阻塞问题存在了哈&amp;hellip;
这也是为毛 K/V 数据库得以商业应用的主要原因
另外,前述有人说 git 作存儲的思路也是个方向:
既然分布式写入锁是个难题
那么就直接只进行本地操作好了
仅在必要时,进行分布式合并,这方面,各种版本控制系统都作得很好
如果 redis 的bilog 文本对 git
合并是可耐受的,那不就是个山寨的分布异步安全锁了?
Shell.Xu &amp;laquo;shell909090@gmail.com&amp;raquo;:
我觉得我的最终解决方案是到大学里面培训lisp课程，争取弄出一批语义上看C系列语言不顺眼，只能读懂lisp的变态出来。这种现象在自然界有广泛分布，地球上至少有1/4的人类在使用最流行的语言系统时有障碍，只能使用一种难用的要死的古老的，基于符号的语言系统，并且引以为傲。。。
业务角度异步化并不是最终方案，因为除了移动互联网应用外，数据库业务最赚钱的还是公司业务。公司业务的数据量不见得比移动互联网应用小，而且他们有钱。由于目前没办法，公司业务都是找oracle这种公司来处理，而且对性能没有要求。其实不是真的没要求，而是没法要求而已。
我觉得比较有前景的，是如何将索引分布，理论来说这是可以做的。一致性哈希，DHT，都有希望。问题是目前来说，安全的写入分布式的索引本身好像也是要锁的，这就没意义了哈。
我还没想过分布式的索引本身写入锁的冲突概率是多少，能降低一个数量级就值得玩玩看。</description>
    </item>
    
    <item>
      <title>openwrt配置——自动重启openvpn</title>
      <link>//blog.shell909090.org/blog/archives/1976/</link>
      <pubDate>Thu, 10 Nov 2011 15:55:20 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1976/</guid>
      <description>还记得如何配置openvpn么？手工配置有个问题，当我ppp0连接断掉，需要重启路由器的时候，网络会短暂的断开。然后，openvpn就失效了，导致各种混乱后果。为了解决这个问题，我测试了一下，做了以下设置。
-----/etc/hotplug.d/iface/30-openvpn----- #!/bin/sh [ &amp;quot;$ACTION&amp;quot; = &amp;quot;ifup&amp;quot; -a &amp;quot;$INTERFACE&amp;quot; = &amp;quot;wan&amp;quot; ] &amp;amp;&amp;amp; [ -z &amp;quot;`/sbin/ifconfig tun0 2&amp;gt;&amp;amp;1 | grep inet`&amp;quot; ] &amp;amp;&amp;amp; { /etc/init.d/openvpn start } [ &amp;quot;$ACTION&amp;quot; = &amp;quot;ifdown&amp;quot; -a &amp;quot;$INTERFACE&amp;quot; = &amp;quot;wan&amp;quot; ] &amp;amp;&amp;amp; [ -n &amp;quot;`/sbin/ifconfig tun0 2&amp;gt;&amp;amp;1 | grep inet`&amp;quot; ] &amp;amp;&amp;amp; { /etc/init.d/openvpn stop } -----end files----- 好了，你重启外网连接的时候，就会自动连接openvpn。
参考：
OpenWRT下的动态DNS(用3322.org的服务)</description>
    </item>
    
    <item>
      <title>几个模板系统的性能对比</title>
      <link>//blog.shell909090.org/blog/archives/1975/</link>
      <pubDate>Wed, 09 Nov 2011 14:52:47 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1975/</guid>
      <description>对比目标，jinja2，cheetah，mako，webpy，bottle，tornado，django的性能。
方法，随机生成一个二维数组，第一列是自增数据，第二列是长度为100的随机字符串，然后生成html，比较一次生成的时间。
说明，如果模板有编译缓存，打开。有其他方法加速，打开。生成缓存，关闭。不计算随机数据生成时间，一次生成后一直使用。
以下是文件有效内容，没用的都略去了。最后的顺序是因为我根据结果整理了一下调用次序。
&amp;mdash;&amp;ndash;testcheetah.tmpl&amp;mdash;&amp;ndash;
&amp;lt;table&amp;gt;
#for $i in $l
&amp;lt;tr&amp;gt;
&amp;lt;td&amp;gt;$i[0]&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;$i[1]&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
#end for
&amp;lt;/table&amp;gt;
&amp;mdash;&amp;ndash;testdjango.html&amp;mdash;&amp;ndash;
&amp;lt;table&amp;gt;
{% for i in l %}
&amp;lt;tr&amp;gt;
&amp;lt;td&amp;gt;{{ i.0 }}&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;{{ i.1 }}&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
{% endfor %}
&amp;lt;/table&amp;gt;
&amp;mdash;&amp;ndash;testjinja2.html&amp;mdash;&amp;ndash;
&amp;lt;table&amp;gt;
{% for i in l %}
&amp;lt;tr&amp;gt;
&amp;lt;td&amp;gt;{{ i[0] }}&amp;lt;/td&amp;gt;
&amp;lt;td&amp;gt;{{ i[1] }}&amp;lt;/td&amp;gt;
&amp;lt;/tr&amp;gt;
{% endfor %}
&amp;lt;/table&amp;gt;
&amp;mdash;&amp;ndash;testmako.html&amp;mdash;&amp;ndash;
&amp;lt;table&amp;gt;
% for i in l:
&amp;lt;tr&amp;gt;
&amp;lt;/tr&amp;gt;
% endfor
&amp;lt;/table&amp;gt;</description>
    </item>
    
    <item>
      <title>openwrt配置——arptables配置</title>
      <link>//blog.shell909090.org/blog/archives/1973/</link>
      <pubDate>Mon, 07 Nov 2011 10:32:09 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1973/</guid>
      <description>让其他人的设备无法使用网络。
opkg install arptables --------/etc/init.d/arptables-------- \#!/bin/sh /etc/rc.common start (){ arptables -F INPUT arptables -A INPUT --src-mac aaa -j ACCEPT arptables -P INPUT DROP } stop (){ arptables -F INPUT arptables -P INPUT ACCEPT } --------end files-------- 注意，千万把自己的mac地址写对了，否则一个/etc/init.d/arptables restart下去，你自己的机器就断线连不上了。不过一般来说，重启后arp限制会失效，因此可以重启来去掉限制。实在不行也可以拔下U盘，在电脑上进行mount和修改，然后再插回去启动设备。根据测试结果，内网还是可以访问的，不过路由器无法访问了。有一个链叫做FORWARD，也许改这个可以解决。但是我没有找到相关资料，因此没有下手。</description>
    </item>
    
    <item>
      <title>Openwrt pptp passthought</title>
      <link>//blog.shell909090.org/blog/archives/1971/</link>
      <pubDate>Fri, 04 Nov 2011 14:43:37 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1971/</guid>
      <description>你还在为使用openwrt路由器无法使用pptp客户端而烦恼么？请看这个页面。按照他的说法，输入以下句子就可以解决你的烦恼。
If you use a pptp client behind an openwrt router, and pptp tunnel not work, look at thispage.
opkg update opkg install kmod-ipt-nathelper-extra 这个方法不仅对路由器内使用一个pptp有效，而且对多个pptp也有效。
It&amp;rsquo;s work for both single pptp tunnel and for multi pptp tunnels.
然后，记得重启。
Remember to reboot router.</description>
    </item>
    
    <item>
      <title>SHLUG Summit 2011</title>
      <link>//blog.shell909090.org/blog/archives/1969/</link>
      <pubDate>Thu, 03 Nov 2011 10:38:05 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1969/</guid>
      <description>这次有我的演讲，转一下转一下，大家来捧场。
&amp;mdash;&amp;mdash;&amp;mdash;- Forwarded message &amp;mdash;&amp;mdash;&amp;mdash;-
From: ghosTM55 &amp;laquo;ghosthomas@gmail.com&amp;raquo;
Date: 2011/11/2
Subject: [shlug] [公告]SHLUG Summit 2011
To: shlug &amp;laquo;shlug@googlegroups.com&amp;raquo;
Hi all,我们SHLUG的2011年年度大会来了!
作为惯例，我们的年会会面向Linux新手以及初学者来进行Linux的宣传与知识普及，这次也不例外 这次我们将会来到松江大学城，在东华大学进行一场200人规模的交流会，欢迎有时间和兴趣的朋友一同前去参加 时间: 2011年11月6日(周日) 下午2点 地点: 东华大学 松江大学城校区 报名: 不需要 入场费用: 不需要 演讲主题:
如何成为一名黑客
Debian GNU/Linux介绍
实战Linux网络部署
隐藏关卡:
Ubuntu 11.10 Release Party 和去年一样，在这里我需要:
一些朋友能够来帮助到我们运维好本次SHLUG的年会(拍照，摄影，现场话筒传递，入场引导等)
SHLUG的朋友在参与活动的时候尽可能坐在教室后排并请勿在演讲过程中大声讨论问题
大家对于此次活动的线上以及线下的帮忙宣传
在这里需要感谢东华大学开源社区的同学们的积极配合与帮助，为我们奔波于松江大学城各高校进行宣传 并且为我们找到了能够容纳200人的教室(具体教室号码尚未确定，我会在列表以及blog中进行更新，请持续关注) 欢迎各位参与本次年会并向我提出建议，谢谢</description>
    </item>
    
    <item>
      <title>收稿子啦，宅男买数码</title>
      <link>//blog.shell909090.org/blog/archives/1967/</link>
      <pubDate>Wed, 02 Nov 2011 11:13:20 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1967/</guid>
      <description>淘宝上东西很多，360buy东西也很多，电脑卖场多如牛毛，听起来买个数码产品是个很容易的事情。其实才不是呢，尤其是对于对数码有要求的宅男来说，买个设备要多困难有多困难。
贝壳上淘宝买一个充电器，要求也不高，5V/2A，可以用于我的台电P81HD平板。OK，上淘宝，找第一个卖家，狮王的四口充电器——结果，总电流不足，退货。第二个卖家，瑞能官方店——结果，有高频分量，在充电时无法正常操作，目前还在协商中。第三个卖家，三星的充电器——结果，充电有高频电流声，温度很高。gary说，他有个DELL的充电器也有类似问题。我很高兴的说，那是没事咯？他说，结果，爆了，连带烧了整个房间的电闸。然后拆开塑封看印刷，粗糙，肯定假货无疑，强行要求退货。第四个卖家，上去问，有货么？有货。真货么？真货。确定么？确定。我这么说吧，我不和您讲道理，到手后，我找三星干活的兄弟看。他说真货我就收货，他说假货我就退货，连邮费一起退。不退差评。
——先生？
——您好？
——还在么？
OK，这就是淘宝的品质。当然，我不是说淘宝无好货。Thomas老婆在淘宝上买的DIR-825路由器还是挺好用的，我在上面订花什么的也不错。问题是，对于产品挑剔的宅男来说，在淘宝上买东西是一个艰难的抉择。应该说，淘宝基本无真货。
那么京东之类的电子商城呢？
贝壳买过他们的两箱秋叶原六类线，结果其中一箱的中心龙骨缺失。我问他们怎么回事，他们就只负责退货。还好，退货，换发票的过程都是OK的，但是没有一个人出来说一句，这是为什么，也没有人道歉。看看京东上面比较热门的东西，基本都能看到旧货贴。啊——运气不好，终于让我碰到旧货了。看来他们也没靠谱到哪里去。
那咋办？
OK，贝壳简单说一下一个想法。
贝壳会收集您的文章，包括某个数码产品，您的购买时间，价格，个人评价，当然，最重要的，购买方式。因为文章要发在贝壳的blog上，所以您需要同意内容以cc-by-sa3.0相容版权发布。当然，文章会署您的名字。收集文章的前提是，我得认识您。您和贝壳是在哪里吃过饭，您帮贝壳解决过什么问题，物理世界里面互相有过交流。只要认识，我就会贴出，或者转发您的文章。注意，需要反复强调的是，里面需要提供购买方式。贝壳不介意那个卖家和您有没有亲戚朋友关系，只要这个东西是可靠的。为什么可靠？既然我认得您，我就相信您。一个人钻研半天技术，只为了其他几个宅买几样东西而说谎，这是不值得的。就好象贝壳写那么一大堆技术资料，开这么一个blog，不会为了几个钱的回扣专门骗你一回。因此，如果你认得贝壳，这个事情也是比较有保障的——至少你不会故意的被骗。至于运气好坏，个人感觉，这个就真不好说了。所以，如果您不认识贝壳，只是经常跑过来看技术资料的——那，就看您信不信了。不管您信不信，反正我信了。
而对于来挑选东西的宅男们，贝壳要说明的是。贝壳买东西的风格，是偏好产品的用途和质量，而无视价格的。所谓无视，既包括可能因为某个卖家不靠谱或者某个型号不靠谱而购买相对比较贵的产品。也包括某个东西虽然名声不显，但确实很好用，而无视东西的品牌。因此，您可能会问，为什么贝壳这里只介绍DIR-825路由器，还有那么多更物美价廉的呢？例如buffalo的某款。首先，可能因为贝壳的朋友只有人用过DIR-825。其次，贝壳知道buffalo的路由器都是单AP，而贝壳本身是一定需要双AP的。或者您也可能会问，为什么我们对苹果这样的东西，周边居然配了一个名不见经传的充电器/触摸笔。实话说，只要好用，我不在乎。
另外，我也希望从文章中挑东西的人，把您的经历也附加在下面。包括您买了同样产品，感觉如何？其他产品，好不好用？这也是给后来者一个借鉴。
好吧，废话半天，现在贝壳开始征集稿子了。
PS：个人希望，如果有买了小米手机量产版本的小白鼠，能够跳出来说说情况。贝壳希望入一个，可是网络上说法满天飞，不知道该信谁啊。</description>
    </item>
    
    <item>
      <title>P81HD，以及任意一种Android的翻墙</title>
      <link>//blog.shell909090.org/blog/archives/1965/</link>
      <pubDate>Mon, 31 Oct 2011 14:24:50 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1965/</guid>
      <description>假如，你有一台Android，不能刷机（厂家没提供ROM，也没有源码，而且可能锁了bootloader），没有ip_gre模块，没有tun模块，连iptables_filter模块都没有，那怎么办呢？没有第一个，就无法使用pptp/l2tp的内置VPN，没有第二个，就无法使用openvpn，没有第三个，就无法使用sshtunnel。如果你运气不好，这个东西连root都没有，肿末办？
很简单，你得先弄到Opera，注意Opera Mini没有测试过，据说不行。然后准备一台vps，上面不但要开ssh，而且必须在机器上有个代理。然后在地址里面输入opera:config，看到设定了？下面有一项proxy。按照参考[1]的方法设定代理，地址设定为127.0.0.1:1984。注意不要写成localhost:1984，后者不一定认。代理服务器用sshtunnel，注意不要用Socks5翻墙，必须用http模式。打开看看？是不是可以了？
原理很简单，sshtunnel使用redsocks来执行的全局翻墙。根据参考[3]，redsocks是通过iptables规则来将所有连接重定向到自身，然后包装成代理的。由于iptables_filter模块缺失，或者干脆没有root，这个路子走不通。但是启动sshtunnel后1984端口的翻墙链是好的，只是程序都不使用而已。Opear又给了我们一个自行设定代理的能力。因此，结合使用两种方法，能让你在没有模块，没有root的情况下，自行拥有翻墙能力。由于Opera只支持HTTP代理，因此你必须满足http代理翻墙要求（远程服务器上有代理，不启用socks5模式）。
参考：
1.Android下使用Opera实现Wifi代理上网
2.Android 平台的 SSH Tunnel 应用
3.redsocks on android指南</description>
    </item>
    
    <item>
      <title>一个充电器的小问题</title>
      <link>//blog.shell909090.org/blog/archives/1963/</link>
      <pubDate>Fri, 28 Oct 2011 15:45:06 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1963/</guid>
      <description>我不知道我的blog读者有多少是使用手机/平板来看我的blog的，估计不会很多。但是如果说有多少人用电容屏手机/平板，那估计不会少。那有多少人知道，充电器选择不好会导致触摸屏出现问题呢？
今天贝壳就有幸碰到了这个问题。P81HD，买了一个单独的蓝魔的线进行充电。USB2DC，2.5mm头，内正外负。不知道有多少人看出来了，DC的电气特性和USB有个很大的区别——不是，我不是说没有信号引脚，当然DC是没有信号引脚的——最大区别在于，USB定义了一根地线，而DC没有。因此DC的屏蔽能力比USB差一点。差多少呢？如果你的充电器是2口的，那就是没区别。。。
不过，无论充电口怎么设计，电气参数都是5V/2A。从ipad以后，这都成了usb充电器的标准最大功率了。另外科普一下，usb的四种常见电流，100mA，500mA，1A，2A。100mA是电脑连接小型设备时的默认功率，500mA是电脑USB口的最大输出电流。1A的就是手机充电器/非标准电脑口的输出电流了。至于2A，这是非标准功率，ipad用的。
5V/2A的功率是相当大的，在使用的时候，如果充电器不好，会造成触摸屏不灵敏，甚至无法工作。贝壳的P81HD配合上瑞能的充电器（旗舰店出的，应该是正品），在一个手指点击的时候，会出现额外的触摸。本来点在左下角，在右下角会多出现一根触摸点，一跳一跳的。本来贝壳自己还想不通是什么理由，周四聚会的时候，旁边的LTN同学给出了答案。如果你用了不合格的充电器，会导致你的手机无法在充电时使用。具体可以看这里。简单来说，所有便携式开关电源，都会造成电容屏手机无法正常工作。不过有些开关电源做的比较好，在输出上加了滤波环。如果自己使用带有滤波环的数据线，一样可以缓解这个问题。
我找瑞能旗舰店的人反映，他们说让我打客服电话。先打了一个福建的电话，0595-22636088。接电话的是个售后，我描述情况后，他找了一个技术。技术告诉我，这情况他也没碰到过，我是头一个反映的。他们也没有办法，要退货找瑞能旗舰店的人。然后，旗舰店的又给了我一个电话，是800的全国电话，8008585185。打过去，这个客服靠谱多了，说这个情况他们见过。一个iphone用户，也有类似情况，重启后问题消失。我说我重启N趟了，他说，这个就不知道了，我找技术问问。
不得不说，人家做服务的态度真的非常好。过10分钟，电话打过来了。说，他们的产品都是经过严格的出厂检测的，应当不存在输出电流不稳的情况。我这个情况有可能是因为在使用时，瞬时电流超过2.1A，导致软件故障。我说，你知道我的设备的功率是多少么？他说，不知道。我说，电池是3.7V*4Ah的，应当是15Wh左右。可用5小时，功率应当是3W。除以输入电压5V，电流是600mA。如果充电电流维持2A不变，加入一个0.6A的工作电流，你这个充电器早严重超载了。这个理由说不通。他说，那要么你去我们上海的维修点，带着设备，他们会给你当场测试。如果确实不解决问题——你那里买的？我说，淘宝的瑞能旗舰店。他说——那个没事，他们会当场给你退货的。如果设备烧掉了，我们也有保险的。
当然，说是这么说，不过地址是在南站那里，贝壳过去太困难了。反正我把这个过程说给猫咪听，她说，废话什么，直接给差评得了。卖家的东西在客户这里用出问题，应当负责运费给换一个。让客户自己带来带去非常不负责。然而作为一个死理性派，贝壳比较反对没有弄清事情就直接下结论，何况人家态度很好。（当然，这些承诺你信不信就是另一回事了）因此打算找个人检测一下输出，看看是否带有交流。
然后，贝壳和小强说起这个问题，小强借出了他自己的ipad充电器。这个是上海苹果官方店里面买苹果附送的，带序列号，绝对正品。接上去——一样不行。可见并不是瑞能的问题，而是P81HD的屏幕太容易受到干扰了。当然，瑞能和苹果充电器本身有高频分量是一定的。为了解决这个问题，贝壳行险，在淘宝上买了一个三星galaxy的充电器，就是thomas借给我的那种。到货接上去试了试，一点问题都没有。这说明，三星的充电器在质量上比苹果的好多了。</description>
    </item>
    
    <item>
      <title>ApacheBench在性能分析时的一点注意</title>
      <link>//blog.shell909090.org/blog/archives/1961/</link>
      <pubDate>Thu, 27 Oct 2011 16:47:36 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1961/</guid>
      <description>废话不多说，上干货。
http://blog.miniasp.com/post/2009/10/07/Explain-ApacheBench-ab-for-the-Failed-request-field.aspx http://stackoverflow.com/questions/579450/load-testing-with-ab-fake-failed-requests-length 简单来说，如果你用ab压网站，发现很多Failed requests。只要这些都是Length，就不算数。</description>
    </item>
    
    <item>
      <title>浮生半日</title>
      <link>//blog.shell909090.org/blog/archives/1959/</link>
      <pubDate>Wed, 26 Oct 2011 11:06:24 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1959/</guid>
      <description>先说一下，文写的是上上周去北京的事情，因为前面堆积的文太多了，所以拖到现在才发出来。
早上先去了中关村。这次出来匆忙，忘记带usb数据线和otg线。结果跑到北京发现，要多呆几天就势必难免需要给手机充电。而我带了移动电源，却忘记带数据线。。。
好久不去海龙，里面的商贩更加乱来。一根USB数据线，开出天价来。开始一个开20一根USB，35一根OTG。USB成本一般就是1元，最高不会超过5元。老子就算是旅游，也不是来当冤大头的好吧。何况老子15年前就在这买电子产品了，那会你还不知道中关村在哪呢。换下一个——我靠，改30了。再跑到HTC的专卖店，更加夸张了，看了一眼接口，报价50。恩，莫非是我没说明白。G2手机的数据线比较特殊，是T型口多一个角。这种线无法连接其他设备，但是普通USB线可以连接这种手机。我只是要一根普通USB线——50。
好，你狠，我找下一家。下一家倒是靠谱很多，USB线10元，OTG20，虽然小贵，但是可以接受了。而且USB线和OTG的质量颇好，不算太冤枉。我干脆就让他们介绍一家3G上网卡店（通常介绍客人过去都是有回扣的，或者有合作，关系比较好）。中兴MF633的上网卡是在说明中明确表示支持Linux的，不过他们没有。所以我就挑了一个别人测试下来，肯定P81HD肯定支持的网卡，MF190。他们开价190，比淘宝贵了30。好吧，去掉邮费，这个也算合理利润。何况我要求现场试货，可退还的。
测试下来，一切正常，我现在有3G上网能力了，很高兴，于是紧接着，乐极生悲了。我的P81HD挂着耳机线，出门的时候剐了一下，摔地上，贴膜喇伤了。真是无妄之灾，幸好，这个可以破财免灾。找个贴膜的，说P81是8寸4:3，尺寸特殊，需要裁。裁就裁吧。贴膜的是个汕头来的女的，手艺还不错。整个膜的中间没有气泡，手感比上个膜好，只要20。唯一的问题是屏幕下方部分边角，没有贴合平整。
午饭还是在鼎好楼上吃的，依然是京东肉饼和酸梅汤，上次和猫咪一起吃的东西。不过今天的人更加少了，看来附近卖场一家接一家开门，对他们生意造成了很大冲击。酸梅汤比上次给力，可是肉饼却太难吃了。吃了半个，实在没胃口，加买了一些锅贴——呕，比肉饼更难吃。我看午饭就这样吧，再吃下去保不齐是个悲剧。
猫咪说有空带点吃的回去，下午就跑一趟王府井吧。中关村去王府井最快的方式是四号线，中间要过西单。我索性在西单下车，逛了逛西单商场和图书大楼。大楼前的景观如故，就是稍显破旧。西单的一堆商场人山人海，比以前热闹多了。不过可惜的是，以前连着的两家KFC全没了。吉野家开了进去，外面修了一个小楼卖衣服，小下沉广场完全看不出样子了。临街一堆卖衣服鞋子的小店全拆掉了，改成了大卖场。周围车多，人也多。人不管车，横冲直撞。车怕人，左躲右闪，步履艰难。今天还看到了一辆京?00010的车，开的倒是很规矩，红灯停车，避让行人。不知道这种车的车主跑到西单来干嘛，不会是来买东西吧。。。
西单到王府井不远，不过我不高兴坐地铁了。过地道坐99路，一路能看到天安门广场什么的，算是短途观光吧。西单地道里面已经有警察站岗了，里面一个卖艺的都没有。这里曾是西单女孩起家的地方，现在西单女孩上了春晚，这却没人卖艺了。不止地道，整个图书大厦前面，还有左安门车站，都是密集的警察执勤。不知道是惯例还是今天有什么事情。
王府井这地方也算挺熟悉的，以前有空进城来玩，一个选项就是王府井。现在车水马龙更加了不得。不过热闹归热闹，其实商业氛围非常浮躁。我在王府井走了半天，找猫咪要吃的东西。结果连食品商店都没几家。大多数都是金店，工艺品店，高级餐厅，服装，玩具。日用品和食品几乎没见到。就算有，我找了一圈也没有。走的腿都快断了，好吧，试图在商业购物中心找日常吃食是我的错。说打算找一家一茶一座给自己的设备充电，顺便上个网，休息一下，喝点东西。点评上找到一家，走过去，保安说这里现在没有了，要走更远的路才有。好吧，别的店也可以，只要有电源，我自己有3G网络。不过我走了10多分钟，没有一家店里面有电源的。我了个去阿，我在南京路上随便找三家商场，问他们的保安。基本就能找到一家店，廉价的休息喝饮料，而且还有电源。好容易找了一家星巴克，居然还客满，没地方坐。好吧，鉴于我腿实在受不了了，我干脆到大食代去坐坐吃东西，顺便找一家小店给我的设备冲个电。
今天在大食代碰到几件很有意思的事情。我刚开始吃锅贴的时候，有一对夫妻在吵架。男的是广东口音，女的是北京口音。量过人吵架的事情，听起来也有地域风格特征——但不是地域歧视哦。好吧，听夫妻吵架比较无聊。然后是喝果汁的时候，看到两个中国人样子的人在说英文。当他们两个不说了，我用英文问了问其中一个，样子比较像白领的年轻男性。他说他是新加坡人，所以只会说英文。我再稍微听了点他和老板的谈话，老板和他一样，是新加坡人，跑到中国经营一家小小的店面。老板说，也说不上喜欢不喜欢，反正就是混饭。白领样子的青年说他是来中国旅游的，去过一大堆地方，具体我记不请了，只记得一个蒙古。老板问他蒙古如何？他说还不错，不像想像中的差。
在这个男人的旁边，是一对打扮入时的年轻姑娘。最奇怪的是，两个人用手语交谈。神奇之处在于，两个人一边吃东西，一边用手语交谈。甚至端着一个碗，打手语，喝一口，打手语，换手，打手语，夹菜，还是手语，吃下去，手语继续。看起来好像日本的手印表演一样，但是不是特意留意这桌，一点看不出突兀。看来无论什么情况，八卦都是女孩子的天性和本能。更奇怪的是，两个人手语流利，显然都是长期使用的。作为残疾人（没有鄙视的意思），两个姑娘都穿着入时，不知道她们是什么情况。
再旁边，是两个老外，老老实实吃东西，没啥好说的。老头很像好莱坞电影里面的美国农场出来的顽固老头，旁边的女士不时的根他说话，他就是简单的点头，吃饭，吃饭，点头。旁边的女士一点也没有奇怪的和他继续说，他也没有不耐烦，用筷子夹起——一颗鱼丸？！我去阿，哪个美国顽固老头在好莱坞电影里玩出这手都可以当成杂技了好吧。说话间，外国老头又熟练的夹起一颗鱼丸吃掉。
再旁边——好吧，我都奇怪为什么在短短一个小时内，能让我看到这么多有意思的东西——他们是一堆青年男女，男的坐左边，女的坐右边，有个坐错位置的，和旁边人贴的很紧——为什么你懂的。一帮人的年纪都不大，看起来像高中生的样子。他们的奇特之处在于，他们中有一半白人，而且是金发碧眼白皮肤，白到发红的正宗白人。当然，仅仅是这个还没什么奇怪的。问题是，其中有一个白人男孩身边是亚洲女孩，一个白人男孩身边是亚洲男孩，剩下的人不停的在照相。绯闻女孩剧组出外景来北京了？
出门来，看到一对情侣。男的很正常，女的穿着执事服，梳着两个包包，单从头发来看，有点像银魂里面的神乐。画着很夸张的妆，一看就是cosplay。不过刚刚看的奇怪事情已经够多了，再来一个我也不怎么奇怪了。</description>
    </item>
    
    <item>
      <title>旅行感想</title>
      <link>//blog.shell909090.org/blog/archives/1957/</link>
      <pubDate>Tue, 25 Oct 2011 16:26:16 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1957/</guid>
      <description>大巴最好的位置在中间靠前，靠近门的位置。后面比较颠簸，下坡的时候刹车片又有味道。前面出事故的时候比较严重。
每次履行都肯定有计划外的支出——还不包括购物和消费——说白了就是明抢一票。很多消费，明面上说是非强制的，但是你不缴，肯定麻烦多多。这次旅行，几乎必须缴的自费项目有（没有强制项目），大理古城电瓶车，一人30，观光缆车，一人172（事先在旅行合同中说明），玉龙雪山景区车套票，一人50（事先在旅行合同中说明）。洱海游船，上船是站着的，要座位要么抢，要么15一人包座位。
跟团旅游，赠送景点基本是不去的，除非这个景点不但不收门票，而且反而会给旅行社人头费。当然，给人头费的理由是客人在里面要有可观的消费。路上时间基本是忽悠的，导游告诉你一个小时，那差不多按照一个半小时来计算就好。搭配景点基本是不值得看的。要评价旅游项目，就要看主景点的名声和时间。尤其注意细节。例如大缆车可以看看雪山，小缆车基本就白来了。
组团的几个常见问题是，餐标太低，不接受地陪投诉，变相购物，行程太紧。旅行团价格战的结果就是，大部分团的餐标都很低。桌子上吃的都是很难吃的东西，这就失去旅游的乐趣了。要自己加餐，一个是餐馆必须接受，另外如果用餐时间过长，其他客人等待，大家有意见，导游也会催。
很多旅行社写明，对地陪导游的投诉必须在旅游结束时的地陪卡上反映，回来后不受理。您别傻，这就是不接受地陪投诉的意思。您别以为有问题等旅游结束的时候可以在意见卡上反应，好点的情况是，导游到一半的时候，就找你们来填卡了。要么是填了卡才敢给你出问题，要么就是你人还在导游手里，人生地不熟，有意见敢写么？差点的情况，据说有导游上车就让你填卡的，你是填呢，还是不填呢？最糟情况是，你连卡都见不着，导游直接找了几个人，自己填掉了。所以，凡是不能以行程结束后多少天内为基准进行反应的投诉，一概可以认为是不接受投诉。
至于变相购物，这点见仁见智。我出去玩，大部分时间都有购买当地特产。作为买家，我总是试图买个物美价廉的东西。不过，除非是当地人，否则物美价廉是不可能的。所以购物基本呈现两级特征，高价正品，还有低价无保。如果购物能够事先说明，符合个人需要，并且能负担部分旅游费用，那我也不介意购物。然而跟团购物的问题是，导游往往会为了利益，使用不违规的最大力度促销。这样完全失去了旅游的乐趣，变成购物了。云南这里号称没有进店，但是导游在车上会介绍螺旋藻，翡翠什么的，不能不听。要买，到地方一会就买了跑。导游直说，他工资都是从里面赚的，我们购物的钱，他提百分之三的介绍费。然后这些钱要缴掉百分之七的税，在一个月没有投诉后拿到手。这个算不算购物，是否影响心情，就自己评价吧。
最后一个问题，就是行程太紧，这点最影响心情。为了增加卖点，旅行社总是试图在短行程内加入最多的景点，很多客人也以为景点越多越好。其实每个景点多少时间都有相应的评估，旅游总体时间以这些时间略宽松为好。相对来说，自由行给出的时间评估都是比较准的。如果一次旅游上景点过于密集，那么每个景点的时间就会减少，景点间的路程还会压缩时间。最后就变成了上车睡觉，下车尿尿，到景点拍照，回家什么都不知道。
如果自己出行，长途旅行最好的方式是使用公众交通，例如火车，飞机，等。自驾游通常限于不超过400公里的城市。原因很简单，不疲劳驾驶的情况下，最高可以一个人驾驶3小时，中间休息一次就好。即使高速上开到120，也就360公里，加上头尾，自驾4小时出去玩，已经是单人驾驶的极限。再远，需要多人轮流，而且车上太累，不如直接火车飞机。
到当地后，有条件的可以租车游玩，没条件的可以包车游玩，最没条件的公众交通。不要随意跟团，团很不自由。要跟团索性在外地直接定好了团过去，到了当地跟团就实在没必要了。不过三种方式各有缺点。租车需要熟悉情况，碰到当地人拦路收费，野外抛锚没信号，虽说不一定出事，但是一定影响心情。包车一定要熟悉师傅，最好找靠谱的朋友推荐，否则不出事则已，一出事非小。就算拉到个山沟沟里面涨价，你也没什么办法的。公众交通不封闭上下，要注意哪里上车，哪里下车。尤其在一个陌生的地方，需要自己处理所有问题，比较辛苦。
出发前，先确定你所需要的东西都带上了。如果去西部游玩，尤其注意带一个3g混合路由器。西部往往有时没有手机信号，有时只有普通网线，有时只有手机信号没网络。所以同时支持手机3g和有线，又自带电池的路由器相当有用。当然，如果您不是个计算机控，那当我没说。我只是假定来看我blog的都是计算机控而已。长期坐车的，带好围着脖子的靠枕和眼罩，耳塞。准备点黄连素片和蒙脱石散，闹肚子和便秘是旅行常见麻烦。
其实个人认为我们需要旅行社做的，最好是来回机票，酒店预定，景点门票。前两者有，叫做旅行社自由行套餐。最后一个我不知道有没有。</description>
    </item>
    
    <item>
      <title>小悦悦。。。</title>
      <link>//blog.shell909090.org/blog/archives/1955/</link>
      <pubDate>Mon, 24 Oct 2011 10:35:38 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1955/</guid>
      <description>已经没什么好多数了，早在数年前，我曾说过，彭宇案不改判，中国社会迟早会路见不平，袖手旁观。不出两年，老头子摔伤已经没人敢扶。不出五年，小孩子被车压伤已经没人敢救。再过五年，就算街当中有个MM被当众勒索强暴也不会有人管了。
不知道现在彭宇案的主角们如何了，趁着人在，赶快改判是正道。不仅是彭宇案，类似案件也必须全部改判。法院，包括高法必须向社会道歉，以扭转这个风气。
另外顺手提一句，也别骂小悦悦案子中路过打酱油的那帮人了。幼童摔倒碾伤，司机不下车救助是法律问题，没有做到，当罚。父母未尽看护责任是法律问题，当骂。如果确实生活所迫，力不能及，当责。责怪路人者，是否自己在类似情况下能挺身而出呢？如果可以，彭宇案的时候，您有没有为彭宇挺身而出，上诉不平呢？
我只能说，景德镇这个地方，除掉部分在监狱中的人，和部分精神病人外，谁都没资格责怪路人。</description>
    </item>
    
    <item>
      <title>十月五日</title>
      <link>//blog.shell909090.org/blog/archives/1953/</link>
      <pubDate>Fri, 21 Oct 2011 17:22:15 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1953/</guid>
      <description>今天本来安排了鲜花集市，不过猫咪对这个兴趣不大。我们就和导游说，放弃了这部分行程。今天广州还来一位同学，云南局的同学带着我们和他们去民族村。
中午我们又在乡村小榭吃的午餐。这次云南局同事做东，人又多，就多了好几道菜。茉莉花炒鸡蛋很有特色，小米椒炒罗非鱼也很赞，就是辣了点。广州的同学刚刚结婚，这次是来休婚假的。他们刚刚结婚，比较辛苦，所以上火了。吃吃这些东西很好吃，就是不敢吃太多。
下午我们就去了乡村小榭旁边的民族村。不骗大家，真的很大。我们一点不到进去，到四点半五点出来，只逛了一半多一点。建筑很有各个民族特色，可是对于我们不搞学术的游客来说，实在是记不住什么。藏族，摩梭人比较出名，也许还会记得。傣族侗族彝族瑶族白族比较大，能记得名字，可是却想不起文化特征。至于纳西族，我算是认得他们了。傈僳族，它牛族，独龙族，回头谁还记得啊。民族表演，跳的很热闹，我也说不出和阿里郎的区别。实话说，一段时间里挑一个特色民族，和游客深度接触，倒是比较好的让游客体验少数民族风情的办法。
广州的同学很幸运，他们加上婚假，正好错开了国庆高峰，逆峰的结果就是超便宜的买到了去丽江的机票。他们和我们时间差不多，但是节约了车上的时间，又错开高峰不用排队，所以可以定定心心的走完所有的景点，例如我们没去的崇圣寺。唯一的缺点是门票价格太高。例如石林175，旅行社票价只要130，差不多25%的折扣。我们的所有门票大概1000-1100，旅行社大概700-800能拿到票。不过贝壳觉得还是这种旅游方法比较有意思。没有太赶的行程，没有早出晚归，有好吃的食物，这才叫旅游啊。</description>
    </item>
    
    <item>
      <title>十月四日</title>
      <link>//blog.shell909090.org/blog/archives/1951/</link>
      <pubDate>Thu, 20 Oct 2011 11:09:13 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1951/</guid>
      <description>云南行更新停了好久，中间好多事情。贝壳去北京出差拉，P81到手拉，jobs挂拉，上海地铁出问题拉。OK，事情差不多了，我们继续。
今天的行程比较简单，七彩云南，石林。我们大约八点出发，十一点左右到了七彩云南，在里面停留到下午两点，包括一顿午餐。
据说七彩云南是云南旅委的强制要求，凡是经过昆明去石林的旅游团都必须去。里面是很多旅游周边商品，主要是玉石和茶叶。据云南局的朋友说，七彩云南的东西绝对没有假货，但是价格比市面上贵出两三倍。今天去看的时候，银价是31元。翡翠看起来很漂亮，导游车上也介绍了很多辨识的技巧。不过大家千万记得一点，不懂不买，半懂更不要买。一点不懂，知道自己不行，买东西手下都有分寸，或者认品牌，或者托朋友，总之大多不会被乱斩的。但是懂一点点，往往就不知道分寸，仗着自己“内行”在那里乱买。不懂到没事，吃亏大部分都是懂一点点的。不仅是翡翠，大部分的东西都是这个道理。
里面的茶叶大多是庆丰祥茶庄的，都是好东西。不过云南的大叶滇红，就是贝壳喝过的那种月光金枝，居然买到180。这个茶叶的正品贝壳查过，前年买到90，不算通胀贵了一倍。庆丰祥茶庄为了促销，还搞了茶艺表演。不过根本没什么东西。茶叶讲解一句不提茶文化，如何喝茶，如何拿杯子。全部都在说茶叶如何增值，如何保健。讲解员搞促销，茶艺师一字不发。而且居然喝过滇红的杯子直接喝熟茶，再喝生茶。其余什么普洱茶只要通风也说的出，完全没提避免日晒。当然，你买了茶会不会提醒贝壳就不知道了。
我们不会不买，会的，知道在宰客也没道理伸头出去。所以就买了点土产，蘑菇，精油什么的。好歹不贵，又是完全不懂，眼不见心为静。一方面带点特产回来，一方面也算对导游有个交代了。
另外，特别点名批评一下他们的午餐，还有驴妈妈网站，七彩云南购物点两个单位。自助餐，吃的不怎么好，而且管理混乱。我们排队十多分钟才轮到，他们一位叫朱继年的工作人员告诉后面一堆人，不用排队了。结果我就发飙了，当场骂了回去。然后我向导游投诉，他说这个事情需要直接向七彩云南反应，不归他管。但是我在园里又找不到投诉电话，所以打算回去投诉。另外，我也挺质疑他们的翡翠茶叶半年退换承诺的。对着还在园内的游客，管理这么差，投诉电话都找不到。对远在他乡的顾客，如何保证兑现承诺？
七彩云南过后，就是石林。石林是彝族自治区，所以当地男的称阿黑哥，女的称阿诗玛。导游是当地的一位阿黑哥。他笑称石林是远看大石头，近看石头大，大人看脑袋，小孩看屁股。果然，里面人山人海都是人。景色还算漂亮，不过很多石头由于被游客反复抚摸，已经出现了类似包浆的效果。石林景点一般只来一次，第二次就没意思了。</description>
    </item>
    
    <item>
      <title>jobs</title>
      <link>//blog.shell909090.org/blog/archives/1949/</link>
      <pubDate>Wed, 19 Oct 2011 12:18:58 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1949/</guid>
      <description>不是果粉，不想跟风。
不过他的想法实在的改变了这个世界，仅这点而言，值得我们记得，有这么一位人，在世界上走过。</description>
    </item>
    
    <item>
      <title>P81HD的特性和问题</title>
      <link>//blog.shell909090.org/blog/archives/1947/</link>
      <pubDate>Tue, 18 Oct 2011 10:50:17 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1947/</guid>
      <description>情况简介和简评 1.续航问题 5小时，正常使用没有问题，包括看电影。如果比这个短，那就说明你在待机时有程序在工作。这个细节不解释。如果开启3G，或者拖其他OTG设备，大概会减少到2小时左右。
2.3G问题 别的不敢说，配送的eth网卡和MF190联通3G网卡可以顺利支持。 接入3G网卡后自动识别，大概需要20s启动和初始化。监控流量可以用3g watchdog。我一个月包了200M，估计用不掉。
3.物理按键问题 Home键的设计者是个白痴，这个键能不能换个地方？我每次拿的时候，都很容易误触。待机就唤醒，开机就程序消失。此为P81HD最白痴的特性，没有之一。 没有物理的回退键也是个错误，状态栏经常崩溃，消失后系统就没法用，没有回退键。有时会自动启动，恢复正常状态。有时三五分钟依旧不恢复，必须重启机器。这是P81HD第二白痴的特性，没有物理回退键，学3.0用状态栏，状态栏又不稳定。
4.屏幕问题 屏幕很清晰，但是细看的话颗粒很粗。从右边和下边看，屏幕发黑，典型的非IPS屏问题，视角很小。
5.性能评测 实际能够使用的最大内存是282M，其余应当是系统使用了。去掉系统进程后，可以用于程序的内存大约是150M。CPU基本都够用，安装和删除程序很快，输入无卡顿。3D加速一般，切水果时略卡，可接受（我打了550多分）。看flash的时候有小幅卡顿，不严重，可接受。有少数时候，系统会失去反应。怀疑是内存耗尽，回收导致CPU耗尽。发生频率不高，每次大约需要10-20s恢复。在驱动3g/同步/后台发生其他行为的时候，前台程序明显很卡，甚至会丢失按键，严重时无法流畅使用。估计是前台程序的优先级调整有问题，在htc g2上也有类似问题，可能是android系统的通病。使用双核的系统明显没有这个问题。
6.手感问题 512g，略重，再挑的时候希望轻一点。由于Home键的存在，手持的时候总要避开下方，并不很方便持拿。
7.零散错误 在首次连接3G网卡的时候，出现方向显示和输入错误。现象是显示方向和正常一致，但是点击左边，右边出反应。 在连接3G网卡的时候，反应缓慢。怀疑是由于开始同步和3G驱动导致CPU大量被使用。 周边的点击有时会错位。 有时莫名其妙死机，需要捅菊花。一周内发生十多次，不过其中有一多半发生在系统调整/安装程序的时候。
可解决的，或者不是问题的问题 1.root方法 这不是个问题，装GingerBreak，直接重启，不多废话。
2.充电问题 这是P81HD历来反应的第一问题，其实P81HD充电问题不一定和root有关，我没root的时候也碰到过。主要是这样的。你插入充电器，看到充电符号的时候，其实充电器不一定工作。只有你看到电量上升，才代表充电器工作正常。而且，当线被动过后，也可能会变成假充电状态。有充电符号没有实际充电。 设备不支持USB充电，但是很幸运的，充电电压是5V，电流0.5-2.5A。所以你可以买一条USB2DC线路，将USB的5V电压直接充上去。原装的线也太短，不爽。
3.不支持联系人/日历同步，没有gtalk的问题 默认的rom里面没有，你可以从这里下载到合适的apk文件。这些是从我手机（htc magic chock4 2.2 rom）中提取出来，2.2用的。安装后可以正常工作。 本地下载链接（请不要盗链）：GoogleCalendarSyncAdapter.apkGoogleContactsSyncAdapter.apkgtalk.apk
4.不支持的程序 不要用flash11，至少到目前为止不行。用flash 10.3就好了。链接在这里。
5.wifi channel 12/13 中国设备规范中都不支持这两个频道，不要想了，在中国你就不应当使用这两个频道。
6.wifi tether 默认机器是不可以adhoc的，不但不能接入其他设备（例如手机）开的adhoc，而且连自己设定里面做的wifi共享3G的功能都不能用，用之会死机，必须捅菊花。不过你可以用barnacle这个程序。这个程序很牛，可以绕过wpa_supplicant工作，直接将wifi置于adhoc模式。这样其他机器能看到这个共享点。但是注意，由于android无法连接到adhoc，所以，你手机做出来的wifi热点电脑能用，P81HD不能。P81HD做出来的，电脑能用，手机不能。
不能解决的问题 1.adhoc连接问题 android设备无法连接到adhoc网络。据说这个特性是wpa_supplicant过滤了adhoc模式的所有网络所致。如果我闲的蛋疼，会去研究一下怎么绕过这个机制。直接使用网络上的补丁会导致网络无法连接。
2.vpn问题 默认没有额外的kernel modules支持，没有openvpn文件，没有busybox工具。busybox可以安装busybox installer来进行安装，openvpn可以安装openvpn installer来进行安装。但是即使完整安装工具链，也没有办法加载tun模块，使用openvpn连接。cifs没有测试过。 pptp/l2tp测试无法连接，服务器日志表明连接后马上断开，原因未知。 安全隧道测试无法连接，原因未知。</description>
    </item>
    
    <item>
      <title>北京护照申请攻略(第二本)</title>
      <link>//blog.shell909090.org/blog/archives/1945/</link>
      <pubDate>Mon, 17 Oct 2011 10:35:25 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1945/</guid>
      <description>今天跑到北京办理新护照，才发现网络攻略需要大幅更新了。首先，北京原先办理都在东城区出入境管理处，但是现在普通公民护照业务已经不在这里办理了。我去了金宝街的东城区办事处办理，也可以去其他地方，不用考虑户口所在区问题。从朝阳门北小街到金宝街可以坐674，办事处目前是周一到周六9点到17点办公。
金宝街这里贝壳干过半年，还算熟悉，不过这个办事处倒是头次来。流程是先照相，然后填写材料。必须照相，自带照片只能用于申请表，不能用于护照制作。即使办理过，也没有上次的数据留存。如果没带照片，加30可以把照片打出来当大头照用。照相本身免费。照相时必须注意，要穿深色衣服，最好有领。如果照片不过关，即使照相这里通过了，办理业务的时候也可能退回，还得重照，非常麻烦。
照相后，找人剪下照片，并且填写材料。然后找复印柜台复印身份证，户口本，上本证件(如果有)，一张五毛。拿这些材料去咨询，他会检查材料和表格完整性。如果没问题，就会拿到一个号码。排队后，有人会帮你办理。你的旧护照会被剪去角交还，并且给你一张白色回执。护照200一本，港澳通行证100一本。护照加注20，港澳通行证一个20。贝壳办理了护照更新加注，港澳通行证加港澳各一，360，比第一次的140翻了三倍。
回执在旁边缴费(这点我一直不明白，为啥不一个地方办理，非要我们拿脚当流水线，就算是依次移动也好阿)，然后就可以凭回执到期领取了。也可以邮寄，一本本地21，外地29。两本本地28，外地36。这次贝壳办理整个手续，总共付426，耗时大约40分钟到一个小时。有需要的朋友可以参考一下。</description>
    </item>
    
    <item>
      <title>我擦，又回来了</title>
      <link>//blog.shell909090.org/blog/archives/1943/</link>
      <pubDate>Fri, 14 Oct 2011 12:49:48 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1943/</guid>
      <description>这忖劲的，闪了十年整后，我又跑回了北京。半夜两点，二号航站楼，大巴出去就是航空食品公司，再过去是空无一人的彩虹桥。再下去照例是修了20多年，小学时候就参观过，现在居然还tmd在收费的天下第一收费站。窗外看看，靠，辅路还tm跟那用着呢，就多了根机场快线。
从车窗抬头向上看，北京的夜空很漂亮，今天又是月圆之夜。以前经常偷偷跑出来看月亮，被爸妈打个半死。没想到多年后，有一天我会看到北京这么漂亮的夜空，而且不看不行。不知道明天从塔楼往外看，能不能看到碧空如洗的蓝天和连绵不绝的燕山。
不过这次估计是我头次在机场高速进四环的时候没堵车。别说堵车了，车都不见几辆。京密路上车也很少——有几个有精神半夜三点不睡觉跟大街上飚车啊。这师傅还真tm牛，一辆大巴居然开上了100。发车不过十分钟，就过了牛王庙，跟国展停了第一站。这地跟原来差不多，就多了几个字，栏杆换了一套，漆皮完好。往前开，双安商场依旧灯火辉煌。
改变的从来不是这个世界，改变的只有我们。</description>
    </item>
    
    <item>
      <title>十月三日</title>
      <link>//blog.shell909090.org/blog/archives/1941/</link>
      <pubDate>Wed, 12 Oct 2011 16:47:53 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1941/</guid>
      <description>今天从丽江出发，到大理洱海玩，睡在楚雄。早上八点出门，九点多就到了丽江旁边的观音峡。叫是叫的很好听，其实本地人都没听说过。导游说是一个浙江商人开发的，看看就好，不要去烧高香。进去看看，全是人工景点，里面还牵扯出徐霞客来。其实严格来说，全国每个地方往深里查，基本都能查出个啥名人来。搞不好一个破水潭经过专家考证，会变成传说中的桃花潭。大部分不是冲着文物去的就是冲着旅游去的，观音峡也不例外，就是扯虎皮拉大旗的宣传。
十点多出发，大概十二点到了上次的兄弟鱼庄吃饭。鱼汤里面放了豆腐，比上次的水准有所下降。我们觉得吃不大饱，几个人一合计，自己问老板加了两个菜，吃的非常好。一人多出了大概15，比我们的餐标还高，不过按照我对旅游的定位——非常值。吃好午饭十二点半左右出发，两点到的龙龛码头，坐两点半的游船，三道茶表演就在船上。三道茶就不介绍了，这里有比较详细的解释。作为批量游客，我们拿到的杯子当然是小号纸杯，没那么好的水准。三道茶都有特色，猫咪喜欢甜茶，贝壳喜欢回味茶。表演还不错，一帮姑娘上去又唱又跳的。上面跳舞的白族姑娘都很漂亮，看起来觉得好像应该有少数民族血统，表演也没设陷阱讨钱什么的，总体来说还算值得。
不过游船值得好好说一下。游船定时出发，到罗荃半岛停40分钟，金梭岛停20分钟。过期不侯后果自负。船上去后，座位是靠抢的。想舒服点？船上有卡座，自己掏钱，我们是一人十五。服务员还做了一笔糊涂帐。我们掏了100，两个人，服务员找我们六十，开了两个人的票子，上面写缴了六十。猫咪忘记数钱了，所以也没法找人家了。船上面写着，要像保护眼睛一样保护洱海，洱海水也清澈，但是水面上飘着一堆可疑的泡沫，不知道是什么。莫非是自插双目？
罗荃岛上面有个庙，看看风景就好。还有个塔，不过在维修，也就没有靠近。前面是一座新修建的塔，门口有一堆操着东北口音的人在讲解少数民族风俗和佛塔参拜规矩。再向前，爬上来的坡上面，全是卖玩具卖吃的的小贩，和全国各大景点没什么区别。金梭岛就有特色多了，上面全是卖吃的和食物的，没有景点。猫咪买了熟的菱角，很好吃，可是很硬，舌头都会扎破。上面炒面，凉粉什么做的一碗粉要五元，吃倒是还不错。
洱海很漂亮，可是游船就很无聊，又可是不坐就看不到好东西。旁边是大理古城和崇圣寺三塔，在洱海上可以看到。可是我们去的时候天气比较阴，光线不足，相机没有三脚架，照不到清晰的照片。如果有条件的话，贝壳建议旅行不要太赶，慢慢玩慢慢看。洱海古城崇圣寺大概要玩掉一天半的，旁边还有一个苍山森林公园，我们远远能看到缆车。我们这次太赶了，下来就全在照相上厕所，被导游催着赶快赶快赶往下一个景点。但是云南这里门票超贵的，自己玩门票钱太多，比吃饭住宿还多。
晚上在楚雄吃野生菌火锅，说是说野生，其实就是火锅。菌类很多都是人工的，汤还可以。两餐并一餐后，我们还吃不大饱。可见旅行社为了抢生意，餐标已经低到什么地步了。</description>
    </item>
    
    <item>
      <title>十月一日</title>
      <link>//blog.shell909090.org/blog/archives/1939/</link>
      <pubDate>Tue, 11 Oct 2011 18:00:36 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1939/</guid>
      <description>首先说明一下，为什么十月一日这篇在十月二日这篇之后。因为这篇本来成功从galaxy上面同步到了gmail里面，但是错误的被手机所删除。由于同步，gmail中很快也找不到了。所以我被迫从galaxy中再弄出原始版本底稿，然后重新修润了一遍。这花了一点时间，导致这篇东西比十月二号更加晚才发出来。
今早发生一件搞笑事情。预定是我们退房，旅行社派大巴来接我们。结果实际到的时候，大巴是来了，但是40多个人，只来了30人的大巴。早上去的人坐着，晚上去的人只有站着了，车位非常之拥挤。这点需要着重批评一下驴妈妈网站和景爱旅行社接送部。后来到了确认，旅行社把人数点错了。而且由于调度，我们出门比预定晚了将近一个小时。结果上来看，这直接导致了我们后面的大堵车。
今天的行程基本乏善可陈，就是坐车，持续不断的坐车。八点从昆明出发，十一点在楚雄吃的午饭，大约160公里，开了四个小时，比预定的（估计是平时时间）两个半小时增加了很多。十二点不到出发，五点多一点才到了大理，几乎将近五个小时，比平时增加了一倍。主要原因是下午在祥云县过去一点的地方，碰到了一场大堵车。一条隧道，两车道，却左道封闭。结果并车的时候很容易碰擦，隧道内又不好处理，导致迟了三个小时到达下关。比我们早一点的车就没有碰到碰擦，早了很多到大理。
在此提醒一下所有国庆，五一出来玩的朋友，大家都这么想，所以国庆非常堵。如果不打算在路上花费太多时间，建议还是平时搭两个休假去。这样大概能凑出4天的时间，也足够玩一些地方。另外吐槽一下中国的固定假期制度，大部分的假期都是国定假日，而不是年假，导致所有人旅游出行时间严重重合，是要提醒我们中国人很多么？不过想想看，固定假制度还是有一定的好处的。如果全是法定年假制度，我们不会有太多影响，可是有些人就休不到（因为老板强制或者变相强制加班）。不过不管如何，中国的休假还是少了点，而且缺乏法定年假是个事实。
导游考虑到大理两个个景点，加上观音峡，今天不玩掉一个，回来的时候会太赶。所以还是坚持去了大理古城。时间只有45分钟，电瓶车却花了30一人。45分钟的电瓶车，标准的走马观花。仔细评价起来，大理古城属于原始建筑修复景观，不需要太长时间观看。但是即使如此，建议游览时间也在1.5-2小时左右。城墙没有西安的气魄和原始风貌，街道没有老街和乌镇的古朴，很鸡肋的一个景点，可惜在行程单上，所以导游非去不可。说起来，整个行程其实就是玉龙雪山，洱海和石林有价值。其他搭配景点都是鸡肋，赠送更是基本扯淡。
另外，电瓶车下来，上车之前，有小贩挑着水果过来买。贝壳自己不会不买，隔壁李大哥试试觉得好吃，买了一些菠萝蜜。好心送了贝壳一个，结果猫咪弄不开。贝壳嘲笑了猫咪没力气后——自己也弄不开。隔壁大哥笑笑接过去说，不是这么弄的，这玩意一捏就开了。然后他一捏——囧了，他也捏不开。他不信，拿另一个一捏，还是不开。那个小贩总共就给了一个熟透的，剩下都是生的。所以导游提醒，说少数民族淳朴，那是汉人来之前的历史了。现在你能碰到的少数民族，都是商人，不然你碰不着。想想也是，我们是职业旅行团，又不是驴友，哪里碰得到原住的少数民族。要是碰到什么“民风淳朴”的事情，自己掂量一下是不是正在被骗呢。
七点半左右，我们在兄弟鱼庄吃了晚饭。鱼汤很好吃，很鲜，里面放了很多胡椒。炸河虾也不错，晚饭比午饭好吃多了。导游说，我们每餐12元的餐标，能吃成这样实在是很心满意足了。我们八点多吃好饭出发，预订12点多到丽江。这一路都是普通国道，二级公路，没有高速，而且都是盘山公路。下雨夜路，不知道是否来得及。所以贝壳现在还在路上写这篇文章呢。</description>
    </item>
    
    <item>
      <title>十月二日下</title>
      <link>//blog.shell909090.org/blog/archives/1937/</link>
      <pubDate>Mon, 10 Oct 2011 16:07:26 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1937/</guid>
      <description>下午的行程是丽江古城，这里特别指出zoomy同学的攻略缺陷——石破天不在七一街，而在五一街。我们去金凯广场吃黑山羊火锅了，没事。倒是把同行大哥害得够呛。我们在丽江买了不少奇奇怪怪的小东西，大多是买个热闹，不要指望真假，也很难买到什么好东西，这里东西都是义乌批发来的。门口的西藏牦牛酸奶不错喝，比普通酸奶略略偏酸，风味很特别。古城的老建筑群很壮观，处处小桥流水很漂亮，可惜过度商业化开发，已经没有多少意思了。试想，一栋百年的老房子里面，放的全是摇滚，这个能靠谱到哪里去？个人感觉，和zoomy一样，里面全是发呆，上网，聊天，艳遇，泡妞，睡觉什么的。看看就好，住半个月啥的就绝对脑残非主流小清新了。
金凯广场的山羊火锅很赞，我们吃的是导游推荐的本土黑山羊，估计和导游有关系吧。一盆里面一半羊肉一半腊排骨，锅底40，一斤羊肉40一斤腊排骨40，两个人吃很饱。羊肉汤非常鲜，不亚于过桥米线的汤头。腊排骨略咸，不过并不过分，比羊肉好吃。感觉上还算物美，是否价廉就见仁见智了。反正我们当成是在上海吃，还算可以。不过后来我们才知道，这老板的黑山羊是冒充的，羊肉皮到了锅子里面还是白的，真的黑山羊火锅煮出来皮也是黑的。同行的几个人吃了阿寿黑山羊，皮果然是黑的。虽然吃的同学说好像没什么太大区别，但是心里总是很不爽的。而且阿寿的青菜5元，本土的青菜20，服务很混乱。感叹一下，何必不信zoomy同学信导游呢？
然后我们打车先回去酒店，再去古城。这一下惹出点麻烦。官房酒店有两家，我们查到靠近古城的是酒店，靠近束河的是别墅酒店。两家店都在香格里拉大道，上面又不写多少号，写了师傅也背不出。我们到了才发现有问题，再让师傅开车过去。结果一路发现都没有出租。师傅说，这个时间是做生意的高峰，到酒店就算了，到别墅会耽误生意，他也不高兴来。我们问师傅是否能等我们一下，他说不行，耽误生意。没办法，只好给他双倍。本来以为挺近，这一来一去就花了快60，实在是无谓的麻烦。
晚上在酒吧里面喝酒，发现所谓酒吧真的很无聊，酒比北京后海还贵，里面只是听人唱歌。建议大家不是泡妞还是别去了，泡妞刚刚好，里面脑残文艺小清新一大把，个个求包养求419。很少碰到以结婚为目地的，省去你很多麻烦。当然，如果你试图在这里碰到个MM，以后以结婚为目的展开交往，那脑残的是你。里面点歌的，大部分都是公务员和垄断企业的员工，动辄就是电力，石油，电信。想想不奇怪，外企的小员工，哪里有钱来。私企的老板和外企的部门经理，倒是有钱了，可惜没时间。至于私企的小员工——那是又没钱又没时间。只有公务员，垄断企业这帮人，才能闲到到处去玩，而且可以美其名曰考察。我们去的时候还是国庆，尚且如此，平时就自己考虑吧。
夜里出古城，发现人实在太多。人山人海超过国庆的城隍庙。回去的出租必须排队。这里的一点好处是，有警察指导排队维护秩序，还有专门的出租车区。来的车都是出租，应该是进行了节日限行。不过我们到别墅区，司机打表13，实际收了20。他倒是上车就说明了，而且上个司机也说过。古城入夜后，到这里基本要加收到20。就贝壳查下来也是市政府许可，不过总是让人很不爽。不过既然是市政府许可，也进行了应有的公示也说明，那也属于没办法的事情。需要在夜间打车的同学，自己考虑吧。不过既然能在古城泡吧到半夜，我想你也不会介意这一点车钱的。</description>
    </item>
    
    <item>
      <title>十月二日上</title>
      <link>//blog.shell909090.org/blog/archives/1935/</link>
      <pubDate>Sun, 09 Oct 2011 11:04:23 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1935/</guid>
      <description>昨天果然迟到了，半夜一点才到。今早起来，早餐吃的还不错。有一个管家专门负责煮饭，专门的独栋小别墅。早餐大概十多道，东西很赞。说是五星级，还是有点道理的。今天导游换了一个，换成了云南当地的导游。丽江导游很特殊，全国唯一的公务员导游，工资超高。而且其他团到了丽江，必须换当地导游上去。我们的导游姓陈，父亲是藏族，本人是纳西族，说话很不客气，很拽。他也不怕你们投诉，只要不出大纰漏，这个公务员是铁定混下去的。云南为了打造精品旅游线路才搞出高价导游这么个思路，不过看来公务员制是最大的败笔。在最需要服务精神的旅游服务业，使用无法投诉的公务员制度，云南旅委的人脑袋被门夹过了吧。
早上导游忽悠我们借棉衣和氧气瓶，氧气要80，酒店只有20。棉衣要30，下面借只有20。估计导游和老板有关系。不过导游提到，上面的高山黑彝族很排外，发现是下面借的衣服可能给扒了。其实哪那么容易，下面租的和自己买的很难分。不过想想强龙不压地头蛇，zoomy同学自己出来玩也被当地藏人收了200。没必要得罪当地人，还是摸鼻子认了吧。
旅行的第一站是蓝月河峡谷，到了峡谷后全部要换电瓶车和环保车，以避免污染。从环保角度来说，还是很有道理的。不过全程电瓶车50，环保车20，大缆车152，很贵。比背包客栈上面列出的价格高了很多，我也不知道为什么，是国庆涨价还是通货膨胀，无法确认。
蓝月河是一条很短的河流，导游介绍说，平时碧蓝，阴天浅绿，下雨时间长了，就是乳白。我们去的时候，正好下雨，河水颜色是浅绿接近乳白。山在两侧，云就从山上飘过，仿佛林中起烟，又像神仙降于地上。玉龙这里的山顶，都是藏在云中的。每次抬头，都能看到隐隐约约的山峰，和望不见的山顶。
蓝月谷出来，电瓶车把我们送到环保车站。这里的环保车是绿色的，导游笑称是青蛙车。先到先坐，不是每个人都有座位。第二站是印象丽江，老谋子导演的。一贯风格，人很多，很震撼。不过我看不懂，导游也说，他也看不懂。出来就是坐大缆车上玉龙雪山了。首先要说明的是，雪山不是什么时候都有雪的。每年11，12，次年1月，能看到。不过见鬼的冷，条件恶劣，我们还要过春节，人少的很。我们上去的时候，什么雪都没有，而且还下着细雨，走在山上就像走在云里。这里要特别感谢微型摄像机的卖家，在这种恶劣环境下，还是录到了将近两个小时的像。
山下面的商店有卖烤牦牛肉，还有鸡腿什么的，很好吃。不过脂肪类食物对高原反应不利，因此求保险的可以那里买一条巧克力吃。东西不错，就是贵了点。大索道挺值得一去，大概有五分钟的时间里面，都是在索道上面晃荡。我们去的时候刚好在下雨，就如同云海泛舟一样。
至于高原反应，大家可以不用想的太可怕。贝壳上去后，就是有点头晕。身体反应大约相当于健身房里面登山机，六级到七级的阻力运动20分钟以上后。稍大运动量会产生喘气，但是休息半分钟就没事了。氧气瓶完全用不上，用过的人也说没作用。实际上由于是从3300米瞬间升高上去的，所以人体血液氧至少可以保持非剧烈运动5-10分钟。如果上去就反应了，绝对是吓出来的。在雪山上适应后，贝壳甚至可以唱歌。不过也不要轻视高原反应，一天以上在4000以上，或者晚上住在3500以上绝对是有风险的。一小时没事不代表一天没事，所以不要大意。
路走到一半，猫咪就不行了，喘气，心跳加速，有点高原反应的症状。所以我们走了四分之三就不再往下走了。下栈道的时候，右腿外侧肌肉酸痛，判断是缺氧状态下强剂量运动导致的急性肌肉反应，坐坐就会没事。可惜下雨，栈道上没地方坐。下山的时候，还出现了嘴唇发白和紫斑，看起来吓人。不过贝壳的判断是，心理性因素居多。至于贝壳本人，只有偶尔头晕，不影响行走，呼吸一下就消失。拉着猫咪走了一路，什么事情都没有。</description>
    </item>
    
    <item>
      <title>九月三十日</title>
      <link>//blog.shell909090.org/blog/archives/1933/</link>
      <pubDate>Sat, 08 Oct 2011 09:49:55 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1933/</guid>
      <description>上午本来要坐春秋航空的9c8953航班从虹桥一号航站楼出发，结果居然碰到改机场，改到了浦东飞。当然，航班也肯定延迟的了。果然啊，航班延迟了！(这句是猫咪说的)不过还算运气，到了浦东后没有什么等待就起飞了，基本只延迟了一个小时，权当地面延迟算了。
到了昆明，已经是将近一点。我饿的厉害，就查了查点评，叫门口的黑车师傅送我们到一家叫做乡村小榭的馆子。他们的菜非常赞，药膳鸡汤(好像是天麻炖鸡汤，老板说的不清楚，贝壳也没吃过，吃不出来)，还有胡椒叶子炒牛肉都很好吃。量也比较足，三个菜，三人吃正好，两个人太饱。凉拌核桃也不错，就是小贵，在昆明要四十。
下午去了滇池，十月份的滇池池水还比较清澈，没有传闻中绿藻长满水面的可怕。旁边的西山如刀削，云从山的那边涌过来，让山顶始终处于朦胧仙境之中。
然后，猫咪的同学就过来了。云南局的同学很客气，带着我们满昆明的兜圈子。先去了正义路的步行街，还有景星街花鸟市场。那里有很多奇奇怪怪的东西，例如水烟筒和烟丝。水烟筒是一个竹筒，里面放水。上面放烟丝点着，吸烟的时候烟气就通过水，进行过滤。猫咪好像对这玩意很感兴趣的样子，一路大惊小怪的。两旁全是老建筑，据说原来还要多还要大，不过街道改造，很多都拆掉了。而且上面是老建筑，下面是一个借影碟的地方。感觉上下很不搭调。不过到了丽江我们才知道，比这个更不搭调的有的是。市场里面还有很多漂亮的木雕和银饰，牛角梳子，玉石琥珀什么的。本着不懂不买的宗旨，我们就不掺和了。
然后我们看到了一只聪明的狗狗，毛色金黄，很漂亮。会算算术，认钞票，和游人一起摆pose合影。摆pose的时候还会跟着游人的动作调整姿势在那里臭美。合影每次一块，表演也没有讨要，就在那里放个盆而已。云南局同学的老婆说，还看到过这只狗狗和他的主人去买菜，狗狗叼着个篮子在后面跟着。估计是主人养的爱犬，只是没事时出来挣钱而已，不是专门训练了赚钱的。
昆明的小吃很好吃，可惜都有点偏辣。有一种大米压成的薄饼，烧热了夹上酱料，还可以夹油条什么的，叫做烧洱块。趁热吃，很不错。这里的土豆用油炸过，加上花椒辣椒姜黄拌一下，也很不错。后来我们去吃了过桥米线，很正宗，汤很鲜。不过据说当地人吃的都是另一种，叫做小锅米线的。过桥米线是用带油的鸡汤保温，烫熟米线来吃，属于外卖送饭的吃法。不过注意，真的外卖时间长，烫熟烧熟过的米线还好，但是烫肉片就不安全了。小锅米线是用调料和米线一起在锅里煮，一口小锅只出一碗米线。味道酸辣开胃，和过桥米线截然不同。当地的笋很嫩，烤鱼也很好吃。唯一的问题就是烤鱼佐料。没有鲜艳的红色，入口也不辣。但是吃过几分钟，尤其再喝一口米线的热汤后，嘴巴里面又麻又辣，犹如针扎火烧一般。上次碰到这么厉害的辣椒已经是高中时候吃杨健的韩国泡椒，吃进去几秒就有反映。这次却迟了两分钟，又喝了口热汤，吃了个暗亏。
晚上大家聊了一下旅游里面的注意事项，到哪里买什么东西什么的，就由人家送我们回酒店。真是太感谢他们了。</description>
    </item>
    
    <item>
      <title>航空和铁路事故对比</title>
      <link>//blog.shell909090.org/blog/archives/1931/</link>
      <pubDate>Thu, 06 Oct 2011 22:45:22 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1931/</guid>
      <description>老婆经常说怕坐飞机，因为飞机比铁路更加不安全。作为一个在机场长大的家伙，我对此嗤之以鼻。不过作为死理性派，我还是列出数据，对比一下。
中国民用航空原属空军，后来分离为民航（东方，北方，南方，还有几个记不清了，加上飞国际的国航），时间是1982年。在82-97年的15年间，没有发生过有记载的空难。但是基于历史问题和意识形态问题，在91-95年，海峡上空发生过多次劫机飞往台湾的事件，还有劫机犯解送回大陆的飞机再被劫持的奇闻。当然，鉴于没有空难，也没有官方新闻，我们当八卦听就好。为了统一时间，我们从1985年开始计算。
1997年5月8日 中国南方航空3456号班机空难 35人死亡/共35人\ 1998年9月10日 中国东方航空586号班机事故 0人死亡/9人受伤/共137人 2002年4月15日 中国国际航空129号班机空难 128人死亡/共166人 2002年5月7日 中国北方航空6136号班机空难 112人死亡/共112人 2004年11月21日 中国东方航空5210号班机空难 55人死亡/共55人 2010年8月24日 河南航空8387号班机空难 42人死亡/共96人 全部空难共计6次，601人，372人死亡，229人生还。
而中国的铁路事故呢？原始链接大家猛击这里。
\
1986年1月15日 京广 广东省韶关市乐昌县 247（武昌—广州） 爆炸 犯罪分子作案 7 38
1987年7月18日 京广 河南省漯河市孟庙站 297（郑州—重庆） 爆炸 犯罪分子作案 9 69
1988年1月7日 京广 湖南省郴州市永兴县‎马田墟站 272（广州—西安） 火灾 乘客携带油漆 34 30
1988年1月17日 拉滨 黑龙江省哈尔滨市五常县‎背荫河站 438（三棵树—吉林）\ 正面相撞 列车制动失灵、冒进信号 19 76 1615（货）
1988年1月24日 贵昆 云南省曲靖市宣威县 80（昆明—上海） 脱线 88 202 ^[5]^
1988年3月24日\ 沪杭外绕线 上海市匡巷站 311（南京—杭州）\ 正面相撞 冒进信号 28 99 外籍乘客伤亡最多的一次铁路事故^[12]^ 主条目 208（长沙—上海）</description>
    </item>
    
    <item>
      <title>阿宅程序员的故事——说不清</title>
      <link>//blog.shell909090.org/blog/archives/1929/</link>
      <pubDate>Tue, 04 Oct 2011 21:25:21 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1929/</guid>
      <description>有人问阿宅，为什么自己的机器装了linux后可用空间很小。阿宅回答：
阿这个要看你是怎么挂载你的硬盘的，还有你的分区是怎么做的，你有做配额么？文件系统是什么系统？
结果人家一头雾水，老兄，我是香港人，你讲的我听不懂阿。阿宅想了想，回答：
OK, 这个要看你怎么mount你的hard
disk的，还有你的partation是怎么做的，有没有加quota？filesystem是哪个？
结果人家还是一头雾水——我的电脑和山(mountain)有什么关系？为什么还有引用(quote)？
——阿宅的英文，只能用读和写处理，不能用听和说的，大家切记&amp;hellip;</description>
    </item>
    
    <item>
      <title>lxde使用观感</title>
      <link>//blog.shell909090.org/blog/archives/1927/</link>
      <pubDate>Sun, 02 Oct 2011 14:56:46 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1927/</guid>
      <description>前一段时间，雨苍问我有没有功夫参加台湾的lxde开发，做志愿者。不巧今年结婚装修，事情比较多。除了给debian贡献几个包练习一下，没有什么别的计划，就给推了。不过推归推，当时就看到了lxde的桌面，还挺不错的。
前几天，xfce又一次大升级，整个系统加了N多功能出来，顿时感觉太庞大臃肿了。贝壳喜欢的是精简有效的桌面，不是庞大的怪物——否则我不会用gnome/kde阿？尤其是贝壳的三台纯linux，一台上网本，一台atom的低功耗机，都是低资源量的。其余系统都是虚拟机。于是就策划换掉xfce4。替代品有两个，一个是lxde，还有一个是enlightenment，两个都是以轻量级而出名的桌面。不过杯具的是，enlightenment在做vnc测试的时候总是死机，所以压根没法用。所以目前的系统就花落lxde了。
关于enlightenment，有几点补充说明。一个是，这个东西在debian下的包叫做e17，不要直接找enlightenment。另外，他的bug是，在vnc下面可以用，但是如果进行setup，就会找不到模块，然后SEG FAULT。我试过用bugreport去汇报错误，但是邮件发不出去，现在还在找为什么。
好吧，题归正传，lxde做桌面，至少有以下几点好处。
轻量。我看到的内存消耗是20M，CPU消耗很低。简洁。整个系统没有太多废物组件，也没有满天飞的各种插件。除了有限的几个组件外，其余都是自己配置的。可变。目前我用terminator替代lxterminal作为标准term，用的挺好。
OK，下面简单说一下lxde使用过程中的几个心得。
pcmanfm不支持树形目录结构。这个太坑爹了。据说版本库中的已经改出来了，debian testing还得等等。所以我觉得还可以观望一下。lxlauncher不起作用。不过幸好我也不需要这个。这个据说是为了平板或上网本做的启动系统。我现在用的是launchy，是为键盘控设计的，挺不错。快捷键不支持编辑。需要你手工修改~/.config/openbox/lxde-rc.xml。具体可以参考这个。他里面提到的两个连接是openbox的wiki，分别是Bindings和Actions。注意，wiki上有些资料是错的！下面我会讲一下哪些需要修正。没有mail notification。我自己装了一个mail-notification，还不错。可惜没有邮件的时候，托盘区图标经常失踪，不知道为啥。反正来了邮件是会出现的。自动启动不自动。可以把desktop文件放入~/.config/autostart中。也可以在~/.config/lxsession/LXDE/autostart中写，每行一个程序名，不用&amp;amp;结尾，不是bash脚本。我用的是后者。
下面是快捷键的一些错误。
ToggleMaximize应当写成ToggleMaximizeFull。Desktop指令下面的to标签应当是desktop标签。</description>
    </item>
    
    <item>
      <title>Vnc动态调整分辨率</title>
      <link>//blog.shell909090.org/blog/archives/1925/</link>
      <pubDate>Sat, 01 Oct 2011 06:59:29 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1925/</guid>
      <description>vnc可以调整分辨率，这个很简单。
vncserver -geometry HxV 就可以设定纵横分辨率了。
但是vnc怎么动态调整分辨率呢？RDP可以根据连接时参数来调整分辨率，vnc好像没有这个功能吧？
最近贝壳需要在电脑上和上网本上同时使用一个桌面，于是碰到了这个问题。经过寻找，这个问题的答案是这样的。
vncserver -geometry 1600x1000 -geometry 1440x900 -geometry 1024x600 然后，在进入系统后，输入xrandr，可以看到你启动时设定的多个分辨率。再用xrandr -s N，就可以选择合适的分辨率了。
这个是X的randr扩展，需要vncserver版本在4以上。我的环境是debian testing，vnc4.1.1。欢迎大家测试。</description>
    </item>
    
    <item>
      <title>又撞了</title>
      <link>//blog.shell909090.org/blog/archives/1923/</link>
      <pubDate>Thu, 29 Sep 2011 10:50:53 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1923/</guid>
      <description>我都不好意思说什么了，中国网民都是预言帝阿。
大概看了一下新闻，我整理出来几个有关的新闻，按照时间线排列。
2009-12-22 上海地铁一号线一日内连发4起事故 2011-07-23 2011年甬台温铁路列车追尾事故 2011-07-28 上海地铁10号线列车开错方向 2011-09-27 地铁10号线追尾 我觉得比较值得关注的有以下几个问题：
上海地铁，一号线出过问题，10号线又出问题，加上温州动车，据说信号系统供应商是同一家，这是不是一个巧合？
地铁据说是改为电话闭塞后出现的问题，为什么？不会又像温州事故一样说不清原因了吧。
本次问题，温州动车，都是信号系统故障后人力操作导致的问题。人力操作会出错我们都知道，那么，信号系统损坏概率有多高？（很多时候，损坏后人力操作，没事我们就完全不知道了）平均可用时间标准能达到多少？
人工操作的指令是谁下达的？在下达前是否有过对调度室工作能力的评估？调度室是否有相关演练和经验？如果有，为什么会出错？
这次的事故赔偿机制怎么算？不能因为只伤不死就算了吧？
上次一号线事故后，上海地铁是否分析过问题，结论是什么，采取过什么措施。
十号线开错方向后，是否分析过问题，结论是什么，采取过什么措施。
这家信号系统供应商，还有提供哪些线路的信号系统，是否应当公开？（关于这点，可以看这个，上海地铁一，三，四，十，十二，十三是他们供应的）
地铁的安检系统是否还有必要，看起来地铁比乘客的包更不安全。
要保证系统的安全性，有两种思路。一种是自动系统保证绝对安全，不相信人的作用。如果自动系统出现故障，就全部停止运行。这个思路的要求是系统的工业级稳定性，例如电话系统。基本接近99.999%可用，合一年停机不超过5分钟。这个标准是妖怪，从二十到三十年的周期上看，可停机时间只有1小时多点。AT&amp;amp;T的工业级黄金标准好像也出现过6小时的停机——直接用光了70年的配额。所以现在基本都是只能保证到99.995%。
另一个思路，是保证机械自动系统出问题后通过受培训的人紧急处理，例如供电系统。大家知道供电系统损坏概率远远高于电话，而且稳定供电的成本太高。所以大部分政府都是提供停电预案，在紧急区域（医院，学校，部分宾馆）提供备用电源，在停电期间提供巡逻，等等。大家都知道停电的时候要拔掉电器设备，留一盏灯，等待供电恢复。
最稳定的思路，是同时使用两者。即保证自动系统的绝对安全，也持续培训人，例如火警系统。即使平时碰不上，也持续的训练如何处理对应，保证万无一失。
中国的铁路系统是哪个？中国的铁路系统是自动系统出问题后，用未经培训的人来替代。为什么不用培训过的？因为不出问题就没机会培训阿。</description>
    </item>
    
    <item>
      <title>python内存不释放原理</title>
      <link>//blog.shell909090.org/blog/archives/1921/</link>
      <pubDate>Wed, 28 Sep 2011 09:57:04 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1921/</guid>
      <description>在maillist里面看到无数次的有人问，python速度为什么这么慢，python内存管理很差。实话说，我前面已经说过了。如果你在意内存/CPU，不要用python，改用C吧。就算C不行，起码也用个go或者java。不过今天还是说说，python的内存为什么不释放。
首先，python的初始内存消耗比C大，而且大很多。这个主要来自python解释器的开销，没什么好解释的。用解释器，就得承担解释器运行开销。然后，python中的每个对象，都有一定的对象描述成本。因此一个long为例，在C下面一般是4个字节（不用int是因为int在不同平台下是变长的），而python下面至少是16个字节。如果你生成100W个对象，那么C的内存消耗是4M，python的是16M。这些都是常规内存消耗，搞不明白的就别问了，不再解释。
下面解释一下python的内存释放情况。
如果是C，通常是用long array[1024 * 1024]的方法来生成1M个对象空间。当然，实际这样是不一定能运行的。因为linux的默认栈空间是8M，而Windows默认栈空间只有1M。所以代码在linux下可以通过，而windows下会跑爆掉。怎么办？下面说。当这个函数执行完毕后，当RET的时候，会自动退栈，空间就会自动释放掉（虽然在逻辑上这部分空间还是保留没有释放的，然而空间不活跃了，不过统计的时候还是占用的）。当然，更好的办法是使用malloc。malloc会从系统中自动提取和管理空间，free自动释放。这样无论是linux还是windows，都没有栈空间不足的问题。free后就会自动交还系统（4M已经超过了交还的最大阀值，一般glibc不会自己闷掉不交给系统的）。如果你忘记free，这部分内存就会一直占用，直到进程退出未知，这就是很有名的内存泄露。
python下的情况更加复杂一些，python没有直接使用malloc为对象分配细粒度内存，而是使用了三层堆结构，加上三色标记进行回收。所谓三层堆，细节我们不说了，在源码阅读笔记里面写的比较详细。但是有一点需要我们记住的——当我们分配某个大小的内存的时候，内存管理器实际上是向上对齐到8字节，然后去对应的内存池中切一块出来用的。也就是说，如果我们运气比较差，申请了10个对象，偏偏每个对象大小差8字节。这样系统就要给我们分配10个堆，而不是刚刚好。如果你的对象粒度都比较散，那么内存开销比较大也不奇怪。
python下还有一个更坑爹的事情，也是大部分内存不释放的根本原因。在int/str等对象的模块中，有个模块级别的对象缓存链表，static PyObject * free_list。当对象释放的时候，压根不会还到池中，而是直接在free_list中缓存。根据我的搜索，python内部没有地方对此进行干预。就是说，一旦你真的生成了1M个数字对象，然后释放。这1M个对象会在free_list链表中等待重用，直到天荒地老，这16M内存压根不会返还。而且，int的对象缓存链表和str的还不通用。如果你又做了1M个str对象，他的开销还是会继续上涨。几乎所有的内建对象都有这种机制，因此对于大规模对象同时生成，python会消耗大量内存，并且永不释放。
解决的机制，基本只有用yield来将列表对象转换为生成器对象。列表对象会同时生成所有元素，从而直接分配所有内存。而生成器则是一次生成一个元素，比较节约内存。</description>
    </item>
    
    <item>
      <title>uwsgi under debian</title>
      <link>//blog.shell909090.org/blog/archives/1919/</link>
      <pubDate>Tue, 27 Sep 2011 10:28:02 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1919/</guid>
      <description>好了，debian官方的uwsgi总算出来了。包已经到了testing，stable暂时别指望了，等下一次release吧。这次打的包，比贝壳打的复杂多了。贝壳自己只打了python专用的包，debian官方的包将多个语言分别打成了plugins。
下面说说，使用debian官方的包如何做uwsgi发布，还是vhost模式哦。
首先安装uwsgi，uwsgi-plugin-python这两个包。uwsgi-plugin-greenlet-python也可以考虑，装不装看你的需求。
然后在/etc/uwsgi/apps-available/sites.xml下面写一个文本文件，内容如下：
&amp;lt;uwsgi&amp;gt; &amp;lt;vhost/&amp;gt; &amp;lt;no-site/&amp;gt; &amp;lt;/uwsgi&amp;gt; 再从/etc/uwsgi/apps-enabled/sites.xml链接过去，重启uwsgi服务，事情就搞定了。
默认的配置在/usr/share/uwsgi/conf/default.ini，可以看看是否都满意了。一般来说，master和no-orphans都建议打开，chmod-socket最高660，改成600应该也可以工作。贝壳的机器负载小，只用一个worker就够了，所以完整的配置是这样的：
&amp;lt;uwsgi&amp;gt; &amp;lt;plugins&amp;gt;greenlet,ugreen&amp;lt;/plugins&amp;gt; &amp;lt;workers&amp;gt;1&amp;lt;/workers&amp;gt; &amp;lt;reload-on-as&amp;gt;128&amp;lt;/reload-on-as&amp;gt; &amp;lt;vhost/&amp;gt; &amp;lt;no-site/&amp;gt; &amp;lt;/uwsgi&amp;gt; nginx里面如此设定：
location /asdf { include uwsgi\_params; uwsgi\_param UWSGI\_PYHOME /usr; uwsgi\_param UWSGI\_CHDIR /var/web/hosts; uwsgi\_param UWSGI\_SCRIPT main; uwsgi\_pass unix:/run/uwsgi/sites/socket; } 其中，我的程序放在/var/web/hosts底下，使用系统环境来运行（而不是virtualenv），主脚本（带applications那个）是main.py。unix
socket和上文default.ini里面的socket正好对应上。
同理，我们其实还可以开多个uwsgi应用，只要放置多个xml配置就好。不过既然都采用了vhost模式，何必还开多个呢？这毕竟不是虚拟网站，要给其他人使用的。</description>
    </item>
    
    <item>
      <title>合用两个路由器的几种方案</title>
      <link>//blog.shell909090.org/blog/archives/1917/</link>
      <pubDate>Mon, 26 Sep 2011 12:03:30 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1917/</guid>
      <description>为什么用两个路由器？最常见的理由是延长信号。在超级大的场地中，中间放一个路由器，用四根线连接到周围的几个路由器上面，信号覆盖整个场地。这是最常见的理由。也有可能是因为你的主路由器LAN接口不足了。当然，也可能是因为蛋疼，或者其他原因。不论如何，为了在多个路由器上达到同时上网的目的，你有以下几个选项。桥接模式，路由模式，双层NAT模式。
我先解说一下一些基础的环境。我假定你有一个互联网线，有一个路由器的WAN口接到了互联网上面，这个路由器称为M。其他路由器分别称为S1,S2&amp;hellip;。直接连接到M的LAN口的电脑称为ML1,ML2&amp;hellip;，通过无线连接的就称为MW1,MW1&amp;hellip;。同样，连接到路由器S1的LAN和无线的分别叫做S1L1,S1W1，类推。
1.桥接模式
这是你第一个应当尝试的模式，连接方法是路由器S1的LAN口直接连接路由器M的LAN口。这个模式不一定能够配通，原因是因为要求路由器S必须支持桥接模式。基于某些理由，很多路由器并不支持桥接。一般来说，有可能LAN口支持桥接而WIFI不支持。因此S1L1支持桥接成功的概率比S1W1支持桥接成功的概率高。如果你需要一台支持桥接的路由器，TP-LINK的TL-WR*系列路由器好像大多支持。希望大家补充哪款路由器支持桥接或者不支持。
桥接是将路由器S完全的作为一个交换机使用，所以你的ML1和S1L1在同一个网段，两者可以互相ping通，发送各种包，也可以看到对方的广播。这种模式一旦连接成功，连接模式是透明的。因此，应当关闭DHCP，只启用一台路由器的DHCP功能。或者最好手工分配IP。
严格来说，只有S是一个无线路由的时候，这个模式才叫做桥接。如果只做有线连接，这个模式应当叫做交换模式。
2.路由模式
路由模式，是一个比桥接复杂，效果好，但是用途相对比较窄的方案。接法是路由器S1的WAN口连接路由器M的LAN口，并且为S手工指定IP，再关闭S的NAT功能。M的网段和S的网段必须不为同一个网段，例如M配置为192.168.0.0/24网段，S配置为192.168.1.0/24网段。S的WAN口手工指定为192.168.0.2。然后在M1上配置人工路由，将192.168.1.0的所有包交由路由器192.168.0.2处理。并在S1上配置默认路由为192.168.0.1(M的地址)。
这个模式是将路由器S和M作为路由器使用。当S1L1发送包时，会被S1转发到M去处理。而M收到要发送给S1L1的包时，会交由S1处理。这一模式能够工作的基础是你能够控制M的路由表，并且S可以关闭NAT。通常情况下，这个S最好是OpenWRT/DDWRT。这也是为什么用途比较窄的原因，毕竟支持桥接的路由器好找，OpenWRT/DDWRT就相对小众了。
当这个模式连接完成后，ML1和S1L1在不同网段，但是两者可以互相ping通，发送各种包，却无法看到对方的广播。因此这种模式的效果比桥接好一些，因为地址范围更大，而且很容易隔离广播风暴。这种模式一旦连接成功，连接模式是透明的。
3.双层NAT模式
如果上两种模式都不工作，你就必须使用双层NAT模式。这种模式保证一定工作，但是在使用上比较麻烦，需要用户自行计算访问规则。
接法是路由器S1的WAN口连接路由器M的LAN口，并且将S配置为DHCP。M的网段和S的网段必须不为同一个网段，例如M配置为192.168.0.0/24网段，S配置为192.168.1.0/24网段。
S的数据包会被NAT两次再发到互联网上，要进行端口转发也必须配置两次。性能相对比较差，而且无法做NAT穿透。
当这个模式连接完成后，ML1和S1L1在不同网段，S1L1可以ping通ML1，但是反过来不行。因此，S1L1可以主动连接上ML1，而反过来不行。这种模式不是透明的，两者进行连接时必须考虑网络转换和端口转发。</description>
    </item>
    
    <item>
      <title>密码管理规范</title>
      <link>//blog.shell909090.org/blog/archives/1915/</link>
      <pubDate>Thu, 22 Sep 2011 10:26:25 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1915/</guid>
      <description>下面是贝壳自己总结的密码管理规范，大家可以参考一下。
概念解说
网络密码和本地密码。网络密码通常很难暴力攻击，尝试速度受到网络限制，而且尝试一定次数后还可能被管理员发现。而本地密码则相对比较容易攻击，我假定本地密码攻击可以达到每秒测试2^30个密码。
密码长度推定使用如下计算方式。使用年数乘以攻击频率，得出攻击者在密钥使用期限内能尝试的最大次数。为了安全起见，尝试范围不应当超过总体密码空间的一定比例。以此推算出密码空间大小，进而推算出信息位数，然后还原为密码位数。
数字密码，字母密码，数字字母混合密码，大小写数字混合密码。数字密码的信息量是3.3bit/位，字母为4.7bit/位，混合为5.17bit/位，全混合5.96bit/位。
密码原则
一次一密。除了零级密码，不要为多个系统设定一样的密码。有些系统并不像我们想像的安全，一旦这个系统出问题，被还原原始密码，就会牵连到其他系统。
定期更换。没有什么密码能用一辈子。
写下来。因为一次一密，所以我们会有大量的散碎密码。不写下来是不保险的，写下来是不安全的。折衷一下，还是写下来，保存好吧。推荐用高级密码加密低级密码的方法，例如keepass。
生成型密码。用一个特定字符串+网站名，做sha-1然后取最后8位。这样的密码满足一次一密，不容易破解，不需要写下来，唯一的问题是你要现算&amp;hellip;
零级密码
零级密码是有些不需要保护的情况下，又非设定密码不可。对于这种情况，你只能设定一个不算密码的密码。例如常用机器的用户密码。这些密码可以通过livecd/liveusb轻易修改，因此没有一点保密价值。
零级密码不需要安全性和保密性，因此好记就行。例如111，222，选一个常用的，爱用多久用多久。
低级密码
低级密码是用于保护一些你不希望别人看到，然而别人看到并没有直接损失的内容。例如家里机器的性能数据，普通相册的访问密码。这些内容被别人看到不会产生伤害，然而无成本的放出这些内容有潜在的风险，或是你自己主观意愿希望保护，内容安全性要求又不特别高。
我假定低级密码在网络上会受到100次/年的攻击，本地密码会受到1小时/年的攻击，可用时间五年，穷举空间不超过总密码空间的1/1000。
网络密码的攻击信息量为log2(100 * 5 * 1000) =
18.93bit。使用数字密码应在6位以上，字母，混合，全混合应在4位以上。
本地密码的攻击信息量为log2(2^30 * 3600 * 5 * 1000) = 54.10bit。使用数字密码在17位以上，字母在12位以上，混合在11位以上，全混合在9位以上。
结论，低等级的密码长度小，使用数字也并不难记。推荐使用4位以上字母（反正混合使用长度也没有下降），不要使用常见组合还有单词。推荐方式是将自己喜欢的一句英文首字母简写前后颠倒使用。例如：I will be back，对应密码bbwi。
中级密码
中级密码用于保护一些你不希望别人看到，别人看到会对你产生损失的内容。例如你的帐薄，日记等等。中级密码使用时，最主要的风险已经不来自于密码本身，而是使用密码的环境。包括电脑是否安全，中途网络是否安全，旁边人的肩窥攻击。
我假定中级密码在网络上可能会受到10000次/年的攻击，本地密码会受到100小时/年的攻击，可用时间1年，穷举空间不超过总密码空间的1/100000。
网络密码的攻击信息量为log2(10000 * 1 *100000) =
29.90bit。使用数字密码应在9位以上，字母在7位以上，混合应在6位以上，全混合应当在4位以上。
本地密码的攻击信息量为log2(2^30 * 3600 * 100 * 1 *100000) = 65.07。使用数字密码在20位以上，字母在14位以上，混合在13位以上，全混合应当在11位以上。
结论，中级密码开始，数字密码的位数就太长了，人类记忆很难记得。推荐使用8位以上字母密码，产生方式同上。 高级密码
高级密码用于保护一些有价内容，例如公司标书，银行账户。高级密码要注意更换，最长不要超过半年。
我假定中级密码在网络上可能受到1000000次/年的攻击，本地密码会受到8700小时/年的攻击，可用时间0.5年，穷举空间不超过总密码空间的1/10000000。
网络密码的攻击信息量为log2(1000000* 0.5 *10000000) =
42.19bit。使用数字密码应在12位以上，字母和混合应在9位以上上，全混合应当在8位以上。
本地密码的攻击信息量为log2(2^30 * 3600 *8700* 0.5 *10000000) =</description>
    </item>
    
    <item>
      <title>悲崔的六类线</title>
      <link>//blog.shell909090.org/blog/archives/1913/</link>
      <pubDate>Wed, 21 Sep 2011 15:39:45 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1913/</guid>
      <description>大家知道，贝壳家里用的是千兆交换机对吧？最近贝壳在装修（好吧，回头看情况，也许有装修手册出来），所以——布线的时候打算用六类线。
先普及一下常识，六类线和超五类的区别在哪里？
百兆网使用的是五类和超五类线，最大长度100m，接线规范使用EIA-768B，实际使用1236四根线进行通讯，频率100MHz。考虑双工后，可以在整根线上提供100Mbps的速率。而千兆网使用六类线，接线规范也是EIA-768B，但是实际使用了12364578全部接线（所以六类线必须全部连通，否则掉速，不要用五类的经验想当然）。频率250MHz，在整根线上可以提供1000Mbps的速率（别看我，我也觉得有点问题，资料来源wikiCAT-5CAT-6）。
为了在中间没有四根地线作为缓冲的情况下支持高速的数据传输，六类线通常使用22-23AWG的铜芯制作。尽管标准上允许24AWG的六类线出现，但是这通常是不堪使用的。而五类线和超五类大部分都是24AWG的线芯，粗细是0.51mm。23AWG线芯粗细0.57mm，22AWG粗细0.64mm。而为了隔离串扰，六类线中心通常有旋转的十字龙骨，将四对缠绕线分割在四个区域，防止电容效应干扰。
OK，有了基础常识，我们可以讲一下京东的问题了。他们提供的线问题其实很简单。有一箱线在中间有部分区域十字龙骨缺失。
如果我买的是普通线就算了，5元多一米的秋叶原线，在京东这种商城，居然会在中心位置龙骨缺失。我很怀疑我埋下去的另一箱是否也有类似问题呢。
更郁闷的是，我打给京东，他们的客服不道歉就算了，也没个活人出面解释一下这个是什么问题。就只有“你可以退货阿”，“你这样就可以退货拉”，的提示。退退退退你妹阿，尼玛另一根线回头出了问题我得重新埋线呐。更可气的是有个客服脑子堪比芙蓉姐姐，给我一个厂家电话，让我打给厂家。我说如果厂家不予解决呢？她说，你可以再打4006065500转3。我说那不就是你们的电话么？她说，你可以再打4006065500转3。我说是不是再打到你们这里？她说，你可以再打4006065500转3。。。尼玛你是鹦鹉阿，直接说再打我们电话不就完了么。再说了，你给我的方案就是打给厂家，厂家不解决，再打给你，你再咋办？哦，对了，这时候就不是你办了。真是好办法。
可见在天朝这种地方，产品质量是完全不用关心的，有退货就是最大的慈悲了。至于产品造成了后果，赔偿什么的。售后经理笑脸迎人，可以阿，有检验结果我们就赔。问题是TMD国家质检中心不给力阿，不但价格贵，而且很多事情根本不检。你不信在07年拿瓶三聚氰胺奶过去，就算清清楚楚的告诉他们有什么问题，得到的答复还是——抱歉，我们没这个检验项目。再说检验通过，厂家立刻变脸，抱歉，这个我们有规定，只能赔偿多少。然后你只能进行漫长的“调解-仲裁-一审-二审”过程。厂家有的是时间精力，不怕玩不残你。就算你侥幸通过，终于能获得赔偿，听上去天价的赔偿还不够你的时间成本。更不谈有些事情，损失十多万，按国家规定赔偿只有不足千元——“因为国家就是这么规定的”。</description>
    </item>
    
    <item>
      <title>给初创小公司的几句话（四）</title>
      <link>//blog.shell909090.org/blog/archives/1911/</link>
      <pubDate>Fri, 16 Sep 2011 10:12:08 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1911/</guid>
      <description>第四个故事来自一个朋友的笑话。说某人从一家公司辞职了，朋友问说什么情况。某人说，和老板相处不来。老板看到有人上班看网页，就出了条规定，不许上班时间看网页，否则罚款。看到有人带朋友进办公室，就出条规定，不许上班时带朋友进办公室，否则罚款。上个月老婆出差，没人照顾家里的仓鼠，带去两天，出条规定，不得带宠物上班。某人情感受到了强烈的伤害，所以愤而辞职。
其实说起来，这些事情都不是什么大事，鸡毛蒜皮到了我们可以当笑话说的地步。细究起来也确实是员工应当执行的，属于正常雇员的基本素养。不过如果您自己开家公司，照着上面的做，搞不好手下还真就一堆辞职的。
从某种意义上说，这是一个心理问题。在IBM，或者Oracle这种大公司，出现这些条款没人觉得有什么不对，关键在于两点。一方面，大公司本身就给人一种正儿八经，板着个脸的印象。员工进公司的时候，就知道自己随时会碰到各种狗屁倒灶的规定，有一定的心理准备。小公司通常老总天天见，搞不好下班还一起吃饭喝酒，上班的时候板起脸来做规矩，情感上受得了受不了就不好说了。另一方面，大公司的规定相对完备，什么可以什么不可以都规定的非常详细。小公司难免挂一漏万，天天改规矩，确实不怎么好看。
反过来说，这也是初创公司对大公司的优势。在大公司里，管理层显然不会留意到每个人的特性，并且针对性的管理。然而初创公司就那么几号人，大部分都是熟人。要针对管理不是一件不可能的事情。老婆出差，家里仓鼠可以带到公司，顺便睡在公司做程序得了，反正家里也没人。诸如此类的事情并不怎么难做。当然，当初创公司上了一定规模（推荐大概是10-30人）后，管理转换必然要产生阵痛。然而也远好过在三两个人的公司里面规定四五十条的规范。</description>
    </item>
    
    <item>
      <title>gnupg的基础概念</title>
      <link>//blog.shell909090.org/blog/archives/1909/</link>
      <pubDate>Thu, 15 Sep 2011 12:36:01 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1909/</guid>
      <description>上次gnupg签名写完后，雨苍跑过来问我gnupg里面的一些细节，讲，为什么不写清楚呢？我说不是写过一篇gnupg基础么？回去翻blog，居然没有！好吧，那就现场写一篇gnupg的基础概念。
非对称密钥 gnupg是一种签名/加密系统，通常而言，多数被用在mail和deb包签署上。普通加密程序的最大区别在于，gnupg是一种公钥/私钥结构。
我们简单点说，你可以用gpg --gen-key生成一个密钥对（是的，一次一对密钥），一个密钥对包含一个公钥和一个私钥。公钥是公布在网络上的，私钥自己持有，并且可以加一个密码，以防私钥泄漏。学过非对称密码体系的同学应该知道，公钥加密，私钥解密，私钥加密，公钥解密。因此，这个密钥对可以用于签署。方法是，对你的目标数据进行哈希，然后使用私钥加密这个哈希，得到签名数据。如果别人可以用你的公钥解密这个签名数据，然后和目标数据的哈希对比，那么这个数据就一定是私钥签署的。
附加资源 下面是最精彩的地方。一个密钥对里面，其实不仅包含一对密钥，而是包含多对。刚刚生成的公钥(pub)和私钥(sec)这对，被称为主密钥。而除去主密钥外，还可以加入三种资源，子密钥，uid，签名。
子密钥是另一个合法的对称或者非对称密钥。子密钥的常见用途是延长密钥的可用期，或者提供不同强度的加密（通常是减弱）。
密钥长期被用于加密数据后，可能会被已知明文攻击，因此一般密钥都有一个合理的使用周期。对于大量加密数据的人来说，这个合理使用周期可能比较短。看过上一篇互相签署的应当知道，对一个密钥每三四年乃至一年就签署一遍太麻烦了。因此，你可以使用子密钥。这个密钥的使用和吊销就比主密钥更加方便，生成一个，用六个月，然后废弃。而使用主密钥签署过的子密钥，同样可以认证该密钥属于某人。
uid则是认证这个人的合理名字，主要是姓名，昵称，邮箱。通过主密钥签署，别人可以认可这个网络身份真实的属于你。
签名则是别人对你的uid的认可。一般一个uid上可以有一个或者多个签名（至少需要自己主密钥的签名）。
常见参数选择 主密钥过期时间，建议选择5-10年，推荐10年。因为主密钥过期后需要重新签署，每三四年就重新签署一遍你的密钥实在是太麻烦了。
主密钥长度，我建议选择你能选择的最长长度。因为主密钥有相当长的过期时间，过短的密钥很快就不实用了。在2000年的时候，1024位还是比较安全的，但是2009年，RSA-768被成功破解，威胁到了1024位密钥的安全性。目前debian推荐密钥都是4096位长。至于对此造成的计算压力增加，你可以通过子密钥来解决。
主密钥一般是RSA的，gpg -k可以看到4096R之类的标示。
公钥的网络管理 上面说到，公钥需要公布在网络上。现在网络上就有一种专门的服务器，用于提供公钥的上传和管理。我用的是pgp.mit.edu，很有名（主要是比较短，好记）。你可以在上面放置一个你的公钥，里面附加各种uid和签名，吊销凭证，等等。
文件签名 密钥对可以对文件进行签署，生成分离的(.sig文件)或者内含的签名。签名方法是gpg -s，你可以用gpg --verify来验证。
FAQ:
Q: 有什么机构对gpg进行认证么？
A: 这个真没有，虽然你可以从公钥服务器上获得很多人的公钥，但你无法确认他们的身份。确认身份唯一可靠的办法就是线下交换fingerprint并且签署。作为替代，完全信任和勉强信任也部分的可靠。
Q: 签署和加密有什么区别？
A: 签署表示这个内容是被你确认过的（由你发出或者经你许可），所有人都能看到。加密表示这个内容只有你能看到，所有人都能发出。如果你打算给一个人发送一个内容，内容是经你确认的，并且只想被他看到。你可以同时签名和加密。
Q: 签名可以伪造么？
A: 这个应该不行，如果可以，你可以写个paper，全球奖金就数百万美元，更不提领域上的名声。
Q: 国家可以调动专用服务器来进行破解。
A: 目前已知破解的最长的密钥是RSA-768，长度768bit，因此1024位密钥有可能被政府机关破解。然而破解难度随着位数增加以几何级数增长，因此2048位的破解目前还遥遥无期。目前而言，2048以上长度的密钥还是无解的。
Q: 真的不行么？我知道各国军队都有保密的研究成果。
A: 如果你相信所谓的“秘密成果”，我也无话可说。仅公共领域流通的成果而言，离可接受的破解方法还差很远。目前已知最好的算法是普通数域筛选法，有希望成为可接受的破解方法的是基于量子计算机的Shor算法——不过量子计算机还没有制造出来。
Q: 既然2048位密钥不可破解，为什么还要选择4096位？
A: 一个不幸的事实是，虽然破解难度随着位数增加几何级数增长，然而破解速度随着时间流逝也在几何级数增长。如果你打算长期使用，还是使用4096位的比较保险。</description>
    </item>
    
    <item>
      <title>北京，北京</title>
      <link>//blog.shell909090.org/blog/archives/1907/</link>
      <pubDate>Tue, 13 Sep 2011 11:06:16 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1907/</guid>
      <description>怀念北京的话就不多说了，中国没有几个人不会故土难离。我直接上干货，说说北京的诸多问题。
1.北京杯具的排水系统
北京大型水上乐园今年两次开张，正式宣告了北京又回到了曾经是海的年代——
好吧，这个玩笑不怎么好笑。
我小时候，北京基本不会积水，今年积水两次，而且是淹车丟人的积水——至于积水潭瀑布这种问题我们就不提了。为什么？
大概来说，原来的水系统是依照北京的边界在四环设计的，而现在北京的道路覆盖已经到了五环外。路程越长，运输积水的能力越差。北京在三到五年内爆发性的发展，这些不被人注意的非政绩工程就一下子爆发出来了。
而且，老北京有多少湖？昆明湖水系被填了多少？光一个中南海和北海，能容纳整个北京的雨水么？
内城雨水排不出城外，就只有在街面上汇集了。
2.北京的水资源问题
上文讲排水，这段就讲给水。北京的水一直是个严重问题。高中时，我们出学校去旁边树林玩。老师再三强调，树林属于顺义防护林体系，活动是学校担保的。绝对不要出现火灾，否则连老师带校长，人人倒霉。出了学校，我们玩渴了，到附近人家家里去讨水喝。附近人家从井里打上来的水是带农药味的，非常喝不惯。人家说我们已经喝习惯了。地呢？地早就不种了，菜价还比不上水价。后来学校老师说，学校的水是从地下深井打上来的，因为区里重点保教育（学校好，很多区里实权人物的子女都在），所以特批了学校打深井，给了一定的流量指标。
在这里首先要感谢我的老师和学校中的大部分工作人员，因为他们并没有将春游变成赚钱的活动和形象工程，而是承担着风险，让我们做我们自己选择的事情。这是第一次，我知道北京的水资源是如此匮乏，而不仅仅是书上的一段文字。当每次你拧开水龙头都有水流出的时候，水资源这个问题的严重性会被多少人记住呢？大部分人记住的只是水价而已。
最近几次回家的时候，潮白河里已经储满了水，和以前人可涉水而过形成了相当的对比。然而水从哪里来？我专门找了NHK相关的专题片看了一下，顺便感慨一下，这方面日本人做的都比我们好——当然，他们比我们更缺资源。根据NHK的采访，河北，山西，都在为了北京而供水。很多地方都出现了水库下降，农田抛荒，工厂停产。当时是奥运，叫做全国保奥。现在呢？看着潮白河的水位，我敢打赌调水仍没有停止。这些人，将来怎么生存呢？他们是否会因为政府做的这些事情而憎恨一无所知的北京人呢？
我不知道，也不敢知道。
3.北京的城市规划和堵车
这点TX同学和我的感觉一致，北京的行政划区问题导致了严重的交通压力。北京的城市规划，叫做功能分区。就是一个区域，里面全是住宅，另一个区域，就干CBD，再拉一个区域，专门做教育。。。
这样的分区对小城市没啥问题，在巨型城市上使用功能分区，尤其是大尺度功能分区简直就是脑残——哦，说错了，不需要简直。我们考虑这样一个问题。如果一个城市，有两个功能——住宅和工作。我们把住宅和工作单元1:1放在一起，那么城市内的交通模型应当是热随机的，主要由各种随机理由出行的人群组成。而如果我们把住宅放在城市东边，工作放在城市西边。好，每天上班高峰，城市凭空出现一个单向交通矢，从住宅区重心指向工作区重心，大小为全市人口。下班反向出现一个交通矢。每个矢量都是集峰，单向，很难化解，而且消耗巨量资源，浪费时间。
当然，从理想上说，如果中国的房屋出租再有保证一些，两个问题会更容易解决一些——一个是房价，一个就是交通会进一步减小。然而无论如何，功能分区、公车数量加上行政调控，形成了我们天下闻名的“首堵”。
4.沙尘暴和行政划区
沙尘暴就更跨出了北京的行政区域和地理区域，要讲到北京的地理环境了。北京目前离沙漠前锋，只有150-200公里的距离。而且是到沙漠的距离，不是沙化的距离。只要北京停止向张家口方向的供水和绿化资金，这个距离还可能会更短一些。当然，考虑各种作用，即使完全不管，在最疯狂的估量下，要沙漠蔓延到北京也至少需要20年的时间。何况在沙漠边上的城市很多，不缺北京一个。
然而离沙漠近到这个地步了，还如何指望没有沙尘暴呢？据说当年很多小日本跑到中国来种树——以为人家是为了战争做补偿的么？错了，沙尘暴都吹到日本了，没办法，只能跑到源头来种树了。
5.政令的得意者
北京的兴起，很大成都上是得益于首都的地位。包括庞大的公务员，驻京办，维稳体系。大量的行政资源，带动了相当的三产公司在北京成立总部——尤其是金融业和科技业。任何一个首都，都会得到行政上的好处，和相应的付出。然而很少有一个首都，会有北京这样特殊的地位，以扭曲的地位带来扭曲的利益。
这种利益，让北京成为全国人心中的迦南。但是这个迦南，是依靠没有进入的人的付出来支撑的。因此，全国无数人涌入北京，试图分一杯羹。因此，近些年的北漂一族已经非常庞大，北京的户口早就基本停止流动，下一步恐怕连人都要停止流动（有部分政策已经在实施这个思路了）。进入的人越多，留下的人越少，北京的人口压力越大，相应的，这个泡沫破灭的速度就越快。而没有人进入，就没办法让其他人为他工作，必须依靠行政强制。这个行政强制，又会加剧北京和其他地区的矛盾。
什么时候？我怎么知道，我又不是神仙。</description>
    </item>
    
    <item>
      <title>悲崔的散热片改良</title>
      <link>//blog.shell909090.org/blog/archives/1905/</link>
      <pubDate>Fri, 09 Sep 2011 09:49:35 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1905/</guid>
      <description>贝壳的新电脑出了点小问题，不过让贝壳郁闷了很长时间。
其实这个问题早就有，不过最初没当回事情。贝壳用的AMD X4
955黑盒芯片，设计热功耗（TDP）125W，整个一个电炉。不过由于有功率调节能力，大部分的时候功率只有20W，还是挺不错的。机箱不热，声音也不大。不过贝壳偶尔一次晚上用这货压个片子，天呐，大半夜的战斗机升空了。声音吵到死人跳起来不说，机箱电源那里一摸还烫手。这还了得，CPU散热器烫手就算了，机箱烫手——真要作成烧烤机箱不成？
第二天，跑到配机器的那里，要求换一个好点的散热器，声音别那么大。他拿过散热器转了一下，笑笑说，这玩意声音肯定大，随手一转就有声音，上6000转还了得。想想也是，换了一个大号风扇，声音果然是小多了。不过抱回家，发现问题又不对了。原来的风扇温度是60度多点，现在这个有75度了。
再抱回去，人家也傻眼了。这玩意正常用没听说有这问题阿。好吧，老吴，我是正常人么？恩，这个真不是——
换了一个号称最强风扇，回家还是75度。怒了，回去好好研究了一下机箱散热的知识。
1.导热系数
什么叫导热系数[1]？一定厚度的材料，两端有温差，热就会从一端向另一端自动传导，这是基础热力学原理。导热系数的定义是，1m的材料，两端温差1度（同1开），在1秒内所传递的能密度。单位是W/mK（瓦每米开）。铜的导热率大概是400W/mK[1]，铝大概是240W/mK[1]。具体情况会根据铜和铝的纯度，杂质种类，乃至合金特性而变化。所以以前常说，纯铜散热器如何高档。当然，根据数据，钻石会更高档一些&amp;hellip;&amp;hellip;
2.散热器
目前散热器种类很多，我着重说其中一种，热管[2]散热器。
自从迈入热管时代，全铜散热片就成渣了。为什么？热管的热传导系数是5000-40000W/mK。哪怕钻石都是渣阿&amp;hellip;..
不过热管归热管，还是有点讲究的。6mm热管一根大约能“负责”15W，8mm一根大约25W。在这个功率下，两端温差基本可以接受。如果你要求一根6mm热管负担955的全部125W功耗，也不是不行，两端温差就不好说了。目前热管使用形式最多的是U型热管塔式散热器，就是一根热管中间和CPU接触，两端向上延伸，成为塔状的散热器。这样的话一根热管就可以当作两根用，成本低效果好。955的TDP是120W多点，4根6mm热管刚好负荷，所以目标就选用6mm四热管散热器。
热管解决了一个关键问题，如何将CPU核心的高热传导到空间中，而如何将热管上的温度散发到空气中，则要看散热片的质量。通常而言，使用了热管后，散热片的材质就不是关键，关键是表面积。所以热管散热器不要盲目迷信纯铜，那玩意未必比表面工艺良好的铝叶来的效果好。好一点的散热器表面积都要高达上万平方厘米，大概能合1坪的面积。差一点的也有5000以上。如果热管配合的叶面太小，那么散热效果也会大打折扣的。热管和散热片的接触工艺大致分为两种，焊接和扣FIN。焊接好一点，不过实话说，区别也不是特别大。
3.硅胶
原来的风扇拆下来一看，厚厚一层硅胶。兄弟阿，硅胶这玩意不但不是越多越好，反而是越少越好。
硅胶本身接近白色，按照用途分为普通胶，导电和导热胶，区别在于后者加入金属粉或者石墨粉，从而有黑色和银灰的色变。最好的硅胶，导热系数号称可达6W/mK。对比上面的数据可以看出，其实这个数字小的可怜。然而为什么CPU上还要涂硅胶呢？因为金属接触的时候，接触面其实是不平整的。由于不平整，导热面积会大幅减小。为了使用全部的导热面积，通常使用液态导热填充物进行填充。当然，如果要求只是液态的话，选择还有很多，例如[1]中提到的水银。但是要求不能蒸发和凝固，定型良好，无毒无害，成本低廉，那最佳选项只有硅胶了。因此，硅胶是属于接触导热用，一般来说，越薄越好，厚厚的一层硅胶只会降低导热特性。同时，硅胶涂抹的时候也要大致均匀。有一点不均匀的话，在散热片压上去的时候，硅胶会自动流到接触最差的地方进行填充。然而如果一半没涂的话，硅胶是没有这么良好的流动性的。
4.风扇
风扇是机箱另一个关键部件，AMD原始的风扇之所以能用一个很破的散热器将温度降低，关键就是高达6000RPM的超高速风扇，俗称暴力风扇流。当然，这个流派最大的问题是——音量也很暴力。
通常而言，风扇的两个关键指标是尺寸，轴承，还有转速。转速的单位是RPM，即每分钟多少转。1000-2500RPM属于低转速，2500RPM-4000RPM属于中转速，4000-6500RPM属于高转速，6500RPM以上就是超高转速了，每秒100转以上。甚至部分服务器风扇可以高达10000多RPM。不同转速，所选用的轴承也会有所区别，具体轴承区别可以参考[4]。大致来说，低速风扇都是使用含油或者液压轴承，音量比较小。而高速风扇大多是双滚珠轴承。液压轴承通常的噪声都在18db-24db之间，在安静的房间内可以忽略。而双滚珠在4000RPM级别噪音通常都在28-32db，在安静房间有明显噪音，但是可以忍受。至于6000RPM或者更高的双滚珠轴承——那TMD就是活生生的战斗机。
风扇另一个需要注意的问题就是PWM。以前的风扇是三线，VC（voltage control）控制。当转速低于一定水平，IC电路就无法工作，导致风扇有一定最低转速。而PWM风扇使用独立供电，方波周期控制，因此最低转速可以控制的更低。对于有些需要静音又不能关闭风扇的系统，更加省电安静。
关于风扇风量的问题，可以大致参考[3]。955的TDP120W，CPU和机箱温差控制在15度以内，通风量就需要21CFM。考虑到部分风损耗，风扇至少需要30CFM以上。这个数值很尴尬，因为90mm级别的风扇，能够产生这个风量的大部分都是3000RPM以上的中高转速风扇。中高转速很大可能使用双滚珠轴承，噪音比较大。最后，我选了一款2000RPM的风扇，液压轴承，号称风量是45CFM。其实大家心里清楚，这玩意能到30CFM就差不多了——也能够达到要求了。
5.机箱热系统
机箱热系统差不多就是上面几个的综合，不过散热器主要考虑CPU，机箱还得考虑其他部件和热流动问题。
除去CPU外，另外三个主要的发热点是：北桥，显卡，硬盘。显卡我使用了一块低功耗无风扇显卡，北桥上也没有主动风扇，因此都需要机箱辅助散热。原来的直吹暴力风扇将CPU热都吹到了CPU周边。北桥和内存刚好就在CPU周边，这直接导致了北桥温度在48度居高不下。目前的塔式散热器一个优点就是把热都吹到了主板后端接口的位置，因此没有向北桥和显卡位置传递热。但是CPU风扇是45CFM的，而机箱电源风扇只有30CFM。堆积的热空气会产生热回流，导致散热效率下降。同时也考虑到，所有热风都通过电源，会导致电源长期在高温下工作，对寿命不利。因此我买了一个80mm40CFM的机箱风扇，安装在主板后端口上方，将CPU散热器推过来的热空气直接排出机箱。加上电源本身30CFM的风量，机箱会从下方和左侧吸取大量冷空气补充，从而降低显卡和北桥温度。
OK，光说不练假把式。我们对比一下几个散热方案的情况。
1.原始散热方案，原装散热器+暴力风扇。满载北桥温度48，CPU核心温度65，噪音——吵死人。空载北桥温度45，CPU温度50，噪音小。
2.直吹方案，纯铜散热器+静音风扇。满载北桥50，CPU核心74，噪音无。空载北桥45，CPU核心50，噪音无。
3.热管散热侧吹+机箱风扇。满载北桥38，CPU核心51，噪音无。空载北桥35，CPU核心38，噪音无。
参考：
[1].热导率http://zh.wikipedia.org/wiki/%E7%83%AD%E5%AF%BC%E7%8E%87
[2].热导管http://zh.wikipedia.org/wiki/%E7%86%B1%E5%B0%8E%E7%AE%A1
[3].如何计算产品所需风机的风量http://itbbs.pconline.com.cn/diy/10497307.html
[4].风扇轴承http://detail.zol.com.cn/product_param/index651.html</description>
    </item>
    
    <item>
      <title>gnupg密钥签署原理和过程</title>
      <link>//blog.shell909090.org/blog/archives/1903/</link>
      <pubDate>Wed, 07 Sep 2011 10:52:29 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1903/</guid>
      <description>gnupg的密钥基础运用比较简单，有能力跑过来看我blog的应该都比较清楚了。不过最近接触了gnupg密钥的一些复杂运用，才发现——这玩意，居然能构造类似于PKI的复杂密码体系呢。
gnupg的密码体系和PKI类似，又有区别。PKI密码体系有数个根节点，负责验证服务。然而gnupg没有这种根节点，一切都是以社会关系网络运作的。更加复杂，也更加接近自然社会体系。
首先是gnupg的基本密码原理，公钥和私钥对。利用私钥签署，公钥验证。公钥加密，私钥解密。这是最基础的两种用法，我们略过不谈。密钥签署的问题提出来源于，我如何相信我得到的密钥，真的来自他所声称的这个人？
例如，我得到了来自Linus Benedict Torvalds的一封邮件，上面说blahblah。当然，听起来应当高兴，不过暂缓，这个信真的是linus本人写的么？这时候，我可以导入linus的公钥，验证签名——当然，如果有签名的话。不过问题又来了，你如何保证得到的是linus本人的公钥，而不是某个试图破坏系统的人伪造的呢？
好吧，为了解决这个问题，gnupg设计了互相签署机制。当我签署了某个人的公钥，并且将我的签署上传到公钥服务器（或者发送回给本人）的时候，我就为这个人的真实性做出了背书。例如，当我为thomas做了公钥签署，然后上传到了公钥服务器。然后thomas向某个他并不直接认识的我的朋友发送了一封邮件——例如发送给了julia。julia收到信的时候，会从服务器上下载thomas的公钥，然后看到我的背书。如果julia相信(trust)我，那么gnupg就会自动完成验证。当然，将公钥上传到服务器会略微降低安全性，所以如果限于安全考虑，我没有上传到公钥服务器，而是传回给本人。那么thomas就必须在给julia发送邮件的时候，附上公钥。julia一样能看到公钥上我的签名。
下面是如何操作。
首先你必须获得公钥，以下是从公钥服务器上下载的方法。
gpg --keyserver &amp;lt;keyserver&amp;gt; --recv-keys &amp;lt;Key\_ID&amp;gt; 而后，你需要看到这个公钥的fingerprint。
gpg --fingerprint &amp;lt;Key\_ID&amp;gt; 再然后，就是比较困难的部分。你需要和这个公钥的拥有者碰头，找个地方喝个咖啡，或者一起出来玩什么的。然后，查看他的有效证件，和本人对照，并且取得他本人认可的fingerprint。
这点非常重要，不要轻易的使用线上fingerprint交换来替代这个过程，也不要随意的为别人进行签署。你必须*确定*你签署了本人的密钥，线上获得的key，是完全可能被修改的，这是对所有信任你的人的负责。
再然后，就是简单的签署。
gpg --default-key &amp;lt;Key\_to\_use&amp;gt; --sign-key &amp;lt;Key\_ID&amp;gt; 最后，上传公钥，或者传回给本人。以下例子是上传到服务器的，不过记得先征求对方同意——除非你原本也是从服务器上取得的公钥。
gpg --keyserver &amp;lt;keyserver&amp;gt; --send-key &amp;lt;Key\_ID&amp;gt; 至于revoke什么的，暂且就不说了。
其中最麻烦的，就是上述过程中，两个人碰头的部分。为了简化这个部分，gnupg使用者经常有种gnupg
keysigning party[2]的聚会，互相交换和签署密钥。
reference:
[1].The GNU Privacy Handbookhttp://www.gnupg.org/gph/en/manual.html
[2].GnuPG Keysigning Party HOWTOhttp://alfie.ist.org/projects/gpg-party/gpg-party.zh-tw.html</description>
    </item>
    
    <item>
      <title>为什么恳谈行不通</title>
      <link>//blog.shell909090.org/blog/archives/1901/</link>
      <pubDate>Tue, 06 Sep 2011 14:51:35 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1901/</guid>
      <description>几乎每个公司的老总都有“事到临头才发现自己是公司最后一个知道的人”的杯具经历，因此几乎没有例外的，每个公司基本都有所谓的“恳谈会”，或者叫做面谈。基本就是HR，或者行政，对职员进行一对一面谈，试图找出些什么东西来。不过就贝壳自己的经历来看，这种恳谈会的作用非常小。一个公司的所有员工，一年谈一次，能得到一个有用的信息，算是运气不错了。
为什么恳谈行不通呢？因为阶级。恳谈会首先就分了两个阶级——老板和员工。我们知道不是老板的问题，作为恳谈的受益人，他们没道理刻意阻止恳谈的效果。唯一的理由只有一个——职员不愿意告诉老板一些有用的事情，他们说的都是可有可无的废话。其实细细想想也是当然的，因为老板是受益人的话，员工多数就是受害人了。大部分老板感兴趣的事情——心不在焉的员工，心怀鬼胎的管理层——在被老板知道的同时，都会受到惩罚。因此，从心理上说，恳谈会给员工的感觉永远是出卖。
在这种心理的作用下，员工会很快的形成攻守同盟。他们不出卖别人的秘密，同时希望别人也不出卖他们的，即使他们没有秘密。在这种情况下，使用奖励是愚蠢的。被奖励者无疑会成为告密者，然后收到大家的歧视和排挤，迅速的消失。奖励与其说是鼓励恳谈，不如说是让员工坚定的不要开口——即使他们真的想说什么的话。即使是秘密的奖励，实际上也很难实行。如果真的有人做了，这个人你真的敢用么？
恳谈没用，那怎么办？基本是两个办法。一个是让部分员工以员工的身份收集信息，公布这件事情，同时不要公布他们的身份。这是一种古老的思路，其核心是威慑和平衡。员工而言，不知道这些人是否存在，他们会说什么，这会让他们不敢做一些太过明目张胆的事情。
当然，另一种更为有效同时也更为成功的思路是，取消老板和员工阶级。没有了老板和员工阶级，员工自然会说任何他们想说的事情。对公司不利，就是对他们自己不利，这样公司才不可阻挡。然而要达成这点，必须放弃很多东西。首先，作为老板，你再也不是公司的全权管理者。也就是说，你必须通过规则来控制每个人，而不是直接控制。而规则来自你和员工的商讨，而不是你的脑子。
区别？如果你看到一个上班打游戏的家伙，让他滚蛋了。你是对的，然而你是老板。如果你看到一个上班打游戏的家伙，你回去查了查，规则中并没有说不能打游戏。所以你在某个会议上说，我们最好不要这样，然后让员工讨论一下，什么时候可以打游戏，什么时候不可以。什么游戏是可以玩的，什么是不可以的，打游戏有哪些惩罚。那么你就是一个普通管理者。
听起来没有什么好处，而且罗嗦的要命？明明正确的事情，为什么不能直接做？可你知道，这只是把隐藏在台面下的东西端上来而已，管理者从来都不是神——甚至不是国王。你可以直接控制你的员工，也可以强行制定规则，大部分人也不会有反应。然而，当你的政策和现实差异越来越大的时候，你的员工离职率也会居高不下。过高的离职率会带来很多问题，当部门普通员工离职率小于10%每年的情况下，公司基本不会受到任何影响。当部门普通员工离职率超过20%每年的情况下，管理者的执行就会不太流畅，时断时续。当部门员工离职率超过50%每年，或者中级以上管理者每年离职超过10%的时候，公司大量资源会消耗在招聘，培训，交接等问题上，同时事务实行经常卡壳。当部门员工离职率超过100%（不要惊讶，这不是个铁道部的笑话），或者中层管理者离职超过50%每年的时候，公司基本失去功能。因此老外的罢工可不是闹着玩的。
和员工商讨规则，并且连自己也需要遵守规则，这在保证员工利益的同时，也让他们感到参与感。参与感会增加他们归属于这个集体的情感，从而帮助你发现和管理问题——一切都是自发的。更妙的是，即使薪水略低，员工也很少离职。当然，作为双刃剑，你要知道，有的时候员工会联合起来进行薪水谈判。如果双方都是理智的进行谈判的话，我相信对于一个健康的软件公司，这只会让他更健康。当然，更重要的是，你需要自己遵守自己的规则，让规则成为权威。</description>
    </item>
    
    <item>
      <title>我有几台电脑</title>
      <link>//blog.shell909090.org/blog/archives/1899/</link>
      <pubDate>Thu, 01 Sep 2011 11:53:39 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1899/</guid>
      <description>废话贴，数一下。
家里能正常工作的电脑四台，一台台式机，11年7月买的，一台笔记本，07年买的，一台上网本，09年买的，一台低功耗服务器，11年初买的。
两台租用设备，一个是空间，一个是vps。
公司一台电脑，10年换的。
两台嵌入设备，wince和android各一，还打算明年入个平板。
虚拟设备七到八个，常用的两个，一个xp一个debian。
差不多就这些。</description>
    </item>
    
    <item>
      <title>汽车、苹果、人类的历史</title>
      <link>//blog.shell909090.org/blog/archives/1897/</link>
      <pubDate>Tue, 30 Aug 2011 09:54:47 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1897/</guid>
      <description>Jobs辞职了。
好吧，这篇文章早在年初就想写了，不过经过漫长时间的沉淀，最终还是被忘记了。最后帮主的退出帮我想起了这个事情。
本文论述的其实很简单，是一个人类使用东西上再简单不过的常识。不过很可惜，几乎所有的程序员都会忘记这个事实——直到有一个正视事实的家伙赚了大钱——然后现在辞职了。
人在使用东西的时候，都会从简单的角度去理解，而不是从复杂的角度。而人在研究东西的时候，都会从复杂的角度去研究，而不是简单的角度。我们可以回想机械大爆炸的年代，今天能看到很多上世纪的笔记，里面记载了奇奇怪怪的机器——传说达芬奇还研究过直升机。不过今天能留下来的，都是最简单和基本的了。这并不是说这些机器不好，而是创意从研究者到使用者之间巨大的专业鸿沟所致。
举例来说，我们日常最常见的机械之一——汽车。汽车上有数千计的组件，随着我们对不同组件的定制和组合，我们能够组装出不同的车。越野的，城市行驶，大脚怪，等等。从设计角度说，车的操控界面其实过度简化了。理论上说，即使四个轮子的车，也可以考虑对每个轮子施加不同方向和大小的力矩。加上轮子的内弯和外弯角度参数。一个轮子上就有两个有向标量在控制，四个轮子组合起来，足足可以形成一个八维量——只比张量差一个维。然而我们在开车的时候，只会控制四件事情——方向盘角度，档位，油门，刹车。近些年的无级变速车还逐步合并了油门和档位，使得控制量还少了一个，只有一个有向标量，一个标量，一个布尔。
这些控制系统能够产生的控制精细程度，是远远比不上八维的控制的。例如，如果我们能精细控制每个轮胎，车可以做到原地旋转——两个前轮同向向前，两个后轮反向向后。或者可以保持方向的状态下斜侧移位，乃至于如果前轮内外弯角度比较大，还可以直接侧方移位——不用前后倒车进车。然而，一方面是复杂的控制系统会造成非常高的成本。另一方面，人类没有昆虫那样的复眼去同时盯着路面、后镜、还有诸多仪表，更没有那么多手去操纵那么多控制件——比这个更直观的，是人类根本不会想要把自己的神经训练成这种怪物的信号处理系统。
人类能够大规模使用的，都是自己简单能够理解的东西——这个简单的标准随着这个东西能做到的事情而不同。如果只是要帮自己晃动孩子的摇篮，那么通常而言，只要控制开关就好。如果晃动摇篮的机械需要你指定晃动输出是基于正弦波还是基于锯齿波，你一定会觉得不可思议，然后摇头走开。而如果这个“东西”，能够帮助诊断很多重症病人，并且让你获得一份高的离谱的合约。我想你不会介意花三到五年时间学习整套系统的使用方法。当然，即使在这种情况下，简化的系统仍然是一件让人开心的事情。
计算机发展到后期，已经远远超出了最聪明的人所能理解的范畴。app store上有十万多个程序，即使每个花5分钟浏览一下也需要6天。如果要一一玩过，基本会花去一个人的一生。windows下的各种程序更是数都不要数。在这种情况下，如果我们还是持续的曝露各种底层细节给用户——你的数据要存放到哪个文件夹？你的文件类型是什么？无疑，用户不会跑开，但是肯定会很恼怒——为什么我需要知道文件路径？我写下一个名字，下次你帮我找出来，不就好了？
类似的问题正是ipod, mac, ipad, 加上现在的android试图解决的。app的安装删除并不需要用户理解细节，android上调节参数比较多，最多也不过是指名安装到sd卡上还是内存中。数据保存也基本无须关心——其实这点上做的还并不足够。整个系统，就像一个封装在琥珀里面的，神奇的魔盒。你说出你的愿望，他就帮你实现，一切都是那么美好——除了这个魔盒可以买到，而且必须经常充电。
将来？将来的系统可能会重现工业时代的老路，有经验的程序员会逐渐变成工人，而不是城市里孤独的游侠。华而不实的设计被淘汰，有效的设计成为生活中的常识。电脑将变得越来越贴近生活——前所未有的近。而我们的历史，也会进入新的一页。</description>
    </item>
    
    <item>
      <title>debian打包的一些细节补充</title>
      <link>//blog.shell909090.org/blog/archives/1895/</link>
      <pubDate>Fri, 26 Aug 2011 15:52:30 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1895/</guid>
      <description>如果前面有人接手了，你最好和前任联系一下，看看是否可以获得他的帮助，或者跟着他的思路继续做下去。
debian有一个比较变态的规定，你的打包内容，必须遵循FHS。有些程序写的数据放到了程序路径下面，你需要进行人工分离（这个花了我整整两天）。
求RFS比ITP难多了&amp;hellip;
&amp;hellip;.
&amp;hellip;&amp;hellip;.
求RFS。</description>
    </item>
    
    <item>
      <title>其实英文基本没必要学的</title>
      <link>//blog.shell909090.org/blog/archives/1893/</link>
      <pubDate>Wed, 24 Aug 2011 17:05:33 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1893/</guid>
      <description>找个maillist实际跟老外一起交流干活。历经数次抓耳挠腮依旧词不达意，然后看到老外的标准回复后，有用的东西基本都留在脑子里了。
当然，坏处就是，很多非英系老外的错误（包括国人的错误）也会复制过来。</description>
    </item>
    
    <item>
      <title>第一个debian官方包请求出来</title>
      <link>//blog.shell909090.org/blog/archives/1891/</link>
      <pubDate>Tue, 23 Aug 2011 16:47:24 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1891/</guid>
      <description>贝壳的第一个为debian官方贡献的包出炉了，地址在这里。之前也发过一个ITP，结果发现莫名其妙有人在做了。不知道为什么没有在wnpp中发现，结果弄的好不尴尬。
大概说一下，为debian官方贡献打包，你需要了解这个包的基本情况。例如用哪种语言写的，有什么依赖关系，是什么授权，等等。尤其是授权，debian有所谓的dsfg方针（不知道的看这里，这里，这里）。如果你打出来的包包含dsfg不许可的内容，你的包会被紧急移除，直到修复这个问题。尤其值得注意的是，debian要求文件级的授权，就是说，即使有一个文件不符合授权要求，整个包也会不通过，哪怕包本身声明为开源授权。之前ibus还是fctix，因为用了拼音加加的词库，就享受了一把这个待遇。另外，如果可以的话，最好征求一下上游维护者的意见（一般就是作者）。因为debian的bug系统中的问题是你需要解决的，而这些问题通常没有上游维护者是很难搞定的。当然，如果你觉得自己搞的定，或者可以出了问题再联系，那也可以。
当你搞明白这些问题后，通常需要先发一个ITP（Intent To Adoption）出来，表示你要打包，别人不要抢。通常是用reportbug来进行提交，汇报wnpp（Work-Needing and Prospective Packages）这个包的bug。然后程序会问你确定？确定的话，会要求你选择是哪种报告，其中就有ITP。当你的ITP通过后，你会收到一个bugnumber，这个bugnumber会在changelog中用到。
另外说明一下bts(bug tracking system)的基本用法。你需要给control@bugs.debian.org发送一封邮件，内容是bts的控制指令，每行一条。碰到无法识别的指令时，bts停止解析。通常习惯在最后写一个thanks来停止解析，也表示礼貌。指令系统可以参考[3]。
然后开始干活。干活的方法参考Debian 新维护人员手册。其中注意在changelog中填入你刚刚申请到的ITP，这样当包通过后，会自动关闭你的ITP。提交的包需要是lintian clean的，即自动检查程序没有发现错误。通常你可以在本地系统安装lintian进行检查。
当你完成打包工作（没法详述，太复杂了，自己看文档吧），你需要上传到mentors系统，然后让DD审查你的包。你首先要在http://mentors.debian.net拥有一个账户，这个账户的email将来会用于给你发送bug通知之类的东西。当你完成账户创建，你会在页面上看到要求上传一个gpgkey。gpg创建key都会吧？记得做4096位密钥。另外填写姓名的时候，用最好真实姓名作为名称，网名进nickname，尤其是大部分中国人都有一个拼音姓名和一个英文姓名的时候。。。
然后，你的主页上有一个说明，会让你复制一些数据到你的~/.dput.cf中。dput是用来上传源码包的工具。如果你按照说明去复制，那么你就可以用dput debexpo.changes来上传你的包。其中有几点需要注意的，一个是debexpo不能丢，否则会默认传到ftp.debian.org上去，然后失败。另外changes和dsc必须经过你上传那个公钥对应的私钥的签署，否则签名验证失败，你的包上传行为就会失败。如果你的系统中有多个private key，那么dpkg-buildpackage会不知道如何打包。用-k参数加上你的私钥id，就可以指定使用哪个私钥进行签署。
当你的包完成上传后，你可以在my packages下面看到。注意服务器检查结果，本地通过lintian的包在远程还是可能爆出错误，所以再检查一下。
如果一切都没有问题。你可以将package中的Needs a sponsor改为Yes，然后等DD注意到你的包。当然，还可以向debian-mentors@lists.debian.org发送一封RFS（Request For Sponsor）的邮件，提醒DD的关注。具体的内容模板在成功上传的邮件中会提示你，一般是http://mentors.debian.net/package/rfs/[package name]这种格式。打开url，里面就是你的RFS邮件规范的目标地址，标题，还有内容。
OK，最后总结一下，整个过程中我们用到了三个系统。第一个是debian bts，通过提起bug来表示你准备打包。第二个是mentors.debian.net，通过注册来上传包。第三个是debian-mentors@lists.debian.org，通过maillist来提醒DD检查你的包。过程有一点小繁琐，不过熟悉之后还不算繁琐。如果真的觉得繁琐，debian在包检测和打包过程中的一堆事情更是会烦死人的。
Reference: [1].Debian 缩略语http://www.cnblogs.com/lidaobing/archive/2010/05/21/1740508.html
[2].软件如何进入 Debianhttp://www.cnblogs.com/lidaobing/archive/2010/05/02/1726138.html
[3].Introduction to the bug control and manipulation mailserverhttp://www.debian.org/Bugs/server-control</description>
    </item>
    
    <item>
      <title>一次系统和数据迁移</title>
      <link>//blog.shell909090.org/blog/archives/1889/</link>
      <pubDate>Thu, 18 Aug 2011 15:42:49 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1889/</guid>
      <description>在文件系统选型后，贝壳骤然发现用ext3保存媒体文件是一件很傻的事情。耗费空间多，性能差，安全性低。根据文章结论，其实最好的文件系统是xfs。同时，贝壳的mini-itx空间基本满了(/home分区75-80%)。所以，贝壳准备买一块新的硬盘，然后将数据迁移过去。
硬件选择上，贝壳询问了熟悉的硬件商。他说日立没货，WD的盘问题比较多，推荐希捷的。而且只有绿盘，具体型号是ST2000DL003-9VT166，SataIII，常规转速5900。ST的2T盘入手后，贝壳做了一下基础测试，hdparm分数是，原本的WD硬盘90M/s，新的ST硬盘70M/s，公司的硬盘99M/s。看来硬盘性能还是WD的比较好一点，当然，也可能是因为新硬盘本身就是低档硬盘。
贝壳的第一选择，是按照原本的U盘安装设置，安装debian系统。不过前后两次都可耻的失败了，主要原因是mini-itx对U盘启动的支持并不是很好。被迫，用新买的大型电脑安装，又失败。原因是6.0的安装镜像对boot.img.gz方式的U盘启动支持不良。算了，先装5.0升级。没想到，这个原因直接导致了贝壳两次系统安装完毕后无法引导升级。为什么？因为硬盘的尺寸刚刚好比2T大了点。gurb升级到grub2的时候，为了让你支持全部空间，很好心的帮你升级到了gpt。然而gpt需要一个分区来保存一些信息，新多出来的空间又刚好不足以保存这个数据。因此，grub-pc就升级失败，而且救都没法救——因为没空间了。
两次折腾下来，贝壳基本搞明白了为什么。然而要解决这个问题，就要手工分区，计算大小，产生lvm，设定，然后debootstrap，再设定。或者就直接使用debian
6.0的安装镜像。这个时候，悲崔的事情来了——U盘安装那篇文章的上一节，就说明了如何直接使用usb启动iso，直接cat iso &amp;gt; /dev/sdX就可以了。早知道这么简单，何必折腾那么一大套呢，哎。
debian 6.0的安装系统比5.0的好了很多，磁盘分区支持gpt，直接就生成了bios_grub分区。lvm2的支持增加了vg级别的控制，而不仅仅只能控制lv的生成和删除。同时增加了软raid的支持。这就很好的解决了贝壳当前的问题。
贝壳的分区方案是，gpt分区表，一个bios_grub分区，一个ext2的boot分区，一个lvm分区。lvm上面分8G的root，ext4格式。4G的swap，可以适应当前内存和升级到4G的内存(linux swap推荐是，4G以下两倍于内存，4G以上和内存一致)。1.7T的home，xfs格式。剩余268G。为什么要剩余？因为xfs只能扩展不能缩小，如果我需要扩展root和swap，或者需要产生新的lv来做虚拟机，不留下一定空间会出问题的。如果home不足，我再扩展150G基本可以解决问题。
分区和安装都很顺利，然而approx对新的系统基本没有缓冲作用。我略微想了一下，大概明白了为什么——原有系统是用i386架构和amd64内核，而新系统则是架构内核都是amd64。或者通俗来说，原系统是64位内核下的32位混合系统，而新系统是彻底的64位系统。32位的包对64位的系统一点用都没有，所以approx原有的包都白缓存了。
好吧，瑕不掩瑜，这次升级基本还是成功的。安装对应软件包，复制数据（推荐首次cp -a，速度快，后面用rsync保证同步），修改属主（否则很多程序无法启动）。尤其需要注意，mldonkey在downloads.ini中，不但保存了以哪个用户启动，同时也保存了用户id。新系统中用户名和id对应关系会发生变化，因此要修改正确。基本——事情就完了。
一个小细节是，uwsgi由于amd64升级，所以无法使用。贝壳解决了一下问题，重新编译这个包。另外，debian官方的包出来了，目前处于sid状态，大家可以等着什么时候进入testing状态了。</description>
    </item>
    
    <item>
      <title>除虫故事（三）</title>
      <link>//blog.shell909090.org/blog/archives/1887/</link>
      <pubDate>Wed, 17 Aug 2011 16:03:11 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1887/</guid>
      <description>第三个bug是刚出的，贝壳刚刚从现场回来，提交了bug系统关闭申请。
问题是这样的，我们有一套系统，为客户提供从web访问某台windows的能力，作为管理系统使用。这个系统的后台使用了三四个不同的程序，通过管道通讯。目标设备上有一个组件，要适应2000/2003/2008的32位和64位环境，非常复杂。最近，贝壳将这套系统的目标设备的组件进行了重编译，提供了64位版本。然后测试发现，32位系统不工作了，64位系统正常。
第一反应是什么？一定是组件有问题？贝壳在服务器上，直接使用连接程序去连接，结果是成功的。这个表明组件应当是正常的，或者部分正常。问题就在web页面到连接程序的过程中某处。
负责web界面到连接程序的工程师同事接手了下一步排查，他也是一头雾水。系统看来一切正常，连接程序明明可以工作，为什么从web页面调用就会失败呢？而且只有32位会失败。web页面对CPU字长（而且是目标设备的CPU字长）并不敏感阿，这个听起来不合理。
测试过程中，测试部门的同事偶然的看了一下日志系统，发现了问题。我们的连接程序会写出日志，默认情况下这个日志的属主应当是web.web的，而当时的日志是root.root的，而且权限是644。所以当连接程序被直接调用，当前id是root，就可以连接成功。而连接程序被web调用，当前id是apache，日志写出就会失败，程序就挂了，目标设备会失去反应。
出现这个错误的原因也很直观，在某次调试后，有人删除了原始的日志，并且直接执行了连接程序。但奇怪的是，同样是连接程序挂掉，为什么64位就可以继续执行呢？我们讨论不出为什么，只有基本猜测，64位设备是2008，rdp服务版本比较高，所以相对健壮。
所以，实际的错误是两个。一个是日志权限导致的连接程序不工作。另一个是64位下不正常的连接程序依旧可以工作。
好吧，总结一下这个奇怪的问题中的教训。
1.隔离最小差异。要验证是否是组件升级导致问题，一定要进行旧组件测试，然后再测试新组件。万不可假定旧组件可以正常运行，直接测试新组件，从而将非组件问题带入排查。
2.单元测试隔离。每个部分都要做单元测试，如果测试通过却无法连接，那就是环境问题。再查不出，再检查通讯/调用记录。
3.通讯系统关联错误。当两个程序通过通讯工作，其中一个程序死亡时。另一个程序应当能够检测并且报错退出，而不是出现各种异常反应。
4.日志底线设计。程序一定要写日志，如果日志写不出，就写系统日志，再写不出，设法报全局错误。</description>
    </item>
    
    <item>
      <title>ACC lead to no core temp reading?</title>
      <link>//blog.shell909090.org/blog/archives/1885/</link>
      <pubDate>Tue, 16 Aug 2011 14:55:36 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1885/</guid>
      <description>I bought a Phenom II X4 955 CPU month ago, recently I find that HWMonitor can&amp;rsquo;t read core temp, just motherboard temp. I googled it and find this article.
This article said that ACC is a tech will make AMD X3 work like X4 byunlock cores in BIOS. But CPU core temp sensors will not work, even use a real four cores CPU.
贝壳一个月前买了一块羿龙IIX4955（黑盒），但是最近发现HWMonitor读不出核心温度，只有主板温度。放狗搜了一下，找到这篇文章。根据这篇文章说，ACC是一种能够让AMD三核CPU像四核一样工作的技术，只要在BIOS中打开unlock cores选项就好。但是这个会使得CPU的核心温度传感器不工作，即使你真的有四个核，而不是仿冒四核。</description>
    </item>
    
    <item>
      <title>linux下的文件系统选型</title>
      <link>//blog.shell909090.org/blog/archives/1883/</link>
      <pubDate>Mon, 15 Aug 2011 10:07:03 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1883/</guid>
      <description>贝壳原来一直认为文件系统可以随便选，结果最近吃了两次苦头。一个是btrfs对虚拟机支持不良，另一个是特定情况下xfs性能比ext3高20倍。痛定思痛，打算列一下文件系统选型的方法和依据，欢迎拍砖。
下面我列一下纳入参考的文件系统，当然，ntfs就不要出来搞基了，玩嵌入式/光盘live之类的朋友也不要来凑热闹了阿。btrfs(简介), ext3, ext4(简介), jfs(简介), reiserfs, xfs，基本涵盖常用文件系统。最下面加入ntfs和zfs对比，实际上不参与选型。以下进制换算为1024，大小依次为KB,MB,GB,TB,PB,EB,ZB。
文件系统 btrfs ext3 ext4 jfs reiserfs reiser4 xfs ntfs zfs
最大卷容量 16 EB 32 TB 1 EB (16TB) 32 PB 16 TB ?? 16 EB 256 TB 16 EB
最大文件容量 16 EB 2 TB 16 TB 4 PB 8TB 8TB 8 EB 16 TB 16 EB
目录结构 B tree list/tree list/Htree B tree B+ tree dancing B* tree B+ tree B+ tree hash table</description>
    </item>
    
    <item>
      <title>硬盘底座入手</title>
      <link>//blog.shell909090.org/blog/archives/1881/</link>
      <pubDate>Thu, 11 Aug 2011 10:16:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1881/</guid>
      <description>贝壳买的新硬盘底座入手了，质感不错，很沉，只是在插入硬盘的时候对准不是很方便，总是要对一下才能对准。而且硬盘插上去有点摇晃，如果长时间使用还是会伤硬盘的。不过针对短时间使用，底座正是一个好解决方案。
硬盘底座，就是将硬盘插上去，然后接入电脑的器件。现在大部分硬盘底座都是sata接口的，以前有IDE接口的，贝壳试过，不稳。IDE本身就不支持热插拔，硬做上去当然好不到哪里去。通常而言，硬盘底座/移动硬盘/sata热插拔是三种相关又各有特点的解决方案。底座的目标是使得硬盘可以更换，使用底座的人，多数希望在一台电脑上更换使用一个接一个的硬盘，对硬盘没有特殊要求。移动硬盘，基本就是把底座的硬件和硬盘捆绑到一起。使用移动硬盘的人，是希望一个硬盘在一台台的电脑上使用，对电脑没有特殊要求。而sata热插拔是强调热，即可以不关机接入设备，对台式机用处不大。通常是现场空间不足了，不能关机增加存储设备造成的需求，对插拔次数支持并不好。有资料说，普通sata接口大概能承受50次的插拔。普通硬盘安装而言，50次是一个非常足够的数目了，但是移动硬盘使用的话，几天就用光了。
底座支持两种接口，usb2.0和esata。前者的速率是480bps，后者速率是3.0Gbps，合前者最高60M/s，后者最高375M/s。一块民用硬盘的突发速率往往高达150M/s，usb对于普通台式机而言显然是远远不足了。而且esata直接挂入硬盘控制设备下面，而USB则是挂入USB控制器链，效率上说差了一点不说，而且esata是作为普通硬盘对等管理的。
贝壳本次的方案，是通过一根sata 2
esata接线，将mini-itx主板上的一路未使用的sata引出机箱，连接到底座上。但是linux下要支持esata，必须在BIOS中将SATA设备模式改为AHCI，而后重启进入系统，可以看到设备变了。当然，这个改变对于windows系统来说是个灾难，但是linux系统完全不在乎这个事情。
debox:\~\# lspci | grep -i sata 00:1f.2 SATA controller: Intel Corporation N10/ICH7 Family SATA AHCI Controller (rev 01) debox:\~\# lsmod | grep ahci ahci 25089 2 libahci 22767 1 ahci libata 149043 2 ahci,libahci 这次更改造成的一个额外效果就是，机器上的普通sata硬盘速度也上升了。从原来的71M/s到了115M/s，提升相当惊人。</description>
    </item>
    
    <item>
      <title>读一读我的blog用户</title>
      <link>//blog.shell909090.org/blog/archives/1879/</link>
      <pubDate>Wed, 10 Aug 2011 10:21:52 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1879/</guid>
      <description>好吧，应该是viewer，姑且称为user。谢谢你们的关注，这个blog才撑的下去。坚持写blog，尤其是技术blog，是个很辛苦的事情。查证技术很花时间，也没什么回报，一不留神还会成了各大互联网公司的免费写手。不过看看每个月的ip和pv，好吧，还是值得的。
说是读一读，当然，我不会有你们的名单。我做的是审计，可不代表我会审查来的每个人。但是我的blog里面安装了统计系统，google还有个webmaster。我们来看看数据报表。
首先是，大概1/3的我的读者是geek，或者足够geek，其余是麻瓜。各种windows系统占了2/3，我觉得普通blog不会出现这个比例&amp;hellip;
然后，firefox家族占了一半不到一点的流量，chrome占1/4，一点的safari，其余的IE。感谢党，感谢国家，感谢CCAV，这样的比例让我在抛弃IE的时候决定不会太艰难。
来源，google不计，第一是baidu，其次twitter，然后豆瓣。google不计是因为通过google过来的人都算不出来&amp;hellip;.
爬虫上说，google占了一半，其次是sogou（这个混帐爬虫占了1/3的流量却没带来几个ip/pv）。然后是Yahoo和baidu，两个没差多少。
google reader订阅数是180，平均每周更新3.3篇，我还算努力吧？
最后是很丢脸的ip/pv，上个月ip2700/pv8900，本月预期ip3300/pv8600。</description>
    </item>
    
    <item>
      <title>linux下多种文件系统在小规模追加写下的性能</title>
      <link>//blog.shell909090.org/blog/archives/1877/</link>
      <pubDate>Tue, 09 Aug 2011 16:56:06 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1877/</guid>
      <description>因为公司需要，所以贝壳最近做了一个比较。多种文件系统，在小规模写下的性能。
首先要说明的一点是，贝壳的blog为了保持便于传播，因此惯例是不贴图。这次的图，全部在blog同空间的相册上，通过引用方式放原始连接，可以保持原味查看。我知道中国不少站长复制粘帖大法厉害，不过大家手下留情，可以的话自己找个图床，贝壳可以提供所有原始图片。万一相册过载，blog也会跟着挂掉，谢谢谢谢。
这次的内容，对于有些类型的应用很有价值，具体哪些——懂行的自然了解，就不多嘴了。测试的目标，是测试在同样的环境下，不同文件系统对于散碎的写文件的支撑能力。测试方法如下。
首先，贝壳写了一个程序，可以开N个子进程。每个进程打开4个文件，分别写出16, 32, 64, 256字节大小的块。间隔m秒写一次。当磁盘吞吐耗尽的时候，大量的线程会排队在iowait上，因此造成iowait和loadavg快速上升。当loadavg明显超过CPU数时，宣告文件系统压力达到极限。具体测试方法，使用自己设计的压力系统对磁盘造成压力，然后通过压力读取系统读取系统参数，输出到文件。通过一个filter重新组织文件，计算移动平均数等。最后通过gnuplot输出图像。由于具体有些涉及公司业务，贝壳避嫌，就不贴出源码了。draw.plot的代码在最后。
这个业务情况的核心问题是，对同一个文件，在一段时间内会写多次。正常情况下，这些数据会堆积在系统的Dirty区域，直到dirty_ratio的限制到了，或者dirty_expire_centisecs的限制到了，系统才会开始强制写出。否则每隔dirty_writeback_centisecs的时间，系统会写出部分数据。虽然理论上说，一个磁盘的IOPS应当在每秒600-700次上下，但是实际上并不是只能支撑150个并发的。然而设计的好的文件系统，支撑并发数会比设计的差的文件系统明显高。
这个测试环境和实际的另一个差异，在于读写平衡上。这个业务和大部分的日志系统是很类似的（其实我们系统的业务就是日志）。但是商业用日志系统的特点是在高散碎文件写的情况下还有高随机读。这点在测试中并没有涉及，测试是单纯的大量文件追加写，请读者自行注意。
首先是400进程，间隔1秒写出，测试对象是ext3, ext4, ntfs, jfs, xfs, btrfs，基本涵盖常见的linux文件系统。ntfs不属于常见的linux文件系统，本轮只做对比测试。首先可以看到的是ext3糟糕到吐血的表现，磁盘写io只有500上下，400个进程最多有280多个在排队。这货不是坑爹呢么。ext4的结果就正常很多，io在100上下，开始的高开是因为前一个测试的静默时间不足。jfs的结果很搞笑，队列load倒是不高，可是Dirty缓存一路上涨，让人不禁怀疑到底有没有写出。xfs的表现中规中矩，半分钟一次写出，和贝壳机器上的dirty_expire_centisecs相吻合，Dirty也不高。btrfs和jfs的情况类似。
上一轮中，筛掉ntfs和ext3，其余进行1000进程，间隔1秒写出测试。测试对象是，ext4, jfs, xfs, btrfs。这次ext4也表现出了坑爹的一面，Dirty最高250M多，load也明显超过了2，写io大约在700上下，就此出局。btrfs这次的Dirty控制还不错，在25-40M徘徊，写出也不多。看似情况略好，实际上暴露出btrfs一个非常大的弱点，突发响应能力差，服务不稳定。一次集中写出，就能让排队数飞速上涨。jfs虽然曲线类似，但是队列可从没有超过1。综合考虑，后期平均load也明显超过了2，一样出局。xfs还是一样中规中矩的写出，非常低的io和Dirty。jfs依然是高速上涨的Dirty和超级低的io。
测试到这里，只剩下了jfs和xfs。jfs的特点是大量使用Dirty，平均io很低。xfs的特点是Dirty使用比较低，io输出比较平均。不过我们的服务器内核对xfs的支持比jfs要好一点，所以使用xfs已成定局，下面就是测试两者的极限性能而已。
第三轮的参数是2000个进程，0.75秒间隔。jfs和xfs表现非常相似，让贝壳差点怀疑自己是测试错了东西。核查之后，确实没有。所以就下狠手，测试了一把高压力的。
第四轮的参数是3200个进程，0.5秒间隔。从绝对量上，大概是基础测试的16倍。在jfs测试开始后的三分钟内，load上升到了60，宣告出局，因此贝壳这里没有jfs的图像。但是xfs还是完美的顶住了压力。Dirty已经上涨到了80-120M，平均io也到了300。然而平均load只有1左右，最高load也只有1.4。
最终测试的参数是4000个进程，0.5秒间隔，基础测试的20倍。xfs的表现万分惊艳，平均io300-400，Dirty100-160M，平均load大约是1，最高也只有2。也就是说，到最后贝壳还是没有测试出xfs的最高压力。
另外，贝壳也通过iozone对两者进行了测试，结论是，xfs在读写性能上比ext3高一些，但是在随机读写上大幅低于ext3。无论哪个数据，都无法出现这种20倍以上差距的现象。因此贝壳又对文件系统选择发生了兴趣，具体写在下一篇blog上。
从最终结论上说，我们确定了xfs比ext3的巨大提升（20倍以上），并准备对xfs进行可用性测试。如果您有什么经验，欢迎和我联系。
-------------draw.plot------------- set terminal png size 1920,1080 set output &amp;quot;out.png&amp;quot; set xdata time set timefmt &amp;quot;%H:%M:%S&amp;quot; set y2tics set origin 0,0 set size 1,1 set multiplot set origin 0,0.5 set size 1,0.5 plot &#39;out.dat&#39; using 1:2 with lines title &#39;Buffer&#39;, &#39;out.dat&#39; using 1:3 with lines title &#39;Cached&#39;, &#39;out.</description>
    </item>
    
    <item>
      <title>从C&#43;&#43;的一个特性到设计原则再到哲学</title>
      <link>//blog.shell909090.org/blog/archives/1875/</link>
      <pubDate>Mon, 08 Aug 2011 09:59:46 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1875/</guid>
      <description>最近在看C++的设计和演化，里面讲到算符重载。关于这个，Effactive C++里面明确说明，不要试图重载&amp;amp;&amp;amp;和||算符。因为这个重载造成的结果和默认不符(Not same with the default)。
&amp;amp;&amp;amp;和||有什么特殊？熟悉C的朋友考虑这么一个问题。if(i &amp;amp;&amp;amp; ++i)的作用是什么？基本来说，这个语句是判断i是否为0或者-1的，并且有个额外效果就是对i进行自增。但是，如果i == 0，则不进行自增，这就是&amp;amp;&amp;amp;的短路求值原则。这个原则产生了一系列写法，例如sh中常见的[ -z &amp;ldquo;$ABC&amp;rdquo; ] &amp;amp;&amp;amp; { &amp;hellip; }。
不过当重载了&amp;amp;&amp;amp;或者||后，就破坏了短路求值原则。因为C系列语言是应用序语言，参数先求值。所以后参数*一定*会被求值，无论前参数的值是多少。
更加悲崔的是，这个破坏了最小惊讶原则，或者叫做知识内隐原则。当你使用一个知识的时候，你会根据自己的经验对这个知识做内隐的预期。例如，虽然螺丝有左螺纹也有右螺纹，然而你在拧螺丝的时候，多数预期是顺时针拧紧。不论其理由，这个已经成为常态。同样，有下压把手的门是扇页门，画着杯子的店家是咖啡店和茶馆，画着裙子的厕所是女厕，这些都是你对知识内隐的预期。破坏这个预期，相当于把螺丝改为反向，下压把手的门改成移门，画着杯子的店家是古董店，男厕画裙子一样，会让人感到不知所措。大家会莫名其妙的绕出去，确认门上画的确实是裙子，走进去再看到男厕，感到世界莫名其妙。
同样的道理，如果一个对象使用了&amp;amp;&amp;amp;重载，程序员唯一能够快速发现的机会就是在调试时单步了&amp;amp;&amp;amp;的语句。如果他运气不好，可能在数个小时内都找不到理由，直到反汇编目标代码为止。
那C++为什么设计算符重载？那是设计给需要的算符用的。其实C++一直是一个矛盾的设计，一方面他认为，程序员是不可信的，所以C++里面有隔离保护系统，例如私有成员函数和变量。另一方面，他又认为程序员应当对自己的行为负责，因此他设计了复杂的算符重载，复杂的继承系统，并期待程序员能够按照正确的方法使用。这是一个奇妙的，矛盾的设计思路，反映设计者自身的冲突（例如多人设计），或者C++设计者的实用主义倾向（选择最实用的设计）。python语言的思路相对统一，他认为程序员应当为自己的行为负责，所以python的隔离系统都是伪系统。而java的思路也相对统一，他认为程序员是不可信的，所以java才会搞出复杂的架构哲学。</description>
    </item>
    
    <item>
      <title>估算（一）</title>
      <link>//blog.shell909090.org/blog/archives/1873/</link>
      <pubDate>Thu, 04 Aug 2011 15:32:49 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1873/</guid>
      <description>出租车价又涨了，贝壳好奇出租车上面水到底多深，就找几个师傅了解了一下行情，大家看看吧。
首先是油价，目前是7块多，不到8块，按照7.5算。出租车都不太新，每百公里油耗不小，按照8-10算不过分。一般出租，只要在市区跑着，平均速度大约是40公里/小时。司机都是24小时轮班制的，做一休一。平均做一天，大概上缴330-380不等的出租车管理费。以上就是大致的原始数据。
一天24小时，大约要跑960公里。乘上油耗，大约是86.4升的油。折合价格，大概是650上下。这是工作一天的油价。
师傅做一休一，一个月只能做15天。按照税前4500的工资算，一天要赚300才能做平。对于老驾驶员，还做一休一来说，这个价格不算太高。去掉三金和税，还剩下3650。
一天管理费350，一个月师傅这里能缴5250的管理费。但是三金就要缴掉2000，还剩下大概2000是真正的管理费。
我们综合来算，一天的成本是1300。
平均里程费用的问题，其实有点复杂。不考虑夜程，大概可以用3.5算。大概原理是这样的。
3公里以内，14元。就算正好3公里，费用还是4元多。不足3公里平均费用更高。
3-10公里，一公里2.4。最低值平均费用4.6，最高值平均费用3.1，最终得到的平均费用都介于两者之间，里程越长，平均费用越低。
10公里以上，一公里3.6元。总平均费用会从3.1逐步上升到3.5左右的样子。
从区间函数变化可以发现，出租车费用最低的区段大约在9-11公里之间。6公里以内的费用最高，12公里以上的费用就平均了。注意，以上计算都是时间-距离折算计算，即时间延误被乘以系数加到距离上了。实际出租车计价表也是采用的这种算法。
中途插播一句，如果是多人短途，例如三四个人2公里多。或者8-10公里的地理距离，价格在28-35上下，都是比较合算的坐法。出租替代公交的成本不高。
1300的成本，除以3.5的公里费用，得到371公里。加上各种余量考虑，出租车司机一天最高驾驶1000公里，实际400公里有客就可以收回成本，即空载率不应低于40%，否则就亏本了。
我们观察成本，发现一半多的大头多来自油价。难怪每次油价变化出租车师傅都一脸郁闷。
对抗油价变化的方法也很简单，就是等车，减少空乘移动。从上面数据可以看出，每公里载客可以赚入2.8元，一天的除油费成本650。如果每次载客结束都是当场熄火等待乘客，只要232公里就可以收回成本。所以我们经常可以看到机场或者各个地方的司机师傅，排长队等车。而且油价越高，师傅移动拉客的成本越高，越趋向于等车。
一个师傅每个月缴2000的管理费，上海大约是5万到10万辆出租，一辆出租两位师傅轮流开。一个月给各个出租公司上缴的管理费大约是2亿到4亿。
出租公司要负责车辆管理，叫车电话服务，人力资源，还有无线电调度，是有一定开销的。车辆管理的费用浮动，不大好算，然而普通人的车辆，一次养护成本大约是1200，一年一次。我们假定出租公司成本翻倍，一辆一个月200，全上海的车辆维护大约是1000-2000万。叫车电话，调度管理按照1:100的管理比例，需要500人持续管理。按照合三金工资4000（对于无技术的接线员来说，会比需要技术，连班转的出租师傅工资低）计算，大约是200W一个月。无线电调度不是很清楚，应该没有特别高的成本——除了牌照一类的问题外。
满打满算，各家公司的总开销，加上正常盈利，一个月5000万已经足够。那么2-4亿中的其余部分到哪里去了呢？是成为了出租公司盈余，还是成为政府管理拍照费用，这就不得而知了。
以上数据，都是2011年5-7月间，和各个出租师傅聊天时提到的。大部分数据都是经过一位以上师傅的口中说出，有一定准确性。然而由于仅听取了同一利益倾向的所有当事人，所以数据可能有一定误差。</description>
    </item>
    
    <item>
      <title>如果你的python项目一定要源码保密，你一定用错语言了</title>
      <link>//blog.shell909090.org/blog/archives/1871/</link>
      <pubDate>Wed, 03 Aug 2011 14:13:37 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1871/</guid>
      <description>python的特征在于快速编写代码，快速运行得到结果。通常而言，就是高开发速度。
如果你的项目需要源码保密，那通常不会是高速开发的项目。因为能够高速开发的，就能够高速复制。别人在看到你的概念和基本逻辑后，可以非常快的抄一份出来。代码什么的根本是浮云。</description>
    </item>
    
    <item>
      <title>除虫故事（二）</title>
      <link>//blog.shell909090.org/blog/archives/1869/</link>
      <pubDate>Tue, 02 Aug 2011 15:16:56 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1869/</guid>
      <description>第二个故事，是一次oracle数据库的紧急损坏抢修问题。
当时客户紧急保修，系统无法继续工作，重启后无效。我们就找了DBA赶快飞去客户那里。客户有两台应用服务器和两台数据库，应用服务器组成热备的态势，数据库组成RAC。数据保存在一个SAN盘阵上，LogFile放本地，ArchivedLog使用备份脚本复制到备份服务器后删除。听起来是挺靠谱的方案，没想到就坏了。
去了后，客户说暂时恢复了运作。然而我们还是要出具详细的报告，因此赶快去了机房。贝壳第一眼看的东西，就是/var/log。里面的报告是err9，也就是文件读写错误。oracle一切正常，应用发布服务器一切正常。
这下有点抓瞎了，难不成要出具一份报告说SAN盘阵损坏？可是损坏也得有厂商来维修，说坏得有真凭实据阿。现在SAN一切正常，这个报告怎么写呢？
说来算巧合，贝壳检查磁盘的时候，顺手打了一句df -h进去，看到磁盘空间已经用掉了80%以上，顺口问了句DBA，如果空间耗尽会如何。DBA说会挂起，和目前状况一致。贝壳顿觉狐疑，是不是空间耗尽呢？是的话，为什么会神秘的恢复呢？
Oralce的运作非常精巧，也非常复杂。当一条SQL语句执行的时候，先写LOG，然后操作数据，最后再将结果写入LOG。当出现问题需要复原的时候，根据某个时间点的数据备份，和整个运作过程中的所有Log，就可以复原。但是LOG写出的时候量非常大，没有无限的空间给他写阿。所以LogFile的设计是文件循环，当写满一个文件，切换下一个文件。一个文件写满后，就会有一个服务，趁着磁盘空闲，将Log压缩备份为ArchivedLog，然后再将这个文件的状态变为Empty。
我们的设计，是通过脚本备份ArchivedLog，除去最后一个文件外，复制到备份服务器上，然后删除。但是我们对ArchivedLog的量估计不足，一天清理一次，分配空间只有20G出头。系统开始的时候压力不高，因此绰绰有余。后来压力逐渐升高，这天的操作比较多，ArchivedLog量大了点，导致空间写满。当ArchivedLog空间满之后，备份进程就会报告错误，这就是/var/log下面err9的来历，因此LogFile无法备份出来。当所有的LogFile被循环写满后，SQL执行前试图写入LogFile失败，执行就会失败，然后挂起在那里。这导致了所有应用发布服务器的失效。
备份脚本的设计是定时和开机结合的，在客户第一次重启设备的时候，已经执行了备份脚本。然而备份动作需要执行相当久，中间客户又重启了几次，导致备份工作进展缓慢。直到半个小时后，第一份ArchivedLog才备份出去。然后清理文件，开始LogFile的备份，大约执行了一个小时多。此时服务就突然恢复了，因为空间问题已经暂时解决。而后是不断的ArchivedLog备份和LogFile的备份的平衡，直到我们到的时候，LogFile已经全部空了，ArchivedLog还没有完成备份。因此我们才能抓到最后的尾巴。
反过去检查备份脚本的执行记录，基本验证了这个想法，客户也接受了我们的报告，不过还是要责令修改系统——这是后话不提了。
这个故事里面，至少有几个教训。
对于所有编程时无关紧要的假定值，在开发时可以胡给一个差不多就行，但是上线的时候必须重新分配合理的值。因此必须将这些假定值记录出来，否则从程序中找出假定值来本身就是一个非常困难的事情。
确实运作一下，搞清楚运作方方面面的问题，不要想当然，觉得没问题。就算运作了没问题，在时间的考验前都没人敢保证没事。
一套系统，尤其是大型复杂系统，必须有懂得运维的人员接手管理。检查磁盘IO，CPU压力，内存和磁盘用量，数据量，网络响应速度等等问题。
废物Log不要乱出，太多的Log和没有无异。如果早关注备份脚本的执行记录，就能早找到问题。可是由于量太大，我都是过滤掉了看的。</description>
    </item>
    
    <item>
      <title>除虫故事（一）</title>
      <link>//blog.shell909090.org/blog/archives/1867/</link>
      <pubDate>Mon, 01 Aug 2011 14:46:25 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1867/</guid>
      <description>汽车对冰淇淋过敏的传说都听说过吧，贝壳也说几件故事。寓意什么的就别提了，当个故事听吧。
第一个故事，是一个传奇的问题。贝壳早在02年的时候，就在家里弄了两台电脑。互相用网线一连，组成局域网打游戏。当时流行的游戏还是Diablo II，当然，这东西的III已经叫了10年，还没出来，接近永远的毁灭公爵。两台机器之间的游戏打的很流畅，一点异常都没有。
当年文件共享还是有很多问题的，尤其是连续的几个蠕虫，有志一同的使用了windows的samba系统。所以安全上说，贝壳舍弃了windows文件共享，使用ftp方案。当年还流行用ftp开自己的文件资料共享站，贝壳就用雷电自己开了一个。现在基本看不到了，基本都是用网盘或者p2p。问题就出现在这个文件传输上。
文件传输的速度常常限制在1-3K之间，速度死活上不去。结合Diablo II可以正常工作的事实，贝壳的初步结论是ftp系统问题。然而从外网测试的结果，ftp站点一切正常。那么ftp客户端呢？经过测试，这个客户端软件和配置在外网上访问贝壳自己的站点是正常的。
那么从表象上看，问题就在客户端所在的机器上了。贝壳检查了机器的网卡和系统驱动，又重装了系统，问题仍旧没有消除——似乎有点奇怪吧。而且推理上说，如果机器有问题，Diablo II也不会运行的如此流畅的。
好吧，我们揭晓谜底。问题出在两台机器相连的一根网线上。这根网线质量不好，有一根线时通时断。结果导致ip数据包概率性不一致。ip是不管peyload一致性的，但是tcp管阿，结果导致大量的tcp重传。tcp是一种慢启动协议，因此速度死活上不去。
至于Diablo II可用的问题，则是因为游戏的数据量少，包也小。因此即使慢启动，数据也可以很快重传，导致虽然有问题，却不能很直观的被发现。
这个问题，直到贝壳无意中更换网线才被发现。但是细究推理，却是合情合理。算是一场灯下黑吧。</description>
    </item>
    
    <item>
      <title>给初创小公司的几句话（三）</title>
      <link>//blog.shell909090.org/blog/archives/1865/</link>
      <pubDate>Wed, 27 Jul 2011 14:59:17 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1865/</guid>
      <description>第三篇故事，是来自于贝壳自己的惨痛经历，在另一位朋友那里也有类似教训，可惜他未及早听我一句。
贝壳原来在一家公司里面做项目经理，公司做企业定制开发，现在仍在，所以具体情况隐去不表。因为某些情况，老板叫贝壳做了项目经理，按照资历和能力来说，其实并未足够。贝壳精通的是C++开发，而项目是使用.net技术做的。因此贝壳对项目的管理能力实际上打了一个折扣，只能负责结构设计和协调。当时对项目管理也不是很精通，可以说是半吊子水平。公司承接了一个企业的业务系统开发，经过前期准备，我们团队就开去了客户那里进驻。客户要求，界面一定要漂亮。因此我们选型下来的结果，使用了.net 3.5的wpf开发。开发过程中其实还是有很多问题，很多都是新手问题，暴露贝壳总体设计和项目把握的缺陷。不过这和今天主题无关，就略过不谈了。主要是.net 3.5开发，到了最后发生了几个严重问题。
首先第一个问题，是客户有很多win2000机器，甚至还有一些win98。这个在当初系统设计的时候完全没有考虑。我们开发的机器一律全是winxp，.net 3.5 wpf可以完全的运行在上面。而对于win2000，wpf是无法安装的。于是，我们就必须要求客户升级到winxp。企业用户，他们还必须使用正版。其次，.net 3.5在进行远程SOAP调用的时候，会出现严重的内存泄漏。其实并不是真的泄漏了，.net 3.5的SOAP系统没有考虑调用接口可能多达数百个的情况，对每个函数都进行了序列化器缓存。这个缓存会耗费100-200M的空间，加上其他开销，我们的系统总开销是200-300M，比大部分游戏还高。这个直接导致客户运行我们系统的时候，必须多加一倍的内存。
更郁闷的问题还在后面，wpf是使用dx渲染的系统，因此如果客户没有独立显卡，系统速度就会慢如龟速。wpf的部署必须使用完整sdk，2.0的runtime安装包只有20M，而3.5的完整sdk高达350M。我们在每台机器上安装的时候都是用U盘完整安装350M的sdk。不过这都不是最郁闷的，最郁闷的是，我们项目最后问题实在太多，有个员工做了一个web版的。界面难看很多，但是方便移植部署，内存消耗小。瞬间得到全企业上下一致支持，他们的老板还问我们，当初为什么不这么设计。贝壳哪里好意思说，您不是要漂亮么？
实话说，要不是老板和客户关系好，我们非要给愤怒的客户踢出大门不可。这一个项目，成功的是老板，失败的是贝壳。
总结下来，两个教训。首先是设计必须实地的调查一线需求，不能光听上面的就得出结论，也不能光看部分典型用户就得出结论。如果有一些关键用户对构架支持不良，业务上又不能放弃，就必须权衡得失，甚至修改构架。如果当时我们知道win2000乃至win98的事情，就压根不会考虑使用wpf来做界面。第二个，就是不能迷信技术，或者激进的使用无法掌控的技术。宁可使用最土的办法，老老实实的把业务做出来。新技术由于刚刚出现，因此很多问题都没有完全暴露，很多领域也没有经验积累。例如这个例子里面的内存占用问题，安装包问题，系统问题，都是到了部署时才发生的问题。使用新技术，就会随时面对无人发现的问题，这和RPG的踩地雷战斗是一样的经历。只是这里不但没有经验值，而且踩多了还会直接挂掉。</description>
    </item>
    
    <item>
      <title>动车追尾事故的几句</title>
      <link>//blog.shell909090.org/blog/archives/1863/</link>
      <pubDate>Mon, 25 Jul 2011 14:18:20 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1863/</guid>
      <description>扯死多少人追责是没意义的，搞清楚究竟死了多少人，他们都是谁比较有意义。反正我们都知道，中国官场历来有控制死亡人数的习惯，去佐证这个有任何意义么？我对死亡和失踪人员名单更有兴趣点。如果家属觉得感情难以接受，隐去具体姓名并注释即可。至于死亡人数，我估计在不到百人左右。两辆可乘千人的动车相撞，又都基本满载。在对撞的时候，释放的能量是速度的平方。速度增加一倍，破坏力大概增加三倍。加上前面说漏嘴报的是63，估计差不多吧。
新浪的一个图转了一个机车人员对事故的看法，实话说没看懂。但是有一点很有意思，为什么同样被雷劈，前车无动力，后车却高速撞了上去？如果雷击集中在前车，导致车上所有电子设备全部损坏，也是说不过去的。就同一个图所描述的，还有一个装置判断两车距离，方法是使用电阻。实话说这个方法太漂亮了，基本只用到高中知识就能想通，展开说一下。
两个平行铁轨，我们可以看作是一个无限长电阻。不考虑岔道的情况下，两个铁轨间的电阻应当是无穷大。如果有列车在上面驶过，就会接通铁轨，导致电阻下降。利用这个原理，在铁轨上每一段距离就设一个电器设备，计量电阻。如果有列车试过，电阻下降，灯就从正常转入黄色，红色。驶过后电阻恢复，灯又转入正常，后车只要看前面一段距离的铁轨设备就知道是否无障碍了。不仅是火车，上面有卧轨应当也有可能查出来。如果前方铁轨装置损坏，那么后车什么都看不到，一样应当停车。
结论？这必然是切掉设备辅助，人力操控才能发生的故障。
上次落雷停车，有专家出来说是好事。某种意义上说，他是对的。如果不是因为落雷导致停车给铁路部门太大压力，有可能，当然，只是有可能，这次落雷就不会有人要求强行运行。老老实实的停车，也不会死这么多人。
舆论杀人？别逗了，落雷停车一次是正常，一个月连着两次，是设计问题。
埋火车的事，先别着急定论。毕竟这是埋掉，而不是烧掉。现场还在地下，同类火车也有不少，说湮灭罪证不合情理。但是要说恢复通行，更加不合情理。地面上难道放一节车厢的地方都没有么？还是埋车厢比拖走更加省力？
主管官员走了谁又来了谁很重要么？你觉得换上谁才能让我安心坐火车？
飞机票又要涨价了。五年前，我说飞机比火车安全，大家不信。现在出了事情，估计大家要去坐飞机了吧？现在我说飞机比火车危险。国航的老飞行员，原先是属于空军的。飞行时间非常长，经验丰富。后来中国飞行事业蓬勃发展，飞行员供不应求，后面的飞行员都是标准培训出来的了。不是我鄙视培训学员，但是要他们和数万飞行时间的老飞行员比，还不够格。问题是现在只有培训学员。
从北京到上海的最佳方法是什么？火车会被雷劈，飞机会误点，开车交不起高速费，走路不安全。从一个海中城市到一个海边城市，最好的方法当然是坐船。</description>
    </item>
    
    <item>
      <title>给初创小公司的几句话（二）</title>
      <link>//blog.shell909090.org/blog/archives/1861/</link>
      <pubDate>Thu, 21 Jul 2011 14:31:28 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1861/</guid>
      <description>上面一篇，贝壳说了说老板搞外行指挥内行的问题。这篇反过来，是我一个朋友X的经历。他经历的更加的传奇一些，是一个内行指挥外行的经历。
X是一家外企的程序员，原本这家外企没有IT部，后来为了做市场，于是成立了IT部。他是头一批的老员工，情况和贝壳类似。在他们之后，进来了一个很有水平的程序员Y。Y的水平很高，所以很快的就成了IT部实际的领导人。原本的外企中方经理很是器重，承诺分一定的公司股份，但是要求IT部能够达到一定目标。例如流量多少，来多少IP访问等等。Y很快就带领整个IT部开始行动了，需求分析，计划制定，时间节点分布，系统架构，都很中规中矩。SSH开发网站本身就是一个中规中矩的过程，没有太多的创意可说。半年不到，系统就上线了，基础测试通过，公司上下都很开心。
问题发生在Y拿到公司股份之后，通常按照协议，股份是不能很快变现的。我不知道Y和公司怎么谈的协议，X君作为一个局外人，也只能告诉我一些小道消息。据说Y的股票居然很快就出手了，而后Y君很快的辞职，开了家咨询公司。
而后公司系统陆续发生了一些问题，本来很稳定的流量一下缩水到几分之一，而X君说，他们的营销策略从未有大的改变。更麻烦的是，系统总是出一些莫名其妙的小问题，经常无法访问。公司没办法，只能高价请回Y君来解决。每次都是问题很快解决，但是另一个问题又再出现。几次往返后，公司实在不堪忍受，就再找了一个高手进来看看系统。X君说，人家上午过来，下午走人。说从未看过如此混乱不堪的代码，几乎没有可维护性，建议直接重写。
然后公司就陷入了两难，要不要重写呢？不重写，这个系统显然没有任何继续发展的可能。重写，又如何保证新来的工程师不会搞出这种不可维护的系统。
据说，到X走的时候，中方经理已经被迫辞职了，外方决定找印度阿三来解决这个问题。当然，后面就是一个新的传说了。
整个事情好像是一个职场阴暗面的故事，感觉平平无奇。不过实际上，整个故事还是有几个神奇的地方存在的。首先，公司没有做过Y君的背景调查么？还是说Y君以前一直OK？其次，通常股份都是不可立刻变现的，必须经过三到五年，其目的就是防止这种事情。类似的条件还有无法转让什么的，都跑到哪里去了？最后，公司所有人，包括X君在内，没有发现Y君的系统是不可维护的么？我始终感觉这个故事的背后还有其他故事，只是这已经不是我们讨论的要点了。</description>
    </item>
    
    <item>
      <title>重分区和lvm</title>
      <link>//blog.shell909090.org/blog/archives/1859/</link>
      <pubDate>Wed, 20 Jul 2011 14:15:10 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1859/</guid>
      <description>上篇btrfs会导致虚拟机慢死的blog都看到了吧？看到了就不多解释。
首先，删除掉cache数据，还有冗余数据，使得数据可备份化。然后执行rsync -av /home /mnt/mdisk/sync，将数据同步到备份的移动硬盘上。之所以用rsync，是因为我在备份的时候还能看看网页什么的。等第一次备份完成，关闭所有X程序，退出shell这个用户的所有进程，然后再次执行rsync，就可以保证同步。同步完成后，注销/etc/fstab下面的/home和swap项目，重启。
系统启动后，先登入root用户，因为此时/home已经恢复到了/下面，所有shell用户的home路径不存在。建立/home/shell目录，并且复制/etc/skel配置，修改owner后，shell就可以登入了。当然，此时是系统默认环境，并没有定制化。没有关系，我们只需要terminal。在terminal中执行gparted，会出现图形的分区管理工具。当然，理论上说，如果你够熟悉，使用fdisk完成全部操作也是可以的，这免除了初始化shell用户和登入图形界面的麻烦。删除原先的/home所在分区和swap所在分区，切割一个ntfs分区用于将来安装windows(回头可以打游戏)，剩余的全部切割，而后开启lvm标记。当然，这一步贝壳当时不知道，而是创立了一个未知分区，再用fdisk调整分区类型为8E。而后系统会提示你，不能保证内核数据结构更新，需要执行kpartx
/dev/sda。无论如何，此时我们已经有了一个lvm分区。
lvm的结构是pv -&amp;gt; pg -&amp;gt; lv，也就是物理卷-&amp;gt;物理组-&amp;gt;逻辑卷。物理的各个分区首先被组织成物理组，再被划分为逻辑卷。这样设计是因为可能有多个磁盘上的空间，被划分为多个逻辑卷。在不改变逻辑的情况下，lvm的默认组织构型是raid0的。不过这对我不是个问题，我只有一个磁盘。
首先创建pv，使用命令pvcreate，没什么好多说的。然后是产生vg，使用vgcreate main /dev/sda7，之所以需要main，是因为需要一个vg命名。而后我们需要从这个vg中创建出一个lv来，执行指令lvcreate -L150G -nhome main，设定lv的名字叫做main-home，大小150G。此时在/dev/mapper/main-home，就产生了一个设备文件，大小150G，可以当作/dev/sda1之类的设备一样使用。不过，这个设备没有经过任何格式化过程，所以还需要mkfs.ext3 /dev/mapper/main-home。在这个指令后，我很习惯的跟了一个tune2fs -c 0 /dev/mapper/main-home来关闭重启检测。使用blkid，发现这个设备已经成功创立，并且有了ID。把UUID复制进（这时就知道X的好处了，console下面比较绕路）/etc/fstab，并且修改刚刚被注释掉的/home一行，更改UUID和分区格式。贝壳当时光记得复制，忘记改分区格式，导致系统进不去。不过也不困难，修改/etc/fstab后mount -a一下就可以了。
此时我们已经建立了有效的逻辑卷，并且正确配置。下面要创建一个交换分区，并且挂上去。废话不多说，lvcreate -L6G -nswap main，mkswap /dev/mapper/main-swap。而后一样blkid和vi /etc/fstab。系统就基本配置好了。验证一下看看。
shell-deb:\~\# pvs PV VG Fmt Attr PSize PFree /dev/sda7 main lvm2 a- 229.19g 73.19g shell-deb:\~\# lvs LV VG Attr LSize Origin Snap% Move Log Copy% Convert home main -wi-ao 150.00g swap main -wi-ao 6.00g 而后就是新系统的启用过程，首先要退出X，注销shell用户的所有进程，然后以root删除/home下的所有数据。如果不删除的话，重启后，这里的数据无法访问，变成垃圾。而后重启，就可以看到正确结果了。不过还不要着急登入shell。首先执行rsync -av /mnt/mdisk/sync/home /home，将备份同步回去。这样我们登入shell的时候就可以看到有效的定制化界面了。另外一点细节是，mdisk使用了ntfs格式，所以导致数据恢复后属性混乱。使用find . -type d -exec chmod 755 {} ;和find .</description>
    </item>
    
    <item>
      <title>btrfs上使用虚拟机效率很差</title>
      <link>//blog.shell909090.org/blog/archives/1858/</link>
      <pubDate>Tue, 19 Jul 2011 14:38:06 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1858/</guid>
      <description>试图在linux中使用虚拟机的同学请注意，刚刚测试下来的结果，vmware和kvm在btrfs上的IO效率极端的差。
首先是vmware，win2003，512M的实例，开机大约需要40分钟。这种效率已经远远超出了我的预期，于是我改用libvirt管理的kvm。结果依然出乎意料，debian实例的安装需要超过5分钟。由于怀疑是raw格式而非qcow2格式造成的速度差异，因此新建了一个实例，一时偷懒就放在了/下面，这个分区是ext3而非btrfs。结果安装大约在3分钟内结束，这似乎证明了我的猜想。于是我开始使用btrfs下的raw格式进行安装，结果速度依然异常缓慢。由此我怀疑到是btrfs文件系统的问题。
在ext3上创建一个qcow2格式的实例后，证实了我的猜想。问题在于btrfs的某种机制上。在网络上寻找类似问题，并没有发现。因此在blog上提出警告和问题。
有人知道为什么在btrfs上使用虚拟机会导致极端的效率问题么？hdparm和文件读写测试表明btrfs的平均效率并没有问题，磁盘也没有问题。</description>
    </item>
    
    <item>
      <title>一个初学者的问题</title>
      <link>//blog.shell909090.org/blog/archives/1857/</link>
      <pubDate>Mon, 18 Jul 2011 10:49:19 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1857/</guid>
      <description>今天挺高兴的，因为我看到了一个新手在我的blog上面留言提问。问题摘抄如下，我想他应当不会介意我合理引用吧。
贝壳老师，我是一名大三的学生，下半年马上找工作了。没做过什么项目，编码能力较差但是对技术还算热忱，您觉得在国内做技术40年现实么?
我觉得他的问题比较散，题目也比较大，就专门开了一篇来回答这个问题。
技术40年是个梦想，电脑出现不过60多年的事情，做40年技术的本身就是凤毛麟角，没什么可比性。我认识的做技术的人，最多的是做了将近20年，已经是超级老程序员了。以中国的状况，对做技术的不怎么有利。通常而言，如果你做了五年程序，还是没有什么大的进展，你就会主动的换岗位。因为一般人做了五年程序，却还没有达到一定的程度，周围房子妻子日子会一起压过来，不由得你不担忧你的将来。国外程序员并不背负这么大的压力，而且工资相对平均而言比中国要高一些（当然，国外程序员的工资也在逐渐降低，因为大量的离岸外包）。一般来说，程序员转行最多的是去做管理，也有不少做风投的。出结果的少，多数就默默无闻，只有少数日子过的很惨。
如果你在五年程序生涯后，逐渐确立了自己的风格，并且取得了一定的成就，多数人也不见得继续做程序。大部分人都开了公司，给自己当老板。中国的劳资关系很奇怪，资方比劳方有利的多。混的不错的人，但凡手里有点积蓄的，无不想成为一个资方。我认识的很多老程序员，大都自己开了公司。或者是外包公司，或者是技术公司，但是持续在一线写代码的人却不多了。除去自己开公司的，大部分在大型外企做了技术总监，这些一般是比较有志于技术的。在私企混技术总监的，如果有点年纪，多数都是靠着人脉而非技术坐稳位置的。当然，这不代表我看轻私企的技术总监们的技术。
中国做技术转型快的根本原因，在于不成比例的回报。技术人员要承受长达五年左右的成熟期(http://blog.shell909090.org/blog/archives/139/ )，而且必须全力投入。相反，通常成熟程序员的工资，在写文的时候只有6-8k。加上经验积累，大概在10-12k左右的样子。而做的好的销售可以轻松拿到15k以上的工资，其他途径（大家心照不宣）更多。技术人员还需要忍受技术退火的问题，每五到十年需要重新学习大部分知识。这使得技术人员的投资回报比例低的不像话。
另一个雪上加霜的问题，是中国的盗版问题。中国目前不仅在操作系统领域盗版，而且美剧、动漫、音乐，乃至于创意，皆是盗版，无不山寨。作为用户来说，这给你很廉价的服务。不过对产业而言，这是致命的。目前中国根本没有人真的是做产品的，基本都是抄产品的。产品经理最大的任务，就是根据已有的产品抄一个，然后做一些细节修改，并试图用细节打败对方。在这种思路下面，谁需要用高薪的，有经验的程序员呢？新毕业的学生足以胜任大部分工作，关键是新鲜热辣成本低廉。
上面说了一大通，其实根本没有说到关键问题。你说自己对技术还算热忱，我不知道你热忱的原因。如果你因为技术能赚钱或者很酷，我强烈建议你放弃。和电影里的不同，技术并没有那么大的好处。真正能赚钱的不是技术，而是能用技术解决问题，这个所需要的能力和技术截然不同。也许你会举出Bill Gates和Steve Jobs的例子，我知道你还能举出很多，但这不改变一个事实。他们是用技术解决问题的人，而非仅仅有技术的人。反例你可以看看SGI和SUN这两家公司，都是技术人员的圣地，然而都是悲惨收场。所以如果你打算赚钱，技术不是你要追求的第一要素。也许你会关心，什么才是用技术赚钱的第一要素。这个问题没有标准答案。google用丰富好用的程序赢得用户，apple用良好的设计赢得用户。每个人对这个问题的解答各自不同，知道正确的解答，基本就可以迈入赚大钱的门槛。你觉得我像赚了大钱的样子么？
如果你觉得会技术很酷，我觉得你会落入嬉皮士和脚本小子的范畴。国内能用各种工具扫描网络，破解密码的人非常多，但是能知道各种工具背后工作机理的就相对少。至于能够研究出一种机理，并且写成工具的，可以说屈指可数。实际上，真正酷的是最后一种人。然而大部分人，仅仅是拿着写好的工具，偷盗别人的密码，或者是删除别人的数据，就感到自己似乎拥有力量。这是一种错误而危险的想法。好比你买了一把万用开锁工具，和一把电锯。趁着屋主不在，偷偷溜进人家家里大肆破坏，你觉得有什么成就感呢？这和偷密码，破坏数据是同一类事情，为什么大家会觉得入侵服务器很酷呢？反之，如果你用三年的所有休假，研究了市场上所有的锁，并且一一给出了开锁方法。我想电视台会对这个主题更加有兴趣一点。如果你真的觉得技术很酷，我想你应该仔细研究技术，成为最后一种人。哪怕你最后成为了一个黑帽子（利用技术作恶的黑客），也好过仅仅做一个脚本小子。当然，如果可以的话，白帽子更好。
最后一种可能，是因为你真的喜欢编码。那么，你就必须忍受长时间的编码，旁人怪异的眼光，家人的不解，没有MM，没有休假。在这里要感谢我的老婆，感谢她对我爱好的支持和理解（虽然她不能理解这些技术），否则我得继续打光棍到不知道什么时候。不知道你是否听说过RubyvsPython，我们这帮宅男把编程作为工作，把下了班凑在一起写程序作为一种娱乐。如果你真心喜欢这样，我很欢迎你加入我们这个圈子——当然，多数情况下，这意味着平庸的，和投入不成比例的工资，还有无尽的bug地狱和加班。
如果你没有做过什么项目，我建议你看看我前面写的，如何参与一个开源项目( http://blog.shell909090.org/blog/archives/1848/)( http://shell909090.org/blog/archives/1821/)，找一个合适的项目先做起来。你甚至不需要有编码经验，别人也会欢迎你的工作。这对你找工作很有帮助。
另外，如果你打算找一个编码工作，实际的演练一下编码会比较好一点。无论是需要你进行编码的厂商，还是技术上的进步，编码能力都是一种必须的，重要度远远超过英语的能力。当然，比这更重要的能力是阅读代码的能力。当你能够从读者角度考虑，写出适合人类阅读的代码，这就意味着你开始迈向一个新的编码境界。</description>
    </item>
    
    <item>
      <title>给初创小公司的几句话（一）</title>
      <link>//blog.shell909090.org/blog/archives/1856/</link>
      <pubDate>Thu, 14 Jul 2011 17:30:29 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1856/</guid>
      <description>贝壳做程序员到现在，没去过国企（好吧，和他们有过合作，可实在看不惯他们的作派，死也不去），没去过外企（也是有合作，可惜英语太差），全在各种私企里面打转。从初创公司到中型外包都呆过，还曾是某初创公司的第一个员工，可惜结局不怎么好——关门了。初创公司的一些问题，可谓前仆后继，大家的死法差不多。当员工时，不好给老板直接提意见。现在私下里偷偷说说，有想开公司的当故事听吧。
初创公司第一怕，就是没有经验。没有经验的程序员，没有经验的经理，所以很多事情都不知道怎么办，只能摸着石头过河。实话说，完全摸石头的，还不如不开了。最起码最起码，老板做什么，就必须熟悉这行。想干互联网，必须熟悉互联网。想干企业，就必须熟悉企业。没这个要求，不如不干。至于技术上没经验，可以找合适的程序员。如果老板熟悉互联网，很多做阿里巴巴阿，做腾讯之类的傻话都不会说出来了，他要做的一定是个没有的东西，或者说在中国没有，或者有，但是市场刚要起步。在一个饱和市场内挑战一个巨头，这和唐吉柯德挑战风车是一样的，能得到的只是海明威笔下的鱼骨头。
初创公司没有人熟悉技术怎么办？这就要看你的公司类型了。如果你决定以业务为核心，可以找个诚实可靠（别说看人看不准，如果人看不准，公司哪里都会碰壁）有经验的程序员做主管，记得谈分红或者股份，然后放手给他。他会帮你管理的很好的。不过记得偶尔就他的做法咨询一下其他懂行的朋友。通常这类程序员最好是来自于大型企业IT部或者大型互联网公司，他们会把大型互联网公司的规范带过来。当然，也不要无条件的接受。先文档后程序，重测试轻代码之类的东西对初创是不适用的。起码要等公司有10来个程序员再回头补课。这些人构成的程序部是写不出什么天才程序的，但是可以有效廉价的把你要做的业务做起来。
如果你决定以技术为核心（实话说，中国这种公司比例不高），你起码得有一个高手在手里，才能谈公司的问题。而且公司开起来，你得分给他很高比例的股份。大部分这类创业老板，都是自己就是高级程序员，觉得挺了解程序了。这种情况下的建议反过来，你要找熟悉市场的人，不要觉得你很熟悉市场。程序员不是一个典型用户，除非你的用户都是程序员，否则大部分的需求需要重新考虑，甚至商业模式都未必成立。
初创公司最怕的情况，就是老板不懂技术，也不找人，胡乱指挥。贝壳呆的头家公司，现在已经关门了，所以说说问题也不大。老板决定做销售管理软件，实话说这个决定没什么问题，问题是老板的生产过程。他先找了三个程序员过来（两个新手一个老手，贝壳就是第一个员工，当时年轻，什么都不懂），然后请一个大学教授当顾问。由于大学老师都比较忙，因此他让其中一个比较有经验的程序员负责平时管理，不过还是按照员工待遇。然后他开始做需求，结果时间太少，需求做半本就开始做程序。一下就犯了大忌，需求未系统化。老程序员心知肚明，可是能说什么呢？自己连合伙人都不是，根本说不动老板。
然后制定计划的时候，老程序员制定了一个相对保守的计划——这是当然，因为只有一个老程序员和两个新手，他怎么也不敢激进阿。老板当场否决，把时间提前了两个月，变成三个月完成，并且承诺会加派招程序员。又是一个大忌，拍脑袋决定周期，也没有标杆事件控制。当天我就看到老程序员白着脸进去黑着脸出来，然后很郁闷的修改时间。不过后面的事情好玩的很，程序员来一个走一个，基本留不住人。现在想起来，当时工资实在太低了。工资低是有理由的，贝壳当时基本什么都不会，光学SSH就学了一个多月——还基本不大会用。
做产品的时候，考虑使用数据库，一下子居然挑中了oracle。现在反观，我也不知道怎么做的决策。用oracle做互联网的公司，目前为止我还没听说过第二家，因为oracle的长处在于事务和稳定性，而不是性能。由于维护麻烦，因此也没有买oracle自己的授权，而是第三方公司卖的5W的版本。就贝壳后来所知，oracle从未有这个级别的版本，他们的产品都是20W一个CPU，可以支持25个同步连接来卖的。天知道这个所谓第三方公司是怎么回事。由于配置麻烦（当时还是8），因此抽调我过去处理oracle的安装问题。贝壳就花了一个多月，把linux和oracle安装学了一遍。不过这一来，一个多月贝壳就基本没怎么写代码。一个初创公司一个员工一个月不写代码，可谓是很无谓的损失了。
更夸张的是，由于老板考虑部署的时候，立足点都是——用户太多怎么办，压根没考虑过没用户的问题。所以他开始就自己买机器进行IDC部署。偏偏普通服务器他又觉得太贵，所以还自己装服务器。贝壳再跑了好几次电脑城，买服务器装。虽然采购还是按照采购流程走的，但是又大概一周不干程序。服务器终于全部搞定上线了，贝壳大概一个月花掉了。几个月过去，老板发现进度跟不上计划，就先推迟了发布计划，然后找大家紧急开会。结论是，他加速做需求，我们加班搞定代码。可是有用么？完全没用。下面几个月糊里糊涂，贝壳都不记得自己做了点啥了。发布计划一推再推，贝壳一点信心都没有，就辞职走人了。
后来听说，在长达一年多的开发后，他们还是搞定了系统，并且正式上线销售。但是只有几个客户愿意付钱。坚持了一段时间，老板看实在赚不到钱，只有关门走人。
回顾整个里面的问题，关键是外行领导内行。做顾问的教授是内行，但不是搞互联网的，又没时间。老程序员名义上是经理，却不能否决提议。实际上是最不懂互联网的老板自己在做决策，导致最关键的几个问题上，压根没有发现决策是错的。次之的问题，是为了省钱而浪费时间。程序员出价太低，招的都是新手。买oracle舍不得买原厂带服务的，非要自己搞。服务器都不买现成的，自己组装。这里面能节约的时间，绝对不是花钱能买到的。里面还有什么老板策划需求拍脑袋，听风就是雨，甚至要求我们做一个子功能，叫做&amp;quot;中国地图在线”之类的小事就不提了。
虽说不想埋怨老板，不过贝壳确实在那家公司浪费了生命中的八个月，除了自学linux和oracle安装外没有剩下任何有用的技能。现在这段事情也被贝壳当作一个教训，很多事情不是看起来好就好的，如果事情看起来不靠谱，早点割肉退出不失为一个好的方案。</description>
    </item>
    
    <item>
      <title>初创公司的九句傻话</title>
      <link>//blog.shell909090.org/blog/archives/1854/</link>
      <pubDate>Wed, 13 Jul 2011 09:56:20 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1854/</guid>
      <description>人都有小时候，初创公司会说些傻话，没啥好奇怪的。不过如果老板持续说傻话，没意图深入学习互联网业，你还是考虑跳了吧。
1.我要做个淘宝/阿里巴巴/百度/腾讯那样的网站/产品。
通常这句傻话下面，往往还跟着，10W块，三个月，够不够？没说后半句就已经够傻了，说了差不多够格上春晚了。你当自己是腾讯啊，没管理没技术的初创公司，靠抄袭，和各大IT巨头的拳头产品拼，没有比这个更傻的了。要抄的对象是外国公司还算合理，具体情况具体分析。
2.我们有来自名校出身的CXO——XXX，来自海外大公司的技术总监——XXX，前XXX公司创意总监——XXX，在他们的带领下，我们一定能XXXXXX。
好吧，有的时候，这句话不是那么傻。问题是，说这句话的人，十个里面大概会失败九个。一方面，来自名门不代表能力超群，有时也可能是能力/人品问题而被踢出来的。另一方面，牛人多了也不行。俗话说，别带两个闹钟出海，带一个或三个。到时候财务总监说砍，业务总监说干，两个人谁都不让谁，老板的头一个比三个大。要是两个牛都在同一个部门，例如两个技术总监，那就更有趣了。
3.我有个创意，不过最近很忙，没法详细整理出来。我大概讲一下，你们先做起来，回头我给你们补充。
连创意细节都不重视，或者不愿意说，还创业呢，失业吧。
4.这里有份策划，你看看要多久？半年？不行，太长了。给你们加20个人，三个月给我做出来，早出来有奖金。
很明显，这老板肯定没看过brooks的那本《人月传说》。通常这份策划一年能出来就算幸运了。
5.暂时没有工资/工资不高，不过我们有原始股份，将来考虑上市。
明显忽悠傻小子呢，一穷二白一起创业，是要双方彼此熟悉和信任对方为前提的。人都要吃饭，光给股份不给钱，来的是什么人就不用多说了吧。
6.恩，策划大概是这样。服务器准备怎么搞？租用？太花钱了。我们自己组装服务器好了，反正不复杂，你就顺手搞了吧，便宜多了。
创业初期，专心自己的业务。一会想自己搞服务器，一会想自己搞所需要的业务库，一会又想把某个功能做成独立网站做接口，你真的想明白自己要干什么了么？
7.我要做一个产品，界面要炫，一定要好看。操作要人性化，要让用户满意。功能要全，人家有的我们都不能少。
老板，您这产品是做什么的？
8.马云当年十八罗汉闯天下，我们为什么不行。豆瓣开始三台服务器顶住了所有业务，我们为什么不行。
是啊是啊，朱镕基当了总理，你为什么不行？释迦摩尼当了佛祖，你为什么不行？抛开各种因素分析，就想着和别人比，你真的有那个条件么？
9.钱不是问题。
恩，多数问题是没钱。</description>
    </item>
    
    <item>
      <title>设计的一些原则</title>
      <link>//blog.shell909090.org/blog/archives/1852/</link>
      <pubDate>Mon, 11 Jul 2011 10:23:34 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1852/</guid>
      <description>IETF的RFC文档是整个互联网的基石，在RFC1958中，对于其中的一些原则做了总结和讨论。我觉得非常有意思，因此做一下摘抄和讨论。
保证它可以工作。首先做出原型系统，并成功运行，再着手标准化，而不是相反。
尽可能使它简单。如果一项特性并非绝对本质的特性，那么就不应该考虑，尤其是通过组合其他特性也能够获得同样效果的前提下。
做出明确的选择。如果有几种方法可以完成同样的事情，选择其中一种。
尽可能做到模块化。每个协议独立于其他的协议。改变其中一个，其他不受影响。
期望具备异构性。
避免使用固定不变的选择和参数。如果需要使用参数，最好的方法是让发送和接收方协商一个值。
寻找一个好的设计，不必是最完美的。如果有一个好的设计，但是不能够处理一些特例。那么应当坚持这个设计，让怪异的特例自行解决问题。
对于发送一定要严格，对于接收有一定的容忍度。
要考虑伸缩性。尽量去中心化，必要时将负载尽量均匀的分布到所有可以利用的资源上。
要考虑性能和代价。
第二条听起来好像CISC和RICS之争，虽然现在最流行的处理器是一款CISC，但是这并不妨碍RISC成为优美和进化方向的象征。
第三条在两种不同的语言上，有不同体现。python认为Simple is better than complex，ruby认为Simple is boring。具体可以看这里（http://automation-excellence.com/blog/zens-python-and-ruby）。
模块化是一个非常好的主意，但是同样，非常难实现。
第七条在设计大型系统中非常重要，不要为了一点小小的瑕疵破坏整个系统。
joel on software中，提到了第八条。joel认为目前网页格式凌乱的根源有部分来源于此。第八条鼓励人们在建立浏览器的时候，尽量兼容各种格式变化，而不是对每个不符合标准的进行报错。这导致了各种兼容变化。
第九条所有架构师都应该看看。与其购买昂贵的机器和服务，不如在设计系统的时候，就假定系统中的部分会发生故障。使用设计将负载分布到所有可利用的资源上。此条的推论是，大部分设计良好的系统都具有级联失效的可能。因为一旦发生失效，压力会分布到其他资源上。如果这超出了他们的能力，就会导致他们一起失效。</description>
    </item>
    
    <item>
      <title>讨论时的态度</title>
      <link>//blog.shell909090.org/blog/archives/1850/</link>
      <pubDate>Tue, 05 Jul 2011 15:52:47 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1850/</guid>
      <description>发觉错误要认错，不要在乎面子。死不认错才最丢面子。
不要编造事实。如果你不确定，可以给出参考意见，但是不要说，我确信XXX。更不要为了面子问题而编造一个不存在的事情，大家都会验证的。
别怕专家。专家也是人，专家也会错，更别提里面还有不少的“砖家”。
不随便显露自己的身份。说不赢别人就拿出XX博士XX专家来压人最没意思。除非你们讨论的话题说不大清楚，最后归结为“在XX领域的经验谁更丰富”。
对事不对人。关于某个问题，你可以和人在论坛上吵的很凶，但是转头又是一起吃饭的朋友。不过关于这点，中国人有所谓面子问题。你要先掂量对方是不是个死要面子的家伙。如果是，你让人下不来台导致被绝交，请不要怪我。
不要人身攻击。这里包含了不要质疑对方的出身，动机，等等。例如说不赢就骂对方是猪，猪说的话没听的价值，等等。最常见的，也是最容易发生的人身攻击是质疑对方的动机。例如讨论一个政策问题，说不赢对方，就骂对方五毛，收了好处帮政府说话。这种东西是永远辩不清的，听的人只有明者自明。讨论时你只能就事论事说对方错在哪里，而不是扯到对方动机上去。
不要过度扯无关问题。闲聊时候怎样都好，讨论的时候有关话题适当扯，无关的就不要长篇大论了。
谁主张谁举证。千万别搞倒置了。倒置的话我可以先说你是猪，你举证一下为什么你不是？
不要“敌视”持不同意见者。没有人会永远正确，持有不同意见多数情况下只是意见不同，不是阵营不同。
不要说教，搞一言堂。那是宣讲而非讨论。</description>
    </item>
    
    <item>
      <title>社区的准则</title>
      <link>//blog.shell909090.org/blog/archives/1849/</link>
      <pubDate>Mon, 04 Jul 2011 12:19:51 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1849/</guid>
      <description>今天碰到了一件挺有趣的事情。当然，有趣是对我们这种老社区用户来说的，对于两个当事人，好像受到了严重的侮辱，不怎么有趣的样子。
起因是因为有个朋友，在shlug上求UltraEdit的注册码。马上有用户说不合适，然后有人建议ban掉。下面出来个人，说不要以为谁都是高手，能不能有耐心帮助一下人家，有人要被踢出去了，凭良心讲，这样是不对的，要说一些良心话，至少救他一次。云云。
我想，也别搞的事情太大，就回复了两句。1.lug论坛讨论Windows话题（事实证明，我看错了，他需要的是UltraEdit Linux版）。2.内容涉及盗版。我的态度分两方面，一方面，我们自己手头的版权也不见得干净（我引了自己的一篇blog，地址这里：（ http://blog.shell909090.org/blog/archives/1786/ ）。封了别人，有点“只能做，不能说”的感觉。另一方面，帮楼主说话也不是什么善。严格来说，盗版和偷东西是划为一流的。要说是善，颇有孔乙己“窃书不算偷”的尴尬。
OK，下面说要帮助别人的朋友又出来了。首先指正了我第一条问题，楼主需要的是UltraEdit Linux，这个是我看错了。第二条的回复我摘录如下：
内容设计盗版，这个我不否定，但是请问，你能向我保证您的电脑里面没有盗版软件吗？许多时候我们盗版是被迫无奈的 许多正版软件，在我生活的城市和淘宝网上都是不存在合法的获取途径～ 但是我们是否能够因为一个孩子的一次犯错，就认为他是坏人，然后把它抓起来，永世不得翻身？
看到这里，我就气乐了，心说估计这人要给thomas封掉。下面还有些内容，我们后面讨论。他下文又接了一封邮件，内容摘录如下：
而且如果强词夺理的话，我们甚至可以理解这个标题的含义为！！！
哪位可以给一个Ult​raEdit Linux的注册码 要求邮件列表里面的那位网友提供一套正版的Ult​raEdit 赠送与他 至少这在法律上是说的通的，如果要打官司，他是会无罪释放的，完全抓不到他所要盗版的问题 当然这是题外话，我还是希望大家能互相帮助，才是王道啊～～～～～～～～～ 好吧，我暗自叹口气，决定不和他辩了，这人死定了。
为什么？出了什么问题？
我觉得他在侮辱所有人的智商。
要一个UltraEdit的SN，严格来说不涉及法律，任何角度，任何层面都不。就算你亲手破解了一套软件，依然不涉及法律问题。下载盗版，依然不涉及。法律只要求惩罚传播盗版的人，而不是使用盗版的。就是说，要回答楼主的问题，除非真的如楼下所说，弄一套授权赠与给楼主。否则，楼主没事，论坛麻烦大了。作为论坛管理员，警告乃至封禁是份内事，视而不理才是失职。这点事情，任何一个智力正常，了解版权法律的人都应该能知道。
而且，楼下在讨论的时候，使用了“道德说教”的方法，而且是进攻性的道德说教，咄咄逼人。“你应该如何如何，你自己就没有错么？”这类的言辞。实际上，在被ban之后，还单独发邮件给我，讨论关于thomas的决定。全篇依然是道德说教，我怀疑不止我一个人收到。和hacker打交道，道德说教是一种非常差的选择。hacker们才没功夫听你讨论平等，博爱，神爱世人那一套。对于hacker来说，对和错都是显然的，不显然的事情可以投票。哪怕占领了道德的至高点，对于hacker也没有任何意义。大家都不傻，也不在上幼儿园，不用教怎么过日子。更加奇特的是，对于lug这种组织，讨论技术上如何破解UltraEdit是可以接受的。甚至讨论结束后会兴致勃勃的翻译成英文给作者发过去。然而讨要SN是不可接受的。组织成员都知道这点，并且深信不疑。
然后是楼下帮楼主说话的朋友回复我邮件的后续内容摘录：
第三，请问，您所说的这些规定，有一个具体的邮件列表或者网址，贴出来公示吗？
如果有，我也很希望能看看，至少我现在还没有找到，相信很多人都没有找到，而且显然，这里的规范和网络上大家习以为常的大多数论坛，还是有些许出入的。既然这类公告的东西都非常不好找，请不要随意说ban什么的～～～～～～～ 这是你们自己的职责失职～～～～～～～～～ 这里再补充一个问题，请问邮件列表里面有多少人看到过，这个shlug列表发贴规则与规范的？
这个shlug有几个管理员？
是否你们每个管理员都能单独ban一个人？还是必须所以管理员都通过才能ban？
你们ban一个人的时候，管理员之间是否有讨论过？
能否把这些讨论公开来给大家看看呢？让大家觉得是否做的有道理呢？
这里的许多人不愿意说这些事情，很简单，避免不必要的麻烦与冲突，但是问题始终存在 不回避，直面解决问题，才是值得尊敬的。
我觉得，显然这个人不是在国内日子过傻了，就是在党政机关工作。我们为什么没有贴出一套具体的规定呢？阮一峰翻译过一本叫做《软件随想录》的书，原名joel on software。里面有一段话，大意如下。说joel坐火车，看到火车上的规定列表。一大长串，写着“不能XXXX，否则OOOO”。joel就想，显然，这是没用的。真的会犯事的人，才不在乎你写了什么。会来仔细阅读这些条文的99.99%都是智力正常，不会犯事的人。这些条款，对于他们一点意义都没有，反而显得冷冰冰。
他里面用了一个词，智力正常，我觉得可堪形容lug社区。会来lug社区的，至少是智力正常的人（我不敢用成年，曾见过一个初二学生，现在应当升初三了，长江后浪推前浪阿）。作为一个智力正常的人，你应当知道什么是对的，应当知道我们不应该随地大小便，应当知道不应当盗版。对于任何一个正常的，混过网络的人，都不会误解楼主的意思是要求别人赠予一套正版软件，而是要求提供盗版。也不会认为这是理所当然的，不应当被指责的。对于这种正常人都知道的问题，几个管理员需要讨论，再集体决定。这是侮辱管理员的智商，还是以为这是常委投票呢？
为什么需要集体决定？这通常见于两种情况，一个是意见相左，一个是推卸责任。如果关于一个问题，管理员之间意见不一，就需要讨论，集体决定。对于显然的问题，集体决定的唯一意义是，这个决定是错的，集体责任等于没责任。
为什么需要公示条例？同样常见于两种情况，一个是未达成公识，一个是被投诉时的自我防御措施。如果一个未达成公识的事情，例如餐厅禁烟，要实行就必须明确公示条例。即便我们的智力正常，我们也不可能理所当然的认为餐厅应当禁烟或者应当不禁烟。另一个公示条例的理由就是被投诉时的自我防御，也就是joel看到条文的原因。如果一个组织（例如铁路系统）会被起诉/投诉，那么如果没有公示条例，在某些情况下这个组织会面临败诉的问题。如果公示了条例，组织可以说，我们有规定。这是一种会被投诉的组织的自我防御措施。然而你觉得一个全自发的松散组织，有任何被起诉/投诉的可能么？对于这些组织，唯一的问题是参与人员是否满意，是否得到了他们想要的迦南圣地。
而后更好玩的事情来了。楼主总算出现了，开口就是人身攻击。“首先是有点吃惊，但看着看着不禁笑了出来，原来世界上真的是有很多人，爱装B，爱自诩，爱用言辞抨击别人（现实中会被揍所以不敢）”。他自言曾经在LinuxMint的论坛里面，问如何破解WPA2的WIFI密码，结果得到朋友们的热心帮助。由此得出结果“呵，无需多言。某些人，他就那点素质，就那点眼色，就那一点空间，就知道那一点技术，就不得了了，自己仿佛穿上了圣洁的外衣，其实里面还是破内裤。鲁迅先生笔下的某些丑陋的国人到现在还是存在的。” 楼主还有部分邮件，摘录如下：
这个我得阐明一下，UltraEdit是从Ubuntu软件中心里下载的，我下的时候上面赫然写着“Free”，但我装完之后发现要注册码，我立马想到了来这里，这里是一个Linux论坛，然后这里都是懂Linux的人，这里都是用Linux下软件的人，于是我就来问了。但却遭到一帮人的抨击。我是一个linux菜鸟，开始用linux不到一个月，还不喜欢vim那繁琐的命令，只是在寻找一个图形化的友好的编辑器。但是以后我肯定不会再来这里问任何问题了，我想我也会很快的换回到Windows，因为我还有很多问题搞不清楚，不知道向谁，该怎么求教。但这里的氛围，会让初学者心寒。我之前也发过几个初级帖子，但我发现回复你的人大多都不是帮你解决问题的，而是质疑你和说你这不好那不对的。只希望这不是国内linux社区的一个缩影吧，不然就太悲哀了。
为什么开机会随机出现gnome applet丢失，为什么compiz很不稳定，为什么装独显驱动装不上去等等太多的对于初学者很重要的问题，会影响到很多初学者步入linux殿堂的问题。其中不乏我这则帖子这样的问题。可能那些抨击我的人，是从娘肚子里出来就能玩转vim了，不需要ultraedit这样的东西？这里我想作为一个老资格的Windows开发者，为UE说一句话：UE很好很强大，不比vim差！
我觉得这个人想反了。如果我从Ubuntu软件中心（我是说如果，实际上我觉得这个东西很邪恶）下载一个软件，写着Free，但是却要注册码。我会干啥？大概是卸掉，然后向Ubuntu软件中心投诉“描述与内容不一致”。这和UltraEdit好不好没关系。哪怕当年，胡正的stardict我用了很久了。这家伙突然想到说，辞典可以收费。开玩笑，自己的辞典版权还没有搞定（和金山辞典的质疑），而且很多都是社区整合辞典，还想收钱？
我立刻拆掉stardict，转用dictd和各种客户端，哪怕他后来不收费了。
Don&amp;rsquo;t be evil.
而且LinuxMint那个论坛，我打赌他混的是用户论坛。
hacker们的做法是什么？
首先，还是会回答你怎么做。不过通常不会告诉你，下那个软件，然后上面有个大大的破解，点下去就好了。而是会告诉你，你的网卡是什么型号的，用什么内核驱动，是否支持监听模式。软件选用什么，怎么启用调式模式，调试信息是什么，出了什么问题，等等。
其次，如果你的议题引起了某人的兴趣，hackers会做一些看似无聊但是很酷的事情。例如有人曾经在国外的列表里面问如何在java中将一个数变成负号形式（就是a变成-a），具体的讨论可以看这里（http://www.webgamei.com/club/thread-5028-1-1.html)。%E3%80%82)这个好像还是简化版，我记得那次的恶搞甚至用到了模板编程，以及讨论到模板编程的图灵完备性。
这才是hackers会干的事情。技术，技术，还是TMD技术。hackers才不关心你有没有SN，编辑器好用不好用。如果你打算学习linux，他们会推荐你用vim或者emacs。你表示这个不好用，他们就耸耸肩走开了。除非你说，我打算基于emacs写一个现代编辑器，架构如何如何。内部使用lua语言作为控制，并且做一个elisp到lua的自动译码器。他们会纷纷围上来，看着你干活。如果你干的比较像样，他们会抢着把能干的活干掉，然后合力推出一个1.0版——这大概就是linux怎么出来的。
如果你打算以初学者作为辩护，那是你值得同情的理由，而非必须原谅的理由。如果新手就不应当被惩罚，结果大概是论坛内充斥着新手的叫嚷，“冰天雪地360度裸体跪求，我的显卡不工作了”，“高分求SN，送两个软件SN”。其中大多数人奉行打了跑（hit and run）理念，跑上来跪求一番，搞定问题就潜水，下次还是新手。
他们一辈子会是新手，我们肯定转身就走，离开社区，不再回头。
问问题的时候，你要考虑，我们和你们是一样的。这个陈述包含了数重的意义在里面。你们不会的东西，我们也是慢慢学出来的，为什么要我们无条件的帮助你们？你们是人，我们也是，所以不要害怕权威，认为他的观点一定就是正确的。太理所应当的问题，就要多想想，大家都不是笨蛋。
如果你觉得不习惯，不想学习，可以转回去用Windows。反正这不是lug的损失。
哦，对了，作为结局，楼主也被封了，原因是人身攻击。</description>
    </item>
    
    <item>
      <title>参与开源软件的几个问题详说</title>
      <link>//blog.shell909090.org/blog/archives/1848/</link>
      <pubDate>Fri, 01 Jul 2011 11:16:19 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1848/</guid>
      <description>我刚写了一篇关于参加开源软件的，网上看的人是一堆一堆的。我就再多废话两句，说说我对参与开源软件的几个看法。
参与开源软件，首先要弄明白，你为什么要参加。很多人很热情，想着为世界贡献就来了。热情是好事，可是开源软件不需要理想主义者。在从事开源软件前，你一定要明白，你参加开源软件的目的在哪里。
有些人比较功利，也就比较简单，如果你希望参与开源项目，留名找工作。那你最好就是帮忙翻译。一方面，翻译文档对技术没有过高要求。另一方面，这确实也是参与了开源项目。而且从效果来看，熟悉一个项目首先就要熟悉文档。如果文档都是由你来翻译的，还有谁比你更熟悉文档呢？当老板问，谁熟悉tornado的时候，别人都说，我用过。你说的是，这玩意的中文文档是我翻译的。这对将来找工作是个很有利的加分。类似可以做的事情还有写文档，或者是使用手册、心得、入门指引，HOWTO之类的。不过这些事情就要求你至少熟悉项目，有一定技术。
如果你对现有的开软有想法，到不必一定直接加入。自己修改一下，做一个patch，然后发给项目的负责人说明一下情况。如果你的patch做的不算太次，那么项目管理者应该会表示感谢，并且接受。如果你常用这个项目，说不定他会给你一个可以提交的版本管理器账户。但是水准太差就不要凑热闹了，你的代码大家都看得到，丢脸不要丢到全世界去。记得一个空格引发的杯具么？（http://www.oschina.net/news/19000/a-space-lead-disaster） 如果你对各个开源项目都不满意，想做一个新的，独立的项目。我强烈建议你慎重考虑，毕竟现有很多项目的作者都不是傻瓜。新开项目的管理和推广是一个非常麻烦的问题，非常可能的是，你在很长时间内都得不到什么有效的支援，不得不一个人奋战。虽然有很多人很热情，但是他们很多不知道该做什么（否则本文就没有意义了），更糟的是空有热情但没有能力。
如果你是最后一个，只是对开源项目有热情。我觉得你就先别着急凑热闹了。为什么上面我说了好几次热情是好事，但是开软不需要空有热情的人？因为开软的程序员基本奉行一个原则，有空废话还不如多写两行代码。他们不会帮你培训patch的用法，版本系统的管理，bug系统用法，更不会给你解说某个函数实现的时候为什么不能调用另一个函数（当然，如果你的运气很好，也有人会）。参与一个开软，必须要自行付出时间精力去学习相关的知识。作为开软的程序员，最怕的就是一堆空有热情的用户/贡献者在那里叫嚷，为什么这个函数不能调用另一个函数？我用这个办法简化了代码，效果很好，打了一个补丁出来。同学阿，你没看以前的讨论么？在某种条件下，这会引发循环调用。
热情是好事，不过这是在拥有正确的方法和良好的能力的前提下。如果你有热情，不妨从学习如何提问，如何融入社区，如何对项目进行打包和使用开始。而后逐步开始学习文档的编写、翻译。最后为项目打补丁，贡献代码。
另外就是为哪些项目提供补丁。这个没什么好多说的，最好选择你常用的。不常用的项目，你也没那个功夫，坚持不了多久。而且通常来说，为小项目提供补丁比大项目管用，你的补丁会更加受到重视。</description>
    </item>
    
    <item>
      <title>阿宅程序员的故事——幸福感</title>
      <link>//blog.shell909090.org/blog/archives/1846/</link>
      <pubDate>Wed, 29 Jun 2011 15:57:05 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1846/</guid>
      <description>阿宅最近很幸福—— 亲爱的，起床了么？
起床啦。
记得昨天我提到的电影么？我下载了高清版，等会一起看？
好阿。
我去写个程序，我们等会再聊？
恩恩，回头见 ——恩，这个bot做的真不错，NLP研究完了，下一个课题做啥呢？</description>
    </item>
    
    <item>
      <title>阿宅程序员的故事——买笔记本</title>
      <link>//blog.shell909090.org/blog/archives/1844/</link>
      <pubDate>Tue, 28 Jun 2011 14:53:38 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1844/</guid>
      <description>阿宅最近很困惑，照某些多情MM的观点，这是因为有了意中人。其实要这么说也没有错，阿宅看上了一台笔记本，但是却犹豫不决不知道该不该买下来。
其实不关钱的问题，阿宅这么和朋友说。我只是因为有了三台笔记本，再加一台好像没什么用。这就好比一个男人，家里明明有一妻三妾，却还想沾花惹草一样。
哦？一妻三妾？三台笔记本？那一妻是什么？
不是还有台台式机呢么。一台台式机跑服务器，一台笔记本写程序，一台笔记本打游戏，还有台笔记本带着装样子。再买一台来打游戏，正好可以让打游戏那台去写程序，写程序那台去装样子，装样子那台给别人装样子。好像也不是非常必要，可是这个配置真的很不错啊，硬盘还是SSD的。啊呀呀，真是烦恼啊。
其实阿宅折腾电脑算比较省钱的，因为程序员折腾软件的时候多过折腾硬件的时候。往往是折腾到忍无可忍了，才去折腾折腾硬件。但是多下来的硬件又不知该怎么处理，卖掉不舍得，扔掉也可惜。大致就相当于老爹嫁女儿，总要找个知道女儿好处的托付终身。可这年头懂行的都去买新电脑了，谁会在一台老电脑上折腾来折腾去啊——尤其还是程序员都折腾到忍无可忍的。至于什么送到老区支援孩子的蠢话，阿宅听都不想听。先不说怎么监管，设备能不能真的到孩子手里。就说一台设备的运输费，就比设备本身还高了。</description>
    </item>
    
    <item>
      <title>关于文字抄袭的一个想法</title>
      <link>//blog.shell909090.org/blog/archives/1842/</link>
      <pubDate>Mon, 27 Jun 2011 16:59:18 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1842/</guid>
      <description>最近新浪又和人闹出了抄袭新闻（http://tech.sina.com.cn/i/2011-06-08/15345623475.shtml），姑且不说谁对谁错，其中一个关键的问题是，谁也没法证明自己说的东西。或者说，缺乏铁证。
这种情况下，贝壳想起photoshop的一个功能，水印。你可以向图片内加入水印，但是图片上本身看不出来。当图片被打印，再扫描后，也可以部分的（一定概率，具体看变形程度）获得水印信息。这是版权证明的利器，你做的图片上怎么会有别人的水印？同样，文字应当也可以加入水印功能。原理上说，这属于隐写术的范畴。图片而言，是替换细节的颜色等低维信息。文字的话，通常是修改同义词，标点，等等。我们假定一篇1000字的文章内，大约有100个标点和常用同义词。通过在标点和同义词里面二选一，大约能放置100bit的信息，合12字节。不考虑其他细节问题，这已经足够写一些水印信息了。
水印需要考虑的问题一，是需要考虑盗版者也使用水印检查程序。如果盗版者同样使用水印检查程序，那么水印就会被发现，并且移除——这就失去了使用水印的意义。因此，水印信息必须被重编码，并且需要使用密码才能解开。在未知密码的情况下，水印编码后的信息要接近白噪声。
水印需要考虑的问题二，是当有了一个编码后，找出密码的难度。这决定了证据的效用和盗用者的攻击成本。而对于任意一段编码，要找出能够生成另一段水印内容的密码的计算过程，其计算难度应当尽量接近NP问题。越难计算，盗用者越难决定其中是否带有水印。同时对水印“是否可以通过寻找密码来从文章中找出一段根本没有被预先植入的内容”的质疑就越小。
水印需要考虑的问题三，是需要考虑水印的信息被复制破坏的问题。尤其是当水印信息被重编码加密的情况下，一些简单的修改和段落移动就可以让水印信息失效。因此水印必须有一定的冗余能力，即水印的编码应当在段落移动和内容编辑后也可以一定程度的还原数据。
当一个算法满足以上三个条件后，就可以用来向文字内植入另一段文字。未知密码者无法检查出其中是否包含水印，简单的修改无法移除。拥有密码者可以通过公开密码，让所有人看到文章内的水印。这样就完成了抄袭验证的整个过程。当然，水印的用途还不止于此。这种技术同样可以被用来检查盗版。对某篇具体的小说段落，生成一个随机密码，一同存放在数据库中。在显示内容的时候，用密码加密用户名，加入到文章水印中。这样当盗版文被公开后，具体付钱复制出文字的用户名就可以被检出，然后处理。盗版者既无法检测水印，也无法移除。</description>
    </item>
    
    <item>
      <title>关于中医</title>
      <link>//blog.shell909090.org/blog/archives/1840/</link>
      <pubDate>Thu, 23 Jun 2011 16:56:30 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1840/</guid>
      <description>我对中医和西医的争论不感兴趣，恩，我觉得中医废医验药是不可行的。
西医才多少年历史？从1628年哈维发表《心血运动论》算起，不过400年不到。中医有着5000年历史，西医比起来就是个毛阿。
不过，越多时间的积累，就需要越多时间才能掌握。西医医学院毕业大概需要10年，中医咱打个折，马马虎虎学个120年差不多了哈。
经验没攒够怎么办？你去西医院找不找实习医生看病？</description>
    </item>
    
    <item>
      <title>bitcoin的后续解说</title>
      <link>//blog.shell909090.org/blog/archives/1839/</link>
      <pubDate>Wed, 22 Jun 2011 10:18:23 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1839/</guid>
      <description>上次那篇bitcoin垮了，引发了挺多的质疑。我解释一下我说的“垮了”到底是什么意思。
btc有个目标，就是成为p2p的电子货币。成为货币，就是成为流通实体。我们通过货币，进行交易，将我们的劳动输出转换为我们需要的东西。例如我们写程序，通过将程序移交给需要的人，获得货币，再通过货币，获得我们所需的衣食住行。货币有两重性，一个是交换，一个是保存。今天我们所说的一切，都是围绕着“btc成为电子货币”，来进行讨论的。如果你只是想玩玩这种新型的产品，这种无关痛痒的事情不在讨论之列。
忘记谁算过，btc其实从技术上是做不到替代世界货币的。因为如果要达到mastercard这样的交易水平，一个block的大小会达到数G，而一次交易需要遍历多个block，从而使得整个交易成本无法接受。我估计这个人是非常熟悉btc的，因为我仅仅从介绍上，分析不出这样的结论，这大概需要阅读它的源码。当然，这也可能是假的，或者将来个人电脑也可以达到这个水平，这不是我们今天讨论的要点。
我的两个问题，一个是针对交换，一个是针对保存。针对交换的问题是，我如何保证我的交易是安全的。当然，btc有着良好的安全机制，至少目前我们（包括这个星球上的很多聪明人）都看不出明显问题。但是安全性并不是说交易本身是安全的就结束了，这还包括挣取，兑换，使用，都必须是安全的。上次的问题发生在兑换环节，我们大多数人没有渠道挣取btc（俗称挖矿），所以我们通过实际的流通货币进行购入。mtgox是一个非常流行的兑换网站，当购入完成后，btc存在于你的mtgox账户中。然而，mtgox的网站被攻破了，因此有6W个人在网站上的钱消失了。从理论上说，这名匿名用户可以以完全符合btc规则的方式将其中的btc转入自己的账户，然后再加以贩售。btc规则保护这一交易，并且保护他不被追踪。问题发生在md5hash和salt上，估计是因为md5还是太难攻击，所以只有部分人的mtgox账户遭殃，其余人的账户得以幸免。目前mtgox已经“解决”了这个问题，不过汇率目前从17下滑到了13，相信因为不少人吓出一身冷汗。
我们不说问题是如何解决的，仅仅说受害人这部分。如果是实体银行，碰到类似问题如何处理呢？除去中国的银行，剩下所有银行的方法只有一个——由自己购买足够的btc赔偿给客户。如果银行无力赔付，就需要由国家出面，对银行进行注资，或者收购，或者破产。当然，如果在btc里面，只有一个结局，破产。这次很幸运，mtgox碰到的问题还不严重，转移走的btc并不足够多，而且攻击者一次卖出了过量的btc，导致价格直线下滑。mtgox如果要进行赔付，就可以以低价购回。如果是转移走的量比较大，或者持续在高位抛售，那么mtgox的日子就不这么好过了。
OK，此时，就要说到我们的第二个问题，保存。货币必须有保存能力。如果今天取得的货币在明天就无法使用，或者能兑换的东西少了，就会引发我们的严重质疑。从而使得我们卖出这种货币，买入其他货币——如果能自由兑换的话。或者买入我们认为可以保值的产品——例如不动产。我们看上面，如果mtgox破产，会发生什么情况呢？首先，如果是实际的世界，必须进行破产程序，按照程序清偿债务。但是虚拟货币是不能进行破产申请和清偿的——即使某些国家可以立法认可电子货币，也无法对其他国家造成影响。如果mtgox注册所在的国家不认可电子货币（如果是我，注册的时候一定选择一个不认可电子货币的国家），那么mtgox可以直接卖出手上所有用户的btc，然后关门。如果你打算本地起诉他们欺诈，那就要面临国际诉讼所属权的问题。美国的规定是，本国公民状告其他国家主体，通常可以选择在美国开庭。中国好像是拒不受理。即使是美国，如果mtgox的所有人将来不打算入境，也可以堂而皇之的无视传票。如果你打算在所在国起诉，对方国家压根不认可欺诈事实——电子货币不受保护。
退一步说，即使你的欺诈申请是有效的，mtgox开在美国，而不是开曼群岛什么的，而且这个州承认电子货币。那么mtgox也可以按照普通公司破产流程，接受破产债务清偿。一般来说，作为受害人，你拿到的btc一定已经缩水。国家是没有必要介入的，因为这个市场运作的货币不是他们发行的，也不受他们管辖。然而由于不但是直接受害人的btc缩水，还可能影响其他存款人，因此可能会发生挤兑现象。所谓自由货币市场，这不由让我们想起上世纪国家银行未建立起来时候的混乱时期。那时候，银行都是个体经营，一旦发生问题，很容易引发挤兑。
现在，我们面临两难处境。如果我们允许有人——私人——运作一个基于btc的金融机构——银行——来负责btc的存，兑，借业务，我们就只能拥有一个不受到国家强制力担保的银行系统。如果我们不允许银行的存在，那么连btc的流通性都会受到影响。现代金融系统发展出银行来，不是没有道理的。如果有政府担保了btc，那么btc势必和这国的本币挂钩，这就失去了btc的意义。
再说btc的另一个问题。我们知道，货币的价值是由政府担保的。可以说，货币的价值应当是政府的价值除以货币总量。从这个意义上说，大家卖出人民币是对的。然而由于btc只能在一定时间内生成，而不能由国家发行和回收。因此一定时期内，市场上的货币总量是固定的。当有很多人主观认为，btc值钱时，btc就会升值。而当大家认为，btc不值钱时，btc就会贬值。因此，你手里的btc的真实购买力，应当是随时波动的。然而，这是投机商品的属性，而不是货币属性。一种今天两毛明天两块的东西，是不适合做为货币的。
目前btc是什么东西呢？我想说，大概是新型诈骗活动吧，和庞氏骗局非常类似。btc的质疑之一，就是不公正的初始分配。bitcoin项目起始于2009年，在一年多的时间内都默默无闻，然而在半年内突然火爆。这些初始计算btc的人，他们手里很低代价生成的btc就会快速增值（因为总量不变）。很多投资者看中这一市场，进行投资，然后宣传大家使用btc，他们的货币就可以快速增值（据说有个家伙投资了1000美金，目前增值1000倍了）。然而btc的官方的宣传是“p2p的电子货币”，这点正是我质疑他们无法达到的（或者至少不能达到货币的功能）。他们说服大家使用软件，正是因为btc应当具有货币功能。而实际上，btc做不到现代货币的功能。这很明显是包装和宣传概念，通过持续的涌入制造繁荣。</description>
    </item>
    
    <item>
      <title>bitcoin垮了</title>
      <link>//blog.shell909090.org/blog/archives/1838/</link>
      <pubDate>Tue, 21 Jun 2011 00:19:26 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1838/</guid>
      <description>http://www.donews.com/net/201106/508733.shtm
我想过它的世界崩溃的样子，但是从没想过那么快——
贝壳评论有个原则，不了解的事情少开口。这是当然的，谈不上了解，就谈不上评论。bitcoin这东西，我了解么？我大致了解他的技术是如何构成的，我大致了解货币控制规律，但是我真的了解这样的货币在世界上的运行么？我想不通人们为何买卖这种等价物，完全搞不明白。我们使用货币作为等价衡量物，是因为政府强制力担保。更直接的说，就是不得不用。即使是这样不得不用，我们还得担心这担心那。我想在中国着急买房的同学们，应该有和我一样深切的体验吧。那么，对于一种没有强制力担保的等价物，如果出现贬值，会是如何？大家可会持币观望？不观望会如何？抛售！然后市场会如何走？暴跌！可会有人为此负责？无！
现在，这一切已经是马后炮了。因为暴涨暴贬的情况没有自然出现，算法在一开始就出现了问题——有个家伙被黑了，导致黑客取得了大量用户的用户名和哈希，黑客大量抛售货币。市场在没有出现意外反转的情况下，被人为的转向了黑色，然后，直泻而下。（http://en.wikipedia.org/wiki/Bitcoin）也许这一事件可以得到平息，然而无论是以何种方式，bitcoin都将失去人们的信任。
首先是bitcoin引以为傲的安全性，被证明并不能真的确保安全。虽然问题并不出现在bitcoin软件自身，然而单点被攻破会导致大量账户失窃，这已经是严重的设计漏洞——而且是在设计和源码开放的前提下。RMS的“足够的眼睛”理论，并不完全适用于此。对于有价值的漏洞，足够的眼睛确实能确保漏洞被发现出来。然而在问题解决前，也会引起相当的基于漏洞的攻击。甚至第一个发现者可能不会选择公开漏洞，这次的bitcoin事件说明了这种可能性。如果想到类似的设计或者源码漏洞，在linux kernel中重现。那么在我们修正问题前，linux世界会不会崩溃？对此我感到不寒而栗。
这类情况重现的条件有二。1.漏洞足够有价值。2.提现速度快，目标隐蔽。目前没有在开源世界中出现类似问题，首先是漏洞并不具备足够价值。但是随着开源世界的发展，漏洞的价值是会逐渐升高的。至于提现速度，则很不好说。
对于目前的bitcoin世界而言，更严重的是。如果没有人站出来，那么抛售将继续，市场会呈现出金融危机。直到足够长时间后，世人才会慢慢回来，或者将它遗忘。而如果有人站出来，那么这个市场就出现了控制者——这和bitcoin的设计初衷相违背，使得大家失去对他的兴趣。bitcoin的设计，原本就是为了保证没有控制者。
一点额外的联想。如果类似的问题出现在实体货币上，会发生什么事情？如果有数百万个（如果是中国，可能要数千万）银行账户被盗（而且是确实被盗了，钱财已经转移），政府也查不到攻击者，那么会出现挤兑么？我猜测，更加可能的事情是政府直接和转入银行对话，停止支付和兑换。除了瑞士银行，大部分银行在这种涉及金融体系和国家主权的问题上都是比较配合的。即使无法获得转入银行的配合，国家也可能以货币兑换的形式止损。一笔能够动摇到国家经济的兑换无论如何不可能轻松进行，除非是来自另一个国家的策划和实施。当然，可能有更多的办法解决这类问题。因此一旦有一个强力的主控者，解决这些问题就有很多的办法。</description>
    </item>
    
    <item>
      <title>openwrt配置——QoS配置</title>
      <link>//blog.shell909090.org/blog/archives/1837/</link>
      <pubDate>Mon, 20 Jun 2011 10:10:39 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1837/</guid>
      <description>说到openwrt，就不能不提一下QoS。尤其是如果你需要用P2P软件（目前对迅雷的支持还不大好），基本就不能不开QoS。QoS的全称是Quality of Service，意即服务质量。是专门用于解决拥堵网络上的信号质量一视同仁的问题。例如，我们有一根宽带，两人共用。一个人视频聊天，一个人bt下载（我还不提迅雷个傻X呢）。玩bt的那个一开软件，视频聊天那个立刻没法用了。bt和视频聊天稍微好一点的是，视频聊天消耗的带宽是恒定的。你可以逐步限速，只要给视频聊天留了足够的带宽，两个就都能一起用了。但是，如果另一个人不是视频聊天，而是网络浏览怎么办？网络浏览，视频聊天，p2p下载一起来怎么办？实际上这是很多朋友家中常常碰到的情况。更不说有合租公寓里面你很难监控对方一定限速，软件无法限速甚至恶意抢占带宽（迅雷）。另一个更加技术的问题是，由于上传带宽不足，ACK包回应过慢，导致你的下载速度也不能达到峰值。玩p2p的常常会给上传限速到真实带宽差一点的位置，下载带宽立刻上去，就是这个道理。
怎么办？用QoS，解决你多年老便秘。QoS的底层是tc，其目的就是决定先发送哪些包。openwrt默认的规则是hfsc，设计了四个优先级。Priority最优先，处理22,53,icmp，以及小于128字节的syn,ack包中，不属于bulk类别的。我们可以看到，DNS，syn/ack的优先响应，保证了你的上传不会影响下载。其次是Express，处理5190和小于500字节的UDP包。这个我也不明白是为什么，好像是视频什么的。然后是Normal，包括20,21,25,80,110,443,993,995这些常见端口。涵盖http/https，ftp，邮件系统。最后是Bulk，包括其他包，尤其是ed和bt。
当你启用QoS后，你的p2p软件速度应当不会上升，反而会下降。下载速度不好说，有可能是上升，也有可能下降。因为原来p2p软件抢占了所有带宽，目前他们只能使用普通应用用剩下的带宽，速度当然慢了。然而，当你使用浏览器，收发邮件的时候，速度应当和不使用p2p的时候一样流畅。这才是使用QoS最大的意义。
方法很简单，安装QoS包，然后修改/etc/config/qos，注意修改你的带宽。不修改的话，流量会被无意义的限制死。
另外，打开QoS后，千万记得把你的p2p软件改为不限速。否则不能达到最高性能。</description>
    </item>
    
    <item>
      <title>openwrt配置——防火墙规则</title>
      <link>//blog.shell909090.org/blog/archives/1836/</link>
      <pubDate>Fri, 17 Jun 2011 14:01:28 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1836/</guid>
      <description>如果说路由规则还能讲讲，iptables防火墙规则就彻底没法讲。简直是千变万化无所不能。下面就简单说一下，对于新增的tun0设备如何设定防火墙规则。
----------config/network---------- config &#39;interface&#39; &#39;tun&#39; option &#39;ifname&#39; &#39;tun+&#39; option &#39;proto&#39; &#39;none&#39; ** ----------config/firewall---------- config &#39;zone&#39; option &#39;name&#39; &#39;tun&#39; option &#39;input&#39; &#39;ACCEPT&#39; option &#39;output&#39; &#39;ACCEPT&#39; option &#39;forward&#39; &#39;REJECT&#39; config &#39;forwarding&#39; option &#39;src&#39; &#39;lan&#39; option &#39;dest&#39; &#39;tun&#39; option &#39;mtu\_fix&#39; &#39;0&#39; config &#39;forwarding&#39; option &#39;src&#39; &#39;tun&#39; option &#39;dest&#39; &#39;lan&#39; option &#39;mtu\_fix&#39; &#39;0&#39; 好了，新增了一个网口，叫做tun，处理所有tun+（就是任何tun设备）的吞吐。默认规则是可以收发，拒绝转发。转发规则是可以和lan互相转发。
/etc/init.d/network restart /etc/init.d/firewall restart 然后你看看你的配置是否正确。
iptables -L -v 另外，这个配置方法有个bug。由于你的网口是tun+，所以在启动时，无法自动启用这个接口。在路由器重启后必须/etc/init.d/network restart才能工作。对我来说，每次路由器重启后都是手工开启openvpn的，问题不大。但是对于某些人就比较麻烦。对此推荐这些人直接修改/etc/firewall.user，直接加入以下指令。
iptables -I INPUT -i tun+ -j ACCEPT iptables -I OUTPUT -o tun+ -j ACCEPT iptables -I FORWARD -i tun+ -j ACCEPT iptables -I FORWARD -o tun+ -j ACCEPT 使用interface配置的最终效果也差不多，不过比较简单整齐好理解。</description>
    </item>
    
    <item>
      <title>openwrt配置——路由规则</title>
      <link>//blog.shell909090.org/blog/archives/1835/</link>
      <pubDate>Thu, 16 Jun 2011 10:37:02 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1835/</guid>
      <description>路由其实是个很简单的事情，不知道为什么在实际运用中被很多人误解。首先，路由规则是个纯IP层的事情，和TCP没有关系。其次，路由和NAT没有关系。实际上，和这两个有关系的都是iptables。
路由表的大概概念就是，你家门口有三条路，有一张路径表。到上海市，走左边，北京市，走右边，西安市，走中间。因此路由表的概念是发出规则。当你收到一个包，如果目的地址是本地，那么就交给监听程序处理。如果没有监听程序，那么就拒绝报文。（注意，下文讨论的时候都略去了iptables）如果目的地址不是本地，则看是否允许转发。不允许，丢弃，允许，加入发出队列。路由表就是发出队列的选择规则。这个规则之所以存在，主要是因为多头主机的存在。如果一台机器只有一个发出设备，路由表是没有任何用处的。
发出规则计算很简单，首先取目标网络地址，还有包网络地址，然后分别和子网掩码求与（AND）。如果两者相等，那么就转发到这个规则所指定的接口上，如果不等，继续匹配。规则顺序也很简单，子网掩码距离越长，子网越小，规则越靠上。其中有两种特殊的子网掩码，一种是255.255.255.255，或者叫/32，用于指定主机。一种是0.0.0.0，或者叫/0。这个子网只有一个，叫做default。因为按照规则用这个掩码计算的结果，任何目标地址都可以匹配这一规则。
当然，根据上面的解释我们可以知道，路由表只管发出报文。如果目标设备需要返回一个报文，他必须保证返回路由的正确。因此在下面的openvpn讲解中，你在vps也必须配置路由。很幸运，这个问题openvpn已经帮我们做好了。
通常而言，我们拨号上网后应当有三条路由规则，第一条不解释。第二条通常是内网IP通过内网端口发出——这是当然的，否则内网包就暴露了。第三条通常是其他IP通过外网发出。当内网需要向外网发送数据的时候，会设定路由器作为网关。路由器会转发内网的包到他的上级路由器上。而当外网有数据要发送给内网的时候，情况则正好相反。注意，实际中一般是要进行NAT的，不是这么直接收发。
如果当你使用了openvpn的routed模式，那么你就有了两个内网——常规内网和虚拟内网。我们可以想像，首先需要配置的是两个内网的互通问题。在你本地的网关上，需要配置虚拟网络段发送到tun0设备上。而在远程，需要配置常规内网段发送到拨号上来的这个IP上。大致要配置这些东西。
-----------------vps-server.conf------------------- client-config-dir /etc/openvpn/ccd route 192.168.x.0 255.255.255.0 --------------------ccd/openwrt--------------------- iroute 192.168.x.0 255.255.255.0 这样，当openwrt这个用户拨号上来后，vps上就会添加一条路由，192.168.1.0网段通过刚刚拨号的地址来转发。
其次，哪些数据发送到拨号网络，哪些需要通过虚拟内网呢？这规则通常由你来定。不过千万注意，不要用tun0这个设备来发送到服务器的数据——这会引发循环。这个问题一个不是那么明显的例子是，你设定使用tun0来发送default，但是又没有特别指定vps的地址使用ppp0发送。</description>
    </item>
    
    <item>
      <title>openwrt配置——openvpn的基础配置</title>
      <link>//blog.shell909090.org/blog/archives/1833/</link>
      <pubDate>Wed, 15 Jun 2011 14:58:28 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1833/</guid>
      <description>在openwrt下面配置openvpn是非常简单的事情，当然我假定你有linux下面配置openvpn的经验。
首先，将配置文件，证书等等复制到/etc/openvpn下面。我的配置大概是这样。
client dev tun proto udp remote ipaddr port resolv-retry infinite nobind persist-key persist-tun ca /etc/openvpn/ca.crt cert /etc/openvpn/openwrt.crt key /etc/openvpn/openwrt.key ns-cert-type server tls-auth /etc/openvpn/ta.key 1 cipher DES-EDE3-CBC comp-lzo verb 3 script-security 3 up /etc/openvpn/dftup down /etc/openvpn/dftdown 注意，其中的路径必须写完整，貌似测试下来不支持相对目录。其中的up和down是指在启动和关闭时会自动执行的两个脚本。根据贝壳的测试，redirect-gateway是无效的，不知道为什么。具体的路由配置方法，会在下一章中具体介绍。
然后，你需要将这个配置启用，方法是修改/etc/config/openvpn，在其中加入以下内容。
config openvpn name option enable 1 option config /etc/openvpn/name.conf name是你的配置名，下面的路径和配置文件路径吻合。
然后，你可以这样启动vpn。
/etc/init.d/openvpn restart </description>
    </item>
    
    <item>
      <title>openwrt配置——extroot使用U盘配置规则</title>
      <link>//blog.shell909090.org/blog/archives/1832/</link>
      <pubDate>Tue, 14 Jun 2011 10:10:43 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1832/</guid>
      <description>贝壳入手了一个DIR-825路由器，机器不错，可惜存储太小。所以要用extroot做成U盘启动。
首先，你需要安装kmod-usb2，kmod-usb-uhci，kmod-usb-ohci，kmod-usb-storage，kmod-usb-storage-extras这几个包，以保证系统可以正常访问你的USB key。而后安装block-mount block-hotplug block-extroot这几个包，来启用U盘启动。最后不要忘记安装kmod-fs-ext3，驱动文件系统。
当你搞定这几步后，修改/etc/config/fstab这个文件，如下配置。
config mount option device /dev/sda1 option fstype ext3 option options rw,sync option enabled 1 option enabled\_fsck 1 option is\_rootfs 1 config swap option device /dev/sda2 option enabled 1 然后，恭喜你，你就拥有一个可以从U盘引导的路由器设备了。当然，如果不从U盘引导，那么还是可以正常使用目前有路由拥有的普通功能。在使用U盘后，路由器的包和设定就完全存储在了U盘上。如果配置错误，拔下U盘就可以还原。你也可以复制自己的U盘给别人，在同样型号，并且安装了同样上述包和配置的路由器上继续使用（当然，会沿用你的配置）。
下面，是如何创建可被openwrt引导的U盘。
mkdir /tmp/sda1 mkdir /tmp/root mount /dev/sda1 /tmp/sda1 mount -o bind / /tmp/root cp -a /tmp/root/\* /tmp/sda1 上面几步，更详细的可以参考这篇文章（http://ddnas.org:88/blog/index.php/archives/2.html）。
下面说一下使用U盘启动后，你很可能需要的一些包。
bash 当有了空间，你可以修改/etc/passwd来使用bash作为你的默认sh，这样比较习惯。 ifstat 非常常用的软件，监控各个网卡设备上的吞吐。 iftop 监控各个IP的访问情况。 iperf 测试路由器到各个节点的速度。 openssh-server sshd openvpn vpn软件 screen 一个ssh中运行多个bash的玩意。 注意，openssh使用~/.ssh/authorized_keys作为验证文件，并且该文件必须是600以下权限。而dropbear不使用这个文件。因此必须先产生该文件，再禁用openssh的password验证模式，不要想当然直接以为dropbear已经产生了这个文件。</description>
    </item>
    
    <item>
      <title>不解释</title>
      <link>//blog.shell909090.org/blog/archives/1830/</link>
      <pubDate>Mon, 13 Jun 2011 14:09:56 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1830/</guid>
      <description>(2+2) 5</description>
    </item>
    
    <item>
      <title>从毒奶粉到塑化剂</title>
      <link>//blog.shell909090.org/blog/archives/1828/</link>
      <pubDate>Fri, 10 Jun 2011 10:41:45 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1828/</guid>
      <description>大陆出毒奶粉的时候，大家纷纷指责，怎么这种东西都不检验？好了，现在可以说明这不是大陆质检部门的独门失误了。因为台湾质检也没有想到有人会给食品内添加塑化剂，说明要检测一种你根本想不到会被添加到食物中的物质时，还是比较困难的。
忘记从哪里看到了，欧洲的食品要求是可追查添加的。就是从源头开始，每一步加工技术对食品的影响都要求可控。例如挤奶，然后得到牛奶。牛奶内的成分就检验一遍，得到一个基准值。然后每个环节如何加工都是需要填报的，这样就可以追查某个环节上产生的异常变化是如何来的。例如后续突然发生了蛋白质含量上升，就要说明如何发生。到底是加入了添加剂，是否合法。还是进行了浓缩，浓缩比例多少。
这个方法对于监控添加剂是比较有效的，可惜的是，在中国（包括台湾）的体制内都很难实施。一方面，这种做法耗费很大，需要大量的生化技术人员参与到每个环节的检验校对中。另一方面，中国文化是个关系社会。很多问题往往不是简简单单的技术问题，而是关系问题影响技术。当然，后者在欧美国家也有类似表现，就是各种化工原料公司游说国会，将他们的产品列入非监管，无害的名录。
事情如何收尾？台湾方面的做法比大陆高明的多，也许是吸收了教训。大陆方面拼命掩饰，甚至不惜提高牛奶中添加剂含量的标准，降低牛奶质量，使得大部分的牛奶能够安全过关。但是几年下来，情况越来越糟。牛奶贩子知道政府不敢管，于是越来越嚣张。结果牛奶质量每况愈下，标准一降再降。弄到现在中国人跑到香港澳门去带奶粉，已经造成香港和澳门奶粉严重缺货。两地政府限制销售，同时海关对奶粉抽重税。这说明中国奶粉已经彻底完蛋了，未来十年内都不会恢复元气。而台湾方面的做法则是惩罚有问题的公司，无论涉及多少，一概严惩，标准只能升不能降。剔除了有问题的公司后，好的公司可以继续存活，甚至因为市场的真空茁壮成长。而不负责任的公司则是彻底完蛋，对未来其他想加入添加剂的公司也是个警告。</description>
    </item>
    
    <item>
      <title>无题</title>
      <link>//blog.shell909090.org/blog/archives/1826/</link>
      <pubDate>Thu, 09 Jun 2011 09:35:31 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1826/</guid>
      <description>鲁迅原来是去日本学医的，某日学校里面放处决犯人的影片。片中的中国人被日本人抓住处决，说是俄国人的间谍。周围围了很多中国人，体格强壮，精神麻木，前来鉴赏盛举。
原来百年来，我们从未变过。</description>
    </item>
    
    <item>
      <title>纯C和纯C&#43;&#43;都不是好选择</title>
      <link>//blog.shell909090.org/blog/archives/1824/</link>
      <pubDate>Wed, 08 Jun 2011 17:30:54 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1824/</guid>
      <description>其实严格说来，纯C是门好语言，我很欣赏纯C。但是作为程序设计，C用起来让人觉得很不方便。
在标准C规范中，变量必须在块的头部声明。当然，在近代C编译器中已经取消了这个限制。
我提到过的，C中缺乏高级数据结构支持，导致一些简单问题的实现变得异常复杂。例如我需要解析表达式，生成lisp样子的前缀表达式。这在很多高级语言中是个很简答的事情，但是C中，你不得不自行管理内存和结构，虽然这并不算复杂。
还有一些缺点不能尽述，但是经过时间的考验，C无疑是强大而具有生命力的一种语言。
C++就比较搞笑了，纯C++是一个非常糟糕的东西。我们列举其缺点：
函数指针是C中常用的概念，在C++中应当使用抽象接口-实现的方式，或者使用仿函。从技术上说，在C++中使用函数指针是一个落后而没有C++特色的行为。然而无论使用哪种，生成一个新的函数就必须生成一个新的类。你当自己是java么？
太多internal操作，导致代码隐性错误和思考心智负荷大幅上升。例如某个类可以定义一个单参的构造函数，constructor(int c);这等于定义了一个隐性转换函数，允许将int转换为类。或者使用T operator T();算符函数，将类转换到T。如果此时错误的将类实例当作int来操作，就会产生编译通过但是运行时出错的问题。更严重的是，转换函数严重的消耗性能。在这种情况下，编译和运行都不会出错，只是莫名其妙的性能很差。要避免这个问题，可以用explicit关键字。具体可以看这里（http://www.cnblogs.com/cutepig/archive/2009/01/14/1375917.html）。但是这就需要额外的知识，和随时关心自己是否会犯下这个错误的小心。
强大到啰嗦的模板系统。那位有信心看懂所有stl编译时报错的？反正effactive C++的作者举过一个缺陷，打印了1500个左右的字符。大部分都是符号，望之犹如天书。
为了支持多重继承，导致指针类型转换可能导致指针地址变换。这是一个很扯淡的缺陷，转换指针类型不会引发指针的地址转换是一个C中的基础常识。然而C++为了支持多重继承，导致这个常识被破坏。
thiscall和non-thiscall指针无法转换。类成员函数和普通函数指针是无法转换的。这个破坏了所有代码都可获得地址的常识。
其实C++的致命缺陷，就是过度设计。每一步都是很必要很有道理的改进，在最后就组合成了让人望之生畏的复杂系统。
要使用C++，关键就是克制自己的过度设计欲望。C++可以很容易的使用类，模板，友元系统写的很强大，而且看起来很自然。例如你可以定义自己的BioTree，使用+做合并，可以使用|运算符做输出等。然而到最后，就会变成另一种语法。并且，如果合并上大数运算库之类的库，做一个BioTree，其中元素是大数的结构。当这个结构内发生错误的时候，你觉得你能够在里面找到正确的调试方向么？
要克制自己觉得很自然的想法，使用传统C中的一些做法，哪怕他们看起来很古怪，但是这是有道理的。</description>
    </item>
    
    <item>
      <title>版权的态度</title>
      <link>//blog.shell909090.org/blog/archives/1822/</link>
      <pubDate>Tue, 07 Jun 2011 10:10:34 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1822/</guid>
      <description>如果你读过RMS的书，你会发现这位老先生对版权的态度很有意思，他压根不认为copy这个东西居然还有right。copy要是有right的话，数学公式应该有right么？你那里算火箭弹道呢，有一张传票发过来，说牛顿的后裔发现你在用牛顿法求根公式求解方程，要求你支付权利金。你觉得不觉得很崩溃？就是因为数学公式是人类进步的基石，所以我们不允许任何人声明对它拥有权利，也不允许任何人阻断他人学习和使用数学公式。
然而如果数学公式没有权利的话，软件有权利就是一件很扯淡的事情。例如，你解决了一个数学问题，能够以最小代价将字符序列中的无效信息压缩到最小。然后，有人针对这个算法写了一个文本压缩程序。由于你的解是数学最优的，就是说，根据你的论文写出来的程序，如果没有什么大的实现瑕疵的话，压缩率和压缩速度是最高的，没有之一。所以，写程序那个家伙就申请了一个专利，天天收入不菲花天酒地。然而，你，这个论文作者，居然TMD还在吃糠咽菜。
当然，这个例子本身太过特殊，数学家一般也有过得去的计算机水准，所以针对算法写程序的人多数是数学家本人或者合作伙伴。但是这种问题不时刺激人们，对于我们最重要的东西，我们不能设置权限。然而我们却允许做出不重要发明的人享受特权，和特权带来的利益。所以RMS为代表的一小撮人，主要是老嬉皮士，强烈的反对版权。作为代表，他们搞出了GPL——反对版权的版权。你要基于使用GPL的代码写程序，好，你就必须放弃你的版权，同意GPL。
甚至，他们更激进的认为，不应当阻碍人类获得知识的渠道，知识是人类所共有的。所谓共有，是指，任何人都可以自行获得和学习知识，而不应当为此付出代价，例如金钱。当你上学时，你是为教师付钱，而不是为你学到的知识付钱。而且，当你想学，你就应当可以学到，而不是被禁止学习。因此，美国禁止向海外出售高强度加密软件的事情，在他们看来是邪恶的。将知识垄断，阻碍他人学习，他们看来是邪恶的。甚至你自己用来开发的机器上，设定个密码禁止其他人浏览你的代码，他们也认为是邪恶的。
这种观点当然很不讨好，甚至从他们的运动中获益的一些人——包括中国，都不欢迎他们的想法。我研究获得的知识，却无法用来牟利？劳有所得，这在很多人眼中是天经地义的，因此RMS等人的思想才显得那么格格不入。然而不可否认，RMS等人并不能算是扯大旗为自己牟利的伪君子或者邪恶教主，他们是真的信仰这种人类大同的观点。RMS年近50，无车无房，未婚，孑然一身，到处宣传自己的GNU思想。他自称自己连电脑都没有，不过出名的唯一好处是，现在他很容易借到一台电脑来收邮件。
国外的情况而言，是版权发展过剩。就是说版权现在已经成了大公司跑马圈地的法律武器。而国内的情况，则是版权发展不足。国内的人说认同版权观点，但是却仍旧使用盗版的winrar。而反对版权观点，也不是因为他是个嬉皮士，同意不应当阻碍人类获得信息和学习知识。纯粹是懒得付钱而已。</description>
    </item>
    
    <item>
      <title>如何参与一个开源项目</title>
      <link>//blog.shell909090.org/blog/archives/1821/</link>
      <pubDate>Thu, 02 Jun 2011 11:03:47 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1821/</guid>
      <description>最近很多人在问如何参与一个开源项目。其实个人觉得这是一个非常傻的问题，不过还是回答一下，期望这帮人记得用google搜到这个角落，免去论坛上月经一样的天天看到这种傻问题。
为什么说傻？因为这个问题和“如何捐钱”一样，是个没法直接回答的问题。你总要有一个明确的捐献目标，或者是明确的目标项目。世界上没有一个组织，名叫“开源软件”。无论你的目标是什么，你必须找到一个确定的开源项目进行参与。
在哪里能够找到开源项目？这很不好说。一方面，你可以在sf.net(需要翻墙)和code.google.com(最好翻墙)找到相当多的开源项目，也可以在github之类的地方寻找。另一方面，你也可以在debian里面找。很多包里面附带了项目的主页，如果你觉得这个包很不错，希望做贡献，可以按照链接找过去。
如何挑选合适的开源项目？首先要和你的兴趣相符合，或者能够满足你参与开源的目标。例如你对算法非常感兴趣，让你加入一个ERP系统的定制，成天修正繁琐的业务问题，可能就会让你觉得兴趣全无。其次最好参与一些中等复杂程度，具有活力的，比较缺人的项目。像linux kernel这种规模巨大，参与人员众多的项目，本身就是一个非常巨大的工程。你要了解这个工程需要很长时间，但是大部分你觉得有价值的事情都已经有人在做了。
如何开始？具体可以先给项目管理者发一封邮件，说明自己的目标，兴趣，能力，时间，然后问问他们是否需要自己的贡献。
大多数项目最缺的人才，不是程序员。通常一个开源项目，有几个程序员在做是不成问题的。但是大部分的开源项目缺乏一些周边人员，例如到各个组织中推广项目，获得反馈。和各种dist和开源平台协调，负责收集bug，控制项目发行，进行打包。负责项目的测试和文档工作，以及英文文档的翻译工作。这些工作并不需要专业知识，但是琐碎而且费时，程序员并不大乐意做。而且控制项目的release，还有进行协调要有一定的经验，也不是程序员擅长的领域。所以相当多的开源项目，就是程序员拍脑袋写，然后用户两眼一摸黑的用。没有合适的文档，没有各种系统的适用包，没有bug和用户意见反馈。
因此贝壳也请求，所有看到文章，且有志于贡献自己的力量的人，都可以考虑参与开源项目。你不需要会写程序，也不需要精通电脑。你需要做的可能就是将文档从英文翻译成中文，或者不断使用一个软件并找出其中不合理的地方。在中国，捐献金钱是容易的，但是却不透明，也不自由。你不确定你的金钱捐献给谁，他收到多少，是否真的需要。然而如果你选择某个开源软件做捐献，你可以选择自己为谁做出贡献，也会受到全体开源软件用户的感激。</description>
    </item>
    
    <item>
      <title>HR该干吗</title>
      <link>//blog.shell909090.org/blog/archives/1819/</link>
      <pubDate>Wed, 01 Jun 2011 10:32:36 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1819/</guid>
      <description>这个帖子（http://www.douban.com/people/March_Liu/miniblog/446401835/）里，蘑菇叔（好吧，现在该叫牛柳叔了）和别人在争论一个问题。其实我对他们的争论没什么兴趣，但是有几个论点挺有意思的。
面试题不应该拿回家做。面试题是即时抽查对方个人程序能力的一种测试，要是拿回家，就变成测试亲友团能力了。七大姑八大姨的儿子面试，知道你是个程序员，让帮忙做题，难道还能不做？我曾经也帮人做过面试题，不过做之前我都会和他们说。你可想好了，这些题目不算简单，我做没什么问题，没意外你应该能进去。但是这些题目比你能力超出太多，进去后你能不能呆的住，有什么后果自行负责。对方多半是一脸不在乎的说，先进去慢慢学吧。我知道结果的两个，一个进去三天，连试用期都没过就被开出来了。因为是试用期关系，企业还不管赔。另一个则是苦熬三个月后还是扫地出门。目前我的结论是，允许把试题带回家做的企业是不靠谱的企业，允许做题时上网也一样。做面试题时会去想作弊的技术应该转行去做销售。当年吴士宏的《逆风飞扬》里面说，主管问她会不会一个技术，她不会，但是说会，回家后连夜学起来。这种行为在销售上也许是值得称赞的行为，本人也够努力。但是作为技术岗位，这种思路是行不通的，而且非常不负责。技术是依靠长期积累的，指望在几天内突飞猛进根本不现实。相反，你闯祸的可能远比做好的可能大。做一名技术，就得踏踏实实把事情做妥当了。
HR不应该管工资。蘑菇叔的另一个观点是，HR不应该管工资。实际上，我一直不知道HR该做什么。当年我做招聘的时候，基本就是两种思路。一种是来一个人，HR告诉我大概要多少薪水，我谈下来直接向老总汇报。另一个是我面试能力，然后告诉HR这人我们大概给多少薪水，最高给多少。虽然名义上是HR主导的工资谈判，但实际上做出判断的一定是技术主管。因为除了技术主管，没有人（包括HR）清楚这个人能力能够为企业带来多少价值。HR评估价格的方法通常都是对比法，用证书和资历去做加减。可是证书和资历一方面容易造假，另一方面是否和企业技术合拍不得而知。
性价比太高的人都是不稳定因素。这句基本就是“价格围绕价值波动”的另一个表述形式。一旦一个人，你觉得他的性价比非常高，基本是几种可能。一种是他的能力非常特殊，只有少数企业需要。一旦从你公司离职，对他非常不利。而对于你们企业来说，找其他人非常不利。因此你才会觉得他的性价比特别高。第二种是因为这个人在其他方面有所求，例如商业间谍，或者需要从你公司里面积累一些必要的技术和资历。最后一种是因为——这个人快离职了。如果你发现一个人性价比特别高，请务必查一下为什么。是否是特殊能力很好判断，是否需要积累一些必要的能力和资历也不难分析。如果不是，请务必先考虑商业间谍的问题，再考虑你是不是应该要加薪了。
从第二个论点，我回想起以前和现在碰到的HR，发现他们的职能基本都不是很明确。或者说，多半明确的职能越界了。检查考勤，计算工资奖惩，招聘，安排培训，处理人事材料，负责离职事宜，这是HR的基本几个职务。我碰到的多数情况下，检查考勤和计算工资都由行政代劳，奖惩是老板拍脑袋的。招聘，处理人事材料和负责离职事宜倒是行政负责，但是基本没有企业安排培训。相反，人事的最大用途就是和员工谈判工资和福利，能压多少压多少。甚至很多人事的工资和他的谈判能力成正比。
这招对初级的岗位用用还可以，但是对于中级以上的技术人员，是绝对不能用的。应当说，凡是五年以上的程序员，应当禁止HR砍价，直接让老总去谈。为什么？具体看上面的论点三，招一个靠谱的人难阿。往往一个靠谱的职工，仅招聘成本就以千计。以一年期合同来说，为了每月500的价钱（一年大概差6000）谈跑了一个程序员，不仅招聘成本都打了水漂，而且再要招人还会更加困难（一方面是很难碰到，另一方面很多老程序员都互相认识）。这种HR不被问责才有鬼了。</description>
    </item>
    
    <item>
      <title>阿宅程序员的故事——引子</title>
      <link>//blog.shell909090.org/blog/archives/1818/</link>
      <pubDate>Tue, 31 May 2011 17:29:51 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1818/</guid>
      <description>阿宅程序员不姓阿名宅，也不姓程名序员。所谓阿宅是死窝在家里不肯出来的意思，原因就是——因为他是个程序员。据说这种变态职业的最高水准，可以在一个密闭房间内盯着一个阴极摄像管长达数个月之久，中间除了有人送饭和洗澡上厕所外都不间断，哪怕睡觉都是往后一躺拉上被子就睡的。理所当然，这种职业的人多数会成为阿宅，然后成为去死去死团成员，再光荣的晋级大龄男青年，初级怪蜀熟，中级怪蜀熟，乃至成为最终职业——怪蜀熟之王。
阿宅已经想不起来自己是为什么才会变成程序员的，据说阿宅小时候成绩还不错，老师曾经给过评语，学好数理化，走遍天下都不怕。阿宅是数理化班上成绩最好的一个，没想到连房门都走不出去。这点上倒不如班上几个只会英语的女生，索性学孔子周游列国不回来了。据说搞计算机的，有一半人是英语很好，另一半人则是数学或物理很好。英语好可能是因为计算机资料中有大量的英语，看懂资料就会用计算机。不过阿宅来看，到底是英语好使得计算机水准好，还是因为要学计算机才学好了英语，还真是一个困难的问题。因为据说周游列国的诸位美女，往往连“gtalk为什么不能传输文件”这种简单问题都不理解。但是说要学计算机才学好了英语，阿宅至今和人说的最复杂的一句英语就是&amp;quot;hello, world“，对方MM十分钟没有回话——因为在用MSN——然后慢悠悠的回了一句”？“，再然后，阿宅就不知道该说什么了。
阿宅经常被人夸——当然也经常被人骂。人家说他计算机“好”，于是他就想，好在哪里呢？问问别人，得到的回答往往是。你会装电脑啊。装什么电脑？组装硬件还是装系统？没区别，反正都很厉害。于是阿宅无语，大概猜到，其实自己和世界上其他的程序员差不多。只不过周围的人没见过真正的野生程序员，才说他厉害。至于周围人见到的程序员是什么东西，经过阿宅的观测，看起来像是研究生的升级版吧。
据他的一个当老师的师兄说，目前研究生的水准大概和人肉代码执行器差不多，或者可以简称人肉CPU。你可以用通用语言——在中国大多数都是用中文——把你要做的事情详述出来，包括每个步骤。名为研究生的CPU就会按照你的预订逻辑把你的描述执行完。如果出现了异常而你没有捕获，往往就会留下异常现场。看师兄说话时的脸色，阿宅不大想猜测那是一个什么样的现场，大概和自己写程序忘记捕获异常被老板抓到时候差不多吧。
阿宅的很多朋友都发了大财，很多人的智商都不如阿宅，工作程度也不如阿宅。阿宅也想不明白这是为什么。如果说自己的收入比不上几位组长，那是一点都没什么好奇怪的。但是有几位按老师评语，除了打架什么都不会的同学，居然能在不声不响间赚到阿宅从宋朝开始工作才能积攒的财富。阿宅总觉得哪里出了问题，到底是老师的问题，社会的问题，还是自己的问题，他是真弄不明白了。不管怎样，死宅的日子每天有吃有睡，还有自己感兴趣的技术可以研究，阿宅对拼死赚钱也没什么太大兴趣——虽说和别人说这话的时候，人家都一脸嫌恶的说，你那工作量居然还好意思说这种话。
阿宅的工作很简单，老板经常会有些想法。有想法很正常，人类要是没了想法，世界指不定会变成怎么样呢——反正阿宅肯定会失业就是了。阿宅的国家某位伟人说过，黑猫白猫，抓住老鼠就是好猫。阿宅自己的理解是，黑盒白盒，抓出bug就是好方法。老板的理解则是，好想法坏想法，不做一做就是没想法。做一做总要有人来执行吧？于是阿宅就和组长一起被叫过去，聆听老板的一些想法和创意，并且设法实现出来，这就是所谓程序员的职业。据说在日本的神话中，貘是一种食梦的怪兽。阿宅觉得自己干的事情和他差不多，都是把别人的梦想嚼吧嚼吧吞下去，然后拉出来一坨完全不一样的东西，再卖给另外的人。大部分的情况下，吃下去的东西，拉出来的东西，写出来的东西，我们都用同一个字称呼他们。
如此简单的工作，照理说应当是应者云集。可是却不是。照统计，中国的程序员数量就一直没怎么涨过，一直维持在150-200W上下——大概和全国高校计算机系每年毕业的学生持平吧——这还得算上研究生升级版的所谓人肉计算执行器。阿宅很理解为什么高校毕业生就业困难，要是每个计算机系应届毕业生都要有份对口的工作，全国程序员就得每年失业一次，所以程序员特别怕刚毕业的大学生。其实别看程序员怕刚毕业的大学生，大学生还怕程序员呢。每年的程序员面试题目在应届生看来如鬼途一般可畏——这里可没有好好教授先生的开根号乘10的慈悲秘技。如果运气不好，一同前来测试的同年们水准特别高，要么就是及格仍旧丢了工作，要么就是保住了工作保不住工资。最杯具的是和刚刚面了管理职位的同学比比，无论工资职位还是发展，没一个可以相提并论的。多少年轻人立刻多年梦碎，拍拍屁股转职成管理者。
我们下面的故事，就是这个死宅程序员的日常生活。注意，下面发生的事情并没有一个绝对的逻辑先后关系，也没有一个时间的跨度关系，你可以想像他们发生在多个平行时空中。如果你发现什么前面阿宅脑袋开了瓢后面却兴高采烈的去游泳之类的问题，请不要奇怪。他们可能发生在逻辑上的十年间，也可能游泳其实在开瓢之前。当然可能最大的是因为阿宅根本不会游泳，所以走在泳池旁被绊了一下导致脑袋开瓢&amp;hellip;&amp;hellip;</description>
    </item>
    
    <item>
      <title>结婚公告</title>
      <link>//blog.shell909090.org/blog/archives/1816/</link>
      <pubDate>Mon, 30 May 2011 11:55:51 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1816/</guid>
      <description>我结婚了。
我和她在facebook上认识，所以，首先感谢国家，感谢党。是你们封了facebook，把我培养成一个坚定的翻墙主义者。没办法，不翻墙，无老婆。
谢谢所有我认识的不认识的朋友，谢谢你们的支持。在我发推结婚的数小时内，总共有150+条rt祝福。我很开心，她也很开心，所以在签字结婚的时候，她只考虑了十多秒。另外友情提示，如果你们带女友去登记，最好一气呵成直接带去，然后在签字前再给她一次考虑的机会，不要提前预告。如果不给女孩子一个考虑的机会，好像在强迫人家。但是如果给了太多考虑的机会，她会持续失眠一周以上，反应迟钝，出现恐婚心理，甚至危及你的人身安全。从维护女性健康的角度，最好在求婚成功后就直接去登记，你好我好大家好。
最后，我会开一个小系列，讲述一下我每天的生活。名字大概就叫——阿宅程序员的故事。</description>
    </item>
    
    <item>
      <title>上海地铁的七宗罪</title>
      <link>//blog.shell909090.org/blog/archives/1813/</link>
      <pubDate>Fri, 27 May 2011 10:25:52 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1813/</guid>
      <description>上海地铁是我见过的最扯淡的地铁之一。之所以有之一，是因为还有北京地铁在后面排着。
停车误差半个门很常见，最高误差了半截车厢，再倒车。停不准已经成了上海地铁的特色之一，尤其是二号线，停不准是正常的，准了您就知道，今天是老师傅上班。
上下车关门不等人。四号线上下班高峰经常在世纪大道站迟到，然后掌车要按照时刻表赶回来。但是世纪大道站又是上下客流非常大的一站，经常是10-20秒不够上下的。结果掌车在无法确认人已经全部上车的情况下就开始关门，后来的人要么强行顶住门，要么等了一辆车被车门关在外面，车里面还是空的。
地铁没厕所。我不知道是不是中国的惯例，反正我在中国没看到几辆地铁有厕所的。上海地铁金沙江路，金科路我知道站外有厕所，世纪大道站内有厕所。其他站好像基本没看到，有几个站我专门问过，没有。
信号烂到渣。闵行附近有个信号盲区，上海火车站到宝山路有个信号盲区，这两个已经是出名的连信号都没有的地方了，不过这毕竟是地面，覆盖不全是移动问题。可是二号线世纪大道站一下光有模拟信号没有数字信号，只能收短信不能上网，外加部分上来的地方连电话都会断线，很明显是泄漏电缆出了问题。二号线延伸段已经竣工一年多了，这种小问题都迟迟不解决。这还不说，四号线信号时好时坏，每天想用飞信给朋友发个消息纯属摸彩。
下雨天地铁内发霉的味道重到一塌糊涂。不知道地铁内空气循环系统怎么设计的，一到梅雨天就有一股发霉的气味，让人喘不过气来。就这种空气系统，多少安检都属摆设，万一有人往进气口放一颗毒气弹，出的事故比地铁内爆炸轻不了多少。
上地面的出口安排不科学。金科路站靠近金科路祖冲之路的出口，连接了一条双向的人行道，最高可容三人并排。但是几乎所有人都是向十字路口方向走，导致单向人流满载。平时上下班高峰还有人在这么拥挤的地方摆摊无人过问，也不知道城管这会到哪里去了。就不说这种中国特色问题，单是下雨天无人摆摊的时候，由于打伞，因此地铁出口入口严重滞留。自从施工因素导致一面栏杆被拆除后，很多人就找到了出路。一旦又遇到下雨或者摆摊导致拥堵，就从非机动车专用道上走到入口附近，翻栏杆进入地铁口。很多人还互相问，今天要不要翻墙？
安检纯属扯淡。没有强制安检能力，没有规范的操作方法，没有明确统一的培训和标志。你不知道在那里搞安检的人是谁，也不知道什么要检，什么没事。每回被检查都像被刁难，为什么我这个要检，前面那个看起来差不多的就不检。更不谈安检纯属扯淡，有此vvoody拿着一盒德州扑克的筹码进去，标准的赌博工具。安检一点异议都没有，过去后我们从后面看了，外观上看起来像六管炸药。安检人员真的有良好的培训，能够分辨什么是危险物品么？
上述这些都是扯淡中的扯淡，相比起来，倒是有些不那么扯淡的事情，我们也列一下。
经常晚点停开。这个不完全是上海地铁的过错，毕竟上海地铁已经是世界上人流量最高的地铁之一了，算里程好像也是世界第一，因为意外而晚点实属难免。但是上海地铁缺乏一些有效手段引导人流规避。有一次在世纪大道听到广播说哪里哪里地铁严重延误，我觉得这已经是个不小的进步。个人希望能够通过网页，围脖等方式将运作过程中的事故展现出来，让乘客避免死胡同问题。
高人流量交错没有进行多站交互分流，例如香港地铁的中环和金钟。在香港地铁设计中，但凡大人流量交错的换乘都是多站分流的。说的更通俗点，就是两条线有两个交点。大家可以想想，要是人民广场站分两站交错，人流何至于如此拥堵。上海地铁设计的看似阡陌交错，但是在最密集的几个站人流压力极大，浪费大量空间做人流疏导，而且要走很远。而最稀疏的几个站又人流不足。不过回想上个世纪上海地铁设计的时候，那时候打死我也想不到地铁会发展到现在这个样子，而且是在十年内。所以设计失误有其历史原因，但历史问题造成的后果还需要我们正视。
拥挤，拥挤，还是TMD拥挤。这个也得部分的归功于上海的发展。目前上海地铁的票价比北京高出不知多少，还是非常拥挤。北京拥有全国最拥堵的地面交通系统和地铁票价，可见其地铁拥挤程度。这是典型的政府好心办坏事的结果，其中最典型就是广州市政府免除地铁票价导致的地铁功能失效。希望上海地铁能推行“峰-谷”折扣票价，推高峰口票价，降低平时票价，充分利用平时用不到的运能。</description>
    </item>
    
    <item>
      <title>使用uwsgi搭建python应用</title>
      <link>//blog.shell909090.org/blog/archives/1811/</link>
      <pubDate>Wed, 25 May 2011 11:08:38 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1811/</guid>
      <description>wsgi是python的一个标准web服务接口，具体去google pep文档，不解释。在李木头的忽悠下，贝壳试用了一下uwsgi搭建python服务器，感觉还不错。 首先，贝壳将uwsgi打包成deb包，因为这东西和python基本没什么关系，就是一个标准的系统守护服务程序。其中贝壳测试了一下，uwsgi编译的时候是依赖版本的。所以请教了一下thomas，打了uwsgi2.6和uwsgi2.7两个包。没办法，mercurial对python2.7的支持不是很好，每次都出问题。具体的可以加贝壳的repos: https://home.shell909090.org/debian/ testing，然后通过一下贝壳的key，就可以直接安装uwsgi2.6了。当然，不通过key也可以，只是每次安装升级都有警告。 贝壳写了一个很简单的init.d，使用&amp;ndash;vhost来启动uwsgi为服务模式。这种模式的好处是，uwsgi的具体执行的应用都是由nginx来确定的，因此所有的映射只需要修改nginx配置就好。uwsgi参数很多，包括可以指定内存限制，工作进程/线程，定时重启工作进程，多解释器等等。是一个高效的，功能强大的服务器。具体可以自己参考调整。最好的的地方是，uwsgi还支持virtualenv，你可以给不同的应用建立不同的工作环境，从而在环境中使用指定的包，而不是系统包。 下面是一个nginx配置的例子。 location /ticket { include uwsgi_params; uwsgi_param UWSGI_PYHOME /usr; uwsgi_param UWSGI_CHDIR /home/shell/workspace/hg/thost; uwsgi_param UWSGI_SCRIPT main; uwsgi_pass unix:/var/run/uwsgi.socket; } location /mlocate { include uwsgi_params; uwsgi_param UWSGI_PYHOME /usr; uwsgi_param UWSGI_CHDIR /home/shell/workspace/hg/thost; uwsgi_param UWSGI_SCRIPT main; uwsgi_pass unix:/var/run/uwsgi.socket; } location /hg { include uwsgi_params; uwsgi_param UWSGI_PYHOME /usr; uwsgi_param UWSGI_CHDIR /home/shell/workspace/hg; uwsgi_param UWSGI_SCRIPT hgweb; uwsgi_param SCRIPT_NAME /; uwsgi_param SERVER_NAME hgweb; uwsgi_pass unix:/var/run/uwsgi.socket; } 这里面设定了三个应用。由于贝壳不需要virtualenv，所以PYHOME设定了/usr。第一二个应用的基础路径在/home/shell/workspace/hg/thost，脚本叫做main.py。第三个应用的基础路径在/home/shell/workspace/hg，脚本叫做hgweb.py。需要注意的是，uwsgi会以模块方式导入这些脚本，然后使用其中的application对象作为wsgi处理函数。所以不要把application对象赋值放在if __name__ == &amp;lsquo;__main__&amp;lsquo;里面，那没用的。第三个应用指定了SCRIPT_NAME和SERVER_NAME，是因为hg的wsgi模块没有SCRIPT_NAME不工作，而这个应用和前两个不在一起，所以如果不指定SERVER_NAME会导致覆盖冲突。 这种部署模式的好处是，我可以使用一个宿主来管理所有的应用，而不必每个应用启动一个宿主，省去了多个宿主管理的麻烦。而多进程，压力分布等等问题都被uwsgi的配置系统搞定了。于是应用程序宿主做到了彻底的免管理，即装即用，只用调节性能匹配即可。具体程序配置下放到nginx中，要修改映射关系只用管理一个位置。</description>
    </item>
    
    <item>
      <title>debian中文初学者引导——中文化</title>
      <link>//blog.shell909090.org/blog/archives/1809/</link>
      <pubDate>Tue, 24 May 2011 10:36:10 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1809/</guid>
      <description>讲了半天废话，都是在介绍你应该用什么应该用什么，基本没讲到中文用户最关心的一个问题，中文化和输入法。
其实没讲是有原因的，因为debian的中文实在太简单了。在你安装的时候选择中国地区和中文，装出来应该就是中文的。如果不是，或者你安装的时候忘记选择了，可以先运行dpkg-reconfigure locales，出现一个很长的语言列表。其中选择中文的几项，常见的有zh_CN GBK(不推荐18030，多出来的字很少用到，生成时间极长)，zh_CN UTF-8，zh_HK UTF-8(香港地区编码，不用可以不选)，zh_TW BIG5，zh_TW UTF-8(后两者为台湾地区编码，不用可以不选)。选择好后，确定，推荐zh_CN UTF-8为默认编码。然后就是漫长的生成，完事。试试看重启后你的env | grep LANG有没有变成zh_CN.UTF-8？过去就对了，没有的话，手工修改/etc/default/locale加入也一样。其实dpkg-reconfigure locales就是修改了/etc/default/locale和/etc/locale.gen，然后locale-gen一下。
不过这不代表你能正确的使用中文，只是你的满屏看不懂的东西变成了一堆方块而已。因为，你还没装字体。当linux不支持该种语言的时候，出现的是满屏的乱码。如果支持了但是没有字体，则是一个个方块。下面是我常用的一堆字体，保证不含windows，大家可以选择自己喜欢的用。ttf-arphic-bkai00mp，ttf-arphic-bsmi00lp，ttf-arphic-gbsn00lp，ttf-arphic-gkai00mp，ttf-arphic-ukai，ttf-arphic-uming，ttf-wqy-zenhei。其中最后一个就是赫赫有名的文泉驿正黑。安装方法都很简单，aptitude install就好。如果你还不满足，非要自己安装字体。那就在/usr/share/fonts下面新建个目录，把你的字体复制进去（符号链接也可以），然后在这个目录中运行mkfontscale，mkfontdir。全局运行fc-cache。
OK，中文支持快走到最后一步了。你现在应该可以看到满屏的中文，可是，可是——你还什么都输入不进去。恩，没装输入法吧。debian的特点是什么东西都是自己来装，而不是系统帮你装好。所以，你需要自己装输入法。简体中文而言，比较流行的有三种，fcitx（传说中的小企鹅），scim，ibus。下面就要根据你的具体配置选择了。ibus是我用过的比较好的输入法，但是相对比较费cpu，在低端机器（例如netbook）上老是丢字，scim对这种情况略好些。如果你安装了一个以上，可能你还需要im-switch来切换输入法。这个软件会调整/etc/alternatives/xinput-zh_CN的链接指向，这是debian的alternative系统，细节不说。
另外说一句额外的提示，做完上面的步骤，你应当可以阅读和输入中文，但是你看到的软件还是满眼的鸟语，对不对？这是因为软件的语言在软件书写的时候就确定了，他不会随着你的内容改变而改变。但是这并不是说常见软件没有中文版。例如你安装一下iceweasel-l10n-zh-cn这个包，再跑iceweasel (firefox)看看？</description>
    </item>
    
    <item>
      <title>debian中文初学者引导——上网</title>
      <link>//blog.shell909090.org/blog/archives/1806/</link>
      <pubDate>Fri, 20 May 2011 13:46:38 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1806/</guid>
      <description>上网是linux系统的一大强项，除了那个变态的QQ外。
通常而言，上网指的是网络三大基础应用，浏览器，IM工具，电子邮件。最后一个我们介绍过了，那么我们就集中介绍一下linux的两大杀手级浏览器。firefox和chrome。
firefox是debian内置的，不过用的是开放分支，iceweasel。其实主要就是改个名字换个图标做做兼容性测试打几个下游补丁什么的，内核还是一样的，版本号和firefox都保持一致。目前testing下的firefox还是3，不过估计很快就会升到4。firefox下有很多插件，你可以挑选部分来安装，改善浏览器特性。记得linux是一个多用户系统么？对了，你在firefox下安装的插件(addons)都是针对个人起效的。所以，你老婆安装了一堆插件，对你不会构成任何干扰。如果你打算全局安装，可以用apt-get来安装部分插件。
用firefox的话，你可能疑惑flash插件怎么装。系统会给你默认安装拉，不过那个非常不好用。你需要用non-free版本的flashplugin-nonfree，直接从仓库中可以下到。注意这个组件是x86 only的，如果你用64好像要自己装ia32来做模拟，否则无法生效。如果连这个都说版本太老，就去adobe的网站上弄个最新linux版本回来，for debian或者for ubuntu都可以，自己装。
chrome的安装使用就比firefox简单很多了，直接去这里( http://www.google.com/chrome/ )下载合适的包，安装后，你的系统/etc/apt/sources.list.d/位置下会多出一个google-chrome.list，每次update的时候会检查google的仓库，跟随升级。这点chrome做的非常无缝，你基本没有感觉。
另外就是IM软件的选用。国内装机量最大的是QQ，不过鉴于我对企鹅这厮没什么好感，我强烈不推荐你用QQ。整个开源社区做QQ兼容做了不下三次(QQ for pidgin, luma, eva)，还都是在未公布资料的黑盒情况下做的。每次都被腾讯改协议给封掉。自己出了个linuxqq，做的烂不说，还多年不升级，也不管客户反应。微软就算讨厌开源，也好歹没有封杀开源办公软件兼容他的文件格式。既然这厮不打算支持开源，那么开源也不打算支持他。你非要用，可以用webqq，或者很痛苦的用linuxqq。有不支持的功能，请打电话给腾讯吧。
linux下用的比较多的IM还是gtalk,msn和skype三种。不得不感慨大中华局域网的威力，国内和国外的东西都不一样的。国外好用的东西就是进不来，国内的山寨货大家玩的不亦乐乎。首先是最多的gtalk，这个东西什么都不支持。没有定制表情，不一定能传输文件，没有远程协作。那为什么列为第一推荐IM呢？因为这个东西就是为了随时通讯而生的。支持gmail内置客户端，可以在无客户端的情况下用网页使用（这也就是为什么不一定能传输文件的原因）。支持几乎所有的第三方客户端，支持手机，强安全通讯。（腾讯的另外一个问题是，在同一个网段内的人可能可以获得你的聊天记录）并且，这是我所知唯一能同时在多个地点登录的IM工具。你可以在地铁上通过手机聊天，到了公司后直接登录，不必担心手机和电脑互相提下线的问题。电脑关机，手机持续在线。
MSN是老牌IM，不过微软逐步淡化了这个系统。某个版本后居然需要安装100M+的客户端，我就没在windows下继续使用。但是linux下的pidgin可以同时支持gtalk(协议是jabber)和MSN，开一个软件可同时登录多个账户，也不需要一个超级庞大不知道干了点啥的客户端，非常方便。skype是国外知名的IM工具，特点是音频支持能力，说白了基本当电话来用的，在国内发行的版本有记录聊天记录的问题。linux下要使用skype需要独立下载软件，pidgin-skype这个东西居然要skype在运行才能使用，这不是扯淡么？贝壳的repos里面有skype的安装包，你也可以去下载官网的安装包，应该没什么问题。不过最近这厮被微软收购了，也不知道将来命运如何。</description>
    </item>
    
    <item>
      <title>debian中文初学者引导——办公</title>
      <link>//blog.shell909090.org/blog/archives/1805/</link>
      <pubDate>Thu, 19 May 2011 09:49:49 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1805/</guid>
      <description>作为一台中国的电脑，最重要的三大功能就是上网，办公和游戏。当然，linux下你需要暂缓考虑游戏。不过最基础的，办公功能应当还得有。
首先要说明的一个问题是，linux下对微软的office系列的支持并不好。这当然不是linux的过错——你让微软打开odp或者tex文件看看？不过鉴于现在office满天飞的现状，你总要支持doc系列文件，否则办公就直接出局。这部分的是为什么只有程序员才用linux的原因——在IT公司里，用office的是异类。我们公司里，老大带头用openoffice。对于没有这种幸运的人，我的建议是安装libreoffice这个包，这个的前身是sun的openoffice，不过开源社区做了一个完全自由的分支。后来sun杯具了，debian下的头号办公系统就是他了。大部分的文件打开，使用和保存都是没问题的。如果光论正常文档，文字的编辑，段落编排，libreoffice的功能都不会和office差太多。不过高阶功能开始，libreoffice就会变的很不顺手。这是当然的，office用户众多，发掘出的用法和资料不知凡几。libreoffice用户不但少，而且多数还是老外。
当然，作为一个linux用户，通常都抱有一个观点。平文本(plain text)比复杂的办公软件好用多了。大多数情况下，这都是对的。当你写毕业论文的时候，内容比你排版技巧更加重要。当你给上司做一份汇报材料的时候，内容比排版技巧更加重要。平文本的简单编排，libreoffice还是可以比较好的兼容掉office的。如果这些工作上，公司的要求是排版技巧更加重要，那你可以考虑换一个公司。有少部分情况下，排版技巧会比内容更加重要。例如客户PPT展示，公司报纸美编，这些工作不要使用办公软件来完成，你应当做的是寻找合适的软件来做到完美，而不是用一个不专业的软件在那里折腾，然后抱怨不好用。记得我们开始说的么？要懒，而且有创造力。
除了office系列，另一个办公上常用的东西是pdf文档。debian下可以用的选择就比较多了，闭源的有foxit reader，开源的有epdfview，mupdf，xpdf，evince等等一堆。个人比较推荐foxit reader，基本可以解决大部分情况下会让你比较烦恼的中文看不见问题。如果要生成和处理pdf，选项更多。linux下大部分办公软件都可以直接输出PDF。即使不可以，也可以像windows那样，装一个虚拟的打印机，然后输出pdf来。
提到PDF不能不提的就是打印，这点上debian做的并不太好，当然，也不算太差。在windows下的行为通常是，连接打印机，安装驱动，在打印机设备中出现新设备，配置打印机，并标记为默认，然后就可以工作了。在debian下需要先安装cups包，启动服务。再安装合适的驱动，例如hplip-cups。连接打印机，然后用浏览器访问http://localhost:631/来访问管理界面。新建打印机，再选择合适的配置。对于不大熟悉的人，通常会在驱动选择和管理界面上花费不少功夫。这里（ http://zh.wikipedia.org/wiki/CUPS ）介绍了常见系统下的管理工具，能减轻一些负担。不过实话说，直接用web管理并不繁琐。
办公中还有一个比较重要的功能就是收发邮件。作为初学者，我建议你用thunderbird开始，debian下需要安装icedove这个包，这是thunderbird的开放分支。基本简单配置后就可以直接收发邮件了，没什么值得好讲的。不过既然你选择了linux，我建议你好好学习一下gnupg和签名技术。你要知道，通常的电子邮件安全性和明信片背后写的祝福大致相当，以这个作为办公基础实在是一件相当危险的事情。</description>
    </item>
    
    <item>
      <title>组合翻墙方法——细节</title>
      <link>//blog.shell909090.org/blog/archives/1804/</link>
      <pubDate>Wed, 18 May 2011 09:53:48 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1804/</guid>
      <description>中国这网络，越来越没法上了。现在你访问国外禁网，就会中断连接10分钟。问题是我也不知道哪个网是禁止的&amp;hellip;
现在教大家一招，基本能够永久套上翻墙。理论上你就没有中招的可能，尤其适用于公司使用。
首先是squid，这个是流量分离和缓存的关键部件。你可以用pac替代，但是这只局限于某台具体的机器，并且代理用户支持pac。squid的好处是，任何http访问都可以分流，而且无须客户端支持。甚至如果你精通squid配置，你可以配置成透明代理（cache拦截），从而避免在每台机器上修改代理配置。当然，cache拦截是有技术问题的，具体请参考这篇（http://home.arcor.de/pangj/squid/chap09.html#a6）。
squid的配置如下：
include /etc/squid3/gfw.conf acl localnet src [192.168.0.0/16](http://192.168.0.0/16) http\_access allow localnet http\_access allow localhost cache\_peer 127.0.0.1 parent 8123 0 no-delay no-query cache\_peer\_access 127.0.0.1 allow gfw always\_direct deny gfw never\_direct allow gfw 以上配置是允许192.168.0.0的C类内部子网访问本机，所有gfw规则的域名必须通过8123端口的上层代理，而其他的直接访问。注意以上不是完整配置，不保证可以独立运行，只保证在debian的标准配置文件的基础上，修改以上内容就可以工作。独立配置你可能还需要加入以下两句。
http\_access deny all http\_port 3128 配置中的gfw.conf是gfw这个规则的定义文件，这个文件是由程序生成的，程序如下。注意，你系统上的python版本应当在2.5以上。
#!/usr/bin/python from \_\_future\_\_ import with\_statement with open(&#39;gfw&#39;, &#39;r&#39;) as fi: for line in fi: print &#39;acl gfw dstdomain .%s&#39; % line.strip() 以上内容，保存为平文本，赋予执行权限后，直接执行即可。同目录下必须有一个gfw文件，平文本，里面一行保存一个域名。域名不以.开头，可以使用泛域名（例如google.com匹配www.google.com）。执行后打印出内容，所以你还需要重定向。./gfw2squid &amp;gt; /etc/squid3/gfw.conf。当每次gfw文件升级时，你都需要重新生成，并且迫使squid加载。方法是squid -k reconfigure。
OK，现在你有一台配置了分流的squid，然后你需要一个可以翻墙的代理。由于我的目标是看youtube，所以我采取了一个非常复杂而高性能高可靠的方案。
我配置了一台polipo作为http socks5协议转换。由于squid的特性，不能直接使用socks5，因此还是做了一重转换的。polipo这个代理的性能和稳定性也相当不错，用来做缓存代理也是可以的。不过我们用了更强大的squid，就没必要用polipo了。因此启用以下几句来减少polipo的性能消耗，同时，将本地8123端口的http代理服务转向到7777端口的socks5代理。
socksParentProxy = &amp;quot;localhost:7777&amp;quot; socksProxyType = socks5 chunkHighMark = 819200 objectHighMark = 128 diskCacheRoot = &amp;quot;&amp;quot; 在polipo之后的，是一个负载均衡系统。http是一种无状态协议，对不对？所以同一个session可以分布在不同的服务器上处理。也是同样理由，我们可以把后端的socks5连接分布到多个socks5服务器上。以下是haproxy.</description>
    </item>
    
    <item>
      <title>debian中文初学者引导——安装</title>
      <link>//blog.shell909090.org/blog/archives/1802/</link>
      <pubDate>Tue, 17 May 2011 10:25:58 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1802/</guid>
      <description>这篇主要讲安装。所以，请去这里（ http://www.debian.org/CD/http-ftp/#stable ）下载一张stable光盘。如果你对testing和unstable比较感兴趣，没问题，装好了可以改的。但是对于初学者，我建议你从stable开始玩起。在选择了合适的架构后，你会被引导到光盘镜像服务器上。作为国内玩家，我建议你别用官方服务器，那个在美国，很慢。个人推荐中科大服务器（ ftp://ftp.cn.debian.org/debian-cd/ ）去下载合适镜像，服务器是电信联通教育网三线路的，无论是学生还是商业人士都很合适。目前而言，我推荐你下载debian-6.0.1a-i386-netinst.iso作为安装镜像。这个镜像只安装最小部分，而且在安装时无须联网，适合大多数场合。注意，如果你的机器只有无线网络，请不要使用这张镜像，因为难度太高了。
好吧，下面我假定你有镜像了，你有三种常见的安装模式，刻录光盘安装，liveusb安装，虚拟机直接使用镜像。刻录光盘没什么好多说的，虚拟机直接使用就看你会不会用虚拟机，liveusb就有点复杂。具体参考我写的这篇文章（ http://blog.shell909090.org/blog/archives/1646 ）。无论从哪里开始，你都必须保证开机启动的是你的debian安装镜像。所以发生例如debian安装时进入了硬盘上的windows这种问题别来问我，直接去google BIOS设定。
很多人经常问的一个问题，是关于如何安装linux和windows共存。其实这种模式并不好，至少我知道的使用这种模式学习linux的人都失败了。因为你平时会经常进入windows，然后懒得出来了。最好的方法是，彻底告别你的windows，然后下定决心用linux解决所有问题。如果你觉得底气不足，可以用虚拟机运行一个小实例，至少我觉得这比共存模式方便。因此，我不会介绍windows和linux共存的有关问题——这些问题太复杂了，虽然技术上说并不难，但是会占用大量篇幅。
单独安装linux也需要划分分区。通常的建议是/ /usr /var /home /tmp swap全部可以考虑分开。不过作为初学者，我建议你用一个分区/就够了。如果内存在1G及其以上，也不一定需要用swap。减少麻烦不是什么值得羞耻的事情，制造麻烦才是。如果你看了半天，搞不懂这段话什么意思，我建议你先看看下一篇《系统管理》中关于linux文件组织结构的介绍。如果你觉得有些不安，常见的方法是/ /home swap。这通常用于大型机器上，分离的home会让你在重装时无须额外的做数据保留操作，swap则提供更高的内存使用率。文件系统的建议是全ext3，这个会减少你很多的管理麻烦。如果你想尝试一些新的文件系统，最好不要在/上面尝试。
安装过程没什么好多说的，安装完成后，才是一系列最艰难的地方。debian-netinst是不带X系统的，所以如果你想使用图形界面，安装完成后的配置才是最关键的。通常你的电脑可以联网，因为安装的时候会自动配置你的网卡。如果你是无线网卡，请先连一根有线。如果不行，那就不是初学者课程了——你需要自行安装wpasupplicant，iw和相关依赖包，然后手工建立config文件。通过config连接合适的ap，再手工dhcp获得地址。总之，这些问题初学者就不要想了，请直接拉一根网线，接上，启动机器（次序不要反），你的机器就联网了。如果不是，找人求助吧。
第一件事，请先去/etc/apt/source.list下面，修改你所选用的镜像。如果你希望用testing或者unstable，直接修改此处就可以了。通常我们需要安装contrib和non-free部分，所以在main后面加上contrib和non-free。这里有些重要的商业程序，例如sun-java，rar/unrar，flashplugin等等。另外就是名称。通常镜像后面的名称是lenny这类的代号，建议改成stable这样的代号。当debian升级，版本切换的时候，你的系统会自动的升上去。当然，商业级别的服务器反之，不要用stable这样的代号，因为会造成稳定性问题。
当你修改完source后，执行aptitude update，然后再执行aptitude install vim slim xfce4。当然，如果你喜欢用gnome，那就是aptitude install vim gdm gnome。然后重启？你的机器应当出现了一个可爱的，花里胡哨的界面。啧啧，简直俗毙了。不过鉴于新手都比较习惯图形界面，我还是继续从图形界面开始介绍吧。</description>
    </item>
    
    <item>
      <title>debian中文初学者引导——系统管理</title>
      <link>//blog.shell909090.org/blog/archives/1800/</link>
      <pubDate>Mon, 16 May 2011 10:08:01 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1800/</guid>
      <description>装什么系统就要能玩什么，如果你安装的是windows，也需要解决几个最简单的管理工作——文件存放，如何联网，安装软件。不过幸好，用debian的好处是，你暂时不用担心病毒了。
在进行管理工作前，我先说明一个事实。平时你在windows下，可以随便进行的系统管理工作，在debian下面不是谁都能干的。如果linux也像windows那样允许所有用户都修改系统，那早就天下大乱了。为了修改系统关键部分，你需要root权限。如果在命令行下（多数系统管理都是命令行完成的），那么用su-来变成root，或者在执行具体命令的时候在前面加上sudo，如果你已经配置了sudo工具的话。需要特别注意的是，我不建议新手随时都顶着root权限做事，这很危险。在windows下我们很容易修改系统导致出错和崩溃，原因之一就是我们随时都可以拥有系统最高权限。所以，当你需要root权限的时候，开一个root的命令行来管理，不要一直用root命令行做日常工作。
首先是文件存放，这和windows有基础概念区别。windows的文件组织结构继承了DOS的特征，使用A-Z的分区号标示每个物理设备。而linux的文件组织结构继承了unix的特征，所有数据都在一颗单根树下。就是说，系统只有一个根目录。每个物理设备，都被“挂载”在特定的目录下。在windows下，我们把光盘放入光驱，就可以在F盘上面看到一颗目录树。如果在linux下，我们需要将光盘“挂载”在某个目录下。这个目录下的原本内容就消失不见（放心，没有被物理的删除），取而代之的是光盘的目录结构。当然，debian下面通常有自动挂载程序会帮你完成检测到光盘插入后自动挂载的过程。
文件存放的结构也和windows大有不同。windows下的程序安装和文件组织遵循“同包内聚”的结构特征。即是说，只要属于同一个软件，这些文件就被放到一起。大家可以看看programfiles下面一堆堆的目录，每个都属于一个软件。而linux则基于FHS结构，大部分的时候是“功能内聚”，即是说，同类功能的文件被放到一起。例如可执行代码基本放置在/usr/bin和/usr/sbin，前者是普通用户可执行代码，后者是特权用户可执行代码。当你执行ls的时候，其实是调用了/bin/ls。这样的好处是路径设定及其简单，你不信可以对比windows的path设定和linux的path设定。当然，坏处是无法通过直观的文件删除来删除所有包。
这当然不代表debian卸载软件比windows更费力。实际上，是更简单。debian提供了dpkg工具来管理包，和apt工具来管理仓库。你可以很简单的用apt-get install 包名，来安装一个包。用apt-get purge包名来彻底删除包。purge和remove的区别相当于windows中的“是否删除注册表”，如果是purge，是不会保留你自己修改和定制的配置文件的，除非这些数据存在于你的HOME目录下。你可以用aptitude update来追踪系统升级，不过这个不会自动的未你下载最新包。update只是检查服务器上有没有新的包出现，然后通知你，有新东西了。升级是upgrade的事情，不过我建议手工进行升级，具体要多读debian参考手册，也要有几次搞坏系统的准备。
最后一个问题是如何联网。debian是一种很网络化的系统，你的系统升级，使用，都是通过网络的。乃至于我每天用系统的时候，一多半时间都在透过ssh来管理不同的设备。对于这种系统，如何联网是一个很重要的问题。如果你是有线网络，由于不大可能断线，我建议通过/etc/network/interfaces来配置。方法在debian参考手册里面，根据你是dhcp还是static配置好，重启，基本就固定下来不用动了。如果是无线网络，建议直接安装NetworkManager，并且注释掉/etc/network/interfaces中的所有内容。nm的使用很简单，你看着办就好。</description>
    </item>
    
    <item>
      <title>debian中文初学者引导——总论</title>
      <link>//blog.shell909090.org/blog/archives/1798/</link>
      <pubDate>Fri, 13 May 2011 10:39:45 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1798/</guid>
      <description>上次写了篇debian中文争议问题，结果发现好多人都在搜debian中文，我估计他们对debian中文名没什么兴趣。纯粹想玩玩debian，但是却难于入手。由于此类人中中文使用者居多，对于debian良好的资料无法使用。所以我准备写这篇debian中文初学者引导，来让更多的人可以玩玩这个系统。
在开始玩debian之前，请确定你是适合使用linux的人群。当然，这里并不是说linux只适合程序员。我认识的人里面，使用linux的还有金融工作者，大学教师（非计算机专业），初中学生。他们使用linux完成日常工作，没有什么太大的问题。如果你希望学习linux，首先，你不能是重度游戏爱好者。linux下的游戏无论从数量还是质量，和windows都不在一个级别。其次，你需要一定的英语水准。当然其实不需要太好，贝壳自己连四级都没过。你只需要能认识基础的指令和提示，照抄到网络上即可。如果您是初中未毕业，26个字母尚有困难，建议还是别用了。最后，也是最重要的一点，你需要热爱折腾，总觉得现有软件满足不了自己，但是又没有什么好办法。当然，如果您热爱折腾又有办法，那估计是个程序员。程序员就别废话了，完全没学过linux的程序员不算是完整的程序员。
我的目标是，尽量让你从最简单方式安装一台系统出来，然后普通使用三个月以上，期间基本不用windows。当然，鉴于中国国情，有些网站是永远的IE，所以要用到windows是难免的。实际上，如果你的学习能力不算太差，大约在一周以后，使用linux的不舒服感就会减少，甚至消失，出现问题无法搞定的几率也会降低。大约在一个月后，就会开始自己折腾各种配置。差不多从你开始折腾自己的配置开始，你就会无可救药的爱上linux。
学习linux最重要的几件事情是——合作，创造，懒惰，不满足。
当你学习linux时，最重要的就是和其他人合作，包括看文档和问问题。所以，首先请学会自己查看常见文档，包括man和google，来解决一些简单的问题。例如ls的哪个参数能够列出目录详细信息这种问题就不要问出来。次之，你需要学会《提问的智慧》（http://bbs.csdn.net/IndexPage/SmartQuestion.aspx），请不要问出愚蠢的问题来。其中最愚蠢的就是，为什么linux不能XXX，windows可以。唔，为什么老虎不能拉车呢？驴可以。最后，尽量认识几个linux玩的不错的，又比较有空的人，这对解决你的燃眉之急很有帮助。
作为linux玩家，你必须是懒惰而具有创造力的。通常linux玩家不喜欢太“勤劳”的人。自己辛辛苦苦的在一个文件的所有行头部加上行号是一个很愚蠢的行为——作为一个懒人，你应该想——这个是不是有人做过了，有没有什么比较省力的方法？要能够懒惰，你必须很有创造力。见没见过用光驱不断弹出收入来晃动婴儿床的想法？恩，这家伙很懒，我很欣赏。
作为开始使用linux的基础，请把这个网址（http://www.debian.org/doc/manuals/debian-reference/）收入你的收藏夹。里面说了很多实用的东西，足可引导一个人正常的使用整个系统完成工作。其次，专门准备一台电脑，不用太好，用来安装debian。如果没有，那就用虚拟机。尽量不要多分区混合安装，因为你不会记得去用linux的。现在一台专门的电脑并不贵，一般人家里都有几台很老的电脑，用那个就好，通常还免去了最新硬件无法驱动的烦恼。
如果上面的东西你都看过了，确定自己需要学习使用debian，那么，请慢慢看接下来的文章。</description>
    </item>
    
    <item>
      <title>再论openvpn的搭建</title>
      <link>//blog.shell909090.org/blog/archives/1797/</link>
      <pubDate>Thu, 12 May 2011 10:22:55 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1797/</guid>
      <description>从概念上说，openvpn类似于一根网线，或者一台交换机。你拨上vpn，差不多相当于给自己的机器装一个虚拟的网卡，从上面拉一根线到服务器的虚拟网卡上。所以，vpn的配置大概和网络配置差不多，分为几个大类。
一类是第二层交换，即虚拟网卡和真实网卡组成网桥。这样可以把虚拟网络上的设备引入真实网络，让虚拟网卡获得真实网络的地址，或者反之。坏处是配置复杂，稳定性差。
例如你家里是192.168.0.0/24网络段，你决定用tap配置一个网桥，就需要新建一个br0设备，将eth0和tap0设备加入网桥。这样，一台IP为192.168.0.10的家庭机器，在访问IP为192.168.0.110的远程机器的时候，所发出的ARP请求会被转发到远端，然后ARP响应转发到本地。通过这种方式，10就会直接把MAC报文发送到中转机上，然后再转发远端。可以看出，由于ARP请求往来非常费时，在子网内机器多的时候，会消耗不少时间和带宽进行ARP转包，以及各种链路级开销。所以通常除了两个安全封闭子网因为管理理由必须这么玩，并且两者间又都有服务器和高速链接的时候，其他时候我不推荐这种玩法。
更何况，在debian系统下配置网桥需要额外脚本，不如路由那样，可以使用默认脚本启动，然后动态修改路由表。
大部分是三层交换，即将服务器作为路由器使用。这又分为两种情况，网络地址转换，和网关互通。
网络地址转换是最常见的情况，这个又叫做NAT。网关在转发你的包的同时，会将地址转换成自己的地址。从而避免修改路由的行为。
同样是192.168.0.0/24举例，远程网络假如叫做192.168.1.0/24。当你拨号上远程网络时，你就拥有了一个远程IP和一个本地IP。你可以配置路由表，让哪些IP从远程走（这就是地址段选择翻墙的原理）。大多数情况下，会被配置为默认都从远程IP走，除了几个特定地址（例如VPN服务器地址，这个也走虚拟网络会引起循环的）。而远程的网关，假定是192.168.1.1，开启了NAT。这时候你的所有网络流量就都从远程的VPN服务器上发出和接收了，如同你正坐在远程服务器后面的小网络内一样。
网关互通是更复杂的一类情况，通常是小型企业为了多个连通多个地点办公子网而设计的。理论上说大型企业也适用，但是大型企业有钱，IT部为了防范责任问题，通常会直接采购Cisco之类大公司的产品直接使用。基本概念是将虚拟网络和真实网络配置成两个子网，两个子网可以互相访问。
还是192.168.0.0的例子，我们假定另外有一个子网叫做192.168.1.0/24。现在我们需要连通两个子网，或者，更进一步，多个子网。
我们首先配置一个虚拟子网叫做192.168.254.0，然后架设一台共用服务器。这是比较简单的模型。更复杂的可以将其中一个子网的某个服务器映射出去作为核心，配置就更加复杂，不过可以依照同样原理推导。架设好共用服务器后，我们需要在每个子网的网关上下手，否则就无法做到透明路由。修改这个网关的路由表，将192.168.0.0/16全部转发到虚拟网关（即共用服务器的虚拟IP）上去（当然，除去本网段不转发）。在OpenVPN上面可以配置，当某条链路拨接上来后，就在服务器上加入一条路由，将其后面的网段加入网关路由表。于是，当192.168.0.100的某台服务器希望直接访问192.168.1.100。首先这台主机会检查自己的路由表，发现这个需要由网关192.168.0.1转发，就先转到了192.168.0.1。192.168.0.1检查路由表，发现192.168.1.100需要被转发到虚拟网关，即192.168.254.1。于是通过虚拟网络，该网关做出转发。当192.168.254.1接收到后，他会依照上面的路由表，检查到这条链路是否已经拨接上来，拨接上的话对应的虚拟IP是多少，然后转发过去。最后是目标网关，192.168.1.1，转发给192.168.1.100的过程。整个过程复杂无比，不过实现起来都是自动化的。
在配置文件中，有ca certkey三项，这三项分别对应不同作用。cert和key是用于向客户端验证服务器身份的。客户端那里有一个ca.crt，服务器这里的cert和key必须是那个ca.crt签署过的。这样，客户端就可以验证服务器是否是可信任的。而服务器这里的ca则是验证客户端身份的，客户端那里同样也有cert和key，必须由服务器端的ca.crt签署过。通常，我们用同一套ca.key签署两个cert，分别部署在服务器端和客户端，就可以工作了。
另外一点需要注意的是，ns-cert-typeserver这个参数。在debian的默认系统中有这个参数，一旦指定，openvpn就会检验服务器证书上是否有server的选项。对于easy-rsa签署的证书，这个肯定是有的。但是如果自己用openssl签署，就要记得做ext，否则检验不通过会报错。</description>
    </item>
    
    <item>
      <title>一切终将过去</title>
      <link>//blog.shell909090.org/blog/archives/1794/</link>
      <pubDate>Tue, 10 May 2011 10:50:14 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1794/</guid>
      <description>前几天才说纸质书电子书怎么怎么的，今天就爆出一条新闻，新华书店指责当当网倾销。 能不指责么，上回说到书籍成本中，有大约三成是流通成本，也就是运输，仓储，退换，宣传成本。网络书店可以省去仓储成本，宣传也是搭的实体店的车。通常的东西，网上卖的都比实体的便宜，这都成了一个共识了。衣服尚有合不合适的问题，书就只有哪个出版社的问题了，可以说是全国标准化产品。对于这种产品，从网络上购买，除非碰到假货，否则几无不合适的可能。实体书店可以先看一下，网络书店还可以找到大段内容呢，例如china-pub就有。甚至部分书同时出版电子版和纸质书，effective stl中文版，我是先看了电子书，然后才买了一本纸质的。当然，现在很后悔，能不能光付钱不要纸阿。
对于标准化物件销售，网络对上传统销售几乎是没有悬念的。书籍，U盘，电子器件，化妆品，这些都是一旦确定买什么产品，型号代码一定，哪里买都一样的。在店里转两圈，地板一走，口水一噴，老板就是10多元的成本，一件东西不赚个20-30根本回不了本。在网络上，一台服务器2W一年成本计的话，够上千人连续逛一年，合一个人连续不断，不分白天黑夜逛一年才10元成本。当然，网络更多的是开发和运营费用，但是随着规模的上升，这些费用是会降下来的。这也就是为什么网络公司做上规模后来钱很快的原因。对上这种架子越大赚钱越多的对手，传统零售业的失败是已经注定的。
那么新华书店指责当当倾销，这话是怎么说的呢？倾销，常见于美国对中国的一些政策上。最早指的是一种商业手法，以低于成本的方式供货，打压对手，淘汰出市场。当成功占领市场后，再拉高价格，补回亏损。倾销往往是和垄断联系在一起的，在现代商业社会中，由于倾销通常会导致垄断，从而造成公司被拆分，所以本国对本国倾销的很少，多数都是对其他国家玩这手。也有用于本国某某协会抗议对方倾销，导致本国协会工人失业的例子。当然，这些事情在中国这个神奇的国度都是不存在的。
当当网算不算倾销呢？未必是，未必不是。当当的供货成本是比实体书低了很多没错，但是不是说所有的差价都一定是来自技术造成的成本降低。对于互联网公司，急于上市的情况下，拿钱补贴产品，造成消费者竞相抢购，从而让报表非常好看的手法屡见不鲜。我不确定当当网一定是这样，也不确定一定不是。但是一个当当倒下了，又会有别人站起来。互联网销售的成本太低了，是土地，就会有花要发芽。人不来种，自然生之。
另外还有一点问题，见于网络营销很多。就是通过实体店打样，网络上购买。这其实是一种并不公平的模式，因为靠山山倒，靠人人跑。实体店败局是个定数，实体店倒了，怎么打样呢？没地方打样，网络销售也玩不起来。这是一个会把自己玩死的胜利。今后更加现实的模式可能是格子屋形态的样品店。网络销售者租一个格子，放他们的样品。看好样子，网络订货。实在想要，可以把样品买走，销售者再补货就是。这种模式兼顾了网络营销的低成本和实体营销的可打样，似乎平衡的更好一些。不过最终形态，应当是借助新技术普及，发展虚拟打样为主的。
另外，网络销售如此，一些其他的事情上，大致也能看出，现在的世界，和以前不一样了。以前觉得理所应当天经地义的事情，现在也要重新考虑了。毕竟MJ走了，拉登也走了。虽然世界还没有完成更替，我们却也可以说，纸质书会成为历史，人们都将看电子书。我们也可以说电视将成为历史，人们都看网络视频。甚至也可以说，电话将成为历史，我们会打网络视频电话。当新东西出来时，虽然会相对弱小，需要一定时间的发展。但是最终必然会将陈旧的技术，乃至社会形态彻底摧毁。</description>
    </item>
    
    <item>
      <title>android常用软件</title>
      <link>//blog.shell909090.org/blog/archives/1792/</link>
      <pubDate>Fri, 06 May 2011 09:56:10 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1792/</guid>
      <description>专为职业用户介绍，菜鸟就别看了。
barnacle wifi tether，将手机变成3G无线路由器，紧急的时候可以拿来让普通笔记本上网。当然，如果你3G带宽或者流量不够，就别考虑了。 comicbricks，漫画阅读器，支持从网络上拖一堆漫画离线慢慢看。 connectbot，功能强大的ssh客户端，支持密钥方式连接服务器，可以做简单的操作。适合在车站，想看看服务器状态的时候用。 es文件浏览器，还算不错，支持ftp和smb方式文件共享。很容易使用windows文件共享进行操作。 gtasks，如果你平时使用google calendar的任务列表管理自己的任务，gtasks就是你需要的东西。 keepassdroid，平时各种密码一大堆，是不是记不住？用keepassdroid，支持linux和windows共享密码文件，记忆一个密码就可以到处用。 openvpn settings，不解释，翻墙必备。倒是自带的pptp客户端连接不上去，很奇怪。 QQ影音，虽说腾讯到处抄，但是QQ影音做的确实不错。功能中规中矩，大部分格式都能放，而且程序体积不大。 realcalc，计算器，不解释。 seesmic，twitter客户端，支持api代理，功能强大，不解释。 sshdroid，ssh服务器端。有了这个东西后，你就不需要连接usb连线并且安装adb这个大家伙了。凡是能操作ssh的机器都能登录操作，支持文件上下传(sftp)，支持密码和密钥。 安全隧道，翻墙必备，不过是走ssh代理的。 大众点评，出门吃饭消费必备。我所知的信息最全的LBS。 静读天下，小型阅读器，可堪一用。体积比ireader小，也没那么多花哨的功能。打开文件的时候有点慢，没有别的缺点。 快图浏览，强烈推荐替代android自己的图库。速度如飞一般，图片瞬间出来。不过仔细看的话，从出来到清晰化大约有一秒的间隔，可见底下还是用模糊运算的。 麦当劳优惠券，打折优惠应用。这类应用都差不多，从网络上下载一段时间的某品牌优惠组合，然后统一显示给你，方便你直接挑合适的组合去。严格来说，麦当劳优惠券不算真的优惠券，只能算优惠组合。当然，有些品牌的产品还是需要看一眼优惠券的，这时候这类应用也提供图片的优惠券。总之，在外面混的时候，带上这个应用，不知道什么时候就有点小折扣。 迷你飞信，不介绍了。比较小巧，消息存储在系统信息里面。和系统自身整合做的不错。 墨迹天气，体积比较大，不过支持多个地区天气，预报比较准（有几个预报误差太大），皮肤不错。 淘宝，什么都不说了，在超市里尤其有用。就是家附近的沃尔玛没信号&amp;hellip;&amp;hellip; 天天动听，播放器，支持网络自动搜索，找封面和歌词。 宜搜小说，自动从网络上找最新的小说来看，追连载的利器。用这个软件连找都不必了，上下班直接看就好。 注意，此处comicbricks和宜搜小说有违反版权的问题，请对版权敏感的人不要用。</description>
    </item>
    
    <item>
      <title>地铁和保安</title>
      <link>//blog.shell909090.org/blog/archives/1790/</link>
      <pubDate>Wed, 04 May 2011 14:44:39 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1790/</guid>
      <description>我没说反对保安，当然，我也不赞同。
我只是说，要么把保安撤了，省的浪费我们的钱，站着还碍眼。要么通过程序，地铁强制安检。
目前的体系，我们花了钱花了时间，但是真想危害公共安全的人，一点也不困难的可以混进来。
坑爹阿。</description>
    </item>
    
    <item>
      <title>常用电池的分类和养护</title>
      <link>//blog.shell909090.org/blog/archives/1788/</link>
      <pubDate>Tue, 03 May 2011 16:27:41 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1788/</guid>
      <description>概念讲解1.电极电位差电池的材料决定电极电位差，因此，材料固定了，电池的电压就固定了。电池型号大不一定代表电压高，只是代表电量有差异。电池在使用中有电压下降是因为电池的内阻升高。
2.电量单位常见单位有两种，mAh和J。前者是常用单位，后者是理论热功单位。换算关系是，1V* 1A = 1W，1W * 1s =1J。所以电池的电压乘以Ah(注意不是mAh，差1000倍)为Wh。1Wh = 3.6KJ。
通常只有UPS的大功率电池或者少量笔记本才用KW和KJ的单位，其他地方，厂家写出这种单位的，让他换成mAh。
电池分类介绍1.干电池通常电池指的就是这个，也叫碱性电池，不可充电。主要电极是锌，电极电位差1.5V左右。常见分一号，五号，七号三种型号，长度和电压一致，粗细和电量有差别。后两个型号也叫AA电池和AAA电池。
通常说是不能充电，但是个人经验，拿老式充电器还是可以冲一下。新式的因为设定了截止电压，所以充不进去。不过充电后的稳定性和耐久性都很差，跑跑电筒钟表什么的凑合一下还行，正式用就形同废物了。
2.镍氢电池普通的充电电池，电极材料是镍，电极电位差大约是1.2V，比干电池略低。常见五号电池大小，主要用于数码相机上。以前的手机也有用到，但是近几年很少见了。
镍氢电池的养护比较特殊，因为电池有记忆效应。一但某次冲放不完全，电池总容量就会受到影响。因此需要在买入后放电完全再充电完全进行激活，并且使用的时候必须冲放完全。如果发生记忆效应，可以通过深度充放电部分恢复，不过不是普通电池管理设备能做到的。
3.锂电池最常用的充电电池，电极材料是锂，电压通常是3V以上，最高可达3.7V，比能容非常高。有各种封装形态，通常我们说的笔记本三芯电池，指的就是22000mAh/3.7V的一节高能电池三节串联，组成22000mAh/11.1V的电池组。六芯电池指的是两个这种电池串联组成的44000mAh/11.1V电池组。
锂电池没有记忆性，但是开始使用的时候还是最好激活一下。根据IBM的资料，锂电池最佳使用方法是保持低温，维持电力在15%-85%之间。也就是说，如果使用锂电池的手机和笔记本，不用等到电耗尽，在20%的时候开始充电最为合适。至于截止电压，IBM可以管理充电到85%，但是其他电源管理就只能一直充电。如果不用的话，充电到60%-70%，然后放入冰箱保存。
4.铅酸电池常用于汽车或是中小型UPS，电极材料是铅，电极电位大约是2V。通常都叫铅酸免维护电池，不过实际使用非常麻烦。电解液有干涸和冻结的可能，所以在寒冷的地带，往往有蓄电池冻结导致汽车无法发动的案例。不过通常寒冷地带的汽车往往也会在电池电解液中加入抗冻液，而且通常电解液在有电状态下凝点比较低。通常会发生这种问题的车都是温带开过去的，或者是车上电池耗尽。
铅酸电池的比能容和电压都不很好，而且很不环保，对环境污染很大。但是成本便宜，可以做的很大，而且没有记忆效应。如果同等能量的电池换为锂电池驱动，汽车价格就会飙到普通人无法承受的地步。</description>
    </item>
    
    <item>
      <title>中国的版权问题一讲</title>
      <link>//blog.shell909090.org/blog/archives/1786/</link>
      <pubDate>Fri, 29 Apr 2011 16:55:29 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1786/</guid>
      <description>我们都知道，中国这里有很严重的版权问题。最有名的就是腾讯的段子，一直在抄袭，从未被起诉。
多严重，我们来数数，一个正常人一天，要侵犯多少版权。
OK，A同学早上起来穿上一双蜡笔小新拖鞋去刷——等等，这鞋有日方授权么？OK，A同学早起先侵了蜡笔小新的权。
A同学刷好牙，带上自己的android手机去上班。当然，android手机是没啥版权问题的。但是——她背景放了一首青花瓷，打开软件追最新的小说看。背景的音乐侵犯音乐版权所有人的权，这里就是周杰伦所在唱片公司。追小说的软件连上盗版，侵盛大的权。严格说起来，音乐播放器还下载了封面和歌词，再侵了一遍周董唱片公司的权。
到了公司，打开电脑——盗版windows。微软这事一提再提，我们虽然麻木，但也知道手里的东西都叫做盗版。打开office——又是盗版——开始写文件。没灵感，上网找了一篇样例——这里要区分样例是原始有版权，还是无版权。是版权人自愿贴出到公共领域并放弃版权，还是被其他人贴出。由于情况太复杂，我们暂时定为版权状况不清。
下班了，路上A同学没看小说，改看漫画——由于漫画电子授权还没实行，因此毫无疑问的，又侵了漫画公司的权。
到家，A同学也不看电视了。这年头除了几个台，剩下的都是老爷爷看的东西。她打开土豆，挑了一部日剧慢慢看——毫无疑问，又是侵权。
至于周末在家不出去，连续下片看这种事情，更是提都别提。
实际上，在中国，没几个人版权是干净的。有多少人能不用windows，或者用正版的？不少，主要是手提电脑自带了不少的授权。但是有几个用正版office，或者不用微软office的？这就不多了。至于我们硬盘里面放的照片，歌曲，电影——你觉得还有多少人能昂首挺胸说，我用正版我自豪？
分类来说，中国侵权主要分几种情况。
一个是，我知道在侵权，但是我就是不想付钱，太贵了。例如中国的windows，office，还有各种软件。我们都知道这是盗版，但是都买不起正版。用的时候就只好偷偷摸摸，被抓出来就颇有几分孔乙己“窃书不算偷”的尴尬。
一个是，我知道我在侵权，我也想付钱，可我没法付钱。例如上面的盗版漫画，花个几块买个漫画看，我们也算比较习惯的。只是很多漫画的版权都没有引入，因此想付钱都没地方付。类似的还有美剧，A片，日剧等。很多人真的是想付钱的。看越狱，帅不帅？这时候你问她，这电视给不给钱？怕是头都会点断掉。可就是没地方付。
一个是，我知道我在侵权，我可以付钱，可是习惯不付钱。例如盗版小说。这年头都习惯看盗版了，压根没人看正版。
还有一个是，我压根不知道我侵权了。蜡笔小新的拖鞋有版权问题？我iPod里面放个周董的mp3算盗版？
最后一个是，我不知道这个版权是什么状态。例如刚刚说的，从网络上找的样例。如果是比较简单的样例，好像是不受版权法保护的。复杂到一定程度后，就是有保护的。如果作者本人没有明确放弃版权贴出，无论是本人贴出还是他人贴出，你拿来用就属于侵权。但是多数时候我们可能不会关心这个，想关心也找不到地方。
其实很多时候，不是谁手上都是版权干净的。你当有多少老美分的清楚“有授权的吉祥物”和“没有授权的吉祥物”？你当日本那么多同人作者，个个都是原作者授权的？但是无论怎么说，人家的版权市场分而弥细。很多人可能不知道，linux的几个logo，例如debian，ubuntu，都是有版权的。所以我拿debian的logo做头像，严格来说是侵权。不过facebook上的debian组和ubuntu组用这个logo，想必没人较真（当然，更可能是事先和版权所有人联系过了）。shlug曾经讨论过印logo什么的，后来发现都有版权问题，要去申请（其实写一封信去，多数就会被授权，好弄的很）。
然而中国这里就全不是这么回事。分的清分不清的，搞不清楚版权的我们就先都不说了，想付钱但是没渠道的也算你有这个心思吧。我们单说“觉得自己付不起”和“我就是习惯不想付”这两种。如果说，前者还带着几分羞愧，后者就是完全死不要脸了。用了别人的劳动，有两分感激之心，想法给人找补一下的。其行为不论，心里还懂个是非。用了半天人家劳动，理直气壮的上门骂人说——喂，混蛋，做的什么破烂玩意阿——的这种，就属于是非不分了。
遗憾的是，在中国，是非不分的还不在少数，更多的是连自己是不是是非不分都不知道，乃至不愿意知道的人。</description>
    </item>
    
    <item>
      <title>出来玩碰到的问题</title>
      <link>//blog.shell909090.org/blog/archives/1784/</link>
      <pubDate>Thu, 28 Apr 2011 11:27:21 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1784/</guid>
      <description>最近公司组织出来玩，选择跑到朱家角的大千庄园，就在上次贝壳徒步的线路旁边。上午刚到，中午就碰到一个有趣的问题。
按照我们和园方的协议，我们是在园内游玩两天，包两顿午餐一顿晚餐。流程包括射箭，漂流，骑马什么的，部分是付费项目。上午到了不久，我们就参观了藏獒园，然后吃午饭。午饭吃的很不错，吃完我们商定，下午去漂流，漂流是免费项目。到了漂流园，一个人都没有。我们晃晃悠悠半天，自己穿上安全衣，跳上了竹筏。竹筏漂流到一半，一帮外行搞不定，中途找个地方停船了。另外公司的球掉到池塘里，另一帮上了旁边的电动船去捞球，结果搁浅在池塘里，费劲半天才出来。
下面就是有意思的地方，搁浅的船折腾半天，总算来了一个人。不过不是帮我们折腾出来，是找我们要钱的，开口就是200。我们一群人莫名其妙，不是免费漂流么？不过想想，好像电动船也不像漂流。有人跑出去看了看，电动船的却是收费项目，不过却不标识在我们入园的地方，而是在另一条路上。而且标志牌上没有200的收费标志，只有小船40的项目。
那么我们就莫名其妙了，怎么要我们200呢？租船的人也非常生气，他们和庄园没有从属关系，只是承包租船而已。今天不开门，所以没有来看着，结果就有人乱动船，搞坏了怎么办？然后我们下船的时候就有船主跳上来，把船开往停船的地方，我们的两个员工在上面下不来，下面又有一个船主跟我们要钱。这算不算扣着人质？一时间大家都很火大。
双方僵持了一会，船主还是把船开到了原始的码头。我们的员工下来后，船主追着我们要钱。我们就提出要去前台。首先，我们并不知道这个项目是不是真的要钱，要多少钱。其次，我们也不确认来的人是否真的是庄园的合作方。要是附近居民抄小道进来敲竹杠，我们冤不冤呢？所以我们要求，去前台把事情搞明白。船主也同意这个说法，和我们一起去前台。
前台我没跟去，具体说了什么我并不确定。不过结论是，园方这部分承包费用就不收了，我们付给船主100就好。
事情并不算太复杂，不过有几点教训，听听就好。首先是，在度假庄园，不要随便动项目，哪怕你觉得项目是免费的。一方面是私自动东西，说不清。要是你拿个坏的部件，对方咬定东西原来是好的，扯起来扯不清楚。再说还有人的安全问题。不说后面要钱的问题，要是前面私开的竹筏出了问题，算谁的呢？所以，联系前台，让前台帮你搞定所有问题。前台不来，是园方问题，回头去投诉去。开心不开心，人是安全的。
其次，如果你去度假庄园，又不是费用全包，就不要指望没有后续费用。园方全指望你们进来玩这个玩那个创收呢，收费是正常的，免费是奇怪的。
第三，在你觉得度假庄园物美价廉的时候，多数这个庄园的管理会有问题。像这次的庄园，管理漂流的人说，运行时电瓶船都有人跟着，平时是锁起来，要管理员来开门的。而今天一时大意，没有上锁，搞出的问题。而我们觉得更有问题的是，我们在吃饭的时候是明确说了下面要去漂流的，饭厅的工作人员居然没有帮我们联系漂流的管理员（照理说我们应该进不去的），也没有提醒我们应该是进不去的。说起来饭厅的工作人员也不能算过失，但是管理上让人不是很舒服。
最后，出来玩碰到这种问题，不要激动，心平气和的找来所有关系人，搞清楚问题再发火或者下结论。不要因为自己人生地不熟就气虚，对方要价多少就着急给多少。也不要硬着脖子不管三七二十一和对方僵持。先搞清楚问题发生在哪里，谁的过失，各方主张如何。主张的时候条件要高，谈判的时候姿态要低。主张低，往往在谈的时候会被对方咬住，没有退缩的空间而吃大亏。谈判的时候咬着不肯放，不说当地人好歹是地头蛇，自己损失时间精力也影响心情。
另外也说一个上次徒步时候的事例，问题也发生在朱家角，不知道是不是八字犯冲。当时两个女生走不动了，准备打车到集合点，一个叫商榻的小镇，休息一下等后面的队伍。我考虑了一下，两个女生不大安全，就陪她们一起坐车。我们等车半天不到，就坐小车倒开三四站路，到大车站看看，是坐公交车还是打车过去。当时公交刚刚开走，下一班要半个到一个小时。打车的话，黑车开价30，正规出租开价40，我们就上了辆黑车走了。
走到一半，我觉得方位不对，不过青浦地方我不熟，所以也不知道有没有问题。到地方，司机问我们停哪里，我们说超市前面，司机说这里没超市阿。我猛然觉得不对，问，这里是商榻么？结果不是，师傅把我们拉到不知道哪里去了。我们说我们从上车就说的是商榻，我们是没有什么过错的。师傅说开到商榻他要亏的，死活不肯，要我们坐公交去商榻。照我说我也不肯。不过我倒是肯多出10块让师傅拉过去的。后面两个女生坚持己见，坐着不动。
其实这个时候，千万不能下车，或者因为人生地不熟盲目央求师傅拉你到目的地。不下车，师傅拿我们也没办法。两个女生一个男生，不是硬来能搞的定的。一旦下车，才真的是人生地不熟了。等你发现这里没有去商榻的车，再上车的时候，师傅早就跑没了。那时候才真的是没办法处理了。人生地不熟盲目要求师傅拉你的目的地，而不谈清楚价格，倒了地方师傅再收一笔，你一点办法都没有。
僵持一阵，师傅也没办法，说，实在不行我送你们去商榻吧，不过你们能不能多加一点车钱。我对此倒是没什么意见，从我们上车的地方到商榻最多40，给10块也不算亏。后面两个女生坚持不肯，师傅说不动，最后心不甘情不愿的送我们到了目的地。后来我们分析，从我们上车的地方到商榻，大概15-20的成本，出租车运费通常会高出油费成本一倍以上。师傅本来拉我们到商榻也不亏，但是他不知道为什么，先拉我们到了别处，再过去的话最多做平，所以他很不情愿。但是事情是他自己搞错的，他又是黑车运营，我们坐着不走他又不能叫警察，相持下去又吃亏。所以本着息事宁人的想法，拉到目的地算了。</description>
    </item>
    
    <item>
      <title>“谈谈书价”评</title>
      <link>//blog.shell909090.org/blog/archives/1783/</link>
      <pubDate>Tue, 26 Apr 2011 15:21:31 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1783/</guid>
      <description>我先看了这篇blog:(http://www.ruanyifeng.com/blog/2011/04/on_book_price.html)，作者阮一峰是技术书籍译者。他所说的很多问，我的另几个朋友也有说过。包括纸质书完蛋了，电子书是下一代阅读媒介。不过我的想法是，电子书在中国还不成熟。
首先，是电子书的渠道和标准问题。纸质书可以有多种渠道，但是只有一种标准，无论是哪家出版社，最终出来的都是一本书，一堆纸。然而电子书就包含了数个渠道，kindle是一个，bambook是一个，iBook也是一个，androidmarket还是一个。电子书的渠道不同不仅仅是书的出售者的问题，还是一个本质的标准问题。上述四个渠道，无论哪个都不能保证打开其他渠道获得的内容。如果作者只在特定渠道出售内容，会造成如果我买了android手机，而一本书只有bambook有，我还得买一个bambook？一本纸质书才30-50，一年我大约看10-20本书，买四个设备大约要10年才能值回成本。如果作者分别在多个渠道上出售，各家渠道不会有意见？
更麻烦的是，现在的书籍，都是将来的素材和史料。如果我们开一家数字图书馆，这个问题就更加复杂和明显。可以想象一下，图书馆中有某本书，2012年出版，bambook格式。一个史学研究者很高兴的在数字图书馆里找到了他要的东西，但是却发现，这本书必须用2010年产的bambook阅读。这个设备现在只有历史博物馆里面有一台样机，而且预约已经到了一年多后&amp;hellip;&amp;hellip;
商业战争造成的不共通的格式和渠道是内容的大敌。不过这类问题在最终解决上倒是不难，只要有原始格式，把一种电子书格式转换成另一种并不困难。最终的形态可能是一个行业平台，让一个自然人对一本书只付给作者一次费用。当然，渠道的成本还是要付的。例如，假定一本书5美元，作者收3.5美元，渠道1.5。更换一个渠道，再支付1.5美元。大概这个概念，唯一的问题是各家渠道有没有动力做这个联合。
另外，最重要的一点，和阮一峰的担忧相同，电子媒介的盗版成本太低了。现在的电子书盗版，甚至可以做到扫描纸质书来进行盗版的地步。为什么现在都不发行pdf？其实pdf有很好的防盗机制，只是pdf是可以用pc阅读的，而pc有非常好的模拟能力，能够模拟翻页和截屏。再通过OCR，就变成了可用的电子版。同样，所有能够截屏的渠道，都有类似问题。kindle，bambook，iPad都是不能截屏的，但是android可以在虚拟机中截屏，所以android上做内容防盗就别考虑了。
而倒过来说，也不要以为kindle，bambook，iPad有多安全。无论如何，硬扫描屏幕总是一个可行的方案。当然，更好的方案是使用特制的设备替换这些设备的显示器。技术上来说，这些设备的显示设备也是开放接口的，直接编程读取数据对于专业玩家不是问题。
更可虑的是内容收费模式。内容是否值钱是一个市场问题，往往来说，内容的复制难度越高，内容的价格就越高。因此我们可以看到耗资不菲的报纸只买一块钱，甚至上海地铁不要钱的派报纸。因为报纸上的新闻复制起来难度极低，甚至从某种意义上说，地铁里的新闻，对于常在网上挂着的人来说，应当都不是一个新闻。我们原本卖书的模式，源自于一个事实，书的复制成本太高。无论是抄还是复印，都没有成功的把复制成本降低到和一本书的原始成本接近的地步。因此，作者完全可以收两者间的差价，即所谓的利润。以博客中的例子为例，复印大约是一张0.15元，230页复印成本34.5，原始书籍36.5，相差无几。当然具体情况又略有不同，要经常读的书主要面临复印竞争，看过就算的书主要面临借阅竞争。而我根据阮一峰的数据，算出一本书的各项成本大约是，书店成本7.1，纸张成本11.76，流通渠道11.76，作者收入5.87，大约是这么一个数字。也就是说，同样弄一本书出来，批量印刷和管理大约要占15-20元左右，和34.5之间的差价就是作者，出版商，书店的毛利润。当然，还要去掉一些宣传之类的费用。
类推，我们大约也能知道商业的，成建制的盗版书能存在的理由。盗版书使用原始书的印刷成本（甚至，由于批量上升，还更便宜）进行出售，和复印级价格竞争，当然有吸引力。所以打击的大头往往也在这里，真的需要的人去复印店印个两张，是不会对书本销售造成打击的，因为成本根本划不来。
但是在电子媒介时代，情况就发生了本质变化。无论使用何种技术，即使是替换显示器，或者硬扫描屏幕，首次复制一本电子书籍的成本就是数元（当然，前提是需要批量的复制上百甚至上千本书籍）。复制成功后，传播成本基本为零。一年上百万次的下载，也只需要租用一台很便宜的服务器，合每次下载成本为分级。这个对于传统书业的打击才是毁灭性的。事实上，这种情况已经出现了。目前网络上盛传的扫描电子书，爱好者个人扫描，抓不着。利用p2p传播，撤不走。大量书籍的扫描版的传播对于传统出版业的打击是非常严重的。在这种复制无成本的年代，内容收费模式是否能够继续，这才是最关键的问题。
目前经过技术上的努力，包括加密和打击。在中国，以电子出版而论，看一本盗版书的成本基本是0，而一本正版的成本也是0。结论是任何不能免费出现的内容（或者叫有价格内容）都无法生存，只有免费内容才能生存，例如博客。如此看来，最终会归于两种结局，一种是有价格内容通过其他手段转换为无价格内容，例如行间植入广告（好恶心的想法）。一种是增加打击，使得盗版书的观看成本增加到元这个级别。</description>
    </item>
    
    <item>
      <title>快递先验货还是先签字TMD有那么难么？</title>
      <link>//blog.shell909090.org/blog/archives/1782/</link>
      <pubDate>Thu, 21 Apr 2011 10:26:01 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1782/</guid>
      <description>最近看到一堆快递公司的投诉文，其中最关键一点就是，先签字再验收还是先验收再签字。国家规定是先验收，但是快递公司公然规定，先签字才能验收。客户不签字算拒收，问题在客户。说起这个问题的时候，快递还很无辜的说，有用户拆开不签字，抢走货物的情况。问题是，现在更多的是签字后快递员不认帐，货物有问题的情况。公司规定就能公然对抗国家法规么？我看这国家也到头了。
关于签字还是验收的问题，可以百分百的说，是快递公司完全没意思改进的产物。从管理角度讲，业务不行改流程。快递验收流程可以分为两步，一步是“货物送达”。在第一步，快递送达后，收货人先要看见货物存在（这是废话），而且没有明显损坏（就是客户不接过货物，仅凭快递员手里的外观评判）。当确认这两点后，签收“货物送达”部分。然后收件人拿到货物，拆开检验。如果没问题，签收“验收无误”这项。
当快递员送货到后，只要真的有货，客户没道理拒绝第一次签收，除非这个客户蓄意找茬。如果是蓄意找茬，原本的流程也无法解决问题。在第一次签收时，货物在送货人手里，也没有抢走货物的可能。当第一次签收完成后，最低限度的证明了，送货员曾经携带疑似货物的物品到达目标地点。而后是验货。如果一切顺利，验货完成，流程就完成了。如果不顺利，问题就集中在，客户看到了疑似货物的东西，但是却不能通过验收。那么就是送货方查找为什么了。这个流程，送货人也不用担心收件人抢走货物（因为确认了到达），收货人也不用担心货物有问题。
作为一个外行，我能够想到，我相信快递公司应该也能够想到这个方案。之所以不实施，是因为快递公司秉持的态度是“给你什么你就签什么，不要给我找麻烦“的黑社会思路。
作为一个买家，我无力纠正整个快递行业。但是我可以明确的公告所有卖东西给我的人，如果你不承诺先验货后签收，我是不会买的。而你一旦承诺，要求我先验货后签收，我就不管快递是什么态度，我会视快递为你的代理人。如果快递告诉我，必须签字，否则算我拒收。我理所当然的会拒收，因为你很明确的承诺了。至于你无辜不无辜，那不关我的事情。选择不靠谱的快递，是你的错误，也是你要背负的东西。如果不想因为快递纠纷而背负莫名的指责，就不要选择不靠谱的快递公司。圆通中通，北京到上海都是15，最起码隔日到达。联邦的隔日到达只要16.5，保证隔日能到。你可以增加快递费，但是不能对货物不负责。
同理，如果一个买家，因为快递便宜而选择了不承诺先验货后签收的卖家，那么就不要为了快递的事情恼火，这也是你自己的选择。
中国的一个买卖习惯是，先挑便宜的，然后再谈一堆条件。实际上，条件是价格的一部分。如果不给服务好的快递一点空间，那么我们真的，只有用不能验货的快递的选择了。</description>
    </item>
    
    <item>
      <title>vmware-workstation 7.1.2 source for linux-image 2.6.38</title>
      <link>//blog.shell909090.org/blog/archives/1781/</link>
      <pubDate>Wed, 20 Apr 2011 09:51:17 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1781/</guid>
      <description>I&amp;rsquo;m running a vmware-workstation under debian testing. Last week I update kernel from 2.6.32 to 2.6.38, then vmware don&amp;rsquo;t work.
Searching for patch with kernel modules, finally I got those.
http://blog.shell909090.org/vmware-source.tar.gz
http://blog.shell909090.org/vmware-7.1.2-2.6.38-1-generic.patch.gz
Source is tested under debian testing, but should work for all dist which use 2.6.38 as kernel. Patch is not tested.
Here is how to make it.
#cd /usr/lib/vmware/modules/source
#for file in *; do tar xvf $file; done</description>
    </item>
    
    <item>
      <title>编程语言的一点想法</title>
      <link>//blog.shell909090.org/blog/archives/1779/</link>
      <pubDate>Tue, 19 Apr 2011 16:01:09 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1779/</guid>
      <description>最早高级语言出现的时候，编程是面对过程式的。当你需要喝水时，你需要判断是否有热水，没有烧。有热水之后倒，倒好了喝掉。和我们日常过日子的思路差不多。
后来，我们出现了OO，即面对对象编程。OO的好处是，当你处理某个对象的某个动作时，是无须关心外部世界的。这将问题切割成了很多细节动作来完成，非常有利于多个程序员协作。
但是C++和Java在OO的实现上有些问题，主要问题是接口。C++必须先定义函数才能调用，Java也至少需要接口定义才能抽象调用。接口的存在妨碍了对象处理繁杂的动作。例如，我定义了一个抽象的人。可以吃饭，可以喝水。然后具体的把自己实现出来，于是我可以实现自己的吃饭和喝水了。但是，我脾气比较暴躁，看到不顺眼的就会骂人，看到驴蛋就抽丫的，偏偏人这个抽象接口没有定义骂人这个函数。
一种做法是修改抽象接口。这往往导致定义混乱，接口三天两头修改。
另一种做法是，将动作抽象成算子，应用Command模式。于是增加新的动作出来的时候，只需要产生新的算子，抽象的把动作传进去，然后，bing，事情就做好了。从某种意义上说，你可以把Command模式当作python中的bound function。
然而，你不觉得很繁琐么？明明我是支持骂人的，你直接骂就好了。使用Command模式需要为每个动作产生一个新类，内部机制无比繁琐。偏偏OO中有些人为了抽象而抽象，绕这么大一个圈子还沾沾自喜，我会用这么复杂的设计模式了。。。
更大的问题是，Factory模式之类简单模式还好说，Command等复杂模式，和人类的先天思考并不吻合。这导致严重的心智负担，并且只有经过严格培训的人才能进行编程。这是训练人以适应机器的做法，很不人道。 objective c在解决这个问题上就漂亮多了，objective c采用的是消息传递风格，想要什么自己拿好了。python也应用了类似的机制。
C++中之所以设计接口，是因为C++主要面向效率，因而当时采用的是虚函数设计。C++要求编译期决定调用哪个函数，多态的时候用虚函数表来确定。但是在目前，一方面是CPU速度已经没有紧张到这个地步，另一方面，objective c经过改善，效率也接近了C++。所以无论从哪个方面说，都不要再写一堆接口了。</description>
    </item>
    
    <item>
      <title>一个老段子，房价是什么</title>
      <link>//blog.shell909090.org/blog/archives/1777/</link>
      <pubDate>Mon, 18 Apr 2011 10:30:43 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1777/</guid>
      <description>人生就是一场PK，我们出生后就是这么被教育的。你们需要通过PK，来赢得人生，朋友，女人，孩子&amp;hellip;.
现在我们开始第一轮的PK，本轮考试优胜者将得到100分的奖励，而且可以在第二轮PK中获得更有利的条件&amp;hellip;.
现在我们开始第二轮PK，本轮优胜者将获得200分的奖励，并且可以在第三轮PK中获得更有利条件&amp;hellip;.
现在我们开始第三轮PK，这是你们努力12年的目标，本轮优胜者将得到1000分的奖励，1000分！
我们还有额外复活赛环节，参加复活赛的可以继续PK，赢得额外的500分满分奖励&amp;hellip;.
好了，最后，我们进入场外互动环节。我们将随机抽取，给予每人1-100W分的随机奖励分&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;&amp;hellip;</description>
    </item>
    
    <item>
      <title>python解0-1背包问题</title>
      <link>//blog.shell909090.org/blog/archives/1775/</link>
      <pubDate>Thu, 14 Apr 2011 17:59:58 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1775/</guid>
      <description>女朋友的单位需要解一个背包问题，说白了就是算票。通过有限的票，凑出最接近一个数字的组合来。
这个是经典问题，不过票数比较多，我本来用随机划分，然后一次优化一步的随机算法，凑出一个接近的数字。这样算法比较快，不过不是很准。
女朋友领导发话了，时间长点可以接受，但是最好准点。
照做吧，幸好这个算法算100张票子也就是10秒不到，这还是mini-itx。
下面上算法，具体算法猛击这里（http://www.oiers.cn/pack/Index.html ）和这里（http://zh.wikipedia.org/wiki/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98 ）。输入是数字列表和目标，输出是组合和误差。f[i]是目前为止，最大代价为i所能获得的最高收益，以及组合方式。numlist是二维数组，分别是代价和收益。
def resolv_dym(numlist, target): f = [[0, []] for i in range(0, target + 1)] for c, w in numlist: for v in range(target, c - 1, -1): if f[v - c][0] + w &amp;gt; f[v][0]: f[v][0] = f[v - c][0] + w f[v][1] = f[v - c][1] + [(c, w), ] return f[target][1], float(abs(target - f[target][0])) 当然，在这个特例里面，代价和收益相等，所以下面是真实代码。
def resolv_dym(numlist, target): f = [[0, []] for i in range(0, target + 1)] for i in numlist: for v in range(target, i - 1, -1): if f[v - i][0] + i &amp;gt; f[v][0]: f[v][0] = f[v - i][0] + i f[v][1] = f[v - i][1] + [i, ] return f[target][1], float(abs(target - f[target][0])) 完毕。</description>
    </item>
    
    <item>
      <title>论不同系统和客户端的证书管理</title>
      <link>//blog.shell909090.org/blog/archives/1773/</link>
      <pubDate>Wed, 13 Apr 2011 15:54:41 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1773/</guid>
      <description>上面刚说完x509证书链系统，现在我们说说各种系统和客户端下的证书管理吧。理论上说，系统只要保留一份根证书系统，其余的会自动进行计算。但是杯具的是，不同系统的不同应用，使用的是不同的数据库。这导致你的根证书导入之路漫漫而修远。
windows系统：
1.系统证书管理
在运行中输入certmgr.msc，就可以看到证书管理系统了。根证书管理在“受信任的根证书颁发机构-&amp;gt;证书”下面。对证书文件进行查看，导入，然后导入到这个区域，就可以变成根证书了。要吊销一份证书，删除是不行的，因为会自动加回来。加入“不受信任的证书”好像也无效。我找到的比较实用的方法是右击看属性，“停用这个证书的所有目地”。再试试看？证书应当无效了。
2.firefox
火狐的证书系统是独立于系统证书的，因此在windows中做的修改对firefox无效。需要到“选项-&amp;gt;高级-&amp;gt;加密-&amp;gt;查看证书”中（windows下在工具菜单下），在“证书机构”选项卡，导入证书，而后启用所有用途，让证书生效。如果要吊销，跑到同一个地方，删除证书，或者编辑，取消所有用途。需要注意的是，当你删除证书后，再次查看证书列表时，证书会回来。但是此时编辑证书，可以看到，所有用途都被取消了。
3.chrome
chrome在windows下使用系统证书，因此不要用chrome自身的证书管理系统，直接修改系统证书就可以。
linux系统(debian)：
1.系统证书管理
运行dpkg-reconfigure ca-certificates，会出现让你配置系统证书的界面。这是系统的证书数据库，自动配置的话好像不能添加，只能取消。你反选某个选项后，/etc/ca-certificates.conf中，对应这个选项的行在行首就会出现!。此时系统内就不再认可这份证书。因此推测，如果你需要自己加入一份证书，需要将证书添加到合适位置，编辑/etc/ca-certificates.conf，加入路径，再执行dpkg-reconfigure ca-certificates或者update-ca-certificates进行更新，此时程序会更新/etc/ssl的某些内容，证书就安装上去了。
2.firefox
同样是独立于系统的配置，基本操作和windows差不多，不过linux下面“选项”在“编辑”下面。
3.chrome
linux下面的chrome可以在“首选项-&amp;gt;高级-&amp;gt;证书管理器”中，选择“授权中心”。导入后修改权限即加入。注意需要使用禁用，而非删除对应证书，来阻止某些证书。
这里面说的加入证书，基本是加入自己的证书。至于移除，基本说的是cnnic。cnnic证书有什么危害？目前没有。如果你相信中国的互联网是世界上最开放的互联网，那么下面一堆不看也罢。不过，如果你不相信中国政府颁发出的证书，还是移除的好。在系统内保留一个不受信任的根证书，可能受到证书替换钓鱼。简单来说，你访问一个安全网站的时候，这个网站的证书是如何颁发的，你留心过么？在地址栏网站logo那里右击，查看证书，再找到证书链，你就可以看到，这个证书属于谁，是谁颁发的，这样一个链条。想象一下，你在用gmail的时候，心血来潮看了看域名证书，发现颁发者是CNNIC SSL（google的颁发者是Thawte）。很明显，你访问的网站不是真的gmail，而是一个伪装的网站，将你的请求再转到gmail服务器上。这个网站没有gmail的证书，不过用CNNIC签了一个。于是你的所有请求，收到的邮件内容，发出去的内容，全部被公开了。你也不知道这个替换什么时候进行的，由于安全验证可以通过，系统也没有警告你。是不是有种看到日本恐怖片里面，贞子爬出屏幕的感觉？
当然，这个是一个特例，有点危言耸听。因为对于某些国外CA，证书也是乱发的。基本只要交钱，给一份材料复印件，一样可以通过审查，得到一本CA证书。然而，这种证书通常比较容易被发现，CA也会很快吊销这些证书。如果不是这样，这些CA往往也会被各种系统加入吊销名单。不过对于蓄意产生的CA证书么，就难说的很了。附上一个用于检测CNNIC证书的网站，https://www.enum.cn/。
另一个风险证书则是comodo，早些时候，这个公司被黑客入侵，导致黑客给自己签发了一堆证书。虽然目前这些证书已经被吊销，不过这种安全公司让人一点信任感都没有。最好果断删除。</description>
    </item>
    
    <item>
      <title>说说x509证书链</title>
      <link>//blog.shell909090.org/blog/archives/1772/</link>
      <pubDate>Mon, 11 Apr 2011 11:03:47 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1772/</guid>
      <description>x509证书一般会用到三类文件，key，csr，crt。key是私用密钥，openssl格式，通常是rsa算法，爱咋用咋用的。csr是证书请求文件，用于申请证书。在申请的时候，必须使用自己的私钥来签署申请，还可以设定一个密钥。crt是证书文件（windows下面的csr，其实是crt），是签署人用自己的key给你签署的凭证。通常签名证书的时候都需要一个序列号，避免两个证书重复，当指明序列文件后，被签名证书会使用这个文件，并且文件会发生变化。另外一个额外说明的东西是dh参数，做openvpn的时候需要这个东西，大致是什么算法的初始参数，在下面有生成方法。
key的生成方法：
openssl genrsa -des3 -out in.key 2048 这样是生成rsa私钥，des3算法，openssl格式，2048位强度。ca.key是文件名。为了生成这样的密钥，需要一个至少四位的密码。可以通过以下方法去除。
openssl rsa -in in.key -out out.key 输入密钥后，out.key就是没有密码的版本了。
csr的生成方法：
openssl req -new -key server.key -out server.csr 需要依次输入国家，地区，组织，email。最重要的是，有一个common name，可以写你的名字或者域名。如果为了https申请，这个必须和域名吻合，否则会引发浏览器警报。
crt生成方法：
openssl x509 -md5 -days 3560 -req -CA ca.crt -CAkey ca.key -CAcreateserial -CAserial ca.srl -in server.csr -out server.crt 输入key的密钥后，完成证书生成。-CA选项指明用于签名的ca证书，-CAkey选项指明用于签名的密钥。-CAserial指明序列号文件，而-CAcreateserial指明文件不存在时自动生成。
openssl req -new -x509 -days 3650 -key ca.key -out ca.crt 这个是用于生成自签名证书的。
dh参数生成方法：
openssl dhparam -out dh1024.pem 1024是位数，一般1024已经够了。
x509的证书链是这样的。crt上有证书持有人的信息，持有人的公钥，签署者的签名。当你安装了一个证书后，就信任了这份证书。证书上会说明用途，例如服务器认证，客户端认证，或者签署其他证书。当系统收到一份新的证书的时候，证书会说明，是由谁签署的。如果这个签署者确实可以签署其他证书，并且收到证书上的签名和签署者的公钥可以对上的时候，系统就自动信任新的证书。
在系统开始的时候，会自动安装信任一些证书机构，这些被称为根证书机构（CA）。根证书机构会为其他公司颁发证书，用于各种用途。当然，被签署的证书也可能是一份“可签署证书”，这样就要检查对方的资质。这样逐层签署，就会形成一个叫做“证书链”的东西。从拓扑结构上来说，其实应该是森林结构。
当然，如果我们要弄ssl，又没有钱请CA给我们签署的时候（他们的验证费都好贵的），可以考虑自己给自己签署。生成一份key，生成一个req，然后用自己的key签署自己的req。当你使用这份证书做ssl的时候，就会产生不受信任的证书警报。你可以在客户那里安装这张证书为根证书，就不会弹出这个警告了。当然，考究的人，签署用证书和服务器身份认证证书要分开。先做一个自签署证书作为根证书，然后用这个根证书签署一个服务器证书。这样在客户那里安装根证书后，服务器证书就会自动信任。这样的好处是，一本证书只能颁发给一个特定域名。如果你有多个域名，就要反复在客户这里安装证书。然而如果采用根证书签名，那么只要安装一张根证书，其他都是自动的。不过如果事情只要干一次，就不用讲究这么多了。</description>
    </item>
    
    <item>
      <title>为什么我觉得拿版权较真的人都在扯淡</title>
      <link>//blog.shell909090.org/blog/archives/1770/</link>
      <pubDate>Fri, 08 Apr 2011 15:17:59 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1770/</guid>
      <description>重申一遍，我不反对版权，我只反对使用版权牟取暴利。
什么叫暴利？我是个程序员，我做一个软件出来，我希望用我软件的人能给我点钱，对得起我的工作。或者最起码，不要拿着我的软件改的面目全非，在里面安放病毒什么的。这就是我对知识产权/版权的全部诉求——我希望得到收益，这个是一种尊重，也会激励我更好的做别的软件。
然而今天，我们往往碰到这么一个情况。在校的时候，我们看到漫天的，学XX语言吧。同学老师都在讨论XX技术，彷佛美好的未来向自己招手。等到了工作时，发现，原来XX技术是XXX公司的专利，以此技术为核心构架程序，尤其是企业级程序必须向XXX公司交费。好吧，用东西付钱天经地义，哥回头也做个值钱的东西出来。做着做着，XXX公司又往往会三天两头变来变去，做一些你觉得技术上说不通的，很恶心的变更。当然，人家的东西，人家说了算。等自己做了很久后，发现自己用心做出的XXXX技术压根无人问津，因为XXX公司又推出了和这个技术相近的XXXX技术。他们曾经开出一个天价——天下最低的价——来购买你的技术的全部权利，并且宣称，自己的收购价这么低而权利费这么高，是因为在策划，宣传，包装，完善上花费了巨额投入的原因。这时你才发现，原来当初在学校里面，还有OOO语言可以选择。一切都是免费的，你不需要付钱来用别人的技术，当然产品多数也是免费给别人使用的，通常也只能收服务费。一切都和你想的差不多，只是——你当时根本不知道。
宣传，策划，包装，完善到底要花多少钱呢？这个和中国移动到底从我们的手机账单中支出多少到基础设备建设，支出多少到服务一样，是个很难揣测的概念。然而我们可以知道另一个东西——他们的资产回报比——一般是多高。一切拿着策划，宣传，包装，需要花费巨额费用来说事，但是自己却有超高资产回报比的公司，哥都认为是在扯淡。
更不提因为XXX技术和OOO技术针对的客户群接近，就无视两者根本没有血亲的事实，打官司指控OOO技术抄袭XXX技术，企图将松散的社区送上死路的动作。这其实不是为了给程序员更高的回报，而是出于资本的贪婪。版权/著作权应当保护作者的利益，而不是资本的利益。这就是我对版权/著作权的态度。
夸张？松茸叔叔说过一个很有趣的内容，因为是豆瓣广播，链接不好找，我就不贴了。“从前有群人喜欢吃狗不理包子，他们搞了个狗不理包子同好会。后来有天来个人说，我是狗不理新老板，你们借用狗不理的名字，这是亲，呃，侵了我的权，你们得散了。于是他们只好改名为包子同好会。好笑吗？如果JavaEye没说谎，这就是Oracle对他们干的事情。”</description>
    </item>
    
    <item>
      <title>决定了，以后增加一个标签叫评论</title>
      <link>//blog.shell909090.org/blog/archives/1768/</link>
      <pubDate>Thu, 07 Apr 2011 10:21:41 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1768/</guid>
      <description>看了看日志，发现很多人还是在乎别人的评价是什么的，经常有搜索“XX怎么样”之类的关键字跳到我的blog上。最近在挑一些东西的时候，发现，确实，别人的评论很重要，尤其是负面评论。
所以，决定了，以后就增加一类叫做评论，专门就是评论看到的各种东西的。当然，负面评论多正面评论少。不过大家别以为负面评论少是好事。10块买个手电筒，负面评论最多是“不够亮”。6000买个ipad2，你看看能出多少负面评价。
——可是你愿意弄个ipad2还是弄个手电筒？</description>
    </item>
    
    <item>
      <title>baidu和google的选择</title>
      <link>//blog.shell909090.org/blog/archives/1766/</link>
      <pubDate>Wed, 06 Apr 2011 10:48:05 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1766/</guid>
      <description>baidu是个很垃圾的公司，我坚信。
但是再垃圾的公司也有他的用途，例如baidu mp3是个很好用的服务。google会和你JJYY版权问题，百度不会。
不过，有利也有弊，google上只是有广告，baidu上只要有钱，出什么都不奇怪。例如这个：
http://www.douban.com/note/128688737/
所以，如同文章说的。你要找信息的时候还是找google吧，baidu上全是广告。你想投资，怕被骗？别去baidu，那里全是广告，至少是软文。也别去天涯mop，那里也全是软文。即使你一对一的去问人，也不知道那ID后面是不是枪手的马甲。上google，搜全世界的blog，独立主机，那里也许有你感兴趣的东西。
当然，你要找广告的话就别找google了，不够多。
另外，该骂的，骂出来。老子布衣一个，还能怕谁呢？</description>
    </item>
    
    <item>
      <title>twip在LiteSpeed上碰到403问题的解法</title>
      <link>//blog.shell909090.org/blog/archives/1764/</link>
      <pubDate>Sat, 02 Apr 2011 15:16:09 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1764/</guid>
      <description>这是一个老bug了，具体问题看这里(http://code.google.com/p/twip/issues/detail?id=80 )。
当你使用o模式，到twitter上同意后跳回来，就会撞上403。
不管他，当时你的url应当是http://xxx.com/path/getapi.php?api=http://xxx.com/path/o/username/token。xxx.com是你的域名，path是路径，username是用户名，token是一个随机的数字。
用http://xxx.com/path/o/username/token，直接上去。</description>
    </item>
    
    <item>
      <title>作家们和百度的战争</title>
      <link>//blog.shell909090.org/blog/archives/1762/</link>
      <pubDate>Fri, 01 Apr 2011 10:14:12 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1762/</guid>
      <description>作家们和百度打起来了，真是让我情何以堪呐。
照理说，作为一个码工，怎么也算是码字工的同行，应当对作家们表示一下支持。但是我又是个开源免费的爱好者。为防止有人搞不大明白啥叫开源免费，我简单解释一下。简单来说，就是拿着自己的东西在那里叫卖，来吧都来看吧，白给不要钱，还送设计图。作为正常中国人，也许很难理解这种脑残行为。不过事实上，这一切真的发生了，而且在全球范围内轰轰烈烈。
不过这让我的立场就尴尬了。唔，怎么说呢？我们还是把这件事情拆开说吧。
1.百度有错么？
我没仔细看，不过依据我的推测，作家在看到自己的作品出现在百度文库中之后，告知了百度，百度却没有积极的配合移除。实话说，这个比较符合我对百度的一贯认识。上次百度因为类似问题，还和盛大吵起来过。当时百度那位发言人的言论，让我颇为惊叹——这么好的人才怎么就没去中宣部或者外交部呢？
系统里有他人作品并不是原罪，但是别人告诉你，别收录，你还不当回事情就是了。想不被收录进去还要交钱，你当自己是中国黄页么？
另外做一个不负责任的猜测，说百度和此事无关，也未必完全无关。百度当年曾有要求其他公司购买自己排名，不买就把对方的关键词指到自己身上的记录。我怀着恶意的猜测，若是百度文库的产品经理发现自己产品没人用，找一堆枪手以普通用户身份上传也是有可能的。可惜事出有因，查无实据。本段落仅供一笑，切莫当真。
2.普通人的态度？
我和女朋友说过这个事情，她的态度是，趁着百度没关，赶快上去看看。还看到一款百度和爱国者推出的电子书，等于免费看很多作品。于是感慨早知道不买kindle，买这个了。我坚决的劝下了她，这种擦边球是不稳定的，投资硬件实属风险，买下来谁知道哪天就白买了。verycd殷鉴在先，百度文库也难说的很——果然，没几天李彦宏出来说话，管不好就关。算不算数倒是另说，要是买了那个电子书，怕是又要担心能不能用了吧。
有便宜不占是很正常的思路，不过在占便宜前，先考虑一下这句话：起初他们追杀共产主义者，我没有说话-因为我不是共产主义者；后来他们追杀工会成员，我没有说话-因为我不是工会成员；接着他们追杀犹太人，我没有说话-因为我不是犹太人；最后他们奔我而来，却再也没有人站出来为我说话了。（http://www.kaieconblog.net/2011/03/29/10343/）我觉得郭凯说的很好，你可能觉得百度很好，白看东西不花钱。这次你支持了百度，下次就有人搞软件下载中心，上面全是破解软件。再下次就有人搞不知道什么中心——中国已经够山寨了，别搞的全国皆山寨，OK？
可能你说，我种地，我不靠脑子吃饭，搞不到我头上来。那也请你多想一步。搞死中国的作家，我们就只能看免费的社论。搞死了中国的程序员，我们就只能高价买别人的程序。你把中国做创造的都搞死了，你就等着老外涨价吧。山寨老外的？当WTO吃干饭的阿？WTO已经因为中国没有按约定开放出版市场提出抗议了(猛击这里：http://www.etu.net.cn/Article_Show.asp?ArticleID=579)，重复这么搞下去，还想不想出口了？
3.作家维权，结果如何？
我觉得，这是另一方面。百度固然有错，但是我却不看好作家的维权行动。如我上文所说，中国人现在的习惯就是，窃书不算偷，读书人的事，能算偷么？对着这样的民众，我常有有力无处使的感觉。实话说，我是非常不看好维权的结果的。这种土壤中，即使一个百度倒下去，千百个白读站起来。
4.有什么建议？
别搞纸质书了，那个注定是昨日黄花。一本纸质书，作家能拿多少？一本电子书能拿多少？假定读者不变，作家收入不变的情况下，电子书定价可以达到纸质书的一到两折，而且没有什么前期费用。作为用户而言，家里堆一堆纸海也是浪费且不低碳的生活。我实在搞不懂为什么要弄纸质书。盗版问题？电子书是比较容易盗版，纸质书就不会受到电子盗版的冲击么？要真不会也没有这次事情了。而且，在一本书一两折的低折扣下，读者反倒会比较多。一本深入浅出MFC，我八年前买的时候是90，现在恐怕要到150上下。一两折只有20-30，买也无关痛痒。读者增多，作家收入还会增加。
不过现实的一个问题是，传统认为，花钱买一刀纸回去叫消费，天经地义。花钱买一本电子书就不好接受了，总想弄免费的。不过我得说——未来笼罩在迷雾中，一切都会变的，观念也是——
5.我为什么情何以堪？
因为我比较赞同开源运动的精神，所以也对保护版权的问题提不起精神来。
开源运动据说起于上世纪美国的嬉皮士文化，主要观点是，代码应当属于全人类，而不是被某个人圈起来贩卖牟利。开源运动开始之所以风行，是因为很多大学教授碰到了版权上的实际问题——版权条约禁止代码用于教学。最有名的例子是UNIX做了闭源限定后催生了minix，后者催生了linux。程序员必须阅读很多的源码，来增加自己的水平，而版权限制这点。
到了后期，很多大公司也开始支持开源运动。因为这一运动对上游和下游都非常有利，它只损害以版权牟取暴利的人。作为上游厂商，雇用一个熟悉开源系统的硬件程序员，就可以直接开发这一系统的硬件驱动。而不用像微软模式一样，雇用通过微软认证，并且和微软签署不可泄漏协议的硬件专家——这些人的工资中有相当部分是交给微软的保护费。使用开源可以直接的降低成本。而作为下游，则更看中开源系统代码透明，不容易植入有害代码（这点上，微软一直盛传被植入了后门，但是始终无法有力辩驳就可以知道），而且很容易基于自己的需要定制修改。中游厂商则是通过服务收取有限费用，而不是暴利。
实际上，版权从始至终，都是在保护创造作品的人的积极性。在软件业，开源运动找到了另一种方式来激励创作者的积极性，而不是一味的把东西保护起来。这让我们反思对影视产品的保护力度问题。软件业只享有20年的保护，而出版业，唱片业享有70年的保护。我们是否应当执行如此强力的版权保护政策呢？
问题归于出版领域，这篇博文（猛击这里：http://weiwuhui.com/4190.html）印证了我的想法。出版业的大头都在出版社这里，这才是使用版权赚取金钱的大头。</description>
    </item>
    
    <item>
      <title>python源码解析读书笔记（四）——杂项</title>
      <link>//blog.shell909090.org/blog/archives/1760/</link>
      <pubDate>Thu, 31 Mar 2011 11:04:43 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1760/</guid>
      <description>1.GIL的影响
很多人讨论python性能的时候都提到一个概念，GIL。我在python源码中搜了一下，这个函数调用并不多，但是位置很要命。每个线程，生成的时候请求一下，退出的时候释放一下。在每次运行字节码前也会短暂的释放一下，让其他线程有获得运行的机会。说白了，除非程序显式的调用release_lock去释放资源，否则python是没有任何多线程能力的。这种机会并不很多，通常只发生在阻塞的时候。
而python原子化的粒度也比较清晰，就是每个字节码内部一定是原子的，字节码和字节码之间是非原子的。当我们操作l.append的时候，不用担心线程竞争导致数据结构损坏。但是如果我们操作del l[len(l)]的时候，存在发生异常的概率。
2.对象缓存池
python对小内存对象（碎片对象）提供了小内存对象缓存池。默认情况下，256字节以下的内存由小内存缓存池管理，以上的直接向系统申请，申请大小每8字节对齐。
对象缓存池的分配和收集技术采用了自由资源链表，在2.5之后，当某个尺度的资源不再需要时，会整体释放。
3.python的GC机制
python的GC机制是基于引用计数的，因此当引用计数归零，对象一定会被释放（如果是碎片对象，内存不一定直接释放，可能归对象缓存池）。
python的辅助垃圾收集算法是三色标记法和分代垃圾收集模型（generation），由于要跟踪所有的容器对象，因此容器对象上有跟踪链表。
4.字符编码处理方案
无论从何种来源，只要是字符串，并可能交给一个和当前代码并不紧密耦合的代码处理，就应当被转换为unicode。或者换一个更简洁的说法，应当使用unicode作为接口数据类型。
str对象是很难猜测编码的，当离开了数据源代码后，再分析编码是个不靠谱的方案。</description>
    </item>
    
    <item>
      <title>python源码解析读书笔记（三）——对象和函数</title>
      <link>//blog.shell909090.org/blog/archives/1759/</link>
      <pubDate>Wed, 30 Mar 2011 10:19:16 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1759/</guid>
      <description>1.mro
算法，自身先入栈，而后按声明顺序继承每个父类的mro，内部对象在最后。简单来说，深度优先，从左向右。
当类对象创建时，会将父类所有函数全部复制过来（很明显，应当是符号复制）。
2.super规则
&amp;gt;&amp;gt;&amp;gt; class A(object):
&amp;hellip; def f(self): print &amp;lsquo;A&amp;rsquo;
&amp;hellip;
&amp;gt;&amp;gt;&amp;gt; class B(object):
&amp;hellip; def f(self): print &amp;lsquo;B&amp;rsquo;
&amp;hellip;
&amp;gt;&amp;gt;&amp;gt; class C(A):
&amp;hellip; def f(self): print &amp;lsquo;C&amp;rsquo;
&amp;hellip;
&amp;gt;&amp;gt;&amp;gt; class D(C, B):
&amp;hellip; def f(self): super(D, self).f()
&amp;hellip;
&amp;gt;&amp;gt;&amp;gt; d = D()
&amp;gt;&amp;gt;&amp;gt; d.f()
C
&amp;gt;&amp;gt;&amp;gt; D.__base__
&amp;lt;class &amp;lsquo;__main__.C&amp;rsquo;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; D.__bases__
(&amp;lt;class &amp;lsquo;__main__.C&amp;rsquo;&amp;gt;, &amp;lt;class &amp;lsquo;__main__.B&amp;rsquo;&amp;gt;)
&amp;gt;&amp;gt;&amp;gt; class A(object):
&amp;hellip; def f(self): print &amp;lsquo;A&amp;rsquo;
&amp;hellip;
&amp;gt;&amp;gt;&amp;gt; class B(object):</description>
    </item>
    
    <item>
      <title>python源码解析读书笔记（二）——函数特性</title>
      <link>//blog.shell909090.org/blog/archives/1757/</link>
      <pubDate>Tue, 29 Mar 2011 10:55:21 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1757/</guid>
      <description>1.函数的性质
&amp;gt;&amp;gt;&amp;gt; def outer(o1, o2):
&amp;hellip; def inner(i1 = 10, i2 = []):
&amp;hellip; return i1+o1+o2
&amp;hellip; return inner
&amp;hellip;
&amp;gt;&amp;gt;&amp;gt; a1 = outer(50, 30)
&amp;gt;&amp;gt;&amp;gt; a2 = outer(50, 30)
&amp;gt;&amp;gt;&amp;gt; a1.func_closure
(&amp;lt;cell at 0xb75454f4: int object at 0x8455ddc&amp;gt;, &amp;lt;cell at 0xb7545524: int object at 0x8455cec&amp;gt;)
&amp;gt;&amp;gt;&amp;gt; a2.func_closure
(&amp;lt;cell at 0xb754541c: int object at 0x8455ddc&amp;gt;, &amp;lt;cell at 0xb75453a4: int object at 0x8455cec&amp;gt;)
两次生成的函数对象拥有不同的闭包空间。
&amp;gt;&amp;gt;&amp;gt; a1.func_defaults
(10, [])
&amp;gt;&amp;gt;&amp;gt; a2.func_defaults</description>
    </item>
    
    <item>
      <title>python源码解析读书笔记（一）——内置对象</title>
      <link>//blog.shell909090.org/blog/archives/1756/</link>
      <pubDate>Sun, 27 Mar 2011 22:48:11 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1756/</guid>
      <description>1.类型的类型 obj int(10).ob_type -&amp;gt; PyInt_Type
PyInt_Type.ob_type -&amp;gt; PyType_Type
PyInt_Type.tp_base -&amp;gt; PyBaseObject_Type
PyBaseObject_Type.ob_type -&amp;gt; PyType_Type
PyType_Type.ob_type -&amp;gt; PyType_Type
更精确的参考源码解析262页图。
\
2.小整数对象
if (-NSMALLNEGINTS &amp;lt;= ival &amp;amp;&amp;amp; ival &amp;lt; NSMALLPOSINTS) {
v = small_ints[ival + NSMALLNEGINTS];
Py_INCREF(v);
}
\
3.大整数对象，空对象池，对象缓存
&amp;gt;&amp;gt;&amp;gt; a = 1000000
&amp;gt;&amp;gt;&amp;gt; b = 2000000
&amp;gt;&amp;gt;&amp;gt; id(a) == id(1000000)
False
&amp;gt;&amp;gt;&amp;gt; id(100000) == id(100000)
True
最后一个是因为python解析器在解析对象的时候，对前后生成的对象进行了缓存。经过测试，对文件也有效。
\
4.字符串对象复用和缓存
&amp;gt;&amp;gt;&amp;gt; c = &amp;lsquo;qazwsxedcrfvt&amp;rsquo;
&amp;gt;&amp;gt;&amp;gt; c += &amp;lsquo;gbyhnujmikolp&amp;rsquo;
&amp;gt;&amp;gt;&amp;gt; a = &amp;lsquo;qazwsxedcrfvtgbyhnujmikolp&amp;rsquo;</description>
    </item>
    
    <item>
      <title>豆瓣九点的认领功能</title>
      <link>//blog.shell909090.org/blog/archives/1755/</link>
      <pubDate>Fri, 25 Mar 2011 16:12:30 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1755/</guid>
      <description>以前写了blog，每天都跑去豆瓣同步一下。方法是新建一篇日记，然后贴链接。今天牛博恩提醒我，“你在九点上订阅自己的博客，然后再认领就没必要更新博客的同时还在豆瓣日记上发一篇一样标题带链接的好吧，刚刚发现这么舒服的方案。我已经发贴，豆瓣来吧。 doubanclaim7834a5d025d455b1</description>
    </item>
    
    <item>
      <title>不要问我你和妈掉进水里救哪个</title>
      <link>//blog.shell909090.org/blog/archives/1754/</link>
      <pubDate>Fri, 25 Mar 2011 13:23:23 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1754/</guid>
      <description>我和你妈掉进水里你先救哪个？这个问题恐怕全地球男人都知道正确答案——不要回答。
先救老妈？只怕女朋友当场翻脸。但是先救女朋友？先不说老妈高兴不高兴，女朋友要知道你会如此对待父母，只怕也会质疑你会如何对待她的父母。所以这个问题就根本不能回答，或者说根本不要问。因为哪个回答都不是你想要的。
中国古代伦理中，这个问题倒是不难回答。百善孝为先，除了皇帝的女儿，有哪个跋扈媳妇敢问这种大逆不道的问题？只怕先是一个多言的罪名被休妻回家，回家还会被众人指指点点戳脊梁骨。外国人如何回答我不清楚，我只问了thomas这个问题。当然，准确的说，是他老婆问的。但是他的回答很有意思，救年轻的。他老婆听了很高兴，然后thomas很二的加了个注解。如果你和孩子掉进水里，我就先救孩子&amp;hellip;&amp;hellip;
我不知道这是不是外国人的普遍观点，不过这也代表一种观点——最大幸福理论。最大幸福理论关注的是结果，当一个冲突发生的时候，最大幸福理论的意见者总是选择获利人数最多的方案。例如一个正常的铁轨上有五个孩子在玩，一个废弃的铁轨上有一个孩子。你可以扳动扳手来决定死哪边，扳不扳？最大幸福理论者认为，扳！当然，会有另一个相反的理论跳出来。这种理论关注原因，当一个冲突发生时，他们总选择惩罚行为不正确的人。还是以铁道上的孩子为例，他们的观点是，那个孩子是正确的，所以，不扳！
应用在老妈和老婆掉到水里的问题上，最大幸福理论就很容易得到观点，保护剩余生命最长的人。当然，另一个理论就没法得出直观的结论，因为我们根本不知道老妈和老婆是怎么掉下去的。如果是老妈推老婆下去导致自己也下去了呢？关注行为的理论就能得到结论，救老婆。
相较于外国的两大观点，分别关注过程和结果。中国的理论更关注“关系”，关系决定论占据了东方决策的主流。以双方的关系，子女和父母的关系，夫妻的关系，来决定每个人的行为。这就是所谓的“父父子子君君臣臣”。从传统观点来看，媳妇敢和婆婆争重要性，无疑是忤逆犯上了。其最简洁的回答就是，媳妇可以再找，老娘只有一个。这个理论推广开，就是婆婆折磨媳妇，多年媳妇熬成婆的传统。这个传统的对错暂且不论，中国传统伦理那一套已经被我们彻底打倒了，还踩上一只脚让其永世不得翻身。文革平反后，中国又开始了大规模的城市化进程。这个传统的儒家伦理体系现在是不受到什么重视了，只是在每个传统中国人的行事里面看到痕迹而已。
那么现下中国人的实际答案呢？救老婆。有意思的是，这个观点的形成并不是理论体系的指导和理论体系对现实的适应，而是彻彻底底的市场运作。由于一胎制的推行和中国传统重男思想的痕迹，所以中国男女比例严重畸形，男性人数远远大于女性。上面那句回答的实际情况就变成了，老娘只有一个，媳妇一个不到。所以聪明点的中国人都知道，养女儿，不要养儿子，儿子是个赔钱货。在这种情况下，男士们虽然碍于传统中国思想，都不敢大声说出自己的选择。但是在有意无意中，都照着这个实际答案做了。
所以由此产生的中国女性解放，不得不说带着畸形的痕迹。新中国的女性要求照着欧美靠拢，但是唯独不学人家的女性独立生活的能力。当然，中间要插一句的是，中国人也向来不注重培养年轻人的独立生活能力。一个美国学生发表这方面言论还被死亡威胁。(具体看这里：http://internet.solidot.org/article.pl?sid=11/03/21/037231&amp;amp;amp;from=rss)中国女性希望依靠丈夫，于是丈夫越有钱，有能力，就能吸引更多的女性。按照流行的话说就是，我宁可坐在宝马后面哭，也不要坐在自行车后面笑。然而中国女性在依靠了丈夫后，却不希望如传统一般受到夫家家庭的约束。当然，实际上夫家的约束还是会发生的，就形成了新一代的婆媳冲突。这和传统的恶婆婆折磨媳妇并不尽相同，因为婆婆通常不是折磨媳妇，而是关于儿子的具体问题上，双方不能达成一致。
好吧，回到原题。如果你正在恋爱中，或者婚姻中。就别问你的伴侣，我和你妈掉到水里你先救谁。你得不到想要的答案，对方一定会顾左右而言它。更神奇的是，我认识的人中，问过这个问题的人基本都受到了这个问题的折磨。所以，你最好不要问，而是祈祷这种问题永远不要发生。</description>
    </item>
    
    <item>
      <title>关于IT雇员的一点话</title>
      <link>//blog.shell909090.org/blog/archives/1752/</link>
      <pubDate>Thu, 24 Mar 2011 14:31:35 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1752/</guid>
      <description>IT是个很大的圈子，没人敢说什么都懂，也没人什么都懂。我们都有碰到不明白的时候，都得去查资料。一个人力资源方面的有趣的问题是，公司该不该为查资料的时间付钱呢？\
技术上说，IT人员查资料是一个自我学习的过程，公司既不从中受益，也就没有为此支付薪水的必要。然而我们都忽略了一件事情，就是你招聘的员工，究竟是一个新手呢？还是一名领域上的专家。如果是领域上的专家，我得说这个技术上的说法是成立的。因为你在招人的时候，就已经知道对方的身份。并且，可以合理的假定，对方基本不用去查找资料，或者学习一些新的东西。当然，实际执行的时候，偶尔还是会发生这样的事情，不过这就不重要了。
然而多数公司没有这样的好运，好运这个词包括招聘的价格和高昂的招聘运作过程。天天投简历尚找不到工作的人也许无法理解，一个公司要招聘一个靠谱的员工到底有多困难。在IT的某个子领域，例如某种数据库大规模集群性能优化。能够谈的上足够专家，有一定经验，从而避免大部分的学习和资料查找的人，在中国的人力市场上大约也就是几千人。平摊到广袤的中华大地上，在上海的专家不足一千，不少还在大公司里。当一个公司真的需要一个能做事的人的时候，几乎没有可能找个专家过来，甚至在比较生僻的领域中连有一定经验的人都极为抢手。即便是比较通俗的java程序员，专家的招聘难度虽然不高，但是工作成本却不低。雇用一批专家来写程序是件很低效的事情。
大多数公司会雇用一批合适的人，这批人通常是高校毕业，有工作经历。这些经历可能是学校中的，也可能在小公司工作了一年。无论如何，他们会使用工作中所需要的技术，却绝对不能称作熟练。他们没有足够的经验写出工业化的程序，而且会花费大量时间查阅资料，自我学习。也正是如此，公司支付的薪水也是非常低廉的。
好，我们回到最初的问题上。我认为对于这些普通员工，公司实际上是以降低价格的方式，来让他们为学习买了单。如果再要求他们不能在工作时间查阅资料自我学习，无疑是苛求。相反，对于这些尚未成熟的程序员，最好增加公司培训，以补充高级程序员的缺口。当然，实际执行的时候必须考虑到培养成本和违约问题，考虑一些比较可控的培养方式。在中国常见的情况是，程序员培养好了，人也跑了。
说到这里，想起一个台湾朋友和我说的。虽然我们（指台湾员工和大陆员工）的能力差不多，但是台湾人，新加坡人拿的就是比大陆人多。有些人就觉得是有歧视，其实不是的。老板要求的是一个稳定的人来做事，他和我说好了两年不能离开，我就准备工作两年。他们老板我也聊过，的却向我抱怨过大陆这里招到人，培训好了人就跑了的情况。正是因为我们每个人的小小聪明，造成我们的整体信用不佳。老板不敢用，也不敢培养大陆的员工，总觉得有一天会被他们放鸽子。这种情况下我们发展到领域高阶职位就越来越难。很多东西必须是坐在那个位置上才会学到那些东西，就是所谓的“居移体养移气”。对于员工来说，长期在一些低端职位做一辈子，也是学不到高阶位置所要的东西的。大陆员工不比别人笨，但是人家一出来就做到管理者位，我们则是坐在了工位上。于是在此后几十年的人生长跑中，差距就越拉越大。
怎么办？我不是教人怎么办的，我只是说行业里面的一些现象。</description>
    </item>
    
    <item>
      <title>approx无法升级问题的解决</title>
      <link>//blog.shell909090.org/blog/archives/1749/</link>
      <pubDate>Wed, 23 Mar 2011 09:47:38 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1749/</guid>
      <description>approx最近不知道怎么回事，无法升级。每次aptitude update都无任何升级提示。而直接指向mirrors是可以升级的。
其实，去缓存目录下删除Release和Release.gpg就好了，通常是在/var/cache/approx下面的debian/testing/下面，testing是你的/etc/apt/source.list中指名的发行。</description>
    </item>
    
    <item>
      <title>乘飞机的几个提示</title>
      <link>//blog.shell909090.org/blog/archives/1748/</link>
      <pubDate>Mon, 21 Mar 2011 13:15:18 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1748/</guid>
      <description>1.飞机的登机过程是，买机票。提前起飞小时一个半小时到机场。到值机柜台划位，托运行李，更换登机牌。过安检，到登机口等待登机。登机，并等待飞机起飞。下面的过程就比较不固定，大概是，天气原因飞机延误，航空管制飞机延误，不广播原因飞机延误。注意！民航规定，飞机延误四个小时以上的，不问理由，必须赔偿。当然，战争之类的不可抗力不算。天气算不算不可抗力，这是一个很有意思的问题。
2.记得携带身份证，没有身份证是上不了飞机的，而且后果自负。
3.机票通常越早订越有折扣，临起飞前一天往往已经没有折扣了。
4.根据机场和航班的不同，通常要求你提前到一定的时间。以北京首都国际机场为例，国航的要求是提前一个半小时到机场。这并不是说你没有提前一个半小时就无法上飞机，只是说如果迟到后果自负。当然，这个时间越长，你越找不到航空公司的麻烦。所以不要相信这个时间，傻傻的去等着。在你熟悉机场的情况下，可以估算一下提前多久。飞机的值机柜台关闭大概是起飞前30分钟，后面就是等候柜台办理了。登机关闭大约在飞机起飞前10分钟，两者会根据你的登机口距离和飞机距离有所变化。只要你在合适的时间赶到，都可以顺利上飞机。当然，如果机场并不熟悉，还是早点到的好。不知你是否能够想象，有的时候机场外面出租车会排起长达一个多小时的长队，例如以前的虹桥机场在周一早上的时候。所以要稍微清楚一点到机场的方式和可能被延误的时间。通常越不稳定的交通方式，越早到机场以防万一。
5.知不知道最好的座位在哪里？走道机窗各有所好，但是公认的最佳座位在紧急通道旁边一排。首先是，根据统计，这里的逃生概率最高，坐在这里等于具有额外的命。其次，由于为了逃生原因，所以座位和前面的距离比正常的宽一些，坐起来比较舒服。
6.如果你迟到了，值机柜台关闭了。你自己估计赶的上飞机，可以向候补柜台申请。最好没有行李，因为重新开启行李通道比较麻烦，工作人员一懒，你就上去不了。当然，平时也是尽量少带托运的好，拿行李也很麻烦。
7.在过安检的时候，记得不要带凶器，不要带液体，不要带火。有电脑的拿出电脑，尽快的把东西放在篮子里面过去。被安检人员发现违规是最麻烦的事情，你要么回去重新托运，要么当场丢掉。
8.在紧急的情况下过安检，你可以向工作人员申请急客通道。有的机场让你从机组和头等舱通道过去，也是一样的。目的是减少你过安检的时间。当然，你最好不要用到这条。
9.检票登机的时候不要着急，登机牌上的座位是固定的，你不高兴没人会抢。早早的排队登机只会增加你的排队时间。
10.到座位后，把东西放上行李架就赶快坐下，后面的人还要过去。文明点，谦让点，下次也会有人让你过去。
11.飞机起飞的时候有快速升高，这时候会产生压耳现象，尤其是当你感冒的时候。有些人可以自主调节欧式管，从而消除压耳现象(贝壳就可以)。有些人就不大会，从而发生耳鸣，听不到声音，耳痛什么的。别担心，喝点热水，嚼一下口香糖会好转的。
12.很偶然的情况下，飞机内舱压会略略失常。有些人会发生头晕，头痛，耳鸣(和压耳完全是不同感觉)，疲劳等高原反应。在贝壳数百次飞行中，只发生过一次这样的现象。这时候没什么好办法，尽量睡着吧。高原反应药是来不及了，严重可以吸氧。</description>
    </item>
    
    <item>
      <title>debian是什么</title>
      <link>//blog.shell909090.org/blog/archives/1739/</link>
      <pubDate>Sun, 20 Mar 2011 23:19:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1739/</guid>
      <description>debian是一种开源的操作系统，其内核理论上是可变的，主要有linux/freebsd/hurd三种。但是目前为止，主要被采用的都是linux内核，大部分都是基于i386或x86_64编译。
debian系统使用一种被称为deb的打包格式，这种格式中声明了依赖性问题，但是没有解决。所谓依赖，是指一个包内不包含运行所需的所有组件。例如特定版本的lib，辅助配置程序等。将依赖分离有助于多个包共享一份被依赖程序，并且几个组件可以独立升级。windows中通常将依赖包加入安装包内部，但是这样往往不利于被依赖程序的升级。(windows的二进制兼容性做的并不很好)如果没有打入安装包，windows中通常表现为安装一个程序的过程中提示你需要安装某个东西，请去哪里下载。debian的依赖是依靠一套被称为apt的系统解决的。在这套系统中，你可以指定一个源(debian mirror)，或者多个源。apt系统会自动将上面所有软件的目录下载下来供你查阅安装。如果有依赖性问题会自动安装依赖的包。因此，配置好的apt系统相当于一个软件仓库，里面有很多程序。你可以选择其中的一部分，安装使用，而无须忧心安装过程。
apt的更新分为三部分，一部分是这个源中有哪些包，这些包的元信息(meta info)。包括这些包的名字，版本，所依赖程序的版本等。当一个源获得了新的软件的时候，就会更新这个列表，或者叫目录。客户端更新目录后就可以发现，有哪些包需要更新或者下载。而另一部分则是这些包文件本身。最后一部分是以上内容的签名。在元信息上有包文件的校验，而元信息本身则被一个非对称密钥签名。这个签名由apt的管理者签署，从而保证只有受到管理者认可的包会被客户安装，其他恶意插入的包都会被警告。
debian系统默认是没有图形界面的，也没有ssh操作界面，debian的基础系统甚至没有一个可启动的内核。基础系统中只包含了一个文件结构，和被简单配置能够自我管理的apt系统。最精简系统在基础系统之上，安装了内核和引导管理器，从而保证在某个系统上可自启动和自引导。debian的businesscard安装包包含了一个建立其他精简系统所需的所有工具的集合，而netinst安装包则增加了建立最小系统所需的镜像。两者的区别在于，businesscard必须联网以下载最小系统所需的所有安装包，而netinst可以从光盘上获得这些包。
当然，这离一个完整的系统还差很远。作为服务系统，必须安装ssh以便于远程管理。作为桌面系统，需要安装X，WM，还有其他应用程序。甚至，作为网络系统，基础的网络配置组件都是默认不完整安装的。你必须设定网络，设定源，然后更新列表，而后安装合适的程序。这一切对于初学者非常不友好，所以debian还有一种gnome标准安装包，在光盘上放了建立一个标准系统所需的所有包。你可以在不联网的情况下，自动建立起一个标准的桌面。
debian的特性是非常强的自我定制，虽然从根本上说，gentoo的定制方式才是极限。但是长期滚动编译对维护而言是一个非常大的挑战(debian的维护方式都会让很多公司感到不舒服)。debian可以很方便的直接定制一个特制化系统，而跳过编译过程。这对于自己需要一定程度定制的高级linux用户非常有吸引力。</description>
    </item>
    
    <item>
      <title>社区的基础规则和原因</title>
      <link>//blog.shell909090.org/blog/archives/1735/</link>
      <pubDate>Sat, 19 Mar 2011 22:03:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1735/</guid>
      <description>1.社区中的常规事务由个人申请，申请到的人全权处理问题。
2.在申请前，需要在社区公共平台呼叫请求。大致类似于&amp;quot;我要做某事了，有没有人在做或者能够提供帮助，请联系我&amp;quot;。
3.如果有人对贡献者所做的工作有异议，可以请求修改或者复议。
4.如果仍旧不满意，可以申请替换贡献者。经过全社区成员投票后就会变更贡献者。
5.如果不能明确归属的事情，或事情本身就比较重要，则由全社区成员投票。
6.如果具体操作者在不确定做法的时候，可以发起讨论和投票，获得社区意见。
为什么社区通常具有以上工作模式？
首先，社区的原则是自愿。通常社区是不会为个人的工作支付薪酬的。因此，谁愿意做什么事情，做到什么质量，完全是不可控制的。这也就是为什么社区事务是由个人申请的，因为并不能向社区中的具体人员指派工作。当一个问题比较严重的时候，也只能由资深社区人员呼吁有没有人志愿解决，而不能强行分派。这是社区为各个软件公司所诟病的特性之一。
为什么申请前需要在公共平台呼叫请求？这样首先防止了工作冲突。尤其是上游发行一个新包的时候，如果没有呼叫请求(debian社区好像叫做ITP)，就会出现两个打包者重复工作的问题。其次，如果前任因为某些因素放弃了继续处理，也许他能给你一些额外的帮助。尤其是兼容性问题上的帮助，这样比较有助于保障一致性。
为什么通常事务由申请到的人全权负责？因为一个事务会牵涉到非常多和复杂的细节问题。例如一个包的临时文件位置是使用/tmp还是/var/tmp，依赖库是使用gcc4.1还是gcc4.4。这些细节问题要一一搞定，社区没有那么多时间。如果志愿者是个熟练的人，往往问题的决策会采用比较通用的方案，社区会无条件接受志愿者的方案。当志愿者的方案比较糟糕，或者至少说有待推敲的时候。如果有人用的不爽，就会提出异议，或者更进一步提出解决方案。如果没人关心，那就让他去了。
为什么对于仍旧不满意的问题，只能替换贡献者，而不能强迫贡献者接受方案呢？因为，上文阐述了，贡献者是出于自己的自愿，来帮助社区的。强迫他们接受某个他们所不习惯的想法首先并不尊重他们，招致他们的强烈反感。其次，这些方案可能扰乱他们的工作思路。所以从这个角度来说，当志愿者愿意接受你的方案时自然好说。而如果万一他不接受，要使得自己的想法实现只有让全社区基本同意，你，或者其他人接替这个志愿者的部分工作。
为什么社区在决定性的问题上，采取贡献者民主投票的方式呢？因为，如前我们看到，社区的发展是每个贡献者提供自己的力量共同发展的。这样的社区一定会有不协调的情况。而让冲突升级，导致社区分裂，是不利于社区发展的。可以看到，社区是要讨好贡献者的。更多，更强力的贡献者，社区就能够有更好的发展。所以，采取民主投票的方式，是征求最多贡献者的同意，让他们支持社区，愿意继续为社区作出贡献。并且期待不同意的贡献者，能够理性的作出一定妥协，接受社区的大多数意见。
当然，由于意见未能统一而倒置社区分裂的情况常有发生，尤其是社区同时拥有两位强势的领导的时候，并且他们的意见碰巧相左的时候。但是在大多数时候，贡献者会考量，自己是否值得为了某个意见放弃整个社区。考量的结果往往是接受社区的结论，但是保留自己意见。这种行为会保留社区中最多的人，并且可以期待剩下的人能够接受。这一原则，我们称为&amp;quot;尊重大多数贡献者&amp;quot;。而社区中，部分事物自主可决定的规则，只是因为社区假定你的行为会被大多数贡献者接受。
我们可以看到，社区在发展中采取了很多自主判断假设和市场机制。社区需要假定你的行为是被大多数贡献者所能接受的。社区假定你能够分辨什么是&amp;quot;比较重要&amp;quot;的事情，从而需要征求多数意见。什么是你不需要劳动社区帮忙的事物。在正常的世界中，我们的假定通常都是成立的。debian社区大部分打出来的包并没有人提出异议。对于社区中文名定名或者下一开发版代号之类的问题，通常也是社区协商确定后再行处理的。因此，我们的社区通常工作良好。但是在某些特例下，例如有人无法理解什么问题是重要问题，哪怕大多数的人对这个问题的认识并没有困难。或者，更进一步说，有人捣乱。在这些特例下，社区往往会陷入一种比较混乱的状态。国外经常有所谓&amp;quot;民主效率低于专制&amp;quot;的结论，就是这个现象的集中爆发和体现。</description>
    </item>
    
    <item>
      <title>debian社区争论摘抄</title>
      <link>//blog.shell909090.org/blog/archives/1731/</link>
      <pubDate>Fri, 18 Mar 2011 21:12:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1731/</guid>
      <description>jobinson &amp;lt;jobinson99@gmail.com&amp;gt;
强烈反对这种所谓的尊重说
1、这是人身攻击，攻击他人人品，不是在认真讨论问题
2、我并没有违规。我的作为，是符合debian维基本身规则的，如果这样你还认为我违反规则，不尊重别人，那么，首先的问题就是你拉大旗扯虎皮，把你的个人观点强加在整个debian社区之上，这才是更大的不尊重社区。
也就是说，在目前维基规则未变的情况下，我并没违规，上面几个认为我不尊重人的人，其实才是真正的违规者。
3、请不要以贡献来论我的对错，这是道德绑架，虽然我对debian目前官方社区的贡献有限，但在其他地方的贡献，请不要在不清楚的情况下肆意抹杀，然后试图以玩道德绑架的方式让我闭嘴。
4、单纯讲翻译问题，debian社区确实太多文档老久了，以至于我都不知道debian中文翻译团队是否活着，这是谁的问题？如果按贡献论，是不是原有社区的人都该被论罪？这显然会激起众怒，如果楼上认为贡献论可行，那么接下来激怒社区的责任楼上要负全责。
5、如果debian是世界性的，那么debian就应该容纳得了中文、英文、德文、日本、西班牙文……，而不是只能使用英文。现在这种情况，连个中文名都起不了，还谈什么世界性，简直就是狭隘英文中心主义。
6、请不要回避问题，老左躲右闪的，以贡献啊、尊重啊、其他更需要啊之类的来搪塞对问题的真正讨论。要不干脆关闭这个讨论，要不就不要躲躲闪闪，认真对待。
还有，就是存在众多莫名其妙的所谓公认规则，结果一认真，才发现不过是个人意见，强加给这个社区的，这样的个人规则，请不要再秀出来，这才是真正对社区其他人的极大不尊重！
其实，我也不想纠结在这些名词上，但如果连这么个名词都容纳不下，我不觉得还能容纳下什么别的东西，我不知道英文社区是否也是如此。
Aron Xu &amp;lt;happyaron.xu@gmail.com&amp;gt;
2011/3/17 jobinson &amp;lt;jobinson99@gmail.com&amp;gt;
&amp;gt;
&amp;gt; 强烈反对这种所谓的尊重说
&amp;gt; 1、这是人身攻击，攻击他人人品，不是在认真讨论问题
也许有些人的话确实说的不怎么恰当，这是说话人的问题，呵呵。
&amp;gt; 2、我并没有违规。我的作为，是符合debian维基本身规则的，如果这样你还认为我违反规则，不尊重别人，那么，首先的问题就是你拉大旗扯虎皮，把你的个人观点强加在整个debian社区之上，这才是更大的不尊重社区。
&amp;gt; 也就是说，在目前维基规则未变的情况下，我并没违规，上面几个认为我不尊重人的人，其实才是真正的违规者。
你的操作没有违反权限（否则没权限你无法编辑），但是违反了在社区活动的一条基本准则：做自己的事不要给别人带来麻烦。现在你私自改了东西就给很多人带来了麻烦。
像项目名称这样重大的决定应该是团队的共同意志，如果你直接不经说明就私自改了，那么你忽略了其他人的意见，这的确是不尊重他人。社区中不是你有权限编辑的地方就可以随意编辑，赋予你权限是对你的信任，相信你能够和其他人好好地合作，共同把项目做好。如果说有了权限就觉得自己什么都可以做，那就辜负了社区对你的信任。
3、请不要以贡献来论我的对错，这是道德绑架，虽然我对debian目前官方社区的贡献有限，但在其他地方的贡献，请不要在不清楚的情况下肆意抹杀，然后试图以玩道德绑架的方式让我闭嘴。
何必把这个问题升级到对与错呢（大家都停止说这个对错，^_^）。我觉得只是你做事方法不对，现在不应该在这里讨论这个名字如何如何，而是尊重大家的意见暂时不使用它，并且通过主流媒体做出更正。
昨天我联系 cnbeta.com 等两三个站点删除了文章，LUPA等社区还发了一些更正。希望大家能到 cnbeta 等地方投稿更正这个事情。
4、单纯讲翻译问题，debian社区确实太多文档老久了，以至于我都不知道debian中文翻译团队是否活着，这是谁的问题？如果按贡献论，是不是原有社区的人都该被论罪？这显然会激起众怒，如果楼上认为贡献论可行，那么接下来激怒社区的责任楼上要负全责。
Debian 文档翻译在 Squeeze 周期里没有怎么更新 installation-guide，重译了 maint-guide。网页翻译匆匆地赶出来了一个 release-notes。
如果你要参与，非常欢迎，这个团队现在可以说基本只有个别人做零星贡献。自由软件社区里，每个人都是自由的，行为上第一条是不给别人捣乱，第二条是交接好工作。翻译上一直没人接手，如果谁愿意来可以到这里先询问一下情况——比如你现在问，这个团队是否活着。
5、如果debian是世界性的，那么debian就应该容纳得了中文、英文、德文、日本、西班牙文……，而不是只能使用英文。现在这种情况，连个中文名都起不了，还谈什么世界性，简直就是狭隘英文中心主义。
这种说法有些偏激，和中国中央电视台不能称为CC{T,A}V有一拼了（笑）。当然，Debian和中文名之间并非完全和CCTV那个情况相同。
Debian不是不能有中文名，而是现在还没有让众人觉得确实最好的名称。过去常说的&amp;quot;大便&amp;quot;显然不雅，&amp;ldquo;蝶变&amp;quot;某种意义上讲是个不错的候选，但还是有很大反对的声音。
不管好与不好，想出来的都是&amp;quot;候选&amp;rdquo;，不能直接改 Wiki 强迫别人接受你的意志，哪怕你解释说只想做个实验。
这样的实验是不合适的，就好像说某国核电站出了问题，事后说我只想实验它出了问题能有多大影响，这显然不对。
6、请不要回避问题，老左躲右闪的，以贡献啊、尊重啊、其他更需要啊之类的来搪塞对问题的真正讨论。要不干脆关闭这个讨论，要不就不要躲躲闪闪，认真对待。
其实讨论能展开这么久，你回避了最关键的问题。现在是你做得不对，未经讨论滥用了社区赋予的权限，为啥还在说别人呢。
争论的话说多了，谁都可能说出赶劲的话，这时候大家坐下来喝杯茶冷静下，呵呵。
还有，就是存在众多莫名其妙的所谓公认规则，结果一认真，才发现不过是个人意见，强加给这个社区的，这样的个人规则，请不要再秀出来，这才是真正对社区其他人的极大不尊重！
这确实是公认的规则，难道赋予你的权利不是给你的信任吗？如果说，必须要精细地管着你的权限才舒服，那我在这里无话可说。可以随意编辑的分到一类，不可以随意编辑的再分到一类并锁定，我觉得那时候会有人大叫不公平。
其实，我也不想纠结在这些名词上，但如果连这么个名词都容纳不下，我不觉得还能容纳下什么别的东西，我不知道英文社区是否也是如此。
不想纠结就不说这些，赶快把给大家造成的麻烦处理掉。如果你想讨论社区的规则是怎样的，社区怎样才有包容性，再单独发主题，有兴趣的人会愿意和你讨论三百回合。:P
Tao Wang &amp;lt;dancefire@gmail.com&amp;gt;
说你不尊重社区，你还觉得有错了。还什么这论，那主义的，还论罪，我怎么恍惚觉得倒退了几十年，又看到了满眼红色的世界？
真是莫名其妙，看看jobinson都干了些啥：
http://www.udpwork.com/item/4522.html
http://www.freebsdchina.org/forum/topic_51353.html
http://www.freebsdchina.org/forum/topic_51346.html
http://zh.wikipedia.org/w/index.php?title=Debian&amp;amp;diff=15902934&amp;amp;oldid=15830869
http://zh.wikipedia.org/w/index.php?title=Linux&amp;amp;diff=15963993&amp;amp;oldid=15926795</description>
    </item>
    
    <item>
      <title>debian中文名的争议</title>
      <link>//blog.shell909090.org/blog/archives/1729/</link>
      <pubDate>Tue, 15 Mar 2011 17:31:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1729/</guid>
      <description>最近在debian社区上爆发了关于debian中文名问题的争议，我大致摘录一下，具体可以看debian maillist archive。毕竟这里不是wiki，我就不求全了。
起因是因为Jobinson在社区未达成一致的前提下，将wiki中debian的中文名称改为了&amp;quot;蝶变&amp;quot;。而后，wenheping告知了LIDaobing。后者是DD。LIDaobing将wiki还原，并且发起了社区讨论。他们之间的原文贴录如下：
(03:37:51 PM) Atlas Jobinson: 我想问你个问题，你是什么时候知道这维基被改的？通过什么途径知道的？ (03:38:01 PM) LI Daobing (李道兵): 很晚 (03:38:11 PM) LI Daobing (李道兵): 因为我没有 subscribe 那个页面 (03:38:22 PM) LI Daobing (李道兵): wenheping 告知的 (03:38:29 PM) Atlas Jobinson: 你可以看看我最早翻译于什么时候 (03:38:37 PM) LI Daobing (李道兵): 看到了 (03:38:40 PM) Atlas Jobinson: 2011-03-04 (03:38:42 PM) LI Daobing (李道兵): 10天前 (03:38:52 PM) Atlas Jobinson: 那说明什么问题？ (03:39:06 PM) LI Daobing (李道兵): 说明你在没有取得社区共识前 (03:39:09 PM) Atlas Jobinson: 还有，那个wenheping，是我在freebsd上得罪他了 (03:39:12 PM) LI Daobing (李道兵): 就修改了 wiki 页 (03:39:23 PM) Atlas Jobinson: 错，说明debian中文的参与者都不关心 (03:39:30 PM) LI Daobing (李道兵): 罗伯特议事法则 (03:39:34 PM) Atlas Jobinson: 连被人改了都不知道 (03:39:38 PM) LI Daobing (李道兵): 不要追究动机 (03:39:47 PM) LI Daobing (李道兵): 我们关心的是 ibus, fcitx, scim 的 bug (03:39:50 PM) LI Daobing (李道兵): 不是这个 (03:40:04 PM) Atlas Jobinson: 是，我也更关心那些 (03:40:27 PM) Atlas Jobinson: 但实际上，这个修改已经过了十天，才有反应，都快两周了 (03:40:35 PM) Atlas Jobinson: 快成既定事实了都 (03:40:44 PM) LI Daobing (李道兵): Debian 的运作不需要 wiki (03:40:45 PM) Atlas Jobinson: 那假设我在其他地方修改呢？ (03:41:05 PM) Atlas Jobinson: 那你还那么看重维基的修改？ (03:41:08 PM) LI Daobing (李道兵): Debian 的核心在于打包人员, DM, DD, ftp-master (03:41:13 PM) Atlas Jobinson: 我知道 (03:41:15 PM) LI Daobing (李道兵): 那是错的 (03:41:17 PM) LI Daobing (李道兵): 我知道了 (03:41:23 PM) LI Daobing (李道兵): 我去纠正他 (03:41:28 PM) LI Daobing (李道兵): 仅仅如此而已 (03:42:02 PM) Atlas Jobinson: 如果两周是个争议期，恐怕这两天我都不会让你安心的，呵呵 (03:42:42 PM) LI Daobing (李道兵): 我真不知道你能跟谁合作 (03:42:53 PM) Atlas Jobinson: 我仅仅是表达意见 (03:43:21 PM) LI Daobing (李道兵): 你为一个社区做贡献是因为你认同这个社区的理念 (03:43:29 PM) Atlas Jobinson: 而且这手段是合理的，并没有在规则外。 (03:43:56 PM) Atlas Jobinson:但谁能说他认同的观点就是该社区的观点呢？比如说debian不需要炒作？ (03:44:03 PM) Atlas Jobinson: 这是光晕效应 (03:44:14 PM) LI Daobing (李道兵):如果你不认同这个社区的理念，个人建议还是创建自己的社区比较好 (03:44:30 PM) Atlas Jobinson:可能你认同其他观点，但这个观点很可能是你个人观点强加给社区的 (03:44:33 PM) LI Daobing (李道兵): 比如在 维基百科 (03:44:55 PM) LI Daobing (李道兵): 如果这个观点有问题，你可以在 maillist 上讨论啊 (03:44:59 PM) LI Daobing (李道兵): 有何不可 (03:44:59 PM) Atlas Jobinson: 因为我没在debian社区中找到这一条 (03:45:14 PM) Atlas Jobinson: 也没人公开宣称这一条 (03:45:21 PM) LI Daobing (李道兵): 如果这个观点有问题，你可以在 maillist 上讨论啊 (03:45:55 PM) Atlas Jobinson: 那么，此条很可能就是你自己过于想当然的想法。 (03:46:08 PM) Atlas Jobinson: 观点是你的，是你应该发起这个讨论，而不是我 (03:46:21 PM) LI Daobing (李道兵): 好的 (03:46:42 PM) LI Daobing (李道兵): 我直接把这些聊天记录发到 maillist 吧 (03:46:46 PM) Atlas Jobinson: 而你不也是没经过讨论就宣称：debian不需要炒作的么？你这不也首先违规在先了？ (03:46:49 PM) LI Daobing (李道兵): 你订阅了 maillist 么？ (03:46:59 PM) Atlas Jobinson: 我刚刚订了 (03:47:02 PM) LI Daobing (李道兵): OK</description>
    </item>
    
    <item>
      <title>hack comix for windows use gbk as filename code</title>
      <link>//blog.shell909090.org/blog/archives/1727/</link>
      <pubDate>Mon, 14 Mar 2011 09:44:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1727/</guid>
      <description>Comix is a python application to view comic. it use pygtk as GUI library, so technically, it can be used under windows. But unfortunately, it has code problem under windows. OK, 2 fix it, open src/filechooser.py:214.
gbkpath = paths\[0\].decode(&#39;utf-8&#39;).encode(&#39;gbk&#39;) self.\_window.file\_handler.open\_file(gbkpath) done.</description>
    </item>
    
    <item>
      <title>linux社区规模估量</title>
      <link>//blog.shell909090.org/blog/archives/1725/</link>
      <pubDate>Sun, 13 Mar 2011 11:25:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1725/</guid>
      <description>debian是一种重要的linux发行，基于其上有很多衍生，其中最知名的就是ubuntu。debian的包是通过ftp mirrors来进行发布的，因此一个国家的镜像数量，大概能够反映出这个国家debian社区的规模。也大概的，能够说明这个国家开源软件社区的发展。
debian的所有官方镜像有一个列表，具体在这里（http://www.debian.org/mirrors/list）。我利用wget下载了这个镜像，然后写了一个简单的脚本来处理这个文件。文件发布在这里(http://blog.shell909090.org/debmircnt.py)。以下是结果。
United States 48 Germany 32 France 28 Taiwan 13 Australia 12 Japan 11 Great Britain 11 Canada 11 Portugal 9 Italy 9 Russia 8 Sweden 8 Spain 8 Czech Republic 8 Brazil 8 Austria 7 Bulgaria 7 Poland 7 Turkey 7 Netherlands 7 Hungary 5 Greece 5 Ukraine 5 Belgium 5 Thailand 5 Croatia 4 Finland 4 Lithuania 4 South Africa 3 Romania 3 Switzerland 3 Denmark 3 China 3 Korea 3 Slovakia 3 Latvia 2 India 2 Mexico 2 New Zealand 2 Indonesia 2 Chile 2 Slovenia 2 Iceland 2 Belarus 2 Israel 2 Argentina 2 Ireland 2 Nicaragua 1 Colombia 1 Uzbekistan 1 Kazakhstan 1 Estonia 1 Luxembourg 1 Moldova 1 New Caledonia 1 Hong Kong 1 Bosnia and Herzegovina 1 Venezuela 1 El Salvador 1 Singapore 1 Algeria 1 Norway 1 French Polynesia 1 Costa Rica 1 Malta 1 Bangladesh 1 360 这个列表有几个有趣的数据。首先是中国的排名，不算太差，三个镜像，在第30名上下，比香港的一个镜像好多了。不过考虑到香港的人口和中国的人口，让人有点笑不起来。其次是俄罗斯的排名，以8个镜像居于11位。这也不难理解，因为俄罗斯不使用英文，所以在俄罗斯流行的不是常见的英文发行版本。德国比法国多出四个镜像居于第二位，美国是debian的发源地，以48个镜像的惊人数量居于第一。世界全部镜像是360个，光是前三位的镜像数量就占了将近三分之一。台湾地区以13个镜像居于第四，这到让人很是意外，居然比日本还多。</description>
    </item>
    
    <item>
      <title>关于日本地震，关于人性</title>
      <link>//blog.shell909090.org/blog/archives/1723/</link>
      <pubDate>Sat, 12 Mar 2011 15:01:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1723/</guid>
      <description>说人性有点大了，其实这里没有什么该不该对日本幸灾乐祸，或者幸灾乐祸者就OOXX的道德讨论。只是说说我和我周围的人在几次大事中的反应。但是说到底，也没什么好的词，只能用人的本性来形容。
我第一次有意识的观察人们对无预知的大型公共事件的反应，是在汶川地震发生的时候。当时我在一家报社内做项目，看到周围有几个人跑了一下，也没有在意。过一会，QQ新闻跳出来，说四川发生地震，目前情况不详。我稍微提了一下这个事情，周围的人没有震感，就随便他去了。但是当晚据说就有几个记者去了四川，剩下的人也可以看到神情兴奋。是的，兴奋，而不是悲痛。说不上是高兴，但是兴奋之情是难以掩藏的。
第二次是智利地震，这次我在上海一家公司里面做事，一楼。新闻出来后，大家都是一脸笑嘻嘻的说，地球是不是进入震动模式了。然后地震伤亡数字出来了，大家看看，哦，死的真少，比汶川少多了。然后就散了。
第三次是日本海地震，这次还是这家公司。大家先也是笑嘻嘻的说地球进入震动模式的笑话，然后听说震源在海上，就纷纷去查海啸的问题。结论是上海一点事都没有，于是也就这样了。日本地震，中国历来是不发动官方捐款的。最多就是几个国家部门的领导象征性捐款一下。
也许有人该愤怒了，那是人命阿，你们怎么都笑嘻嘻的？实际上，这就是我想说的东西。人对于不关系到自己和自己熟悉的人的危害，不可能在第一时间有发自内心的焦急。对于在危害中死去的人，也不可能有发自内心的悲痛。除非他本人也深受其害。这是人之常情。如果你告诉我，印尼海啸，你在那里完全不认识什么人，甚至都不知道那个地方在哪里，就第一时间的发自内心的表示焦急和悲痛。我说，要么你是世界第一的圣人，要么你是世界第一的装逼犯。当然，曾深受其害者和各国领导人例外。
遇到突发灾害，人的第一本能反应，无一例外，都是兴奋。其实从生物进化角度不难理解。如果人类在突发的灾害面前不能保持高度的兴奋，来应对各种情况。人类早就因为适应不良而被自然淘汰了。因此在听到地震的消息时，神情兴奋的东问西问是正常反应。不是幸灾乐祸，也不是杞人忧天，而是正常的人类反应。如果灾害不会危及自己，过一会就淡了。如果灾害可能危及自己，会优先考虑自己怎么避难。当兴奋过去后，才会考虑是否应当对受害人有所表示，如何表示的问题。</description>
    </item>
    
    <item>
      <title>个人文件管理的几个经验</title>
      <link>//blog.shell909090.org/blog/archives/1721/</link>
      <pubDate>Thu, 10 Mar 2011 13:39:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1721/</guid>
      <description>1.明白你在面对什么问题。个人资料管理，永远是可靠性和价格的双重难题。廉价方案就不可靠，可靠方案就不廉价，因此弄明白你自己需要的是廉价还是可靠。作为如果你的选择是可靠性，就要假设明天电脑就坏了。任何设备在损坏之前都是不会打招呼的，因此现在立刻就行动。
2.由上文引出的第一个建议，区分高可用资料和非高可用资料。通常而言，我们有很多资料，林林总总一大堆。但是其中有一些是丢失了虽然心疼但还可以接受，另一些则是无法接受，往往要搞到去数据恢复中心的地步。与其如此，不如提前区分高可用资料和非高可用资料，尤其注意区分“你的资料”和“你下载的资料”。通常一个人的核心资料应当小于100G（我假定你不会比我更变态），如果你有大量录像资料要备份不在此列，以下的高可用方案也对你不适用。
3.文件的管理方法，区分大类，放弃小类。通常我们的文件管理都有随意性，每个人都有不同的文件放置习惯。建议对文件区分以大类，而放弃细节的文件夹分类。人类在区分大的类别上往往比较恒定，也比较节约时间，在细节分类上越向下越费时。通常我们对歌曲区分男歌手女歌手团体外文等非常容易，但是要细分某个歌手就比较困难了，要精细到某张专辑绝对会花费大量时间。然而人类在寻找东西时的难度，和总体规模大致成正比。为了减少一点复杂性而花费大量时间是一个非常不值得的事情。
区分大类的另一个理由，则是大类的区分经常关系到高可用和非高可用，高安全和非高安全。贝壳的分类中，几个类别的资料全是要求高安全性的，另几个类别则全随便。
4.文件的管理方法，文件名标识，运用搜索。文件管理的第二个建议，就是别用分类来查找文件，使用搜索。windows下肯定是everything，linux下可以用mlocate。通过将内容反映在文件名上，对文件进行管理。在需要用的时候搜索文件名，远比你整理所有文件来的省事。至于上面区分大类的建议，则是事关下面高可用数据的解决方案，所以还是要做的。
5.磁盘的稳定性研究。磁盘能稳定使用多久？贝壳听到最倒霉的记录是7个月，最长纪录是10年。但是通常来说，6成的硬盘会在3-5年内损坏。因此一旦硬盘使用超过3年，就处于临界状态，坏了也不要觉得奇怪的。对于临界状态的硬盘，建议采用SMART监控软件，随时保持监控异常。对于硬盘上发生过循环冗余检查错误，复制死机，文件读取错的，尤其要重视。
5.磁盘的分区方案。很多人拿到硬盘，就先分上三四个驱，好像不分区不专业似的。其实分区是上个世纪FAT文件格式留下的传统，作为NTFS而言完全不必分区，甚至分区是有害的。FAT在不分区的情况下最高只能使用4G硬盘，VFAT方案下windows也只能使用32G的硬盘。因此对于大硬盘都必须分区使用。NTFS最高能使用4T的硬盘，我想个人是用不到这么大的硬盘的，因此完全可以将所有磁盘都分为一个区。这样主要是空间互通，减少对一个磁盘区域的反复使用。同时，在一个磁盘空间不足时不用反复移动文件凑空间。但是对于C盘（系统盘）建议分区安装。这样便于不擦除数据的情况下重装系统。当然，这种情况仅限于windows，linux要重装系统是没必要擦除数据的。不过我仍旧建议/home和/分别安装，因为两者的读写乃至管理特性都相差很大。
6.数据量控制在60%-80%之间。太少的数据会导致利用率过低，而太多的数据则导致存储快速碎片化。windows的磁盘碎片整理程序在空间小于15%的情况下是不工作的，ext3也有类似的问题（低空间下的高碎片化）。
7.因为上文的原因，因此区分普通数据和可抛弃数据。有一些数据，我们总是不确定将来是否会有用，现在删除又太可惜。可以将这些数据集中起来加上标记，命名为可抛弃数据。硬盘空间低于60%的时候尽管留着。一旦空间波动超过80%，就开始丢弃可抛弃数据。
8.个人不要用RAID0。因为使用条带技术，RAID0的时候，如果一个磁盘损坏，则整个卷都没救了。即使另一个磁盘完好无损，数据也是基本拿不回来的。对于两个磁盘的情况，建议你将两个空间分为两个盘，其中一个设定为临时文件存放和非高可用文件存放位置，挪挪空间还是能凑合管理的。同时，我也不建议个人使用LVM，LVM2，活动硬盘之类的高级磁盘管理技术。主要问题是磁盘一旦损坏，剩余盘拿到其他系统上几乎如废物一般，要拯救起来非常困难。
9.RAID1必须打开数据非同步提示。这个原因如8所说，如果你没有打开数据的非同步提示，你根本察觉不到其中一块硬盘已经失效。这个时候往往会发生第二块硬盘级联失效（因为压力集中），这样的RAID1方案就退化成了一点好处都没有。
10.高可用资料的方案——移动硬盘。你的高可用数据是我们真正要管理的目标，哪怕其他资料都损坏，必须保证核心资料的可恢复。通常由于核心数据并不很大，因此我建议用移动硬盘作为核心资料的承载方案，数据在移动硬盘和主硬盘间定时同步。对于频繁修改的文件，建议在两个电脑上进行同步，乃至使用版本管理系统管理和同步。移动硬盘的一大好处就是随身，因此往往和主电脑分离存放。即使你主电脑出现问题，例如被偷走，移动硬盘内的数据往往也没有问题。
11.移动硬盘引入的问题，加密。一旦使用移动硬盘方案，就意味着任何人都可以接触到你的资料。这是一个非常难办的问题，所以你可能要加密数据。我建议不要使用EFS作为数据加密方案，因为EFS的密钥保存在当前用户帐户内，备份和管理比较复杂。我建议两种加密方式，一种是AxCrypt，一种是TrueCrypt，后者比前者更强更复杂一些。前者是针对某个具体文件进行加密的，后者会直接虚拟出一个磁盘来加密，因此更加复杂。然而一旦将数据加入后者的磁盘后，就真的一点痕迹都不留了。不过需要提醒的是，由于磁盘上的数据并不能真正的被擦除，因此一旦数据进入磁盘，在虚拟文件内所占的空间就固定了。即使删除文件也无法收回空间，这给管理带来了困难。
11.高可用的一种备用方案，使用大型硬盘（1T以上）复制然后冷盘存放。这种方案的好处就是稳定性很高，四年前的大型硬盘已经超过500G，足够存放下你所有的数据。由于不加电，因此安全存放五年以上是没问题的。但是建议也不要太长，即使不加电，随着时间推移，硬盘还是会出问题的。当然，与之相应的就是成本高，管理不方便。你多花了一个硬盘的钱（虽然我觉得和保存数据相比还算廉价），但是又不是随时能使用这些文件。
12.高可用的误区，刻录光盘。光盘是数据最大的敌人。我们计算硬盘的存放成本，2T大概700，1T400不到，大约是0.35-0.4元/G。DVD的存放成本大约是，一桶50张的卖70，大概0.32-0.35元/G，成本非常相近。光盘存放三到</description>
    </item>
    
    <item>
      <title>debian under box</title>
      <link>//blog.shell909090.org/blog/archives/1719/</link>
      <pubDate>Mon, 07 Mar 2011 09:43:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1719/</guid>
      <description>This is linux tech blog, so&amp;hellip;猫咪和六牙四皂小姐退散。
下面简介一下小型系统组装NAS和服务器的完整攻略。实话说这篇文章写的异常艰难，题目本来叫debian squeeze under EPIA。结果一晃过了一个春节，debian升级了，EPIA挂了。下面前一部分的文章是开始写的，后来发现M10000系列主板只要上sata to ide就会死机，部分IDE硬盘也会死机。所以&amp;hellip;
首先是物理硬件的组成办法。推荐购买VIA EPIA M10000，价格大约在150上下。附带了VIA C3 Eden，只要一条内存就可以工作，非常便宜。不过USB引导有些问题，所以后面用的是其他机器装的Linux，并且给折腾了个半死。贝壳还买了一个小机箱，能够放置3.5&amp;rsquo;硬盘，并且买了1T的硬盘来组装NAS。由于1T的硬盘只有Sata接口，因此还得买一块Sata to IDE，大概是30-40。全部的硬件就是这样，组装起来就可以工作。主板的右下角是主板控制跳线，从左（以CPU和电源所在边为上）到右顺序，引脚如下定义：上排2-3，power sw。上排4-5，reset sw。上排6-7，power led。
首先借助一台大型机，使用USB开始debian系统的安装。另外补充说明一下USB安装debian一文中的一个情况，在boot.img.gz解压开的U盘内复制入netinst也是可以工作的，不一定是businesscard。按照这个估计，复制入完整ISO也是可以的。在分区的时候，贝壳选择了full disk with LVM。/boot分配了228M，最后用了17M。root用LVM中的ext3卷，分配了7G，用了不到1G。全部装好大约有2G吧，安全起见。swap用了2.5G，其实不用这么大，不过我懒得换了。剩下908M，因为1T有一定损耗，还有JS的1000进制算法。。。好吧，全部用ext3放到/home下放数据用。
之所以没用btrfs的原因，一方面是这个是硬盘，不是ssd，也没有高等数据管理要求。另一方面也要求一定的稳定性，btrfs还没有fsck呢。
系统安装并没有什么太大困难，对于熟悉linux系统安装的人，很快就可以完成安装。不过由于是在其他机器上安装，因此注意在迁移后需要修改/etc/udev，把网卡修改为eth0。
下面就是大头了，系统使用grub2引导，但是在booting kernel这里直接挂掉，完全起不来。问过gary后，基本肯定要么是主板坏了，要么是内核坏了。后来我猛然想起，C3是个老CPU了，我用的内核是686内核。改为486内核？顺利引导。
EPIA edin C3 just support i486 Instruction Set, so don&amp;rsquo;t use linux-image-.*-686。
系统启动后，发现速度并不很快。我用samba和windows共享文件，大约只有7M/s的读写速度，消耗了60%的CPU。我使用的是TP-504G+路由器，后面是一个100M的交换机。EPIA是VT6102，10/100M自适应网卡。主机是1G的网卡——不过没任何用。理论上，最高读写速度应该有12M/s的。实际上根据我的测试，瓶颈居然可能在windows上。我在windows复制文件的时候从box上读取数据，居然对复制没有影响的情况下达到了2M的速度。这样的速度远远低于硬盘30M/s的持续读写速率，所以硬盘效率不用顾虑太多，包括碎片问题。
当我发现sata的问题后，使用iozone确认了问题在udma层面上。杯具的是，这问题无解。所以，退了主板换了一块新的。新主板上去后，性能有所升高。硬盘的吞吐到了97M/s，网络共享的读写速度大约是10M/s。其余都很顺利，就不废话了。</description>
    </item>
    
    <item>
      <title>版权和道德的讨论</title>
      <link>//blog.shell909090.org/blog/archives/1716/</link>
      <pubDate>Fri, 04 Mar 2011 10:26:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1716/</guid>
      <description>某个朋友在做一个文档共享网站，需要一些文档。我建议他去抓取wikipedia的数据作为初始文档，他很惊讶的问我，那个可以么？
谢天谢地，总算碰到一个有点常识的人。我告诉他，wiki使用的是CC协议。只要他将数据抓下来后，注明数据来自wikipedia，是完全符合版权协议的。按照他们最近的情况，要是你肯赞助一笔，并且承诺按照CC协议来，说不定wikipedia还会奉送打包好的资源。相反，他做的这个网站在别处出事的概率到更高一些。他反问我，出什么事情呢？
那就很多了。例如，某个人上传了一个带版权的内容，并且因此获利了。在事发后，带着赚的钱失踪了。那么网站是否要承担责任呢？他说有协议，我问，你们的协议可以对抗第三方么？有人偷了东西，把东西卖给废品站，人消失了。废品站拿着协议大喊，我们签过协议，他承诺这东西不是偷来的，应当被认可么？协议其实什么都不能证明，连你没有盗用版权的故意也无法证明。要证明你没有盗用版权的故意，你必须有一定的核查行为，检查你的内容版权问题。但是这是几乎没法实现的，这也是所有web2.0网站所面临的公共难题。就是说，只要你允许用户上传内容，就几乎无法避免版权问题的指责。
还有，如果别人再复制你的内容呢。他说打官司咯。我说真打官司就脑残了。如果对方在上海还好说，如果对方在北京，根据中国法律，这种官司归侵权事故的发生地管辖。就是说，你得去北京起诉。光是你去北京数次沟通的费用就比对方的侵权赔偿还大。而且中国的国情是发生这种事情的公司绝对不是一家，起诉到判决的时间往往也不止一年。你官司没打完呢，网站就先倒闭了。如果这种事真的官司能解决，腾讯早就赔到死了。
同样，回来上网，看到刘慈欣很生气的说，有个人在百度贴吧里面说，自己已经看完了三体III，准备手打一份贡献给大家。要光这点也就算了，刘慈欣跑上去说话还很猖狂的骂人。我看到这里就不禁很无语，虽然看盗版书这种事情我也干，但是至少我知道这是错的。要是有个好点的渠道给作者点钱，我到不介意付费。但是，一，不要买纸质书，现在家里书山书海，没地方放您的一摞纸，二来也不环保。三就是一次购买，我需要这本书的各种载体都不再付费。不能我花钱买了一次epub，回头txt或者pdf就要我再付费，这可不干。问题是，怎么有人（而且不是一个）没感觉到，免费看书是错的呢？
说到这点，我就想起个老外，上海的DD之一的zigo。上次他在debian打包讲座上说到，Ubuntu开Ubuntu Store，他觉得这个很恶心。LiDaoBing就问他为什么，是因为收费么？他说不是，因为Ubuntu用了很多Debian的包，但是又不承诺免费。LiDaoBing就很门清的和他说，这个完全符合版权协定啊。Debian有dsfg承诺，Ubuntu可没有。zigo就说，我知道，所以我说很恶心。当然，可能因为他也是Debian的打包者，也可能是因为Debian的维护者在版权问题上都比较敏感和激进。但是我接触的大多数老外对于一个内容是合法使用还是非法使用都是比较关注的，哪怕他们买盗版光盘，也至少要关心一下这个内容是真的盗版了，还是合法资源的集合。
说到这里，我觉得，这种问题应当是每个中国人的问题。我们往往知道理论上什么是对的，但是却完全不屑于理论，还和别人争辩理论是没用的。道理上说，我们知道不应当看别人的版权内容。道理上说，我们知道，版权经常有问题的网站应当被抵制。乃至于道理上说，我们不应当用盗版windows，我们不应当砸别人的车，我们不应该收红包，我们都知道。但是在操作的时候，我们用盗版，不但堂而皇之，而且可以找出无数理由。支持国产啦，损害外国公司利益啦。我们砸别人的车，也有无数理由，抵制日货啦，支持国货啦。我们在做的时候，用的是我们自己的一套规则，或者说潜规则。所谓理论上的东西，只是拿来找说法的。自然，说法这东西是随便找的，再多也不怕。
有人选择对这种现象抱怨，但是抱怨不解决任何问题。深谙此道者会从中获利，并且以胜利者的姿态对其他人说教，你们不了解社会。民众会抱怨，但是不是因为整个世界没有公平，正义，乃至美好的道德，而是因为他们在整个体系中没有分得一杯羹。
我们每个人的小聪明，毁坏了我们的整个利益体系。我们没有IT业，因为我们每个人都对电信的不合理行为视若无睹。当电信提供低质量的服务时，当电信无法接入时并且要求你等待24小时时，乃至当电信劫持我们的流量插入广告时，我们说，忍一时风平浪静。当有人站出来，为了他自己，也为了我们所有人而奋战时，我们在后面说两句好话，期待他的成功能让我们一同享福。当对方做出一定让步，承诺给我们一定好处时，我们就对为我们奋战的人置之不理，乃至落井下石。
我们没有软件业，因为盗版不但没有损害国际巨头的利益贴补国人，反而损害了国人的利益贴补国际巨头。金山，一个中国软件业的传奇，上市靠的是网游，而不是单机软件。国内无数的程序员做着外包，也许这还可以解释为人民币对美金汇率的差价。但是无数程序，是由中国程序员写出，却没有中文版。我们宁可花长途话费对老外点头哈腰，也不愿意给同胞改几行代码，因为人家付钱，我们破解。老外的软件仓库中，充斥着免费且强劲的软件，和收费且良好的服务。我们的软件仓库中，充斥着免费的流氓软件和收费的冷屁股。
也许我们无法从购买正版软件做起，或者承诺不上网看盗版书。但是至少，我们应当开始关心我们所说的那些东西，包括版权，包括什么是正确的事情，人和人之间如何制衡来得到正确的事情。也许这是徒劳的，也许一个人的改变无法改变什么，但是当每个人都前行一步时，世界将会不一样。</description>
    </item>
    
    <item>
      <title>招人，招人！</title>
      <link>//blog.shell909090.org/blog/archives/1712/</link>
      <pubDate>Thu, 03 Mar 2011 11:23:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1712/</guid>
      <description>最近帮一个朋友吼招人，发现上海要python程序员的公司真不少。保守估计，有五家以上需要各种python程序员。
我们公司需要一个比较精通系统的python程序员，最好有C/C++能力。有一家朋友的公司是需要python进行测试开发的，说白了就是测试程序员。另两家求靠谱的python web主力程序员，需要熟悉系统，数据库建立和优化，完整的python程序架构和实现。这两家比较打架。最后一家需要python web工程师，能干活的那种。
每个公司的要求和薪资都不大相同，排除掉爬虫，几乎涵盖了整个python领域的方方面面。当然待遇薪水也涵盖了从低到高的整个领域。今年有意思的同学不妨试试运气，说不定能找到你要的工作。
另外就是每个大三快大四，即将毕业的同学。如果你今年开始学python，搞不好明年毕业就可以直接签掉。如果你能搞定整个网站，有数据库优化经验，并且真实的运营过一个网站。搞不好毕业薪水就上五位数。有没有兴趣混一下python社区，靠谱的学上一年？
当然，这里说的，对程序员基本功都有一点要求。昨天还在餐厅洗盘子的，今天跑来学三个月python和django，明天跑过去求职。这一准失败没商量的。你起码应当知道常用系统调用，尤其是os.open和open的区别。应当知道django中如何实现多对多外键，并且将这个外键转化为一个带复选框的表格，再表单提交读出来。知道为什么IE打开网页一切正常，firefox和chrome却每次都让你保存网页而不是显示出来。知道网页在几个浏览器下乱码，而另外几个正常是为什么。知道django给你弹出一个错误，里面说了些什么。知道mysql慢的要死是为什么，还有怎么做。知道数据存入mysql再读出来就全是乱码是为什么。
以上种种，是开发中最常见的一些问题，也是每个开发都会碰到的问题。他们涉及了系统底层调用和封装调用的常识，ORM和表单的常识，http协议的常识，html标准的常识。涵盖调试，优化，运维等方面。
通常来说，比较全才的，经验丰富的主力程序员，我会推荐他们去一些小公司。所谓宁为鸡头不为凤尾，当你在大公司里面做到顶棚的时候，可以试试看在小公司里面主政一方。如果老板赏识，也许还有机会参与期权。这对已经不算缺钱的程序员来说比较有吸引力。而小公司通常没成本来雇用一些比较初级的程序员，又在主力程序员的人选上求助无门，因此往往对主程序员求才若渴。
而刚毕业的同学就不要去凑热闹了。小公司没那么多钱，每个人都要独挡一面。刚毕业的人通常没这个能力，更可怕的是通常不知道自己没这个能力。因此建议，除非是大学期间就参与过商业网站运作的，否则别去凑。中型公司是一个更好的选择。公司里有几个高手，你方便找人。工作方向相对窄，容易入手。而且工作稳定，没有随时随地的压力，利于学习发展。至于大型公司，通常不是大牛的人进去，接触的东西太有限，太定向，发展前景有限。而且大牛都集中起来了，你也很难抓到人。
至于牛人，我就不吼了。牛人都不是在人才市场上求职的。</description>
    </item>
    
    <item>
      <title>如何建立自己的debian repository</title>
      <link>//blog.shell909090.org/blog/archives/1710/</link>
      <pubDate>Mon, 28 Feb 2011 16:36:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1710/</guid>
      <description>首先，感谢zigo的大力支持，并且贡献出他的源码，我才得以完成本文。其次，技术文，该散的可以退散了。
很多时候，我们对某些东西比较有兴趣，所以会安装一下。debian系统下最熟悉的安装系统就是dpkg了。作为debian用户，我想用deb包来安装这些东西。这样会有以下的好处：
1.便于在多个系统上重复安装。如果是源码包编译，就必须每台系统安装好环境来configure/make install了。
2.便于拆除。如果是make install，能不能拆就看你的运气了。
3.系统可以管理依赖。包括自动安装缺失的依赖包，以及保持依赖包的固定等。
关于打包，请看debian新维护人员手册（ http://www.debian.org/doc/maint-guide/index.zh-cn.html）。本文主要是说一下如何将这些包变成一个自己的仓库。
变成仓库，你将拥有以下好处。
1.不必自己去复制包，然后手工安装。
2.当仓库更新后，目标机器在update后可以发现。
3.你可以向仓库中加入自己定制编译的，更加新版本的软件。替换掉系统的同名软件，而不改变操作特性（除了没加key会碰到不安全提示）。
其实debian的主系统是一个超级大仓库，通过ftp和rsync同步提供服务。我们的包如果够重要，也会享受到这种待遇。然而debian官方仓库的要求比较严格，你必须在文件级别搞清楚每个文件的授权，并且核对这些授权是否符合dsfg协定。你的包必须足够重要，有可能的潜在用户。多数时候，我们自己写的产品/库还没有这种待遇，因此只有自己做一个仓库了。
zigo提供了他的打包代码，比我的功能全多了，大家可以参考这里（http://git.gplhost.com/gitweb/?p=mgmt-scripts.git;a=blob;f=scripts/scan_archive;h=db7647732b989b35ae7d8a48c80a48ecf67e4612;hb=0ff8fd7d0ba1991d552376f8beca0b46bfaa32e3）。我根据这个脚本，自己实现了一个，放在这里（http://shell909090.3322.org/debian/scan_deb.py）。下面，我简述一下用法和原理。
首先，你需要建立一个pool目录。在其中建立一些release目录。举例来说，wheezy是一种release，testing也是。但是目前testing是wheezy的别名，你用ln -s做链接指向就可以了。在release目录下，你需要建立category目录。例如main是一种category，contrib和non-free也是。
在指定一个deb仓库的时候，release和category是必须指定的，可以被看作是一个仓库地址的一部分。
建立完三级目录后，将你的包放在对应目录下。
全部文件放好后，在根目录下执行python scan_deb.py。如果你需要自动签名，将最后一行的False改为True。在此前请准备好私钥。如果缺少某种架构，请修改脚本architectures一行。
系统的基本原理是，在某个release, category, architecture下，对于pool/release/category目录执行dpkg-scanpackages操作，生成Packages文件到dists目录下，并且再生成一个压缩版本。
对所有目录执行过操作后，使用apt-ftparchive来生成一个Release文件，这个文件指名了有哪些Packages文件，以及他们的MD5各是多少。
客户端获得了Release，就可以知道某种release的特定几个category是否需要更新。更新到了Package，就知道有什么包，他们的meta信息是多少。最后对Release文件进行签名，就可以防止作假了。</description>
    </item>
    
    <item>
      <title>上海电信ADSL的劫持？</title>
      <link>//blog.shell909090.org/blog/archives/1707/</link>
      <pubDate>Sat, 26 Feb 2011 09:56:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1707/</guid>
      <description>刚刚跑去verycd转一下，发现verycd的页面又不能动。最近经常发生这样的事情，整个页面能看，但是不能点击和拖动。再次刷新后问题消失，并且只在家里出现。我开始以为是chrome的bug。
刚刚不但又出现了这个问题，而且还弹出一个广告。我觉得不对，开源码看了一下。整个源码全是压缩后的js代码，然后用一个frame把http://www.verycd.com/?引用进来。再次刷新后，呈现出一个格式化过的正常首页。很明显，verycd本身是不会搞这种形态的广告的，他们大可在首页上加载各种广告，用不着搞得自己没法访问。
刚刚的广告是卖电信天翼的，verycd公司在上海，服务器IP是中国电信的地址段，加上我的线路也是电信的，谁是最大的嫌疑者简直呼之欲出。不过同样的，这件事情没有证据，而且没有任何的采证可能。要证明电信劫持，就必须证明，在某次具体的通讯过程中，内容确实被调换了。要跟踪某次具体通讯，并且过程都是可采信的，这个难度可不低。再加上，必须证明只有电信可以劫持内容，就是说必须证明数据包在网络上只经过了电信的路由器，没有转发的可能。即使我和verycd都是上海电信的用户，也没有办法追踪某时刻的路由表，说明包必然没有被旁路转发。最关键的是，verycd本身根本不可能得罪电信来帮你做证。
问题是，这样的http过程劫持可不可能被用于被用于其他网站呢？你的网络数据又会不会被拦截下来作为商用呢？电信是不是已经知道了你的电话号码，手机号码，你买了什么东西，乃至你的银行帐号和密码呢？</description>
    </item>
    
    <item>
      <title>linux下第二声卡的启用</title>
      <link>//blog.shell909090.org/blog/archives/1706/</link>
      <pubDate>Thu, 24 Feb 2011 11:43:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1706/</guid>
      <description>贝壳用的是debian testing，xfce。最近买了一个usb耳机，在windows下一切正常，但是linux下只有mplayer能工作。因为mplayer可以指定输出声卡，其他程序都是使用默认声卡的。而由于debian移除了alsaconf，因此连调整一下都不知道该怎么做。也许修改/etc/modprobe.d/alsa*可以解决问题，问题是，谁知道哪些资料是神马时候的呢？我最早甚至找到过01年的资料&amp;hellip;
后来，在zigo的建议下，我改用了pulse。zigo在linux下玩音频的，又是DD，怎么也算职业人士，推荐果然很给力。当晚我拿着usb耳机，很顺利的听到了youku视频。那一刻我热泪盈眶，感谢国家，感谢ccav，感谢zigo&amp;hellip;
做法如下：
# aptitude install pulseaudio pavucontrol $ pavucontrol 在输出设备页面，选择你想要的设备为默认。
如果有部分程序还是不认，建立~/.asoundrc或者/etc/asoundrc.conf，内容如下：
pcm.pulse { type pulse } ctl.pulse { type pulse } pcm.!default { type pulse } ctl.!default { type pulse } 完了。
补充一下，pulse的具体资料就不说了。大致上，pulse是一个linux的混音器。用于将多个音源发出的音频流混合成一个音频流播放。严格来说，音频设备属于独占设备，当一个软件发音的时候，其他软件应当不能发音的。这个有点类似于fifo，当两个进程同时打开fifo写数据的时候，目标只能得到碎片。
pulse的作用，是产生一个可以被多次使用的音频设备，类似于unix socket。每一个进程的数据被单独的输入，然后混音，再输出到真实的物理设备上去。由此，多个音源同时发音就变成了可能。
有人也许说，alsa原生也是支持多音源的阿。那是因为alsa内部带了一个很简单的混音器，叫做dmix。当然，pulse比dmix更加专业。</description>
    </item>
    
    <item>
      <title>gfw升级了？</title>
      <link>//blog.shell909090.org/blog/archives/1704/</link>
      <pubDate>Wed, 23 Feb 2011 10:14:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1704/</guid>
      <description>今天使用的主机上有个朋友发来消息，api用不了了。贝壳检查了一下，主机正常阿。
最终，发现问题是这样的。
shell@shell-deb:\~/tmp\$ wget &amp;lt;http://shell909090.org/apis/&amp;gt; --2011-02-23 10:08:39-- &amp;lt;http://shell909090.org/apis/&amp;gt; 正在解析主机 shell909090.org... 74.86.182.175 正在连接 [shell909090.org](http://shell909090.org)|74.86.182.175|:80... 已连接。 已发出 HTTP 请求，正在等待回应... 读取文件头错误 (Connection reset by peer)。 重试中。 --2011-02-23 10:08:41-- (尝试次数： 2) &amp;lt;http://shell909090.org/apis/&amp;gt; 正在连接 [shell909090.org](http://shell909090.org)|74.86.182.175|:80... ^C shell@shell-deb:\~/tmp\$ wget &amp;lt;http://shell909090.org/&amp;gt; --2011-02-23 10:13:36-- &amp;lt;http://shell909090.org/&amp;gt; 正在解析主机 shell909090.org... 74.86.182.175 正在连接 [shell909090.org](http://shell909090.org)|74.86.182.175|:80... 已连接。 已发出 HTTP 请求，正在等待回应... 200 OK 长度：1156 (1.1K) \[text/html\] 正在保存至: “index.html” 100%\[======================================&amp;amp;gt;\] 1,156 --.-K/s 花时 0s 2011-02-23 10:13:37 (277 MB/s) - 已保存 “index.html” \[1156/1156\]) </description>
    </item>
    
    <item>
      <title>EPIA主板经常死机问题</title>
      <link>//blog.shell909090.org/blog/archives/1702/</link>
      <pubDate>Tue, 22 Feb 2011 10:53:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1702/</guid>
      <description>十天死机三次，经过咨询，问题可能在电源或者DMA上。
用iozone来压硬盘，一次没跑完就死机了，问题看来集中在DMA上了。
在BIOS里面把硬盘的高性能模式关掉，再压，两次没死机。
等三天，又死了。
正在换主板。</description>
    </item>
    
    <item>
      <title>解决问题的艺术</title>
      <link>//blog.shell909090.org/blog/archives/1700/</link>
      <pubDate>Sat, 19 Feb 2011 00:44:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1700/</guid>
      <description>前几天的卖家打电话过来道歉了，听起来淘宝的投诉对他们是相当肉痛的一件事情。不过事情已经到这个份上，我花了无数精力下去，怎么可能凭三言两语就给你撤销呢。只是让我白骂一通。
不说这个卖家的JP问题了，就说整个事情的处理过程。其中有不少反面动作，值得大家惊醒。
1.出错后的态度。
这点那位卖家做的相当好，错了就认错。很直接的道歉，对不起，是我们的错，我们帮您解决。实话说，要没后面的一堆事情，我有心就这么解决掉了。人也没那么多精力去搞每件事情。
2.出了问题不到手足无措，也不要左右推脱。
这倒和那位卖家没关系，是我在杭州招行文三路支行的一次经历。我去交水电费，他们交过去后，因为系统衔接问题（实话说，杭州的各个系统衔接做的真是——垃圾啊），不确定是否到帐。所以要找我解决一下，否则万一没交成，我回头发现，投诉信还不写到总部去。
开始的时候是一位MM，可能是新来的，负责处理我的事情。从交钱的时候就一塌糊涂，我给的钱点来点去点不清楚，和我说话也是含含糊糊，我当是怕生。自己搞不清，叫来经理看，结果和经理讲话的时候也含含糊糊的，不知道怎么想的，居然来做柜面。结果我交一笔1600的钱，等了20多分钟才处理好，我都看懂了处理流程。算了，柜面也不容易，不要欺负新人了。等我上了杭州回上海的动车，才打电话告诉我有问题。说话还是交代半天说不清楚。没办法，只好找她们主管。
他们主管的名字我现在还记得，叫徐安江，做事清晰利落。先和我道歉，说明是他们的问题，接口上有点问题，周一能查清。要是没到，让我来补交，如果到对方那里了，会发起退回，让我重交。就是要麻烦我一趟。我说这个我可以接受，不过这个水电费快到期了，滞纳金的问题么。他说，会和对方协商，争取免掉，有的话就做主补上。然后问，您有个杭州的账户，方便转回那里么？我说不成，那是我个人开的账户，万一老板误会个啥的。他说，好的，我们钱到了转回上海账户，中间手续费帮您免掉。
我靠，这一下问题顿时解决。当然，如果换了柜面MM，补上滞纳金和免除手续费就不能做主了。但是前后的沟通实在是——新人勉强不来啊。
等我回杭州，和他们约好了去解决问题。结果还是上次的小MM，又是一通问题处理不清楚。没办法，还是叫主管吧。我就碰到了她的主管。他跟我说现在交不了，要到周三再过来一趟。我说周三人都在上海了，是你们说周一让我跑一趟的，咋办？他很客气的说，那钱我帮你收着，给你写个欠条，说明事情原委，到时候你凭欠条来我这里拿发票。
我靠，这话说的，我当场想写感谢信来着。最后事情多，把这茬给忘了。这件事虽然算是服务瑕疵，但是我仍旧认为招行在我碰到的银行里面服务排第二（第一是浦发）。
碰到问题，首先不要慌，如果自己慌了，客户就不会信任你。当初我在碰到问题的时候，拿着客户的电话大喊，想起来实在是很业余。另外也不要左右推脱，尽力帮客户办好事情。客户的事情办好了，坏事也可以变好事的。
3.解决问题的时候别引起新的问题。
春节后人忙，我能理解。过年盘账，我也能理解。说暂时到不了帐，客户不会马上翻脸。你哪怕给个折衷点的时间呢，客户也可以接受。但是9号说要查，查到12号说当天到，15号没到说明天，16号又没到。是可忍孰不可忍。事情做到这一步，要么你就拖着，然后等着客户投诉完了骂一顿，还得说你自找的。要么你就想办法的摆平客户。200不到的东西连借个账户先垫付一下转账安抚客户都不会，还开门做什么生意。
4.别到了解决问题的时候还没搞清问题在哪里。
刚刚给我打电话的卖家小客服，到打电话的时候还没搞清退货流程。他还以为我申请退货，他点同意，我点OK，钱就回去了。我还得给他补课上退货流程，是我申请，他同意，我发货，他接受，完成。这TMD我出事后都自己看了一遍流程，他连流程都没去看，叫什么事啊。</description>
    </item>
    
    <item>
      <title>淘宝上的某个恶心卖家</title>
      <link>//blog.shell909090.org/blog/archives/1698/</link>
      <pubDate>Thu, 17 Feb 2011 17:31:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1698/</guid>
      <description>最近为了拼小机器，在淘宝买了这家（http://item.taobao.com/item.htm?id=3259889569）的小机箱。由于我想装1T硬盘，因此提前查了，1T硬盘只有3.5寸，SATAII接口规格。所以我曾经问这个卖家的客服，你们的机箱可以支持3.5寸硬盘吧？这个尺寸的机箱普遍说不支持的，只有你们这里在参数中明确说明支持。客服答复我，支持。我说，你别光看页面参数，你确定。他说，我确定。
所以我就下单了。东西到的很快，在春节时段，倒也难得。问题是——机箱质量什么的不说，这机箱压根不支持3.5&amp;rsquo;硬盘阿。
我找客服投诉，你们卖的时候可是说好支持的。他查了一会，告诉我，对不起，不支持，您可以外接硬盘。废话，哥的硬盘比主板加机箱还贵，要外接还用买你的机箱？再说要外接我TMD当初问你干吗？没事逗闷子玩阿。我说我给你两条路，一条是想法弄个3.5&amp;rsquo;硬盘架给我，另一个是换。前一个比较简单，就怕机箱尺寸不符。后一个我是不会付来回邮费的，这是你们的错误，而且最终只有中评。对方问了一下老大，说这个机箱上不去3.5&amp;rsquo;硬盘架，而后一个这单他肯定亏，所以给我退货。TMD你亏我不亏，确认了能用的结果来一这玩意。搭10块钱退货不说，还浪费时间处理，老子TMD做咨询两小时足够再买个机箱了。
退货就退货吧，我问对方，我发起请求了，你是先同意还是我先发货。他说，你先发货，哥们。好，我先发货了。过两天一看，改为已经同意退货协议了，总算了了一桩心事。过年闹个肚子，春节后再上去一看——已成交？
喂喂，这算哪门子事儿阿。马上联系，结果改一个卖家的投诉帐号来处理这个事情。我问他，你们机箱没收到？他说春节刚过，人还不齐，所以要看看。我想想也是，春节刚过，事情一堆，也不忙于一时，就说，你慢慢查，我明天听回音。这是二月九号的事儿。十一号的时候我再催，说去年的帐存档了，财务要去查。十二号再问，说已经在处理了。
shell909090：（14:04:41）
您好，请问有消息了么？
候鸟信誉商城:投诉：（14:26:18）
财务已经在理了 确定后下午会打到你支付宝账户里
shell909090：（14:28:26）
好的，谢谢
到了15号我上去买东西，顺手看了看——还没到帐。上去问了一下，说财务支付盾在重新重新申请，几天内都不能支付。
候鸟信誉商城:投诉：（16:03:24）
请您耐心等1-2天 财务那边有记录的 但是支付盾重新申请过了，这几天都不能支付
候鸟信誉商城:投诉：（16:05:45）
你放心好了 我们也不是小店 不会蒙你的
shell909090：（16:05:45）
实话说，这次退货问题，我是无责的
shell909090：（16:05:57）
好吧，这样
shell909090：（16:06:00）
我联系一下淘宝的客服
shell909090：（16:06:04）
听取一下他们的意见
候鸟信誉商城:投诉：（16:06:09）
可以
候鸟信誉商城:投诉：（16:10:27）
我问过财务了 最快明天下午可以支付
我觉得有点不对，就算财务十二号当天转帐发现不能转，马上申请的话。淘宝和对方公司都在杭州呢，十五号怎么也申请到了。而且这家公司上来就坑了我一把，于是就多了个心眼，打给了淘宝客服去问问。客服MM建议我别等了，尽快做投诉。因为淘宝只开放15天的投诉维权接口，过后就关闭了，再处理问题就会更困难。得亏哥没信你们，信你们一回吃一回亏。下面是维权说明。
曾向客服询问主机是否支持3.5&amp;rsquo;硬盘架，客服很确定的告知支持。但货到后根本不3.5&amp;rsquo;硬盘，也无法改装硬盘架。因此要求全额退款。在春节前发现退款已经同意，因此将货物寄回。春节后发现变成已经成交，货款反复催促后仍未到帐。
投诉过后，对方是这样辩解的。
被维权人(候鸟信誉商城)的留言：
卖家于2011年02月16日 18:54:50不同意维权协议.
2011-02-16
被维权人(候鸟信誉商城)的留言：
当时是说好给你退的，我们点了同意退货，但是买家一直不点退货发货，最后退款自动关闭，年后因为跨年做账问题无法马上支付，要买家等等，聊天记录里说的清清楚楚，不用怕我们赖账的，没必要马上就维权，说了最快今天，最晚明天就给你支付到账上，请买家取消维权。
首先，你让我TMD先发货你再点同意退货的，谁知道同意退货后面还跟着退货发货阿。欺负老子新手不成？前面不是说支付盾么？怎么这回又变成做帐了？不用怕你赖帐？我倒是不怕你赖帐，我怕你失踪阿。第二天再看，果然还没到帐。不过这次倒可能不是卖家的问题，支付宝总算给力了一把。
淘宝客服留言：
根据维权的内容，淘宝网已经从卖家保证金中扣除175元给买家，已经提交申请将卖家的保证金扣除到买家的支付宝账户，该交易款项将会在三个工作日内到达买家支付宝账户，请买家关注。淘宝及卖家一直在努力为买家提供安全愉快的购物环境，感谢对淘宝支持！
2011-02-17
基本搞定了。
事情还有个小插曲。沈崴沈游侠最近也在买小机器，很兴高采烈的给我推荐神板和神箱，我看完箱子的第一句是，箱子很给力，卖家不靠谱。然后让他向下翻一翻，我那颗大名正在买家列表里面呢。最神奇的地方是，这是春节后的事情，我都投诉了，但是网页上还是赫然写着——支持3.5寸硬盘——到现在都没改。估计我这篇要是看到的人多，兴许卖家会改了页面来找我算帐吧。</description>
    </item>
    
    <item>
      <title>上海地铁的安保想站到神马时候阿</title>
      <link>//blog.shell909090.org/blog/archives/1695/</link>
      <pubDate>Wed, 16 Feb 2011 15:21:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1695/</guid>
      <description>世博的时候就算了，世博过去，说要站到过年，也算了。过好了年还站着。查又查的不严格，撤又不撤。纳税人的钱花着没个说法，有没有搞错。</description>
    </item>
    
    <item>
      <title>nginx使用fastcgi连接django时的细节</title>
      <link>//blog.shell909090.org/blog/archives/1694/</link>
      <pubDate>Tue, 15 Feb 2011 11:10:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1694/</guid>
      <description>django使用PATH_INFO和SCRIPT_NAME来计算urls.py中的匹配路径，当两者都设定时，会出现URL计算结果为空，导致无法访问的问题。具体看这里。
http://aftnn.org/2009/jan/23/nginx-django-fastcgi/</description>
    </item>
    
    <item>
      <title>闹肚子找到罪魁祸首了</title>
      <link>//blog.shell909090.org/blog/archives/1691/</link>
      <pubDate>Fri, 11 Feb 2011 10:07:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1691/</guid>
      <description>现在全家闹肚子了，看样子是外婆的冰箱。数年不洗，生熟混用，而且还没有控温器，靠定时器工作的。。。
亏我也能活到现在。</description>
    </item>
    
    <item>
      <title>蹊跷的闹肚子</title>
      <link>//blog.shell909090.org/blog/archives/1690/</link>
      <pubDate>Wed, 09 Feb 2011 17:27:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1690/</guid>
      <description>今年闹肚子了，上吐下泻。
水样稀，吐出来的也全是水。吗丁啉不管用，黄连素管用，可能是肠道炎。
奇怪的是，家里没人有事，女朋友家没人有事，我又没在外面吃过东西。
真是奇怪。</description>
    </item>
    
    <item>
      <title>日子没法过了，这TMD不是扯淡么</title>
      <link>//blog.shell909090.org/blog/archives/1688/</link>
      <pubDate>Sun, 30 Jan 2011 10:58:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1688/</guid>
      <description>先看这个新闻。
http://www.zaobao.com/zg/zg110129_003.shtml
这TMD不是扯淡么？你当大陆父母高兴多花钱多受罪跑去香港买奶粉？还不是因为根本买不到合适的奶粉。现在父母都拿孩子当个宝，死命也要往大学里塞。更不用说肾这种关系孩子（尤其是男孩子）一辈子的事情了，更是慎之又慎。照我说，离境税收了也没用的，搞离境税？一帮父母转头就办自由行，天天跑到香港去喝奶粉，再转头回深圳睡觉。莫非准备再禁止夫妻带孩子旅游？
其实这件事情的后面很清楚，三鹿没赔，而且还把某闹事家长给判了。再说管理市场都没用，下面的人知道上面不敢管，喝奶粉的人知道喝死没人管。咋办？就一个办法，找个肯管的。
不改判南京徐老太案，老人摔倒就是没人扶，再呼吁也没用。不改判和赔偿三鹿，奶粉管理10年内无望。
下一个是什么？蜂蜜？大米？房子？</description>
    </item>
    
    <item>
      <title>从快递说非对称密码学</title>
      <link>//blog.shell909090.org/blog/archives/1686/</link>
      <pubDate>Tue, 25 Jan 2011 11:07:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1686/</guid>
      <description>这两年快递评价很差，听说有基层员工冒充客户签名偷货物的。今天我们不说快递的问题，只是简单的讨论一下，如果快递公司管理层有心改变这种局面，他们有什么办法。
首先采用的方案是要求基层员工送货到门，必须本人签名，核对签名等。不过这对冒充客户签名没有任何帮助。因为基层员工一旦参与此事，什么送货到门的规矩，本人签名的规定，都是一句废话。核对签名是个废话中的废话，因为在仲裁的时候，基层员工得到的签名不对，并不能作为他故意将货物交给别人的证据。还不明白？如果客户不提前留下签名，最后的送货员可以辩解说，我又不知道收货人签名张啥样，给签就给收呗。如果客户提前留下签名，那么送货员可以仿冒一个。
同样，密码也有一样的困境。如果给送货员密码，等于没有防护。如果不给，等于没设定。
对于这种现象，可行的解决方案有二。
一种是让每个送货人携带一个终端，当客户取货的时候，必须输入预先设定的密码。如果密码持续试错，则该件锁定，交由收货人重新设定密码。这种做法的好处是原理简单明了，又能达成目标。送货人如果想要冒充收获，就必须反复尝试密码。多数情况下都是无法试出的，于是收件人收到一个警告，要求重设。这样的密码试出机率几乎是0。而收件人自己设定一个密码就可以收件，如果忘记可以重设。
但这种方法弊端也很明显，送货人要多携带一个终端，并且收件时必须保证终端通畅。不说终端部署的费用，在很多地方，指望通讯通畅是一件非常奢侈的事情。
第二种方法，就是让收货人提供一个问题，自行保留一个答案。这个问题和答案必须有几个特征。1.知道问题，是无法推出答案的。2.可以很简单的验证答案是否解答了问题。3.评判标准简单，不存在模棱两可的答案。4.问题和答案都便于生成和操作。
我们来看一下，为什么这样可以阻止送货人冒充客户收货。如果送货人要冒充收件人收货，就必须知道问题的答案。但是根据1，他是推不出答案的。而当收件人收货的时候，他给出的答案是很容易验证的。当然，其实这样就满足了要求。但是如果没有4条件，这个过程只能做一次，对于大量重复的快递工作是没有任何帮助的。
如果忽略去第四点，我们可以提供这么个问题和答案。一个1000位的质数和1000位的质数相乘，大概能得到一个1999-2001位的合数。这个合数能唯一的分解因数，求两个因数。问题很简单，但是根据目前的水平，要解出这个问题需要大量的计算资源。至少一个计算中心跑个几年是跑不出结果的。很明显一个送货的不可能随随便便解出这个问题的答案。但是如果收件人提供了两个质数，我们不说输入难度，要验证两个数相乘是否得到合数只需要一台手机一两秒的时间。至于一个数是不是质数，有一个概率算法叫做Robin-Miller算法能够解决（当然，实际用的都是略有变形的），验证起来也不过是几秒的时间。
这个方案无疑是很不错的，但是有一个致命的问题。要进行答案验证，就必须输入两个质数和合数。加起来大概有4000位的数据，输入起来会让人绝望的。在实际的快递中，这种方法没有任何应用价值。
但是对于类似快递的电子邮件系统，电子商务交易，在实际操作的时候数据交换和计算设备都绝对不是问题。因此，这类方法在电子商务上有非常重大的用途，说是电子商务的基石也毫不为过。
这类算法就叫做非对称密码算法，所谓非对称，指的是加密和解密过程使用的两个密钥不相等，又互相关联。其原理是当今世界最顶尖数学问题之一的“P和NP问题”，位列希尔伯特23问题和千禧年八大数学问题之中。能同时列入的都是对世界产生深远影响的重要数学问题，例如黎曼猜想。其实从理论物理角度，有一样东西更容易满足非对称验证的特性，就是两个处于纠缠态的基础粒子。如果我们忽略两个纠缠态量子怎么传递的问题，理论的想象，其中一个基础粒子跟随箱子，而另一个基础粒子在收件人手里。验证就是非常简单的问题了。干涉一个基础粒子到某个特定偏振态，使用一束光同时通过两个粒子。如果两个粒子处于纠缠态，那么光子在通过两个粒子的时候，粒子一定处于同一偏振状态。如果是非纠缠态的两个粒子，则光子输出的时候会比纠缠态量子有更大的吸收幅度。这个系统最完美的一点是，纠缠态的量子是绝对无法复制的东西，除非违背量子力学。不过从实际角度考虑，不说我们尚未成功在实验室里做到这一系列事情。单是让箱子携带一个基础粒子就是一个扯淡到不能再扯淡的事情。
当然，在快递中没有采用非对称算法的主要原因并不是因为实现困难，而是管理层根本无心改变这种局面。关于这个问题，我们在另一篇“快递战争”中讨论。</description>
    </item>
    
    <item>
      <title>下雪了</title>
      <link>//blog.shell909090.org/blog/archives/1684/</link>
      <pubDate>Thu, 20 Jan 2011 11:40:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1684/</guid>
      <description>又下了漫天大雪。
同情一下春节回家的人。
是为之纪。</description>
    </item>
    
    <item>
      <title>freenas和解决方案</title>
      <link>//blog.shell909090.org/blog/archives/1681/</link>
      <pubDate>Wed, 19 Jan 2011 09:48:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1681/</guid>
      <description>freenas是一个基于freebsd构建的免费网络存储系统(network storage system)，关于他的简介可以看这里（http://beacon.blog.51cto.com/442731/109961），主页在这里（http://freenas.org/FreeNAS）。
freenas的一个特点是结构简单，易于安装和管理，可以在非常低的硬件环境下工作。例如低端的2.5&amp;rsquo;&amp;lsquo;硬盘或者U盘，基于mini-ITX板子的EPIA等。512M内存的低端EPIA不带硬盘大约在250元上下，加上机箱不超过400。加上几块硬盘就可以组建可用的大型存储系统，稳定工作。安装freenas所需的知识基本不超过英语，当然，要组建微型服务器和RAID还是要正确理解服务器结构和配置的。支持smb/ftp/iscsi/http访问内容，通常在小型公司中可以处理掉大多数的文件共享需求。
freenas最强大的一点，就是使用“解决方案”级别提供。freenas的载体是一张安装光盘，而非一个freebsd下的软件包。这张光盘在服务器上的安装是通过特定的功能来完成，而不是复杂的安装向导，因此要安装使用非常简单。如果是基于freebsd的软件包，那么为了安装这个软件，首先必须freebsd的系统管理员来安装一个系统，并配置到合适状态。再在这个系统上安装软件包，再配置，整个过程就艰难无比了。
同样适合类似的解决方案提供的，还有邮件服务器。虽然很多空间商提供了邮箱服务，但是部分公司对邮件系统的需求远远超出空间商能提供的服务。对于企业邮箱系统，不仅仅是邮件发送和接收服务（esmtp/pop3/imap），而且包括一定的用户数据库（ldap）和在线交互系统（im）。严格来说，这已经不是普通的企业级邮箱系统，而是整合办公环境。对于这种整合环境，要完整配置出来还是有一定难度的。对此采用简化的方法，将一套系统作成整合解决方案，不失为一个简单好用低成本的方案。</description>
    </item>
    
    <item>
      <title>万税万税万万税</title>
      <link>//blog.shell909090.org/blog/archives/1680/</link>
      <pubDate>Mon, 17 Jan 2011 16:17:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1680/</guid>
      <description>一年一度，我们又迎来了发年终奖的时候。不知道有多少人要准备跳槽，又有多少公司会迎来新人。无论如何，年终奖还是要发的。
今年年终奖，老板还算挺给力。高兴了不到两天，老板来跟我谈扣税的问题了。按照税务规定，一年有一次年终奖可以分摊到一年12个月上的机会。其余的就只有合并入当月工资，交高的离谱的个所。贝壳挺走运，去年还没碰到过需要分摊的机会。然后执行分摊，贝壳的收入不算太低，反正高于7000，肯定小于22000，属于20%的征收比例。按照规定，假定贝壳有10000年终奖，首先要——交四金？
是这样的，如果你要分摊到12个月上执行，就必须补缴公积金，因此，10000的年终奖先扣除18%的公积金，然后再扣除20%的税，剩下6200。
我靠，这不是奥迪进去奥拓出来么？
再说这个公积金基点问题吧。贝壳查了公积金规定，基本就是“享受只和年限有关，和交多少无关”。本来上海有“公积金最高按照三倍当地平均工资计算”的规定，贝壳刚工作的时候，上海平均工资的三倍是4400，贝壳交的就是最高额度的公积金。到了去年，根据统计局的数据，上海平均工资3800，三倍一执行，无疑问的超过了贝壳的工资。所以——贝壳的工资被全额征收了18%的公积金。
——除了7%+7%的住房公积金，其余公积金你们还能再有用点么？
再说老板吧，月初阿姨来，和我聊到企业缴税情况，也是吓死人。首先交4%的建设税。道路建设基础教育，反正国家的发展离不开企业的大力支持。然后，假定是一般纳税人吧，对增值部分征收17%的增值税——这个所谓增值部分，仅仅算企业的原料，人是不算的。当然，各个行业不同，有些高科技公司仅仅执行12-15的税点。然后，公司要给员工开工资之前，先要缴44%的公积金企业部分。贝壳的6200的奖金，其实老板大概要拿出14400，到手43%，不到一半。企业的剩余盈利部分，最终要申报企业所得税。得，这么算下来，老板去年总销售额度所剩下的扩大生产基本差不多。
这不扯淡么？</description>
    </item>
    
    <item>
      <title>全能全知的逻辑学悖论</title>
      <link>//blog.shell909090.org/blog/archives/1678/</link>
      <pubDate>Fri, 14 Jan 2011 12:33:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1678/</guid>
      <description>很多人在讨论“神是否全能”的时候，会举出一个命题“神是否能创造出他自己也举不起的石头”来证明神不全能。如果能创造出，那么神不能举起石头。如果创造不出，那神创造不出特定条件的石头。
然后就有人提出，逻辑学上一个命题必须证明其存在性，即“自己举不起的石头”存在。又有人来反驳，这个是需要神创造的。blahblah
其实整个讨论都没抓到实质，我换个问法。全能，是否包括能够做到逻辑学上不存在或者悖论的事情？
从字面上理解，应该是可以的。例如一个命题，逻辑学上说，总是非真即假的。那么神应当可以找到一个同时为真和假的命题，这才能显示其全能。问题是——这样逻辑学就没用了。
同样的问题出现在全知上，全知，是否应当知道逻辑学上不可能成立或者悖论的事情？
同样从字面理解，应当是可以的。
如果对上述两个问题，还要给出存在证明。那只能说明，全能和全知并没有被字面意义上的理解，而是被作为大能和大知去理解。虽然能够做到一般人做不到的事情，然而并不是什么都能做。虽然能知道一般人不知道的事情，但是不是什么事情都知道。这样才和逻辑学不相矛盾。
更细节的讨论，可以看中文维基上的“全能悖论”，其中对全能的细节分类很说明问题。</description>
    </item>
    
    <item>
      <title>linux下使用windows共享打印机打印</title>
      <link>//blog.shell909090.org/blog/archives/1676/</link>
      <pubDate>Wed, 12 Jan 2011 16:42:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1676/</guid>
      <description>废话不说，上干货，六牙四皂小姐，猫咪退散。
http://www.openprinting.org/printer/HP/HP-LaserJet_1010
这是我的机器型号和驱动
aptitude install cups foomatic-filters smbclient hpijs hplip 访问http://localhost:631/
添加你的设备，并测试。</description>
    </item>
    
    <item>
      <title>春运的两重抉择</title>
      <link>//blog.shell909090.org/blog/archives/1674/</link>
      <pubDate>Tue, 11 Jan 2011 10:00:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1674/</guid>
      <description>春运了，大家又开始排队买票了哈。
现在有很多“破解”春运难题的意见，破你妹阿。短缺问题就这么几种解法，涨价，增加供给，减少需求。什么搞实名制，春运专列，通通不靠谱。
为什么实名制不靠谱？实名制不是解决短缺的方法，实名制是解决不公正的方法，而且根据张五常的理论，是一点用都没有的。实名制并不改善短缺问题，他只是让“感觉排队买票不公正”的人感觉到比较公正而已。破解方法已经出来了，提前把你的个人身份资料给黄牛，他们照样能弄出黄牛票来。
为什么春运专列不靠谱？春运的时候，铁路运力已经达到极限，这时候再给任何人开一列专列，都会减少其他人的车。这属于剥夺其他人的权利来增加某些人的权利的行为，我们也叫特权。
涨价，这个方法倒是有效，票不够就再涨价么，涨到一定程度总会有人不去的。但是这个理论上正确的方法却是大家最没法接受的，大过年的，一年就回家一次，还要忍受贵死的票价，你妹的还让不让人活阿。
增加供给，这是大家所喜闻乐见的方法。不过带来另一个问题，那么一大堆铁路，平时你养着阿。
那看来，只有在减少需求上下功夫了。尽量把需要人力的工厂搬迁到西部去，资源就地开采，人当地招聘，再通过方法往出运。这个所造成的峰值压力无论如何都小于春运吧。
春运，是中国畸形的城市化过程中的必然之痛。</description>
    </item>
    
    <item>
      <title>吃糖的艺术</title>
      <link>//blog.shell909090.org/blog/archives/1672/</link>
      <pubDate>Mon, 10 Jan 2011 16:55:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1672/</guid>
      <description>张家有两个小孩，张三和张四（想到李四的自己面壁去）。有一天，他们的妈妈给出了他们一个交换条件，乖乖在饭前坐着不溜出去玩，饭后就有一根棒棒糖。张三比较乖，坐着没动。张四跑出去玩，饭后就没糖吃。张四就不开心了。
为什么张三有糖吃我没有？
我出去玩也给张三带东西了阿。
我不管，这不公平。
以上看起来只是小孩吃糖的闹剧，实际上却有着非常复杂而深刻的哲学。其核心问题是，家长是否应当满足孩子的吵闹，给张四吃糖呢？
作为行为理论的基础，“大人”的言行会被视为一种允诺。这种允诺不但允诺自己会做什么，也同时允诺不会做什么。溜出去玩的孩子没糖吃——交换条件是这样说的。如果从大人一方单方面的破坏自己的允诺，那么小孩很容易的就得出“大人的承诺是没有效力的”这样的结论。于是，两个孩子就都不会呆在家里了。作为这种理论的结果，给张四吃糖是一个非常差的选择。如果张四有糖吃，那么下次张三就不会听从自己的命令不跑出去玩。
然而作为一个经典的中国家长，往往会冒出一个“聪明”的想法。他们会和张四讲条件，“来，我偷偷的给你，不能和张三说哦”。这个方案在短期内是异常完美的，张三不会不开心，还是很听话，张四也不闹了。
然而在长期来说，有两种结果。张三终于知道了这个交易，和张三始终不知道这个事情。其实这两个选择的差别只是张三是否有反应而已，对于张四，情况是一样的。他们懂得如何“出去玩也有糖吃”，奥秘在于会吵和对别人保密。于是在张四长大后，他们必然的，有两个特点。在碰到对自己不利的事情的时候，格外会宣扬。这种宣扬，可能是苦天跄地，可能是找记者，可能是找领导。无论原因是因别人，还是因他们自己而起，他们都特别的会吵。在吵得不到自己想要的东西的时候，他们会使用闹的手段。而且如果有人和他们说，“我可以给你们好处哦，但是你们不能公开”。他们也不会考虑为他们奔走呼叫的人，只是说一些“我们也没有办法”而已。
我不知道有多少人将这种明显的功利主义视为一种正常现象——这也许可以给我们当下的很多现象给一个完美的注脚。
更进一步，如果张三也知道了这个交易——这么长的时间内也不可能不知道吧。那么张三采取的对策只能是——保护眼前利益，有的玩赶快玩。如果为了长远利益放弃眼前利益，长远利益是否能得到未尝可知。即使有，对于不放弃眼前利益的人，也同样可以获得——这对放弃眼前利益而言没有任何优势可言。于是两个孩子的行动都只能是——跑出去玩。于是，大人的策略失败了，再调整策略也不会得到小孩的信任。两个小孩也开始互相猜忌，他们的童年结束了。
童年的结束是一件谁也没有办法的事情——彼得潘只存在于神话之中。但是以如此的方式结束童年不能说不是一件悲剧。
大人的行动策略的关键是，让小孩认识到，吵闹是不会获得糖果的。结果只和你的行为有关，和你的理由没有任何关系。要获得什么，就必须付出什么，不失去什么，就不能得到什么。为了饭后能吃到棒棒糖，就必须放弃饭前溜出去玩。为了晚年能够悠闲的在世界各地旅游，在青年时代就必须放弃休息努力工作。对于一边流着泪一边诉说“当时我这样做是多么无奈，我现在甘心接受结果”的人来说，受到和说之前一样的结果——并非我们不宣扬同情，同情是给付出了足够代价的人的。
这个例子是《经济学家写给女儿的一封信》（具体的书名我已经忘了）中的例子，讲的是级差所得税——一种穷人可以“抢劫”富人的税种。如果一个人的富有是因为他年轻时期的勤劳工作，我们有什么理由去对他的勤劳工作征收更高的税呢？这只会鼓励人们不事劳作——作者说如是。</description>
    </item>
    
    <item>
      <title>linux虚拟化简介</title>
      <link>//blog.shell909090.org/blog/archives/1670/</link>
      <pubDate>Thu, 06 Jan 2011 10:14:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1670/</guid>
      <description>又是科普文，行家免入。
关于虚拟机的一些比较充分的讲解，可以看这里（http://zh.wikipedia.org/zh-cn/虚拟机比较）。下文是对linux下希望实现虚拟化和被虚拟化的情况提出一些简洁的说明。
1.windows下虚拟出linux。
不在意版权的人可以装个vmware 6.0以上，在意版权的装virtualbox开源版。字符界面通常分配128M内存，512M交换分区。图形界面512M内存，1024M交换分区。硬盘大小视各个发行会有所不同。对于多数工作用的系统，建议使用debian stable安装后升级到testing，稳定好用，最主要是简洁。128M内存512M交换8G的磁盘，足够系统安装和大部分的开发/运行。
2.linux下虚拟windows。
啥都别说，装virtualbox吧。破解vmware是很蛋疼的一件事情，装ESX就更蛋疼了。建议，XP512M内存以上，要稳定使用至少1G。倒是页面文件，只要512M就差不多了。硬盘至少准备16G以上，否则安装程序加运行数据，十有八九会空间不足。
3.linux下虚拟linux。
主要可用方案分为四类，系统虚拟化，半虚拟化，全虚拟化，硬件虚拟化，分别介绍。
4.linux下虚拟一些比较怪的东西。
这是职业玩家了，例如minix，或者freenas。改天写写后者，挺不错的一个创意。
1.全虚拟化
vmware是这种技术的代表。全虚拟化的特征是可以运行完全不同的系统，例如linux下运行windows。virtualbox是开源中做全虚拟化做的比较好的一款软件。当然，即使是全虚拟化，也必须是同一类CPU，例如32位虚拟64位CPU就不给力了。要虚拟不同的CPU，是CPU虚拟化，例如bochs和pearpc。速度大约是真机器的几十分之一，除了调试程序外没别的用途。
全虚拟化比较适合玩玩其他系统，其他可以选用的方案有，vmware，virtualbox，virtual pc，qemu。
2.半虚拟化
Xen是这种技术的代表。通过修改的真机内核和客户机内核来支持虚拟化。优点是效率比全虚拟化高，缺点是客户机必须是可以修改内核的，这将windows排除在外。但是从理论上，可以在linux的xen上运行freebsd系统，两者都是开放内核源码的系统。
半虚拟化技术一般被拿来做VPS比较多，基本没有其他可选用的方案。
3.系统虚拟化
OpenVZ是这种技术的代表。这种技术通过系统内核级别的代码修改来支持虚拟化。优点是效率比半虚拟化更高，缺点是客户机和服务器必须是同一个内核。因此真机和客户机都必须是linux（或者其他相同系统，例如freebsd），但是可以是不同发行（例如真机debian客户机centos），而且客户机不能自由加载内核模块。
系统虚拟化也被用来做VPS，但是这种VPS有强烈的超卖可能，因此不推荐使用。反倒是在同一个公司内，因为某些原因需要将多个程序部署在多台设备上，每台设备所需的资源又不多的时候，比较适合用。其他可选用的方案有jails，vserver，virtuozzo。
4.硬件虚拟化
kvm是这种技术的代表。当然，vmware workstation，virtualbox等也可以支持这种技术。这种技术是未来虚拟化的大趋势。
硬件虚拟化，是使用CPU和其他硬件的特殊设计，辅助虚拟化的进行。通过硬件虚拟化，虚拟机的执行效率往往可以达到和半虚拟化相似甚至超过的地步，而不需要客户系统的特殊配合。从设计理论上说，完整的硬件虚拟化应当可以在客户机上再执行全套的硬件虚拟化，如VM/370。但是目前Intel和AMD的家用CPU系列只支持在真机上创建一系列虚拟机实例，这些虚拟机的内部是不支持硬件虚拟化的。
硬件虚拟化可以用在VPS/机器切分/新系统尝试等各种环境中，其他备选的方案有，vmware workstation，virtualbox，virtual pc，qemu。</description>
    </item>
    
    <item>
      <title>python试题</title>
      <link>//blog.shell909090.org/blog/archives/1668/</link>
      <pubDate>Tue, 04 Jan 2011 14:27:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1668/</guid>
      <description>前两年在公司用过的试题，不知道发过没有。在我的blog上搜了搜，没找着。大家可以看看玩。
1.py文件在运行时会产生pyc文件，用于缓存编译后代码(3分)：
a.正确
b.错误
c.不完全正确
&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-
c
2.python支持多线程，能够单进程无缝发挥多路CPU的优势(4分)：
a.支持，能够
b.支持，不能够
c.不支持，能够
d.不支持，不能够
&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-
b
3.在python中，使用for从列表中删除元素是错误的做法，会导致___________。
正确的做法是使用python内置的____________函数(4分)。
&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-
漏删元素，filter。(一空2分)
4.请改正以下程序中的错误，并写出结果(12分，本题禁止使用python运行):
a=10
def test (*b):
print (a,type(b));
a = 20;
print a;
print b[0](b[0])
if __name__ == &amp;ldquo;__main__&amp;rdquo;:
print test (*[test]);
&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-
答对一处错误给3分，答对结果给6分，结果其他部分对但type(b)错误给4分。
答其他错误倒扣2分，扣完为止。
a = 10;
def test (*b):
global a;
print (a, type(b));
a = 20;
print a;
if __name__ == &amp;ldquo;__main__&amp;rdquo;:
print test (*[test]);
以下是结果。
(10, &amp;lt;type &amp;rsquo;tuple&amp;rsquo;&amp;gt;)
20</description>
    </item>
    
    <item>
      <title>为什么C语言并不适合语言入门教学</title>
      <link>//blog.shell909090.org/blog/archives/1666/</link>
      <pubDate>Sun, 02 Jan 2011 20:21:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1666/</guid>
      <description>国内学校基本都用C语言作为入门语言教学，某本C语言教材大卖，这TMD是我看到的最蛋疼外加胡扯的事情了。你们打算把全校学生包括传媒系都培养成职业程序员么？感谢上帝，中国已经有部分学校用了java乃至python，让我不至于太绝望。
C语言作为语言之王，有着与生俱来的优势和原罪。你可以不用，但你不能无视。python的os模块基本都是底层封装，封装的是什么呢？linux下是libstdc或者是linux c api，windows下是SDK API，都是C接口而不是C++接口。因为C是一层对底层数据结构的高层抽象，主要解决兼容性问题。例如ARM/x86平台不兼容之类的问题。用C写代码的时候，就是在直观的操作底层的数据，包括内存结构，指针。正是因为这个特点，因此几乎所有平台都用C作为底层语言，并且提供C的API接口。然而也是因为同一个理由，C中缺乏高级对象支持，写一个稍稍复杂点的结构就必须动用数据结构的知识。例如你需要模拟一个园区的物流运作，因此需要写个程序。很明显，运作是以时间为顺序触发的，因此需要一个时间队列。熟悉数据结构的同学应该想到，最适合的结构应当是堆排序中的堆结构。如果没有，那么链表结构也能凑合。但是在C语言里面呢？抱歉，你需要自己实现一个链表。
纳尼？我它喵的为了做一个园区运作的模拟，它喵的先要啃数据结构书，然后写链表代码。你当我是计算机系的学生阿，老子是管院的。
C++比C更适合这个问题，C++中可以使用STL，而STL中的list算是凑合的解决了这个问题。哪怕用vector，也算一种可以接受的方案了。C下面为了绕过这个问题，我用了65536长度的数组，于是程序一开就是10+M的内存。这还是我能找到的最优雅的解决方案——总比自己去写一个或者用第三方链表好。java就很明显更加适合解决这个问题，它内置了list数据结构。python虽然没有list结构，但是可以用array模拟，也可以用堆结构。
无论如何，总好过去找第三方库吧，真当老子是IT民工啦。
C++比C好点，但是使用C++的原罪是C++复杂的语法结构。光是类的问题上，就有静态，成员，虚三种。每种配合上public protected private，再继承一下public protected private。大约有27种情况需要记忆，它喵的这是写程序还是玩大家来找碴阿。而且还有重载，算符重载，隐性类别转换，强制类别识别这些绕死程序员的问题，我怎么看都不觉得适合给啥都不懂的非计算机系学生解决问题用。
非计算机系的学生，需要的是这样一门语言。好用，强大，建模和解决数学问题的能力要强，速度和安全性可以无视。很明显，C根本不合格，连边都够不上。因此在国内高校中，实际是matlab和java承担起了这个任务——然而这两门都是非必修选修课，或者压根没地方教。
有用的知识不算分，甚至没地方学，没用的垃圾要考试——这个，我真——无语了。。。</description>
    </item>
    
    <item>
      <title>为什么我说框架和工具不是解决安全性的良好方案</title>
      <link>//blog.shell909090.org/blog/archives/1663/</link>
      <pubDate>Thu, 30 Dec 2010 16:24:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1663/</guid>
      <description>在python-cn的maillist上，刚刚爆发了一场关于动态语言合并出错的争论。问题的起源，来自于这样一个问题。
一个程序员A，写了一个函数，function1。程序员B对函数进行了调用。现在两个人分别在svn上工作，A修改了function1，而b修改了其他内容。
由于python并不在编译时检查类别问题，因此当两人的svn merge后，运行并没有出错。现在，问题只有等上线后客户提出来了。
几乎所有的人都同意，这问题的根源不是一个语言的问题。本质上说，这是一个工作流程问题。即使是C，也只检查参数的个数和类别，对于行为的变化和参数意义的变化还是无能为力的。
1.当你公开了一个函数，并要修改这个函数的外观行为的时候，必须向其他人通告。 2.python代码要通过unittest和黑盒检查覆盖。 3.代码应当cross review。
争论的焦点主要是在python下如何避免这个问题。楼主Zhang Jiawei的观点是使用pydev，加上工具来检查。我，沈崴，ZQ的意见是通过行为来避免这个问题。所谓行为，主要包括以下几个。
1.互相review代码。 2.修改通告。 3.编写无检查和无处理的代码，并大量运行。如果代码中有错，程序会持续崩溃。因此当大量运行程序不崩溃时，代码就无错了。
为什么我们并不推荐使用自动化工具来检测错误呢？主要是因为自动化工具可以*找到*问题，但是却不能*保证*是找到问题最彻底的一种。我举个最简单的例子：
网络工程师A，用了pylint，找到了自己code中的15个低级bug。他很高兴，因为工具使用起来很方便。
A向领导汇报了自己的心得，建议全公司推行这个工具。假定他的领导是项目经理B。
A：这个工具太好了，一下就找出了我15个bug，我发现用这个工具很方便，blahblahblah。
B：恩，很好，过两天你在公司里面讲讲这个工具。对了，你的code review做了么？
A：我用工具查过拉。
B：你确定他找出了你的*所有*bug么？
问题的关键，就是*所有*。我们当然不可能找出程序中的所有bug。我所知的bug最少的程序是TeX，据说在数年的时间内只有数个bug。但是其版本号仍旧是3.1415926——正好是祖率的密率——而不是pi。我们毕竟不敢——高伯伯也不敢——保证没有bug。但是通过cross review，不处理加覆盖性检测，我们可以保证bug出现的概率在某个水平以下。
自动化工具寻找出的bug，是在这个水准以上的。就是说，自动化工具看的出的，人应该看的出。人看的出的，自动化工具不一定看的出。如果做不到这点，说明你的水准还不足。
所以，当我们需要一个尽量无错的code时，当你pydev/pylint，或者其他工具做了检测，问题是否解决了呢？没有，你仍旧需要review来保证没有bug。这样一来，工具的意义在哪里呢？
当然，这并非说在做code review之前，你*不能*去做一遍代码扫描。只是说这样做并*不能替代*对错误的人工控制行为。
除非你的目标是使用最低的成本，将错误减少到一个可接受的规模——而不是最低。就像我们在外包中常做的那样。这种情况下使用工具是比较合适的。
而且一旦使用工具，很多程序员会产生依赖。所谓依赖，并不是讲从逻辑上他们不清楚在代码扫描外还需要独立的人工检测。但是在检测时，心里就会抱有一种放松的心态。尤其是其中某些虫族程序员让人无语叹息的行为。在中国的程序员界，有着诸多非常有创造力的bug提供者。例如擅长用str+=的java网页程序员很常见，这属于常见问题。但是自己写一套字典映射规则以完成数字到字符转换的（就是c下面的itoa）.net程序员真的让我大开眼界——而且他同时犯下了str+=错误。要指望工具修正+=是可以的，要指望工具找出这类极品代码，估计下面会有更极品的人犯下更极品的错误。。。</description>
    </item>
    
    <item>
      <title>elisp的简单介绍</title>
      <link>//blog.shell909090.org/blog/archives/1661/</link>
      <pubDate>Sat, 25 Dec 2010 20:16:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1661/</guid>
      <description>emacs是利用elisp写成的，而elisp是lisp的一个方言。lisp语言是出名的优美和晦涩，当然，更出名的是括号。。。
emacs利用elisp作为上层抽象。首先，emacs提供了基本的编辑器框架，包括文件操作函数API，buffer，frame，windows的API。而后，emacs附带了很多函数实现，并且和按键一一绑定。例如Ctrl+N（简写为C-N）就被绑定到“换到下一行”这个API上。于是，我们按下Ctrl+N的时候，就会触发“换到下一行”这个函数的执行。dired等插件也是基于类似的原理写成。
我们可以用类似的方法，来编写自己的函数，扩充emacs的功能。下面我们看一个例子：
(defun popup-term () (interactive) (apply &#39;start-process &amp;quot;terminal&amp;quot; nil popup-terminal-command)) 首先先说明一下，elisp的基于规则是利用括号匹配的s表达式，通过特定规则计算表达式。每个表达式由多个原子构成，一个原子可以是符号，对象（数字或者字符串），序对，表（包括空表），树，以及他们的嵌套。求值的时候，第一个原子做动词，先求值第一个原子，直到得到一个对象，再根据第一个原子的特性决定正则序和应用序。应用序的先对每个后续原子求值，再调用第一个原子对应的对象。正则序直接交给第一个原子对应对象处理。上文那个表达式，最外层的是(defun)列表，defun是函数定义函数，popup-term是符号。这部分混合起来，就是定义(interactive) (apply &amp;lsquo;start-process &amp;ldquo;terminal&amp;rdquo; nil popup-terminal-command)为一个函数，并在上层框架空间内把内容赋值给popup-term这个符号。说的更直白一点，就是定义函数。
当我们执行popup-term这个函数的时候（M-x加上函数名就可以手工调用），首先执行interactive过程。这个函数可以在这里（http://www.gnu.org/software/emacs/manual/html_node/elisp/index.html）查到，基本上，可以认为执行了这个函数，才能够和前台交互。而后是apply函数，这个函数将后面的几个值作用于紧跟着的那个符号所对应的函数。用python语言来描述，大概是这个样子。
def apply(func, \*param): return globals()\[func\](\*param) 这个函数真正的部分，是从start-process到括号结束。其意义是启动一个子进程，名为terminal，没有对应的buffer（熟悉emacs的应该知道这是什么），命令为popup-terminal-command。这个命令在windows下和linux下有不同定义，所以我将这个定义放在了emacs-win.el和emacs-linux.el里面。在linux下，他是这么定义的。
(setq popup-terminal-command &#39;(&amp;quot;x-terminal-emulator&amp;quot;)) setq是设定一个全局变量。整句合起来的意思是，在执行popup-term的时候，启动一个子进程，执行x-terminal-emulator。最后，将popup-term绑定到keymap上。
(global-set-key \[(control c) (s)\] &#39;popup-term) 现在，在任何一个buffer中按下C-c s，就可以弹出当前目录对应的term了。
我们在emacs中所做的所有配置，插件安装，其实本质上是写代码控制其他代码的载入，变更环境变量。只要有合适的文档，或者有时间阅读源码，我们就可以对其他程序进行扩充。下面介绍一个对dired进行扩充的例子，我们向dired中加入copy-from和rename-from，还有dired-open功能。dired的copy和rename必须在源目录中，选择文件，按C，输入目标路径。有的时候我们在某个目录工作到一半，突然需要从另外一个目录复制一个文件过来。这时候打开对方目录进行复制动作太繁琐，因此我编写了两个函数，分别绑定到r和c上。dired-open则是另外一个文件，有时我们需要通过其他程序打开某个文件，例如播放电影。在dired中直接用&amp;amp;可以实现这个目标，但是需要自行输入播放命令，而且会新开一个buffer。以下是代码。
(defun dired-open-file (&amp;amp;optional arg) (interactive) (apply &#39;start-process &amp;quot;dired-open&amp;quot; nil (append (split-string (read-shell-command &amp;quot;command: &amp;quot; (dired-guess-cmd (dired-get-filename)))) (list (dired-get-filename))))) (defun dired-copy-from (&amp;amp;optional arg) (interactive) (let ((source-path (read-file-name &amp;quot;filepath: &amp;quot;))) (copy-file source-path (file-name-nondirectory source-path)))) (defun dired-rename-from (&amp;amp;optional arg) (interactive) (let ((source-path (read-file-name &amp;quot;filepath: &amp;quot;))) (rename-file source-path (file-name-nondirectory source-path)))) (add-hook &#39;dired-mode-hook (lambda () (define-key dired-mode-map &amp;quot;b&amp;quot; &#39;dired-open-file) (define-key dired-mode-map &amp;quot;c&amp;quot; &#39;dired-copy-from) (define-key dired-mode-map &amp;quot;r&amp;quot; &#39;dired-rename-from) (define-key dired-mode-map \[(control c) (g)\] &#39;dired-etags-tables))) 如上文一样，我们定义了dired-open-file函数，这个函数的核心部分是start-process，但是在命令上，我们的命令是这个。</description>
    </item>
    
    <item>
      <title>空间，VPS和独立主机的对比</title>
      <link>//blog.shell909090.org/blog/archives/1659/</link>
      <pubDate>Tue, 21 Dec 2010 09:52:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1659/</guid>
      <description>空间和VPS的差异最主要在支持的压力和配置的自由度上。通常而言，空间支持的压力比VPS要小，配置也更加不灵活，当然，也可以叫更加简单。两者都可以通过加钱来升级到更加性能优异的程度，因此很难说什么情况下该用什么。简单的做法是，如果空间能满足你的要求，就不要折腾VPS。通常折腾VPS的都起码是专业公司了，通常都有自己的网管。一般公司的误区是，希望自己拥有对机器的完整权限，因此更倾向于托管机器。然而托管机器的成本并不像你所想像的那样低廉。
首先，同样的硬件，在你手里的利用率一定比在VPS商手里的利用率低。这是理所当然的，VPS商就是通过组合不同的性能组合，精细调整压力，来赚钱的公司。在VPS商手里，基本每字节内存，每个CPU时间片都是充分利用的。而一旦你买进托管主机，用的掉不用掉这都是你的事情了。当然，与此对应的，当高压力到来的时候，VPS比自己托管机器的响应更快。基本只要信用卡刷下去，性能就立刻上去了。
同样，这个特性也比较适合那些资源的峰谷比特别夸张的公司，尤其是一些几个月内会受到超大压力，过后肯定会被放弃的项目。VPS方案可以允许你短期内租用一些机器来工作，过后没有扫尾工作。
其次，由小公司运作的设备，其平均无故障时间远低于专业VPS商，也低于主机托管商。道理也很简单，硬件的物理损坏会降低平均无故障时间。而虚拟主机和VPS都是通过无单点故障的均衡系统来解决这个问题的，这个方案对于只有几台设备的小公司不适用。更进一步说，如果万一出问题，非专业人员的恢复时间无论如何比专家来的慢。
最后，最主要的是，如果使用空间或者VPS，你无需关心硬件淘汰问题。通常网络公司很少碰到多年后使用寿命满导致的机器淘汰，通常都是性能不足而进行的机器替换。汰换下来的机器用起来不方便，卖掉不合算，是个很鸡肋的东西。VPS商会自行处理这些事情，并且在机房升级后，通常还会给用户一些自动升级。
我们现在来算一个实际问题，一个比较典型的小网站，平均同时在线人数大约是400人，峰谷比大约是1:5。页面滞留时间按照20s计算，每页面流量10K，每session内存消耗0.5M。为了支持峰值在线，大约需要1G内存，瞬时带宽消耗大概是1M/s，一个月的数据流量大约是600G。一台中等的1U小型服务器大概是2W，分摊到3年折旧，每个月就是600。1U的托管最低是6000（我怀疑现在哪里还能弄到这个价格），最高的有10W的。按照1.2W计算，一个月是1000。加上少量的中间费用，直接管理硬件的成本大约是1800-2000RMB/mo。dreamhost的不限空间不限带宽服务一个月费用是9美元，折合60RMB/mo不到。gplhost上的Xen服务器，60G硬盘1.2G内存360G带宽是70美元，折合450RMB/mo。其他厂家也有200-350RMB/mo不等的类似服务方案，不过有可能是基于OpenVZ的，有超卖的可能。
为了支持这个小网站，如果使用小型服务器托管方案，那就是一台服务器搞定，1800-2000RMB/mo。如果是Xen服务器，大约是900RMB/mo。如果是空间，性能顶得住就是60RMB/mo，顶不住就当场崩溃。
基本结论是，如果你的程序并不特别重要，那么用空间。如果应用的峰值内存消耗小于2G，那么用VPS。如果峰值内存消耗奇高，或者月流量超大，还是自己托管服务器稍微省点钱。</description>
    </item>
    
    <item>
      <title>从电影贴片广告说起</title>
      <link>//blog.shell909090.org/blog/archives/1656/</link>
      <pubDate>Mon, 20 Dec 2010 10:19:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1656/</guid>
      <description>昨天去看了姜文的让子弹飞，挺不错的一部电影。片子简洁大气，很有张力。不过这不是重点，重点是，贝壳头一次碰到了传说中的贴片广告。
电影贴片广告分为两种，占用播放时间的和不占用的。后者是在电影票预定时间之前的广告，前者则是在电影放映许可后的。例如昨天的让子弹飞，电影票的时间是11:20，广告是从我入场（11:15）做到11:30，足足做了15分钟。头5分钟是不占用播放时间的，后10分钟是占用播放时间的。贴片广告让人反感又价值巨大，是因为如果不在电影院规定播放时间入场，就不能再入场。而一旦在规定时间入场，后面的时间就是完全的广告时间，必定人人都看，这种行为很让人倒胃口。广电总局曾明令禁止贴片广告占用播放时间，但效果不彰。电影院申辩说，他们和片方签订的协议规定电影院不得随意剪辑电影，而贴片广告则是加在电影头部的。但是广电总局的规定中也说到过，可以安排电影提前播放，观众在正式影片播放时间入场。可见院方理由是在推托责任。按照常理分析，院方如果没有好处，是不会做这种又得罪广电总局又得罪观众的事情的。由此可见，院方也能从贴片广告中分得一杯羹。
从某种意义上说，这是广电总局监管不到位的原因。不过我们对照广电总局对于各种节目的管理，还有在魔兽世界问题上广电总局的威风，就会发现，广电总局有的是办法和手段来管理。他们能禁掉和自己完全没关系的网络服务器，难道不能关掉电影院么？哪家不执行关哪家，电影院不执行关电影院，片方不执行不给许可证。可是他们没有这么做，除了一个规定外什么都没有。可见广电总局并不是真的想管贴片广告，只是迫于观众的言辞不得不虚与委蛇。由此再深追，难保其中没有什么猫腻在里面。
但是细细去想，真的只是广电总局的原因么？很多时候我们都把责任推给政府，像鸵鸟一样忘记了自己也有责任，而且自己是受害者。对于贴片广告的问题，在完全市场中绝对不可能存在，这是完全不对称信息的特征。很简单的去想，如果每个看过电影的人都可以给出电影的细节信息，例如市百一店影院在让子弹飞前面播放10分钟贴片广告，并且每个准备看电影的人都能收到。那么贴片广告越多，越少有人观看。当然，对于热门时间段而言，即使是贴片，或者票价昂贵，位置不好，一样会满场，这是市场特征。然而我们却没有一个机制，让看电影的人，能看到看过电影人的评价。这分为几个原因。首先是很多看电影的人，对这些信息不关注。大多数临时决定去看电影的人，总不会先检查电影的所有特征吧，最多看看影评就差不多了。这个导致了看过电影的人对传播这一信息没有热情，反正说了也是白说。不过最关键的，是我们的反馈信息传播机制存在问题，主要是传输渠道会被人为的扭曲。
例如，我们的报纸，新闻单位，对电影的评价传播起到相当重要的作用。但是这一渠道是可以公关的，片方可以通过金钱来驱使这些单位不报道自己的负面新闻。不是有个笑话么？每年春节和三一五都要花钱，不过前者是花钱要求上节目，后者是花钱要求不上节目。而我们的民间传播渠道，则多数是由少数的知名人士，包括名人，博主，作为中心的。这种模式的好处是可信，你知道这个人是谁，他的背景，他会为自己的话负责。然而，同报纸电视单位相同，这种个人也是可以公关的。我们可以证明，可信和人为扭曲是必然同时存在的。你越要求可信，信息越容易被扭曲。
从个人的角度说，我们也许无法改变整个链条，不过我们可以改变末端规则。如同那个笑话说的，有个买便宜货的诀窍——永远买第二的产品。我们在听取一个事情的信息的时候，往往要刻意的保持一定比例的私有消息和不可信消息源。我们的朋友，不出名的人士，所传递的小道消息。用这些消息和官方的消息互相验证，来形成信任链——说过越多可信的，有价值的消息的，我们越信任。可以证明，这种信任网络是很难被单点劫持的。</description>
    </item>
    
    <item>
      <title>公司的网络服务选择</title>
      <link>//blog.shell909090.org/blog/archives/1652/</link>
      <pubDate>Thu, 16 Dec 2010 14:20:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1652/</guid>
      <description>最近碰到不少朋友需要做网站，或者做一些网络产品对外服务。下面统一解答一些基础概念问题，程序员或者本行的人士可以不用继续往下看了，都是常识。
1.网站/产品都包括什么东西？
从最简单的来说，你做了几个页面，放在网络上，让其他人看，这个就属于网站的范畴了。更复杂的，论坛，wiki，产品目录，公司主页，都属于互联网网站/产品。\
2.为了让别人可以访问你的产品/网站，你要做什么。
我们有个术语来描述“让所有人可以访问你的产品/网站”这个定义，叫做上线。作为基础，你需要一个服务器，和一个域名（这两个名字我们下面解释）。也许你需要一些其他东西来让网站上线，但是至少一个服务器和一个域名是必须的。域名是你对外宣传的基础，其他人通过域名来访问你的网站。服务器则是支持别人访问的系统。
如果你打算对使用中国的服务器，或者说在中国经营，那么你需要在中国的网络管理部门进行备案。
如果你打算使用现有的程序，或者不需要开发程序，那么你可以忽略程序开发过程。但是大多数人都需要一些经过修改的程序，乃至于编写一些程序来让网站运行。
无论你在上面作出了何种选择，最终，你需要维护你的网站。如果你不熟悉这个过程，可能还需要一个人来管理这部分。
3.听起来很复杂的样子，那么，怎么做？
我们先解释怎么弄到服务器和域名，还有备案，程序开发和维护后面再说。
如果你对上面这一切完完全全一点点都无法理解，那么你可以不用继续阅读了。找一个信得过的专业人员，或者让信得过的人推荐一个，然后让他搞定这一切吧。
如果你还基本能听的明白，那么可以自己试着去买一个服务器和域名。我建议你从购买空间开始。
空间：多人合用 多人共享一个IP 只提供网页和邮件服务 很难安装系统软件
VPS：多人合用 一台机器一个IP 提供所有服务 除了部分内核组件外，都很容易安装和更换
独立主机：一人独用 一台机器一个IP 提供所有服务 可以任意管理
通常，大多数空间服务商都提供域名购买服务。域名和空间都是要每年付费的。注意，由于空间很难安装系统软件，因此空间支持的语言通常都是限定的，现在大多数都是支持asp或者php，偶尔有支持其他语言的，不多。在进行程序开发或安装时，必须确定空间可以支持这种语言。
如果你面向中国的群众提供服务，或者机器在中国，就必须进行备案。一般的空间服务商也提供备案业务，不过备案的情况非常复杂而且随时都在变化，因此请询问清楚现在的情况再做决定。如果可以的话，我建议尽量不要将服务器托管在中国，或者购买cn域名。
4.我买了一个空间/VPS，还有域名，然后呢？
那么你需要把合适的程序开发出来，并且放上去。通常来说，你能想到的东西一般都有良好的开源实现。你可以咨询一下专业人士，并且尽量听从他们的建议。大多数个人和公司的需求，都可以通过在开源的论坛/blog/wiki/CMS系统/ERP系统上进行简单的配置/混合/定制开发来解决（很绕？简单来说，肯定有现成的）。千万不要低估开发的成本，也许你觉得程序员很便宜，想自己动手，找一些人做一个出来。但是就我的经验，在IT业没有经验的公司要进入这个领域，几乎没有成功的经历。主要问题在于不熟悉流程和管理，导致开发总是在莫名其妙的地方停顿，并且产品的质量很难控制。（简单来说，你会掉到泥潭里）
如果你真的需要进行开发，外包是一个方案，但是也很容易失败，问题的核心也是无法控制进度和质量。对于小规模的东西，找信得过的人单人开发或者推荐人开发是个可靠性很高的方案。
5.我有程序/我找到了合适的程序
恭喜你，现在离上线只有一步了。你需要将你的程序放到你的服务器上，并且将域名指到服务器上，这一步可以请一个专业人员来做一下。然后你的产品就上线了，我们管这个过程叫做部署。
但是，且慢高兴。除了第一次的部署，你还需要定期做例行维护。例如你运行了一个论坛，总不能让人上来全看到广告吧。你运行了wiki，上面全是骂你的话。你的产品目录需要经常更新，邮箱更是天天要看。通常你需要至少一个人，来盯着你的产品。如果不复杂，叫个行政兼职看看就好，如果比较复杂，还是请职业网管的好。如果你要将这个产品的名气打响，还需要进行产品的推广/营销工作。这部分就更加复杂了。
6.让我总结一下
你最好找一个专门的咨询人员，咨询一下有没有适合你的产品，能不能简单定制一下搞定。如果可以，你需要支持哪种语言的空间（如果你用空间的话），压力大概多大，能否支持。自己去购买合适的空间或者服务器，还有域名。然后让人（通常一事不烦二主，咨询人员也兼职部署）部署上去，并且找个人盯着。大概就是这样。</description>
    </item>
    
    <item>
      <title>Cybersitter诉大正及索尼案</title>
      <link>//blog.shell909090.org/blog/archives/1650/</link>
      <pubDate>Wed, 15 Dec 2010 12:59:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1650/</guid>
      <description>准确的说，应该叫Cybersitter诉大正案。
1.这是一起知识产权案子，属于私人起诉私人，和政府没有关系，和美国表达对中国网络审查现状的不满一毛钱关系都没有。
2.美国法院和美国政界的总体倾向是判决Cybersitter胜诉，而且追偿不会太低。这次拒绝在中国审理而坚持在美国审理就是非常明白的表现。
3.这倒是不难理解，对于知识产权，老美向来非常重视的，尤其是这种能正大光明宰中国一刀的案子，能打多大就多大。
4.中国官方也许会试图通过外交影响判决，也许不会。因为绿坝这个问题上连自己人都觉得脑残。但是即使是国家主席去讲话，美国也肯定不会理会，因为美国对中国的版权惩罚已经作为一种对抗战略执行了。
5.如果真的跨国追偿，大正公司肯定以倒闭对应。他们会老老实实的准备应诉才是奇怪的事情呢。就算应诉，肯定也输，到最后一步，肯定倒闭了之。
6.更可能发生的，具有中国国情的事情，是大正公司不予理会。而后是美国要求中国履行版权协定的相关条款，否则诉诸WTO等等的威胁，而后是两国的政治博弈。
7.中国人民的税金肯定拿不回来了，中国的媒体对此表示完全不知道。
8.索尼，方正等几家公司是追偿的主力，肯定要出血。他们在美国有业务，基本不可能不理不睬。
9.工信部可能会以政策来换取几家外国公司高层的谅解，也可能不需要谅解。对于中国公司，完全不用考虑这个问题，因为这些公司属于被工信部管理的对象。
10.但是即使如此，工信部今后的命令在这几家公司也未必能得到完全的执行。因为在这个问题上，工信部出尔反尔在前，属于无智商的脑残。事后的政策也不可能给几家公司一个太大的漏。
11.这件案子影响最大的将是在国际上，尤其是美国有比较大业务的公司。他们在中国犯下的版权错误，只要一方牵涉美国版权，可能在美国得到审判和惩罚。</description>
    </item>
    
    <item>
      <title>程序员的路线和培养</title>
      <link>//blog.shell909090.org/blog/archives/1648/</link>
      <pubDate>Tue, 14 Dec 2010 10:07:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1648/</guid>
      <description>也许我说过这话了，再说一遍也不嫌多。程序员不要什么都学，什么都吃。不但要吃好的，而且要能穿起来。先学什么，后学什么，学成是什么，大概要有个数。不在这个范围附近的东西尽量别碰，活也尽量别接——除非钱贼多。
很多新手程序员和我以前一样，看到好的技术就去学，看到大牛就去拜。结果php程序员同时还会汇编，又玩过过图形识别——这种技术组合想干嘛？joel on software表达过类似的意思，程序员的时间很值钱，最主要是前面做过的东西会变成后面的财富。前面做了个项目赚1000，后面做有关项目的时候就可以以一半的成本做1000。这样下去，只要项目足够——或者有人请你——做到三年以后工资往往是前面的几倍。反过来，前面两千三千挑值钱的做，往往到了后面还是这个值不变。用另一句话描述，“我要找的是五年经验的程序员，不是一年经验乘以五的程序员”。
差不多就是这么回事了。</description>
    </item>
    
    <item>
      <title>U盘安装debian的技巧</title>
      <link>//blog.shell909090.org/blog/archives/1646/</link>
      <pubDate>Fri, 10 Dec 2010 10:43:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1646/</guid>
      <description>翻译文，原文看这里。
首先，去一个足够好的镜像（有些二级镜像会没有iso等安装文件的镜像的，具体可以看这里）下载debian/dists/lenny/main/installer-i386/current/images/下面的boot.img.gz文件，然后执行：
zcat boot.img.gz &amp;gt; /dev/sdX sdX是你的U盘设备。再然后，下一个businesscard文件放到目标盘上，这时候/dev/sdX是一个fat格式的文件系统。重启后，businesscard就会自动运行，如同被刻了一张光盘一样。
简要说一下businesscard，netinst，和完整光盘的区别。businesscard上没有任何安装包，所以你所需的所有安装包必须从网络上抓。这种安装方式下，没有网络就无法安装。netinst上有最小系统所需的安装包，大概100M上下。在无网络的情况下，可以安装出一个字符界面的可联网系统，用于进一步配置。而完整安装光盘把600M多的软件包全打了上去，即使没有网络，你也可以装出一个标准的图形界面可工作系统。2张DVD的那种安装光盘把i386的所有安装包都打了进去，你要装什么都不用上网了。
装大量机器的时候，建议使用businesscard加上缓存代理。</description>
    </item>
    
    <item>
      <title>盗版的盗版</title>
      <link>//blog.shell909090.org/blog/archives/1644/</link>
      <pubDate>Thu, 09 Dec 2010 10:06:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1644/</guid>
      <description>最近追书，很不好意思的，在看盗版。
最新两章，有内容和上面对不上，而且是每个网站都对不上。
联想到上次晚上12点整出书，12:10分出所有网站盗版一起出来的情况——
——这年头盗版商都是盗来盗去的。。。
是不是该考虑花钱看书了啊。</description>
    </item>
    
    <item>
      <title>一个产品的预测</title>
      <link>//blog.shell909090.org/blog/archives/1630/</link>
      <pubDate>Fri, 03 Dec 2010 09:56:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1630/</guid>
      <description>简单点说，我预测客厅电脑会在3-5年成为一个潮流。下面给出一个客厅电脑的可能特性。
1.具有wifi，并且可以做AP。
设备具有wifiAP的能力后，就可以直接取代路由器。不但具有节约一个设备，而且可以做一些比普通路由器更加强大的功能。例如下载托管（关掉主机继续跑ed/bt/http），流量控制，IDS防火墙等。
同时，对于其他设备，可以逐步支持wifi标准，通过wifi操控。例如照明的自动控制，音箱音量智能感知和控制。开放的wifi标准加上UDP做起来并不太难，最大的问题是wifi芯片的成本能降到多少。
2.平均功率&amp;lt;20W，峰值功率&amp;lt;40W，体积大致相当于笔记本。
设备需要扔在电视机顶端或者下面，一直开机的。如果大小太大，或者功率太大，就没有实用意义。
3.内置摄像头和麦克风。
游戏经常需要，同时也可以支持可视电话。
4.支持VGA，支持DVI/HDMI。
兼容高清电视和显示器。
5.最高计算能力。
在保持网络流量的同时可以播放1080p的高清电影。很明显，做不到是没意义的。
6.120G-320G常态硬盘。
一方面是大规模下载需要，另一方面也可以作为多台电脑共享存储的外置硬盘使用。
7.具有晃动光标的遥控器。
这东西是要给普通用户用的，没有遥控器是不行的。但是一些复杂的特性通过遥控器反应太慢，通过鼠标也傻了点。可以考虑采用遥控器模拟成概念上的激光教鞭的方式，沿着遥控器顶端延伸和电视平面交汇成为一个活动光标。
这个东西的实现难点在于，电视屏幕只能发送图形信号，无法接受信号。触摸屏对此没有任何帮助，暂时可以考虑使用android暂代遥控器来辅助。android内部一定带有重力感应系统。将android固定在一个点上，通过对准屏幕上不在一条线上的三个点点击校准，可以建立起以屏幕中心为基准三维坐标系。并且根据每时刻的传感器回馈，可以知道每个时刻的方位和指向。通过这些数据，可以轻易算出交汇点。当然，使用wii类似的系统是个更好的思路。
问题
1.wifi信道不足
要是多几个家庭使用，即使交错信道，每个信道上可用的带宽也会降低到10Mbps以下，折合大约1MB/s。这个速率对于高清电视太勉强了些。比较直观的解决方案是802.11n。
2.成本控制
上面的参数可以看的出，这种东西的主系统硬件不会小于1000。加上各种研发开销，运营成本，要把价格压到1500-2000才有竞争优势。否则主机也就2000-3000，买个客厅电脑，又没有显示器，又不能打游戏。
3.晃动鼠标的技术不成熟
设想很不错，技术不成熟。</description>
    </item>
    
    <item>
      <title>在中国，高薪养廉是个伪命题</title>
      <link>//blog.shell909090.org/blog/archives/1628/</link>
      <pubDate>Thu, 02 Dec 2010 10:23:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1628/</guid>
      <description>高薪养廉的基础逻辑是什么？公务员薪水不够高，就无法维持公务员的廉洁，所以需要给高薪。
恕我直言，在哪里，这都是个伪命题。我们可以看一下这个命题前半部分的逻辑，应用德.摩根率后，我们的结论是“公务员廉洁，他的薪水必定够高”，而不是“公务员薪水够高，就可以维持公务员的廉洁”。在中国，关于后者，有个再直观不过的反例。中国被判刑的高级公务员的涉案金额是多少？上千万算少的了吧，虽然这些钱不能算薪水。但是一个人，弄个千万还不能维持自己的生活么？如果可以，怎么会出现超过千万的贪腐的呢？
高薪养廉的基础，是公务员无法通过权力获得灰色收入。在这种情况下，如果只维持低薪，干的比狗累，活的比猪惨的工作势必会搞到没人想去。哪怕维持社会上的平均工资，公务员也是没有任何吸引力的。拿一样的钱，被一个老板盯着和被一群老板盯着是完全不同的两个概念。如此一来，要维持有足够的人来进行工作，势必需要将公务员的工资提高到正常工资以上。
新加坡在这类基础上，提出了一个类似保险的概念。通过加重查处贪腐的力度，和执行高强度的惩罚机制来抑制腐败。而且规定公务员很大程度上的工资都会被转移到公积金和养老金中，一旦被查出来，这些钱都会被归零。我们可以想见，高强度的惩罚机制会严重的吓阻人才进入公务员领域。花了公家2000要判刑四年？鬼才愿意去干。在这种重刑下，为了能保持公务员人数，唯一的路子只有“高薪”了，这才是高薪养廉的原始逻辑。
在中国，先把权力监督机制和执行高强度的惩罚做起来再说高薪养廉。</description>
    </item>
    
    <item>
      <title>重载造成的隐蔽错误</title>
      <link>//blog.shell909090.org/blog/archives/1626/</link>
      <pubDate>Wed, 01 Dec 2010 10:03:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1626/</guid>
      <description>大家看看下面的代码在什么情况下才会出错？情况很特殊，想自己思考的不要先看第二段。
if ton in self.ftol: self.ftol.remove(ton) ftol是一个list，报出的错误是ValueError。经过上文的打印，赫然发现——self.ftol中真的没有ton！
好吧，我们揭秘谜底。
ton是TimeoutObject类型，这种类型的对象通常放在一个list中进行堆排序，来确定最早的一个timeout对象。为了实现堆排序，我使用了heapq。而为了heapq是没有key或者是cmp参数的，因此我重载了TimeoutObject.__cmp__对象。然而根据python源码，list对象在进行in计算，以及基于in的remove计算的时候，__cmp__先于内置算法，内置算法先于id相同。因此，in函数在进行对象是否在列表中的计算的时候，实际上使用的是一个比较函数&amp;hellip;这肯定无疑的会导致乱糟糟的结果。
为了解决这个问题，我又重载了__eq__函数，定义为self is o。问题立刻解决了。
之所以python内置的算法，会定义__cmp__先于内置算法，内置算法先于id相同，是因为有很多对象需要人工定义比较算法。如果id相同优先，那么这种自定义的能力将无法实现。然而为了in算符中为何会调用__cmp__，只能说是一个不解之谜。</description>
    </item>
    
    <item>
      <title>要这么招人恨也挺不容易的</title>
      <link>//blog.shell909090.org/blog/archives/1623/</link>
      <pubDate>Wed, 24 Nov 2010 14:25:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1623/</guid>
      <description>今天看看笔记本电池，突然想知道一下还有多少容量（不是还剩多少电，那个可以通过windows直接看到）。于是需要找一款笔记本电池查看软件。
我上网搜了一下&amp;quot;笔记本 电池软件&amp;quot;（一开始就没去baidu，刚刚查了一下，果然满屏幕卖电池和讲电池保养方案的），出来了很多中文网页。我看了看地址，是google.com.hk。
再看看这些软件，仔细看看他们的广告词，说的天花乱坠。我不由有点担心，这台电脑可不是linux，要是中毒还是挺麻烦的。
罢了，还是找google.com/ncr去搜一下battery status吧。找个外国软件虽然比较难用，不过基本不用担心里面有木马病毒什么的。
做人要做到这么招人恨也挺不容易的，明明还什么都没干呢，怀疑已经先来了。对比某些国家和地区在某个事件上的处境，我觉得不容易的人不少。</description>
    </item>
    
    <item>
      <title>如何做一个mercurial的http发布</title>
      <link>//blog.shell909090.org/blog/archives/1618/</link>
      <pubDate>Mon, 22 Nov 2010 09:29:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1618/</guid>
      <description>我假定你了解hg，了解python，理解nginx或者其他cgi/fcgi的配置过程。现在想用http发布自己的mercurial仓库，而且可能发布一群，怎么操作呢？
首先，复制模板文件过来，你可以挑选其中之一。以下是debian的文件位置，其他发布请自行查询。
/usr/share/doc/mercurial-common/examples/hgweb.wsgi /usr/share/doc/mercurial-common/examples/hgweb.fcgi /usr/share/doc/mercurial-common/examples/hgweb.cgi 我使用nginx+fastcgi模式部署，因此复制了hgweb.fcgi。我假定你的仓库在~/hg下面，有很多子仓库。复制hgweb.fcgi到~/hg/下，改名为hgweb.py，并修改以下两行。
config = &amp;quot;/path/to/you/config&amp;quot; WSGIServer(application, bindAddress=&#39;hgweb.sock&#39;).run() 其中bindAddress为你需要监听的unixsocket路径，没有前缀表示在当前目录生成。而后建立配置文件，大概为以下内容。
[web] allow_push = someone push_ssl = false [paths] /hg/proj1=/path/to/proj1 /hg/proj2=/path/to/proj2 以上就完成了hgweb的服务配置，/hg/proj1是你的url映射路径，/path/to/proj1是物理路径。someone是允许进行push的人，而push_ssl是允许http推送。而后，启动服务。
python hgweb.py &amp;amp; chmod 666 hgweb.sock 注意，这里要用screen之类的程序来启动hgweb，否则term关闭后服务进程停止，就没的玩了。修改权限是因为debian下的nginx使用www-data运行，对/home/user/hg没有读写权限，导致无法使用unixsock。
在nginx中做以下配置。
location ^~ /hg/ { limit_except GET { auth_basic &amp;quot;Restricted&amp;quot;; auth_basic_user_file /home/user/hg/users; } fastcgi_pass unix:/home/user/hg/hgweb.sock; include fastcgi_params; } 如果你不需要auth，可以自行参照nginx的配置修改。其他web服务器以此类推。重启服务后，http://domains/hg/proj1 就可以访问到proj1了。
当然，其实最后还要提一句，如果你不需要web界面，可以直接设定将文件内容直接发出去，这样也是可以做pull/push的。
参考： http://mercurial.selenic.com/wiki/PublishingRepositories</description>
    </item>
    
    <item>
      <title>为什么高性能框架都是http的</title>
      <link>//blog.shell909090.org/blog/archives/1613/</link>
      <pubDate>Tue, 16 Nov 2010 10:18:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1613/</guid>
      <description>很多高性能的web框架，例如沈崴的euraisa，fackbook的tornado（这两个都是python）框架，都是http的。这和我们的印象相反，python，或者其他高级语言不是都很慢么？为什么都用这个来做http服务器呢？
这个我们得从服务器架构开始说起。最初的时候，没得说，所有的都在同一个机器上，甚至可能使用cgi模式。在访问压力上去后，为了增强性能，首先被拆出去的应该是数据库服务器。而后会考虑使用fastcgi或者scgi进行部署，前面使用apache或者nginx做前端。在这个时候，fastcgi是有道理的。因为apache在静态文件处理的性能上远高于python框架（而且快数倍），而nginx在大规模静止长连接的情况下性能更优异。而且，更进一步说，在性能压力加大的时候，应用服务器会被拆分，这时候apache/nginx做反向代理很容易做到负载均衡集群。
然而，如果压力再上去呢？在这种情况下，通常考虑的两件事情是静态文件拆分单独的服务器和应用服务器的硬件负载均衡（没钱的话也得考虑LVS了）。道理很简单，即使服务器性能能无限提升，网络接口的性能也不会无限制的上升的。完成这两步后，我们再来看整个架构，会发现反向代理变成了一个鸡肋。静态文件处理？不在这些服务器上了。负载均衡，系统级有了。apache/nginx有什么用呢？难道就是把http协议转换为fastcgi协议？
所以说，要达到高性能，框架应当是直接处理http的，并且支持大量的客户进行长连接。当压力小的时候，使用nginx的反向代理模式进行工作（而不是fastcgi协议）。当压力大的时候，拆开静态文件，直接上去服务全社会。</description>
    </item>
    
    <item>
      <title>中国有IT业么</title>
      <link>//blog.shell909090.org/blog/archives/1611/</link>
      <pubDate>Wed, 10 Nov 2010 17:43:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1611/</guid>
      <description>中国有IT业么？大家这么多年，看着IT业红红火火，其实神马都是浮云。
1.中国有宽带接入么？
没有，你可以找中国的强制法律文件，什么是宽带。结果只有字典上的定义，而没有强制标准。如果没有一个法律意义上的强制标准区分宽带，怎么能说什么是宽带，什么不是呢？结论就是，任何人都可以说——我在用宽带。这不等于没有？在唯一的一个WIFI接入加密标准和其他国家不同的国家，一个什么标准都要自定的国家，却没有宽带标准，真TMD扯淡。即使我们不说国家强制标准，我们说国际标准。目前上国际对宽带的定义已经是4Mbps，而中国目前大多数家庭所使用的标准还是1Mbps，偶尔见到有2Mbps的。而且大多数人的网络接入价格还和5-6年前没有任何变化。即使考虑通胀，我们说电信资费其实在缓慢下降，这和电信接入高速发展的事实也毫不相符。
2.没有宽带接入又如何？
我们要知道一个事实，中国的10亿网民，事实上都在使用窄带接入。宽带和窄带的最大差别在于，窄带只能承载文字和图片内容，而宽带可以承载高清视频/声音。中国大多数网民都是无法享受高清视频/声音的，也没有机会享受in touch的信息服务。缓慢的网络速度注定你在使用网络的时候，下载到一个图片，就要在本地保存起来。下载一个光盘，就要保存起来。你不能像云端一样，将数据托管在网上，当需要的时候再下载。我们的硬盘，变成了巨型的互联网缓存器。
3.现在的互联网业不是挺红火？
贝壳原先听说过一个笑话，说眼镜一定要好好配，否则怎么怎么的。台下有人说，我的眼镜配的很好，眼睛去验光和眼镜完全一致。台上讲师冷冷的说了一句，配的不好的眼镜还有个缺点，戴个一年你的眼睛状况就会跟着眼镜走。。。
互联网也是一个类似的情况。贝壳调查的结果，很多用户并不介意接入商是否封锁P2P下载，很多用户也不介意带宽不足，因为他们只用QQ，上天涯和猫扑，早上要起床偷个菜。所以网络一定要随时通，其他就不要紧了。我们说我们的互联网业，其实是在中国的网络状况下，发展出来的畸形品。天涯，猫扑，QQ，都是低带宽时代的服务，但是直到今天经久不衰。用户黏性是一个原因，另一个原因是更强大的，具备下一代特征的服务根本跑不起来。QQ也发展过视频聊天，结果也就是网友准备找419乃至更极端的援交前要“验货”的时候用。你见过有人和朋友天天开个音频聊个不停么？有人说国外也没有啊，问题是人家手机通讯什么价钱，我们什么价钱。你见过开土豆和优酷慢到死的，土豆还专门出了客户端加速。你见过开youtube卡到死的么？中国不算。youtube在研究什么技术？高清视频分享。你试试让土豆出个720p视频分享看看？不说CDN费用，光是等待时间就会让用户跑光。
4.将来呢？
我不知道。如果中国宽带仍旧保持现状的话，在网络高速发展的背景下，中国的网络应用也许会在3-5年内就会再落后人家一代。在人家用着随手可得的高清视频的时候，我们还只能接受IPTV这种专用替代品。不过严格论起来，这也没什么，毕竟中国从来没心思在这方面真的赶超英美。。。</description>
    </item>
    
    <item>
      <title>小公司的架构选择</title>
      <link>//blog.shell909090.org/blog/archives/1610/</link>
      <pubDate>Tue, 09 Nov 2010 11:09:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1610/</guid>
      <description>很多大公司都是从小公司起步的，往大做的时候，往往会受到很多制约因素。架构选择不对造成的问题很多，所以很多小公司都在架构选择上精打细算。其实架构问题，在公司规模小的时候，更大程度上是一个行政问题而不是一个技术问题。
小公司的特点是人少，往往就那么几个人。这种情况下，与其说是你选架构，不如说你看看有什么可用的架构。通常来说，你要考虑的问题是。
1.你有没有可以信任的核心工程师？
2.能不能找到足够的人手做大部分的事情？
3.能不能在你要求的时间范围内把事情做掉？
4.这个架构有没有成功的例子，能不能支持大规模的访问？
当这些问题都没问题的时候，你才应该考虑，这个架构性能够高么？容易扩展么？
如果你没有可信的人作为核心工程师，项目管理和控制根本无法进行。就算要评估一下手下这些人是不是真的需要这些时间来做事，得到的结果都是不可靠和不可信的。如果找不到足够的人手做事，那除非你的核心团队能够一个人或者几个人把网站整个做出来，例如豆瓣的阿北，否则项目做做就没人，就玩不下去了。如果架构很好，但是无法在要求的时间内做出事情来，等于没用。满足了上述几点，你还得兼顾考虑一下，这个架构如果没有成功案例，是否存在隐性的风险。如果不支持大规模访问，将来的扩展问题。
好吧，作为一家小公司，我相信你考虑完以上几点后，能凑出一个框架来已经很不错了。往往是你的核心团队没有一个核心工程师，大家会几种不同的架构，而且没人能保证评估结果。
这时候，不要废话，先找个核心工程师，然后用最土的，被无数人验证过的技术来把你想做的事情做掉。
除非你的核心团队有且仅有一个核心工程师，并且这个工程师的技术能力很强，管理者和投资人也支持他冒风险。否则大部分使用激进架构选择都会带来不良的结果，毕竟大部分公司都不是以开发框架和研发技术为最终目地的公司。</description>
    </item>
    
    <item>
      <title>QQ和360之争</title>
      <link>//blog.shell909090.org/blog/archives/1609/</link>
      <pubDate>Mon, 08 Nov 2010 21:55:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1609/</guid>
      <description>两个流氓狗咬狗，老子一个都不用了。老子是Linux用户。。。</description>
    </item>
    
    <item>
      <title>单纯评价制度的影响</title>
      <link>//blog.shell909090.org/blog/archives/1607/</link>
      <pubDate>Thu, 04 Nov 2010 09:37:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1607/</guid>
      <description>下面的讨论对事不对人，请不要自行套上OOXX的内容，谢谢。
我们假定有个游乐园，叫做OOXX游乐园。有很多投资人，时髦点，叫做股东。他们不亲自管理游乐园，于是他们找了个经理。大家知道，游乐园经营的好坏，经理起很大作用。所以股东要评定经理的能力，并给予相应的报酬，这样才能刺激经理努力工作。那么我们如何评定经理能力呢？
首先我们想出的最简单指标是入园人数，不过很快，也被我们推翻了。很简单，如果我们和经理约定好他的工资和入园人数挂钩，他上去干的第一件事情就是打折和送票，哪怕每张票是亏的都好，只要入园人数满了7KW，他就可以拿高薪了。亏本和他有什么关系呢？
第二个方案是通过总收入来衡定。好，这个方案看似没漏洞，不过很快，也被我们找到了一个漏洞。经理可以给员工高额回扣进行门票销售。例如，一张门票的通常价格是20，经理可以将门票价格提升到100，但是员工内部卖出去的票，给予员工80的回扣。在计算的时候，回扣是按照人力资源成本来计算的，门票是按照纯收入来计算的。
第三个方案是通过盈利来衡定。这个稍微难钻空子点，不过只要这个经理有任职年限，也还是有办法的。这个经理可以在每年的年底，预销售一些游乐园的打折券和团体券，并且每年逐步扩大预销售规模。这样会让每年的财报非常好看，但是，出来混，迟早要还的。这个经理拿了全部的奖金，直接离职走人，下一任看到数以百万计的人拿着打折预销门票入园，为了保住自己的饭碗，只有卖更多的打折预销门票。直到整个年度的所有客流全变成预销门票的时候，戏法就变不下去了。
也许有人会说，怎么有那么傻的事情啊，这些方法看一看就知道了。是啊，问题是，我们的题目正是，单纯评价制度的影响。如果不通过常务股东大会来制衡，动态的改变博弈方式，而仅仅通过单一的参数评定方法。那么经理有无数的方法来钻漏洞，走空子。</description>
    </item>
    
    <item>
      <title>twip在hawkhost上问题的解决</title>
      <link>//blog.shell909090.org/blog/archives/1604/</link>
      <pubDate>Wed, 03 Nov 2010 17:39:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1604/</guid>
      <description>这两天twip的api不正常，跑上去看看，有个错误。
**Fatal error**: Cannot redeclare class OAuthException in **/home/shellcom/public\_html/apis/include/OAuth.php** on line **8** 这时候，找到include/OAuth.php，改成这样。
#class OAuthException extends Exception { # // pass #} 问题就暂时解决了。
这是因为主机上新装了什么库，这个库自己也定义了OAuthException（会定义这种异常的，估计是OAuth库）。所以，把这个自定义的异常移除，问题就暂时解决了。</description>
    </item>
    
    <item>
      <title>圣元蒙牛，谁冤枉了谁</title>
      <link>//blog.shell909090.org/blog/archives/1602/</link>
      <pubDate>Tue, 02 Nov 2010 11:26:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1602/</guid>
      <description>止尿喝三鹿，丰胸饮圣元。圣元奶粉性早熟事件还没过去，又出来蒙牛陷害说，大家打架打的真热闹。最终用户可不管到底是谁冤枉了谁，总之，圣元蒙牛统统不买。现在国家立法尚屡禁不绝的外国邮购奶粉就是证明。
圣元和蒙牛陷入罗生门，显然是国家，或者说行业失去信用的标志。如果行业有足够的信用，只需要相关部门辟谣，就可以澄清问题，挽回影响。然而现在我们看到的情况是，相关部门越辟谣，越是没人买。想想也没什么奇怪的，阜阳大头娃娃，三鹿，熊猫，中国在过去的五年内出了太多的奶粉问题。光是出问题到罢了，关键是出了问题后对责任人的追究和对受害人的补偿。三鹿倒闭和收购，对受害人的清付实际为0。换句话说，受害人，凡是拿到赔付的，都是从我们的税中来的。说到这里我就气不打一处来，卖奶粉的造的孽，你让我一个玩IT的顶缸。而且凡是对国家赔偿不满意的受害者，现在也没什么实际的追偿渠道了。这实际上告诉所有人，国家给你的，你就拿着，想多要的，这点都不给你。
这种蛮横和无理的做法，果不其然遭到了天下所有家长的反对，邮购奶粉盛行一时。没追偿机制，我不喝总行了吧？结果国家又制定法律，从国外邮购需要收税，而且很明白就是冲着奶粉去的。实话说收税到不是什么错误，邮购国外产品早该收税了。但是这能让不放心的用户买国产货么？
你们继续打你们的去吧，我去喝米汤。。。</description>
    </item>
    
    <item>
      <title>ubuntu release party</title>
      <link>//blog.shell909090.org/blog/archives/1599/</link>
      <pubDate>Mon, 01 Nov 2010 09:34:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1599/</guid>
      <description>会开完了，流水帐就不记了，总结几点问题，以后注意。
1.抽奖程序可以当场写，逻辑一定要事先验证。这次抽奖程序的逻辑出现了重大误差，所有值抽完后才去更新命中集合，导致样本空间和总空间相差不大的时候重复中奖。
2.人无任事事不应人。志愿者不知道应该做什么，求助者不知道应该找谁。那天Thomas说他忙不过来，但是其他人又聚堆聊天就是个明证。
看上去找个专门的人进行前台咨询是个很有道理的做法，最好找个MM，问明白求助者的意图后推给合适的志愿者。
3.位置错误。大会上的人基本分成两群，一群是lug里面的，或者在圈子里面的熟人。另一帮则是专门跑过来的新手，还有当地的学生。前者在左侧大门聊天，阻挡后者的视线。大会的基本目地就是增进交流，聚众聊天无可厚非。但是聚集在显示屏前位置很不合适，这主要是因为圈子里的人基本在第一排入座，互相一找就聚在了显示屏前。
这种问题纯是现场场地问题，下次应该找个不干扰的开阔地给圈子里的人扯淡用。
4.秩序混乱。在一等奖领奖的时候，出现了一个人上去拿了东西，发现给错人的状况。
主席还不知道cheng说了一点很要精确的观点，我们没有事先登记。类似大会应当设立前台登记并发放名片卡和编号，这样做有几个好处。首先是组织方获得了潜在的用户名单，其次是大家互相交流的时候比较直接，至少知道对方怎么称呼，最后是抽奖的时候不会出现自行核对号码的难题。这次是按照座位号，没有出现太大混乱只能说受众素质还不算太低，或者我们的奖品他们不感兴趣。否则以中国人的聪明，只要座号相似，大家上去浑水摸鱼主办方也是有口难言。
5.缺乏引导。这个问题最严重，主要是30人的三等奖领取混乱，礼品发放混乱和哄抢。
礼品发放混乱和哄抢和三等奖的领取混乱是类似问题，都是组织者没有合适引导。Thomas认为这是个素质问题，我觉得这应该是组织方问题。任何open party，对应低素质人群是基本预案。中国人的一大毛病是只会听别人口号行事，没人喊口号就不知道该怎么动了。三等奖的时候大家还不错，总算都是从左边上台。虽然情况稍稍有些凌乱，还在可接受的范围内。要是有几个右边上台的，情况就更乱了。而且没人说的话，台上的人也不知道要不要留一下，让下面拍个照什么的，还是直接下去。奖品发放也有类似问题，没人告诉拿奖品的人，奖品数量，怎么排队，怎么退场。就看到半个场子的人一拥而上，Thomas瞬间被淹没了，然后在那里狂喊大家守秩序，有点素质。问题是这时候，谁知道秩序是什么东西呢？通常应当事先告诉拿奖品的，有多少奖品，从右边排队，领取后不要停留，左边快速退场，并且派人规劝。虽然即使这么做了，也不一定保证顺利，但是场面功夫还是要做的。
总结一下几点可改进的要点：
1.事先一定找人发卡片，让用户填写后挂在自己身上。组织方可以自行留录副本。
2.找个专门的，不影响活动的区域给志愿者。
3.找个前台MM，所有问题都找她，她再介绍专家。
4.事先验证抽奖程序的逻辑，这个是我的问题，自行解决。。。
5.除了主持人外，要有适当的人作为台下的协调和引导者。
不过总体来说，这次release party的效果还不错，社区组织发生混乱本来就在意料之中。多来几次组织者有经验就好了。
另外，事后我们集体跑去Thomas(不是台上的鬼鬼小朋友，而是Debian的DD，他的名字是法文，s不发音)家里扯淡吃东西，打德州扑克打到三点。贝壳第一次玩，赢光了其他所有人的钱，哈哈哈哈哈哈哈哈。</description>
    </item>
    
    <item>
      <title>疯言疯语（六）</title>
      <link>//blog.shell909090.org/blog/archives/1597/</link>
      <pubDate>Wed, 20 Oct 2010 09:32:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1597/</guid>
      <description>1.我们怎么确证世界存在
我们如何确认世界是存在的，而不是被想象出来的呢？首先，我们不能询问世界上的某个人，因为既然这些人是被想像出来的，那么在询问的时候，存在可能，这些被想象出来的幻影会集体欺骗你。其次，我们不能通过查探世界的特性而确证，因为这个世界的逻辑和存在，可能被调和成某个内在逻辑基本一致的情况。直白的说，这个想象的主体，只要自己有一套世界存在的观点，并且坚信自己的观点，那么你对世界特性的任何查探，都将是基本一致的。
结论是，我们无法确证世界的存在，我们只能相信它。
2.科学也是一种信仰
科学家必须相信，逻辑是稳定的，一致的。无论我们是在一个真实的世界中，还是在一个虚幻的世界中，我们都可以研究周围事物的特性。然而作为科学的必要条件，集合论和逻辑学等思考科学必须是一致的和稳定的。例如，我们通过观测，一只比门洞大的猫无法通过门洞，一只比门洞小的猫可以通过门洞，并且重复观测到多次。经过同行确认后，我们可以归纳出结论，凡是比门洞大的猫都无法通过门洞。其中的逻辑就是一般归纳法。然而，如果一般归纳法是错误的呢？
当然，我们也许可以说，这显然是成立的。然而在这里，你就犯下了逻辑思考的第一个错误。你已经“相信”归纳法的成立，在你确证它成立之前。然而，我们反过来，如果我们不相信任何思考科学的成立，那么我们什么都无法做。于是，我们凭借常识，*believe*基础逻辑学和集合论。所以，我们观测和归纳世界，得出整个科学系统。
显然，这种系统也是一种基于信仰的系统。如果我们换位言之，我们不相信逻辑学和集合论的显然存在（而且这可以被逻辑学部分的自证），相反信仰一个超自然的存在。当然，在这里使用某个具体的神祗并不合适，所以我借用飞天面条神。那么，根据神的信仰系统，我们的观测，和逻辑系统，都是被神故意设定成如此的。由此，我们也可以得到一个部分自洽的系统。除了——唔，当然，要我相信逻辑学是成立的比让我相信某个飞天面条怪物的存在更容易一些。
3.我们的终极问题
世界是真实存在的么？
世界从哪里来？
世界最终会结束么？
物质可以无限细分么？无限细分的结果是什么？
世界有边界么？边界之外是什么？
我为什么成为我？</description>
    </item>
    
    <item>
      <title>旅游的一些要点</title>
      <link>//blog.shell909090.org/blog/archives/1593/</link>
      <pubDate>Tue, 19 Oct 2010 09:40:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1593/</guid>
      <description>通常的旅行，要记得带身份证，小毛巾（用于擦汗，通常徒步一类的行动中比较重要），到当地后记得随时带一瓶水。适当的带换洗的衣物，有些城市有洗衣店，有些没有。青年旅社也是可以洗衣的，但是并没有什么保证。
旅行会受到种种的限制，时间，金钱，体力。要在事先做好功课，选择合适的线路。通常学生会更受限于金钱，因此建议选择健行线路，出行的时候也尽量搭乘公交（当然，这等于要你带上GPS）。工作后的人多数金钱上问题并不特别大，统计数据显示我们大部分的钱都花在了来回程的旅费，住宿，门票一类的地方。真的在当地花的钱只是小头，例如公交/出租，饭店选择，对总体价格下降帮助有限。然而，这些小头上花费的钱，很大程度上决定了你玩的开心不开心。因此，对于工作后的人，不要在小头上省钱，不要浪费体力。如果真的想降低成本，提前预定机票，住青旅。
出行问题基本几个方案，地铁，公交，出租。出租很方便，但是比较贵，而且并不是所有城市都能轻松叫到出租，例如杭州。地铁系统的好处是大部分城市的地铁系统都没有复杂到人无法记忆的程度（北京和上海这种变态例外），并且地铁网覆盖了大部分城市。很多时候你往往无法找到回住处的路，但是只要你知道如何从地铁网络回到住处，这个问题就变成了如何到达地铁网络&amp;mdash;-大部分的城市，你问任何一个人都可以找到答案。通常不建议使用公交，因为公交系统非常复杂，而且多变，通常超出了人脑能处理的范围。在预定行程的情况下还可以抄下每站的公交换乘方法，动态行程根本不现实。而且即使是预定行程，你也可能碰到公交改道，节假日限行，或者停靠点明明离目的地很近，但是必须绕路之类的恶心问题。
认识路的问题，建议装备GPS。使用谷歌地图，可以在大部分城市中任意行动，甚至包括搭乘当地公交系统。如果没有GPS，就很难行动自如，这种情况下就需要依赖出租和地铁系统。谷歌一类的网络GPS系统的好处是，可以动态的查知信息。因此即使改变行程，也可以随意的在城市间游荡。另外强力推荐大众点评一类的旅游LBS服务，一旦你到了哪里需要吃饭，他可以查知当地美食，让你不走冤枉路，不花冤枉钱。
如果住青年旅馆，需要带牙刷，牙膏，洗发水，沐浴露，毛巾，梳子，拖鞋。总之，一切在宾馆该出现的东西都应该在你的包里。如果是去海边，拖鞋千万别忘。去海边有的时候沙子很痛，穿个拖鞋会舒服很多。虽然很多青年旅社是提供拖鞋的，但是你不会好意思穿着这个拖鞋去海边的。如果液态物品不方便带，可以带一块肥皂，洗头洗澡洗毛巾都方便。
去一个城市，要精确的算好行程，密集游玩。一个城市去三天，就在这个城市里把该玩的地方都玩齐了，没有遗憾。下次想再来是下次的事情，切忌三心二意。去一个城市玩到一半，觉得没有什么太精品的景点了，看到旁边有个什么景点不错，去个一天之类的，这样只会让你两边都玩不过瘾，下次要去两个地方。
城市里最怕语言不通，其次是不认识路。不认识路可以问，语言不通寸步难行。所以如果想多去几个地方玩的话，多学点语言。一般比较有用的语言有，英语，普通话，广东话，闽南语，日文，西班牙文，其中最后一个主要是在欧洲和南美洲玩的时候比较常用。基本来说，有英语，普通话，广东话，足够你在世界大部分地方玩了。
出行的时候要带适量现金，大约能支撑当地两天的活动为准。如果太多，容易发生遗落或者被盗，即使没有，出去玩还提心吊胆的就没意思了。如果太少，可能你还没有找到ATM机就已经在哪里叫天天不灵了。出门可以刷卡尽量刷卡，尤其是信用卡，通常比较安全。千万需要注意的是，一旦你离开团队。例如多人旅游去上厕所，或者跟团的时候去买东西。你可以不带任何东西，但是一定要带上当地有效的身份证明和手机。如果是在大陆活动，手机虽然处于漫游状况，费用比较贵，但是仍旧可用。如果到大陆以外活动，尽量开启当地漫游业务，或者购买当地SIM卡。一旦你在陌生的城市中失去手机，那么你就失去了和同伴联系上的机会，由此而来的麻烦可能会耽误一到两天的时间。
其实看完文章，贝壳想想笑了。说白了，你带上身份证明，带上信用卡，带上一台配置好的android手机，再带上自己，就可以随便去哪里玩了&amp;mdash;-如果你不太计较的话。</description>
    </item>
    
    <item>
      <title>不靠谱</title>
      <link>//blog.shell909090.org/blog/archives/1506/</link>
      <pubDate>Mon, 18 Oct 2010 10:51:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1506/</guid>
      <description>在公司中，有这么几种不靠谱行为，粘上就容易身败名裂，具体程度和人品以及不靠谱程度有关。以下排名分先后。
1.自以为是的客户需求。主要是说由程序员来搞的需求，以为搞的挺好，其实客户完全不鸟你。
2.老板定的开发周期。不用说，就像色狼为美女挑的泳装，肯定太紧。
3.废物员工。不怕神一样的对手，就怕猪一样的队友。不但没有贡献，只会拖后腿。
4.迫于压力不写文档，延后文档或者仓促写。都是废品产生的先兆。
5.过于激进的架构设计/技术选择。听起来挺好，问题是，您能玩的转么？
6.指手划脚的客户。神一样的对手。
7.钱不是问题。问题是没钱。</description>
    </item>
    
    <item>
      <title>在厦门（四）</title>
      <link>//blog.shell909090.org/blog/archives/1505/</link>
      <pubDate>Sat, 16 Oct 2010 10:19:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1505/</guid>
      <description>今天是在厦门的最后一天，我们准备去爬仙岳山，结果早上就碰到个不痛快的事情，贝壳找不到青旅的房间钥匙了。收拾东西的时候再找了一遍，确信是不见了，只好赔了50，很贵的说。所以说大家出门千万小心，万一是别的卡找不到那就不止50这么简单了。
虽然很郁闷，该玩的还是要玩。去爬仙岳山主要是因为他的难度适中，大约2－3小时可以爬完。五老峰就在青旅后面，看起来景色更好，但是据说要3－4小时。我们早上9点出门，中午12点前要去退房的，否则要加一天房费。加之高度比较陡，可能会比较疲劳。想想旅行最后一天了，没想给自己找麻烦。当然，五老峰和万石植物园相连，早上6点后需要收60每人的门票也是个原因——但是我真诚的建议你忘记他，只要记住前两个原因就好了。
出门打车，倒了仙岳山下。话说厦门打车还真不贵，一般都是9元搞定。最多的一次要了20——还基本穿越了小半个厦门。我们从南门入的山，向上不久就是一座寺庙。寺庙前后都是山，盖的雄壮威武——除了没建完之外。绕了半天，没发现上山的路，我们回去走另一条路，结果通向了一个什么美食林。大概就是一堆盖在山顶的饭店，对此我们没什么兴趣。沿着小路逆时针绕山，一路景色非常不错。能在都市里面保有景色这么好的一片土地倒是相当难得阿，当然这首先得益于厦门和厦门人的独特风情。沿着小路绕山而行，我们走到北门附近，才算找到出口。不知道为什么，应该有个东门的，可是没找到。许也是我们路上的某条小路通向东门吧。
从仙岳山下来，我们打车直奔SM生活广场。不知道哪个起的这种猥琐名字，我想有心人都在偷笑了吧。不过里面的东西还是挺不错的，芒果牧场，战锅策。芒果牧场的榴莲班戟非常好吃，建议大家一定要点。西瓜冰也很赞，很有西瓜泥的味道。不过可惜和战锅策一起吃是个最大失误，贝壳因此闹了两天的肚子。话说回来，战锅策的鱼肉粗面很有创意，用做奶油蛋糕用的写字喷枪袋，装上鱼肉糜。挤压出来后就变成了鱼肉粗面。贝壳吃过不少滑，还是头一次看到这样的滑类做法。</description>
    </item>
    
    <item>
      <title>blog迁移公告</title>
      <link>//blog.shell909090.org/blog/archives/1504/</link>
      <pubDate>Fri, 15 Oct 2010 10:56:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1504/</guid>
      <description>由于live spaces终止服务，因此贝壳的壳迁移到自己的空间了。地址为：http://blog.shell909090.org/blog/。系统为wordpress，原有资料保留，图片会重新整理。欢迎大家前来踩。</description>
    </item>
    
    <item>
      <title>在厦门（三）</title>
      <link>//blog.shell909090.org/blog/archives/1500/</link>
      <pubDate>Thu, 14 Oct 2010 16:20:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1500/</guid>
      <description>今天我们的行程预定是去厦门大学玩，然后去曾厝�和胡里山炮台。早上去厦门大学这一段执行的很不错，厦大很漂亮，房子，树都很不错。进去后漂亮MM很多，不过很多都是摆pose照相的——全是游客。然后——亲爱的谷歌地图就给我们瞎指路了。它告诉我们，有个叫做厦大水库的水库在前面，所以我们就走阿走的，走了一个很大的上坡。然后发现——GPS信号显示我们正在厦大水库的正上方，可是我们只是在一条上山的道路上，而且旁边全是学生宿舍。我靠，这个错误太离谱了吧，难道要我们走回刚刚的大上坡？
我们左右找了一下，后退一点后找到了一条通向山下的小路，下面是个叫做芙蓉隧道的地方。没办法，修整一下，买点东西，我们就直接冲入了芙蓉隧道。顺便提一下，厦大这里有很多叫做芙蓉的地方。芙蓉一楼，芙蓉二楼，芙蓉隧道，不知道芙蓉姐姐是不是这里出来的（笑，melody同学不要打我）。芙蓉隧道很长，大概有一公里多，里面有很多涂鸦，比交大桥下涂鸦多多了，而且还有很多空地。我们一路走隧道就一路拍过去，贝壳边走边哼歌剧cat的成名曲memory，那天被打扰到的同学对不起，你们就当是野鸭叫好了。
从芙蓉隧道出来，我们居然到了曾厝�，谷歌地图，让我说你什么好？在曾厝�我们喝了一杯八婆婆烧仙草。烧仙草是一种植物的果冻，类似龟苓膏之类的东西，加上各种材料组成的饮料。我们这次点的是组合了花生，牛奶，还有一大堆果仁的，很好喝。前后转转，没有什么好玩的，打车去了胡里山炮台。我们从厦大白城那个方向的环岛木栈道上走过，当时正好是涨潮，海水打在细沙上，踩上去很舒服。栈道有一段正在海里，海水拍打岸礁，如千年不变的旋律。走了栈道，我们就不想去胡里山炮台了，反正我们对爱国主义教育不感兴趣，克虏伯大炮的基础原理和演示在wiki上比在那里还准确呢。干脆打个车，到南普陀寺吃素斋。
南普陀的素斋是很有名的，当然也很贵。我们去的时候正赶上高峰，他们只做套餐。我们要了四菜的套餐，居然要价120，在一顿晚饭只要10就可以吃饱的厦门，这算是挺高的了。不过四个菜搭配挺合理的，一个汤，一个主食，一个甜点，一个菜。汤是豆腐汤，烧的很精致，里面好像放了姜丝，却找不到。主食其实是炒米粉，里面有点菜，叫普陀米粉的样子。甜点叫香泥藏珍，其实就是芋艿泥，很甜。里面包了各种东西，吃不出什么的样子。菜很好吃，不知道是用什么做的，但是像是椒盐香肠的样子。对于想去的人，总之就一句话。不去终身遗憾，去了遗憾终身，旅游大抵就是这个样子。
吃好饭，我们会去睡了一觉。再起床已经是下午4点，我们回到厦大白城去骑海上自行车。这时候已经是潮落的状态（虽然实际上还是在涨潮的），海水落去不少，露出了海床上的粗沙。看来厦门这里的海都是粗沙海，细沙只是为了观光和漂亮专程运过来的。海上自行车还是挺靠谱的，不大像会落到水里的样子，总体来说，挺好玩的。骑好海上自行车后，沙滩上有人专门做帮人冲脚的生意。一块钱，帮你把脚冲干净再擦干，比以前方便多了。
晚饭我们去了中山路步行街，那里很热闹，有很多骑楼。我们随便吃了点东西。思明南路有一家叫做仙草南路的烧仙草店非常不错，用的是花生，还有一堆不知道什么的东西，只要9块。在快到码头的地方，有一个沙茶面，10块加三样东西，很好吃。</description>
    </item>
    
    <item>
      <title>简历</title>
      <link>//blog.shell909090.org/blog/resume/</link>
      <pubDate>Wed, 13 Oct 2010 17:16:48 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/resume/</guid>
      <description>教育经历 GFW Certification 2011年10月 专业技能 LPI Certification Level 1 2006年 上海交通大学 机械和动力工程学院 工业工程专业 2005届（毕业） NC网络安全证书 2002年 北京市牛栏山一中 2001届（毕业） 上海市交大二附中 1998届（毕业） 技能 C/C++ 1995年开始使用 精通 Linux 2005年开始使用 熟悉Debian及其衍生系统 了解SuSE/Redhat衍生系统 熟练 Python 2008年开始使用 精通 Oracle 2005年开始使用 熟练 Golang 2012年开始使用 熟练 web框架 自己写过一个 工作经历 路烁科技(Autonomic.ai) SRE (2018.08-) 管理autonomic.ai在华所有集群 协助公司技术团队的招募和组建 上海拉扎斯网络(饿了么) SRE经理 安全架构师 (2016.11-2018.07) 管理SRE团队 完成了influxdb集群化改造 完成了KMS系统一期，集中管理饿了么所有证书 上海七牛云存储 python程序员 golang程序员 安全经理 (2013.09-2016.09) 设计并实施了七牛内部管理用骨干网 管理漏洞/补丁的发现，评估和应用 补丁系统 自动检查服务器的补丁包安装情况，对需要打补丁的机器进行提示 使用Python 负责七牛和安全社区的协调工作 配合实施了多次内部安全渗透测试 实施了多次安全培训 撰写了七牛安全规章（草案） 统一登录系统 使用openldap+openvpn统一所有需要登录的内部系统的帐号 齐治科技（上海）有限公司 python工程师 C++工程师 技术总监 (2009.</description>
    </item>
    
    <item>
      <title>在厦门（二）</title>
      <link>//blog.shell909090.org/blog/archives/152/</link>
      <pubDate>Wed, 13 Oct 2010 14:43:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/152/</guid>
      <description>今天去鼓浪屿玩，从轮渡有两种方法上岛。一种是坐大渡轮，要8块，一大群人傻兮兮的站在一个大轮渡上，像鸭子一样的赶过去，不过据说单向收费，去不要钱。另一种是快艇，基本不排队，只要10块。但是一人不走，需要6个人。包船60，他们也不会帮你找人，所以要学会自己拉人。船很快，很颠簸，总感觉在撞击水面，自己像是要被甩出去的样子。上面是无法照相的，所以请照相爱好者不要高兴的太早。
岛上大多数早餐和商店9点开门，建议不要去的太早，以免傻兮兮的干等。从小路向里走，到一家餐厅吃鲨鱼丸汤，鱼丸很有弹性，有嚼劲，只要10块，贝壳强力推荐。他们家的海鲜面很鲜，但是没什么特色，要20。我们首先去的是风琴博物馆，环境很美。后面可以走一条小路爬到岩石上，俯瞰整个建筑。10点有人表演管风琴，爱好者一定要挑对时间去哦。内容并不好，我听到的是婚礼进行曲，而且技术一般。
从风琴博物馆出来，我们往日光岩走。日光岩要60，很贵，其实有鼓浪屿五个景点的套票，但是看了看，其他的都是些不好玩的景点，所以还是单买了日光岩的票。日光岩是一块大岩石，处于鼓浪屿的最高点。其象征意义更大于浏览意义，厦门真正的精髓是在悠闲的大街小巷中。60的门票包括琴园，和日光岩通过缆车连接。由于门票一旦使用就无法出门，因此除非不去琴园，否则必须坐缆车。当然，这无疑造成了缆车的拥堵。所以建议日光岩景点，在热门时间仔细考虑。我们大概等了半个小时，但是就坐下来的结论，从琴园去日光岩的队伍比从日光岩去琴园的短，所以大家可以选择在西林，先上琴园，会省不少时间。日光岩本身没什么好看的，虽然能够俯瞰厦门，但是上面全是人。与其看风景，不如说是看人。琴园里面有个百鸟园，把一堆鸟关在大园子里。实话说我找不到这种东西存在的意义，没有历史意义，反而是对历史的破坏。把一个别人不喜欢看的景点和鼓浪屿最著名景点门票打包出售，搞不懂当地政府在想什么。
回程的大渡轮需要收费，快艇则是15。来回不对称，请要去的朋友注意。最后记录一个趣事，我们住的青年旅馆的洗衣机总是像狗叫。衣服一放进去，半边洗衣筒摩擦就发出一声。往复起来就像汪汪的狗声。</description>
    </item>
    
    <item>
      <title>拜神兽记</title>
      <link>//blog.shell909090.org/blog/archives/151/</link>
      <pubDate>Tue, 12 Oct 2010 16:05:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/151/</guid>
      <description>今天跑到西郊公园去看了一回神兽。如何碰头，如何进动物园都比较无聊，按下不表。说点有意思的吧。Thomas喂狒狒的时候，大狒狒总是抢小的东西吃。于是他就盯着小的扔，直到小的也吃到为止。路上我们看到有条红领巾放在路牌上面，他就跑过去，想戴上。结果好久不系红领巾了（贝壳好像也好久了），都忘记怎么打了。在别人的帮助下，戴上领巾，照了一张，放回去走人。
然后，然后我们就找到了神兽。不愧是神兽阿，当着我们的面就OOXX了，有图为证。真是，真是，真是，太不和谐了。过了神兽，我们看了一些比较有意思的动物。有firefox（其实是red fox），leopard，lynx。最后还有python，cobra。非程序员也许无法理解这个笑话，稍微讲解一下。firefox是浏览器，非常有名。lynx其实也是，不过是字符界面的，用的人相对少一些。leopard是苹果的系统名称。python是我用的语言名称，cobra是另一种，经常用于通讯的。
中间，我们休息了一下，和Thomas稍微讨论了一下linux变换Caps Lock和Ctrl的问题。旁边数人质疑我们是来动物园干嘛的，看动物还是做程序的。私以为，既然那么多动物和程序有关，讨论点程序没啥不好理解的。</description>
    </item>
    
    <item>
      <title>关于</title>
      <link>//blog.shell909090.org/blog/about/</link>
      <pubDate>Tue, 12 Oct 2010 15:33:10 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/about/</guid>
      <description>如何联系我。
电子邮件: shell909090@gmail.com QQ: 14523684 Twitter: http://twitter.com/shell909090 Facebook: http://www.facebook.com/shell.py Blog: http://blog.shell909090.org/ gpg key: gpg --recv-keys --keyserver pgp.mit.edu 0914A01A fingerprint: 2276 57F3 6E16 9B90 4186 2EBF 29A9 7386 0914 A01A fingerprint QR: Blog QR: </description>
    </item>
    
    <item>
      <title>授权</title>
      <link>//blog.shell909090.org/license/</link>
      <pubDate>Tue, 12 Oct 2010 15:33:10 +0800</pubDate>
      
      <guid>//blog.shell909090.org/license/</guid>
      <description>除特别说明外，本blog的所有文章以CC-BY-SA4.0发布</description>
    </item>
    
    <item>
      <title>去厦门（一）</title>
      <link>//blog.shell909090.org/blog/archives/147/</link>
      <pubDate>Mon, 04 Oct 2010 16:33:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/147/</guid>
      <description>今天在虹桥机场二号航站楼乘飞机去厦门玩。贝壳飞机乘了无数次，虹桥机场二号航站楼倒是建成后头次去。
从地铁二号线下车，候车站台的间隔非常宽，看上去就像是广大的大厅，不像某些站一样小家子气。从地铁出口到柜台间的导向牌很清晰，但是有一件奇怪的事情。在进二号航站楼的时候，有一个爆炸物检查。说是检查却没有人替我们做扫描、爆裂物颗粒收集或者其他动作，只是用绳子把我们拦了近10秒就放行了。贝壳在想，这是怎么回事呢？如果检查不存在，那么何必如此做作。如果使用X光照射检查，那么前后拦截我们的工作人员则相当危险（如果X光检查没有危险，地铁上就应当是我们背着包通过X光机，而不是现在放下包的模式）。猜测只有一个可能，使用对人体无害的其他远程检测方法，欢迎知道的同学爆料是什么方法。
进入柜台区域后，贝壳顺利的拿到了登机牌。不过看到上面贴的提示，现在只允许携带一件随身行李，其他要托运。因此有行李随身嗜好的同学请注意了，至少在世博期间，贝壳相信这个规定是会得到执行的。过安检的时候就是，超级夸张。贝壳只身带了一台电脑上飞机，居然还要脱下鞋子，有的旅客还得解下裤带。贝壳觉得至少在安全执行的严厉程度上，我们已经充分的和国际接轨了。
贝壳是18:45的飞机，理论上是有飞机餐的。不过鉴于飞机餐吃不大饱，贝壳去机场的真功夫点了点东西。吃东西的时候，随手用笔记本扫了一下网络。上海机场二号航站楼是有一个openwifi的，不需要密码，公开接入。首次访问会被重定向到1.1.1.1的一个网页上，说明情况，并要求确认后使用。目前只支持http和邮件协议。不过了解贝壳的人应该听说过Http Over Http和gappproxy，借助这两个应该可以任意的上网。但是请注意两点，首先openwifi没有任何加密，因此你和服务器的通讯是全公开的，机场中任何一人（好吧，夸张了点，应该是一定距离内任何一人）都可以截获你的通讯。其次，贝壳相信机场对这个网络进行了审计，你的访问会被记录下来，这同样危险。因此，建议使用sshtunnel或者vpn进行安全的访问（这好像是公开网络的安全常识了），而且千万记得打开防火墙。
最后，机场提供了可上网的电脑，供没有电脑的人使用。系统是XP，禁止了其他文件的访问，只允许使用IE和winrar。感觉比较难渗透，而且贝壳自己也带了电脑——算了，飞机要起飞的。
飞机上，贝壳吃了一餐飞机餐，感觉总体还可以。面包和咸菜反倒比正餐更好吃。飞行过程本身没什么，倒是电子设备关闭提示非常烦人。机上的乘务员在一个多小时的航程中就检查了三次，合着半小时不到一次。而且待机都会来说，非要关机，�里八嗦。贝壳干脆在每次检测的时候都把电脑待机，放到前面的袋子里面去，乘务员看不到，也就不�嗦了。降落之前能看到外面的灯光一闪一闪，映照在云层上，如同进入了雷积云。开始贝壳很担心飞机被雷劈，后来发现这个闪烁是有规律的。。。
到了厦门后，我们坐机场大巴到了旅馆附近，但是还差了一公里多，这时候就是android立功的时候了。谷歌地图很快找到了三条过去的线路，并且直接导航到了宾馆。实话说，除了比较费电和费流量外，这个应用是相当让人满意的。。。</description>
    </item>
    
    <item>
      <title>计程车管理费调控</title>
      <link>//blog.shell909090.org/blog/archives/146/</link>
      <pubDate>Fri, 24 Sep 2010 09:30:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/146/</guid>
      <description>贝壳曾经向计程车司机打听过上海计程车管理费收取的问题，结论是，管理费的收取完全没有起到管理的作用，反而增加了计程车运作的风险，并且让闲的时候车多死，忙的时候打不到车。
目前的管理费模式是一天300-400，这点费用各个司机计算出来的结果各不相同，有说330的，有说380的。不过大致相同的是，上一天班收一天钱，大概在350上下。我们按照上海5W辆出租计算，上海出租车管理费一个月就收4.5亿。我们且不说这么大一笔钱带来了什么服务，单说这种收法（一天一交）有什么问题。
司机一天交了管理费后，就需要从自己的运营利润中抵扣。如果只开了半天，那么剩下的半天无疑就浪费了。司机一天的纯利润大约是500-1000，管理费并不是一个小到可以忽略的数字。付一天的钱只做半天，运气不好的只赚250，却要付350的管理费，傻子才干。因此现在的司机多数是做一休一的模式，因而很多老司机吃不了苦，上海出租很少能见到10年以上的出租司机（但不是没有，贝壳见到过做出租做了15年的司机，但很少）。同时，这样对安全有很大影响。一个22小时没睡觉的人开的车，和一个6小时没睡觉的人开的车，能一样安全么？对于司机而言，要安全行驶的更好方法是做半天休息半天。然而，现有的管理费方式不允许。同样，做一休一的结果是，我们在高峰期和夜间有同样多的车。这造成高峰期叫不到车，晚上车拉不到客。
对于市场经济学说的信徒，现在想必已经觉察到了解决问题的方法——细分市场。更正确的说，是对一天的不同时段征收不同的税。如果在无税的情况下，先忽略车辆硬件，出租供给对市场是自然调节平衡的。当需要车的人多的时候，会发生更多的人出来做出租生意，和出租非用上涨。当然，由于出租属于特殊服务行业（准确的说，是公共交通的一部分），因此费用调整是否可行有更大的一摊口水要扯。然而更多的人来做出租是一个显然可以预见的事情。通过税收，我们可以同时解决司机的安全性问题，和忙-闲时配比不恰当的问题。
我们设想一下，如果我们是按照每小时14.6元，而非每天350元来征收（这两者收到的钱没区别），会出现什么情况？首先是司机不大会做一休一，而是做半天休半天。其次是早高峰和晚高峰，会有更多的人投入来做，从而缓解压力。作为政府，通过调节每个小时的管理费，就拥有了控制车流量的工具。当我们采取减少早高峰，增加午夜服务的策略的时候，我们可以增加早高峰管理费，来补贴夜间管理费。而反过来，我们要增加早高峰车流供给，减少午夜服务的时候，反之就可以了。
但是，这里少考虑一个问题——车的供给。计程车的车是特殊的，不能直接由私车运营。因此要增加早高峰，减少午夜服务，首先就会碰到车不足的问题。大家都想做早高峰阿，所以车不够了。而且城市中，早高峰出租供给越好，总体交通情况越差。因此通常而言是削弱早高峰策略。就是早高峰的时候收取相对比较高的管理费用，而午夜则收取比较低的管理费用。通常而言，解决这个矛盾的根本做法是增加公交运行能力，而不是运行长度。用班次更密集，承载能力更大的地铁方案，替代原本的方案。增加公交车在交通密集区域的停靠站点密度，和车流密度。降低费用，尤其是长途费用。如果暂时不解决总体交通问题，可以考虑将部分民用车改成出租。在运营情况下也受出租公司管理，而非运营模式下则由车主支配。
&amp;ndash; 无能者无所求，饱食而遨游，泛若不系之舟</description>
    </item>
    
    <item>
      <title>嘎闹忙观感</title>
      <link>//blog.shell909090.org/blog/archives/145/</link>
      <pubDate>Thu, 23 Sep 2010 19:30:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/145/</guid>
      <description>今天和徒步的一帮朋友一起去mao livehouse shanghai去看嘎闹忙演唱会，免费的。嘎闹忙是句上海话，意思是凑热闹。说是演唱会，台上的一堆人贝壳一个都不认识。其实也很好理解，贝壳认识的话，那也不会免费演唱了。实话说，比李定婷同学给的那个票子还靠谱点，毕竟不是儿童出道专场。虽然名气不大，但是音乐还是挺靠谱的。
先上去的是DaFresh，好像叫大新鲜吧。唱的又摇又滚，贝壳totally不喜欢。然后是小自然。贝壳认人不大好，不确定他们是否是同一批人。后面一个叫杨含奇的，用原生乐器伴奏的，总算还靠谱点。伴奏的乐手是上海音乐学院专修Jazz的，后面唱了两首Jazz，还请了一个女嘉宾一起唱。女生的嗓子中性带点磁性，男生的嗓音很干净。虽然花活玩的多了点，不过这种规模的演唱会本来就是靠调动气氛的，照着唱歌的正道玩就没人听了。
后面两个乐团叫MOMO和Black New New，分别是四个女生和三个男生，是今天的重头戏。这两个组合都是上海话歌手，或者叫上海本地文化歌手。注意这和上海本地歌手有很大区别，本地歌手只要是个上海人就行，而本地文化歌手则必须强调上海这个符号。说的更直白点，就是讲上海话，用老上海的风格调侃。近些年各地脱离了中央统一的普通话风格后，地方风格发展非常迅速。香港原本就有笃栋笑，上海又出了海派清口。这种情况下有上海本地文化歌手也没什么好奇怪的。
MOMO的四个女生非常嗲，走的就是90后小女生的路线。Black New New的路子则更特殊些，融合了演唱，表演，调侃。如果碰到机会，向着非单一歌唱的方向发展的话，兴许能出现一些新的东西。但是作为纯音乐而言，这两个组合搞笑和调动气氛的能力比音乐能力强。音乐里的东西太多，不干净，也没有震撼力。倒是最后请出的一个神秘嘉宾（我还是不认识）的音乐，非常的有震撼力。也说不清楚哪里好或者哪里不好，但是即使贝壳因为声音太大堵上耳朵，也能感觉到声音直往脑子里灌，全身汗毛都竖起来。
贝壳上次在周杰伦演唱会被堵了两个多小时，这次怕又没出租（虽说看样子不大可能），所以没和朋友一起出门，自己提前十分钟散场了。晚上12点快了，街上空无一人，冷风飕飕的。如果这时候有几个好朋友一起扯淡着走回家，就是人生至福了吧。
&amp;ndash; 无能者无所求，饱食而遨游，泛若不系之舟</description>
    </item>
    
    <item>
      <title>疯言疯语（五）</title>
      <link>//blog.shell909090.org/blog/archives/144/</link>
      <pubDate>Fri, 17 Sep 2010 11:46:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/144/</guid>
      <description>1.无知 我们了解宇宙，却连自己为什么存在都不知道。
2.线段
生命是一段线段，不是圆。所以前面和后面都是无，都和你无关。
活好这段线段就好了，这是唯一能控制的。
3.警惕小恶非恶
真正毁坏我们的，不是大是大非。而是一些小小的恶行。
人是自私的，但作恶的时候能够说服自己并不是在作恶，哪怕是小恶，都是毁灭的开端。</description>
    </item>
    
    <item>
      <title>淀山湖徒步</title>
      <link>//blog.shell909090.org/blog/archives/143/</link>
      <pubDate>Tue, 14 Sep 2010 14:42:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/143/</guid>
      <description>9月11号星期六（正好是911），贝壳和一堆人去淀山湖徒步。事先我们知道，这将是风雨大作的一天，所以贝壳提前准备了雨披和雨伞。事实证明这是一个英明的猪头决定。
当天早上，贝壳和住附近的某水MM碰头，坐01到上海音乐厅旁边集合。早上晴空万里，贝壳还笑每个气象预报员上辈子都是随机数发生器呢。等到8点，大约来了20多人的样子。男女大约一半一半，这点让贝壳挺惊讶，还以为徒步会是男生比较多呢。沪朱线走高速，很快，我们9点多点就到了朱家角。刚刚下车就碰到了暴雨，不能不说是天意。多大的暴雨呢？这么说吧，贝壳穿了1.2斤的雨披，质量相当好的自行车雨披，还是被浇的浑身湿透。虽然雨披挡住了大多数的雨水，但是还有少部分从前襟渗入。前胸基本湿透了，后背和书包倒是干的。由于是自行车雨披，因此没有袖子，前后襟中间开的很高，雨水就从两边打到裤子上，不多久裤子就废了，手机钱包只能放在书包里。而鞋子更是一上来就进水，从头到底脚都是泡在水里的，最后回家发现脚大了一圈。所以说，即使是有雨披，在暴雨天去徒步依旧是个猪头决定。
猪头归猪头，我们从朱家嘴出发，走了大约10公里。这10公里是艰苦而枯燥的，大雨，大风，没有好的景色。到一个叫东村的地方躲雨修整的时候，有几个人退出了。当地的阿姨很好心的领他们去坐车回朱家角。刚刚从东村出来，天气放晴，太阳却未出来，正是适合徒步的最佳气候。微风吹来，吹干身上的水分，带来一阵凉意。旁边的树林和稻田郁郁葱葱，前后的道路似无尽头，辽阔的淀山湖湖面笼罩在一片烟雾中。顿时感觉天地宽广，自由自在，万事不挂于怀。直想向湖中大喊两声（还有人真的喊了）。大家开玩笑，要是刚刚走的几个知道这事，肯定后悔死了。想想也是，大风大雨都经历了，却没看到好风景，好事坏事，坚持不坚持，往往就在一念之间。
我们沿着湖边走，却发现前无去路。这路也不知道是谁修的，修了一半，又在入口不加说明。好几辆车也误入歧途，不得不倒车转向出去。从原路转弯，步过一个小村，就能看到一条很窄的小路和一条新修的大道相邻蜿蜒。我们上了大道，道左是一片湿地，田陌纵横无序，各种野草在地上放肆的生长。太阳透过乌云的间隙，照耀在苍翠欲滴的叶子上，折射出钻石般的光彩。风吹云动，忽现忽收，天色阴晴变换，大地宛如一块流动的翡翠。大道下来，转过两个弯，又是一条新修的大道。这时有人体力开始不支，落在了后面。走到路尽头，领队猴哥让大家在路口休息一下，等待后面的人赶上。
虽然经过修整，但是刚走没一公里就有两个MM体力吃不消，要原地修整坐车。贝壳想想今天也够累了，而且两个MM也不安全，就提出留下同乘车，其余人继续往前走。当地有好几辆车经过，却都不去商榻。我们才知道，虽然只走了20多公里，但是我们已经从上海地界走到了江苏地界。当地车辆要是回到上海地界，要经过检查站。万一被查出非法营运，后果很严重。一个开三轮的大爷脑子挺快，说虽然不能拉你们到商榻，但是可以拉你们到附近的车站，那里应该有车去商榻。我们想想也是，与其在当地干等，不如付点钱来换取选择权，于是就上了他的车。经过好长一段路的颠簸后，一个小小的建筑出现在视野中。实话说，在这种地方能出现一栋建筑的车站，已经大大出乎我们的预料了。
我们和一位师傅讲好价钱，30坐到商榻。他自己却听错，把我们拉到了大亭。贝壳看看方向不对，但是对当地不熟，没有说，等到了才发现根本不是我们想去的地方。两个MM十分气愤，坚持要求师傅拉到目的地。师傅没有办法，只有把我们拉到了商榻。我们大致算了一下，他这趟是赚不到什么钱了，可是能怪谁呢？这趟折腾下来，时间也很晚了，从商榻到朱家角的末班车6点发车。算算刚刚的距离，领队和大部队是来不及走完全程的。我们正犹豫间，居然看到了几个队友。到不是他们走的快，而是继我们之后，又有几个人坚持不住，打车过来，领队领着7个人还在坚持。我们看看时间实在来不及，只有坐车先去朱家角。他们若是来得及赶上末班车就坐公交到朱家角，若是来不及，就打车过来。
车上的行程还是非常舒服的，有风吹来，身上的衣服也干了。外面风雨不兴，夕阳斜斜的照在树丛上，有点田园将芜胡不归的味道。大家交换着吃了点零食，填补一下辘辘的饥肠。大部队发来贺电——他们实在赶不上，干脆也打车去商榻了。我们商议好，由我们在朱家角先找好饭店，大家好好吃顿晚饭。大家应当有数，吃饭在中国的礼节中是非常重要的。STUN曾说过，若是开会碰到，有一面之缘，不算认识。若是会后一起去吃一顿，大家就认识了，以后有事要帮忙。同样，我们这群各处来的网友，在分别的前夕总算能认识认识，在朱家角好好吃一顿。朱家角的餐馆还是挺好吃的，我们选中了放生桥下的一家餐馆，便宜好吃量又足。
饭过五味，大部队来了，大家又是一阵的敬酒（茶？）和狂吃。毕竟今天运动量大，大家都饿了，即使是最矜持的MM也不会在这时候拿架子。饭毕，坐车回去，一天徒步基本就这样。</description>
    </item>
    
    <item>
      <title>信任的逻辑（一）</title>
      <link>//blog.shell909090.org/blog/archives/142/</link>
      <pubDate>Mon, 13 Sep 2010 12:36:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/142/</guid>
      <description>贝壳打算撰文一个系列，详细描述信任和信任系统。其中涉及很多博弈论，信息安全学的内容。欢迎拍砖。
首先是一个场景。一个管理组织，调查某种人占总人群的比例。不幸的是，有很多恶意的攻击方试图改变这个数据（增大或减小）。对于被调查人群来说，这个数字不准确会使得每个人都受到损失。那么，怎么去信任这个组织，来确认数据的正确性呢？
首先是管理组织造假的形态，一般来说有四种方法。一种是修改某个具体人物的属性，来增加或者减小总体比例。一种是向名单中添加不存在的人，来调整总体数字。一种是挑选某个属性的人组成名单。一种是睁眼说瞎话，名单正确但是统计数字和名单不吻合。
最简单的方法是公布名单，标明每个人是或不是。对于每个人，都可以独立验证自己在名单中的正确性，因此无法修改某个具体人物的属性。通过对名单公布出来的人进行逆向回访（是否存在，是否参与调查）来确认没有添加不存在的人。要求每个参与调查的人都&amp;quot;必须&amp;quot;包含在名单内，来避免挑选属性。名单的统计比例是公布的，可以独立核算的，因此名单无法造假。但是我们知道，很多情况下名单是不能公开的。例如，我们调查艾滋流行状况，如果这个名单公开真的就天下大乱了。那么如何来监督呢？
我们也许能想到最初的变形，这个组织不开放名单，而开放查询。每个人独立查询自己的属性，因此可以验证具体人物属性，也可以抵御挑选属性。但是对于其他两者，都无法成功防御。因此开放查询实际上对造假是没有抵抗力的。
而后，我们想到了一种中间方法，每个人可以凭借自己的姓名查询到自己的独立代号（ID，一般是一个数字），但是不能凭借独立代号查询到姓名。于是，我们可以独立的获得代号，从而防御修改人物属性和挑选属性的攻击，也可以防御统计修改。但是对于名单中添加不存在的人，则没有什么防御手段。组织可以向名单中添加一堆不存在的代号来增加总体数量。同时，这种方法其实还隐含了泄密的可能，因为其他知道你姓名信息的人（例如配偶），很容易查到你的属性。
所以，我们修改上文的方法，将通过名字查询代号改为调查时发放查询代号。这样可以杜绝泄密的可能性。而对抗添加代号则非常麻烦。总体不外乎两种手法——回访和鉴权。
回访是指通过任意指定名单中一些个体，要求其现身说明自身的属性。如果这个人不出现，或者未参与调查，或者属性错误，就可以确定出现了添加代号。但是很明显，为了保证隐私，这个方法无法工作。鉴权则是要由一个更高可信度的机构实行，对每个用户实行保密身份验证。</description>
    </item>
    
    <item>
      <title>钓鱼台渔船乱评</title>
      <link>//blog.shell909090.org/blog/archives/141/</link>
      <pubDate>Mon, 13 Sep 2010 09:54:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/141/</guid>
      <description>钓鱼台渔船事件有几个奇怪的地方。首先，渔船为什么会闯入钓鱼台附近海域？是没有导航或控制能力么？如果没有导航或者控制能力，应当适用海难救援的情况。这种情况下虽然扯淡了点，但是无论如何和非法闯入是靠不上边的。如果有导航和控制能力，那么很奇怪的一点就是，作为商业渔船，应该清楚钓鱼岛是个闯不得的雷区——去了会扯进政治问题里。新闻中一直都没有闯入船长的说法，但是照常理分析，只有三种情况才说的通。
首先，船长是个SB愤青，跑去“保钓”。看现在的情况，不大像，因为如果是保钓人士，日本那里多数会传出消息。而且事主事前也不可能一声不吭。
其次，这是日本人策划的计划，或者将无控制力的船硬指成非法闯入。日本左翼人士找两个中国渔民，闯入钓鱼岛附近，然后抓起来。由于日本国家政策说的是钓鱼岛是日本领土，因此法院不可能不审。此时渔民主动认罪来换取取消指控，这样会引发北京方面对渔民的非难。然后渔民可以从容申请政治避难，压根不回国，取道其他国家。日本得到了对钓鱼岛实质执法的判例，渔民得到其他国国籍和重金。如果事后渔民认罪并申请政治避难，则存在是这种可能，但是并不能因此断定。
为什么这不可能是北京方面策划的行动呢？限于先前的错误承诺，北京方面的坚持是无行动准则，导致日本现在对钓鱼岛有实际控制权。既然实际控制权都不在手，搞出这种实质性冲突只会让国际看到，中国在维护钓鱼岛主权方面无行动力。
最后，船长逐利，追着大群鱼到了钓鱼岛附近，心存侥幸。不得不说，这种可能性是最高的。这种情况下，渔民是最倒霉的一方。如果不认罪，日本法院肯定会判刑。中国方面又不可能因为这种事情和日本起冲突，于是可怜的船长只能在日本服刑以维护国家尊严。如果船长不傻的话，有可能会申请认罪交换免于处罚，并申请政治避难。这点上，和第二条殊途同归，因此不可以最终结果来评判原因。
不过还是可以稍微看出区别，如果早有预谋，船长的财产和家属应当有转移。如果事发偶然，船长家属财产应当还在国内。
另外，有没有其他可能呢？有。总体来说，会发生的变化基本是两个，船长认罪不认罪，中方对日本的行动。认罪不申请政治避难——那就实在是傻了。船长可能不认罪。不过鉴于日本方面实际控制船员，中方的消息传递不过去，因此可能性不大。中方的实际行动则比较难揣测。不过以不采取行动的可能性为高。</description>
    </item>
    
    <item>
      <title>疯言疯语（四）</title>
      <link>//blog.shell909090.org/blog/archives/140/</link>
      <pubDate>Tue, 07 Sep 2010 09:16:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/140/</guid>
      <description>1.终身遗憾的旅游
最近在背包客栈，看到很多地方的旅游广告都是“不来终身遗憾”。照这个说法，美国人民怕是要遗憾几辈子了。不知道为什么，偏偏又有那么多中国人往美国跑。某北大女生在美国总统来华时质问人权和普世价值，毕业了去美国学习对方先进技术，学成后打入对方内部——直接嫁了个老美。此谓“我不入地狱谁入地狱”的最好注解。
照我看，与其说不来终身遗憾，倒不如说来了终身遗憾。一种是遗憾为什么没生在这种地方，天天面对青山绿水。一种是遗憾，本来在自己一亩三分地呆的挺好，自己非要花钱找罪受。现下的旅游，后者越来越多了。即使是前者，也颇有说不过去的地方——人家住那里的，好好没事干找一堆人来对自己的青山绿水评头论足，整天吵吵嚷嚷，为啥？
一种人有一种人的活法，有人喜欢青山绿水，我喜欢熙攘不休的人群。阳光，蓝天，白云，下面总要有一群人，才让我感觉自己活着。我喜欢自己去各个城市，没人认识的城市。在大街上迷茫的找路，用相机记下每个平凡的瞬间。每个城市有每个城市自己的气味。在一个不熟悉的城市，慢慢徜徉于大街小巷，感受着城市的气息，这让我感觉不一样的人生。
2.也会轮到你
从小到大，贝壳的人生还算顺利。虽然不是功成名就，扬名天下。至少是中考，高考，暗恋，当课，该有的都有。
最近牙痛一场，猛然觉醒，原来什么事情都会轮到你。这里没有宣扬宿命论的想法，但是无论好事，坏事，从概率来说总要有人碰到，每个人碰到的概率也差不多。也许你从不担心自己碰到车祸，哪天就有人来撞你。也许你从没想过自己碰到失业，公司偏偏遇到火灾。
当你看到那些不幸的人的时候，要警醒，哪天也许也会轮到你。这种事情不随自己的努力而改变，不随自己的意愿而变化。
当然，也包括那人人都逃不开的。。。
3.时间的蠕虫
如果我们从四维的角度来看世界，每个人都像一条蠕虫一样。从出生时刻开始，到死亡时刻终止，此外别无它物。</description>
    </item>
    
    <item>
      <title>一个软件工程师到底有多远</title>
      <link>//blog.shell909090.org/blog/archives/139/</link>
      <pubDate>Fri, 03 Sep 2010 23:52:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/139/</guid>
      <description>从高中毕业生，到一个软件工程师的成本是多少呢？这得分是什么软件工程师。
如果是批量培训，学习某种语言的语法，针对特定领域（主要是网页）进行编程。大约需要六到八个月，差不多就是北大青鸟培训生这样的。这种软件工程师拿来基本没法用的，即使是打磨变成熟练工后，最多也就是消耗品。基本每年这个水准的人都会出来数十万，个个新鲜热辣精力充沛不怕压榨。
如果是常规软件工程师，需要一年的基础课程，软件工程导论，计算机系统原理，高等数学等。一年语言和实践，C语言，数据结构，离散数学等。一年系统学习和工程方法论，编译原理，操作系统，数值算法，软件工程学。最后一年的第二语言和实践。java，软件实际开发等。如果顺利，并且用功的话，一个常规软件工程师大约需要本科四年。
中国软件专业毕业学生据说150W之多，有多少能达到常规软件工程师的水准，并留在中国呢？大概一万出头。八成以上的学生由于学习靠混，或者实践不足，因此实际上处于批量培训略强的地步。有些还不如批量培训生。软件毕竟属于工程学科，是门硬功夫。虽然不如数学那么硬气，但是靠混是混不到软件工程师的，混软件销售还有点希望。这也是为什么很多软件专业出来的学生不做软件的原因。
当然，其实还有部分人是因为水准问题，考研或者出国了。
如果能完全掌握上面的一堆东西，那其实是相当牛的一个人了。加上一定的经验，基本可以胜任任何软件公司中层以下职位。可惜中国奇缺的就是这种人，10多年软件产业发展下来，总共积累了不到20万人。
如果在普通软件工程师的基础上，钻研某个细节领域，并且有所突破呢？研究生？错了，你成不了研究生，最多当上研究员。软件业在中国发展不过20多年30年的事情，没有任何一所学校有足够的学科积累，能够领导某个领域的发展。（当然有少数几个例外）我们用的流行网络协议，有多少是美国大学领导开发的？多少是中国大学？底层核心算法中，有多少是中国学校发明了去美国申请专利的？所以如果你在某个领域有所突破，最多被相关公司看中，招进去当研究员，活的很滋润。如果真有了本事去考研——你自己看结果吧。
程序员的最高境界是什么？那基本是Donald Kunth，Richard Stallman这种的。要么将计算机科学基础发展到极限，要么将某种哲学引入计算机领域，并且改变世界。
这种程序员，中国一个没有。十年内也不会出。</description>
    </item>
    
    <item>
      <title>规则不平等和逆向歧视</title>
      <link>//blog.shell909090.org/blog/archives/138/</link>
      <pubDate>Tue, 31 Aug 2010 09:16:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/138/</guid>
      <description>最近看美国最高法院案件，其中有个加州大学诉巴基案挺有意思，讲的是民族/种族问题。原本黑人在美国受到了非常大的剥削和奴役，直到南北战争后，才逐步废除了奴隶制。此后以白人为主力的社会，对黑人又进行了歧视，出现了“隔离但平等”的原则。这些问题林林总总，直到二战后才有比较大的好转。那么加州大学诉巴基案，是加州大学对黑人进行歧视了么？非也非也，加州大学不但没有歧视黑人，巴基也不是黑人。事情的焦点在于，加州大学在录取学生的时候，为黑人保留了一定比例的名额。巴基考试下来去查分，发现自己比几个被录取的黑人学生分数高很多，但是没有被录取。于是怒而将加州大学告上法庭，称其“逆向歧视”。
美国法院接到这个案子比较头痛的，因为加州大学是按照美国政府的指导（准确说是加州的立法），为黑人学生保留的名额，其份额也和黑人人口基本成比例。只是由于黑人家庭中有大量贫穷家庭，因此黑人的平均成绩并不高。如果对其“一刀切”的统一录取，对那些黑人家庭并不公平。他们历史上受到了奴役和剥削，因而造成了家族一开始的贫穷。由于贫穷和被歧视，因此总是无法提高自己的知识，这又造成了贫穷。而对种族分离录取，对其他人种学生则不公平，而且有违美国宪法基本原则。书中举过一个例子，一个其他国家，在后期迁移来的黑人子女，祖上并没有受到奴役，因此这个学生从小受到比较良好的教育。而另一个则是祖上没有奴役过黑奴的白人子女。对前者进行偏向是对后者的不公。这个问题有点类似于今天中国的“高考移民”问题。另外，美国的宪法基本原则是假定人人生而平等。反种族隔离，女性运动，都是此原则的具体体现。由于案件的特殊性（个人基于宪法对抗州法律），所以这个案子一直上诉到了最高法院。
最高法院的判决我就不说了，大家可以自行去查（顺便给书打打广告）。但是关于这个案件，我们可以看到几个有趣的问题。在中国的发展中，颇为值得注意和思考。
首先是透明的考试和录取制度。被大家称为最严密的高考，其实是非常不透明的，因此也是注定不公正的。这种不透明体现在几个层面上。首先是考题批阅不透明。主观题如作文的批阅就算了，客观题的对错批阅都不允许查阅和异议，这对考生是非常不公的。有的时候题目出错，老师批错，影响的是学生的一生。在这种严肃的问题上，居然以“查阅和矫正会引发各种问题”和“没有时间和资源来做这个事情”为由进行推搪，其不公可见一斑。即便因为录取时间紧而暂时忽略批错，也应当允许事后的翻找和对错误的补偿（说白了就是国家赔偿）。考题正确性更是应当受到全社会的监督和检验。
其次是高校录取不透明，高校录取，放榜分数除了本人无人知晓。有没有人被跨分录取，今年的情况如何，全凭校方的一张报告，而且还是内部的。由于这种制度本身没有透明性，因此不可监督。又因为其重要性，因此特别容易舞弊。现在高考还比较严密，纯因为全国家长的注视，和教育部的重视。贝壳可以断言，如果教育部稍一放松，高考内部的舞弊案件必然直线上升。
再次是高考的优惠政策。地域性优惠，种族加分，特长加分。这些东西本身不一定能消除歧视，有时反而是歧视的根源。例如地域性优惠，无疑在剥夺几个人口大省的学生教育权。由此很容易引发高考移民，此所谓上有政策，下有对策。种族加分，有没有让少数民族感受到国家大爱尚不得知，反倒是贝壳和几个朋友在聊起这些问题的时候，听到他们郁闷的提到“那些新疆人”“占了他们的名额”。而特长加分本身，正在变成一种新的特权制度，作为高考的扩展和补充。
现在在沿海城市的人可能没有体会，其实我们坐在一个种族问题的火药桶上。在西安，火药味就比在沿海重了很多。去年的75暴乱，正是这种现象的体现。如果我们不审慎的面对这个问题，也许将来的某天，我们就需要面对一个流血的伤口。</description>
    </item>
    
    <item>
      <title>新时代新媒体</title>
      <link>//blog.shell909090.org/blog/archives/137/</link>
      <pubDate>Mon, 30 Aug 2010 11:56:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/137/</guid>
      <description>刚刚在看美国高法要案中的水门案件，说到尼克松败于肯尼迪，其实很大成分是输在了新出现的电视辩论前面。乍然想起，其实我们也处于一个新传媒开始的年代。网络传媒正在很大程度上的改变和补充我们获得信息的方式。
网络作为传媒的特性，不必多说，有无数引论论证网络的特殊性。互联网络最主要的几个特性有，即时性，广泛性，非中心特性。当然，针对中国传媒，还有非审查性，这个特征针对其他传媒并不明显。
所谓即时性，即信息在网络上的传播速度非常快。在报纸时代，我们传递一条消息的时间大约是一天。报纸需要用一天时间来完成信息采集到发行传递到个人手中的过程，这在当时已经是惊人的进步。电视时代，大约是4-6小时，一次新闻的采集编排和合适的发送过程大约需要这么长时间。而网络时代，尤其是准设备（手机，便携网络设备）的大规模普及，使得事件出现到信息传递完成大约只需要2分钟。911，最早的网络信息传递时间据说是15分钟。汶川地震，发生到贝壳得知（由于没有震感，所以当时没发现）总共用了6分钟。国外有漫画笑称，twitter上地震消息传播的比地震波还快（地震波的速度并不快），但是推友们看到地震消息的第一反应是回推。其效率增长了240倍，很多基于原定系统和环境的传媒策略就需要作出相应调整。例如克林顿丑闻，就是由网络媒体率先公开，并炒大的。
所谓广泛性，是网络传媒的一大标志性特征。网络上，我们认识很多我们一生中原本无法认识的人，这些人的具体身份信息根本无法得知，其分布也非常广泛。当我们发送或转发一个信息的时候，按照原本的途径，只有我们熟悉的人可以得知。逐级传播到最后，被新闻媒体得知，才公示天下。其传播途径就好象一滴墨水滴入水中，会逐步的渲染开。然而，我们切断新闻媒体，对个体实施控制，是可以有效的抑制信息的传播的。但是网络时代，我们的信息会传播到不特定位置，不特定身份的人，好象奶酪中的空洞，看似微小，却无处不在。这带来两大特性，控制信息的传播非常困难，和信息在不同环境中的传播有了交换。后者更通俗点，举例来说，原本只有汽车工人知晓并关心的问题，完全可能引发全国争议。
所谓非中心特性，则更为特殊。通常我们的讨论，是基于少数几个点的。针对某个问题，你的言论只有几个朋友亲戚知晓。如果你要让更多人知晓你的言论，则必须通过电视台，报纸的栏目回馈，让栏目主持看到，再由主持摘选“观众来信”。于是全部的讨论都基于几个特定点。这样的讨论当然不可能让所有人发表意见，更没有机会让不同民众接触持异议者的意见，从而造成持不同意见的民众缺乏沟通。网络的特性使得针对某个问题的讨论不局限于几个官方的论坛，更可以自行组织论坛，乃至在无关综合论坛上发表意见。由于来自各个行业的人充分发表意见，因此容易汇集不同观点，形成折衷。
例如09年杭州的欺实马案，针对被告是否适用“以危险方法危害公共安全罪”，就有两个不同意见。一方认为被告行为性质严重态度恶劣，以一般“交通肇事罪”审判不足以平民愤，而且不足以对其他潜在犯罪者形成警告。认为应当对被告判以“以危险方法危害公共安全罪”。另一方认为“以危险方法危害公共安全罪”，仅适用于特定情况下的特定人。检察院必须证明被告当时有“危害公共安全的主管故意”，否则容易扩大执法，造成其他案件的执法随意。建议该案件以“交通肇事罪”判处，并进行人大立法。双方的观点都有一定根据和理由，这种情况正是最适合非中心讨论的情况。
在网络传媒时代，以前我们所用的一些传播控制途径，例如新闻管制，禁止讨论，都很难实施。现在网络越来越容易进行端对端加密通讯，因此多个人的私密讨论，越来越难以禁止。这些技术原本被美国视为国家机密，可见其安全程度绝非轻易可以破解。而网络时代惊人的传播速度更是使得新闻管理缺少了执行的空间。往往是一条新闻，审查机构还没到手，全国都有人知道了。这时即使切断传播，最多也只能禁止后续消息的传递。原本已经知道的人通过面对面相互传递已经无法阻止，而且足以将新闻扩大到相当水准。很多本来能够掩盖的事情，就是在这种情况下弄到不得不公开的地步的。
如何管理网络，成了越来越多政府的一个心病。美国社会有广泛的言论自由，因此很难通过什么网络新闻禁令来进行管理。因此美国网络的大头问题是诽谤和版权问题。而中国对新闻传播有管制，因此如何继续管制网络是个很头大的问题。其中比较有成效的几个方案是GFW，责任制和五毛。
GFW是国家防火墙的简称，其方案是通过国家建立的网络自动审查系统防止民众访问国外网站。当然，前提是打着反色情反盗版的旗号的。责任制是针对国内的，对不听话的论坛，切断其服务器访问，并追究登记人责任。实话说这两个方案效果还是不错的，然而网络的特性并不容易受到压抑。如果这种方案继续下去，估计中国就会有组织开始做分布式互联网了。技术上说，一个服务器所能提供的所有服务和所需要的所有资源，可以分布到数百乃至数万用户的电脑中。这时除非断开整个网络或者删除所有人电脑中的数据，否则无法清除和控制信息。
五毛是一个更好的思路，其原理是根据互联网的广泛性特性，你不可能查证每个人的信息。因此利用大量被收买的人，在网络上发布各种信息，扰乱正常信息的传递。然而现在兴起的SNS和基于SNS的系统是这种方案的最大克星。SNS系统的核心是人和人的关系，或者说，一般我只信任我认识的人。对于刚认识的人，我可以作为朋友交流，然而未必信任。这样，当五毛发挥作用，发出虚假信息时。接收信息的每个人，会评判他的信息有效程度。显然，五毛的信息有效程度是非常低的，一次两次可以生效，然而多来几次就导致接受者均快速断开关系，虚假信息传不出去。以开心网为例，在上面发表强国强军之类的帖子还有大量转贴。然而针对某个特定事件进行恫吓，发表虚假声明根本无人理会。
因此，五毛实际上会转变成一个更复杂的东西――新闻操纵和传媒操纵技术。就是现在网络上俗称的推手。通过分析观众观点，组织合适的人写文章引导观众论点，从而营造言论。然而实话说，这种东西的效果和会造成的影响就小了很多。一个言论要能被引导，首先要有一定的言论市场。跑上去说欺实马无罪的人结局多数是被骂一顿然后丢出去。其次，言论诱导的有效程度是和民众受教育的程度成反比的。受教育越多，我们越能够分辨新闻引导。
然而不得不说，网络新闻能取得的效果和民众的素质有很大的关系。中国网民的一大特点就是平均受教育程度低，知识和素质明显不足。例如，在国外综合论坛上不是看不到骂人，但是相对少，而且一旦讨论过激都有管理员出来阻止。中国论坛上不但骂人语言满天飞，而且半天不见管理员，整个骂人帖就悬尸版顶，大家口水来去。其次，讨论方法经常落入诡辩范畴，不但动辄喊口号，拿政治策略逼对方闭嘴。而且经常出现质疑对方动机的情况。这简直不叫辩论，叫打架。
我们站在历史和历史的边缘上，搞不好一翻身就进教科书了。这时候的话，还是得小心点说。</description>
    </item>
    
    <item>
      <title>疯言疯语（三）</title>
      <link>//blog.shell909090.org/blog/archives/136/</link>
      <pubDate>Fri, 27 Aug 2010 11:50:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/136/</guid>
      <description>1.击鼓传花
某日和人讨论房价，来人苦劝我买房，说房价必涨。
我问，100W的房子，20年后可有200W？来人说怎么可能？我说，存定期就可以，五年期定期，连存20年。
我又问，依您看，这100W的房子，20年后，价几何？来人说我不知道，我怎么知道20年后房价多少，不过今年房价是一定会涨的。小伙子看事情不要那么片面，房子是人人都要买的，现在买肯定合算。何况就算将来房价下跌，你也可以把房抛出去。。。
类似言语我听过三回，分别是99年，06年，和今天。原来历史真的是会重演的。
2.菲律宾枪击案
如果当初徐步高流弹打死了菲佣。。。
3.黑白
做的出就是做的出，做不出就是做不出。程序员的世界，非黑即白。</description>
    </item>
    
    <item>
      <title>疯言疯语（二）</title>
      <link>//blog.shell909090.org/blog/archives/135/</link>
      <pubDate>Tue, 24 Aug 2010 14:19:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/135/</guid>
      <description>1.若是重生
都不想死，不妨想想，如果有机会重生如何？
若是你死后，大脑被妥善保留，等200年后，有科学家接通你的大脑，替你换一副机器人筋骨。你又得返人间，就如睡一觉一般，那当如何？
父母早已作古不说，连子女都死去多年，墓碑都未必找的到。亲戚朋友更不必说，天苍苍野茫茫谁都不认识，只剩形影相吊。故时家园都做土，路上所见所谓又不是自己熟悉的。你觉得如何？
还不若让我继续睡去罢。找个人讲讲200年前的故事，为这段多出来的生命找个多出来的意义。然后继续睡去——这次是永远。
2.何必多言
上年纪的人往往有个癖好，喜欢找个人教一下路子，你们什么什么事情可以怎么怎么做。你若是有意见，他就插话接着往下说，内容基本是原来的车轱辘话。你若是打断就是没礼貌——也不提谁先打断谁的，反正我是长辈。若是你不听，就天天说天天说，说到你听为止，反正年纪大了没事干，有的是时间。做好了，我说的没错吧？做不好，你们还嫩拉。
不否认，多数事情上了年纪的人比年轻人经验更丰富，做的更好。所以呢？所以这个世界就请老家伙们当道？你们再结一次婚？再上一次门？再洞一次房？
古人说，好为人师者鄙。
3.不知生者不畏死
不知道生的欢乐的，不知道死亡的可畏。天天都受难的人，最容易轻贱自己的性命。
不知道死的可怕的，不能说自己不怕死。轻贱自己性命的人，并非视死如归，最多只能说生亦何欢罢了。
只有知道生的欢乐的，又不畏惧死者，才能说有大智慧，具大勇气。
4.关于男女
愚者：年轻的时候可以谈着玩玩，责任这类问题等该结婚了再说。
智者：年轻时候对别的女孩不负责，婚后就要提心吊胆是不是老婆被人不负责过，或者是老婆正在对你不负责。
愚者：男孩子要让着女孩子，如果有争执都是男孩子的错。
智者：这样等于逼男人婚前婚后两面派。男人找个对象过一辈子，不是找个对象气一辈子，更不是找个对象指使自己一辈子。除了少数真有这种忍耐力的男人，其余要结婚，怕只有在婚前伪装。
愚者：好男人/女人都到哪里去了，我要钓男人/女人。
智者：你拿美色钓男人，将来就别怪人好色。你拿金钱来钓女人，将来就别怪人贪财。你撒什么鱼饵下去，钓上来就是吃什么的鱼。
愚者：我的男朋友赚的不够多/我的女朋友胸不够大。
智者：请自行问自己另一个问题，其余类似问题类推。
愚者：她/他一点都不理解我
智者：你很理解他/她。</description>
    </item>
    
    <item>
      <title>疯言疯语（一）</title>
      <link>//blog.shell909090.org/blog/archives/134/</link>
      <pubDate>Mon, 23 Aug 2010 09:48:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/134/</guid>
      <description>一，拜拜
最近家里拜拜，说是曾祖母百岁生日——当然，她老人家早在我五个月的时候就驾鹤西去了。外婆说百岁生日是一定要祭拜一下的，百岁后人就重新投胎去了。我不由想到——这要是活了个101岁，不知道投胎管理办法是怎么说的。是等200岁呢？还是就地重新投胎。外婆说她也不知道，小时候听说的时候觉得100岁挺难活到了，就压根没问要是活到怎么办——这厢她都快到了。
老妈到了上海，睡在前面我的床上，我就睡到了后屋。老妈说不敢睡，全是烧给曾祖母的金纸什么的，问我难道不怕么？我说有什么好怕的，大家都是亲戚。这里是曾祖母，到别人那里就是七大姨八大姑，七舅姥爷二大叔。人家下来晃晃最多是因为人多麻将少，让你烧两副麻将上去打打。大家亲戚一场，她吓你干嘛？何况若是她下来，我们高兴还来不及，又有什么好怕的呢？金纸不是烧给死人的，是烧给活人的。若是死后万事皆空，我们活着的不免戚戚自悲。与其如此，宁可自己骗自己，说人死后有灵。若是死灵现身，说明死后仍有知，大家不知道多开心。
二，柯南
前两天看到个帖子，讲柯南推理如何不合理。暗想，见树木而不见森林。
讨论金田一的推理，总还有靠谱的成分在里面。柯南么，没见偌大一个活人转眼就返老还童了。这药要卖出去，也不用研究解药，也没黑暗组织什么事了。多少人哭着喊着要返老还童呢，大家何必还打打杀杀呢？而且目前为止500多集，起码也有500案子了。照两天一个案子的速度计算，小兰刚进高中都该高中毕业了。在这种背景下讨论推理，实在是。。。
三，天龙八部
萧峰脸上露出一丝苦笑，心道：“我既误杀阿朱，此生终不再娶，阿朱就是阿朱，四海列国，千秋万载，就只一个阿朱。岂是一千个、一万个汉人美女所能代替得了的？皇上看惯了后宫千百名宫娥妃子，那懂得‘情’之一字？”
今天不记得昨天，今天不知道明天，要认定一个人一生，究竟有多难。</description>
    </item>
    
    <item>
      <title>关于生，关于死</title>
      <link>//blog.shell909090.org/blog/archives/133/</link>
      <pubDate>Sun, 15 Aug 2010 21:40:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/133/</guid>
      <description>贝壳最近头痛加牙痛，非常痛。有多痛呢？你看这个标题还猜不到么？大量时间处于神智昏迷状态，痛的时候完全说不出话来。下面是一些记录：
八月10日开始头痛，八月12日就医。左面部，左耳疼痛。由于近耳疼痛，又有游泳后耳道疥结病史，并且前两周曾游泳，怀疑耳道疥结。耳科诊断无异常，内科诊断为三叉神经痛。
八月12日晚开始服用卡马西平，一日两次，早8点，晚6点，每次0.1g，直到八月15日中午。服用后疼痛未改变。夜间入睡后疼痛停止，早上起床后短时间内也不出现疼痛。
八月13日疼痛加剧，左侧三叉神经第一二分支（下颚上颚疼痛），持续疼痛，数分钟反复，按摩头部后问题减轻。
八月14日继续按摩，卡马西平，加偏方，涂抹花椒水，疼痛依旧。但上颚第二齿触感异常。
八月15日疼痛改变，上颚左侧第二颗牙齿触痛，上下颚交汇处（咬合肌）酸痛，按摩头部无效。疼痛无法入睡。由于剧痛，停止使用卡马西平，花椒水，改服布洛芬缓释胶囊。后症状缓解。
在疼痛而造成的神智昏沉的时间里，贝壳想了很多问题。想了小时候的一些恐惧，想了现在以来的人生，想了生和死。
死是什么东西呢？很多人避讳说，但是却没有人能逃避。也许不同宗教对死有不同的解释，然而无法改变的一点是，知道的人都不会再告诉你，死是什么东西了。生命是很神奇的东西，无论什么机理，这世界上只有一个你。我为什么成为我？我为什么不是别人？这世界是真实的么？这些是我小时候常常思考的问题。我的结论是，我没有什么特别。我和别人一样，看到这世界，想到自己，会笑，会叫，会思考，也会死。这大千世界，都是因“自我”而存在。这可能是神经间的化学作用，也可能是灵魂和肉体的共鸣。然而无论是哪种结果，一旦陨落，失去记忆，即失去自我。死，一种可能的结果，是再也不能笑，不能叫，也没有意识，甚至意识不到自己没有意识。这大千世界都与你无关——由此而来的寂寞和空虚，才是最让人恐惧的东西。
关于为什么要善待父母，有这么一句话。父母好像一张纸，把我们和死亡隔开。当失去父母后，我们就要直面死亡了。其实在牙痛的时候，我恍然悟到，这张纸虽然为你挡下风风雨雨，却挡不住死亡。死亡没有到来的时候，我们每个人都假装它不存在。死亡到来的时候，我们每个人都惊讶它的突然。我想，如果这世界有个开始，它就要有个终结。即使可以长生不老，也逃不过世界末日。一切的繁华，都会成为寂静。我也会静静的在那里，虽然我什么都不知道。
人的生命只有一次，也许我无法选择怎么死，但至少可以选择怎么活。只要我们活的够长，迟早是要面对这个问题的。自己的生命，伴侣的生命，生老病死，如世界的轮回。我希望我在离去的时候，能够没有后悔，我在这个世界上，哭过，笑过，爱过，恨过，看了要看的东西，留下了生命的印记，快乐的度过了每一天。
所以，我列了个单子，如果我没事的话，我打算去逐步实施。我希望在我走的那天，了无遗憾。即使这世界不再和我有关，我也可以圆满。
跑去MIT，BSD，Stanford看看，顺便听一节课——不管听得懂听不懂。尤其要听听高伯伯的具体数学，虽然基本肯定听不懂。 能和我爱的人说一声，我爱你们。能和我所负的人说一声，对不起。 教一个徒弟，继承我的衣钵。我希望他能热爱电脑，真的对电脑有兴趣，而且有一定条件。不求他有多大成就，不求他用我的知识做什么，甚至不求他承认我是师傅。只求有一个人，能让我，将我的知识，连带自己存在的烙印，都教给他。这样，有人可以证明，我，在这个世界上走过。 至于贝壳的牙痛，贝壳认为这是劫。这世界也许有个最高的存在，也许没有。然而人的一生中，总要碰到很多问题。这些问题决定人的一生，却来的悄无声息。人在劫中，要失去什么，也要得到什么。如果能度过劫，将是新的生命的开始，如果不行，则是旧的生命的结束。贝壳的牙痛，也许是要让贝壳明白，什么是生，什么是死，以及生命应该如何渡过。</description>
    </item>
    
    <item>
      <title>版权保护的迷局――论微软状告东莞网吧</title>
      <link>//blog.shell909090.org/blog/archives/132/</link>
      <pubDate>Wed, 11 Aug 2010 14:56:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/132/</guid>
      <description>微软把广州的网吧告了，索价158万。这案子要放在美国，怕是没什么悬念的。敢用盗版，158万的索赔只能算小数，后面跟着的各种费用和公众质疑足够让公司活不下去了。而中国网吧的董事长居然亲自出面陈词，宣称“这样会让东莞一半的网吧倒闭”，不能不说是中国和美国的不同文化造成的不同结果。
美国是一个注重知识产权的国家，其背后的逻辑是，保护知识产权，才能让更多的人有热情创造好东西。因此，维护知识产权是非常重要的（甚至被大公司使用到很过分程度的）。一家公司，哪怕只有一台机器使用了盗版，都会伤害整个公司的信用。因此，微软关于盗版的态度，Bill Gates说的很露骨：他们要偷，就让他们偷，回头我们会连本带利拿回来的。在西方，只有一种违反版权的使用是得到默许的，就是为了教育教学目的的评估试用。AST开始Minix的原因就是因为闭源软件不利于教学，这点后来也被RMS等很多人所认识到。因此学校基于教育目的的使用，多数不会受到追究，当事公司多数装个大方，给予“特别授权”了事。当然，仅限用于教授课程，若是滥用盗版Office办理业务，还是会受到追究的。
开源软件业也受益于版权良多。若非西方国家严格的版权保护，很多对开源没兴趣的人根本不会使用开源软件。开源软件算是游走在版权与非版权间的平衡者。若是版权执行过于严厉，则有开源软件来抑制软件商乱抬价格（若是不行，只有诉诸反垄断法了）。若是版权执行过与宽松，则开源软件业自然疲软，让软件商可以喘口气。因此，从理论上最反版权的GNU运动，反而最受到版权的保护。
而中国作为后起之秀，在知识产权上注定不能像美国那样保护。因为多数专利，美国是收钱人，中国则是付钱人，收自己人的钱给外人，这是国家公民无论如何不能认同的，尤其是在对于生死问题相关的知识产权上。例如印度曾声称，所有西方有关医药的知识产权限制在印度不生效，由此才得以廉价的生产各种抗热带病的药物。对发展中国家的知识产权保护弱化问题，发达国家多数持眼开眼闭，或者不过于紧逼态度。因为过度的限制发展中国家会导致对方另起炉灶，日后搞不好多出一家竞争对手。
然而反过来，过于弱化的知识产权保护，反倒是值得发展中国家自己警惕的问题。我们可以回想，知识产权的作用是什么，大概就能得知过于弱化的知识产权保护会造成什么后果。知识产权保护人的创造意识，而过于弱化的知识产权保护会产生创造依赖。虽然我们可以廉价的抄袭别人的东西，然而创造什么，核心是什么，给不给，还是别人说了算。更麻烦的是，没人愿意搞什么创新，因为知识产权弱化的作用同时作用于对方和自己。抄袭者才有机会壮大和发展，如腾讯就是中国特有的例子。
而董事长出面宣称，“东莞的网吧要倒一半”，这更是中国特色中的中国特色。这招携GDP以令政府的招数，房产商就玩的很透彻。你不给我政策，我就威胁要关门，看你怎么交代。实话说对于某些道德违规乃至法律违规的行业，不如关了好。要不怎么？贩毒的也跑出来宣称自己创造了多少GDP，严打会让中国哪里的经济崩溃？可惜对于地方官员来说，GDP才是命根，至于执法的严肃性这个问题，在和谐社会的基础上都好商量。
根本上说，版权保护是个迷局。若是严格执行，怕会伤害整个经济和技术的发展。若是宽松执行，则会伤害整个国家的创造力。</description>
    </item>
    
    <item>
      <title>关于外部成本的几个实例</title>
      <link>//blog.shell909090.org/blog/archives/131/</link>
      <pubDate>Mon, 09 Aug 2010 10:16:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/131/</guid>
      <description>我们知道，经济学中有一个外部成本问题。如果一个获利行为中，会使用某种资源，而不必付费。那么生产者就会肆无忌惮的使用这种资源，例如污染。处理的方法就是让生产者对这种使用进行付费。
今天讲的几个问题，和这个现象无关又紧密相关。
首先是少年犯刑罚问题。少年犯是否应当减刑？目前中国的法律和执行上，少年犯都是减刑的。但是从爱护下一代角度来说，非但不应当减刑，反而应当加刑。很多人认为刑法的目的是让受害者获得安慰，但是从社会角度来说，这不是最重要的目的。让受害者获得安慰，属于“同态报复”，虽然从情理上可以理解，可是理论上说却未必高尚。刑法的最主要目的，是威胁和震慑其他意图犯罪者，以形成稳定的，可预期的社会环境。杀人者死，如此我们的社会才不会盗匪横行。而偏向执行，对少年犯减刑，乃至未成年不得判处死刑，无异于鼓励少年人偷盗，犯罪，乃至杀人。如果有少年偷盗集团，因故杀人，算集体犯罪。我们如何处之？杀之不合法，不杀不足戒。无奈之下的做法，只有判去少改所。而年少时的行为，接触的东西，会影响人的一生。一个年青人一旦入了少改所，再正正常常走完一生的几率就很低了。与其考虑如何通过少改所来“改造”少年犯，不如以刑法戒之。韩非子中曾说：子产相郑，病将死，谓游吉曰：“我死后，子必用郑，必以严莅人。夫火形严，故人鲜灼；水形懦，故人多溺。子必严子之刑，无令溺子之懦。”故子产死，游吉不忍行严刑，郑少年相率为盗，处于萑泽，将遂以为郑祸。游吉率车骑与战，一日一夜，仅能克之。游吉喟然叹曰：”吾蚤行夫子之教，必不悔至于此矣。“
而后是贫困地区水电/环境补贴问题。我反对对贫困地区，尤其是有污染问题的贫困地区，进行水电/环境补贴，不赞同进行医疗补贴，建议只执行教育补贴。贫困地区出现环境问题的，必然是产业贪图资源和人力，在当地乱开工厂所致。如此情况下进行环境补贴，或者补贴水电，无异于鼓励产业继续开下去。补贴越大，污染越大。</description>
    </item>
    
    <item>
      <title>代码过程管理</title>
      <link>//blog.shell909090.org/blog/archives/130/</link>
      <pubDate>Thu, 05 Aug 2010 14:39:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/130/</guid>
      <description>无论是做产品，还是做项目，无可避免的要碰到代码过程管理的问题。这个问题主要是平衡产品质量，生产速度，开发投入的关系，并且设法增大乘积。
通常来说，质量，速度，投入三者是互相矛盾的，有的时候还要加上风险。质量越高，速度越快的生产过程，其投入也就越高。但是这几个关系并非单纯的并行替换关系，正如人月神话中所说的，人月这个单位暗示人和月是可以互换的，但实际不是。项目中主要碰到的问题往往是，在控制质量不变的情况下，增加投入不能提高速度。在控制速度不变的情况下，减小投入不能降低质量。偶尔，我们想方设法找到了一个方式，能够很好的满足质量-速度-投入的三元平衡，但是时灵时不灵，这就是风险元的问题了——通常情况下我们不会碰到。
作为平衡三者的起点，你不能从项目/产品的开始才考虑这个问题，而是必须从招聘/团队组建的时候开始考虑。一个不靠谱的人就会破坏整个团队，所以在招聘的时候，保持宁缺勿滥的思想。通常的项目/产品并不需要一堆天才，你只要一堆能够良好执行计划的员工就行了。靠谱的人的有几个要点，能够比较好的进行沟通，良好的计划制定和执行能力，大量的编码训练。有的时候我们往往以工作年限来衡量一个人的编码训练，实际上编码训练和工作年限并没有特别大的关系。好的项目经理/产品经理，应该能从编码的设计和实现中，嗅出编码训练的程度。
坚持只招聘合适的员工，事实上是以增大人力资源成本来解决速度-质量问题。因此通常只会被用于质量不变的情况下，增加投入提高速度。不幸的是，要实行这个步骤往往必须在项目的开始前进行计划。因此项目的正确做法不是添油战术，而是减油战术。减油战术的要点是强迫项目使用它天然能够使用的最多人手，使得项目处于人力资源相对充足的状况。再设法控制每个人的工作周期，不要让被分配的人做和他特质不吻合的工作。例如程序员完成编码后，不要让他去做文档/测试的工作，而是提前撤出项目。如果项目顺利，逐步撤出闲置人手组建其他项目，并保持项目依旧按时完成。如果项目仍旧不顺利，至少我们做到了我们能做的最快速度。
同时，这个战术涉及另外一个问题。我们都知道，越大的项目，需要的人手越多。而越多的人手，每增加一个人所能提高的效益就越低（俗称边际降低）。因此，平衡三者的另一个要点是切分项目，使其拥有完美的边界。假如一个系统，我们需要12个人工作半年。我们将其切分为两个相对独立的子系统，每个系统分配六个人，通常不用半年就可以完成项目。正常来说，项目所需资源随着复杂度增加往往是三次方到四次方增加的，而项目切分有助于使得前者随着后者线性增加。切分的优劣只取决于其边界的清晰程度和复杂程度，和需要多少人手，如何分配等等问题皆不相关。
在完成上述几个步骤后，我们就拥有了完美完成项目的一个起点，合适的成员，充足的人手，适当的边界。不幸的是，通常我们无法做到这么完美，成员不都是适当的，人手是不足的，需求是修改的，所以边界是模糊的。那么在整个代码过程中，我们依旧有一些可以做的事情。
首先是问题的早期发现，方法是代码规范，单元测试和交叉检查(cross check)。通常建议将人手编排成水平交错的一个环，按照顺时针方向，由一个人检查另一个人的代码。交叉检查有三重目的，帮助新手学习编码，抑制不小心和设计失当所造成的错误，当其中一个人无法工作时有人可以接手其工作。虽然这将付出一定时间，但是可以比较好的在前期发现和控制问题。同时，按照逆时针方向，编写另一个人的单元测试代码。单元测试有助于隔离问题范围，减少在实现中的一些无聊问题。
其次是问题的快速沟通和持续聚焦在工作上。强迫所有人每天写下需要处理的问题(todo list)，然后每天勾掉解决的问题。这方法可以从各种GTD书籍上看到细节。同时，每天召开快速例行会议。将当天处理掉的todo list，碰到的问题和解决方法读出来。快速的沟通方便在早期把握员工的心不在焉，同时也方便其他员工发现潜在的可能与其相关的问题。
最后就是快速文档和后期文档相结合。在项目过程中提倡快速文档，即写下某个问题相关的精简描述和姓名，方便其他人联系你即可。在项目完成后，逐步补充文档，细化条目成为完整的文档。</description>
    </item>
    
    <item>
      <title>南京爆炸的威力估算</title>
      <link>//blog.shell909090.org/blog/archives/129/</link>
      <pubDate>Tue, 03 Aug 2010 10:02:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/129/</guid>
      <description>官方报道中说，爆炸外1公里的玻璃破碎。我们可以认为这是爆炸威力的保守描述。爆炸的冲击波能量会按照离中心距离平方反比下降。如果假定25倍的能量足够致死人，或者破坏平房的话，我们可以计算得到这一范围是中心半径200米内。
同时，官方报道的地址是万寿村15号（这一具体位置现在已经很难找到），在谷歌地图上可以看到附近的地形。这里[1]有google earth地图标，但不一定准，我没用过，是直接在maps.google.com上查找的地址，然后查看卫星图。卫星图显示的可能有偏移，因此我们将200米半径的圆放置在房屋和人口最稀少的位置上。不过附近200米半径怎么放都是平房在百间左右，车在数十辆上下。根据这篇报道[2]，当地正在拆迁。因此我们将当地的人口少算，一间平房一人，一车两人（我还没算公交呢，两人已经很少了），这样，暴露在致死冲击波半径内的人数不应少于120人。不考虑后续的高温烧灼和有毒烟雾，只死了13个，不能不说是中国的幸运。
另外还有关于新闻[2]的一点有意思的事情。这篇[3]新闻说，同样的人在接受采访的时候，说的是“现场抬出一百多具尸体出来”，而在[2]中说的是“造成的人员伤亡估计目前看没有发现多少。有两、三个在现场抬出来，往医院送了。”。我觉得这人精神分裂。
reference: 1.http://bbs.keyhole.com/ubb/ubbthreads.php?ubb=showflat&amp;amp;Number=1352319 2.http://www.21cbh.com/HTML/2010-7-28/1MMDAwMDE4OTE1Mg.html 3.http://news.sdchina.com/show/312771.html
注：1未经验证，2,3都验证过，是中国境内注册的域名。</description>
    </item>
    
    <item>
      <title>一根棍上的蚂蚁引发的问题</title>
      <link>//blog.shell909090.org/blog/archives/128/</link>
      <pubDate>Fri, 30 Jul 2010 21:45:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/128/</guid>
      <description>一道高盛的面试题，在cupg的论坛里面引发了口水大战。原题如下：一根棍子上面有无数只蚂蚁，假设两只蚂蚁碰到之后就会180度调头反向前进，碰到，再调头，直到棍子的某一头，然后掉下来；然后再假设1只蚂蚁从棍子的这头到那头一共需要5分钟，那么问题是：需要多少时间，这根棍子上所有的蚂蚁会掉下来？
开始的时候，我想的很简单，两只蚂蚁碰到就会掉头，因此相当于对穿前进。因此，一只蚂蚁要爬过整个棍子需要五分钟。
后来有人质疑，怎么论证呢？为什么不可能是别的情况呢？
论坛里的结论，基本是2.5/5/10分钟三种结论。
现在，我基本论证如下：
坚持蚂蚁碰撞的观点。
每只蚂蚁掉下的时间，等于蚂蚁初始前进方向上的距离。我们假定这个距离是随机的。
因此，t分钟内掉下的概率，等于t/5。
每只蚂蚁如此，N只蚂蚁，重复的概率是(t/5)^N。即，N只蚂蚁的情况下，在t分钟内掉下的概率为F(t) = (t/5)^N。
可以求得概率P(t) = N*t^(N-1)/5^N，以及期望，t bar = 5*(1/2)^(1/N)。
当N趋于无限大时，t bar = 5。</description>
    </item>
    
    <item>
      <title>我的哲学系统（一）</title>
      <link>//blog.shell909090.org/blog/archives/127/</link>
      <pubDate>Tue, 27 Jul 2010 14:30:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/127/</guid>
      <description>哲学系统这个词，说起来是一个比较大的概念。而本文所阐述的概念又远远大于哲学系统，包含了某些宗教的东西，所以难免显得冗长枯燥。不过贝壳可以保证，绝对不会比马哲课枯燥的。
我的哲学体系建立，是从曼昆的《经济学》这本书开始的。对于某些人这也许是个讽刺，对于另一些人可能无法理解。一个人的人生哲学系统，居然是从一本经济学书中开始建立的。在刚考上大学的时候，我一下失去了人生的方向。作为人生迷茫的反弹，除了吃就是睡。在短短的一个月内，我的体重增长了15公斤，并且开始留起了长发。其实想想我还是挺幸运的，如果当时接触泡吧吸毒赌博，也许我就完全不是现在这个样子了。百无聊赖之下，我到处找一些比较好玩的书和电影看。现在我还在持续的追一些日本的动漫，就是源于当时的习惯。也许是注定，我当时不知道从哪里弄到了一本曼昆的《经济学》。也许是图书馆，或者是哪位学长，我记得不是很清楚了。反正交大用这本书作为经济学教材，看到一本并不奇怪。
这本书真正吸引我的，是曼昆用于描述世界运行的基础原理。这本书不算太复杂，没有用到经济学中一些高深的理论，而仅仅是使用了一些普通的假定，来推测整个世界的运行。这个系统非常像欧几里德的《几何原本》，从简单的假定推导出纷繁的世界。当然，很多假定都是错的，例如理性人假定，不能说完全正确。但是这种方法，通过理性和逻辑推导来解构个体行为和人类社会行为的思维方式，给我的印象非常深刻。在此之前，我们听到的世界逻辑是迷茫的。一方面，所有人都在说，我们的社会是好的，经济是好的，有坏的因素，是因为一小撮别有用心的人勾结国外敌对势力。而另一方面，又有人在说，我们的党是腐败的，社会是黑暗的。我们知道一个系统是不能自证的，如同人无论多有力都无法将自己从地球上举起一样。无论是说社会是好的，还是说社会是坏的，都无法自证。并且，同时他们又宣称，信仰另一者是一个错误，哪怕看一眼都需要忏悔。
在这种情况下，最简单的方法是——听从最强有力的，例如学校教什么就听什么。因为存在即合理，强力的是最可能正确的。但是讽刺的是，古今政权更替，往往第一件事就是否定前一家的哲学系统。因此我们可以得出结论，我们的哲学系统需要经常变化。这就陷入了实用主义哲学的范畴——说白了就是没有真理。而我是一个什么都要问一下为什么的人，对这种实用主义哲学不是很喜欢。而且不得不说，我们的马哲课是一种非常无聊的课。当我们有一些问题的时候，马哲课明确的站在了其中的一边，由此导致了自身无法自证。这还不是最大的问题，最大的问题是，马哲老师经常要求，背下结论，作为真理，不要问为什么。这不是一种解答问题的方法，而是消灭问题的方法。但是当问题无法消灭的时候，马哲课就没用了。而经济学，可以非常清楚的，另我信服的告诉我原因，和判断标准。
例如，让工人下岗，究竟是为什么，会发生什么。马哲的解答是，这是资本主义剥削工人的方法，通过工人的内斗，降低他们的工资。但是，马哲课没有告诉我们，为什么中国也有工人下岗了呢？我们在不是资本主义的情况下，发展出了待业这个新名词。而如果我们已经是资本主义了，那么马哲课为什么没有被消灭，反而成为必修课呢？更重要的问题是，通过如何的思考方式，我们才能由“有人下岗”这个现象中，得到“这是阴谋”的结论呢？而经济学的解释是，生产和消费的矛盾。当产能大于消费的时候，工人就一定会下岗。即使发动工人斗争，只要不扩大产能，一样会下岗。这和社会意识形态无关，和谁在生产无关。只是组织结构森严的计划经济，更容易调整这个矛盾——扩大消费，创造消费，实在不行造个长城也是个办法。其思考方式是理性的：供需曲线，我完全理解并认同。社会总体经济方程，我认同，并且马政经里面也有。四象限循环和蛛网模型是后来才学到的理论，但是不妨碍推导。由此逐次递推，逻辑过程清晰无比。相比而言，其理论逻辑比较容易信服的。因为每一步，都是我们知道的东西，或者我们可以得出的结论。于是，我接受了这种思维方式——放弃阶级斗争，通过理性的思考和逻辑分析，得出相对正确的结论——乃至这个结论有的时候是对自己不利的，或者是会产生悖论的。
在看完《经济学》（其实是没看完就还回去了）后，我逐渐开始了庞大的阅读和分析。我向古今中外的每一本书中祈求智慧，来建立一个完善的，自洽的哲学系统。这个系统可以让我信服，为我解答迷惑。经济学是个入门指引，但却是不完备的，并且也是有争论的。现在我的哲学体系，主要来自于四个部分，又分别有所不同。四者合起来，是一个相对完备的哲学体系，但是还不够自洽。
第一部分来自于经济学，主要就是通过替代效应，比较优势等思维方式，思考生活中的每个个体行为和社会行为。例如为什么守时送饭的饭店全倒闭了，而不遵守时间的饭店可以存在。为什么人要言而有信。（也许对于某些人这不是个问题，但是对于经济学论者，这是个很大的问题，经济学的假定之一就是人性本恶）
第二部分来自数学和物理学，主要是解决世界原本性问题，解决第一部分中的复杂抽象问题。
由于这部分的存在，因此我极端反感无逻辑的论证。例如，我曾经和一个人讨论为什么中国需要自己的操作系统。我说，法国也没有自己的操作系统（尽管他们有法语发行，不过那多数也是*nix系统），德国也没有(也是*nix的发行)，中国为什么要有。他说，因为我们是中国，所以我们要有自己的操作系统。我：。。。。。。
如果他从我们的国际地位，国际情势，操作系统的重要性，论述我们为什么需要，以及需要什么操作系统。无论他的资料来源是对还是错，分析过程有没有瑕疵，至少这是一个可以辩论和讲理的人。至于无逻辑主义者——我直接断线走人，您自个慢慢折腾去吧。
第三部分来自黑客文化，主要是古典黑客文化。基本是70年代美国朋克文化的延伸，主旨是自由主义，自由合作，反政府。来源——自然是学Linux的时候学到的。
第四部分来自中国最古典的经典，周易。这部分是作为哲学系统核心的存在。主要是二元论，转化论。
系列的下个部分，会对各个部分逐个分析。</description>
    </item>
    
    <item>
      <title>经济学上说红包</title>
      <link>//blog.shell909090.org/blog/archives/126/</link>
      <pubDate>Sun, 25 Jul 2010 23:09:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/126/</guid>
      <description>开篇前，先提出一个问题，中国医患关系比较紧张，很多人对医生不满，为什么呢？答案在片尾，不要偷看哦。
今天和小猫争论了一个比较有意思的观点，给医生红包，怎么定性呢？
我开始的观点是，这是有悖于和谐社会的（虽然这个词比较俗，但是先用这个吧）。如果医生会根据红包区分处置病人，那么没钱的病人就会被逼死，这何其恶哉。而如果医生不根据红包处置病人，那么病人就会知道，这个医生送不送红包都一样。这样就没人给医生送红包了。有医德的医师反而收入低，这也不是和谐社会应有的事情。
小猫的观点是，有钱的人可以多给医生钱，而没钱的人就会少给，正如地铁里给乞丐钱一样。有医德的医师不应当区分处理，这样社会有和谐了。虽然想法不错，不过却太不现实。首先，地铁里给乞丐钱是自愿的，现在给医生红包的人，你问问多少是自愿给的？尤其是在病痊愈的时候去问，大概能有三成自愿给红包的就不错了。其次，就算地铁里的乞丐，也不是光找有钱的要的。乞丐出卖的是尊严，收获的是金钱。因此，找需要获得尊严和体面的人往往效果比较好。例如成对情侣中的男性，跟着几个部属的小领导。而且通常一个人有预期零钱的时候比没有预期零钱的时候更容易施舍。推理的通常现象是，外卖冰品店门口的乞丐比电影院门口的乞丐更容易要到钱，因为冰品通常是10元以下的小额，购物者有很大机会会拿到零钱。而电影院门票往往是个整数，而且接受信用卡，因此出来的人兜里往往最小一张的都是10块。而后，是一个经济学中的心理现象，叫做公平现象。
我们想象一个街道水果店，卖一种叫做苹果的水果。苹果都是一样的，标准售价是10元。但是最近物价上涨，于是店主说，有钱的人可以多出点钱，没钱的人还可以10块。大家猜如何？于是整个街道的人一下全变成了穷人。这时候人的心理不难揣测，如果比自己没钱一点的人，10块买了苹果，我完全没必要花11来买。因为有比我更有钱的人，所以我是穷人。而且凭什么说我是有钱人，所以我要多出钱呢？我每天工作12小时，周末还要加班。隔壁的王二，每天才干8小时，到了周末就出去玩。他可以10块买苹果，为什么我要花额外的钱呢？
这种现象，是反对“级差个人所得税”的一个理论依据，同样也是低个所税吸收人才的方法的理论根据。人们不能因为某人足够努力而去抢劫这个人，或者要求这个人付出额外的费用。中国的级差税制，到了一定月收入的时候（好像是10万），个所税就是45%，几乎是一半，而新加坡的个所税不超过20%。大家知道大量的演艺明星是新加坡人，甚至在《开国大典》上全是外国人，最靠近中国的就是中国香港，原因即根于此。每个月收入超过10W的人申请新加坡国籍并不困难，而税差高达25%，这简直是逼人反对中国国籍。虽然我们可以一千个一万个骂这些人不爱国，可是却无法阻止这些人加入外国籍，于是只能在口头上过过干瘾罢了。至于抵制，则是一个更好玩的选择。当你抵制一些人后，另一些人就会富裕起来。然后，这些人很大可能的会选择新加坡作为自己的国籍，而不是继续留在中国。如果我们继续剔除这些人，最后我们发现，我们留在国内的人才只有一个特征——那就是除了是中国国籍，很难指望别的什么。
不过很难指望中国会取消级差个所税制，因为中国有太多不正常的富翁，不是凭借自己的努力，而是通过非正常途径。因此大家普遍认为，级差个所税能对这些人有一定的抵制作用。虽然什么都没有，但是指望短期内取消是不可能的。
当然，苹果店（怎么觉得乔教主现身）可以宣称，我们的苹果分为两种。一种是普通苹果，一种是认证苹果。认证苹果比普通苹果贵，而且贵很多，但其实是一样的。这种情况下，只有有钱人才会购买认证苹果。为什么呢？就是因为贵。如果认证苹果无法和普通苹果区分，他就不值钱了。而一旦认证苹果可以从普通苹果中区分出来，购买这些苹果的人，就同时购买了“社会身份”。知道什么是身份么？就是，有钱人压根不吃普通苹果，就算摔伤了，去买个创口贴都是要认证的。我们白天辛苦晚上操劳为的啥，不就是获得舒适的生活，别人羡慕的眼光等么？所以，苹果店的口号是，不求最好，但求最贵。
同样，这个现象对有钱的人可以多给钱这个理论也有强烈的破坏作用，有钱的人压根不认为自己有钱。而如果医师不差别处理，就根本收不到钱。我们不能假定所有人性都是本善良的，如果所有人性善良，那么还要刑法干嘛呢？但是如果医师差别处理，这是严重违背医德，和社会的公序良俗的。
然而，再进一步思考这个问题，问题反过来浮现在我脑子里。为什么医生能收到红包呢？我知道为什么公务员有红包拿，可是我从来不知道卖电脑的也能拿到红包哎。如果医生是出售健康的，而病人是购买健康的，那么红包存在的唯一理由就是——医生的定价比真实价格差的太多了。由于价格限制，或者税的存在，因此医生收不到市场价格的费用。这导致了一系列的问题，红包，乱开药，不负责——废话，如果我付出许多学习医术，结果每天辛劳赚的还不如卖茶叶蛋的，我也不会负责的。而且我很确信医疗管理部门不会随便处置我——干这个的越来越少，都去卖茶叶蛋了。今天处罚下来，明天老子不干了。
所以，红包问题，其实不是医疗中的核心问题，核心问题是医疗资源短缺，所带来的两个问题——如何提高医疗资源，和如何分配。
要解决第一个问题，就必须让医疗价格回到正常的水平。只有让医生能获得足够的收入了——现在收入其实不低，只是不合法——才能让人想当医生。而通过红包这种方式来实现，无论如何也是种掩耳盗铃的现象。而通过处方权来实现，更是让医生乱开药。本来要收20医疗费的，由于只能收10，所以我没事也得给你开两瓶眼药水，来拿回自己的医药费——这怎么听怎么奇怪。
而解决第二个问题，则是比较残酷了——有钱人有的治，没钱人靠政府。那么考验政府基础保险系统的时刻到了，如果政府基础保险系统有问题的话，没钱人几乎立刻会暴动起来。然而这个是正确的，至少在我来说。因为通过这种方式，我可以预期，在普通疾病级别上，政府会处理好的——这是他应该做的。而在重大疾病问题上，有钱有的治，没钱没办法。这就是我们所谓的，即使每个人为了自己的利益而行动，但是总体行为和预期一致，并且对大多数人有利。如果说我们放弃了重大疾病中没钱的人，那也是因为——我们的医疗资源不足以覆盖所有人，我们选择能鼓励增加医疗资源的方案，放弃我们最不可能成为的一类人。
至于有钱人发挥自己爱心的问题，我觉得更大的可能是将费用捐献给医院和病人，或者是能够代表病人的疾病基金会。这是一个平衡的问题，捐献给谁是个人的意愿选择。但是更多的捐献给特定医院，会提高特定的医院和医生的收益，更加鼓励医生针对富裕病人进行诊治。而捐赠给疾病基金会，则会提高整个医疗行业的需求，从而提高整个行业的工资。所以说，这是一个选择问题。
好，回答篇头的问题。《周易》中曾说，仁者见之谓之仁，智者见之谓之智。这个问题从不同角度有不同解释。如果你认为问题是因为不合理的制度设计，并且马上要改善，那么你就是一个有政治学家潜质的人。如果你认为是供需问题，并且需要马上改善，那么你就是一个有经济学家潜质的人。如果你认为不知道，或者认为不需要马上开始改善，那么你是一个loser，你的将来任人摆布。如果你认为是国外势力的宣传造成人民对政府的敌视，你是个有五毛潜质的人。</description>
    </item>
    
    <item>
      <title>通胀来了</title>
      <link>//blog.shell909090.org/blog/archives/125/</link>
      <pubDate>Fri, 16 Jul 2010 14:57:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/125/</guid>
      <description>什么都不说，先看个新闻。 叶檀：为什么租房者对于房租上涨毫无抵抗力？
http://www.china-week.com/html/5640.htm
这个新闻在说明一个事实，通胀来了。
房租为什么上涨？房租和房价不一样，受投资，预期的影响更小一些。如果租金真的太高，大不了爷不租了。一个出租的，一个寻租的，就这两者决定一个地方的房租。因此通常在CPI计算中，物价衡量指数之一是房租，而非房价。，自有房屋者是按照给自己交租金的方式来计算的。至于承租者为什么对房租上涨没啥抵抗力，这更像是一个需求弹性问题。承租人的弹性在于实在混不下去了回老家，而租房人的弹性在于——几乎没有弹性。某个地区有多少房子是刚性的，就算你想卖，也得有人买。要么是本来租房的人买了，要么就是其他人买。因此，我的结论正好相反，房租上涨不是由承租人承受，而是由租房人承受。除去拆迁和房屋倒塌，房租上涨的理由只有一个——在原本的价格下有更多的人想住进来。
通胀从来都是结构性的，整体通胀只有一种情况，国家恶意乱发货币。即使是国家乱发货币，大多数情况下也是逐步结构通胀的。先拿到国家钱的人，总是试图将钱花出去，因此别人手里钱才会多出来，各种价格逐步上升。如果拿了国家钱的人不花呢？那就不叫通胀了不是么？
中国今年的通胀，来自于去年四万亿国家投资。通常投资在9个月左右会发生正面效果，促进经济和就业。而在18个月的时候会发生通胀效应。中国四万亿国家投资主要流向基本可以确定是大型国有企业和重点扶持项目，说白了就是能源，资源，房地产。下面的一些数据来自2002年中国统计的42部门货币型IO表，根据这些数据比较好说明通胀的传递链条。本来应该采用07年的表，可惜我没钱。
建筑业业依赖最重的三个产业和成本是：劳动者报酬，非金属矿物制品业和金属炼制及延压加工业。
非金属矿物制品业依赖最重的三个产业和成本是：劳动者报酬，非金属矿物制品业和化学工业。
金属冶炼及压延加工业依赖最重的三个产业和成本是：金属冶炼及压延加工业，劳动者报酬和电力、热力的生产和供应业。
化学工业依赖最重的三个产业和成本是：化学工业，劳动者报酬和电力、热力的生产和供应业。
电力、热力的生产和供应业依赖最重的三个产业和成本是：煤炭开采和洗选业，劳动者报酬和石油加工、炼焦及核燃料加工业。
煤炭开采和洗选业依赖最重的三个产业和成本是：劳动者报酬，电力、热力的生产和供应业和交通运输及仓储业。
好，以上几个已经够绕了，不过我们还是大概能看出一些有趣的事情：1.我国的电力供应主要采用煤炭发电，证据就是电力、热力的生产和供应业异常高的煤炭开采和洗选业投入。2.房地产和资源上的投资，会快速引发能源价格上涨。3.以上几个行业无一例外的都是高人力成本的。
从这里大概能推测一下通胀链条，先是大量的房地产，资源，能源的放贷，于是开始大规模的扩大生产规模。这一扩大，就把资源，能源，工资给抬了上去。这三个一上去，想不通胀也难了。不过链条的传递速度各自不同，能源的反应应该是最快的，规模一扩大，能源压力立刻上去，于是会发生各种电价油价上涨事件。我查了一下原油连续期货价格，从09年02月形成双底开始，到09年06月为止，价格从35涨到70，翻了一倍。资源的反应会稍微延迟一点，因为生产会有各种环节，囤货，不可能零库存。我查了一下精铜连续期货价格，从09年02月开始，到10年01月为止，价格从150涨到340，一倍多一点。工资是最慢的，因为各种技能，各种行业，人口迁徙，政策，大学生就业，都会影响人力成本价格。不过这个除了猎头就无从查证了，我大致猜测上涨没有一倍——毕竟像能源和资源一样发生变态反应的可能性并不很高。预估是在2-3年内上涨50%以上。一旦工资上涨完成，通胀的整个链条就完成了。
在通胀中，不同的产业发生的后果是不一样的。因此理论上我们可以通过在不同时间段，变化持有资产的比例，来尽量规避通胀的风险。首个要避免的是——保险和养老金。如果你持有原来购买的保险，又能出售的话，建议出售变现。因为你原来交的钱和你将来收到的钱将不成比例。例如你交1万10年后收4.5万，通胀个50%其实等于收益3W。其次要避免持有货币型的存款，尤其是长期存款和国债——他们的利率都会变成负数。
那么可以转换成什么呢？现在入手能源和资源都晚了，他们都快到了上涨的顶点了，进一步的上涨和通胀应该没什么关系。一个是可以持有外币，人民币贬值的动力是很充足的，有胆子的可以赌一把。但是贝壳觉得涨跌都有可能，所以赚了赔还很难说。第二可以持有一些主要由”人“进行消费的东西——餐饮，娱乐，服务。
&amp;ndash; 无能者无所求，饱食而遨游，泛若不系之舟</description>
    </item>
    
    <item>
      <title>关于经济和博弈的几个有趣的问题</title>
      <link>//blog.shell909090.org/blog/archives/124/</link>
      <pubDate>Mon, 28 Jun 2010 12:15:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/124/</guid>
      <description>这次去cpug的聚会，大家在会上提到了经济和博弈，两者其实非常有关系。正好也谈到了世博，顺便讲一下上面的几个观点。
1.排队模型
世博的情况大家很清楚咯，每个人给定入场费，场馆需要排队，一天内无限制观展。那么，谁会去看世博，谁会排队？
从价格成本上说，排队其实是通过等待，限制了每个人能参观的场次，增加了每场参观的成本。而从隐形成本上说，上面的价格还得加上你一天的时间，而且你还要为排队付出额外的体力。
我们先考虑，假如票价是零，体力成本忽略不计，谁会排队。这时候，你的唯一成本就是时间的消耗。很明显，时间成本越低的排的越高兴。让一个每天赚10W的首富和街道老太太比排队还不如杀了他。那么，160的入场费带来了什么？限定了入场的人要有基础消费能力，简单来说就是有能力进行娱乐消费。那么综合上面两点，最喜欢排队的是时间成本为零的，有基础消费能力的人。例如子女有点钱的退休老人，父母还不错的考生，还有部门还不错的政府官员——当然，最后一个无需排队。
其次，我们再考虑谁去看世博。
去看世博的人越多，排队就越多——这是理所当然的。排队越多，每张票上能看到的内容就越少，这算是某个变相的市场机制，限制世博的入场。会去看世博的人，一定是觉得所获得的游览内容大于160元加上一天时间的人——这排除了穷人，有钱人（概率上的，因为通常有钱人的时间成本都很高）。世博是一个针对中产阶级的展览。
2.火车票逻辑
关于火车票的一个经典逻辑就是，要么涨价，要么实名制，要么产生黑市。
同样，这个逻辑应用于世博的结论是，对于热门场馆，要么差别涨价，要么实名排队，要么有人卖队号。
由于现有状况，差别涨价已经没戏了。所以世博的管理者。千万记得派足够的志愿者拖走卖队号的人，否则绝对黄牛遍地。
讽刺的是，如果有合法黄牛的存在，才会吸引有钱人来参观世博。因为他们的时间成本很高，没时间慢慢排队。而足够多的有钱人来参观，就容易带来投资——这更符合向世界展示上海的目的和上海人的利益。
3.信息的价值
stun说了一点分析，周日夜场往往会比较空。我验证下来，至少在端午节假期的最后一天，这个是正确的。原因在于来上海参观的团体客，最后一天无论如何他们也要回去了。因此此时继续参观世博的只有长期滞留上海的游客和上海本地人，这毕竟会少很多。
我说了一点对世博的不满，世博的场馆外都有需要排多少时间的告示，但是并没有信息化出来。如果信息化出来，就可以在很多地方展开交互式终端，指导人们哪个馆更值得排队。或者更进一步的，允许人手机查询。这是一个很有需求的业务。
从市场意义上说，这些东西叫非完全市场。所谓完全市场，市场中的每个人都知道另一个人的信息。当然，完全充分市场，绝对理性人，理想共产主义并称三大笑话假定。然而，我们的信息越多，我们就越有优势。stun了解了某些信息，于是他可以在一个比较空闲的时间段入场，从而高质量的参观。（虽然是个意外，不过我们正好在这个时间入场了）而假定某个人了解了某个时刻世博排队信息，他就容易决定去哪个场馆，从而捡漏。越多的信息，越容易低买高卖。
由此带来的是两方面的东西，一方面，我们每个人试图获得更多的信息，因此市场就更接近完全市场。另一方面，如果获得信息的成本相对较高，就一定会有信息的获得者来更加的提高这个门槛——这会增加他们的收益。例如房地产，信息的成本是惊人的高。如果你看到错误的房地产信息，会导致被骗很多钱，因此你需要从各个方面验证每条信息。作为信息的发出和接受者，我们会如何做？当然是尽力澄清这些信息，声明我们是真的买家和真的卖家，并且尽量发出和获得尽可能多的信息，例如使用多个中介网站，使用朋友网络等——这往往会获得意想不到的好东西。然而从中介角度来说，这会使得他们的价值迅速降低。因此他们经常做的事情是以个人名义发布卖出或者买入信息——当然是假的——来扰乱信息流，增加信息的获得成本。同样的事情也发生在人力资源市场上和婚介市场上。
由此来看，GFW的门槛使得信息的价值足够高了么？看来没有。如果信息的门槛足够高，就会有人或组织放出国外的假消息来扰乱判断，从而保持他们手里真消息的价值——如同我们的邻居经常做的那样。这么来看，他们的信息门槛倒是够了。
4.价格-风险函数
会上有个美女问了个问题，你们在什么风险下才能blahblahblah。我们当然知道她不是在寻求外遇——她在找创业程序员，django的。顺便说一句，如果有靠谱的php/python/django程序员，可以联系我，超多人狂求。
我很快的指出了她这个问题的一个问题——你这个风险偏好问题，到底在什么价格下呢？
函数想象一下，在一毛钱的时候，你更偏好于直接获得一毛钱呢？还是用1/10的概率赌一块。如果是100W，你更偏好直接获得呢？还是用1/10的概率赌1000W。我们定义，在某个成本下——例如一毛钱，你能接受以1/N的概率获得N倍的收益，同时你无法接受以1/(N+1)的概率获得N+1倍的收益，这个N就是风险阀值。当然，更精确的抽象定义中，N应当为实数，并且也不是N+1，而是N+dN，其中dN为无穷小量。很明显，风险阀值是成本的函数——而且往往是单调减函数——这叫做风险偏好函数。如果是1毛钱，很多人往往可以接受以100W分之一的概率去赌10W——或者更高。如果是100W，估计就没几个人这么干了。
我们在价格为0的时候，风险偏好都是趋于无穷的。都不要钱了还怕什么呢？但是随着价格的升高，有些人风险偏好就迅速降低，而有些人则不变——后者我们称为经典赌徒。有个关键价格，风险阀值为1。当你的风险偏好为1的时候，事实上你拒绝一切风险。从财务上看，你单笔只能持有固定存款和国债。也就是说，如果你有这个价格以上的钱，并且是绝对理性人，你在这个以上级别的投资中绝对拒绝——因此我们称这个价格为投资中止上限。这是严重违反直觉的，从直觉上看，我们钱越多，越希望从事一些高收益的事情，获得更多的钱。不过你真的照做的话，倒是有希望瞬间成为穷光蛋。除非你眼光很好，否则收益最高的事情往往是风险最高的事情，除非你有特殊背景。
作为对应这个风险偏好的方法，我们往往组合投资。组合投资中发生的事情并不是风险降低，而是单笔价格降低——这样你就觉得可以接受了。问题是，当你真的组合了足够多的投资，你得到的风险为0，而你的收益是多少——绝对严格等于国家标准利率。。。
这也解释了赌徒为什么容易成功，他们风险偏好对于价格很不容易降低，因此投资中止上限很高。对于某些只有高投资才有大回报的事情，只有赌徒能赢走一切，普通人要这么做除非组合对冲风险，这是很困难的。当然，另一个因素是，如果一个赌徒没成功，往往就挂了，你也就没继续听到任何东西了。。。
5.赌球和买卖天气
或许这章应该改叫对冲。当一个人对球队获胜概率和另一个人有差异的时候，他们就可以赌球。同样的事情也发生在天气上。如果一个人对天气的预期和另一个人有差异的时候，他们可以买卖天气——好像安然在出事前就在设计这个。
例如，有某个人，我们叫Alice，如果明天天晴，她能赚150，如果下雨，赔50，她认为有75%概率下雨。而另一个人，我们称为Bob（安全人物哈，虽然这不是个安全问题），如果下雨，他能赚150，否则赔50，他认为有25%下雨。这样的假定很好，叫做对称假定，因此我们可以省掉庄家和赔率的问题。那么，Alice和Bob如何来让自己更心安理得呢？他们可以对赌，如果下雨，Bob给Alice100，反之，Alice给Bob100。我们来看变化。
当Alice完成对赌协议前，她认为自己赚钱概率是150*0.25-50*0.75=0，而对赌后，她的赚钱概率是(150-50)*0.25+(-50+100)*0.75=50。而Bob呢？你们自己算吧，情况是一样的。
当每个人都觉得别人的月亮更圆的时候，他们就可以买卖月亮，从而增加自己想像中的收益。其实呢？什么都没改变。这就叫对冲。
6.智猪博弈
一个房间里有一头大猪和一头小猪，一个踏板操纵放出猪食。大猪踏了踏板，跑过去吃的时候，小猪会吃到给他剩一点。而小猪踏了踏板，跑过去的时候，大猪什么都不会给他剩下。
这时候出现的有意思的事情是，那头小猪死也不会上踏板。因为小猪上了踏板，跑过去的时候大猪都吃光了，因此上踏板这个事情对它的收益是0。而对大猪而言，跑过去虽然少，还能吃到一点，因此上踏板这个事情对他的收益还是有的。在这种情况下，大猪比小猪更有动力上踏板。
当然，这个故事也许还没有完。小猪吃了足够的东西变成大猪的时候，情况会如何变化？那是另一个故事了。</description>
    </item>
    
    <item>
      <title>世界上10个最受欢迎的Linux发行</title>
      <link>//blog.shell909090.org/blog/archives/123/</link>
      <pubDate>Fri, 25 Jun 2010 12:04:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/123/</guid>
      <description>http://blog.sina.com.cn/s/blog_49f7fe790100j0hp.html
个人意见是RHEL(Enterprise use), Debian(Enterprise use), Gentoo(All use), Fedora(Desktop use), Ubuntu(Desktop use), CentOS(Enterprise use), SuSE(Enterprise use), Mandriva, Knoppix, Arch。
按照阵营可以分为Redhat系列(RHEL, Fedora, CentOS, Mandriva), DEB系列(Debian, Ubuntu, Knoppix), Gentoo系列(Gentoo), SuSE系列(SuSE), Arch系列(Arch)。
按照包管理系统可以分为RPM和DEB两大主流系统，Redhat系列和SuSE系列使用RPM，DEB系列使用DEB，Gentoo和Arch是自己的包管理系统。
另外插一句区别。Fedora是Redhat的社区版本，由社区维护，免费使用。当Fedora比较稳定了，就会出RHEL。RHEL是商业版本，由Redhat公司维护，收费的。而CentOS是使用RHEL的源码包（它必须提供）自行重编译的社区版本，和Fedora的区别在于CentOS的稳定度和维护状况更靠近RHEL。Debian和Ubuntu没有关系，Ubuntu使用了Debian的包管理系统不代表他们有关系。Ubuntu有自己的开发/管理计划，通常来说比Debian unstable更加激进，稳定性也不差。不过如果你需要稳定的商业级服务器，还是Debian更加靠谱点。
另外，无论你认为哪个Linux更受欢迎，即使Debian中确实有FreeBSD kernel package，请别把BSD放进最受欢迎的linux发行中来。那个是Unix，Idiot。
&amp;ndash;无能者无所求，饱食而遨游，泛若不系之舟</description>
    </item>
    
    <item>
      <title>世博会观感</title>
      <link>//blog.shell909090.org/blog/archives/122/</link>
      <pubDate>Thu, 17 Jun 2010 11:50:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/122/</guid>
      <description>昨天看了一下世博，仅浦西馆，发现问题非常多。当然，我没看完世博，很多问题有失偏驳。然而不得不说，整个世博看似热闹，其实差劲。
一，形同虚设的安保
昨天安检速度很快，完全没有传说中的恐怖。但是通过安检后，我检查书包的时候发现一个�事——我把一罐水带了进去。我在想，如果是恐怖分子，带罐液体炸弹会比这个困难么？对于这种形同虚设的安检，对得起等待的观众么？不如直接撤掉。
二，布展内容不精彩
昨天看了铁路馆，人保馆，城市最佳实践区，案例馆，通讯馆，船舶馆，另外打听了一下cisco。其中铁路馆，人保馆，城市最佳实践区基本不排队，但是很无聊，没有什么有意思的展品。以铁路馆为例，从上层走到下层就是一堆展板，上面写着各种宣传资料来忆苦思甜，有几个车站模型，有一个模拟铁路管控的大屏幕——也就这个有点新意。
通讯馆，船舶馆，cisco都有一定的排队，这几个馆也没什么有意思的展品，主要就是放电影。3D电影，360度电影，4D电影，各种先进的电影技术组成了一堆——电影院。我估算了一下，电影院基本就是排队的理由。一次电影大约是10分钟，可容纳100-200人，平均6秒一个人。一天最长的有效布展时间是46800秒，一天也就能接待7800人。浦西大约是50个馆，一个人去一次至少看三个馆，这样算下来浦西的接待游客数极限是13W人。如果考虑时间和场馆的非平均性，安全的接待人数不到10W。外推到全站馆，每日安全接待人数30W上下。
从内容来说，通讯馆是我最失望的一个馆，也许和我从事的行业有关。进门整了个ICT终端，但是完全没体现交互性，从头到尾就是作为第二显示屏来使用的。连最基础的投票的展示都没有做到，等于一个掌上电视。第六感这种超时代的Geek装置没出现就算了，最起码出现了两年以上的VR/AR技术应该有展示吧。也没有。
感觉整个浦西，与其说是一个世界先进技术和理念的展会，不如说是一个大的展板通道和电影院——付费而且需要排长队。作为佐证的，昨天我在世博园浦西区没有见到几个外国人，全是中国人。这不是向世界展示中国的展览，而是中国人自娱自乐，外国人趁机赚钱的狂欢。
三，科技应用不充分
这个问题涵盖整个世博，凸显了中国的特色和现状。照理说，世博是展示国家和城市科技和人文水准，展示自身实力的舞台。但是上海世博连最基本的，已经在中国广泛投入使用的一些技术都没有充分展示，实在是有亏盛名。
首先是公共交通系统。世博的公共交通系统使用电力车，听起来很先进。但是车在哪里，还有多久来一辆，车上还能容纳多少人，一概不知道。杭州早在一年半到两年前已经运作了公交查询系统，在每个站牌上都可以看到下一辆车还有多远，需要多少时间。从理论上说，计算车体重量来推测车上有多少乘客也不是太难的事情。也许有人觉得世博筹办的时候早在4年前，杭州还未运作这个系统。然而根据贝壳的搜索，世博的车上是带RFID系统的，就是信息不对公众开放而已。这简直是恶意的故意。
其次是RFID，沃尔玛已经大规模使用有源RFID进行盘货级管理，也算是已经工程级别应用了。即使考虑成本和人流问题，也可以在幼童或其他需要管控的对象身上戴上RFID设备。允许监护人通过短信精确定位人员位置。这个也没见着。
最后是排队问题。目前排队区前有需要排队多久的告示，这是一个非常人性化的举措，然而还不够现代化。从技术上，自动计数每个排队区的人数，队伍的放行速度，从而精确计算当前排队时间是很简单的事情。将这些数据汇集到中央服务器上，就可以知道每个场馆的热门程度。同理，入园人数的和各个园区门的排队长度也不应当定时统计，实时统计并不是一个无法解决的工程问题。
而地图服务已经是一个很大众化的服务了，对所有的游客提供全地图导航。如果有GPS还可以加入GPS全地图导航，并且以颜色显示场馆的热门程度，技术上有任何难度么？压力根本不是问题，可以使用多个缓存服务器以分钟级密度从主服务器同步数据，从而以冗余集群的方式提供超大规模服务。
以上理念的实施完全没有任何技术上或者工程的难度，然而世博举办方完全没有考虑这些问题。反而是采用了白菜方案，就是一堆名为白菜的志愿者，来填充本应属于机器的问题，这充分凸显了中国的特色和现状。在人力资源太过便宜的中国，使用技术来替代人力，节约成本并为用户提供更好的服务是没有前途的。王道是进一步降低人力资源成本，使用更多的人来替代机器。反正从成本说，每个人都只是颗白菜而已。</description>
    </item>
    
    <item>
      <title>C10K的卡通解释</title>
      <link>//blog.shell909090.org/blog/archives/121/</link>
      <pubDate>Sun, 13 Jun 2010 13:39:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/121/</guid>
      <description>以前有一帮医生，帮一个城市看病。当然，医生少人多，政府就开始动脑筋，怎么样让医生给更多的人看病。
最开始是医生去病人那里看病的，医生花在路上的时间很长，于是成立了医院。让病人过来，节省医生的时间。当然，病人肯定比医生多的，这是整个文章的假定。为了保持原来的模式，病人到了医院后，会有自己独立的一间屋子，完全模拟在家的感觉。这样会有什么问题呢？问题在于病人独占了医生，在病人抽血，验血的时候，医生无所事事，因此效率很低。
后来转换了一个模式，医生过一段时间就离开当前病人，看看哪个病人那里空着就过去。这样的目地是为了防止一个病人拉住医生不放，将医生的时间平均分配到多个病人头上。这样的动作快多了，但是医院受不了了。原本8个医生，一人一个病房。现在8个医生要在N间屋子里穿梭，万一每个屋子里的病人都是在抽血，那这个N就会无穷大了，现在是屋子不足了。
然后又换了个模式，对不起，现在不是一人一间屋子了，是一堆人一间屋子。每个人只要一个床和一个病例记录，其他的设备可以有限的共享。这样屋子不足的问题得到了部分的缓解。问题是医生又不干了。一方面离开病人再找空病人费事又费精力，另一方面抢设备也是个困扰。医生需要设备的时候会让护士去看看，如果有就拿过来。可是两个医生一起下这个医嘱就会出问题，一个护士看看还有，回去说有，再去拿的时候另一个护士已经拿着最后一个离开了。就算是同一个医生，下这个医嘱的时候，两个执行的护士也会这么打起来。
医院方面动了动脑筋，干脆这样吧。一个病房里只能一个医生负责，多个病房公用的设备看到有就可以预定起来。这样病房里的设备是不会抢起来的，而病房外的设备先到先得，也算公平。医生在病人去抽血等等活动的时候再离开病人，而不是每隔固定的时间。每隔一个很长的时间护士会去巡房，如果医生还在被同一个病人纠缠，护士就会让这个病人强制休息。
不知道有多少人看懂了？下面是答案。
第一种模式叫做服务队列模式。医生是资源池，病人是待处理请求。这个模式的问题是请求过程中往往会有大量IO出现，此时CPU陷入等待，很不合算。
第二种模式叫做多线程。医生是CPU，病房是进程。一个病人新建一个进程，系统将CPU在多个进程间调度。此时的问题是进程对系统资源的消耗比较大。
第三种模式叫做多线程，医生是CPU，病房是进程，床是线程。每个请求新建一个线程，CPU在多个线程间调度。此时系统资源消耗的问题得到一定缓解，问题变成上下文切换和资源锁定造成的浪费。
第四种模式叫做协程。CPU只在必要的时候离开当前请求。什么是必要的时候呢？就是大规模IO之前。IO完成后，CPU会再度调度回来，这样避免了频繁的上下文切换。而在一个CPU的情况下，这样的模式不会造成竞争。（多线程模式就算只有一个CPU一样竞争，因为CPU可能在任何时间离开线程，包括原子操作内部）
沈游侠曾说过，好的构架是让瓶颈只出现的CPU上。当然，从更广义的来说是只让瓶颈出现在最紧张的资源上。显然，如果是服务器，CPU和总线带宽多数是最紧张的资源。</description>
    </item>
    
    <item>
      <title>关于富士康，还有话说</title>
      <link>//blog.shell909090.org/blog/archives/120/</link>
      <pubDate>Fri, 11 Jun 2010 13:59:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/120/</guid>
      <description>无原则的高额抚恤会不会引诱员工跳楼？我觉得这个是无异议的。家里有困难的人为了家人往往什么都愿意做，大家可以想想看如果将抚恤金提高到1亿，家里有困难的职工们跳不跳？ 因此不能无原则的抚恤。道义上看是好事的事情如果不谨慎，往往会酿成灾难。
劳动规定的问题。有个朋友说这要放英法美，怎么样怎么样的，实话说我觉得没什么可比性。要可比首先就要这三国和中国开放人口互通工作流动互通。一个劳动力相对不足的国家，工人利益就容易得到保证。而一个劳动力相对过剩的国家（实际上几乎是世界第一过剩），就没什么工人利益可言。
还是自杀率比较问题。上篇文章的核心观点其实是，如果富士康比周围工厂更加差劲，而且没什么力量阻止人员流动，那么员工就会跳槽，而不会自杀。而如果富士康周围的工厂也一样差劲，那么大家的自杀率应该差不多。
盼头。小猫对上篇文章说了一个悖论，差劲的工厂反而比好的工厂有更低的死亡率。因为差的工厂的工人会希望进入好的工厂，而好的工厂的工人已经无路可去。我在想，我要是去了google就会自杀？（当然，google已经不在中国了）结论当然是否定的。这个区别的潜台词是，制造行业的工人们，你们最好的出路也不能带给你们希望。
托管。郭台铭想把周边设施卖给政府，再租回来。想法不错，职工的生活本来就不应该企业完全包办，组织组织活动就差不多了。全包办下来的大包大揽模式我们干了几十年，最后还是自己给自己推翻了。
罢工。中国的工会是个摆设，这基本已经成为常识了。在这种情况下，工人还能组织起罢工，我在想到底是不是因为日子过不下去了。就是说，尽管从人力供给-生产需求的曲线均衡来说，当前失业率下应该有更低的工资，然而这个工资无法养活一个人。
涨价。中国劳动力大大过剩，似乎是个定论，然而是否真的过剩还得看本田将来的反应。风口浪尖上自然不会顶风作案，然而如果确实有降价空间，在风波过去后本田应该会有动作。如果本田继续风平浪静的生产，说明中国的劳动力并不过剩。
额外一点，20年后，我们会怎样。现在的社会是普通家庭+独生子女结构的混合，最年长的独生子女也不过30多岁。一个普通家庭大约是一个家庭供养两个 老人和两个子女，供养比例2:6。20年后，社会上的主要劳动力都是现在的独生子女，典型的一个家庭要供养四个老人和一个子女，供养比例大约是2:7。供 养比例并没有升高太多，而每个人可以多获得额外的资源。如果从理想情况来说，每个人的日子应该也还不错。当然，这只是从理想情况来说。
额外一点，医学的进步造成贫穷的社会。想想看无劳动力的老人平均寿命从80提高到120的情况。现在退休年龄已经在逐渐延长了，正是在对应这个问题。可是能延长到80么？80岁的老人还准备让他做什么呢？
额外一点，中国的医患关系。无中立的第三方监管，无公信力，造成医患相互不信任才是最可怕的问题。
贝壳前几天去看眼睛，觉得眼镜度数不对，准备重配。医生检查之后，做了一个荧光染色检验，检查是否有干眼症。其他检验（眼压，验光）都是先付款后进行，而且有明显的必要性。这个检验是先做后付款的，因为做的时候还不能让贝壳知道，而且从非专业人员的角度来说看不出必要性。如果从中立角度来说，难免有借机骗 钱的嫌疑。这个检验真的必要么？是不是在借机多收费呢？不过在验光时医师的话打消了贝壳的疑虑，他说，你的眼镜度数配的很准，不用考虑再配了。说这句话的 时候，隔壁就是这家医院开的眼镜店，我相信他是可以从眼镜出售中获得抽成的。这说明两方面问题，一方面医院开和医疗相关的盈利行业，很容易引起&amp;quot;是否必要&amp;quot;的猜测，从而造成医患关系紧张。而另一方面这个医师在我主动想配眼镜的情况下劝我没有必要，想必不会为了区区几块钱故意多做个检查。</description>
    </item>
    
    <item>
      <title>关于富士康的几点</title>
      <link>//blog.shell909090.org/blog/archives/119/</link>
      <pubDate>Fri, 28 May 2010 13:03:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/119/</guid>
      <description>1.富士康群体自杀的称呼上，请别用第十跳，第十一跳称呼。这样会让人觉得他们生前是个数字，死了还是个数字。每个人都有尊严，都有自己的名字，请用名字称呼每一次自杀。
2.血汗工厂问题上，我不清楚，不发表意见。但是吊诡的是，如果只有富士康是血汗工厂，那么员工大可以辞职，死了挣再多钱也没意义。（不排除无法辞职强制劳动的可能，但是从现有资料中没有发现）如果全深圳都是血汗工厂，别的工厂又没有那么高的自杀率。所以一个推测性的结论是，富士康连续自杀问题和血汗工厂无关。（注意这不是对&amp;quot;富士康是否是血汗工厂&amp;quot;的结论）
3.是否限制最高工作时间？其实富士康应该严格限制的。从单位成本的劳动力价格来说，加班的劳动力价格比正常雇用高。因此通常只有&amp;quot;同一个人能产生较高的劳动生产力&amp;quot;的情况下，才考虑持续的加班。例如，两个程序员比一个程序员平均效率更低，因此软件界更倾向于加班。富士康的生产通常是无差别的，加班又支付加班工资。因此加班实际上是在高价购入劳动力，这是不合算的。如果富士康有意持续加班，我们只能解读为加班工资（通常1.5倍小时工资）比正常工资成本更低，原因未知。
4.企业是否需要对非劳动所致的自杀负责，显然是否定的。假定有个小公司，老板一人，员工一人，每天过来干点活，大家相处的很好。有天这个人非因劳动的原因自杀了（例如和家人吵架，在家里跳楼），老板被人拉住要赔偿，公司要负责？这个太荒谬了。我们现在已经不是国有大工厂时代，让企业负责员工的方方面面显然不可能。
5.企业对于自己场所的管理。无论是生产用的场地，或是无偿（其实是以工作为代价）提供给员工居住的宿舍，都属于企业的场所。对于这些场所，企业有保障在场所内人（包括员工）的生命和财产安全的责任。以富士康的情况来说，就是，富士康是否尽努力的去阻止员工在场所内自杀。如果富士康没有尽力（当然，实情我不知道），就是有责任的。
6.员工心理是否是个劳动问题。这个问题是个非常有争议的话题，因为劳动会极大的改变员工的心理，然而心理又不仅和劳动有关。这个请立法解决。
7.媒体管控问题。虽然我反对通常意义上的媒体管控，但是我赞同在这个问题上的媒体控制。对于富士康的报道显然会加重富士康员工的心理压力，促进他们继续跳楼。具体请查询自杀模仿。</description>
    </item>
    
    <item>
      <title>在中国投资合法么</title>
      <link>//blog.shell909090.org/blog/archives/118/</link>
      <pubDate>Mon, 24 May 2010 14:45:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/118/</guid>
      <description>无论是法律规定上，还是现行现状，中国都允许私人进行投资。然而我们得反过来问，在中国投资合法么？
首先是一个罪名，叫做非法集资。我引述非法集资的几个特点，大家看一下。一是未经有关部门依法批准，包括没有批准权限的部门批准的集资；有审批权限的部门超越权限批准集资。二是承诺在一定期限内给出资人还本付息。还本付息的形式除以货币形式为主外，也有实物形式和其他形式。三是向社会不特定的对象筹集资金。这里“不特定的对象”是指社会公众，而不是指特定少数人。四是以合法形式掩盖其非法集资的实质。
在这个罪的认定中，二和四是句废话。没有承诺付息，傻子才投资，而投资总归是以合法的面貌出现的。关键是一三两条，未经有关部门审批，和面向社会不特定对象。诚然，投资经过有关部门的认定和批准，出问题的概率会小一些，然而这是计划经济，而不是市场经济。政府针对集资领域，真正应当打击的，是以非法占有为目地，以投资为手段，骗取他人财产的行为——那个叫诈骗。非法集资罪名的存在，使得资本无法自由流动。有多余资本的人想投资到一个被看好的项目上，他们不能绕过有关部门，否则这个项目就满足了“未经批准”和“不特定对象”两个条件。这样，就限制投资只能由少数几个人进行，或者投资到有关部门认定的项目上。
这条法律实际增大了风险投资的风险，或者说抑制了有活力的小公司成长的速度。通常风险投资的运作方式是，向公众（以美国法律为例，一个子基金不超过499人，原因是超过500人持股就要出现在财报上）吸收存款（这帮人的资产往往不是很庞大，但是远远超过普通家庭），然后混合投资在数个到数百个不同的项目和公司上。其中大部分的项目都失败了，但是成功的项目往往会获得数十倍到数百倍的收益。（以Google为例，我记得最夸张的投资回报是1500-3000倍。忘记是在天使阶段还是VC阶段出现的）这样，一个子基金往往会获得稳健的，高额的回报，同时还会催生出各种新兴公司。例如雅虎，例如Google。然而我们反观整个投资过程，发现他正好满足“非特定对象”的特征。那么有关部门不批准，这些小公司怎么办？这无疑是政府在主导投资。
在中国，变通的方法不是没有，一个子基金，由几个人（具体几个也不知道，只能去问有关部门，反正一个人应该是安全的）对一个项目进行投资（因为资本总量的限制）。成功就是成功了，失败就完蛋了。如我上文所说，这提高了风险投资的风险。
第二个是我国关于房地产的一个规定。凡是新房购买五年内出售的，要征收一定的税。这个规定的目地是打击炒作房地产。实际上这个规定推论其理论依据本身就是荒谬的。炒作房地产，是将资本投入到某个对象上，获得该对象的某种权力，并且等待权力价格上涨后售出，从而获得利润——这完全符合投资的特性。炒作房地产非法么？投资非法么？如果不认为投资非法，为何要打击呢？如果说房地产事关民生不能容忍投机，又为什么要通过市场流通和调节呢？
诚然，炒作房地产会榨取社会财富，形成财富聚集效应。但是其本身应当不违法，为什么要打击呢？这点我倒是很认同我党当年接手上海后，对应棉花煤炭炒作的手段。通过大量的运入和抛售，降低价格，导致恶意投资的破产（当然这里排除讨论一些刑法打击的手段）。同样，对应房地产炒作的手段，应当均衡城乡发展，东西平衡。加大房屋建造投入和保证房建设和分配，降低房价。如果这些手段短期无法见效，政府能够做的事情，也应该是，认定房地产建造和投资（主要就是买卖）过程中，是否有联合垄断价格的现象（就是所谓的反托拉斯）。
从上文两个规定和政策来看，我们的执政者头脑中，还是将投机倒把作为一种罪来认定的。这种罪不分投资的大小多少，凡是以资本方式介入，获得超过国家规定的利润，并且未经国家有关部门批准的，都属于犯罪。从政治层面上我们很好理解。我们是社会主义社会，因此不存在着压迫和剥削。而投机倒把正是一种压迫和剥削的方式。然而尴尬的是，我们的经济却是以市场方式运行。以市场方式运行的市场就需要一个再分配机制，将民众手中的资本集中起来，投入生产领域——这正是投资。一个市场方式运行的经济配上一个计划方式运行的投资，各种奇奇怪怪的现象就产生了。正如一个企业家说的那样——赚钱的不让投，让投的不赚钱。游离资本在正常渠道内得不到宣泄，就会以各种奇怪的角度宣泄出来。例如投资股市，投资资源（浙江商人在山西的煤炭投资），投资房地产——并且统统出了问题。
从更深层来说，我们的民众也认为，投资是一种原罪，其表现就是仇富（当然，仇富的原因不仅是投资，还有非法）。很难说政府和民众谁影响了谁，然而这种市场经济和计划投资分离的现状是不能持续的。持续的这种现象一定会催生各种问题，而且按下葫芦起了瓢，问题绵绵无期。</description>
    </item>
    
    <item>
      <title>成人的童话</title>
      <link>//blog.shell909090.org/blog/archives/117/</link>
      <pubDate>Sun, 23 May 2010 10:46:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/117/</guid>
      <description>听故事不说话。
从前，有家人家有十三个兄弟（兄弟比较多哦），老大老二在大城市打工，老三在小城市打工，老四到老十三在老家种地。大家日子过的还不错。
有天，老大招待所有弟兄到家里做客，老二去了，看看，和自己日子过的差不多，喝杯茶跑了。老三看看，这日子比自己在小城市过的牛，想想也挺动心，不过自己日子也还可以，不想动，喝杯茶也跑了。老四到老十三一看，哇，比我们种地舒服多了。其中老四到老九动了念头，能不能也去城市里打工呢？
于是老四到老九兄弟六个，就跑到城市里打工了，而且大家一窝蜂的跑到了老大老二所在的大城市。本来住两个人的城市这下住了八个人，房租物价立刻上涨，工资却连连下跌，大家怨声载道。
老四脑子比较活，说，现在八个兄弟都堆在老大这里，那是比较麻烦。老三所在的小城市，地方更大，能不能分几个弟兄到老三那里去呢？那里物价比较低，工资却比较高，大家照样做工，东西运出来就好。
想法很有创意，可惜，老三所在的小城市没那么多工厂，也没那么多工作。因为首先，老三所在的小城市运输不便，运不出这么多东西。更麻烦的是，工厂问银行贷款，却贷不到什么钱。
兄弟几个一合计，老大老二说我们也挣了点钱了，干脆，我们出钱，你们去办工厂吧。我们算入股，回头给我们算点利息就好。另外再问老三借点钱开公司搞运输，运输问题也解决了。
但是这个方法也行不通，老四到老九没钱，老大老二有钱，可是借给他们就算私自融资，搞不好要坐牢的。法定做法是老大老二存银行，但是银行借给谁多少钱是政策规定的，老三所在的城市还是贷不到这么多钱。老四没辙，去老三那里自己开工厂的念头就压下了。
老大手里的钱没了去处，老大想想，这点钱放着也不是回事啊。那就干脆买房吧，反正这里这么多兄弟，不怕卖不出去。这一买地，房价就跟着上去了。老三也跟着买了点房。
老四要结婚了，问老大买房，老大按当时房价卖给他，足足翻了三倍。老大很满意，老四很受伤，就到处骂老大。老大也挺火，我好意接待你们，你们跑过来弄的我赚不到钱还东西又贵，我好容易投资个房子你还骂我。所以也开始骂老四。
骂归骂，老大还是得卖房子给老四，老二有房子，用不着。老四也没辙，为了保证耕地面积，政府限制盖新房，老四还是得问老大买房子。所以老四就问银行借钱，买下了老大的房子。银行本来不想借，国家说兄弟六个进城不容易，照顾照顾吧。
一照顾不对了，房价直线上升。国家看看情况不对，准备调控房价。银行不干了，说前面老四没钱你说要照顾照顾，让我借了钱。现在你调控房价，房价一跌，老四就破产跑人了，你让我亏这么多钱不是回事吧。
国家没办法，只能宣布，老大不许买了房高价卖给老五到老九，这叫投机倒把，要收5%的手续费。
现在十三个兄弟里有十二个在抱怨。老大抱怨政府不让卖房，还要加收他手续费。老二抱怨工资低物价高，过去辛辛苦苦赚到的钱现在什么都干不了了。老三过的还是挺舒服。老四抱怨自己赚到的钱全交给房子。老五到老九抱怨自己买不起房子结不起婚。老十到老十三抱怨兄弟们都在打工自己还在种地。
&amp;ndash; 无能者无所求，饱食而遨游，泛若不系之舟</description>
    </item>
    
    <item>
      <title>专业程序员需要掌握的几种语言</title>
      <link>//blog.shell909090.org/blog/archives/116/</link>
      <pubDate>Thu, 20 May 2010 18:03:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/116/</guid>
      <description>受到这篇文章（http://blog.youxu.info/fyi/21-days/）的启发，我突然想起对我所会的和要学的语言做个分类。确定一下专业的程序员到底需要会多少种语言。
1.系统类。只有C一个，必须学，而且需要在几个系统上编程就要学几次。学习系统类语言需要的是对系统结构和运行原理的了解，因此抽离系统的学习语法/抽象库/代码结构是没有任何意义的。
2.面对对象类。C#,Java等，推荐Java。构架方法优美大气，代码容易修改容易阅读，复用性好。然而做事上架梁叠屋，吃个馒头洗三遍手。可以学习构架方法，千万别学做事方法。
3.一门快速的脚本语言。Python, Php, Perl, Bash，各有特色。实际上如果你有空可以统统学一遍，非常有好处。快速脚本语言的特色就是整合其他代码和已经存在的东西，快速的构建出一个可用的程序。
4.一门语法抽象语言。目前只有Lisp和Scheme，推荐Scheme。这两种语言是在人工智能和符号推理的发展过程中产生的，因此对理解“机器是如何思考的”很有帮助。注意这两种语言的本质就是有限图灵机。
5.汇编。汇编语言种类太多，推荐80x86汇编。熟悉汇编语言对了解硬件和系统如何工作很有帮助，并且为查找系统内部(internal)的错误提供了便利。
按照上面的分类，程序员最少要会五种语言，我假定是C/Java/Python/Scheme/Asm80x86。C++不要学，那个是万恶之源。那么下面列举了我推荐的一些书单，可以由浅而深的学习这些语言。
1.入门，《21天学习C语言》《Dive Into Python》《80x86汇编基础教程》等等，这类书的目地是快速的教会是使用语言和语法。完成这个阶段的程序员可以找一些简单的题目做一下，但还不能独立完成普通程序的编写。
2.简单，《Think In Java》《数据结构与算法（Java语言版）》《设计模式》。这个层面基本涉及了数据结构，设计模式和编程方法。完成这个阶段后，可以找几个实际项目玩一玩了。
3.普通，《操作系统：设计和实现》《Unix系统编程》《windows核心编程》《TCP-IP详解》《Effective C》。这个层面涉及了系统运作原理和细节。完成这个阶段就可以写一些系统工具了。
4.阅读，《Python源码剖析》《深入浅出MFC》《Linux内核完全注释》。这个阶段注重阅读和积累各种代码经验。
5.专家，《计算机程序的构造和解释》《计算机程序设计艺术》《MIT算法导论》《数值算法》。通过前面的学习，普通程序编写应当已经不成问题。这个阶段面对的是将实际问题抽象成数学问题后，试图从数学上进行解决的过程。从此以上，就是数学的领域了。</description>
    </item>
    
    <item>
      <title>小公司在IT上容易犯的几个错误</title>
      <link>//blog.shell909090.org/blog/archives/115/</link>
      <pubDate>Wed, 19 May 2010 13:25:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/115/</guid>
      <description>很多同学现在自己开公司，或者有开公司的计划。公司都是由小做大的，万事开头难。小公司由于成本和规模的限制，IT上很多问题是不得已的。例如没有自己的网管，没有保密规定等等。然而注意以下几个低级错误，从IT从业人员角度来说，这些是绝不应当发生的低级错误。数数看您那里有几个？
第一，无线不设密码，或使用WEP加密，或公开SSID。
这是任何称职网管的第一禁忌。WEP，公开SSID，相当于弱无线网络。通过嗅探方法，别人很容易获得网络上传递的重要数据。不要以为谁会来关心你的数据，除非你有把握把公司里所有资料晒到网上也没问题，否则还是小心为妙，出问题再补救就太晚了。具体看前面有篇《无线网络安全问题》。
第二，使用hub而非交换机。
技术角度不说了，造成的问题和上文一样。这两个问题，只要请一个称职的网管当顾问，帮你进行一次规划就可以避免。惠而不费，何乐不为。
第三，一个隔间只拉一根网线，或者只有一个电源头。
兄弟，后期搞不好隔间会坐满的。就算没有，万一坏了呢？马上找人修理？起码两个隔间三个插座/网口。一个是方便损坏后替换，同时也方便新添电脑。
第四，雇新手当网管，没有公司内服务器。
相信我，找个靠谱的网管偶尔来几次，其他让行政接手，比找个新手当网管便宜又实用。你需要的是不会出问题，和出了问题能处理的人，而不是价格低廉却在发生问题时手足无措的菜鸟。
同样，让每个员工自己发布共享文件，大家互相访问，打印机在需要的时候搬来搬去。这是最没有管理的公司做的事情。一旦员工多于三人，找台电脑做服务器。共享文件，处理打印，跑个论坛什么的，比扁平而混乱的管理强。
第五，成批购买电脑。
对于大公司而言，一次购买上百台电脑只是公司内的一小部分。如果这些电脑出问题，不会引发大的赔偿问题，也不会造成公司停摆。但是如果一个小公司一次购买同型号的电脑，或者从同一个供应商那里进货太多。那么万一出问题，不说固定资产损耗。公司停摆造成的损失也是惊人的。
第六，弱邮件系统。
如果公司邮箱在发送和接收时没有启用SSL或TLS，会导致员工在其他网络中接受邮件时内容泄密。如果使用webmail，也要注意全过程需要有SSL。最好的办法是让网管尝试嗅探攻击一次，如果拿不到内容，邮件供应商就是过关的。另外，即使电子邮件供应商过关，邮件在传递途中也可能泄密。因此对于极密级的东西，rar加密打包后发送，密码另行传递。
第七，过份信任电子邮件效力。
也许有人不知道，“电子邮件无法篡改”只在公司内被认可，拿着企业电子邮箱和其他公司或离职员工打官司是没有效力的。因此，如果需要无法篡改的内容，请用纸。
第八，太短的员工密钥。
如果您的系统很安全，然而员工设定的密码为1，这等于一个最不安全的系统。因此，强调员工密码的安全性，加上密码设定时弱密钥检查是一个很好的方案。
第九，员工自己持有文档。
文档是企业的重要资产，因此整理和保存文档是公司的责任。让行政部的人跟踪每一个应当保存的文档，不要在员工离职后打电话过去要人帮帮忙看看三年前什么什么文档是否还在。
第十，不分机密级别。
小公司对于机密的规定无法太严格。但除非所有人的机密级别一致，否则一旦区分普通员工和经理，起码将文档划分成涉密和非涉密。不要让普通员工接触涉密文档。
第十一，过分神化IT。
有些小公司过于追求现代化，上班用ERP和OA管理，销售用CRM管理，交流沟通走论坛化。何时采用IT系统管理是一个复杂的问题，但是过早追求IT化会对公司发展造成不利影响。实行IT化是有成本的，仅在你需要的地方进行实施。
第十二，有极密的内容，没有极密的渠道。
回想一下，你们公司的报价是怎么传递给一线员工的？服务器密码呢？公司银行账户呢？对于最高机密的内容，没有合适的传递渠道是不行的。QQ，MSN之类的IM工具机会百分百的会导致泄密，对于嗅探和查看记录他们没有任何抵抗力。短信和电话也是不行的，虽然很困难，但是还是可以窃听的。电子邮件在附件中放一个加密的rar文件，并且提前约定密码，是个很好的方案。</description>
    </item>
    
    <item>
      <title>无聊的测试</title>
      <link>//blog.shell909090.org/blog/archives/114/</link>
      <pubDate>Tue, 11 May 2010 12:41:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/114/</guid>
      <description>现在有很多智商测试，有一类题，上面有一些数字，让你填写下一个是几。然后现在题目越出越变态，其实这种问题根本不是在考察智商，而是在考察常识。不信？我出几个你做做看？
数列-0.2,-4,-18.8,-50，下一个是多少？
答案：-105.4
原因：这是表达式-1 * x^3 + 0.5 * x^2 + 1.7 * x - 1.4在x=1,2,3,4的值，x=5时为答案。
做死你吧？还有更变态的。
数列29879,29917,29927,29959下一个是多少？
答案：29989
原因：这是30000以内的最后几个质数，隔一个取一个。
晕了？这还不是最难的呢。
数列15, 46, 78, 71, 74, 44, 81，下一个是几？
答案：54
原因：这是python的random模块，在seed(100)时产生的1-100随机数序列。随机数本质上是一个大的S盒子，通过K*prev mod N的产生余数序列。要求答案并不需要100，只需要最后一个数和KN。而通过上面的序列可以大致推算出一对正确的KN，任何满足上述算法的答案都是正确的。
够变态了吧。这可不是你智商不足，而是你知识不足。
我们反过来想一下，如果某人，假如Isaac Newton，或者Leonhard Euler，Bernhard Riemann。他们能答出多少？也许第二个有希望――有些变态数学家真的能背出很多的质数。第一个――唔，考虑一下也有戏。第三个就算了吧，他们不是程序员。然而，他们远要比我们聪明。那些不知道三次方程概念，导致没法答第一题的，一定比答出来的笨么？那些不知道质数概念，导致答不出第二题的，真的就比答出来的笨么？那些不知道S盒概念，导致没法答第三题的，就一定比答不出的笨么？
这是一种偏见，你知道的越多，越聪明。</description>
    </item>
    
    <item>
      <title>杭州游行程记录</title>
      <link>//blog.shell909090.org/blog/archives/113/</link>
      <pubDate>Wed, 05 May 2010 11:10:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/113/</guid>
      <description>早上9点，在上海南站集合上动车，中午10:50就到了杭州城站火车站。上二楼打车，可以免排队坐到出租，到中山北路体育场路的旅馆。离浙报很近，我以前经常路过的。check
in休整后，11:40从旅馆出发前往西湖断桥残雪。
根据gmap，本来可以到武林广场东坐Y1到断桥的。不巧，过去的时候Y1正好改线。据说了断桥那里很堵，而且距离只有一公里多点，不算远，就干脆走过去算了。沿着白堤，顶着如织的游人，我们走到孤山路的楼外楼吃午饭。运气很好，六人的大桌预约的不多，我们不到10分钟就等到了座位。点了东坡肉，西湖莼菜汤，西湖醋鱼，响油鳝丝，白灼芥兰，片儿川等菜，大家基本吃饱。人均57左右，还不算太贵。下午14:15分出门，沿着北山路到苏堤接着逛。
我们找了一圈找不到手划的小船，只能上了一条人工划的大船。价钱是120一圈，上岛一小时。我们算算不划算，还是让他划一圈直接回去算了。回到苏堤继续走人，没碰到醉春亭的隐藏Boss大叔，倒是碰到了个拿着喇叭播&amp;quot;霓为衣兮凤为马&amp;quot;的家伙。苏堤都快赶上上海地铁三号线了，什么人都有，人才济济啊。绕过花港观渔，到雷峰塔看夕阳西下。注意5月1号前后杭州地区日落时间是18:30左右，而不是我查的洋泾浜网站给出的5:15，害老子在塔上白等。往前走两公里多，到四眼井那里的青年旅舍，有一家叫&amp;quot;江南驿&amp;quot;的旅舍，饭很赞。开始去的时候还碰到老板说东西卖光怕要没的吃，最后叫号，有个人实在顶不住走了，我们才排到位置。叫了酸菜土豆牛肉，油焖茄子，麻椒鸡等一堆菜，人均才三十出头。菜量不小，东西也不错，不过是自助的。
晚上宾馆还停了一次电，闹的我们兵荒马乱。被迫用笔记本调到最亮作为光源，洗了一次此生难忘的战斗澡。
第二天，我们7点起床吃饭，结果拖到8:40才上了Y5。沿着体育场路，曙光路和杨公堤开过去，一路风景很好。下车，正是昨天吃饭的地方。继续往山里走，就到了满觉陇和翁家山，一路风景很赞。过了翁家山就是下山路，下面是龙井茶园和龙井村，我们觉得没意思就没进去。路过双峰的时候，看到旁边的茶楼是建在沼泽地上的小桥，风景幽雅。不过没进去，还是到的丁家埠吃的农家乐。东西很好吃，吃到翻过来，不过价钱也不便宜，一个人大概要50。
下午比较热，到2点多我们才慢慢出门，坐Y3到岳庙的KFC吃点甜品消暑，出门再坐K7到火车站旁边的上岛咖啡等火车。晚饭在火车站大厦的外婆家吃的晚餐，还是一贯的价格便宜量又足。不过恰逢五一，以前常在那里吃，从没看见那么可怕的火爆场面，排队等座就等了45分钟。上菜倒是很快，东西还是一样的不好不坏。
要点，去健行的记得带遮阳的帽子和一条小毛巾。小毛巾缠在手腕上，可以擦汗降温，不容易中暑。进山前要带一瓶水，自己喝，也可以倒一点在毛巾上散热。住的酒店不好要记得带牙刷，容易中暑记得带风油精。对皮肤很在意的MM千万记得带强力防晒霜，城市里用的那种大路货没用，要用很粘稠的那种，不容易被汗水化开，否则一擦就没了。一定要带一台GPS手机，基本免去没人问走错路的尴尬。</description>
    </item>
    
    <item>
      <title>关于人力资源的一些话</title>
      <link>//blog.shell909090.org/blog/archives/112/</link>
      <pubDate>Tue, 27 Apr 2010 12:50:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/112/</guid>
      <description>上周被猎头了，虽然没兴趣去，但是还是很高兴。算是对自己能力的一种认可吧。顺便联系了老董，得知原来公司的近况，又看了老赵的一篇文章。觉得有些话犹如骨鲠在喉不吐不快。
1.程序员是什么人，他们能干嘛
程序员当然是写程序的人，但是不是所有写程序的人都叫程序员。（耳熟？不是所有特仑苏都叫牛奶）一个程序员，必须能够完整的了解需求，设计系统，构架系统，完成代码，并且测试通过。当然按照现代软件工程，程序员不必亲自做这些事情。甚至更严格来说，要求这些事情不能都由程序员来完成，然而一个程序员是可以做到这些的。在这以下，基本都叫代码工人。
如果按照以上的标准来衡量，老赵的这篇文章（http://blog.zhaojie.me/2010/04/why-i-say-no-to-aptech.html）里面说到的问题是不言自明的。很多培训机构培训学员使用快速工具，例如eclipse或者vs，基于可视化系统编写项目。这些学员有能力很快的完成一个项目，然而，却无法反转数组。这些“准程序员”所能做的项目，不会超出在培训中所教授的范围。例如如何完成一个论坛，或者如何编写一个博客。问题是，这些教授的内容，都是延续多年的，被反复验证的问题。这些问题，有着最优秀程序员们做出的成熟解答，根本不用这些菜鸟多此一举。
2.精英和普通程序员
昨天和猎头说到程序员和精英的区别。现在所有的老板都希望自己的队伍中能有几个精英程序员，然而joel on software里面谈到过，你很难找到一个精英（http://www.ruanyifeng.com/blog/2008/11/finding_great_developers.html）。我的问题是，什么是精英，什么是普通人。
一个人，要成为精英，需要具备什么条件呢？不是快速产生代码，也不是良好的算法能力。要成为精英，编程能力和算法能力是必要的。然而更必要的是时间-事务管理，沟通和领导能力，名气和知名度，对行业的深刻认识和远见，以及人品。精英最大的价值并不在于写程序，而是能够激活公司内其他人员的能力。例如你可以方便的招聘到其他的程序员，让风投觉得你的团队靠谱，因为他在行业内的知名度很高，有相当的号召力。他可以培育新人，和其他程序员合作，稳定可靠的完成项目，因为他拥有良好的沟通和领导能力。最顶尖的精英可以产生新颖的创意和想法，让你规避可能的风险，让顶尖粉丝围着你转，因为他们在行业内领导性的认识和远见。当然，最重要的是，他是可靠的。
3.精英一旦聚集，精英就密集
昨天和猎头谈的另一个问题就是，他们需要精英还是普通程序员。可以想象，他们的标准答案是两个都要。然而我要说的是，精英和普通人在大多数情况下互相排斥。一旦公司或部门中多数都是精英，很神奇的，很快里面全都是精英了。而一旦一个公务或部门中多数都是普通人，那么很难留住精英——很多情况下都变质了。所以最好选择一者，或者为精英们专门成立个部门。
为什么精英和普通程序员互相排斥？这个问题要分开说。精英程序员信仰简洁的人生，他们一般不屑与笨蛋说话。很多时候你向他们寻求解答，他们往往用一两句话点明这个问题的原因和机理。多数情况下这一两句话相当受用，值得你用几个小时来消化。然而多数普通程序员的问题是根本听不懂他们在说什么。曾仕强说过，一个能干的领导只有一个作用，就是证明你的手下都是白痴。在这种环境下，没有成为顶尖高手资质的，对技术没有狂热热爱的程序员会迅速离开，而有这些资质的程序员会快速的进化成另一个精英。而反过来，让一个技术高手来领导一群普通程序员是一件很痛苦的事情。要么他受尽折磨后离开了这里，要么他就变成了一个领导者。这种情况下他不再和其他程序员沟通技术细节。反之，他利用自己的技术能力建立解决问题的框架，分解问题为一些普通程序员能解决的问题，并丢给他们——而不管他们完成的细节。
4.为什么要来你们公司
如果你的公司需要招聘一个精英，那么你需要问这么一个问题。他们为什么要来你们公司，你们公司能给他带来什么？
程序员工作的最低理由是收入。从收入层次上说，基本有工资，分红，股份三种激励方式，分别对应了短，中，长期合作关系的激励。高工资的激励效果最显著，然而由于你对高级程序员缺乏有效的监控手段（谁来实施？总不能他们监控自己或者互相监控），所以员工很快会怠惰。分红将程序员的收入和一年内或一个项目挂钩，所以能够保证他们采取一切措施，保护自己的收入——同时也保护了你这一年或一个项目的收入。而股份则是将程序员的收入和公司的成长挂钩。然而这些并不是精英们愿意去你们公司的全部理由。
程序员做到一定程度后，对于非物质条件的要求是很挑剔的。往往我们能听说一个高手谢绝了大公司的工作，或者一些优厚的报酬，其原因往往如此。这些条件包括，部门中的人水准相近可以沟通（我们所说的3），工作自由安排，有自己的时间进行研究（隐含的就是加班很少），良好的工作环境，宽松的制度，等等。通常而言，这些人都喜欢去小公司或者自己创业了，其原因就是因为大公司很难给他们需要的东西。如果你打算招揽一个真正的高手，搞清楚他真的在意什么比一味的开高薪水更加有效。
5.愿不愿意要培训生或应届生
昨天谈到的另外一个问题就是，愿不愿意招收培训生或者应届生。这个问题的“标准”答案通常是，我们愿意接受新鲜血液，这些人的薪水具体要视能力而定，如果能力真的出众后期还可以调整。实际上，除非特殊情况，否则听到这这句话，你就应当了解到几个隐含的事实，这些东西往往和你的期望背道而驰。1.公司的压力很高，严重缺人，所以进去后可能会严重加班。2.新人工资很低，而且也没有什么晋升的空间。3.基本学不到什么东西。
为什么会这样？通常而言，公司不喜欢培训生或者应届生。更准确的说，是不喜欢培训生或者应届生应聘。真正靠谱的应届生或培训生，是靠HR去校园里面抢的。记得上面那个joel on software的文章？他们在校园期间就会脱颖而出，成为佼佼者，很少有校园里默默无名的人出校园后表现出惊人实力的（虽然并非没有）。通常HR会虎视眈眈紧盯这些真正有才能的人，要抢到一个都困难，怎么可能沦落到人力市场上应聘呢？因此如果你真的有才能，请在校园期间就表现出来。否则就需要等费尽周折进入一家公司后才能表现出来，而且很晚才能反应到你的收入上。
那么，一家公司愿意接受培训生或是应届生的真正原因是什么？多半只有人手不足，而且其中大多数是短期内的人手不足。因此不但可能要加班，而且一旦当人力问题缓解（更加不幸的是在你的试用期内缓解），能力不足的人还可能遭到遣退。是的，无赔偿的，虽然不是你的责任。即使留下来，也是作为一个基础的消耗品。主要的目的是承担大量的杂务工作，并且拉低工程师的薪水。为什么？当有大量廉价工程师存在的时候，工程师的薪水比他们应得的更低。一方面因为劳动力充足，导致自己是否会失业的竞争威胁。另一方面也因为比较性的从众心理，别人的薪水比自己更低，于是就心安理得了。此谓杀价妙方。在这种指导思想下，你的晋升和学习都无法顺利展开的。
6.做项目，做产品，做团队
这是整篇文章最大的一个问题。低端做项目，中端做产品，高端做团队。怎么解释？
最低端的软件产业，依靠的是软件项目实现来获取利润。实际上他们做的事情，某种程度上也可以叫人力资源外包，他们主要通过外包价格和人力资源之间的差获得利润。因此，这类公司的主要特征是拥有发达的渠道和关系网络，拼命寻找高价的，大规模的外包项目。同时借助大量低端程序员，压低人力成本。这类公司永远处于人力缺乏状态，除非公司快倒闭了。
中端的，大量的软件公司，是依靠对客户的了解，设计创新方案或者增强通用方案，改变原始流程，从而为客户带来好处。他们最大的利润来源是创造性的改变客户的原始流程，如果是互联网公司就是新的互动模式。这类公司的主要特征，是拥有一个强力的营销团队，和良好的售后体系。三流的公司往往试图改变团队来跻身其中，然而由于糟糕的流程设计或互动模式设计，或者用更流行的说法“商业模式”，因此无论其商业团队多么努力，都无法成功进入这类市场。这类公司对技术人员的成本并不很关心，只要小于产品的总收入就好。事实上通常来说，越是代价高昂的精英，往往能越好的完成改善流程，创新，设计，快速完成的过程，从而带来更高的收益。因此这类公司往往都有些牛人，少则一两个，多则一大群。
这样的公司，从业务来说是完整的，稳健的。然而从公司角度来说却是缺失的，也不是投资者喜欢的。问题在于，公司的成败依赖于少数几个人的激情和努力。包括公司的决策层，主设计师，等等。例如苹果公司的股价就强烈的受到jobs的影响。通常而言，投资者更喜欢稳健的，风险可控的公司。通过一个固定的制度，和可迁移的管理团队，来发现和聚集人才。这类公司才是我们所说的“大公司”，并非规模大，而是构架方式大气，做事方法正规，拥有着成为行业顶尖的可能性（虽然并不一定保证）。一家从外包和产品做起的公司，如果一开始就采用了粗放型管理模式，而没有妥善解决团队打造和管理上的问题。到后期往往是版权纠纷，禁业纠纷层出不穷。或者高级程序员来一个走一个，来的薪水一个比一个高，走的速度一个比一个快。或者干脆树倒猢狲散，公司一拍两散的也有。
因此，如果一家公司有意做大，请记得在一开始的时候就设计一个良好的团队打造计划和团队保持制度。否则当碰到问题的时候再做转换，往往已经太迟了。</description>
    </item>
    
    <item>
      <title>用android的usb网络共享上网很爽</title>
      <link>//blog.shell909090.org/blog/archives/111/</link>
      <pubDate>Sat, 10 Apr 2010 15:30:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/111/</guid>
      <description>什么设定都不需要，直接打开usb调试和usb网络共享，然后插上线路。Linux下自动出现了usb网络设备，usb0。然后――没有然后了，随便上网吧。各种分享上网工具可以全扔掉了。</description>
    </item>
    
    <item>
      <title>关于王江民先生几点</title>
      <link>//blog.shell909090.org/blog/archives/110/</link>
      <pubDate>Wed, 07 Apr 2010 11:30:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/110/</guid>
      <description>前几天惊闻王江民先生离世，我说不上是高兴还是难过。按理说，逝者已矣，种种是非也应当随风而去。然而一个人存在过，就必然有存在过的痕迹。我仅从我个人的观点，追述一下江民杀毒的印象。
我是谁？平凡的电脑用户，95年接触电脑，97-98年刚好赶上KV300L++。然后换用了金山毒霸，04-05年换用Avast。08年换用Linux，因此裸奔到现在。
在DOS时代和前Windows时代，江民杀毒是杀毒软件中的佼佼者。最初的时候，最流行的杀毒产品是防毒卡。好像当时做电脑的人有硬卡情节，什么产品都搭配卡。汉字系统有汉卡，杀毒系统有防毒卡，就是放个VCD，也有解压卡。Whatever，防毒卡一路很牛，直到DIRII病毒出现。这个病毒直接将自己挂入了DOS的设备驱动链，从而直接修改了系统，这个方法很像现在的Rootkit技术。这个思路直接导致了防毒卡的失效，而KV系列，就是这个时候涌现出来的佼佼者。KV系列的成功，一在于他强大的杀毒能力，二则在于强大的抗盗版能力。当时我也有玩汇编/反汇编，底层编程一类东西。因此很是惊艳王江民先生强大的代码能力。KV系列当时可以查杀几乎所有的病毒，电脑报纸上几乎每期都有专栏，说最近出了什么病毒，大家要扩充防毒码。现在的用户可以想象这种情况么？
在97-98年的时候，我碰到了KV300L++事件。简单来说，江民公司在KV300L++版本中加入了主动逻辑锁，当满足某些条件的时候自动触发，锁定用户的电脑。无法重装，也无法解除。具体的手法是通过修改硬盘的分区表链，做出一个循环的分区表，导致DOS系统识别失常。必须使用特殊的方法进行解锁，或者联系江民公司，进行书面的原因说明(其实就是盗版举证)。这篇文章(http://hi.baidu.com/inetpm/blog/item/9e7bea0f02e0e9266059f33a.html)中，将此事描述成正版软件商对盗版的战争。对此我表示强烈的抗议，这根本不是事实，而且我强烈怀疑此人是个枪手。我是一个KV300的受害用户，自然很清楚当时是什么情况。上文中有一段文字，我引述如下：
L＋＋事件出来以后，王江民受到围攻。网上各种言论都有，但就是找不到L＋＋事件的真实受害者用户。这一方面是因为L＋＋网络升级版只在网上放了六天，二是因为正版用户和使用没授权的解密版KV300的用户绝不会受伤害，被锁住机器的是那些在大量生产假冒KV300的盗版商。王江民自信“这个逻辑锁就是这样准确！“
KV300L++在判断用户当前插入的盘片不是江民的原始加密盘之后，会释放主动逻辑锁。这就是上文说不会波及正常用户的理由。然而，当时有大量正版用户受到伤害。至少我当时去抗议的时候，看到某个大叔拿着一堆正版包装在那里骂人，全公司都买了正版，为什么锁他电脑。为什么出现异常波及呢？因为KV300L++释放逻辑锁的条件并不是“插入的盘片有某个盗版加密盘特征”，而是“插入的盘片不具有正版加密盘特征”。这两点看似一样，但是实际上天差地别。前者逻辑炸弹很难释放，也很难奏效，而后者就很容易伤及无辜。我中标的原因就是因为搞不清哪张盘是正版的KV300加密盘，把一张游戏盘片插了进去。我相信大多数中标的人也是基于类似原因。
从更深的层次来说，软件公司有权对盗版用户做出惩罚么？可以，但只能走司法途径。如果允许软件公司私下对盗版用户进行惩处，这就等于赋予软件公司权力来伤害任意个人。因此当年，公安部对江民公司罚款3000元，不再追究。与其说是惩罚，不如说是保护。如果没有这个处罚，我相信江民公司会面临遍地开花的侵权诉讼官司——按照法理，即使盗版用户都可以起诉。因为逻辑锁是未经认定的，因此从法理上说，被逻辑锁锁定的人并不能认定就是盗版用户，更何况这个认定机制根本不准确。只要不去解锁并承认错误，江民公司就无法举证受害者一定使用了盗版。江民公司锁定用户电脑是事实，很容易举证确认，而反过来举证用户使用盗版却很困难。前者是侵权官司，证据全面，法律完善。后者则是版权官司，没有什么确凿的证据，更何况当年连版权法都没有——如果有版权法江民公司更倒霉，版权法规定基于学习目地可以合法使用24小时，这下更难举证。
何况其中大量的无辜正版用户，其中有很多人被无辜波及。至于后来Windows时代的没落，也不能说和这个无关。上文我看到的大叔，直接赌咒发誓，他这辈子不会用任何江民公司的产品。而江民的KV系列软件为了保持加密优势，在Windows时代还继续使用底层的软驱设备直接编程。先不说稳定不稳定的问题，我01年配的电脑连软驱都没有，用个P啊。直到很后来，江民公司才改掉了这个做法。更严重的问题是，由于后Windows时代，尤其是2000以后，对用户权限进行了严密保护，加上系统API的更新换代。导致杀毒软件技术推翻从头再来，杀毒软件商大洗牌，江民公司从此一蹶不振。现在的新用户也许听说过卡巴斯基，也许听说过瑞星，也许听说过金山，但是有多少听说过江民杀毒的？给别人推荐软件的人自己想想，你推荐过么？
当然，就我个人感觉而言，王江民是强力的程序员。做事踏实，技术高超。然而任何人都只是人而不是神。他是个好程序员，但不是好的商人。当技术上的领先没有被放到正确的方向，而是向着错误的方向发展的时候，一个伟大公司的没落就无法避免了。</description>
    </item>
    
    <item>
      <title>Re: [shlug] 以nginx作为subversion前端的一些细节</title>
      <link>//blog.shell909090.org/blog/archives/1665/</link>
      <pubDate>Fri, 02 Apr 2010 14:09:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/1665/</guid>
      <description>2010/4/2 Shell Xu &amp;laquo;shell909090@gmail.com&amp;raquo;
本文系电脑资料，同步到blog上。小黄姐姐不必看了，可以帮我留个言。
nginx性能不错，可惜不支持WebDAV，因此没法拿来作为subversion的http服务。于是考虑开一个nginx作为前端，后端就跑一个apache来作为容器。配置这么写的(节选)：
这样多累啊，换git/hg吧
&amp;ndash;
simple is good
http://brucewang.net
http://twitter.com/number5</description>
    </item>
    
    <item>
      <title>以nginx作为subversion前端的一些细节</title>
      <link>//blog.shell909090.org/blog/archives/108/</link>
      <pubDate>Fri, 02 Apr 2010 03:40:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/108/</guid>
      <description>本文系电脑资料，同步到blog上。小黄姐姐不必看了，可以帮我留个言。 nginx性能不错，可惜不支持WebDAV，因此没法拿来作为subversion的http服务。于是考虑开一个nginx作为前端，后端就跑一个apache来作为容器。配置这么写的(节选)： =========/etc/nginx/sites-enabled/default========= server { listen 443; server_name OOXX ssl on; ssl_certificate keys/server.crt; ssl_certificate_key keys/server.key; ssl_session_timeout 5m; ssl_protocols SSLv2 SSLv3 TLSv1; ssl_ciphers ALL:!ADH:!EXPORT56:RC4+RSA:+HIGH:+MEDIUM:+LOW:+SSLv2:+EXP; ssl_prefer_server_ciphers on; access_log /var/log/nginx/localhost.access.log; include /etc/nginx/mapping-ssl; error_page 500 502 503 504 /50x.html; location = /50x.html { root /var/www/nginx-default; } } 打开了一个https的服务，这是当然的，svn传输的数据使用http很危险。 ===========/etc/nginx/mapping-ssl============= location ^~ /svn { proxy_set_header Destination $http_destination; proxy_pass http://apache_svr; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-Host $host; proxy_set_header X-Forwarded-Proto https; proxy_set_header X-Forwarded-Server $host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } 将/svn下面的所有请求交给apache2。 =====/etc/apache2/mods-enabled/dav_svn.</description>
    </item>
    
    <item>
      <title>翻旧blog</title>
      <link>//blog.shell909090.org/blog/archives/107/</link>
      <pubDate>Thu, 25 Mar 2010 15:03:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/107/</guid>
      <description>因为工作需要，贝壳今天专门翻了翻以前的blog，从第一篇到现在的。从一个惨绿少年变成现在的半大叔模样，几个感触。
一，时间越来越少。以前基本是几个月翻一遍blog的，现在已经很久没看过了——哪怕是自己的blog。
二，blog越来越少，围观者越来越少。以前一天N篇，看的人也很多。现在N天不见一篇，除了小黄姐姐，阿丁，鲸小姐，基本没了。
三，工资越来越高，朋友越来越少。除了上文提到的几个，基本——没消息了。
四，文字从可爱风到呆板的技术风。以前的文字看上去怎么就那么无忧无虑呢？现在写的都好呆板啊。
五，一闪而过的天真不见了。以前反正是写个朋友看的，就算有些呆呆的天真的想法，也是但写无妨。现在总得考虑，有同事会看，有老板会看，全国玩技术的都会被搜索引擎引导过来——好像有点自大哦。不过另一个角度说吧，贝壳的某个朋友在相亲的时候相到一个技术员。回过头来和贝壳说，无意中提到贝壳的名字，对方居然听说过。我相信这不是单纯的偶然。
六，技术层次越来越高，技术复杂度越来越低。最早的技术都是C++一类的，伴随大段的代码。现在的技术越来越抽象，也越来越深奥。但是玩技术的时间却越来越短。回过头去看看两年前写的service代码，感觉好复杂的技术。处理的情况非常完整，现在是没空写这种东西了。再看前几年的程序极短化研究，用C语言直接操纵API和汇编层级的结构，做出1.5K的程序来——现在贝壳有个鬼时间来干这个啊？只能感慨当年真是时间不当时间用。
七，感慨了N次的生日和女友，结果就是还是没女友。
因此——没啥因此，无聊的写一篇blog，然后继续无聊。</description>
    </item>
    
    <item>
      <title>byebye google</title>
      <link>//blog.shell909090.org/blog/archives/106/</link>
      <pubDate>Tue, 23 Mar 2010 10:05:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/106/</guid>
      <description>与其相濡以沫，不如相忘于江湖</description>
    </item>
    
    <item>
      <title>掉河里了</title>
      <link>//blog.shell909090.org/blog/archives/105/</link>
      <pubDate>Mon, 22 Mar 2010 12:02:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/105/</guid>
      <description>本来不想说了，简单说一下吧。
昨天跑到某推优的店里吃鸡排，事先查好了所有东西，结果跑过去发现没开门，打电话发现说下午2点开门。贝壳当场�掉。到附近的烧烤凑合吃了一顿(怎么又是烧烤？)，然后给小李老师觅一根皮带去。伊说昨天喝了一顿普洱茶，整个腰围小了一圈，贝壳和小黄立刻求这个茶饼。觅到皮带去共青森林公园，买了个风筝半小时没放起来，就放弃了。然后转了一圈，去勇敢者的道路玩了一圈——然后，�事发生了。
那里的勇敢者的道路有个从水上过去的项目，贝壳觉得挺好玩的。于是就把身上所有东西扔给小李老师，伙同小黄姐姐从水上过去。到了最后五米左右的地方，有个水上的平台，就是会晃动的那种。小黄姐姐蹦啊蹦的就过去了，贝壳也一脚——浮台直接沉入水中。然后赶快跑——沉底&amp;hellip;
非常泪奔啊，三月天，贝壳穿着一身的湿衣服，在寒风中飕飕的。幸好扔了一套衣服在小李老师那里，去厕所换上。再去五角场买了一套裤子和拖鞋，看起来就比较不像个落汤鸡了。然后打车回家，洗了个热水澡。今天没有感冒发烧。
多么美好的经历啊多么美好的经历啊多么美好的经历啊^_^</description>
    </item>
    
    <item>
      <title>盗版问题的经济学考量</title>
      <link>//blog.shell909090.org/blog/archives/104/</link>
      <pubDate>Tue, 16 Mar 2010 15:25:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/104/</guid>
      <description>首先要说的是，作为一个程序员，贝壳坚决抵制盗版。每位盗版者，每次盗版，就是从贝壳钱包里掏钱。因此，不要带着“本文在为盗版者张目”的眼光来看，谢谢。
本文想讨论的问题，是从经济学的角度分析，在中国，直接制止盗版的经济学后果。当然，范围限于软件和软件周边产业。
首先，我们先考虑中国的城乡二元结构。因为很多数据如果不考虑城乡二元结构直接展开讨论，会出现莫名其妙的情况。根据贝壳查到的数据，截至06年底，中国城市人口5.77亿。这个数字准不准，贝壳是存疑的，也许精确数字要等2010年普查后才有了。何况即使准，也包含了诸多西部城市。因此，贝壳按照中国人口13亿，城市人口5亿来计算。在这个数字基础上，我们先算农村人口的基础消费。根据贝壳查到的几分报告，农村人口的其他商品和服务消费大约在200-500元/年左右。当然不排除有少数富裕农村，不过被广大的农村人口总数给拉平了。其中有多少流向软件领域(注意要区分硬件和通讯领域)？最多不少过每人50元——可能还多算了。8亿农村人口，总消费400亿——按照贝壳本人的估计，能有个100亿算不错了——不算农村政府消费。在整个软件领域，这点钱连个水花都砸不出来。
这个数字能不能进一步提高呢？很难了。农村人口的消费结构中，占大头的是衣食住行，医疗保健，次之就是耐用品和教育。而且，这几类消费有逐步升高的趋势。这表明我们的基础支出在逐渐挤出农村的可支配收入，恩格尔系数在逐步提高。在这个前提下，要提高农村人口的电脑类消费，尤其是购买正版软件——显然是天方夜谭。
那么城市人口呢？我们有5亿的城市人口，他们的消费能力远远高于农村人口。按照贝壳查到的资料，城市人口的一年最高可支配收入大约是2W元。如果全部投入软件领域，我们的最高消费是10万亿人民币——很明显，这个太痴人说梦了，中国去年的GDP才30万亿。软件领域如能分走1/20，即5000亿的消费，就算不错了。
最后一块就是政府消费。这一步比较复杂，但是贝壳可以不去算了。为什么呢？实话说以贝壳所见，我还没听说哪里的政府用盗版的。大量都是定制开发，ERP，业务系统一类的。国外的这类单子基本全给500强在做。国内就是针对政府，垄断产业在做。办公软件一类的，也是有专门的政府开支的——很少有政府敢于明目张胆的说，我们就不花钱了，用盗版吧。因此，即使打击盗版，这类收入也不会发生太大变化。
那么，我们总结以上三个消费群体，农村居民——基本挤不出油水来，政府机关——基本不用盗版。唯一可能发生变化的只有城市人口咯？不过考虑这么一个问题，这最高5000亿的消费，有多少流向了网络应用，和网游一类产品？或者是手机，机顶盒一类硬件设备？实际上，今天我们的用户们，依然是将盗版进行到底的。有多少人的系统是正版的？多少人用了正版的游戏，正版的办公软件？但是，我们的软件业结构根据这一现象做了调整——这一变化也在全球范围内上演——即软件服务化，或者是和消费型硬件捆绑化，平台化。以前我们做一款游戏，钱收不上来，感慨盗版逼死人。现在呢？我们做一款游戏，钱收不上来，于是和移动捆绑销售。业绩不菲，收入不多，然后看到移动的分成很多，感慨垄断逼死人。不说垄断的问题，其实这已经是根本市场的现状做出了调整的。如果现在再回过头来，说要不要打击盗版？理论上是要的。打击的结果如何呢？我们的软件产业怕先是要去掉半条命。为啥？
同样，我们抛开在上文中已经被讨论忽略的农村居民和政府机关，考虑一个最简单的城市居民，如果必须买正版，会是啥情况。当然，我们的口号是，你一天抽烟多少钱，50块的正版软件都买不起么？
该居民同志，一年收入5W(上海标准平均收入)，不要买房(否则可以直接卖电脑了)，不结婚没孩子，单身。房租一个月600（还得合租），吃饭一个月600（还得节约），水电煤300，出门坐车300，加点零花，一个月就是花2000剩2000，一年24000。一年衣服裤子要买掉个2000，网费要交个1500，电话费500不算多，出去和朋友吃吃喝喝4000还得问够不够，有那么几次红包去掉个5000。好，剩下多少？11000。不过总算也有点闲钱。玩个网游啊，买个手机啊，都不成问题。手机电脑按照三年折旧算进去，一年又得去掉个2000。现在，我们宣布，他现在无法使用任何盗版了，必须使用正版。于是，他首先要为XP买单1000。这是来自微软的杀人价，当然，如果OEM价格还有降低。然而都必须买正版了，微软凭啥降价？然后是Office2007，4000上下。杀毒软件现在免费了，我们先不说他。星际魔兽买不买正版？Winrar要不要付费？50块一个的软件，谁电脑里没装个七八个的？多的10几个20几个。以三年折旧计算，该同学现在为了使用电脑而付出的费用，翻倍！
我们说，总收入是不变的，现在多花一笔钱，就要少花一笔钱咯？住房吃饭坐车不能省，衣服通讯朋友不能丢。怎么办？要么干脆不用电脑，省下时间金钱多找找MM联络联络感情。搞不好我们就用经济杠杆为中国的广大宅男完成脱宅目标。要么干脆不打网游也不用office，装个裸机在网上裸奔，除了看贴回帖啥都不干。等不行了重装，再不行骚扰微软的客服。于是乎，莫名其妙的，我们的网游系统，硬件，短信，等等等等周边本来赚钱的东西会突然不赚钱了。为什么？你还问我为什么？你当用户是傻子么？一个电脑能花出去的钱都是有限的。正个版就无限收费的只有黑社会了。
所以我们说，反盗版要进行到底，这才能刺激人发明创造。但是同样要看到，很多问题不是单纯的说反盗版产值就会上去的——很多时候甚至会下去。一个农民多少三成是好事，全国农民都多少了三成就是灾难。同类的问题也出现在现在的中国，乃至全世界软件业人士的面前。我们的产业已经为盗版而重造过了，直接轮个榔头砸怕是得搭上自己的一条胳膊。</description>
    </item>
    
    <item>
      <title>在各个平台上启动emacs的技巧</title>
      <link>//blog.shell909090.org/blog/archives/103/</link>
      <pubDate>Fri, 12 Mar 2010 23:06:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/103/</guid>
      <description>今天在推上，一帮人讨论了emacs如何启动的问题。这个问题我是这么解决的。
这个配置针对三个上下文起作用。Windows，Linux图形，Linux+SSH。在Windows下，不使用alias，因为emacsclient会在找不到server的时候自动启动一个新的emacs。将emacsclient加入到注册表中，就可以对任意文件“使用emacs打开”。
Linux和Linux+SSH中，需要使用alias技巧，因为emacsclient不会在没有server的时候自动启动emacs。过程如下：
首先在系统相关的配置中，加入server-start，以便启动server服务。系统选择上，linux和windows加，console不加，因为后者没什么意义。然后，在系统中加入alias设定。
alias emacsclient=&amp;quot;emacsclient -a emacs&amp;quot; 这样，当系统中没有emacs启动的时候，就会启动一个。当有emacs启动后，就会调用这个emacs来打开文件。
在ssh环境下，需要开启x forward。这样就会打开远程emacs。这是比较慢的用法，快的方法是直接在本地emacs上使用tramp。</description>
    </item>
    
    <item>
      <title>从选优法说起</title>
      <link>//blog.shell909090.org/blog/archives/102/</link>
      <pubDate>Thu, 11 Mar 2010 11:07:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/102/</guid>
      <description>小学的时候学奥数，作为常识，知道中国有个大数学家叫华罗庚，教出个徒弟叫陈景润。陈景润解决了世界上最有名的问题之一——哥德巴赫猜想——的一个弱形式，证任意一个大偶数可以分解为一个素数和两个素数乘积之和(比较拗口哦，这个是俗称的1+2的完整形态)。好伟大好伟大哦。华罗庚作为陈景润的师傅，有什么成就呢？据说有个“选优法”，但是“选优法”是啥东西，就语焉不详了。当时年纪小，1+2都看不懂，何况选优法呢。这个问题就被搁下了。
到了高中，翻了翻闽嗣**鹤和严士健的《初等数论》，大概知道了数论是怎么回事。同时，家里有本60-70年代的《十万个为什么》(这本书可真是本宝书，很多那个时候社会的问题都能在书里看到，后面一一阐述)，上面写了“选优法”的过程和应用。小时候的疑问就再次出现——华罗庚怎么能教出陈景润呢？
这里没有批评的问题，只是怀疑。首先是领域问题，哥德巴赫猜想属于数论领域的问题，而选优法属于运筹和博弈领域的问题。这两个领域互不相关，也没有什么交集的地方(当然，硬说有其实也有)。一个学运筹和博弈的老师是如何教出一个学数论的徒弟的呢？其次是“选优法”这个东西，从纯数学来说太不严肃了，最多只是属于应用数学上的东西。而且太过幼稚，一个初中文化程度的人都可以轻易建模解决这类问题，又何必专门提出来作为一个成就呢？再者，最严重的，如果师傅的成就只有这么一个勉强可以说是应用数学的东西，他如何能带出一个纯数学领域最顶尖的弟子呢？
我曾经找过一本华罗庚传，写的是很动人，然而对华罗庚一生的数学成就介绍很少。说是励志小说勉强可以，但是说用来纪念华罗庚就太过搞笑了。丢番图的墓碑上刻着什么墓志铭？什么都没有，就是一个丢番图方程。这本书虽然说了华罗庚的生和死，然而却也无法解答我的这个问题。今天我终于看到了答案，不由悚然一惊。（http://www.chinagfw.org/2010/03/blog-post_7628.html）墙内需翻墙，因此我摘抄整理如下：
在1968年，中共中央组织部部长郭玉峰在党代会上发表了《关于四届全国政协常委会委员政治情况的报告》，在该报告中，他指称74名全国政协常委会委员为叛徒，叛徒嫌疑，特务，特嫌，国特，反革命修正主义分子，里通外国分子等，占159名政协常委会委员的47%。建筑学家梁思成、生物学家童弟周、桥梁专家茅以升相继被打倒。但华罗庚却幸免于难。在数学家群体当中，他是最风光的一个，他是中国数学界的泰斗，中科院数学科学研究所所长，他很聪明，用一个在理论数学上毫无学术价值的“优选法”，来证明自己“贴近工农”，并在文革时期赴全国十八个省份讲演做专题报告，而其它的数学家此时大多在牛棚里度过余生。
这个当时在全国算是最走运的一个数学家华罗庚，生活是怎样的呢？五零年以后，他再也没有能发表出有份量的成果。是条件不够好吗？从纵向比，抗日时期，他在西南联大，物资极度紧张，住在猪圈旁边，他依然可硕果累累。可五零年以后，生活条件好转，可他却出不了成果了。从横向比，被他指责为“贪图享乐不回国”的同龄人，大数学家陈省身，在国外屡屡突破，一举获得数学界最高荣誉之一沃尔夫奖，退休后衣锦还乡到南开大学享福去了。
华罗庚五零年，毅然放弃优异待遇回国时，发表热情洋溢的爱国宣言：“良园虽好，却非久居之地”，影响了一代海外学人。十年后，他黯然对夫人说：“我想自杀。”消息传出，又影响了一代海外学人。他没有精力再搞研究，因为他的同事处心积虑地揭发他，批判他。他二十年的手稿被红卫兵抄家后付之一炬。他放弃了自己喜爱的数论研究，放弃了自己的天赋，去搞应用数学和爱国主义教育。统筹法让他摆脱了“脱离群众、脱离工农”的口诛笔伐，使他获得全国巡回演讲的殊荣。可他自己知道这东西的生命力，文革以后，再也没有人用。他在海外的名声为他赢得了待遇，因为他是统战对象，是模范表率，所以要照顾他。可是其它人就不是了。他的儿子，一家四口人，住十四平方米屋子。他最得意的徒弟陈景润，住四人七平方米一间的宿舍。清华大学文革委员会主任迟群不断关心他的生活，陈景润成名之后，迟群不遗余力地动员他积极展开批判华罗庚的工作。华罗庚的优选法在辽宁省做成果展示时，主持辽宁党政军工作的毛远新（毛泽东侄子）对这位天才数学家高屋建瓴地指出：“优选法的‘最优’是不可能存在的，最优这一提法不科学，不符合马列主义，最多只能称为较优。”于是华罗庚只好带领他的弟子们连夜加班，将展示板里的“最优”统统改成了“较优”。
这就是在国内待遇最好的数学家的遭遇。
从逻辑上说，我认为这篇材料没有胡乱编造，至少在选优法这个问题上没有。因为这篇材料能够完整的解答关于“选优法”的三个疑惑。为什么博弈领域的师傅教出数论领域的徒弟，为什么名气如此大的一个人，其成就却如此儿戏。为什么如此儿戏的成就，又被如此着重看待。因为这个师傅根本不涉入运筹和博弈领域，根本是个搞数论的。因为这个成就根本无法被称为成就，只能被称为耻辱，和钱学森的亩产万斤并列。
下面我们回过头来，再说说那本60-70年代的《十万个为什么》。这本书很有意思。有意思在哪里呢？这本书理论上是本科学技术的普及教育书籍。什么叫理论上呢？所谓理论上，就是书的封面是毛泽东语录，封底是“打倒奸工内贼刘少奇”（熟悉历史的凭这句话大概就知道是什么时候出版的了）。介绍的内容无一是普及科学的，都是讲如何生产和如何务农的。问题的开头都是一个工人或者农民向一个反动学术权威请教，权威如何如何。于是这个工人/农民奋发图强，解决了以下问题blahblahblah。要是工人农民个个都能解决问题，那还要反动学术权威干嘛？我同期还拿到了一本美国版本的《十万个为什么》，当然是中文版。封面写着高中版，于是大部分内容我就真的看不懂——同时60-70年代那本写着成人版。我现在记得的大部分内容都是讨论基础科学领域——例如我记得的一点——神经结构，神经信号传递，信号处理和模式学习。
对于大多数中国孩子，应该都听过一句话——学好数理化，走遍天下都不怕。其实说这句话的人，自己都未必相信这句话——就像我们高喊共产主义永垂不朽的时候一样。现在要走遍天下，你需要的是背景，英语，厚黑学，而不是数学，语文，物理化。在中国，技术和知识从来不被重视——至少没有像权力和意识形态那样被重视。我们的程序员可以在4天内仿制出一个国外的成熟应用——当然这也不全是好事——然而我们的权力机关可以在4分钟内让你关门。我们的大学生可以在两小时内解出一份漂亮的答案，然而却无法在两个月内设计构造出一个成熟的产品。我们的学术论文是可以网上抄的，我们的核心刊物是可以花钱刊的。人家最聪明的人都从事医学，数学，法律和金融，我们最聪明的人都从事公务员。我们的产品充斥着山寨和抄袭，我们的GDP来自水泥和血汗。
这就是知识在中国的待遇。</description>
    </item>
    
    <item>
      <title>游新场镇</title>
      <link>//blog.shell909090.org/blog/archives/101/</link>
      <pubDate>Mon, 08 Mar 2010 13:13:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/101/</guid>
      <description>昨天组织了一堆人去新场玩。地点大致在南汇旁边，据说是色戒的拍摄地点。哎，为啥不在东方明珠下面拍呢，我们也好去点～～～�。
前天晚上回去的晚了点，由小黄姐姐代为通知。等通知出去后才发现，小李老师手里也是正确的时间——这太不正确了。按照我的估计，应该给小李老师提前至少半小时的——结果说明我太低估她了，她这次迟到一小时。由于她的迟到，因此，我，小黄，小杯子，被迫在大冷天的跑到DQ吃甜筒。小黄姐姐拿小杯子的iTouch玩植物大战僵尸，我和小杯子对于有人喜欢这种弱智游戏表示不解。不过她边玩边吃甜筒，我眼睁睁的看着她的头发飘到甜筒中，然后一口舔成奶油头发，再一撩，在衣服上形成国画。吃完以后满手奶油，外加嘴唇上的奶油——崩溃中。。。顺便可怜小杯子的iTouch。
小李老师到达后，我们坐车到了新场镇——当然，刚下车的时候，打死我也不相信这是个古镇。走了一段，才发现一个牌坊。不错不错，这个不错。我们按照牌坊下的提示，跑到附近的弄堂菜馆。午饭点了金针菇，白斩鸡，红烧肉，青椒茭白肉丝，浦东朋友鱼（就是小黄姐姐说的，鱼，螺蛳，虾的大杂烩），蛤蜊蒸蛋。点了三碗饭——不过到吃好也没有上来。价格不贵，东西也挺好吃。我们吃完就在那里弄出一堆的干果吃，也没有人来赶我们。小杯子的一个朋友还跑过来，拿了一台最新的google手机和一台单反相机。
下面就沿着路往南走，一路看到N多的不可移动保护OOXX建筑。贝壳别的不记得了，就记得这个，因为实在是像内存管理中的不可移动保护数据块——小杯子，小黄，小李老师崩溃中。最后到达一个寺庙，小黄姐姐很高兴的说，里面有和尚在唱歌——这次是贝壳和小李老师崩溃ing。
新场不大，玩到这里基本就全了，往回走，去人民广场找夏岚吃饭。途中小杯子还很可耻的无视了一次他自己许下的要砸掉龙阳路地铁那家开封菜的伟大志愿。我们走到来福士，发现夏岚正在排队——排在一个很长的队后面。于是集体退散，崩溃的觅食。在地主夏岚筒子的带领下，我们找到了一家韩国菜。对此贝壳表示鸭梨很大，在上次去烧烤发现经过小黄姐姐手的所有产品都会发黑后，贝壳就不大敢去吃韩国菜了。幸好多了两位女生在，否则贝壳又要面对小黄姐姐的无敌烧烤——最近胃不是很好的说，不要考验了吧。
事实证明了贝壳的先见之明，小黄姐姐从头烤到底，从头焦到底。除了做的锅巴挺好吃外，对产生食品实在没有什么太大的贡献。整个晚饭就在小李老师的控制下，有惊无险的度过了。
啊，一天啊多么美好的多么美好的一天啊多么美好的一天啊～～～～～</description>
    </item>
    
    <item>
      <title>emacs配置系统</title>
      <link>//blog.shell909090.org/blog/archives/100/</link>
      <pubDate>Wed, 03 Mar 2010 16:51:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/100/</guid>
      <description>emacs是个超级复杂的程序，尤其在配置问题上。贝壳的emacs要跨越三个环境。环境一，WindowsXP+Emacs23。环境二，Debian Testing + Xfce4。环境三，CentOS + Ssh。而整个的操作方式，个性设定需要保持一致。因此，引出一个问题。配置如何设置，跨平台，同步。
首先解决配置的同步问题，贝壳建立了一个svn仓库，用于存储该配置系统。然后在各个系统中co出这个仓库，当有需要调整时ci就可以保持同步了。Linux下可以使用ln连接文件，Windows下比较麻烦点，NTFS格式(大多都是NTFS格式了吧)可以去sysinternals下一个叫做junction的工具，以建立目录的工具链接，当然，.emacs文件只能手工拷贝了。
然后是配置的切分问题，如果只有一个文件，即使使用了版本控制，意义也不大。同时，将配置切割成不同的部分，控制载入过程，也可以跨平台和加速。以下是贝壳的.emacs文件。
;; .emacs profile, written by shell.xu ;; load other set (add-to-list &#39;load-path &amp;quot;~/.emacs.d/&amp;quot;) (add-to-list &#39;load-path &amp;quot;~/.emacs.d/auto-complete/&amp;quot;) (add-to-list &#39;load-path &amp;quot;~/.emacs.d/plugins/&amp;quot;) (load &amp;quot;emacs-setup&amp;quot;) (load &amp;quot;emacs-redef&amp;quot;) (load &amp;quot;emacs-plugin&amp;quot;) (cond ((not (boundp &#39;initial-window-system)) (load &amp;quot;emacs-console&amp;quot;)) ((memq initial-window-system &#39;(x w32)) (cond ((memq system-type &#39;(windows-nt cygwin)) (load &amp;quot;emacs-win&amp;quot;)) ((memq system-type &#39;(gnu/linux)) (load &amp;quot;emacs-linux&amp;quot;))))) (load &amp;quot;emacs-keymap&amp;quot;) 从上可以看出，我们先设定了.emacs.d作为默认加载路径——大多数文件都是放在这里。plugins是各种第三方程序的安装路径，这样这些程序就无需在各个平台上各自安装一次。而auto-complete单独拆出来纯粹是因为文件太多了。而后，我们加载了setup，这个文件内定义了emacs的基本配置，redef文件内定义了各种自定义函数和变量，plugin内控制了需要加载的各个插件和配置。
下面就有点复杂，简单来说，设定无Windows系统的时候加载emacs-console文件，有Windows的情况下，在windows下加载emacs-win，在linux下加载emacs-linux。这是实现跨平台设置的核心。
最后是keymap，经过上面复杂的设定，按键设置是统一的。
setup文件就不细说了，大家按照自己的习惯设定就好。下面我说几个redef中定义的函数。
(defun switch-windows-buffer () (interactive) (let ((this-buffer (window-buffer))) (switch-to-buffer (window-buffer (next-window (selected-window)))) (switch-to-buffer-other-window this-buffer) (other-window 1))) 这个函数的目标是用热键交换两个窗口的位置。如果你经常用C-x 3分栏，并且在两者间跳来跳去的话，有的时候往往希望两者的位置换一下。通常都是C-x b切换当前的窗口，然后C-x o切到隔壁去再换。这个太繁琐了。</description>
    </item>
    
    <item>
      <title>android历史记录备份和应用三例</title>
      <link>//blog.shell909090.org/blog/archives/99/</link>
      <pubDate>Tue, 02 Mar 2010 16:10:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/99/</guid>
      <description>有不少不折腾会死星人已经用上andriod了吧？有没有刷机过？有没有怕手机掉过？android的联系人是同步到gmail的，不用怕。但是信息就不同不了。所以，下面介绍几个信息导出的方法。
1.aqq
用adb shell去/data/data/com.android.aqq/databases/下面，把aqq.db复制出来，sqlite3格式，随便看吧。
2.AnFetion
用adb shell去/data/data/&amp;hellip;..AnFetion2/databases/下面，把fetion.DB复制出来。
3.信息
这个是最麻烦的。去信息-&amp;gt;Menu-&amp;gt;设置-&amp;gt;导出短信里面导出。但是别高兴的太早，贝壳发现一个bug。如果你的短信里面有西文引号，会导致xml格式错误，从而无法导入。解决方法是手工删除引号。
应用，使用xsltproc，将xml转换为html来浏览。贝壳用的xslt比较简单，抄在下面。
&amp;lt;?xml version=&#39;1.0&#39; encoding=&amp;quot;GBK&amp;quot;?&amp;gt; &amp;lt;xsl:stylesheet version=&amp;quot;1.0&amp;quot; xmlns:xsl=&amp;quot;&amp;lt;http://www.w3.org/1999/XSL/Transform&amp;gt;&amp;quot;&amp;gt; &amp;lt;xsl:template match=&amp;quot;/&amp;quot;&amp;gt; &amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;xsl:for-each select=&amp;quot;//smss/address&amp;quot;&amp;gt; Phone Number:&amp;lt;xsl:value-of select=&amp;quot;@data&amp;quot;/&amp;gt; &amp;lt;br/&amp;gt; &amp;lt;table border=&amp;quot;0&amp;quot; class=&amp;quot;rev_tab&amp;quot; width=&amp;quot;100%&amp;quot;&amp;gt; &amp;lt;xsl:for-each select=&amp;quot;sms&amp;quot;&amp;gt; &amp;lt;tr&amp;gt; &amp;lt;td class=&amp;quot;rev_tab_rev&amp;quot;&amp;gt; &amp;lt;xsl:value-of select=&amp;quot;date/@data&amp;quot;/&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;td class=&amp;quot;rev_tab_rev&amp;quot;&amp;gt; &amp;lt;xsl:choose&amp;gt; &amp;lt;xsl:when test=&amp;quot;read/@data = 1&amp;quot;&amp;gt;read&amp;lt;/xsl:when&amp;gt; &amp;lt;xsl:when test=&amp;quot;read/@data = 0&amp;quot;&amp;gt;unread&amp;lt;/xsl:when&amp;gt; &amp;lt;/xsl:choose&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;td class=&amp;quot;rev_tab_rev&amp;quot;&amp;gt; &amp;lt;xsl:value-of select=&amp;quot;body/@data&amp;quot;/&amp;gt; &amp;lt;/td&amp;gt; &amp;lt;/tr&amp;gt; &amp;lt;/xsl:for-each&amp;gt; &amp;lt;/table&amp;gt; &amp;lt;BR/&amp;gt; &amp;lt;/xsl:for-each&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; &amp;lt;/xsl:template&amp;gt; &amp;lt;/xsl:stylesheet&amp;gt; 为了美观，你还可以修改一下xslt。xsltproc在linux下直接有包，Windows可以来信问贝壳索要移植(其实去官网上就能下到)。</description>
    </item>
    
    <item>
      <title>桌面点名</title>
      <link>//blog.shell909090.org/blog/archives/98/</link>
      <pubDate>Mon, 01 Mar 2010 11:20:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/98/</guid>
      <description>被桌面点名了，我随便做，大家随便看。
点名地址(http://shellex.info/desktop_relay/)。
今日桌面 全黑 2.OS为？ 哪个系统？一个Debian Testing，一个WindowsXP，一个Adnriod。
3.这张桌布是什么？你从哪 里取得的？ 纯黑色&amp;hellip;
4.更换桌布的频率高吗？ 从来都是纯黑
5.桌面有几个ICON？ 一个都没有
6.一堆档案和捷径放得乱七八糟的桌面，你看得下去吗？ 我说了，一个都没有
7.有没有什么坚持点？ 坚持纯黑一个都没有不动摇
8.有为了填这份接力, 还特地整理一下吗？ 啥都没有了，整理啥？
9.请再传给8个[我想看看他/她的桌面?]的人。 @ilovezjl 小黄姐姐，@onlycup 小杯子， @OpheliaRing 某话痨， @pipitu 某SE， 就四个吧。</description>
    </item>
    
    <item>
      <title>关于无线的安全问题</title>
      <link>//blog.shell909090.org/blog/archives/97/</link>
      <pubDate>Fri, 26 Feb 2010 11:10:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/97/</guid>
      <description>一个无线路由只有150上下，安装方便使用简单，可以让你在床上躺着的时候还能和朋友聊天。大多有笔记本的家庭都会考虑买一个无线路由，组建自己的无线网络。不过先别高兴，如果你选择买来就用，我想你碰到艳照门只是个时间问题。下面简单说一下无线网络从决策到安全完成安装的全步骤。
首先是决策，无线路由不是随便用的。有几种情况我建议你重新考虑这个问题。有孕妇者不用，这东西的辐射虽说不大，也不是忽略不计的。万一我乌鸦嘴，你孩子出点啥问题，你触不触的慌啊。电脑全堆在一起可以拉线者不用，这种情况下再买无线纯属烧包。房间太大者不用。最后一个要用也可以，建议你买多个。无线网卡在收信差的时候速度很慢，用起来很不爽，而且辐射大，所以一定要保证你的家里能被无线信号完整覆盖。一台标准路由器能覆盖的范围大约是10-30米内的所有区域，加穿一道普通墙(非钢筋水泥承重墙)。普通人家买一个无线路由器可以覆盖全家，但是我不保证有钱人家&amp;hellip;.
其次是采购，推荐大家选择好一点的无线路由器，但是不用太贵。差的无线路由器往往不控制辐射功率，你高兴家里天天开一个大功率辐射源么？
后面跟着的是环境检测。如果你有android，有一个软件叫做wifi检测仪，可以检测周围的wifi信道和功率。挑选一个比较空的信道，否则人家的通讯就会变成你的背景噪音，从而降低网速，增加辐射。而后确定你的无线路由的最佳安装位置——通常是在网络出口处。但是如果造成信号覆盖不好，可以考虑加长网线。毕竟加长网线只是一次的事情，天天断线再连接就痛不欲生了。
然后是基础安装——这个都会，就不多罗嗦了。
最后是重头，安全设置。请先设置不广播SSID，这样别人扫描的时候，你的AP是隐藏的。当然，如果你高兴，可以在AP名字上把偷网的人骂一顿。我记得某个咖啡厅的AP名字就是“你还要不要来杯咖啡”。其次，需要选择WPA加密，WEP的破解时间太短，在你通讯频繁的情况下，最多几个小时肯定可以破解——最少只要几分钟。而且更麻烦的是，一旦WEP被破解，对方可以嗅探到你的通讯包。到时候所有的聊天记录，明文密码，全部都是敞开了让别人看的。WPA即使别人破解了AP能上网，最多也只能上网而已。除非使用主动嗅探技术，否则无法造成威胁——而主动嗅探会造成你的网络超级不稳定，马上会被发现。
以上两步保证了别人无法连接进你的网络，而下面我们还要保证网络内的安全。
请先给你的路由器和Windows账户更换一个强密码——你可以自动登录和使用浏览器记录密码来避免输入，但是一定要强。否则当有人进入你的网络的时候，如果一次就拿到了管理员权限，其他安全措施就没有意义了。然后开启路由器防火墙，禁用所有的人连接，除非特定MAC地址。这样只有指定的几个机器可以上网，一般人进入网络后的兴趣就小了很多。最后，请开启你电脑的防火墙，以免进入网络的人利用漏洞进入主机系统。
最后，如果有条件的话，可以用vmware部署一个honeypot，做一个漏洞百出的系统，引诱入侵者先进攻这里。一旦他发起进攻，那么你马上会发现他的踪迹——不过这个就不属于普通用户的范畴了。</description>
    </item>
    
    <item>
      <title>领导的艺术</title>
      <link>//blog.shell909090.org/blog/archives/96/</link>
      <pubDate>Tue, 23 Feb 2010 17:19:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/96/</guid>
      <description>啥都不说，先上背景阅读。
帕金森定律
英国著名历史学家诺斯古德・帕金森通过长期调查研究，写出一本名叫《帕金森定律》的书。他在书中阐述了机构人员膨胀的原因 及后果：一个不称职的官员，可能有三条出路，第一是申请退职，把位子让给能干的人；第二是让一位能干的人来协助自己工作；第三是任用两个水平比自己更低的人当助手。这第一条路是万万走不得的，因为那样会丧失许多权利；第二条路也不能走，因为那个能干的人会成为自己的对手；看来只有第三条路最适宜。于是，两 个平庸的助手分担了他的工作，他自己则高高在上发号施令，他们不会对自己的权利构成威胁。两个助手既然无能，他们就上行下效，再为自己找两个更加无能的助手。如此类推，就形成了一个机构臃肿，人浮于事，相互扯皮，效率低下的领导体系。
曾仕强似乎说过，一个能干的干部起什么作用？一个能干的干部只能证明他的所有下属都是白痴。
所以，从上推导，我们只要找一堆傻瓜当干部，公司就能兴旺？</description>
    </item>
    
    <item>
      <title>PC使用android上网</title>
      <link>//blog.shell909090.org/blog/archives/95/</link>
      <pubDate>Mon, 22 Feb 2010 10:27:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/95/</guid>
      <description>最简单的方法是使用android-wifi-tether，不过我这里使用不成功，原因不明。所以今天我们不去说他，我们说另外一个软件，azlink(http://code.google.com/p/azilink/)。
首先是安装。检查是否满足安装条件，如果满足的话，安装apk，这个不用多说。azlink.ovpn需要复制到电脑上，并且准备好openvpn和adb。另外，推荐在手机上也保存一个azlink.ovpn和adb，openvpn，以便在多个机器上使用。
下面开始正式的连接操作，作为测试，请先关闭手机的wifi上网功能和电脑的wifi，有线，以免影响测试结果。本文中的范例系统是Debian Testing(Squeeze)，网络环境是中国移动的CMNET(8元80M包月，很合算的)。如果环境有所差异，请照您的环境做相应调整。
1.使用usb线连接andriod和PC，此时android上会出现USB已连接的提示。
2.在android上执行azlink，并且勾第一个勾，Service active，保证系统运行。此时状态应当是Warting for connection。
3.在PC上执行adb forward tcp:41927 tcp:41927，此时可能出现service start。这个是首次运行的原因，不影响结果。
4.执行openvpn azlink.ovpn。此时会出现虚拟网络，并且android上的状态发生变化。
5.在android上，设置-&amp;gt;高级属性-&amp;gt;手机信息中，查看下面的GSM信息，一般能看到网关和DNS。请去ping一次网关，如果成功，你的事情已经成功了大半。
如果上面不成功，请联系我。如果成功，请在你的系统内重设DNS。azlink.ovpn将你的DNS指向了手机上，可手机本身无法做DNS的。因此请将你电脑的DNS重设为手机上的值。如果你高兴，也可以将azlink.ovpn中的值改掉，理论上说一个地区的移动网络中，DNS应当都是一样的。不过如果你要跨地区，这个DNS就会发生变化。因此，我无法预先给定值，也无法获得。
这是整个过程中最关键的一步。很多人说为什么无法上网，其实是可以的，只是你的DNS没有指向正确的值而已。
6.如果是CMNET，事情就到此为止了。如果是CMWAP，你还需要做一小步。找一个CMWAP能够访问的代理，设到你的浏览器里面。
作为关闭，其实拔线就可以了。不过作为程序员，我们习惯完美的析构过程。所以，下面是关闭过程。
1.恢复浏览器原先的代理设置。
2.断开openvpn，此时android上的状态会恢复Warting for connection。
3.PC上需要执行adb kill-server。这样会kill掉adb的daemon进程，否则adb会一直假转发，并且始终占用进程号。
4.在android上，关闭Service active的勾。并且，如果你喜欢，可以kill掉进程以回收内存。
5.拔USB线。
如果你曾经关闭了手机的wifi，电脑的wifi和有线，现在也可以恢复了。</description>
    </item>
    
    <item>
      <title>ext3下小文件的恢复</title>
      <link>//blog.shell909090.org/blog/archives/94/</link>
      <pubDate>Sun, 21 Feb 2010 10:20:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/94/</guid>
      <description>ext3下如果误删除了文件，恢复起来是异常麻烦的。如果是小文件，其实很多时候不用走常规文件恢复的路子，只要能找到内容就好了。基本思路是从磁盘中直接搜索内容，然后设法复制出来。
恢复条件：
文件没有被覆盖。如果被覆盖了，那就绝对没有希望了。 文件不大(通常建议在16K以内)。如果很大，下面一个条件就很难满足。 知晓文件内的特定关键字。条件是，文件每4K内，你必须知道至少一个关键字。因为ext3通常将4K内容连续存放，每知道一个关键字，可以恢复4K内容。如果缺少关键字，那就无法恢复了。 文件保存的版本不太多。 满足以上条件后，使用以下方法进行恢复：
# grep -abn &amp;quot;id_insert_stmt_param&amp;quot; /dev/xvda1 4799010:713068605:sql_id_insert_stmt_param = &amp;quot;SELECT NEXTVAL 使用grep对/dev/xvda1磁盘进行搜索，需要管理员权限直接访问设备文件，搜索哪个物理磁盘可以用mount来确定。 713068605是相对偏移地址，如果保存了多个版本，可能有多个偏移地址。 他们的选择和确定是个非常麻烦的问题，所以文件保存的版本不能过多。
$ python &amp;gt;&amp;gt;&amp;gt; (713068605/4096)*4096 713068544 &amp;gt;&amp;gt;&amp;gt; exit () 以上过程可以在常规权限下操作，使用python(或者其他你高兴的计算器)确定该偏移地址的块首地址。
# dd if=/dev/xvda1 bs=1 count=4k skip=713068544 &amp;gt; 1.tmp 将这个块的内容复制出来，注意磁盘上必须有足够空间，否则搞不好会将原始内容覆盖。
更严谨的方法是将内容dump到其他磁盘设备的挂载点下，做异地磁盘恢复。
以上方法可以恢复一个块的内容。手工恢复所有块后，将内容拼接，就是你要恢复的文件。</description>
    </item>
    
    <item>
      <title>李琼点名</title>
      <link>//blog.shell909090.org/blog/archives/93/</link>
      <pubDate>Tue, 16 Feb 2010 16:40:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/93/</guid>
      <description>我的大名：Shell.E.Xu
我的小名：贝壳
谁传给你的：李琼
生日想得到什么礼物：电脑
近期压力大的事：女朋友
未来想做的事：写程序
有没有喜欢的人：有
同学聚会要回去找老师吗：不需要
跟谁出去最幸福：这个&amp;hellip;
10.如果你的两个好友吵架了：吵吧，别打起来
11.跟情人最想去哪：宅
12.圣诞节要做啥：
宅
13.最想跟谁过圣诞节：这个&amp;hellip;
14.有没有赖床的习惯：有
15.有几个兄弟姐妹：记不清了
16.最喜欢的一首歌：When
you believe
17.喜欢什么颜色：深蓝
18.现在在做什么：点名
19.最想大声说什么：低调，低调
20.半夜敢不敢自己上厕所：去吧，又不是坟场
21.谁很欠打：我自己
22.现在很迷什么：程序
23.睡相：不打呼
24.现在的时间：Sun
Feb 14 17:58:36 CST 2010
25.是否痛恨传给你点卷的人：不
26.体重多少：这个&amp;hellip;
27.天气：冷
28.你若中乐透最想做什么：买房子
29.大学生一定要玩的活动：集体打游戏
30.引起失眠的原因：程序没写完
31.有流口水的情况吗：有
32.近期开心的事：无
33.你经常通宵不睡：偶尔
34.你会和爱自己的人还是自己爱的人结婚啊
：我自己也不知道
35.会喜欢上点你名的人么：恩，很喜欢，但和爱情无关
36.对我的印象：还成
-*被点到必填，
-*请老实回答每一问题。
­
-*不能擅自涂改题目。
­
-*写完请点9个人，不可以不点。
­
-*完后请通知那9个人他被点到了。
­
-*排名不分先后。­
­
­
是谁传给你这份问卷的
：李琼
你们认识多久了：一年多吧
你觉得ta对你来说重要吗：还成
你与ta的关系是：茶油
请问ta的兴趣是：珠宝
请问ta的个性如何：很个性
ta在你心目中是几分：满分几分？
最想对ta说的一句话：我就不接着点名了，都在过年。
★起床前第一件事：找手机
★你喜欢的季节：冬季
★打工次数：0</description>
    </item>
    
    <item>
      <title>春节快乐^情人节快乐 == 1</title>
      <link>//blog.shell909090.org/blog/archives/92/</link>
      <pubDate>Sun, 14 Feb 2010 18:08:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/92/</guid>
      <description>RT
希望大家过渡到{春节快乐&amp;amp;&amp;amp;情人节快乐 == 1}</description>
    </item>
    
    <item>
      <title>CNNIC的证书</title>
      <link>//blog.shell909090.org/blog/archives/91/</link>
      <pubDate>Wed, 03 Feb 2010 11:41:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/91/</guid>
      <description>最近，技术圈里面在争论CNNIC的证书被加入到信任根证书里面的问题。本文章试图和专业人士探讨这一变化的过程，以及向非专业人士说明会造成的影响。所有段落前会标明针对的群体。
事情的起源，是有人发现CNNIC的证书被加入了Mozilla和系统的信任根证书链里。这引发了大家对早年CNNIC所做的流氓软件的回忆，因此大量技术人士强烈反对。所做的反应包括发起BUG讨论提请Mozilla删除CNNIC的证书，发起投票，写信给Entrust阐述问题等。下面会简述一下信任根证书链，还有CNNIC的背景和历史。
本段适合非专业人士阅读。我们在访问一个网页的时候，通常有两种常见的通讯方式。http和https。区别在于，https会使用网站证书加密通讯过程。证书加密包含了几重的意义，首先，证书保证了你们的通讯没有第三者能截获。其次，证书验证了你访问的网站，是否是他号称的那个网站。也许很多人无法理解，这两种攻击怎么可能发生。要理解一点，中国电信也不是铁板一块，你完全无法指望他们的员工也绝对安全。否则的话，为什么所有银行都使用https来加密访问过程呢？
本段适合专业人士阅读。那么，不使用证书会发生如何的攻击呢？一旦有某个人更改DNS(这东西让百度都吃了亏)，以某个服务器替换了你的银行(或者gmail)。那么，你访问你的目标域名的时候，就会被定位到他的中间机器上，他再使用代理技术，通过ssl访问目标服务器。整个过程如同走代理一样，唯一的问题就是你的密码泄露了。那么证书是如何防御这个攻击的呢？如果你访问目标机器，目标机器会让你验证一份证书，标明他的域名(用于防止域名劫持的)，签署者。一旦域名不符合，或者你不信任证书，就会报警。那么攻击者如何复制这个证书呢？首先他无法通过访问的方式获得证书原文，因为证书给你的其实只有公钥部分。其次他无法将这个过程也代理下来，因为如果这么做，下面的内容就全是不可解的了，那他就纯粹花钱把自己弄成代理服务器了。最后，他也无法生成，因为按照规定，只有域名的拥有者可以向特定的单位申请证书。于是，他无法复制证书，攻击就会失败。
本段适合非专业人士阅读。然而，你需要信任什么证书呢？如果你要一家一家的信任证书，会发生什么？你见到是否信任就会习惯的去点，这对安全于事无补。因此，这里引申出一个证书链的问题。通常系统内内置了一些证书，这些证书叫做信任根证书。这些证书的权限是，可以让你信任其他证书。而被他们授权的证书，则分为可以继续授权和不可以继续授权两种。一旦被他们签署授权的证书，最起码你访问的时候不会有警告了。现在，CNNIC加入了这个根证书链。那CNNIC是个什么公司呢？他自称是中国科学院下属的中国互联网络信息中心，服务于科学和研究的机构，但很多人指出CNNIC的直接主管是工信部。当年，CNNIC推出中文域名服务，这项服务需要在几乎所有人的电脑内安装插件。他为了提高安装率，使用了不可删除的保护技术。这导致很多人的电脑安装后，无法卸载程序。至于安装呢？也不全是自愿安装(我不排除自愿者，绿霸还有自愿的呢)。他们曾经利用系统漏洞，向大量电脑上强行安装插件。而且CNNIC还借助官方身份，大量推行中文域名——其实他们根本就不是政府机构，而是非营利机构。并且，在前两年拼命忽悠CN域名，最近又突然停止域名解析(虽然是国家规定的)，道歉赔偿啥都没有。大家自己想，真的可以信任这种公司么？
本段适合所有人阅读。现在CNNIC已经进入了信任根证书链，如果配合国家级的DNS劫持技术，理论上可以构造一个假的mail.google.com，或者www.hotmail.com。走代理，自己给自己签署一个证书。从而获得你的完整会话。这里(http://autoproxy.org/zh-CN/node/66)有比较大的说明和讨论。
我对这个事情的观点是。作为Mozilla或者任何根证书的发行机构，在没有直接证据的情况下，不大可能拒绝一个国家级机构的要求。然而，无论任何原因，信任一个机构，就代表你要为他的行为负责。如果CNNIC做出任何危害用户安全的行为，Moziila，微软，Debian.org会被我作为同罪者考虑和抵制。同时，系统发行的根证书系统，是否要去信任，是我们每个人的问题。如果你觉得CNNIC根本不值得信任，那么你可以删除他的所有证书，以及签署了他的所有证书。目前而言，我删除了CNNIC和Entrust的所有证书。</description>
    </item>
    
    <item>
      <title>手机又丢了</title>
      <link>//blog.shell909090.org/blog/archives/90/</link>
      <pubDate>Mon, 01 Feb 2010 15:08:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/90/</guid>
      <description>昨天出去玩，拉小黄出来溜冰，结果被还了一个电脑。我还要买一个键盘给别人，手上一堆东西，再打车去见人。时间紧，手上大包小包一大堆，下车的时候两手满满的。下车了再一拍兜——杯具啊～～～～手机丢了。
估计是放兜里面没放的太进去，于是联系去找。大众的调度��嗦嗦的，问你上车时间下车时间车号前后排什么的，问了一堆。我当时心就一凉。司机每天要开车的，总算还比乘客靠谱点。下一个乘客上来，那可就彻底讲不清了。要验证我的身份，大可以等东西找到再说。估计这堆罗嗦问题就是要等到说下个乘客可以上车，然后再推说可能是乘客问题，让你无话可说的。所以大家车上丢了东西，就别指望调度了。
消息回来，果然找不到，手机满电的，也关机了。于是只有紧急停机，外加修改了所有在上面涉及过的密码，包括我的QQ，MSN/Hotmail，Gtalk/Gmail，还有张老师的blog。这里普及一个常识，手机使用的时候，一定要将手机设定为和SIM卡绑定。然后在手机丢了以后，立刻停机。这样做的主要目的是防止手机诈骗，例如打给你朋友，说你车祸了在急救，这里是医院，赶紧汇钱到XX账户啥的。我的朋友一般还比较懂行，肯定会挂了拨我号码以验证是否是我本人——问题是，那还是打到他手机上啊。人家和你够铁够仗义才付钱，万一被骗了，你好意思不赔他损失么？所以，丢了一定要停机。而SIM卡绑定，对于专业人士来说不难解，而对于业余人士则不好解。如果是外行捡到，卖给玩手机的就要被宰一刀，所以最好的思路是打上面几个人的电话问问要不要把手机买回去什么的。如果手机没绑定，大多都是拿到就用了，这个选项根本不可能。至于记录IMEI号什么的——你还没那个面子让移动封掉这个手机。另外上面如果用过QQMSN什么的，也赶紧改密码。不要心存侥幸，一天也许没事，两三天万一他解锁出来了，你哭都来不及。
至于数据么，大部分都有备份，但是所有人的联系方式肯定都泄密了。大家如果看到其他人，用别人的手机，宣称我如何如何的——别信他。半年内的联系人可能需要重新添加，回头我会一一联系。
至于其他么，半年内和我发过短信的，你们的短信都曝光了。和我照过相的，你们的照片都曝光了(这可不限半年，实际上我刚买的时候照的都还在)。其他数据应该没什么风险了，以上。
以下不算钱:
啊～～～～我的手机啊，又要买新的了，怨念。</description>
    </item>
    
    <item>
      <title>一个远程下载verycd的小技巧</title>
      <link>//blog.shell909090.org/blog/archives/89/</link>
      <pubDate>Fri, 29 Jan 2010 15:59:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/89/</guid>
      <description>贝壳家里开了emule，天天下载，问题是又不能每次都是晚上添加资源。
怎么办呢？不知道大家知道不知道，emule是可以网络管理的，端口是4711。不过不是https，密码容易泄露。而且贝壳已经有一个nginx服务器了，也懒的再做端口映射，换端口。于是，在nginx中做如下设定。(当然，贝壳是放在https段中的)
location ^~ /emule/ { rewrite ^/emule/(.*)$ /$1 break; proxy_pass &amp;lt;http://hostip:4711&amp;gt;; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; } 然后，用https://dynname/emule/就可以访问你家里的emule了，记得密码设强点。
接下来，verycd里面曾经有复制所有连接的选项，现在没了。面对几个链接，也就手工复制一下，面对上百个连接，贝壳就无语了。贝壳试验过几个插件，都无法正确识别ed2k的链接获取。那怎么办呢？这时就要请出我们伟大的Linux。
需要准备的工具是lynx，请预先装好，然后如下操作。(范例是个动画^_^)
wget -c &amp;lt;http://www.verycd.com/topics/2779234/&amp;gt; lynx -dump -listonly index.html | grep &amp;quot;ed2k://&amp;quot; | sed &amp;quot;s/.*ed2k/ed2k/g&amp;quot; | grep -v BIG5 &amp;gt; out.txt wc -l out.txt lynx的-dump选项是将某个网页全部渲染成文本进行展示，这是html2text的好方法，效果还不错哦，不过中文支持好像不是很好。而-listonly则是展示出页面上的所有链接，这就拿到了我们需要的原始数据。
然后，我们取其中的ed2k行，忽略其他链接，再通过sed转换，去除头部的编号和空格，这样就可以得到所有的ed2k链接。
我在下面是用-v BIG5的参数，忽略了其中繁体中文的资源，然后输出到一个文件中。数数行数，52行，大致和文件个数相当(其中好像有两个v2)。那就是可用资源了，复制到emule的控制页面中——出错？
这是因为emule的控制页面使用GET方式传递参数，因此有长度限制。你需要将链接10个一批往里面复制——有个几次就OK了。当然，如果还是多，贝壳回头会写一篇文章，介绍如何使用curl自动干这事情——这还不算太难。
这就是为啥贝壳喜欢Linux的原因了。相比Windows下的两个解决方案，找插件太费劲，自己写程序更费劲。Linux使用现有工具的组合可以轻松完成这一任务。</description>
    </item>
    
    <item>
      <title>关于减少使用gmail的建议</title>
      <link>//blog.shell909090.org/blog/archives/88/</link>
      <pubDate>Tue, 19 Jan 2010 21:18:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/88/</guid>
      <description>这次，google又不走了。
事情处于很奇怪的状态，google本是不可能留下的。既然它留下了，我们说，事有反常必为妖。这次妖在哪里呢？
我建议大家减少使用gmail，最好别用。原因如下：
如果google的却是受到了某些关于知识产权的攻击，但是却愿意在中国留下，并且在发生这次的事件后，还能留下。这说明google(非中国的谷歌公司)已经和北京达成了某种秘密的和解协议。无论这个协议的细节是什么，我们有理由猜测，google的产品不能完全的信任了，包括gmail，google reader，bloger等。
另一方面，如果google并没有受到这些攻击，那就是出于各种原因的新闻炒作。既然google背弃不作恶的宣言在前，那杯葛在后也是自然而然咯？
所以说，如果google打算继续在中国留下，那么包括gmail在内的各种google产品，都必须视为非安全产品看待。建议尽量减少使用，并准备替代方案。</description>
    </item>
    
    <item>
      <title>关于海地地震</title>
      <link>//blog.shell909090.org/blog/archives/87/</link>
      <pubDate>Mon, 18 Jan 2010 10:17:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/87/</guid>
      <description>深切同情这种虚伪的话就不说了，我们又没被震过，装B只会遭雷劈。
我得说，海地人民，海地政府还是比较公平的。学校倒了，总统府也倒了，这两天净看到倒塌的总统府了。在神奇的土地上，只听说学校倒塌压死人，还没听说政府机关房子倒塌压死人的情况——那到真是造福全社会了。</description>
    </item>
    
    <item>
      <title>关于google退出中国的FAQ</title>
      <link>//blog.shell909090.org/blog/archives/86/</link>
      <pubDate>Thu, 14 Jan 2010 12:52:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/86/</guid>
      <description>F:google真的准备退出中国了么？
Q:历史告诉我们，两个人谈价的时候，如果出现有人生气要走，那可能是讲价的手段。如果出现扇耳光，那么多数是谈崩了。除非被扇的人授意这么做，否则双方都没有回头路可走。目前google等于明确的在指责中国进行网络监控，并试图进行网络攻击。耳光都扇出去了，下面就不是谈价的问题了。
F:中国政府会怎样处理google的谈判呢？
Q:这也是个挺头痛的问题，要是让google就这么走了，无异于变相承认了中国的网络舆论监控和网络安全问题。但是要答应无控制的搜索，那是绝对不可能 的。可能会派出发炎人，声明，中国要求google进行网络控制的理由是为了防止网络色情和网络暴力，这是我国内政，其他国家无权干涉。目前没有证据表明 入侵google的黑客得到中国政府的授意，任何试图联系两者的人都是邪恶和别有企图的。中国是一个开放的市场，任何人进入和离开是个人自己的选择，中国 依旧欢迎其他公司来中国建厂投资。
F:google退出中国真的是因为不作恶么？还是为求一个体面的退出？
Q:别太把自己当回事了。google在中国的利润有多少？不超过总利润的10%。投资有多少？鬼知道。市场份额多少？33%。我们不看其他，就算中国市场全争取过来，最高也只能将利润增加到25%((10*3)/(100+10*2))。也就是说，中国最多是一块肉丝，而美国是块肥肉。如果肉丝真的有臭掉的风险，宁可丢块肉丝，也别丢肥肉。
而且，一旦明确指责网络舆论控制和网络安全问题，那么，同样进入中国的其他大型厂商就会陷入被动，包括微软，雅虎等。撤吧，他们的市场份额更大，问题也更复杂。不撤吧，他们在美国的形象会受到影响，有利于google在其他地区的业务。
F:google走了，百度得益了？
Q:短期来看，没错，长期来看，市场会重新平衡。由于百度在谈判上的强势地位，因此会导致代理商和广告主非常难做，同时互联网广告的成本会增加。进而加剧劣币驱逐良币，最后让整个互联网的所有广告都变成近乎于废纸，互联网广告业务名存实亡。
而且，一旦google离开，百度就会直面政府。从政府需要&amp;quot;团结和依靠&amp;quot;的多数，变成需要&amp;quot;警惕&amp;quot;的&amp;quot;怀有异心&amp;quot;的人。可以预见，政府对百度的监控和利用会达到一个新的高峰(因为用不着让你活着对付google了)，并且可能会提出注资成为某部下属机构的要求。
F:google走了，我们将会怎样？
Q:google的离开，标志着中国的互联网整体倒退了6年。在IT界，3年是一个时代，6年的倒退，让我们退回了两个时代去，变成了上个世纪网络刚刚兴起的时候，那种上网艰难的状况。这不是用备份邮箱，备份新闻标签等方法可以解决的。
更严重的是，这会严重打击整个业界，工程师，对于中国的网络发展的评价。在这个问题解决前，我们可能落后其他国家10年以上。当然，之所以我这么担忧，其实还是因为这直接影响到了我的饭碗。</description>
    </item>
    
    <item>
      <title>手工删除oracle数据库实例的全部文件</title>
      <link>//blog.shell909090.org/blog/archives/85/</link>
      <pubDate>Mon, 11 Jan 2010 00:37:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/85/</guid>
      <description>今天公司搬家，没啥好写的，简单记录一下前两天删除重建oracle数据库的过程吧。
首先，我重建的是oracle数据库，而不是oracle数据库程序。这几天不知道怎么回事，整个数据库的redo log出问题了，我又懒得去找。加上这个数据库做演示的时候乱糟糟的配置做了一堆，也记不请了，干脆重建。
重建的第一步，需要找到所有程序实例的位置，这个可以看/etc/oraInv什么的一个文件，这里会指向一个目录。这个目录是标准的，里面有各种格式的oracle程序实例的位置。然后，一个程序实例可以运行多个数据库实例，因此，要找出这些数据库实例的配置文件。这个就需要对oracle的数据库基本结构有所了解，这里不赘述oracle数据库的各种基本概念。
oracle的数据库配置文件在一个很怪的位置，/etc/oratab里面。其中有SID到spfile路径的对应关系，通常而言，这个路径位于$ORACLE_HOME/dbs/init$ORACLE_SID。我们首先不要删除这个对应关系和文件，因为启动中其他文件需要通过这个找到。我们首先通过spfile建立pfile，来读取其中的参数。
$ export SID=orcl $ sqlplus / as sysdba &amp;gt; create pfile from spfile &amp;gt; exit OK，这样我们就建立了pfile，现在可以删除$ORACLE_HOME/dbs目录下所有的SID相关的文件，并且删除oratab中的对应关系。完成这步后，数据库就无法启动，也不存在了。但是我们还需要回首数据库相关的文件，主要是收回空间，同时也免除后患。
首先，数据库有三个control files，还有一个到多个data files，以及多个redo log。在默认设置中，这些文件一般放在一起，你可以通过查看pfile确认这些文件的路径。找到之后，直接删除，没啥好多说的。在完成数据基础文件的删除后，我们还需要删除flash_recovery文件，这个也可以通过pfile确认，位置一般在data文件上两级(就是通常$ORACLE_BASE的位置)下面，flash什么的一个目录，很好找。
最后，我们删除admin目录，具体是在$ORACLE_BASE下面的admin下面，以SID命名的，可以通过pfile确认。至此，oracle数据库的删除完成。不过呢——呵呵——让大家失望的是，其实DBCA也可以完成一样的工作&amp;hellip;
不过，dbca的工作必须通过vnc，绝对不要通过ssh + xming，因为那个会让最后一步执行前的确认无法被确认，导致不能执行。实在是很让人郁闷的一个bug，切记切记。</description>
    </item>
    
    <item>
      <title>replay</title>
      <link>//blog.shell909090.org/blog/archives/84/</link>
      <pubDate>Wed, 23 Dec 2009 11:16:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/84/</guid>
      <description>发现最近的生活，越来越重复了。怎么说呢？每天早上起来，照例刷牙洗脸，吃饭出门。走在南泉路上，会看到一辆119。拐到兰村路上，会看到一个黑衣MM，对面走过来。人很漂亮，一般是在打手机，否则就是拿手机听歌。前走一点，有个保安在和卖煎饼的聊天，一个抽烟一个翻煎饼，每天的差异差不多就是有客户和没客户而已。再往前，在东方路前会碰到一个辫子MM走出来，辫子很长，从后面看很漂亮。不过记住，如果你不想对世界失去信心，一定要走在她后面。走在前面千万不要回头，无论是有人喊你还是后面有车要70码你。我头次很好奇的回了个头，结果一天都无法正常工作。走到东方路，有八成概率是一堆人在等红灯。恭喜，这代表你会在20秒内碰到绿灯――平均值通常是5秒。
上地铁后就更规律了，如果一堆人在等车，那车上肯定也是一堆人，你如果被挤上去就算是走运了。相反，如果只有小猫两三只，那么车上多半也没有人，慢慢走上去就好。到了世纪大道换车，就可以开电脑放音乐，头一首歌照例是《钢之炼金术士2009》的片头。到了张江，有车停左边和车停右边两个选项。不过没有关系，凡是在进站前停车的，就是左边，否则是右边。因为车要靠右开，停靠右边站台的车在开出时，换到左边(相对他是右边)，而我们的车在进站时要靠左，也需要换边。不停车怕又碰到昨天一号线的事故，因此惯例是要停车的。
地铁下来后，有两个红绿灯，第一个灯是20秒横走40秒直行，因此多数会直行过去。第二个灯是50秒横走20秒直行，因此多数会横向过街。联合以上数据计算概率，两次直行的概率是19%，先直行后过街的概率是47.6%，先横后直行的概率是33.3%。没有觉得什么不对？看来又多一个走傻掉的。计算以上概率的方法是分支法，联合概率乘法？我没事先过个街，第二个路口走回来？那不真傻了？
最后，到办公室。一般这时候是王菲在唱《只有我自己》。如果刚唱到&amp;quot;走过千山万水&amp;quot;，那说明地铁走的还是挺快的。如果已经到了&amp;quot;失去你，就失去，面对孤独的勇气&amp;quot;，那――要么是地铁走的慢了，要么是你走的慢了。</description>
    </item>
    
    <item>
      <title>论BTchina的倒掉</title>
      <link>//blog.shell909090.org/blog/archives/83/</link>
      <pubDate>Tue, 08 Dec 2009 11:29:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/83/</guid>
      <description>BTchina倒了，死的很惨。被广电总局直接勒令关闭，连整改的机会都没有。无疑，大家都知道，VeryCD会紧随其后。无论是非如何，请允许我先向这两家陪伴我多年的网站道声感谢，一路走好。
就打击这个问题来说，我无疑是赞成的。广电总局打击集中向两个关键词，盗版和非法。无论哪个，都是应该打击的对象。但是这次打击本身却值得怀疑，主要集中在三点，是否允许整改，选择性执法，还有实际效果。
首先，拿整改问题来说。BTchina和VeryCD做的是下载业务，其中有盗版下载再正常不过。一般打击都是先责令整改，然后再关服务器——虽然我们知道责令也不见什么效果，BTchina肯定改不过来的。不过样子还得做啊。不过从某种意义上说，样子做不做也就是政府内部的事情。无论做不做都是合理合法的，所以这点问题还不大。
其次，我质疑比较大的一点，就是选择性执法。有个朋友说的比较精辟，每只猫都有他的目的。我总是不惮以最大的恶意来揣测咱们的政府——他们这回想干啥？如果要打击盗版，那问题严重了去了。中国桌面上，十有八九都是盗版Windows。哪怕你买了个笔记本，上面带了个正版Vista，一般也非要装个番茄花园不可。中国人看的电影，听的歌，乃至于用的手机，都是盗版产品。所以从这个角度说，我到真的很愿意国家打击盗版。盗版没了我们的软件才更好卖，盗版没了才有人被逼用Linux，盗版没了我们这行才能赚钱。不过咱得看事实，不能听风就是雨，更不能YY。广电总局要真有决心打击盗版，首先应该奔着卖盗版盘和卖盗版书的去——虽然他们也被互联网下载整的生不如死。问题是，他们没有。
那，会不会是打击非法音像呢？这话说的更搞笑了。BTchina和VeryCD上有没有色情我不敢说，不过要有也绝对少于新华网。这不是指责新华网有多色情，而是阐述两者身为不同主体的无奈事实。BTchina和VeryCD要是碰到色情门那是沾上就死抡上就亡。作为半国企的新华网，就算偶尔行为出格，只要不出大差错无非就是检讨一下而已。这种情况下，前两家的审查力度，和后一家怎么可能同日而语？实话说，我当初还非常努力的试图在VeryCD上找什么色情资料。只能说他们的版主比较尽责，连疑似的都没有。要打击非法音像，还得找小网站——就是那种准备烧一把就走的。除非碰上严打，否则等查处来的时候，人都没了。
那我就得怀疑了，广电总局想干啥呢？说打击盗版，不像，说打击非法音像，也不像。这事情我怎么看怎么觉得像上海政府查处黑车，黑车不黑车不重要，重要的是规范正当市场——说白了就是交钱。百度百科也涉嫌抄袭Wikipedia啊，怎么没看广电局找他们麻烦呢？人家3000万春晚赞助可不是白交的。
那这事靠不靠谱呢？我只能说，越来越不靠谱了。从本心来说，我希望打击盗版，但是从现实而言，无论是美国政府，欧洲诸国政府，还是中国政府，对打击盗版都没啥办法。前两者有海盗党——当然，他们也被人盗版了他们的logo，真是讽刺。后者则有1亿多网民，每天发明各种奇怪的办法。现在的网民水准是越来越高了，或者说软件是越来越傻瓜了。原来下载必须在中心节点上投入大量资金，而且政府一来就玩完了。后来则是中心节点上只要搭个论坛，剩下的自然有P2P软件搞定。现在，根本就没中心节点。DHT的普及，使得去中心化的优势体现的淋漓尽致。Emule里面可以用kad搜索，直接搜索你需要的资源——正常情况下不比VeryCD差。而torrent里面则有个种子市场，可以直接搜索你要的种子。
好家伙，连服务器都不要了，这次广电局再要下手，只有从网络传输上下手了——中国为了解决轮子问题，为GFW投资了不少钱。不知道广电局是否能收到足够的钱，把这个系统扩大个几倍，把P2P的混淆协议也全概括进去。作为一个老程序员，我劝诫所有的下载者一点。下次再弄的时候，用emule的kad搜索来找你需要的资源，你会发现其实verycd也不是必须的——虽然对他们来说，这是个比广电局查处更不利的消息。</description>
    </item>
    
    <item>
      <title>用python实现webserver(二)――Thread</title>
      <link>//blog.shell909090.org/blog/archives/82/</link>
      <pubDate>Mon, 07 Dec 2009 09:58:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/82/</guid>
      <description> </description>
    </item>
    
    <item>
      <title>MSN强制升级</title>
      <link>//blog.shell909090.org/blog/archives/81/</link>
      <pubDate>Wed, 11 Nov 2009 10:19:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/81/</guid>
      <description>从前天开始，单位里的MSN8.5就无法登陆，老是提示我要升级。今天家里的MSN也无法使用了，被逼无奈，先用pidgin顶一阵再说。不过现在贝壳正在考虑MSN的用户搬迁工作，目标是迁移到Gtalk上，不行QQ。
有几个朋友问贝壳，升级不就好了，何必兴师动众呢？首先，MSN8.5的安装程序只有20M，而MSN9的安装程序高达132M。其中多出来的100多M东西可不是白装的，他们大概会吃掉你30-40M的内存。而且9里面有很多插件(其实8.5也有，不过就一个，总算还好屏蔽)，安装上去后，工作的时候做调试麻烦异常，工作机器上装这个纯粹给自己找麻烦呢。而且微软素行不良，有劣迹在前。盗版黑屏问题大家还记得吧？升级提示上说是安全修补补丁，结果装上去屏幕就黑了。不说黑屏现在如何了，就说这种欺骗用户安装的手段，有谁还相信这次的强制升级是为了安全问题么？微软系统安全是出了名的差，一个安全公司用测试用蠕虫在win7上跑，只有20%不到能被微软自己拦截。其中固然有安全公司危言耸听，但是测试过程是全公开的，做假不来。这还是微软主推的最新操作系统，安全性据说很好。如果真是为了安全问题，先把Windows里面那堆雷死人的安全问题解决了才是王道。
反倒是QQ的强制升级政策我觉得尚算可以。 QQ协议分为2005/2006/2007/2008多个版本，通常而言可以使用当前版本和前一版本。就是说，现在用的协议是2008的话，那么2007协议还可用，而2006协议就不再支持了。通常而言，这种时候继续使用2006协议的人微乎其微，基本可以忽略不计。这个政策主要是给不愿意升级的人一个缓冲的空间。对于腾讯而言，实施这个政策其实比微软更有压力。因为微软的协议是公开的，而腾讯则是采取封闭协议，甚至打击第三方客户端的企业策略。我们姑且不论这个策略的得失，但是维持两个协议版本，就给破解协议的人留下了破解的时间和空间。因此对于腾讯而言，这个策略是和公司战略相违背的。
更深一层的问题是，强制升级问题说明了我们所依赖的服务的脆弱性。MSN在中国占据的客户群体并不算大，远远不比QQ。然而就是这样一个客户群现状，微软就敢于强制升级。今天是强制升级，明天收费呢？所以说任何事情依赖一个公司是不行的。我还是会使用MSN，但是会逐步将用户迁移到Gtalk和QQ上，并以开心网和Facebook做补充。力争做到这三个IM中任意两个能覆盖大部分朋友群体，开心和Facebook保留所有联系可能。这样可以适当制衡某些软件公司(不仅是微软，还有腾讯)，也可以减小出问题时的损失。
其实要做到这点并没有任何困难。当你认识一个人的时候，只要和他保持两种以上的IM，并且在开心和Facebook(当然，这个没法强求了，毕竟中国的GFW&amp;hellip;)上交换一下好友就好了。对抗强权，从小事做起就好。</description>
    </item>
    
    <item>
      <title>用python实现webserver(一)――Prefork</title>
      <link>//blog.shell909090.org/blog/archives/80/</link>
      <pubDate>Wed, 21 Oct 2009 10:31:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/80/</guid>
      <description>要实现webserver，首先需要一个tcp server。作为python的设计原则，最好是使用SocketServer或者封装更好的BaseHTTPServer来复用。不过既然我们的目的是为了学习，那么就不能用这两个内置对象。我们先实现一个最古典的每进程模式实现。而我们标题上的Prefork，则是apache服务器对这个模式的称呼。
每进程模式，顾名思义，就是每个新连接开启一个进程进行处理。首先创建一个socket，bind到一个套接字上。当有请求时，accept。(好多英文，不是我有意cheglish，全是api的名称)accept会返回一个通讯用的socket，这时fork出一个新的进程，处理这个socket。
主进程在每次进入accept后阻塞，子进程在每次进入recv后阻塞。这样会带来几方面的好处。首先是模型分离，即使一个子进程崩溃，也不会影响到其他子进程。其次是身份分离，当你需要让http server以高于常规运行(常规都是以apache, www-data, nobody运行的)用户的权限进行工作时，每进程模式是唯一安全的模式。其他模式都会造成同一进程内的其他session也暂时获得这个权限的问题。但是同样，这样有几方面的问题，主要就是性能问题。
由于每个连接都需要fork出一个新进程去处理。因此针对大量小连接的时候，fork和exit消耗了大量CPU。问题更严重的是，由于用户进程总数是有限的(PEM或者ulimit都会限制这个数量)，因此压力大到一定程度时(通常是1024或者2048)，就会出现无法创建连接的情况。而对小型服务器而言，在压力还没大道这个程度以前，服务器就会由于性能达到限制而造成段错误。以下是实际试验指令和结果：
测试指令：
ab -n 10000 -c 100 &amp;lt;http://localhost:8000/py-web-server&amp;gt; 服务器报错：
[20090924 05:51:18]: Traceback (most recent call last): [20090924 05:51:18]: File &amp;ldquo;main.py&amp;rdquo;, line 19, in [20090924 05:51:18]: [20090924 05:51:18]: sock.run (); [20090924 05:51:18]: File &amp;ldquo;/home/shell/py-web-server/server.py&amp;rdquo;, line 30, in run [20090924 05:51:18]: [20090924 05:51:18]: while loop_func (): pass [20090924 05:51:18]: File &amp;ldquo;/home/shell/py-web-server/server.py&amp;rdquo;, line 56, in do_loop [20090924 05:51:18]: [20090924 05:51:18]: if os.fork () == 0: [20090924 05:51:18]: OSError [20090924 05:51:18]: : [20090924 05:51:18]: [Errno 11] Resource temporarily unavailable</description>
    </item>
    
    <item>
      <title>用python实现webserver(零)――导言</title>
      <link>//blog.shell909090.org/blog/archives/79/</link>
      <pubDate>Fri, 09 Oct 2009 16:01:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/79/</guid>
      <description>本系列文章的所有代码，都发布在http://code.google.com/p/py-web-server/。项目的目的，是通过写作一个可用的http web server，学习服务器程序编写中的一些方法，以及http协议的细节。
如同我在项目介绍中说的，项目遵循以下几个设计原则。
有兴趣的，可以也通过本文的介绍，不看代码写一个类似的东西。而后对比代码，找出设计上的异同和优劣。如果您也设计了一个，请告诉我，我很高兴能够得到大家的指正。</description>
    </item>
    
    <item>
      <title>软件自由英雄谱</title>
      <link>//blog.shell909090.org/blog/archives/78/</link>
      <pubDate>Mon, 14 Sep 2009 13:53:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/78/</guid>
      <description>谨以此缅怀那些为了今日软件事业的自由做出贡献的先辈们。(注1:多数人没牺牲，谢谢)(注2: 排名不分先后)(注3: 科普作品，大家别怕)
我在撰写这篇文章的时候，避免使用自由软件这个词，而改为更普遍意义上的软件自由。因为自由软件是RMS提出的一个专有词语，指软件的开源，复制，协作等
特质。而我试图通过软件自由这个词，表达人们在使用软件上的自由，以及使用软件来为我们获取自由。我们拥有知道软件一切内幕的自由，我们拥有修改软件的自由，我们拥有思考的自由，我们拥有挑战老系统的自由，我们拥有拒绝通过软件收费的自由，我们拥有通过软件获得信息的自由，我们拥有不受任何人，包括政府监控的自由。为了这种自由而付出的，不仅是自由程序的拥护者，也有商业程序的拥护者。
Richard Matthew Stallman 大名鼎鼎的RMS，GNU的核心人物，自由软件的布道者。要是在这个列表上没有他的名字，那我不知道还有谁能留在这张表上。具体可以看这里(http://zh.wikipedia.org/zh-cn/%E7%90%86%E6%9F%A5%E5%BE%B7%C2%B7%E6%96%AF%E6%89%98%E6%9B%BC)。简单来说这家伙最大的几个成就：创立了GNU和FSF，为自由软件的传播奠定了基础。制作了emacs，当今黑客世界两大编辑器之一(另一个是VIM)。制作了GCC，世界上使用最广泛的编译器。
RMS的核心想法是，因为软件而收费是罪恶的，这种人是撒旦(当然，Bill Gates是其中最大的那个)。他认为软件应当自由分享，程序员从中收取的应当是服务费。今天，RedHat正是继承了这一模式。通过免费的软件和收费的服务来进行持续的开发。
2.Linus Benedict Torvalds
常常和RMS并提的一个家伙，具体在这里(http://zh.wikipedia.org/zh-cn/%E6%9E%97%E7%BA%B3%E6%96%AF%C2%B7%E6%89%98%E7%93%A6%E5%85%B9)。
一个低调又火爆的家伙，没有什么太多言论，但经常语出惊人，最有名的是以“一群自慰的猴子”(OpenBSD crowd is a bunch of masturbating monkeys)来形容OpenBSD的团队。最大的成就就是写了个操作系统——没错，就是叫Linux的那个。
3.Donald Ervin Knuth
哈，这个人就不像上两个那么广为人知了。他(可不能叫这家伙，得敬老)有个中文名字，叫高德纳，页面在这里(http://zh.wikipedia.org/zh-cn/%E9%AB%98%E5%BE%B7%E7%BA%B3)。
最大的成就是写了本书，叫做《计算机程序设计艺术》。有意思的是，写到一半的时候，觉得现在(那是上世纪80年代的事情)的排版软件不爽——于是自己下手，写了一个叫做Tex的排版系统——然后再回来继续写书。这本书算起来已经写了30多年了，估计成书时间和《浮士德》有的一拼。而Tex是当今高端排版中最流行的系统(多数都不是直接拿来用，而是用了LaTex之类的包装)，如果有向国际期刊投稿过的应该有印象。Tex也是被誉为最接近完美的程序，它的介绍在这里(http://zh.wikipedia.org/zh-cn/TeX)。%E3%80%82)他的版本号是以圆周率为基准的，头一个版本叫3，后一个叫3.1，以此类推。目前的版本号是3.1415926，刚好是祖冲之的密率。高伯伯曾表示，等他死之后，版本号就改为π，剩下的bug就作为程序的功能放在那里。
有一个未经证实的故事。据说上世纪Internet还没出现的时候，美国军方找人设计了TCP/IP协议，他们希望有人为他们实现基于Unix的TCP/IP协议栈。于是他们花了四千万美金，找人写了一个协议栈，并且拿到高伯伯的学校去用。对此高伯伯非常不满意——别误会，我指的是实现的效果。于是就自己花了点时间写了一个，结果比原版的协议栈更快速而稳定。美国军方觉得非常困惑，问他是怎么做的。高伯伯说，读你们的协议，然后编码。
4.Andrew Stuart Tanenbaum
这个知道的人也不会太多，当然，职业玩家例外。当初AT&amp;amp;T禁止UNIX7的代码公布，因此大学里面都没什么实际产品可以用来教操作系统这门课。
于是，有个叫AST的老师就怒了，你不让我干，我自己干。于是写了一个叫做Minix的系统，并且还写了本书，叫做《操作系统：设计和实现》。后来有个学生，觉得这个系统改改能干别的，于是给AST去信。AST说，改什么改，我写这东西是拿来教书的。于是这个学生就自己写了一个系统——对了，这个学生就是上面的Linus，而那个系统，就是大名鼎鼎的Linux。
时至今日，Minux已经发展到了第三版(他的版本号是跟着书走的，第一版，第二版，第三版&amp;hellip;)，是大多数大学里面教授操作系统基础原理的标准教材。
同时，也在嵌入式系统等领域有非常大的应用。但是，由于AST还是坚持他的教学和精简原则，因此在桌面和服务器领域就别指望了。关于AST，大家可以看这里(http://en.wikipedia.org/wiki/Andrew_S._Tanenbaum)。
5.Ian Murdock
这个人很多人都听过，不过看着名字还是认不出来。他是Debian系统的作者，具体可以看这里(http://en.wikipedia.org/wiki/Ian_Murdock)。
Debian有什么特殊呢？其实就本身来说，Debian并不算特别成功。但是Debian有庞大的衍生系统群，更有Ubuntu这样充满活力的发行。
Linux世界有所谓三大发行，四大包管理系统之说。其中三大发行指三个在世界上最广泛用于服务器的发行版本，即RedHat Enterprise Linux，SuSe，Debian，其中只有Debian是无服务商支持的。而四大包管理系统就是指RH的RPM系统，Debian的APT系统，arch的PCMAN系统，和Gentoo的emerge系统。
6.Ken Thompson
有没有听说过？至少看着眼熟吧。这家伙是贝尔实验室的，最大成就就一个：Unix作者。详细内容请看这里(http://en.wikipedia.org/wiki/Ken_Thompson)。
7.Dennis Ritchie
没听说过？也很眼熟？这家伙和上面那位是朋友，最大成就也就一个：给上面那位提供了基础语言，C语言。详细内容请看这里(http://en.wikipedia.org/wiki/Dennis_Ritchie)。
8.Bjarne Stroustrup
又是一个怎么看怎么眼熟的家伙？那当然。他和上面两位不怎么熟，不过他们都是一路的。他是C++的作者，详细内容请看这里(http://en.wikipedia.org/wiki/Bjarne_Stroustrup)。
9.Phil Katz
这个就很少有人知道了吧，不过大家肯定天天和他打交道。大家用记事本打开任意一个ZIP文件，开始的两个字肯定是PK，这就是Phil Katz，具体请看这里(http://en.wikipedia.org/wiki/Phil_Katz)。
这是一个有点悲剧的人物。在上个世纪的时候，大家还在BBS上混。由于速度有限，因此下载站的资源都是压缩提供的(当然，直到今天肯定还是如此)。最初的压缩格式大多是ACE的，这是一家商业公司，直到今天还活着。由于PK不满意这家公司的压缩软件，压缩率低，速度慢，而且还不断提出高昂的收费。因此他决定自己写一个压缩软件，就是最初的PKZIP。由于软件免费提供使用，压缩率高，解压速度快，因此很多站长自发的将数据格式转换为ZIP。后来PK就干脆开了PKWARE软件公司，免费发行压缩程序代码，同时提供方便使用的图形界面版本。
但是非常可悲的，由于格式开放，因此这个软件有个非常大的竞争者，winzip。我想有些Win95时代的老用户还记得这个软件。PK在软件开发上很有天分，但是在市场策略上却不很成功。WinZip对ZIP格式的熟悉其实比不上PK(那当然，人家是原作者)，然而WinZip却拥有很多用户友好的特性，右键菜单解压，虚拟解压(将压缩包的内容临时虚拟成一个目录，用户可以无缝的使用，XP中集成了这个功能，但是WinZip的虚拟解压很容易撤销)。所以最终PK的软件公司破产了。他本人在2000年4月14日因饮酒过度，在一家小旅馆内死去。
至于WinZip呢？碰到了一个更强大的对手，WinRar。功能类似，但更简洁，最主要是支持大多数流行的压缩格式。因此目前压缩软件领域还是WinRar占据着主流，市场就是这么残酷。
10.Phil Zimmermann
这个人基本没人知道，但是却是这张表里面最典型和突出的一个人。他是PGP的作者，具体可以看这里(http://en.wikipedia.org/wiki/Philip_Zimmermann)。他的成就很难用一句话说明，要阐明他的成就，就必须从美国的国家安全出口管制说起。
在上个世纪，美国政府有一种观点，他们需要能随时随地的窃听任何一个人和其他人的通讯。同时，作为延伸，他们制定了国家安全出口法案，将密码产品作为军用管制品，限制出口。这其实是很荒谬和不合逻辑的，任何公开的算法都可以被多个人独立的实现。只要算法是公开的，即使产品不允许出口，国外也可以没有任何阻碍的实现出来。而如果算法是不公开的，则会出现两个弊端。一个是阻碍密码学的交流和进步，更麻烦的是，根据密码学的内在逻辑，这样的系统，由于验证不完全，因此比公开的系统更加不安全。
在1991年前后，PZ制作了PGP软件，用于保障当时备受争议的电子邮件的安全(小常识:电子邮件默认是明文的，安全程度和你写在明信片背面寄给你父母的句子差不多)。这个软件使用了1980年以来提出的现代密码系统几大密码系统，实现了签名安全和秘密安全。这里我们小小的讲解一下电子邮件的两大安全系统，对此无爱的人自行跳到下一段。签名安全就是指，你收到一个邮件的时候，能够确信，这个信的内容是原始发件人的真实意思表示，而不是被篡改过的。秘密安全就是指，当你收到一个信的时候，你能够确信，除了你没有别人能够偷看到内容。对此，一般采用公钥系统来实现两者的安全。所谓公钥系统是这样一种系统，用公钥加密必须用私钥解密，用私钥加密必须用公钥解密，私钥很容易计算出公钥，公钥非常难计算出私钥。当你要签名安全的时候，将邮件内容用自己的私钥加密再发送一次(实际是将内容hash了再加密的)，接收者解密后对比。由于篡改者只有公钥，因此虽然可以拦截和修改内容，但是无法伪造出一对匹配的内容，用公钥解密后刚好一致。而秘密安全则是用对方的公钥加密。对于更高层级的要求，你的公钥不仅要求公布，而且必须在国家认可的部门公布，这样就由国家认定了你的公钥和你的身份的一致性。当你对一个内容签署的时候，只要能用公钥验证签名，就可以认定内容是你的真实意思表述，并被法律所承认。
当时的PGP当然还没有这么复杂，但是对于当时缺乏任何安全性特征(当时连TLS都没有)的电子邮件来说，是非常必要的补充。可是我们上文说了，美国禁止出口这些产品。于是，PZ免费的将软件的最初版本散发给同事和其他人使用，而这些人又可以免费的分发出去——这和自由模式非常的吻合，除了我找不到具体信息标明当时PZ是否从授权上同意他们做这个事情。法律上说，PZ并没有“出口”密码产品，但是实际上，是他实现并且向全世界推广了高强度的电子邮件安全系统。从某种意义上说，PZ可以说是叛国者。非法散布军用管制品，危害美国的国家安全(这还不像中国那种含糊不清的指控，这里的军用管制品定义是明确的，并且是由国会制定的)。于是，PZ受到了三年的官司和五年的调查，直到96年的时候，克林顿签署了新的法案，放松了密码产品的出口限制。其实也没松多少，从40位到56位——大概就是从5个字符到7个字符的区别。反之，我们改变观点，从世界的角度说，由于他的勇气和决心，我们每个人从中受益匪浅。
EDIT 2016-09-08: 按照我听到的更新消息，PZ当时实际上是出版了一本书，这个书里面就是完整的源码。他虽然没有“出口”这些源码，但是实际上任何人都可以在书店里买一本，然后带去海外，照着源码keyin一遍。美国政府虽然希望禁止这本书的出版，但是禁止个人出版图书违反宪法第一修正案——言论自由。当时政府还不能因为国家安全因素就随意禁止公民出版书籍（这都是911之后的事了），所以只能用官司和调查来整PZ。
必须得说，其实这一改变很大程度上并不是PZ个人努力或者公民运动的结果，其中有巨大的商业力量。IBM，微软和Lotus之类的跨国软件巨头在出口产品的时候，由于受到出口限制，因此在海外产品上的安全性一直很成问题。很多时候他们因为这个问题受到了巨大的挑战。在这一问题上，他们有足够的理由去游说白宫，改变出口限制的要求。关于这个案件的其他资料，可以参考这里(http://cyberlaw.stanford.edu/~prz/ZH/faq/index.html和这里(http://www.techcn.com.cn/index.php?doc-view-130949)。
在今日，PGP仍旧是一个非常强大的加密系统，并且是开源的——理所当然，如果不开源，我们会担心其中是否有漏洞和后门继续危害我们的安全。并且，从密码学内在的逻辑来说，不公开的系统是不安全的。不过他仍旧受限于美国国家安全出口管制条例，原因是因为由于今日强大的计算能力，因此密钥通常的长度是1024，2048，4096位长的——远远超过美国国家限制数十倍。因此这一软件的强密钥版本只有英文版，因为不用考虑出口。对于海外人士来说，我们更推荐OpenPGP，同样是开源的，而且基于开源模式开发的GNU自由软件。能够充分保证你的信息安全。</description>
    </item>
    
    <item>
      <title>计算机中的海森堡效应和罗素悖论</title>
      <link>//blog.shell909090.org/blog/archives/77/</link>
      <pubDate>Tue, 08 Sep 2009 17:58:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/77/</guid>
      <description>有点标题党，海森堡测不准原理大家都知道吧，你观测一个东西以获得他精确的描述，然而你测量行为本身就会干扰这个东西的存在，从而永远无法准确测量。
近日贝壳碰到一个计算机中的海森堡效应，因为工作需要，贝壳需要获得/proc/loadavg中的load参数。这个参数在uptime时会显示，大致意义是这一秒内平均的活跃进程数。(对电脑无爱者请自行跳过以下内容到下一段)准确的计算方法是在一秒内的所有tick上，累加当前的待运行线程列表长度，而后除以一秒内的所有tick。当tick趋于无穷小时，相当于对活跃进程的定积分除以横轴长度，即平均值。
同个文件内有另外一个值，活跃进程数，是当前的待运行队列长度。从理论上说，如果贝壳要计算一个小时(或者其他大尺度时间)的loadavg，可以高速取样该值，在一小时内求平均，即复现load参数的意义？
想法很好，不过实际上差很多。开发服务器上的loadavg大约是0.01-0.05，但是贝壳按照后者算出来的load总大于1。问题在哪里？
记住一点，当你去获得loadavg的时候，你当前的线程永远是在运行的。因此你获取的行为会增长活跃进程的值，哪怕其他时间什么都不做，这样会将取值的瞬间的load提高至少1。而内核的计算的时候，是不会把自己的行为计算为活跃进程的。
那么将值减去1对不对？也未必。在知道上述问题的同时，我们可以想象。在高压力下，你的线程什么时候会获得运行的机会？只有在最高优先级的任务空闲的时候。因此，你取得的值会严格的小于真实的压力。
因此，不要相信当前活跃进程数，那个值永远大于1，并且不总正确。如果那个值是0，那逻辑上讲，你就碰到了罗素悖论。
咳咳，又来一个问题，什么是罗素悖论？
很简单。如果说真话的人永远说真话，说假话的人永远说假话。有人对你说：“我在说谎”。你就听到了罗素悖论。同理，如果理发师只给不给理发师理发的人理发，而所有理发师的头发都有人理，那你也碰到了罗素悖论。同样，如果有程序告诉你，我读取了当前的活跃进程数，但是这个数表明我不活跃。
同样，你也碰到了罗素悖论。</description>
    </item>
    
    <item>
      <title>搭建家用的OpenVPN服务器</title>
      <link>//blog.shell909090.org/blog/archives/76/</link>
      <pubDate>Fri, 04 Sep 2009 14:50:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/76/</guid>
      <description>啥都不说了，贝壳最近搞了一个家用的OpenVPN服务器，任何机器，随时随地可以穿到家里来，很方便。用VPN干啥？这就多了。我可以用vpn操作 Windows上的vnc，使用Windows的共享文件服务，直接向Linux Server放文件(这样别人可以用http下载)，查看摄像头(被网络公布了)。将来如果有其他网络设备(例如冰箱和空调)，也可以一并管理。不过最直 观的——可以很方便的打游戏，我们根本就在一个网络里面。要点是，这些服务要分别开映射端口非常麻烦。而且有的服务从安全起见，根本不能开端口(例如臭名 昭著的Windows文件共享服务)。 具体原理上，贝壳有一台Windows，上面用Vmware搭建了一台Debian Linux，两者使用桥接模式。从概念上看，就是一台通向公网的路由器，里面放了一台Windows和一台Linux。现在，贝壳想通过某种方法，将外部 的一台机器接入内部的局域网中，就如同随身携带着一根通向家里路由器的网线一样。 下面直接上具体配置： &amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;filename: /etc/network/interface&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- auto lo iface lo inet loopback iface eth0 inet static address 0.0.0.0 iface tap0 inet static address 0.0.0.0 auto br0 iface br0 inet static bridge_ports eth0 tap0 address 192.168.1.IP netmask 255.255.255.0 network 192.168.1.0 broadcast 192.168.1.255 gateway 192.168.1.1 dns-nameservers 192.168.1.1 dns-search home &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- 使用上述配置的原因是，vpn只能联通你机器上的逻辑网卡和服务器上的逻辑网卡。单就vpn自身而言，是无法让你连到服务器上的内网网卡的。因此，我们需要通过网桥的配置，将eth0和tap0配置成网桥。这样，你的服务器就如同一台交换机一般，联通了两个网段。 而后，我们设定服务器配置。 &amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;filename: /etc/openvpn/server.conf&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- local 192.168.1.51 port 1194 proto udp dev tap0 ca /etc/openvpn/keys/ca.crt cert /etc/openvpn/keys/server.crt key /etc/openvpn/keys/server.</description>
    </item>
    
    <item>
      <title>互联网的黄金时代</title>
      <link>//blog.shell909090.org/blog/archives/75/</link>
      <pubDate>Thu, 20 Aug 2009 15:25:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/75/</guid>
      <description>今天，一个朋友推荐我看了篇《创业成功80%是运气？》的文章，作者可能是雷军。里面说，99年是互联网成就的年代，几大互联网巨头都是在99年成就的。 因此作者推测，09年也是互联网成就的年代。前者我认为很有道理，后者就纯粹在胡扯，拉人去投资了。退一步说，即使是对的，也是蒙上的。
为什么？我们首先得看，为什么99年是互联网成就的年代。这就得讲到98年以前，电脑是什么样的一个形态。记得贝壳95年刚接触电脑的时候，那时用的是 286。和现在完全不同，电脑最主要的功能是文书处理。因为当时根本没有互联网建设，电脑用户沟通的途径主要通过点对点拨接的BBS(不用了解是什么东 西，贝壳自己都不怎么明白）。这种BBS和现在的BBS完全不是一个概念，但是BBS这个词却来自于当时的这个形态。这种沟通方式非常不方便，也非常贵。 因此用的人很少，基本都是专业人士和各个高校，这等于限制购买电脑后只能单机使用。由于电脑根本是单机使用，因此但凡要增加功能就必须买盗版盘。要 WPS，盗拷(最早还没有盗版光盘呢)，要看电影，买盘。于是电脑的主要形态被限制到了预设的几个功能上，而不是根据客户的想法随意定制。而这几个功能中 呢，最常用和实用的就是文书处理。96年的时候，最火的就是UCDOS和WPS。凡讲电脑入门如果没有这两个那就是落伍，是怪胎。而在98年的时候，接连 发生了几个事情，因此才酝酿出了风起云涌的互联网大潮。
首先，98年前后，Win95/98在中国大量普及。在此之前，由于受到文字，版权，习惯，配置等诸多限制，大家还是停留在dos6.0的年代不肯出来。 Win9X系列的普及(当然，主要是盗版普及)对电脑降价和普及起了不可磨灭的作用。也许有人听不懂了，软件的普及能降低硬件的价格？话是这么说的。从总 体来说，DOS6.0的入门难度高，高到要维持一个能够运转的DOS系统，就非要经过专业的，正二八经的学习不可。而Win9X的入门和维护难度基本是 零，你就算不明白，也不阻碍你的使用。因此，有大量的普通用户可以使用电脑，电脑的组装量就大了。更具有决定作用的是，由于DOS的入门难度高，因此很多 客户必须购买专门的电脑公司的电脑系统，即所谓的“品牌机”。使用品牌机的最主要理由是需要电脑公司的服务，来维护电脑系统。而Win95安装维护简单， 任何一个人都可以拿着盘装套系统出来。除去偶发的硬件故障，着实没必要非买品牌机不可。于是，当时品牌机对市场的垄断被打破了。大量的小作坊稍微经过培 训，就可以拿着一堆电脑配件组装起一台电脑来。教客户几分钟，他就可以自行安装起Win9X和Office。而后机器如果出现故障，顾客也可以很轻松的重 装。于是大量的小作坊相互竞争，使得电脑的价格直线下滑。我记得96年时主流电脑的价格在2W上下，98年时只有1W上下，01年时更是只有5000。注 意这里比较的是主流电脑的价格，不是同等硬件。里面固然有着摩尔定理的作用，也相当的得益于Win9X的普及。
而此时，更具标志性的事件是国内大多主要城市，都开始了电话拨号上网的业务。虽说中国从89年就开始接入互联网了，然而真正标志着普通民众上网的事件还是 98年前后的163/169电话拨号上网业务。大家可以想像一下，要是没有网络了，你的电脑还能干什么？怕是只剩下看书(还得买盘)，听歌(也是买盘)， 放片而已了吧？我们今天所用的大多数功能，都是以网络为基础，或者要基于网络获取数据的。电话拨号业务一开，等于就开启了一扇通向无限可能的大门。虽然当 时的价格大约是1.6元/小时，而速度一般只有5K/s。这种流量下基本无法承载什么复杂业务，多数都是基于文字的业务。例如QQ，当时肯定只能做文字， 不能做视频聊天。又例如BBS，当时也是以文字为主，图片点缀一下。要是哪个搞不清楚放一堆图片上去，站长到还没头痛呢，用户先受不了了。
现在我们看到，98年的时候，互联网具备了大量的潜在用户，也打开了通向无限可能的大门。可谓是万事俱备，只欠东风。而东风从哪里来呢？所谓的东风，就是 亚洲金融风暴和2000年互联网泡沫中的时间差。在98年的时候，东南亚发生了非常严重的金融风暴，相信大多数人都有所耳闻。而98年的时候，正是互联网 飞速发展的时候。2000年的互联网泡沫还没有提前到来，投资回报比高到吓人。在金融风暴中损失惨重无处容身的热钱，碰到了一个飞速发展回报极高的产业， 就如同火柴碰到了汽油一般，瞬间就无可阻挡的燃烧起来。而引爆点，就是互联网门户和娱乐。腾讯，百度，携程等互联网公司，都在那个时候纷纷发展起来。金融 环境的影响究竟有多大呢？我们不妨想像一下，如果是2000年的时候，用户和网络才准备好。这时金融相对稳定，金融风暴中跑来跑去的热钱也该投资的投资， 走的差不多了。而互联网公司普遍表现不好，美国各大网络公司一片惨红。这时候，中国的各个网络公司才组建起来，他们还能顺利的拿到融资，完成由小到大的华 丽转身么？
当然，当年之所以成为互联网的黄金年代，还有其他的很多因素。但是就贝壳的浅见来说，当时互联网的成功，和广大的新增客户群，新出现的网络，还有相对良好 的投资环境是分不开的。现在，中国的网民已经发展到了极限，12亿人口4亿网民，即使还有发展空间，也是屈指可数的事情。不像我们的前任，永远会出现新的 客户(这里顺便提一下，实际上互联网大量出现用户的时间大约是在05-06年前后，宽带包月普及的时候)。我们的投资环境呢？不利，很不利。美国经济刚刚 打了个喷嚏，现在全世界人民都在重感冒，没空搭理中国一堆互联网公司的脑残想法。那么，我们的下一个黄金年代在那里？
接下来，我们有几件事情会引发互联网的大革命，不过贝壳和大家一样头痛的是，我们谁都不知道这些事情会什么时候到来，是否会一同到来。
首先，是真正的3G网络。现在所谓的3G网络都是花架子，没有什么实际意义的，3G最大的优势在于低廉的随时在线成本。当前，所有客户上网都是通过电脑拨号，而电脑是需要了再开机的。但是我们的很多应用需要客户随时在线，例如IM类业务，对客户在线就有严格要求，微博客也有类似问题。为了能让用户随时在线，就必须让客户在手机上使用电脑的应用。问题是，如果没有一个廉价的网络接入，哪个客户愿意付出N高的网络费用就为了用个IM？那还不如打电话。现在的 3G曾有个笑话，什么叫3G？一秒3元，所以叫3G。这个价格至少要下降到一个月100-200的范围内(流量不限制，甚至还要在其中包括有线的接入费用和电话费)，才有大量用户愿意入网。更好的接入模式是两台手机一根ADSL线路，包含电话/手机/电视/网络/3G在内的所有通信业务，总价200上下。 不过以目前的垄断形式而言，大家可以口水收起来了。
其次，是全球经济复苏。要是大家都没钱，是没人愿意投资电脑产业的，也没人愿意用。
而后是取消互联网备案和审查制度这滩狗屎，建立一个真正公平公正的法律环境。众所周知，互联网属于服务业，而服务业对于环境的公正性要求是最高的。即使经济复苏，也绝对不会有一个投资者愿意把钱投资到一个政策整天变化，商业运作随时为政策让路的地方。以饭否为例，如果某个投资者投资了，而后饭否因为种种不 明原因关闭了，那么投资者的损失谁来负责？对于这类问题，必须有个公正的，公平的政策，提前说明。如果投资违背了政策，那么损失没什么好多说的。如果没有 违背政策，那就不应该让投资者受到损失。而不是暧昧不清的制订一个根本实行不了的政策，然后看谁不顺眼就关谁，对其他人的违法不闻不问。只要这个大山不真 正的走开，中国的互联网就不可能真正的走入下一个黄金时代。</description>
    </item>
    
    <item>
      <title>组合翻墙方案</title>
      <link>//blog.shell909090.org/blog/archives/74/</link>
      <pubDate>Wed, 29 Jul 2009 11:44:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/74/</guid>
      <description>1.墙的存在和原理简述 1.1.墙的存在 在您访问某些网站的时候，经常会发现无法访问。通常来说，这是服务器挂了。但是现在，越来越多正常的服务器出现了无法访问的情况。这些服务器中有一些是因为色情和暴力问题，但是更多则是政治层面的因素，例如google和twitter。对于用户来说，可能不关心政治层面的因素。但是政治自然的关心了你，所以我们需要找一种方法，让我们依然能够使用网络上一些很重要的服务。例如gmail(本文即是在gmail中写成的)。本节中，我将简述国家网络防护工程(简称GFW, Great FireWall)的工作原理，并在下一节给出一些比较成熟的翻墙方案。 1.2.DNS污染 我们通过DNS(Domain Name Service)将域名转换为IP地址。通常而言，我们不会怀疑ISP的DNS服务器的可信性。然而在某些地方，DNS服务器被用来欺骗客户端，达到屏蔽的作用。例如，在上海的某些地方，fanfou.com曾经被指向127.0.0.1。如果机器按照这个地址访问，那么肯定无法获得预想的数据。 这个方案如果控制不当，可能造成全球性的后果。曾经有报道，伊朗将youtube的域名指向了自己的一台蜜罐(Honeypot)服务器。但是由于配置不良，因此DNS错误被扩散到了伊朗以外，导致全世界的youtube访问都被定向到了这台蜜罐。整个过程造成了youtube6小时以上的服务中断。 1.3.DNS替换欺骗 由于DNS污染会被下面2.1节的方法绕过，因此在某些地方针对OpenDNS的数据被进行了替换欺骗。UDP53端口的查询数据包被拦截和替换，其造成的结果就是即使使用了OpenDNS，返回结果和电信服务器的结果仍然一致。 1.4.IP禁止 对于某些IP，防护系统直接禁止了该IP的访问。这种手法一般见于早期，由于经常导致误杀和株连，同时对最普通的proxy都无效，因此现在已经不常使用。 1.5.关键词过滤 防护工程在中国网络的核心路由器上，都放置了一些探头。具体的方法为配置一个核心路由器的镜像端口，将所有通讯数据全部向端口转发一份。该端口指向一套深度包检测集群。如果数据没有异常，则不对通讯进行干扰。如果数据异常，则发送RST包拦截通讯。同时记录双方IP，拦截其后5分钟内的所有TCP SYN包。 这种方法的优势在于，无论多复杂的网络拓扑结构。只要能够开镜像端口，就可以工作。无论多大的规模和多高的流量，只要能添加服务器，就可以支持。同时由于屏蔽效果好，对普通访问的干扰小，因此目前已经成为最主要的屏蔽方式。 这种手法无法针对UDP工作，因为UDP不存在链接断开状态。同时如果双方都屏蔽RST包，则连接不会被中断。然而如果双方都屏蔽RST包，会导致一些主动断线在对方那里变成死连接，因此无法通过拦截RST包来防御。同时，按照当前的测试结果，IPv6的包并没有被拦截。相信这是因为核心路由器支持了IPv6，但包检测集群尚未支持IPv6包检测。 1.6.热点屏蔽 近来发现一种趋势，当某个链接的热度非常高的时候，通向此链接的访问会被屏蔽。由于是接受到RST包，因此不像是服务器超载。这是当前防护系统的新方向，尚没有更多资料。 2.翻墙方法简述 2.1.OpenDNS DNS污染可以通过修改自己的DNS服务器来屏蔽。以Linux为例，当前你的DNS服务器配置可以在/etc/resolv.conf中查看。你可以将其替换为OpenDNS的DNS服务器，而非电信的服务器。OpenDNS是一家商业公司，通过提供DNS服务来收费(不具体解释商业运作)。一般来说，他们的DNS服务还是比较准确的。 通过OpenDNS可以防御DNS污染，但是无法防御其余方式，而且会被DNS替换所干扰。因此建议一般作为常规网络配置，而非专门的翻墙方案。 2.2.hosts hosts的目地和OpenDNS一致，但可以防御DNS替换。其原理是通过将正确的DNS结果写入/etc/hosts文件，在绕过网络解析过程。从而避免DNS出错。 该方式无法防御1.4-1.6的屏蔽。 2.3.proxy和变形 针对DNS欺骗和IIP屏蔽，我们可以通过指定一个国外的代理来访问。由于DNS解析在代理商进行，因此一般不会被欺骗。由于不直接访问IP，因此IP屏蔽也失效。 一般而言，该方法无法屏蔽1.5的屏蔽，但是有一些变形产品(例如Firefox的gladder插件)，通过变形URL请求，使用特殊代理的方式对1.5进行了部分绕过。但此种方式不保证100%成功。 2.4.ssh -D ssh是一种安全的远程命令行工具，具有很多端口转发选项。其中有一种动态端口转发选项，在服务器端开启后，使得ssh可以被作为一个socks5代理服务器使用。 此种方式需要有一个墙外的ssh服务器，一般可以购买墙外的空间，他们会附送一个。此种方式可以绕过全部屏蔽方式，但是由于ssh本身的稳定性，因此经常有掉线的问题。而且有的服务器关闭了动态性转发选项，或者对长期连入的ssh连接进行断线处理。同时，由于很多人接入同一个IP进行翻墙，因此很多网站(例如google)会认为你的访问不可信。 2.5.tor tor是一种分布式代理工具，可以在隐蔽源和目标的情况下访问服务器。该方法可以绕过所有屏蔽方式，但是通常而言，该方法的访问会比较慢。同时也存在访问不可信的问题。 2.6.gae gae是google的个人引擎服务，一般由很多服务器构成，而这些服务器一般位于国外。有人针对这个特点，制作了特殊的python程序，能够将客户的访问转换成特殊的加密包，在服务器上访问目标服务器。因此可以被视为一种特殊的代理协议。该方法可以绕过所有屏蔽方式，但是由于众所周知的原因，gae服务器本身有的时候也会被屏蔽，导致该方法无法工作。而且由于google本身的屏蔽，该方式对于某些网站也是无法访问的。该方式也存在访问不可信的问题。 2.7.vpn vpn是唯一一种能够快速有效，一劳永逸的翻墙方式。使用vpn后，等同于你的机器拉了根线接在国外的网络端口上。因此该方法可以穿越所有屏蔽方式，同时很少有访问不可信的问题。唯一的问题是vpn，尤其是快速的vpn很难得，而且通常很贵。 3.组合翻墙 3.1.问题 纵观全部翻墙方式，每种方式都有一定的缺陷。2.1-2.3并不总有效，ssh不稳定，tor慢，gae看运气，vpn又贵。同时，我们还要借助终端的客户端组件(foxyproxy之类)来区分被屏蔽的网站和普通网站(使得普通网站的访问不使用特殊的方式)。 3.2.目标 本文试图通过某种方法，同时使用2.4-2.6的一种或多种方法。达到访问透明，使用稳定，速度尽量快，流量尽量小的目标。 3.3.架构 我们使用squid和haproxy进行代理调度，达到上述目标。squid是一种老牌的开源代理服务器，其特征是会对代理内容进行缓存，减小访问流量。同时，可以将请求转发到其他代理上。从而会自动检测和管理多种代理服务器。haproxy是一种基于tcp和http的反向代理程序，在此我们需要使用它的TCP代理能力，将多种socks5代理集成为一个。 基本架构图如下： / -&amp;gt; tor web brower -&amp;gt; squid -&amp;gt; privoxy -&amp;gt; haproxy -&amp;gt; sshtunnel -&amp;gt; gappproxy 3.4.优势 相对单层代理，组合方式具有多个优势。 使用squid分离访问线路，并缓存访问数据。对大规模密集访问，可以有效的减小流量。而且对除Firefox外的浏览器，可以根据其访问范围控制代理线路，进一步减小代理流量。(Firefox可以使用AutoProxy或FoxyProxy) 使用haproxy反向代理了socks5服务，因此可以并行使用多个sshtunnel的带宽。同时自动检测这些ssh是否可用，保证了访问的连续，同时也非常容易添加和减少代理。 3.5.劣势 本方法有一个比较明显的问题，即squid无法直接使用socks5代理，因此需要通过privoxy进行转换和保密。但是此时squid只测试privoxy的存活，而不理会socks5的存活。因此当haproxy的后端全部失效的时候，squid仍旧会认为privoxy有效，进而导致出现privoxy的错误页面。 同时，由于haproxy只检测ssh端口是否相应。因此当远程服务器几乎不响应代理请求时，haproxy并不会将这一代理移除出列表。从而导致某些请求需要非常长的时间完成。 3.</description>
    </item>
    
    <item>
      <title>地铁二号线今天大规模停运&amp;生日</title>
      <link>//blog.shell909090.org/blog/archives/73/</link>
      <pubDate>Wed, 15 Jul 2009 11:20:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/73/</guid>
      <description>今天早上，贝壳沿着地铁四号线到世纪大道准备换乘二号线的时候，发现车站内有大量人员滞留。六号线卷门不开，二号线站台堆满人。地铁方面广播，二号线故障，暂时停开，恢复时间不定。因此贝壳无奈，只好上地面去方法。
贝壳先是在世纪大道上找出租，不过大家可以想象，这是徒劳的。而后去公交站，发现——我实在不想经历那种密度。最后，走到杨高路，和几个人合打了一部车，从杨高路走龙阳路到张江。结果，又很无奈的发现，龙阳路堵车。最后，花了50多，在11点的时候总算到了张江。
真是良好的生日的开端，希望我下一年不要这么倒霉。电脑诸神啊，赐我一个女友吧。不会C++也好，不用Linux也行，只要她别用Windows，而且还不怎么会用。Enter。</description>
    </item>
    
    <item>
      <title>游婺源</title>
      <link>//blog.shell909090.org/blog/archives/72/</link>
      <pubDate>Tue, 14 Jul 2009 15:06:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/72/</guid>
      <description>写这么多年blog，每次都当回事情，实在写的太累了。还是简单一点，不要费劲了，想到哪里，写到哪里吧。
简单来说，有朋友家在婺源，我过去玩了一次。地方不错，好山好水，绿茶不错。记得冬天去，夏天昆虫多，草也多。一个朋友给叮肿了一圈，另一个活像被鞭打过。而且太阳太大，一个成了活包公，贝壳回来褪了层皮。
另外，如果当地人告诉你，不远，不可怕，很好玩，不要随便相信。他们倒是不会害你，只是他们的标准和你的不大一样。超过60度的斜坡，连爬一个多小时，只是一个稍微有点累的常规路途而已。因此，如果你没有一定的体力和运动上的自信，不要随便和当地人去走小道。小道这东西有两个坏处，一个是走到一半不能回头，另外一个就是随时可能找不着或者被修路修掉滑坡断掉。
好吧，有意的话联系我。</description>
    </item>
    
    <item>
      <title>ssh翻墙服务</title>
      <link>//blog.shell909090.org/blog/archives/71/</link>
      <pubDate>Tue, 07 Jul 2009 22:48:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/71/</guid>
      <description>不多说了，上脚本。
-----------/etc/init.d/sshtunnel------------ #!/bin/bash PATH=/bin:/sbin:/usr/bin:/usr/sbin CONF=&amp;quot;/etc/default/sshtunnel&amp;quot; source $CONF if ! [ -x /usr/bin/ssh ]; then exit 0 fi start () { echo -n &amp;quot;Starting tunnel..&amp;quot; ssh -CNq -D &amp;quot;$PROXYPORT&amp;quot; &amp;quot;$USERNAME@$SSHHOST&amp;quot; -p $SSHPORT -o ServerAliveInterval=30 &amp;amp; echo &amp;quot;done.&amp;quot; } stop () { echo -n &amp;quot;Stopping tunnel..&amp;quot; PID=$(netstat -nlp -4 | grep &amp;quot;:$PROXYPORT&amp;quot;) PID=$(echo $PID | sed &amp;quot;s/.*LISTENs*(.*)/1/&amp;quot; | cut -f1 -d/) kill -9 $PID echo &amp;quot;done.&amp;quot; } case &amp;quot;$1&amp;quot; in start|restart) start ;; stop) stop ;; restart) stop start ;; *) echo &amp;quot;Usage: $0 {start|stop|restart|clear}&amp;quot; exit 1 ;; esac exit 0 -----------------end of file------------------ ---------/etc/default/sshtunnel---------- PROXYPORT=7777 USERNAME=abc SSHHOST=abc SSHPORT=22 -----------------end of file------------------ 首先准备一个远程服务器，获得域名端口，用户名密码。而后将上述脚本放置于指定位置，修改/etc/default/sshtunnel的值，即完成配置。但是上述脚本并没有解决自动登录问题，因此，请生成一个没有密码的密钥，将公钥导入远程服务器。</description>
    </item>
    
    <item>
      <title>系统</title>
      <link>//blog.shell909090.org/blog/archives/70/</link>
      <pubDate>Tue, 30 Jun 2009 20:15:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/70/</guid>
      <description>下文转载自solidot。
曹筠武因《系统》获2009年骑士国际新闻奖 南方周末记者曹筠武凭《系统》一文获2009年骑士国际新闻奖（译言）。得奖者全球只有3人，另两位分别是一位民主刚果记者和一位《纽约客》记者。 曹在《南方周末》2007年12月20日刊发长篇特稿《系统》，详尽深入地描述了发生在网络游戏“征途”中令人触目惊心的故事。它需要玩家投入真实的金钱以求在弱肉强食中生存。他注册了游戏账号，并结识了一些老玩家，将他们作为自己深入报道的一部分。 ICFJ主席Joyce Barnathan表示：“今年我们的获奖者都敢于大胆地讲真话，不管多危险，都不会向困难的题材低头。他们报道了别人避而远之的重要新闻。” 以下是一点背景说明。
《南方周末》之《系统》与中国媒体之“系统” 2007/12/23 | 作者：maomy | 类别：听闻, 时代, 表达自由
《南方周末》2007年12月20日刊发长篇特稿《系统》（点此链接查看我转载的全文）， 详尽深入地描述了发生在网络游戏“征途”中令人触目惊心的故事。这也是我近年来读到的最好、最注重细节、最引人入胜的网游报道——不是简单枯燥的道德说 教，不是大而化之地泛泛谴责，更不是公关软文的阿谀吹捧。读过之后，你很难不陷入思考：数百万人沉浸的虚拟与现实交汇的地带，究竟是什么文化氛围，人们的 行为和心理有着怎样的模式，这一切又会对所谓“现实生活”发生什么影响？极权、意识操纵、欲望，对于这些统治虚拟和现实的东西，在史玉柱的“巨人网络”美 国上市、众多媒体交相赞颂又一个财富神话的此刻，我们还能被允许发出什么别样的声音？ 我读完全文，感觉首先是“可怕”二字，尤其是文中描绘的玩家的集体抗议，被系统屏蔽，甚至因此被投入虚拟的“古拉格群岛”的那一幕。据称主要作者曹 筠武自己就是80后的游戏玩家，难怪有此大作！这不是一篇传统意义上“平衡中立”的新闻，是一篇带有立场却尽量以事实说话的特写，甚至略有煽情，但我喜欢 这种有节制的激情。 如果说曹筠武向我们呈现的是在这款“网游巨作”中“系统”的可怕，那么这篇报道本身所遭遇的，却让人为中国媒体之“系统”而心寒。或者，可怕的究竟是“系统”，还是隐藏在“系统”背后的操纵者、利益群体或权力精英？ 我凑巧在常去的BBS的某版面读到被转载的《系统》一文，但却吃惊地发现，这篇文章在网络上似乎正在被抹去。在《南方周末》自己的网站上，2007年12月20日这天的页面里，你不但找不到这篇文章的html版本，甚至连报纸提供的PDF版面中，也“凑巧”缺少了本文所在的两个版面。截图如下： {width=&amp;ldquo;500&amp;rdquo; height=&amp;ldquo;287&amp;rdquo;} 而就在几天以前，《南方周末》曾在[财富]栏目刊登一篇对史玉柱的报道，挟“巨人网络”上市之余威，极尽曲笔赞美之能事。这篇文章当然安然无恙地存在于网站当天的页面上，html和pdf俱全（截图如下），而且用搜索引擎查询，结果也是铺天盖地。不知道在专业人士眼里，这算不算一篇成功的公关软文枪稿？ {width=&amp;ldquo;500&amp;rdquo; height=&amp;ldquo;291&amp;rdquo;} 中国知名的游戏论坛17173中也有人提到了《系统》一文的消失。 为何如此？几乎毫无疑问，是那只“看不见的巨手”在操纵，在公关，在“和谐”。有明白人关军点出，而在他看来，这篇文章的写作与刊发，已经是“智慧与勇气”的体现：
“毫无疑问，史玉柱同学看了这样的文章会不高兴。他的公司刚刚与《南方周末》搞了一个合作，叫“奥运征途”，赞助该报记者 寻访历届奥运会举办城市，一路上不是美金就是欧元，花销不菲。史同学不高兴的后果是什么呢，以我的小人之心揣度之，就是挥动大刀，咔嚓一声“秒杀”这个合 作。”
OK，我一直认为，从向权力下跪到向金钱下跪，对市场化商业化进程中的中国媒体来说，那是易如反掌、顺其自然的转化。新闻审查和网络过滤对任何一个 有点文化的中国成年人来说，都绝对不是新闻；但是当金钱如此轻易地操纵一家报纸（而且是号称中国很牛掰很有风骨的那家）、更多家网站论坛的时候，当“巨人 ”式“脑白金”营销无往不利的时候，我们是不是都应该想一想，责任在所谓的“系统”，还是“系统”后面的人，还是也包括我们自己？ 有鉴于此，不得不又一次打破网络常规，不是给出全文链接并引用，而是全文转载——因为你不知道什么时候被你引用的链接就从网上消失了，而我的全文转载至少还可以一直保留在我的独立blog上，并通过rss订阅来到并不算多的500多个读者面前。 南方周末：“系统” 全文链接：http://ohmymedia.com/2007/12/23/736/
看来这个内容还不容易保留，我干脆全文转载。
南方周末：《系统》 来源: 南方周末 作者: 曹筠武　张春蔚　王轶庶 ■编者按： 在一款同时在线人数超过百万、全部玩家加起来可以组成一个超级城市的网络游戏中，它的游戏精神是指向乐趣，还是指向权力和金钱？它的社会规则是新世 界的开放自由，还是率土之滨莫非王臣？这不只是对某一款游戏的追问，甚至也不只是对韩式网游的价值观的追问，而是对人与游戏、人与人的关系的追问。虚拟世 界是现实世界的一部分，也有着人们必须捍卫的准则。 在当下中国最火的一款网络游戏中，玩家们遭遇到一个“系统”，它正在施行一种充满诱惑力的统治。这个“系统”隐匿无踪，却无处不在。它是一位虚拟却 真实的垄断者。“如果没有我的允许，这个国家的一片叶子也不能动。”这是智利前独裁者皮诺切特的声音，悄然回响在这个虚拟世界之中。 白天，27岁的吕洋是成都一家医院的B超检查师。 晚上，她是一个国王，“楚国”的国王——玩家们更乐意按游戏里的名字尊称她为“女王”。在这个虚拟王国中，“女王”管理着数千臣民，他们都是她忠诚的战士。 在一款名叫《征途》的网络游戏中冲杀了半年多之后，吕洋自信看清了这样一个道理：尽管这款游戏自我标榜以古代侠客传统为背景，实际上钱才是在这个虚拟世界中行走江湖最关键的因素。 吕洋受过良好的专业教育，丈夫是生意人，资产殷实。钱对她来说从来不是问题，但她仍然忿忿不平地把这款游戏中一些风头正健的人称为“人民币玩家”。虽然在游戏中投入了数万元，但她仍然屡战屡败，原因就在于有人比她更愿意花钱，也花了多得多的钱。 正如《征途》的创造者史玉柱所言，这的确是一款适合有钱人的游戏。在这个世界里，欺凌他人的威力和合法的伤害权都标价出售。 尽管一切都是虚拟的，吕洋却曾经坚信她找到了一条通向光荣与梦想的金光大道。不过随着人民币的不断加速投入，和很多人一样，吕洋发现，金钱铸就的，其实是通往奴役之路。 战争即将爆发 所有人都必须是“人民币玩家”——和平受到鄙视，战争受到推崇——被杀死者得到的只有耻辱 坐在常去的一家网吧的VIP包房里，吕洋显得兴奋而又忧心忡忡，她面前的19英寸液晶宽屏上，黄色的粗体字反复闪动：“国战将在晚上8点15分开始”。她还有两个小时，对她手下的战士们做最后的动员和部署。 将要攻打楚国的是游戏中的头号强国魏国。魏国拥有上万名玩家，更为关键的是，魏国的支柱，“王者家族”成员们，个个都是令人敬畏的英雄，他们的等级 遥遥领先于一般人，装备着成套的最为昂贵和罕有的神圣铠甲和武器。在“世界英雄排行榜”上，他们长期牢牢地占据着前五十名中最靠前的位置。 他们拥有恐怖的杀伤力，人人以一当百。即使吕洋这个“女王”和他们对垒，如果战术采取不当，也存在被“秒杀”的危险。所谓秒杀，就是在几秒钟之内， 在意图还击之前，就被一招致命。吕洋的丈夫并不玩游戏，但他也会对此开开玩笑：“就像武侠小说里写的，如果刀够快，你可以听见自己的血从脖子里喷出来的声 音。”“女王”吕洋对他们最为忌惮，同时又略带鄙夷。“他们就是人民币玩家嘛。”她说。 实际上，只要进了这个虚拟的小世界，所有人都必须是“人民币玩家”，区别只在于你愿意花多少而已。 和以往的所有网络游戏不同，《征途》并不计时收费。简单地填写一份网上表格，就可以注册账号。只需要起个名字，选择性别、国家，一个虚拟身份就此诞 生，光荣而艰难的征服之路摆在了你的面前。根据游戏的主线故事背景，你会惊奇地发现其实你是皇族之后，由于战乱被弃于荒野，现在你长大了，知道了自己高贵 的血统，接下来该做的就是练一身好武艺，奋起于草莽之间，闻达于庙堂之上。建立自己的国家甚至取得统治世界的皇位以恢复祖先的荣光，则是你的终极目标。 故事很合中国人的口味，惟一令人感到困扰的是：热血沸腾之后，你发现现实和理想的差距原来是那么大。一个新诞生的身份是1级；而王国里最英勇的英雄 们能练到“转生170级”：练满普通人的168级之后，他们又获得新的不朽之身，并再次练到了170级。简单地说，那就是人和神的差距。英雄们手持 “完美的神圣武器”，浑身旋绕着代表高贵的紫色光晕；而你却两手空空，甚至全身上下只有一条遮羞的短裤。 现在，你可以购买点卡，持续地把人民币注入游戏中的账户，以便快速升级，购买各种名贵材料打造装备；你也可以不花钱，如果什么都不做，只是呆在游戏 里的话，系统不会向你收取一分钱。但很快你会发现，你连荒地里的一只蚊子都打不过，你的活动空间甚至仅限于出生地，一个叫“清源村”的小村子，更为广阔的 世界则是为英雄们准备的。当然，最让你沮丧的还在于，贵为皇族的你，却永远生活在被其他玩家“秒杀”的巨大阴影之中。 显然，吕洋走了一条真金白银铺就的英雄之路。她如今是“转生145级”，历经艰险戴上了王冠，她的坐骑是一条浑身闪着火光的龙。但英雄亦有英雄的烦恼，她的王国正面临严峻的挑战。 吕洋自认为是一个“和平主义者”，她把女性的温婉带到了对国家的治理之中。“女王”很少主动攻击别国，更喜欢带着臣民们消灭怪物，或者经营骆驼商队。但这并不能避免受到攻击。 “国战都是系统安排的，”吕洋解释说，“国王只需要提交申请，系统就会自动安排好战争爆发的时间。” 系统喜欢“国战”。这个虚拟世界里，“和平”受到鄙视，战争受到推崇。战胜国可以自动获得战败国国库里的金钱和物资，国家排名由“国战”胜利次数决 定，强国的臣民名字下闪耀着一颗颗星星，那代表着每一次辉煌的战胜。当然这并不是最重要的，对于战争中的人来说，冲入别国的土地，肆意砍杀每一个胆敢与之 抗衡的人，无疑是释放内心深处原始冲动的绝佳办法。 系统准确地捕捉着人性的弱点，召唤着玩家们在违背普世价值的虚拟世界中放纵自己的邪恶。它赋予战争中的人肆意杀戮的权力，给予杀人者加倍的经验值奖励；系统也会标明你的斩首纪录，那一串串数字就像印第安战士割下的头皮代表着无上的荣光，而被杀死者得到的只有耻辱。 吕洋打电话，上QQ，或者在游戏中直接交谈，她自知实力对比悬殊，因此通知手下的战士们集中力量，守住王城的一角。她的声音因紧张而略带颤抖，尽管对现实中的她来说无论胜败都毫发无伤，但在游戏里，她知道那意味着生存还是毁灭。 离战争爆发，还有两个小时。 国王死了 推销员来了——冒险家乐园——都在“系统”的支配之下——小角色杀死了国王 在开始“征途”之前，吕洋玩的是另一款游戏《传奇》。她玩得并不好，仅仅当作一种周末的消遣。《传奇》计时收费，玩家购买在线时间用来升级和打造装 备，所有的事情都费时费力。“比如你要打一个终极怪物，”吕洋说，“要跑很远的路，在迷宫里面转来转去，杀掉无数的小怪，可能耗一个晚上，你才跑到大怪的 面前。”最让人崩溃的是，当历尽艰辛终于站到大怪面前，一不小心却被秒杀了！那么，从头开始跑路吧。 吕洋可能从未得知，在她晕头转向地跑路时，一个叫“送礼只送脑白金”的玩家也在这款游戏中闯荡，他从来不耐烦那些烦琐的升级步骤，而是直接购买高级 别账号；他成千上万地花钱，砸下最顶级的装备。以钱铺路，他在最短的时间内得到了最强大的威力。在这款典型的韩式“泡菜”游戏里，他试验出了自己独辟蹊径 的玩法。这位玩家就是后来《征途》的老板史玉柱。 2007年年中的一天，就在吕洋常去的这家网吧，一个推销员站到了正在“跑路”的吕洋面前。他衣着得体，面带微笑，用充满诱惑力的词汇介绍了一款名叫《征途》的新游戏。“绝对不用走迷宫，我们要的就是爽快。”吕洋记得他这样保证。 吕洋就此和朋友们“踏上征途”。她的这些朋友们要么是医院的同事，要么是丈夫生意上的伙伴，空闲不多，但钱不少。他们很快发现，《征途》的确是一款爽快感十足的游戏，简直就是为他们这样的人设计的。 要找系统角色接受任务，不用费力去找，点F键，下拉菜单里角色名字一一罗列，就像网络上的超链接，双击名字，就自动找到面前；要去某个地方，不用走迷宫，点开地图，找到地名，鼠标左键单击，一会儿就到了。 很快吕洋就离开了“清源村”，热闹的“凤凰城”和辉煌壮丽的“王城”才是她的舞台。这位后起之秀被吸纳进了“楚国”最有威望的家族“桃花源”。单打 独斗是不现实的，拜入名门正派才是出头之道，这里就如同武侠小说描写的江湖；而家族与家族联合可以组成帮派，帮派各自有各自的势力范围，在达成妥协之后又 互相配合支撑起一个国家。 游戏里的大部分系统角色，比如杂货店老板或是锻造铺师傅，都可以被帮会控制，此后他们会持续贡献“保护费”。系统鼓励帮会争夺控制权，谁杀死竞争对手，谁就能接手保护费。帮主们因此热衷于抢夺街区和店铺。这样在吕洋看来，她的置身之处，又像是1920年代的上海滩。 这里的确像那个“冒险家乐园”。低级别的玩家甚至也可以挣钱！完成一些特定的任务，比如护镖，可以得到一定数量的“银两”；达到一定级别和保证一定在线时间后，系统甚至会给玩家“发工资”；还有各式各样的“奖励”、“返还”。 “其实都是些小钱，”吕洋说，“相比花掉的钱简直没法比。”但由此带来的成就感和满足感是无法比拟的，你能想象在砍翻敌人的同时还能挣“银子”么？“想得到更高级的奖励么？”吕洋说，“那就花更多的钱呗。” 时常有“外国人”冒险进入楚国，他们可能是魏国人，也可能是宋国人，或者是其他9个国家中任何一国人，但不管是哪国，一旦踏入楚国地界，他们的名字 就显示为红色，这个颜色意味着：敌人——应当杀死的人。每杀死一个这样的人，系统就会在“护国英雄排行榜”里为你加上光荣的一分。 他们并非是闲逛者，而是根据系统分配的指令而来，他们必须进入敌国完成诸如“刺探情报”或者“抢夺太庙资源”等等任务。而同样根据系统赋予的职责，家族和帮派此时的任务就是杀死他们。 那时吕洋还是一个小角色，她正在砍杀一头犀牛，屏幕上出现一条指令，帮主撒下了帮主令，要求帮众前往杀敌。点击“是”之后，吕洋被传送到王城边境附近，众人正把敌人围在当中奋力砍杀。 帮主“狼烟”是当然的主力，他是一个“武士”，近战肉搏是他的特长，他的“无双剑”能造成惊人的杀伤。在炫目的刀光闪耀间隙，吕洋突然发现敌人的坐骑是一只麒麟，这意味着他是一个国王，只有国王才拥有这种神兽！ 吕洋是一个“法师”，她专修冰系法术，可以从远处以冰雪为武器。这是她参加的第一次激战，她站到一个安全的地方，将霜冻从空中撒向敌人。麒麟居然哀号倒下，国王死了！吕洋幸运地完成了最后一击。 屏幕上黄色的粗体字夸张地跳了出来：“天哪！吴国的国王居然被楚国的无名小辈女王杀死了！”吕洋在电脑前禁不住手舞足蹈，她杀死了国王，一个小角色杀死了国王！她双脚猛地一蹬，电脑黑屏了——她兴奋得把电源插头踢掉了。 往后几天，吕洋都有些“神神叨叨”的。游戏里“全世界”都知道她杀死了国王，朋友们有些羡慕地向她祝贺。即使在医院上班，吕洋也在办公室的电脑上下载了游戏，她就是喜欢挂在游戏里，反复地看那条早就过时的消息：“天哪！吴国的国王居然被楚国的无名小辈女王杀死了！” 有时候严厉的院长从办公室经过，威严地审视医生们的工作，吕洋只能把游戏界面最小化。她会悄悄地跟同事炫耀：“牛啥嘛，他要是耍游戏，我一招就把他砍翻！”院长其实并不坏，但吕洋觉得他“缺乏对女性应该有的尊重”。“在游戏里，女人也可以统治男人。”她宣称。 国王万岁 核裂变一样蔓延的仇恨——好的装备都意味着金钱——总有无数的人在疯狂比拼——“国王万岁！” 但“女王”其实并不像想象中一样“牛”，几天之后，就在王城外，一个敌人逼近，他骑着鬃毛飞散的烈马，威严得像天上的神，他只问了一句话：“你就是那个女王啊？”一个巨大的火球从天上砸下，落单的“女王”还没来得及答话，被“秒杀”了。 吕洋目瞪口呆，短暂的惊愕之后她脑子里只有一个想法，她要升级，要得到最好的装备，她要当真正的王，她要报仇！ 仇恨是这个世界中最强大的动力。“秒杀”吕洋的玩家，立刻被系统自动排入她的仇人名单，时时提醒“女王”报仇雪恨。“仇人”是这里最常见的社会关系，仇恨关系同样存在于家族、帮会和国家之间。如同核裂变一样蔓延的冤冤相报，在这里是受到鼓励和颂扬的永恒主题。 她找到“代练使者”，一个代表系统与玩家做交易的虚拟角色，他就站在王城大道边上，答话谦卑而热情，乐意为有钱人服务。吕洋向“使者”支付人民币购买经验值，“使者”则让她迅速升级，从人变成了神。吕洋觉得这么做很值得，在这上面，她“只不过花了千把块钱”。 但是，杀伤力和防护力是由装备决定的，级别只是佩戴相应等级装备的必须条件。就像金庸的小说，内力的修炼是必须的，但一把玄铁剑却可以让杨过无敌于 天下。游戏中按照等级不同划分出了20等装备，以法师职业为例，武器由最初的柳木杖到最为罕有的至尊杖。此外还有铠甲、头盔、腰带、护腕、项链和戒指等 等。 这些好的装备都意味着金钱。和别的网络游戏不同，在这里，打怪和接任务不会掉装备。“我都要最好的，”吕洋说，“你只能去系统商店买材料，再找系统铸造商打造；或者，你只能去赌。” “赌”，就是“开宝箱”。玩家向系统购买钥匙和箱子，很便宜，一块钱一套。用钥匙点击开启，屏幕上一个光芒闪耀的箱子缓缓打开，各种材料或装备如同 赌场大转轮一样排列在箱子里，光圈飞速转动，停下的地方就代表赌到的东西。箱子里经常会有玩家们最希望得到的高级装备，但转动的光圈却往往和它们擦肩而 过。 吕洋如今回忆，最疯狂的时候她就像一个赌场里的赌徒，会在屏幕前大声喊叫自己想要的东西，比如“乌木，乌木”，那是一种高级材料，而最后她往往得到的只是一点少得可怜的经验值。“乌木”，或者那威力强大的“幽冥戒指”，仍然摆在宝箱里，闪着诱惑的光。 这个世界中还存在着一个“开宝箱”排行榜，每天开宝箱最多的人，可以得到一颗罕有的令人倍增威力的“补天神石”。 这个巧妙的设置具有无穷的诱惑力，总有无数人在疯狂比拼开箱数量。吕洋曾一晚上开过上千个箱子，但始终功亏一篑，总有人比她更为执著，她从没拿到过那颗神奇的石头。 各式各样的排行榜随时闪现，世界英雄排行榜——根据级别和装备带来的威力排序；护国英雄排行榜——根据杀死敌国人的数量排序；国家实力排行榜 ——根据国家物资和国战胜负记录排序……就像电视里随时出现的脑白金广告，实时变动的排名对野心勃勃的英雄们高频率轰炸，提醒他们在这个严酷的世界里一刻 也不能放松。 玩家在不懈地开着箱子，他们有时好运地得到一点好东西，绝大部分时间几无所获，但越是没有收获，他们越是迫不及待地打开下一个箱子。他们每点击一下，就代表一块钱，又一块钱……就像一个永不停歇的沙漏，金钱涓滴成河一般随着每一次点击汇成巨流，流向看不见的系统。 吕洋自认为运气还比较好，“平均开1000个箱子，好运的话能有十几次拿到好东西。” 由此吕洋成为了她现在所鄙夷的“人民币玩家”，上万的人民币被迅速而几乎不被察觉地花了出去。在游戏中。“女王”拥有了可怕的威力，她为自己，也为 朋友报仇；她接受请求，为本国的商队护镖；同时她也会和英雄们一起侵入别国。她声誉日隆，跻身英雄之列，在游戏里，她甚至和威猛的帮主“狼烟”喜结连理。 当然，也由于她在现实中是一个那么可爱的姑娘，她被推举为楚国的国王。“国王万岁！”人们向她俯首称臣。那是吕洋在征途中的最高点，也惟有在那转瞬即逝的 一刻，吕洋觉得自己付出的时间和金钱是值得的。 国王累了 “系统”是最为勤奋的——女王觉得自己像驴子——花钱买你生气——快感只在一刹那 吕洋心里清楚，王位是真金白银买来的。一套转生150级左右的顶级装备，平均要开5000个宝箱。按照系统繁复的装备打造设置，要给一套装备镶上 14颗星星，打开“灵魂锁链”，镶嵌补天神石，花费又在5000元左右。随着等级的提高，原有的装备又必须相应替换或升级。平均每升5级，装备就要更新一 套。 这时的“女王”已经成了一位熟练的开箱工，日复一日地开宝箱，升级装备，再淘汰，再升级……“后期主要就干这个事情了，”吕洋回忆，“不更新换代不行，不然国王很快就变菜鸟。” 这样的压力不仅仅来自于游戏内部。在吕洋常去的网吧，甚至洗手间里都贴着征途网络公司的宣传四格漫画。当你洗手的时候，你就能看见一个漫画小人，在尖刻地嘲笑那些疏于升级的“懒人”。而招贴画上威风凛凛的英雄在每个网吧的门口注视着你；勤奋的推销员们时常出现在玩家身边。 与媒体上的各种宣传攻势相比照，这些推销员被称为史玉柱的“地面部队”。他们大多是“脑白金”销售旧部，活跃在中国广大的二、三线城镇，对于如何发掘利润，他们有着训练有素的敏感和才能。 系统是吕洋见过的最为勤奋的游戏系统，它更新换代的频率令人应接不暇。“要么花钱买安全感；要么省钱，随时被欺负，”吕洋说，“一天不上线，就会觉 得自己又落后了，实在是太累了。”她觉得自己像被胡萝卜吸引着一直向前的驴子，总有更加强大的“威力”在前方向她招手，而漫漫“征途”几无止境。游戏中弥 漫的仇恨也令吕洋越来越厌恶。一些结下了梁子的人民币玩家在每一件小事上都要一争高下。他们反复抢夺对系统角色的控制，互相攻打帮派总舵，没完没了地袭击 对方的商队，在PK竞技场上更是置敌人于死地而后快。甚至宝箱排行榜第一名也是他们争夺的目标。 如果一个玩家开了5000个箱子，另一个就一定要开第5001个。他们把这种疯狂的玩法叫做“花钱买你生气”。 系统不停地自我更新，统御术层出不穷。就连传统的打怪任务，系统也干脆允许家族与家族之间抢夺砍杀boss的权力。身为一国之主，吕洋总是必须身先士卒，如果她稍有懈怠，总有红了眼的部下口出怨言。 这越来越不像吕洋想要的游戏。吕洋觉得这个世界变得愈发丑恶，荣誉被建立在仇恨和贪婪之上。和以前的激动不已相比，如今快感只在疯狂结束后的那一刹那，接下来她会觉得无聊。 在楚国遭遇魏国的挑战之前，“国王”已经开始厌倦了。 地底的火在喷涌 只希望坚持半个小时——和平的气氛在蔓延——“跟你们老板说，不要尽干些挑拨离间的事情。” “国战”在晚上8点15分爆发。吕洋和朋友们，她最得力的几个“武士”，坐在网吧包房内奋起应战。每当大的战役爆发，他们就坐在一个包房内，就和真实的战斗一样，肩并肩便于及时沟通，更利于互相鼓舞。 敌人从王城东门涌入，他们的国王身先士卒，冲入东门后使用“帮主召集令”，这样，他最精锐的英雄们可以被瞬间传送到他的身边。随着旋风，魏国的武士 们从天而降，他们立即被楚国战士重重包围。“女王”知道这是敌人的精锐，尽管城门外大批敌人正在涌入，但这些国王的随从才是最可怕的威胁。 武士们挥动大刀，空气被划裂成一道道光芒，他们拥有最强大的近距攻击能力和防护力，总是冲杀在前；法师们念动咒语，大地裂开，地底的火喷涌而出，天上的风云也化身为凌厉的雷电冰霜；蜂拥而来的召唤兽，来自天界和冥界，呼啸着混战在一起。战场被淹没在超越自然的伟力之中。 半个小时，吕洋只希望坚持半个小时。她从来没奢望胜利，战前魏国人放话10分钟结束战斗，傲慢的挑衅令让人反感，在战前动员里，“女王”向臣民们保证，她一定坚守半个小时。 东门不可抗拒地被攻陷，“女王”转战王城宫殿，宫殿前矗立着“大将军王”塑像，只要他被砍倒，就意味着楚国输掉了战争。楚国的战士们把战车集中起来围住塑像，在猛烈的攻击下，只有坚固的战车能够提供些微保护。 吕洋使用了“防守虎符”，她的臣民可以被全部召集到身边，楚国全国动员，宫殿前的每一级阶梯都成为血海。魏国的英雄们每杀死一个对手，就会有十个或者更多的人把他们围住。战场已经陷入混乱，没有沟通，没有指挥，每个人眼里只有敌人，本能地砍杀，不停地砍杀…… 但吕洋的判断是对的，“人民币”才具有决定性的意义，这是实力之战，系统这个胜利女神青睐祭献更多金钱的一方。当魏国的国王最后砍倒“大将军王”，吕洋看了一眼时间，她坚守了将近40分钟。 这是吕洋输掉的最后一场战争，尽管她也曾经赢得过国战，但这个生性温和的姑娘如今觉得即便胜利也不能再带来荣耀的感觉。战斗结束后，她充满厌恶地声 称不再履行保卫国家的责任。“再有国家来进攻，我的家族不参与应战了。”她向臣民们宣布。“有意义么？”吕洋反问她的质疑者们，“系统挑起战争，我们往里 投钱，谁投的钱多谁就赢。”她觉得没有胜利者，“都被系统耍了！” 帮主“狼烟”和家族里的其他人支持了她的决定。“我们也觉得，这不是我们在打仗嘛，”狼烟解释，“纯属被人卖了还帮人数钱。” 吕洋成了“世界”里著名的“反战”国王。她更热衷于和别国结为盟国，当然盟国可以轻易地撕毁和约，她也不在意。在和其他国王交涉时，她也总是强调，就算你来打我，我也不应战。“让他们自己觉得没意思。”吕洋有些狡猾地说。 和平的气氛在悄悄蔓延。“国战”次数进行得太多，各国国王和英雄们互相之间开始熟络，在无数次仇杀之后，他们中的大部分成了不打不相识的朋友。“时间长了，没人好意思动武了。”吕洋说。 上线的时候，她也只喜欢跟朋友们聊聊天，组织家族或者帮派的活动，惟一杀人的情况只限于为臣民的商队护镖的时候，她讨厌那些专门盘踞在边境附近、以砍杀平民和抢掠商队为乐的“强盗”。 在网吧，她又碰见了一个游戏推销员，并不是开始那个，但一样面带微笑，用充满诱惑力的词汇请她“提点意见”。这位推销员同时自信地声称：“万人国战的场面会更加宏大和频繁！” 就在这段时间，征途网络公司宣布“重组国家”。系统将原有各区的国家重新打乱组合，原来的友好关系打破了，陌生的国王们重新被扔进了新的竞技场，而仇恨将被重新点燃。 “跟你们老板说，不要尽干些挑拨离间的事情。”吕洋回答。 昔日勇猛精进的“女王”开始变得“不思进取”，她疏于升级，也不再渴求更好的装备。她在游戏里的配偶“狼烟”有些着急了，催促她赶紧跟上，不然就要被越来越多的人超过。 而吕洋现实中的丈夫是个关心妻子的人，他以为吕洋只是累了。一天早上，吕洋醒过来，发现不怎么玩游戏的丈夫坐在电脑前，替她不停地开着宝箱，他想为她打造更好的装备。吕洋突然觉得有些心酸，在下一次上线的时候，她悄悄跟“狼烟”“离婚”了。 监牢，看不见 禁止市场经济——第二十二条军规：那儿有个概率——如果他们反对“系统”会发生什么——“天哪” 尽管赞同“和平治国”方略的人并不很多，但吕洋发现，和她一样对这款游戏从赞赏变为不满的人越来越多。连吕洋都没有想到，玩家们居然自发组织了一场针对系统的“静坐抗议”。 事情起因于系统宣布的一项新规定：绑定。根据这项规定，玩家从系统获得的装备和“银两”，都属于绑定范畴，即只能自用，不能交易，不能交换，甚至不能拆成材料或者干脆丢弃！ 在游戏里，每一种职业都必须搭配对应的装备，每一种装备又由对应的材料打造。开宝箱早已成为玩家获取装备和材料最主要的方式，当你耗费掉了人民币， 需要一块“乌木”却得最终得到一块水晶，玩家们通行的办法是互相交易各取所需，或者摆摊出售换取银两。征途网络公司的解释则是，他们发现有职业玩家将游戏 中获得的银两和装备在线下出售获利，“绑定”是为了打击这种行为。 玩家们最终发现，在这个世界里，自由市场经济在某种程度上被禁止了，合法的私有财产只许保有，不许交易。在这里只有一个庞大的终极卖家被允许存在，那就是系统本身。 在一些游戏论坛里，随处可以看见玩家们黑色幽默一般的抱怨。一个帖子说：“我是个法师，花了上百块钱转到了一把刀，可是我不能装备刀啊。这把名贵的刀对我一点用处也没有，我还不能把它扔了。我甚至还要花钱向系统买个包袱，因为我没有足够的空间来装这把刀！” “这个游戏处处都是花钱的陷阱！”另一个玩家宣称。他举出“孔子”为例，这个万世师表的人物在游戏中负责“智力考试”，通过考试玩家可以获得海量的 升级经验。但是，受教育是很贵的，向“孔子”讨教问题，居然“20两银子一次”。甚至财大气粗的人民币玩家们也对过于频繁的更新力不从心。系统最新宣布， 可以给装备镶上第15颗星星。按照规则，购买4颗宝石充一颗星，看起来不麻烦，但是这里有一条“第二十二条军规”：连续镶星会导致所有的星星爆炸。 假如你已经花费了40颗宝石镶上了10颗星，而在镶第11颗时发生爆炸，那么前面的10颗星同时消失，你只能从头开始。从第10颗星开始，成功镶嵌的几率为50％，此后递减。星数越高，爆炸几率越高。 设计者在此利用概率原理和玩家们开了一个小小的玩笑。“我在冲第14颗星时，连着爆了11次。还不算前面爆炸的次数。”一个玩家抱怨。仅仅为了给他的至尊刀镶上第15颗星，他就花费了超过3000元。 玩家们出离愤怒，他们停止砍怪，不再接受任务，国王们都难得和平地坐到一起而不是申请“国战”。在游戏地图最中心的皇城广场上，密密麻麻地坐满了战士、法师、弓箭手和召唤术士们。这些往常醉心于杀戮的角色，如今用绝对的安静来对抗系统的贪得无厌。 吕洋当然不会缺席，她率领家族成员们加入静坐行列，她甚至花“10两银子一次”向“全世界”喊话：“游戏越改越烂，系统越来越贪！” 她惊愕地发现，“系统”两个字不能显示了，变成了**；再试“GM”，还是**；再试“史玉柱”，这次是***。 吕洋既愤怒又觉得好笑。是啊，这个隐匿无踪的**或***，却无处不在。它谦卑而热情地引导你花钱，它隐身其后挑起仇杀和战争，它让你兴奋或者激起你的愤怒，它创造一切并控制一切，它就是这个世界里的神。 **虽不可见，却始终看着你。没过几分钟，正在愤怒控诉的“女王”被抓进了监狱。按照系统的指令，她将被关押8个小时。这个“监狱”不在这个世界的地图上的任何一点，它只存在于系统中，就像索尔仁尼琴描写的古拉格群岛，你从不会看见它，你只是被运送到那里。 随后发生的一切，也正是只在那些最糟糕的世界中的监狱才会发生的。“女王”太显眼了，她的麒麟神兽暴露了她的身份。监狱里的人们看见了一个国王，就如同当初吕洋还是个小角色时看见国王一样难抑杀意。疯狂的人们围拢来砍杀，“女王”一次被杀死，又在原地复活，再被杀死…… 屏幕上夸张的粗体字又一次次闪耀：“天哪，楚国的国王女王居然被无名小辈×××杀死了”。 吕洋突然觉得以前的自己真的是很愚蠢，她对“女王”，或者说另一个自己的生死毫不关心，她退出游戏，关了电脑，上床睡觉了。 永远不再回来 旧王逊位，新王登基——为什么会有仇恨——又是一个财富神话——永远不再回来 第二天，吕洋上线，宣布“国王”逊位。她发现这里比现实世界更为真实，真实得那么残酷；她曾经试图挑战这个世界里弱肉强食的规则，对抗系统，却徒劳无功。现在，她彻底厌倦了。 一个渴望战斗的新锐武士接任了“国王”，并立即申请了新的国战。“女王”和她的家族没有参与这次战斗。楚国惨败而归。一个小角色，以往跟着“女王” 闯荡，如今被困在了敌国，完全是刀下鱼肉，他一次次在安全区复活，但只要尝试跑出安全区，就毫不例外地被杀死。这是个新玩家，他的账号里还没什么钱，连一 个安全离开的“竹蜻蜓”都买不起。 吕洋为这些小玩家们难过，他们原本是想获得些许游戏的快乐，却成了“人民币玩家”们发泄怒火或获得征服感的牺牲品。她上线，看着熙来攘往的虚拟角色 们，一个威严的法师背后可能是个谨小慎微的生意人，一个勇猛的武士背后可能是个和她一样的医生，也可能是任何一个在生活中原本善良谦逊的普通人。 “一个医生为什么一定要去杀死一个教师，而一个现实中的警察需要在游戏里伤害另外的人么？”吕洋禁不住思考一些奇怪的问题，“素不相识的普通人之间为什么会有仇恨？” 她开始注意到书架上那些以前还时常翻一翻的专业参考书。它们就整整齐齐地摆在那里，就像消失了很久，突然又出现了。天凉很久了，吕洋才头一回注意到窗子外面的行道树叶子开始黄了，淡黄的一片令人心里充满宁静。 她最后一次上线是在不久前。那时征途网络公司已经宣布部分地改变了“绑定”规则，公司成功地在纽约上市，第三财季实现营业收入4.</description>
    </item>
    
    <item>
      <title>IT市场统计分析</title>
      <link>//blog.shell909090.org/blog/archives/69/</link>
      <pubDate>Fri, 19 Jun 2009 00:40:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/69/</guid>
      <description>最近在看简历，根据简历和自己的经验总结一些东西出来。管窥蠡测一家之言，权给新手做个参考吧。
1.行业分类
从统计上看，web开发是人数最多的行业，占大约56%。其次是嵌入式市场，大约占18%。erp市场也差不多，18%。剩余的不足8%。
2.性别分布
众所周知，程序员是男性的职业，但是出乎大家意料的，程序员中有14%是女性(纯程序员，不包括美工)。不过根据贝壳的人工观察，其中只有一人的工作时间超过5年，多数都是3年不到的新人。看来女性程序员怀孕后转业的情况非常严重啊。
3.年龄分布
以大学毕业为基准水准计算，当前程序员的最低出生日期应当是1987。贝壳按照这个进行了统计，得出结果如下。
1983年17%，1984年8%，1985年14%，1986年16%，是人数最多的4年。低于1987年的占11%，1980到1982年间的人数占20%，高于1979年的占14%。
4.水准分类
水准是一个很难界定的指标，贝壳采用五级分类法，简单对其分类。大多数情况下，级和级之间没有明确的定界。
0.是完全没有任何技术背景和资历的人士，说白了就根本不是IT人。大约占8%。
1.初步具备IT行业人员的背景知识，能够做一些简单的软件产品，有跟随1-2个项目的经验。但是无法承担独立的项目，无法解决比较复杂的问题。在这个层次上，程序员大多数时候根本不知道怎么做，以及该做什么，始终处于知识缺乏的状态。业界俗称，小白。大约占50%。
2.具有标准职业从业人员所需要的知识(当然，具体是什么知识视行业和语言而定)，跟随过多个项目，其中有2-3个大型项目。可能领导过1-2个项目，但是不清楚项目管理的概念和专业知识。这个级别的人在总体人数中最多，大多数人在工作1-3年后都可以达到这个水准。可以独立的解决问题，和客户交流，完成软件生产的整个流程。在这个层次上，程序员大多数时候都知道怎么做。主要的问题在于多数人还不知道如何将这个过程简约成自己的标准过程。一般来说，这就是标准程序员的典范。大约占32%。
3.精通C++，熟悉windows和linux系统管理和系统底层，掌握至少一门高级语言。熟悉项目流程和项目管理的概念和专业知识，能够带领团队协作完成大型项目。能够独立建模，抽象问题，并通过算法解决问题。具备独立和客户沟通，协调解决问题的能力。一般有多个项目经验，曾经领导团队完成2-3个大型项目。如果你天分不错，运气不错，又够勤奋，大概在工作3-5年后会达到这个水准。在这个层面上，算法和标准化过程这些书本上的东西首次超过了如何做，做什么，成为程序员的首要问题。这个层级的人数也比较多，能够胜任项目经理的职位。大约占8%。
4.精通专属领域的多项核心技术，有广泛的业界联系，专属领域有一定的知名度。研发过一项或几项领域中的关键技术，对领域的发展做出过一定贡献。要到到这个层次无法依靠时间的积累，很大程度是天分，运气。在这个层次上，解决问题已经不是一个问题。由于基本能解决领域内的多数问题，因此发现需要解决什么，和创造性的解决这些问题成为这个层次最主要的问题。这个层次的人基本很少，一个子领域中全国不会超过百人。大约占2%。
5.曾经研发过改变世界的技术。这种人多数你听过，运气好这辈子能见到一个。大约占1%不到。贝壳当前的水准在3上下浮动，估计奋斗一下，这辈子能够达到4的层次。至于5，这辈子不指望了。
5.工资分布 大多数情况下，工资和工龄都是挂钩的。根据贝壳的统计，工资和年龄线性拟合后得到的一阶近似方程为：y=-1.089*(x-1990.50)。带入贝壳的年龄，y=8.16。恩，贝壳当前的工资还是不错的，比平均值高。
6.语言分类
由于简历是python的职位，因此python的比例异乎寻常的高，无法作为可用结果。贝壳按照经验比例适当缩小了python所占比重，得到一个估计值。作为统计数据的修正，并列于下。根据贝壳的统计，使用java的人人数最多，占了38%，修正大约是40%。使用微软系列开发语言/工具的人其次，28%上下，修正大约是30%。使用php的人再次之，12%，修正大约15%。最后是使用C++的，8%，修正10%。真正使用python和其他动态语言的人，修正后大约是5%。由于职位不涉及前台，因此前台语言/技能不计入统计。
最后谈几个感想。
1.队伍水准不成比例
根据贝壳的经验，在多数的项目团队中，推荐的岗位配比是：1位项目经理，2位程序员，1位前台工程师，1位DBA，2位测试。如果可以，最好还有一个专门的文档和行政。这个人数配置适用于6-12人的团队管理，如果人数不足，可以减少文档和程序员。如果人数有多，可以增加2位程序员，1位前台工程师，1位测试。其中程序员、前台工程师的配比要基本保持2:1不变，程序员、前台加DBA对测试的比例要基本保持2:1不变。这可以说是项目团队的黄金比例，比例失调往往容易造成窝工或工作不完整，质量有瑕疵。
但是需要看到，这样的话要求2位达到3这个层级的程序员(PM和DBA)，但是最高只能带4名2这个层级的程序员。这个和当前的2,3层次的程序员的比例4:1严重不匹配。因此造成一个现象，3这个级别的程序员不足，1这个级别的程序员太多。
根据孟岩的blog，07-08年的IT从业人员大约是500-600万人，其中程序员大约100-130万。每年的IT行业毕业生大约是70-100万，其中能进入程序员领域工作的大约20万人。当然，他的blog是一年多前的，而且说的是毕业生就业问题。但是根据全球IT形势，我估计这几年里面程序员队伍规模即使增长也有限，不会超过150万人。也就是说，大约一年之内就要淘汰10%-20%的从业人员。根据上面的分布，贝壳猜想多数人都是倒在了2到3的路上。
2.小白丛生，项目倒霉
上面一个问题带来的麻烦是，由于小白的人数太高，因此价格太低。其中不免一些人有非常好的测试表现。这要一分为二的看，部分人是真有这个水准的，以小白的价格雇用到这些人是非常合算的(当然最多一年，不会太久)。但是多数人仅仅是表现不错而已，这些人工资低测试表现高，很容易进入项目。而进入项目后，一旦担任关键职务，后患无穷。实际上，整个团队中，水准1的小白可以担任的职位只有测试(而且必须至少要有一个是真的专业测试)和文档。但是仅这两个职位而言，远远达不到培养新人的目地。这也是很多小白倒在了达到普通程序员水准路上的原因。
更麻烦的是，如果突然招聘，很容易发生招到的程序员价格都偏高，而且很多都没定下来就先和其他公司签约了。这时候往往只有小白可以用，项目情况可想而知。
理论上可以开放一些职位旁观项目，实际上也有人这么做的。但是旁观项目是一个非常麻烦的事情。首先项目的旁观者不但对项目没有正面贡献，反而会拖慢进度(因为要占用其他人时间进行沟通)，因此旁观职位的工资应当是负数。而且多数公司项目第一，赶都来不及的时候谁会开放旁观职位。更不说光在项目中旁观是很难确实体会到那个职位上要面对的问题的。
3.项目经理的条件就是要做过项目
项目经理是一个非常专业的角色，这个职位和技术总监(或者叫核心程序员，高级程序员)、DBA并称是一个团队的三大核心。核心程序员和DBA可以慢慢学，但是项目经理是学不出来的。实际上，合格项目经理的必要条件就是带过一两个大型项目。问题是，如果想成为项目经理，你找谁让你带项目呢？
一种方法是跟随一两个项目，带一两个小项目，学整套的项目管理方法论，最后由一个成熟的项目经理指导你完成首个项目。但是实话说，这种方法只有对大公司有效，而且还的看你的运气。小公司里面哪里弄那么多人开两个团队？(原本的项目经理一个，你一个，这要35人以上的公司规模呢)大公司则是牛人太多，轮也不一定轮到你头上。
另一种方法是赶鸭子上架，等你毁过一两个项目后，也就学的差不多了。
实际上，国内由于PM(真正的PM，而不是挂这个名头的程序员或者其他捣浆糊人士)不足，而公司规模又不足，足了也没有培养人才的兴趣。因此大部分PM都是通过后一个途径培养出来的——
4.语言生态扎堆
我们开放的职位叫做python程序员，可我的邮箱里面有一半上下的人都是java和C#的资历(我不看他会的语言，而是看他资历的)，其中真正有python资历的人十不足一。实际上国内大部分的人都在学java和C#，做web和erp程序开发，大部分的小白其实扎堆在这里。真正成为3，4这个层级人才的，java/C#/C++/python的比例其实差不多，很接近。
实际上这和当前的语言生态有关。到也不是说这个生态有问题，而是这是当前现状市场化配置的必然结果。大量的小白(6成以上)集中到6成上下的低端web、erp和嵌入市场。这些市场的目标需求不复杂，没有重大的技术问题，服务器压力不大，因此小白足以应付。既然是小白，那就需要选择一种使用人数最多的语言(因为最好找人)。于是两大语言集团，java和ms系列的asp，asp.net就成为必然选择。
web行业和erp行业的几乎全是ms系列和java系列的语言，而嵌入式里面则大多数是C++(当然，也有j2me，不过那不完全输入嵌入式开发的领域，很多应当属于游戏领域)，这个是受限于嵌入式本身的技术特点。C++本身也有写的好和写的差之分，但是由于程序员要控制更多的东西，因此差的程序员很容易被识别出来，也更难在行业中生存。因此嵌入式行业的总体开发成本比web行业要高。
在我的行业中，缺少游戏行业的分析。这主要是因为我的简历里面几乎没有游戏行业的从业人员。我无法解释这个现象的成因，也许游戏正在从软件行业中独立出去，成为一门独立的体系。</description>
    </item>
    
    <item>
      <title>你要哪种钱？</title>
      <link>//blog.shell909090.org/blog/archives/68/</link>
      <pubDate>Wed, 10 Jun 2009 21:45:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/68/</guid>
      <description>今天和几个人坐在一起的时候，突然听到对面的人叫我。
贝壳，快借我点钱。
贝壳刚刚有点瞌睡，有点迷糊。往左看看，星际。往右看看，魔兽。张嘴――
――你要哪种钱？
人民币。</description>
    </item>
    
    <item>
      <title>电脑操作与人机工程学</title>
      <link>//blog.shell909090.org/blog/archives/67/</link>
      <pubDate>Mon, 01 Jun 2009 22:41:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/67/</guid>
      <description>贝壳大学念的是工业工程，毕业导师就是人机工程学方向的，贝壳的人机工程论文就是按钮的大小和操作效率。因此，今天贝壳罕见的回归本专业，谈谈电脑操作的速度问题。
首先一点就是，无节制的优化速度是万恶之源。为什么？道理和优化程序一样。你实施一个优化必定有一定成本和代价，为了一个一个月进行一次，一次三秒钟的操 作，进行一次优化。假定你搞定优化用了半个小时——一些情况下的却需要这么长时间。这样你需要100年才能收回你的投资，显然，这很愚蠢。
那么，什么是优化，为什么要优化？
操作优化，指的是你利用一些专业和非专业的方法，将日常最常用的操作简化。减少操作次数，减少操作时间，减少精力集中的负担等等。最常见的方法是“按键精 灵”或者是快捷键。而之所以要进行优化，则是因为——我懒——俗话说，只有懒人才是好程序员。也许有人会想，那设计者为什么不设计的效率高一些？拜托朋 友，你也讲讲道理。设计者怎么知道你是要经常复制还是要经常剪切？于是他只能假定你经常剪切（或者复制）。如果不幸，你恰恰相反。也许你就需要优化，也许 贝壳的文章就能给你的工作提供非常大的便利。
那么贝壳下面逐个讲解贝壳碰到的一些优化方法和范例，具体的运行则要靠大家的发挥，没有一定的模式。如果你觉得你的电脑操作工作平淡无聊，那就说明你需要 优化了。每种优化方法需要一定的专业知识配合，贝壳会给出评价。评价有三种，适合普通人，就是说一般稍微会一些电脑的人，可以根据网络上的讲解来使用。适 合专业用户，指用电脑3年上下，电脑比较熟练的人，可以经过试验配置成功。还有疯子专用，指这个方法基本就和您无缘，除非您正好是程序员或者疯子。
首先我们从最基本的开始，鼠标，按键，快捷键，快捷键排位。这个方法适用于普通人，但是下面一段是比较专业的论述，不感兴趣的可以跳过。
鼠标和键盘是我们最常用的输入工具，而根据贝壳的人机工程论文，鼠标的输入效率低于按键。但是要注意，这个结论并不永远成立。对于某些图形操作，尤其是高 精度操作来说，键盘上可以操控的方法变成上下左右四个键，效率大大降低。如果使用其他键来辅助，这不是人类能接受的方法，疯子也不行。此时使用鼠标比键盘 效率高多了。键盘输入快的根本原因在于一般人精神集中后，一秒可以按三个键——至少也有两个。而无论精神怎集中，区域怎么大，要输入一个点击至少要一秒。 按照信息量计算，键盘的可用信息量要比鼠标大一个量级。然而，除了输入文字，键盘并不好用。根本原因在于鼠标的模式是阅读-选择，而键盘是记忆。因此，键 盘操作是用户不友好的。
通常来说，我们可以用键来定义一些常用功能，这样会加速操作。通常而言，这个被称为快捷键。例如，Atl+Tab是切换窗口，相信大多数人都知道这个热 键。这个热键好用的根本原因在于快速的在两个窗口见切换——如果用鼠标会累到死。我们可以记忆一些常用热键来加速，毕竟之所以定义常用热键是有意义的。例 如Atl+F4的关闭程序，结合windows使用可以以&amp;lt;win&amp;gt;,Atl+F4,U的顺序来关机。整个操作只要一秒，单手就可以，真是酷 到不行。Atl+Space可以唤出系统菜单，因此Atl+Space,X可以最大化，Atl+Space,N可以最小化，这两个也可以单手操作。
单手操作热键的意义在于免去频繁的键盘/鼠标切换。当你需要双手执行热键的时候，你需要半秒将右手从鼠标上移动到键盘上，再花半秒移动回去。这样就平白多 了一秒的时间——这还是高手的时间，普通人更长。对于加速操作来说，这么移来移去很没有意义。而键盘/鼠标的配合才是操作电脑的理想境界。你可以在资源管 理器里面试试一个操作，在一个文件夹内选择一些文件复制到另外一个文件夹。这是贝壳最熟悉的配合动作——因为太频繁了。首先点中头一个文件，按下 Shift点最后一个。放开键盘鼠标，按下Ctrl+C。点击目标目录，按下Ctrl+V。速度快的原因在于，Shift放开后，按下Ctrl+C的动作 基本是下意识的。这样鼠标可以轻松的去找目标——同步的。按下Ctrl+V也是下意识的，所以整个动作的时间序列是——点头一个文件，点最后一个文件，点 目标。当然，拖曳选中区域，拖曳到目标目录一样可以，而且是单手鼠标操作。只是这样一来，首先你无法添加选择零散目录——用Ctrl键就可以做到。其次如 果不小心在移动的时候松开左键，就会触发麻烦的同文件夹文件复制。因此上述方法兼顾了稳定性和速度。
也许你觉得无聊，不就是文件复制么？我点右键也可以啊。问题是，如果点击右键，再点选菜单，至少需要1.5秒的时间。比这个方法至少慢了1秒。如果你每天的工作需要整理大量的文件，我想你不会高兴遇到这个问题的。当然，如果你基本不复制文件，好吧，当我没说过。
更多的时候，我们需要定位目录中的某个文件或者文件夹。对此，你可以输入文件的头两个字母。这时候光标会被带到符合这两个字母的头个文件——我想离你的目标不会太远了吧。这个同样是双手配合操作。</description>
    </item>
    
    <item>
      <title>用简体还是繁体</title>
      <link>//blog.shell909090.org/blog/archives/66/</link>
      <pubDate>Tue, 26 May 2009 22:34:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/66/</guid>
      <description>作为一个使用了24年以上简体(不要怀疑，贝壳三岁开始学写字的)，并且暂时还要继续用下去的人来说，这几乎是一个不用问的问题。但是，最近，贝壳考虑是 否应当改用繁体，否则真有成为文盲的可能。何为文盲呢？中国规范常用字无法写出80%以上的，我觉得就应该算做文盲了。也许这些新时代的文盲可能具有非常 高的学历，甚至会是博士。但是5个字里就有一个字写不出，不是文盲是什么？
不过最近的汉字简化修改方案，似乎有把贝壳往文盲上推的嫌疑。凡能读这篇文章的人应当都知道，所谓的汉字简正之争。简正之争，由一个汉字方案的学术争议， 有逐渐演变为一个中国，谁是中国的国家和民族之争的现象。但是，无论谁是最终标准，应当都具备一个国际语言的基础特性，即一致性。例如汉字就应该是汉字， 不能今年是汉，明年就变成了�，再下去又是不知道别的什么。中文固然因为语言使用区域非常广泛有非常多的别字别音，而且在某些地区还是主流，但在规范上应 当兼容扩充，而非来回修改。例如山东地区，打车叫打个的(de1，一声)。打的这个词按照贝壳所见到人的叙述，应当来自南方，香港和广州(当然，也可能因 为和贝壳讲的人本人就是香港人的关系)。原来是打的士(di1shi4)，的士的读音在广东话中非常类似taxi，后者在英文中是滑行的意思，比拟出租在 街上四处溜达，寻找乘客。中国在改革开放后才有了taxi，因此叫法上都学香港，才有了的士，打的，的说法。这个不在规范之内，应当考虑统一的问题。否则 若是一个香港老板跑到山东，当地人秉承圣人之乡的理念，非常热情好客的说：我给您拦个的(de1)吧。岂不笑掉人家的大牙？
汉字规范之争其实涉及到非常多的政治和经济层面的问题，但是和小老百姓关系最大的是一致性。诸位可以想想，若是您学了30多年字，一朝之间2成的字突然被 人宣布不会是这么写了。您从一个正常人就猛的变成了文盲，换您您干么？为什么台湾反对简体字？因为一旦简体字推行，社会上多数人比文盲更加文盲——他们连 读都不会，要重上六年小学。您想想，换您您干么？现在和台湾还没较上劲，咱们自己先和自己较上了。文字要改，大改还是小改？如果是小改还好，如果大修，无 疑是直接宣判了贝壳的文盲。这种情况下，还不如直接学繁体字的好。
说到学繁体字，到也不是贝壳信口开河。而是当下，会电脑的人学繁体字的成本真的不高。你仔细想想，你到现在总共用笔写过多少字呢？反正今年过年到现在，贝 壳拿笔就写过三个字，自己的名字。凡是吃饭刷卡签合同，必定要写这三个字，其他都不会写了。贝壳又长期挂在网络上看各种资料，外加高中时期还特别研究了前 秦散文，三国志(不是三国演义！)。因此简体繁体都能看。现在换用繁体，无法就是输入法切换一下，把输出简体的转换为输出繁体。对于开源输入法而言，简单 到只是码表转换。而后学会写自己的名字，学会1000常用字。基本贝壳就能冒充会繁体字拉。
其实诸多字形的修改只是小事，问题是有很多讲法的统一和规范的推行落实才是当务之急。例如，以前贝壳小学时候还有专门的课程还分辨的地得。现在出了社会发现，有多少人管你的地得？很多人一些基础的文法都有问题，在这基础上还谈什么修改规范呢。</description>
    </item>
    
    <item>
      <title>AMD64下的Google Gears</title>
      <link>//blog.shell909090.org/blog/archives/65/</link>
      <pubDate>Sun, 24 May 2009 21:49:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/65/</guid>
      <description>到http://dev.laptop.org/~joel/gears/下载了用吧，debian testing下正常。当然，离线还没有测试过——</description>
    </item>
    
    <item>
      <title>关于杭州飙车事件</title>
      <link>//blog.shell909090.org/blog/archives/64/</link>
      <pubDate>Sun, 10 May 2009 02:42:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/64/</guid>
      <description>写在前面的话。
在德國，起初他們追殺共產主義者，我沒有說話&amp;ndash;因為我不是共產主義者；接著他們追殺猶太人，我沒有說話&amp;ndash;因為我不是猶太人；後來他們追殺工會成員，我沒有說話&amp;ndash;因為我不是工會成員；此後他們追殺天主教徒，我沒有說話&amp;ndash; 因為我是新教教徒；最後他們奔我而來，卻再也沒有人站起來為我說話了。
————Martin Niemoller
贝壳一直是个胆小且懦弱的人，虽然看了形形色色的事情，但是从来没有发表一点评论，连路过都没有一句。也许因为从事技术工作，贝壳清楚当今网管能够做到什么程度。然而针对这次的杭州飙车事件，实在无法闭口不言。事情发生的地方离贝壳的宿舍不足1公里，贝壳还到那里吃过饭。想像一下，如果当时过街的是贝壳&amp;hellip;&amp;hellip;
首先，按照新闻原则，确认事件是否发生。gg一下，发现以下链接(http://tupian.zjol.com.cn/05tupian/system/2009/05/08/015492581.shtml)，来源是浙江在线(搜狐也是转载这里)。就贝壳所知，这个是浙江日报的运营网站。贝壳 whois了一下，根据cnnic的结果显示，这个域名的DNS服务器地址是zjdaily.com.cn，而这一服务器正是浙江日报的官方服务器。更直接的证据来自浙江在线的联系方式，新闻中心0571-85310961，8531正是浙江日报的局号。
根据上面的原则，我们可以认为这个事件应当是真实的。贝壳进一步跟踪了新闻来源(互联网抄袭现象阿&amp;hellip;，过程显示浙江在线转载杭州网，杭州网转载都市快报)，结果在这里找到了源头(http://hzdaily.hangzhou.com.cn/dskb/html/2009-05/08/content_666555.htm)。
杭州日报的记者们，我为你们骄傲。整整三个版的报道(http://hzdaily.hangzhou.com.cn/dskb/html/2009-05/08/content_666488.htm)，经过清晰明了。而且注意贝壳使用的网址，这是实体报纸的电子版，和实际报纸基本严格对应(这个应当是方正飞旋系统)。换句话说，这不是个网络报道，而是有记者参与的，见报的真实新闻。
OK，我们认定了事件的真实性，那么整个事情还有什么好说的呢？注意下面的消息，来源是中新网，其运营商是中新社。(http://www.chinanews.com.cn/sh/news/2009/05-08/1683856.shtml)这次问题到不在记者这里，而在交警认定这里。我不知道交警是如何认定和下结论的。但是我来简单计算一下，如果被撞起5米高，撞出20米外，到底是什么一个状态。
假定g=9.8，整个计算过程其实就是高一物理。撞起5米高，其向上的初始速度假定为v。整个过程满足v^2=2gs=2*9.8*5，求得向上的初始速度约9.9m/s(我没算错，你也没看错，贝壳中学物理竞赛拿二等奖的)。向上的单程时间为v1-v0=gt，带入数值为9.9-0=9.8t，上下总时间约2秒。2秒内横向行进20米，横向速度也为10m/s。根据速度合成公式，整个人初始的速度方向为斜向上45度，速度为14.14m/s。如果我们假定整个人体重65公斤(我没看具体体型，不过这个是一个常规中国男性的平均体重，资料来源http://ask.koubei.com/question/1306122623215.html)。当时转换的瞬时冲量达到65kg * 14.14m/s = 919.1kg.m/s。假定冲击在0.3秒内完成，那么当时的力量就达到3063.7牛顿。什么概念呢？就是在瞬间，一个能够对你产生300多公斤压力的锤子(自身大概有1000多公斤)向你以14米以上的速度砸过来，你们接触了至少0.3秒。漫画中打飞人的原型重现阿&amp;hellip;&amp;hellip;
而且根据碰撞原理，人重量远远小于车，因此人飞出去的时候的速度应当是车速的两倍。(高中碰撞公式，难为贝壳还记得)当时的车横向车速不会低于 5m/s，否则人根本不可能以10m/s的速度飞出去，更何况还没算空气阻力。即，在刹车后，碰撞发生的瞬间，该车的车速不会低于18公里/小时。不知道当时有没有人能够测量刹车过程的刹车痕长度，以及当时刹车的时间？根据这个长度和时间，贝壳可以反向算出在刹车前，这个车到底跑了多快。不过贝壳可以透露找到一个基础数据，如果在撞车的瞬间，您在车里忘记系安全带。那么车速达到30公里/小时的时候(折合8.3m/s)，您就可能发生严重危险甚至危害生命。至于您在车外，以18KM/H的速度和车接吻。无论您带了什么东西，基本都可以领便当了——
PS.补充于5月10日：
曾经风传媒体关于此事闭嘴的传言，估计不完全属实。10日的都市快报(向他们的主编致敬)发表了三版的后续报道 (http://hzdaily.hangzhou.com.cn/dskb/html/2009-05/10/content_667288.htm)。可能是曾经封口过，但是又解禁了。</description>
    </item>
    
    <item>
      <title>Linux的环境</title>
      <link>//blog.shell909090.org/blog/archives/63/</link>
      <pubDate>Tue, 21 Apr 2009 21:02:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/63/</guid>
      <description>很多专业人士的Linux是万年不换的，贝壳没有这么专业，电脑最近老换来换去的。所以列一下有什么东西是一个Linux必装的，以免忘记。其他东西就算 了，需要了再说。另外说明一下，以下列表是针对日常使用，而不是专业开发。例如python环境中的一些组件，还有一些太基础的系统组件都没有列。贝壳认 为会到这里看这些东西的人这些基础常识都应该有了。
1.firefox + thunderbird。这两个是万年组件，好用跨系统。不多说了，列一下插件。
1.1.Flash Player，adobe的能用就用那个，不能就用swfdec。
1.2.CustomizeGoogle。
1.3.Firebug，要用debian提供的包，否则无法用。
1.4.FoxyProxy，移动系统要修改about:config。
1.5.GMarks。
1.6.Google Gears，x64有定制的安装包
1.7.Google Reader Notifier，Google的产品好多。
1.8.Greasemonkey。
1.9.NoScript。
1.10.Tree Style Tab。
1.11.TwitterFox。
1.12.Update Scanner。
1.13.Session manager。
1.14.QuickText，TB插件，能够使用模板定制信件。
1.15.WebMail，TB插件，能接收Hotmail邮件。
1.16.SendFilter，能够使用发送过滤。
1.17.Enigmail，邮件加密系统。
2.Gnome-do，快速启动程序，很方便。
3.pidgin，万用IM，很强大，最好加上两个插件
3.1.msn-pecan，msn的另类插件，功能比标准的多一些。
3.2.fetion，飞信 for pidgin的插件。
4.mplayer + audacious，经典电影播放器加还不错的音乐播放器。
5.amule，emule的Linux替代品，电驴软件。
6.ibus，很爽的输入法，不过比scim的系统结合程度要差一些，也还在发展中。
7.OpenOffice，想开.doc .docx文件么？装OO3以上。
8.eclipse，很强大的编辑器，唯一问题就是太大太强了。
9.emacs + vim，推荐emacs23，自编译。比22好用太多了。
10.apache2 + mysql，啥都不用说了，日常保存一些东西，共享文件，运行一些网页程序很方便。不过对已有的人是不需要的。
11.mercurial，这恐怕是今天最专业的一个组件了。这个组件的目的是分布式的管理文件版本。对于大多人来说，最大的好处是可以本地化的管理自己的一堆文件，以及处理各个版本。
12.comix，漫画浏览器，也是不错的图片浏览器。
13.cryptkeeper，这个是文件加密软件，内部使用encfs作为加密基础。很不错的。
14.Wine，只要想运行Windows程序，就非装不可。记得字体反虚化，否则会难看死。
15.revelation，密码管理器。
16.tsclient，远程到windows下。
17.dictd + gnome-dictionary，方便的词典系统，比stardict差点，但是不那么让人恶心。</description>
    </item>
    
    <item>
      <title>debian testing下的ibus安装</title>
      <link>//blog.shell909090.org/blog/archives/62/</link>
      <pubDate>Wed, 08 Apr 2009 23:30:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/62/</guid>
      <description>贝壳经过N个人的宣传，决定试用一下传说中的Ibus，下面是试用安装手记。文章参考了后面的参考1，特此鸣谢。
apt-get install git-core python-gtk2-dev cvs libtool automake python-enchant libgtk2.0-dev libdbus-1-dev libdbus-glib-1-dev python-xdg
在安装以上依赖后，运行。
# 安装ibus git clone git://github.com/phuang/ibus.git ibus cd ibus ./autogen.sh chmod +x debian/rules dpkg-buildpackage # 安装ibus-pinyin git clone git://github.com/phuang/ibus-pinyin.git ibus-pinyin cd ibus-pinyin ./autogen.sh chmod +x debian/rules dpkg-buildpackage 而后，在根目录会生成两个文件。贝壳的是ibus_0.1.1.20080908-1_amd64.deb ibus-pinyin_0.1.1.20080901-1_amd64.deb。名字比较旧，但是查看git log的话，是2009年4月8日的版本。先安装前者，再安装后者(顺序不要弄错)。而后就是设定部分。
设定的话，请不要按照参考文去设定。这是贝壳血的教训，足足弄了4个小时。正确的做法是用root用户im-switch -c。而后选择ibus作为输入法。
而后，稍等，先不要着急重启。在两个包里面还有个bug？？
在ibus包中，有这么一个文件。 /usr/etc/xdg/autostart/ibus.desktop在debian testing中，这个位置的自启动是无效的！ 正确的做法是，cp /usr/etc/xdg/autostart/ibus.desktop /etc/xdg/autostart/ibus.desktop
如果不按照上文修正，结果就是ibus会正确启动，但是没有托盘区和输入条，全凭感觉选字(汗-_-|||)。
其实这应当是一个bug，scim可以在/etc/X11/xinit/xinput.d/scim中设定好守护进程，而后在系统界面出现后自动出现(这也是为什么每次启动的时候scim总是先看到的原因)。而ibus尚不支持界面出现后再去注册托盘区，因此必须试用autostart来启动守护进程。
总体感觉而言，ibus比scim更加漂亮干净，据说对kde的支持也更好。不过试用过程中还是有点问题，主要是以下几个(2009年04月08日列表)：
1.�字没有！我相信，其实是很多字没有！
2.firefox就在贝壳写这篇文章的时候，崩溃了一次。以前贝壳的firefox很稳定的，从来没有崩溃过——
参考： [1].debian 5.0 安装 ibus中文输入法.http://hi.baidu.com/cvwolf/blog/item/3d812b4e8c4fe201b3de0591.html</description>
    </item>
    
    <item>
      <title>移动时代的一个应用预测</title>
      <link>//blog.shell909090.org/blog/archives/61/</link>
      <pubDate>Sun, 05 Apr 2009 18:37:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/61/</guid>
      <description>贝壳今天在晚libfetion for pidgin的时候，突然灵光一闪，想出一个移动时代的应用。
应该说，这是一种融合了IM，语音，高速网络，移动设备后的应用。本身看起来像IM一样，可以方便的和别人聊天。但是，由于移动的垄断，目前除了飞信，谁 也无法保证客户的长期在线。虽然MSN等等可以借助GPRS上网，但是GPRS毕竟是要断线的。如果借助移动和设备的结合，就可以让每个客户端长期在线。 当然，这个思路就是移动飞信正在弄的思路，本身并不新鲜。
和别人聊天，多数是用文字吧？那如果能够附加语音，视频呢？我们可以想象这么一个场景。某人A给B打电话，B在开会，不能接。如果在现在，只有发送短信。 价格贵不说，打字也很麻烦。如果借助这种业务，A可以给B发送一个语音邮件。选中B，选择语音邮件，说两句话，关闭，点击发送。B在收到信件后，可以当场 看，也可以等有空了看。甚至，更进一步的，如果计算技术达到一定水平了。B可以选择识别A的语音邮件，将内容转换为文字(当然，这个由A做更合适。他具有 自己的语音库，传输量也小了很多。)。或者选择A的文字邮件，将内容阅读出来。这样实际上可以保证任何人的随时随地在线，而且语音和邮件互通。
当然，这个技术的实现太过依赖于移动运营商的开发和开放，也依赖于语音技术(语音识别和TTS)。如果是美国，估计在3-4年内会出现这类产品，4-5年内会普及。如果是中国——上帝保佑你吧，中国移动。</description>
    </item>
    
    <item>
      <title>手机病毒的真相</title>
      <link>//blog.shell909090.org/blog/archives/60/</link>
      <pubDate>Sat, 04 Apr 2009 12:11:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/60/</guid>
      <description>转载自http://blog.wangyingqi.com/2009/04/03/137/，以下为内容。
**** 防止被骗，帮我宣传，随便转载，不用署我的名字都行。
作为一个软件从业者，我有很多其他领域的知识盲点，当我看到有人揭露私人豆腐坊的生产过程之后，我就再也不敢到小市场买豆腐吃了。当我了解到药品销
售者和医生勾结向病人推销过量药品这个事实后，到医院买药我都要仔细查看药品的名字和功效。没有人是全能的专家，我很有自信不会在计算机和软件上受骗，但
是难保
其他人不被骗。写这个文章应该算是社会责任，于是，我这次充当内部人士揭秘，来看看手机病毒的真相。
普通用户对手机的了解还是太少，能分清智能手机和非智能手机的人就更少了。能知道所谓Symbian和Windows
Mobile系统的区别，知道iPhone和RIM这些单词的人算是很高端用户了。不单单普通用户不知道这些概念，连同样是作软件但是不做手机软件的技术
人员，也都不清楚这些操作系统的最基本的知识。于是，目前大家能见到铺天盖地的手机病毒爆发，3G来了要装手机杀毒软件，手机中毒后隐私外泄等等如此骇人
的广告和说辞。那手机病毒很多嘛？我的手机很慢是中毒了嘛？到哪里装手机杀毒软件？哪个手机杀毒软件最好？一个月多少钱？如果你心中有以上那些问题，那么
很荣幸的告诉你，你已经被骗了，你忽略了一个最重要的问题。
手机病毒真的有嘛？
首先我们来区别一下智能手机和非智能手机，目前的数据是国内已售的智能手机占整体手机市场20％，虽然我坚信这个数据会越来越高，但是就目前来看，
如果你
的手机不是诺基亚，三星，摩托罗拉，苹果iPhone，黑莓，Palm，多普达，HTC等这些稍高端品牌的话，就基本不用担心手机中毒的事了，也许有人说
手机品牌不就是这些嘛，其实能看到这篇文章的人也算是互联网信息圈内的人了，外面有大把的普通用户在用着低端手机，而他们才是最容易受惊吓，最容易以讹传
讹的不明真相的群众，传播正确的理念都靠我们了。如果问具体哪个型号的手机是不是智能手机怎么办呢？很简单的方法是到淘宝上搜索该手机，然后找一个信誉最
高的商家，产品介绍里面就有是否智能手机这一栏。在知道自己的手机是否是智能手机后，一个最浅显的结论是，如果你的手机不是智能手机，那么手机病毒和你无
缘。放心睡大觉吧，别为这事儿烦心了。 糟了，我的是智能手机哦。
别怕，继续往下看。软件病毒实际上是一种对系统有害，更改用户数据，给用户造成经济或名誉损失并能够自我复制自动传播的软
件。这个定义里面的一个很关键的词是&amp;quot;自我复制自动传播&amp;quot;，也就是我们常说的感染。智能手机都可以安装很多软件的，看起来就像普通的电脑一样，智能手机好
像具备了被感染的能力，也就有中毒的风险。那怎么才会被感染呢？又一个重要的概念出现了，一种智能手机操作系统的软件不可能安装在另外一种智能手机操作系
统上（这个说法有一个小漏洞，后面再补上）。如果不理解这句话的话，我来举个例子：棉铃虫是是棉花种植中的一种很严重的病虫灾害，在棉花的主产区很容易传
播和互相感染。但是，人是不会长棉铃虫的。我们不用担心去收棉花的时候染上棉铃虫。智能手机操作系统也是一样，塞班（Symbian,诺基亚智能手机的主
打操作系统）的软件只能在塞班的手机上运行，绝不可能在用微软移动操作系统(Windows
Mobile)的手机上运行。拿iPhone的软件跑到诺基亚的手机上运行也是天方夜谭。结论就是，你只能被使用同样智能手机操作系统的手机感染。目前能
找到的智能手机平台大概是Symbian,Windows
Mobile,Blackberry,iPhone,Andriod，Linux，Palm，还是一样，到淘宝上搜索自己的手机，查一下看看自己属于哪个
帮派？接下来我挨个介绍。
我知道我的系统是什么了，那哪个系统最容易中毒呢？
先说iPhone吧，这个最容易讲，一个正常的iPhone想要装软件只能到苹果官方的软件店上找，而苹果对软件的功能和安全性审查的极其严格，虽然有人
对这种封闭垄断行为很是不满，但是对最广大的普通用户来说，至少在安全这个问题上，用iPhone的根本不用操心。Google推出的Andriod智能手机操作系统，目前也是沿用这个策略，你只能装官方的软件店上的软件。用这个系统的朋友也可以放心大胆的用了。
Symbian是一个比较复杂的系统，市面上能见到的有Symbian
s40,s60第一，二，三，五版，UIQ等。先找个简单的来说，Symbian s60
的第三版以及之后的所有版本，包括UIQ，在上面正常安装的所有软件都必须通过Symbian官方进行安全认证。或是用户自己给软件打数字签名作认证(这
个不讲了，普通用户不会这么干的)。Symbian虽然没有官方的软件店限制，但是签名认证这一点就已经给s60高端智能机一个很好的安全保证。不用
说做一个病毒传播出去，就连作一个正常的软件想要发布都会有很多门槛，必须买一个$200一年的开发者资格，每次发行一个版本都要付给官方$20认证后才
能大范围的安装使用。要想写一个恶意软件很容易，但是要装到很多手机上用并传播，基本上不可能。至于s60的第一，二版本，诺基亚在2005年的机型
N90以后就再也没出过这两个版本的智能手机了。他们的安全认证等级确实比较低，但是市面上已经没有这些产品卖了。大家也不用为古人担忧了。
Palm大家可以忽略了，已经很久没有Palm系统的新机出现了，近来要推出的Palm
Pre会搭载新的操作系统WebOS。目前没有真机，但我相信这种现代的操作系统，都会十分注重安全性的。也先不用为未来担心。
至于Linux，其实手机上用的很少，摩托罗拉的A系列一直在折腾，单从血统来看，Linux的手机安全性肯定不必担心。另外，像这种比较偏门的机型，现在占有率不高，未来发展方向也不好。不用说病毒，就是正常的软件开发商都不想为他作软件。所以用这一系列的商务人士们也可以无忧了。
Balckberry的软件安装目前未见到安全认证机制，同上面未说完的Symbian
s40一样，是市场上占有率较高且有中毒风险的系统。但是很有意思的是，基本上没有病毒爆发的迹象。**而Windows
Mobile也继承了Windows一贯的光荣传统，安全认证机制基本为零**，
属于高危范围。而为什么目前没有很多手机病毒呢？其实，目前在电脑上，单纯
的病毒已经无利可图了，写病毒已经不再是一种技术炫耀，病毒作者已是无利不起早的经济利益偷窃者，电脑上的网游盗号，网银盗号才是他们要关心
的。手机上没有他们想要的，我们的认为重要的亲密短信，隐私图片，对犯罪者是没有吸引力的。这也是目前在这些相对危险的操作系统上也没有手机病毒爆发的重
要原因。
如果说要窃取利益，装了软件后在后台偷偷的发订阅服务的短信应该是最常见的方式了。但是为什么目前也不泛滥呢？这个和几年来整治SP提供商有关系，短信特
服号和厂商直接关联，SP资质非常的难拿到，敢作坏事就再别想作SP了。他们想赚钱倒是真的，但是没必要作这个犯罪风险这么高的事情。这也就是大环境好，
立法好会很好的杜绝犯罪，也会很好的杜绝软件病毒。电脑上也是一样，如果能有好的立法保护每个人的虚拟财产，目前的盗号木马绝对不会这么猖狂，说远了，不
要跑题。
差不多都说完了，再补一下刚才的那个漏洞，实际上一些Java的程序是有可能在各种不同的智能手机平台上传播的。但是有一个前提要说的是，Java的程序
能作的事情很有限，访问网络，访问手机上的文件，发送短信这些都会有十分明显的提示，让用户确认后才会进行。这个安全限制是在Java这一层次就已经解决
了。所以基本不会对大家造成什么风险。
可是手机病毒这么多人在说，他们都是骗人的嘛？为啥你说没有就没有阿？有人说有阿？到底有还是没有阿？
其实是真的有过手机病毒，当然目前都是恶作剧形式的，我看到的都是s40,s60第一，二版本，和Windows
Mobile的早期版本的几个样本，为什么会中毒的原因，想必大家也有概念了，就是操作系统的安全性差造成的，但是大家不用担心，目前这些样本都不再活
跃，也基本没有啥传播能力了。算是一些待在实验室里面的样本而已。和广大普通用户没关系。就当前的流行手机操作系统看，我没见到任何可以称作病毒的东西。
那现在手机杀毒软件都是骗人的？
关于这个问题，我来分析一下目前国内一个卖的比较好的手机杀毒产品，网X。他在官方网站上放出了所有他可以查杀的病毒名，
一共216种。里面大部分的病毒样本是没有标明可运行的平台的，看了我上面写过的都应该知道。平台不吻合根本没法运行，还谈什么病毒行为？另外，他的产品
承诺每月升级4次病毒库，每次升级2块，或是8块钱包月，包年98（您没看错，就是比按月买还贵），两年的卡188元。从第一个有时间标注的病毒2008
年4月17日到2009年4月2日，一共有病毒53个，想起来也还不错。刚好平均每月4到5个，有这么巧嘛？接下来我们再看一下所谓的病毒是什么，最近的
一个病毒样本是一个Python脚本，我来解释一下这个东西要怎么才能运行，首先你要在诺基亚的s60手机上装一个目前只有程序员才关心的Python脚
本解释器，然后又碰巧别人传了这个脚本给你，而且你还要跑到系统中找到这个脚本并手动运行，OK，病毒爆发了，不断发短信了。听不明白吧？不知道</description>
    </item>
    
    <item>
      <title>上海的房价</title>
      <link>//blog.shell909090.org/blog/archives/59/</link>
      <pubDate>Fri, 03 Apr 2009 16:27:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/59/</guid>
      <description>贝壳blog的老看客应当都记得，贝壳写过一篇房价分析的文章。今天贝壳简化一下模型，然后分析一下上海房价。
上次那个文章的核心要点是，买房和租房的问题。我们今天把模型简化一下，假定某个房子的价格是100W，其中10%是装修费用。房价不涨不跌，到底买房还是租房呢？很简单，我们假定装修会在5年内等速消耗，中国的存款利率是2.25%，贷款利率是5.5%。如果我要买房，我就要承担装修的消耗和放弃把钱放在银行里或者去投资(当然，这个另说)的收益，因此叫机会成本。很容易算出，每个月消耗的装修费用是100*0.1/60（100W的一成在60个月里面消耗），机会成本在100*0.9*2.55%/12(100W的九成每年会产生2.55%的利润)到100*0.9*5.5%/12(100W的九成每年会产生5.5%的利润)之间。如果房价不涨不跌，那么一个月的房租应当在3579到5791之间。如果低于3579，理论上我根本不会考虑买房。我一定会租房，然后把100W放到银行里面，拿的钱一定比3579多。我可以拿出3579付房租，剩下还可以自己用。
有人可能会考虑10%的装修成本也进银行等等的问题。100W一月的利息是1875，每个月都在赔钱阿？其实没有这个问题。因为，我们对比的双方，是通过两条路径达到一个终点的差异。一条是将100W存入银行，租5年的房子。一条是将100W买房，5年后卖出(假定交易成本为0)。其中买房的每月成本是3579，只要低于这个数值，即使租房每个月都赔钱，一样是赚了。您得想，买房的那位5年后装修成本可是一分都回不来，硬碰硬10W就没了阿。
好，上述是一种最低房租，那么最高呢？如果房租高于5791，我绝对考虑买房。为什么？因为(当然，得假定您有钱，或者能贷到100W)，即使贷款100W买房，过五年后，您把房子一卖，付出的费用比你贷款利率还低，不买房的就是白痴了。
于是，通过上面的论述，大家应该听明白了，房租和房价间存在相对关系。房租是短期房子供需的表现，房价则是长期的。那么我们通过上述论述，可以计算一下中国的房子租售比。具体过程贝壳省略，结论应当在172-298之间(其实就是千分之3.57917和千分之5.7917的倒数)。即，172到298个月的房租能买一套房是合适的。超过298个月绝对选择租房，低于172个月绝对选择买房。
如果房价涨跌呢？贝壳继续简化模型，也不论述计算过程了，设房价为A，其他参数同上，涨跌比例平均每月x，涨为正数，总体交易成本0.02(这个仅仅计算最基础的契税)。那么上下平衡截止点分别为[A*0.1/60+A*0.9*0.0255/12-Ax+A*0.02/60, A*0.1/60+A*0.9*0.055/12-Ax+A*0.02/60] = [0.003912-x, 0.006125-x]。当然，成本还有市场风险等等，先不说。
进而，贝壳考据了一下上海的房租和房价系统，各个地区虽然略有不同，但是其平均租售比无一例外都低于了千分之四，很多都逼近了千分之3.579，甚至极端的一些低于了千分之三。以贝壳调查的典型房为例，2500的寻租价格，90W的挂牌价格，租售比千分之2.778。也就是说，目前从理论上来说，租房比买房合算。前两年也是同样情况，对比一下上面的公式，贝壳只能说，大家都在看涨房子。那现在大家还有看涨房子的么？基本没有了吧？我们将上面的x设定为&amp;lt;0，即小于千分之3.9就可以租房子了。那为什么租售平衡还不向出租转移呢？
我们只能得出结论，一定有什么在整个模型中忽略的因素在阻止平衡的移动。阻止有三个方面的，价格，数量，风险，和习惯。
首先，我们说价格。如果贝壳的价格调查依据是错误的，房价偏高而寻租价偏低，有可能出现这种现象。或者在整个租房过程中有大量其他成本(水电煤和风险都另说了)，那么也可能出现这种现象。问题是，贝壳的调查数据是从二手交易挂牌和寻租挂牌来的，双方都是盘口上方数据，要高一起高。贝壳原来租房的经历告诉贝壳租房也没有什么特别的成本。因此，贝壳先排除了价格因素。
其次，我们说风险。由于房屋买卖风险高于房屋出租风险，因此也会阻止平衡的移动。这点来说，是符合经验的。但是风险是暂时的，如果说风险高的话，前两年买房的时候怎么就不怕了呢？
然后，我们说数量。可能由于某种因素，因此房屋的出售被限制。因此造成了平衡的破坏。这个贝壳完全不知道。
最后，我们说说习惯。中国人有给下一代买房的习惯，因此造成了房价的异常平衡。这也是符合经验的。不过我不知道，在大量的亏钱下，精打细算的中国人会先改变习惯呢？还是会先变的“不会精打细算”了。
那我们先抛开上一个问题，从实际角度谈谈买房和租房的运作。如果您打算买房的话，贝壳建议您先调查当地的租售比，还有租房者的构成，如果租售比在上述范围以外(当然，如果利率变化比例也会变化)，那么您需要进一步调查附近将来的变化。有些地方的租售比异常，可能是因为某些同志听到了风声，附近可能兴建某种设施(尤其是地铁站)，因此大量买入造成的。当设施新建完成后，房价可能不会变化。但是寻租者多了，因此造成租金上涨，租售比会渐渐回复正常范围。租房者的构成有利于判断附近的房子是否会跌价，如果大量都是浮动的外来人员，或者特定群体(例如奥运一族)，那么将来房子就可能因为某种因素跌价。
另外，就是当前房价是否正常的问题。贝壳不是学金融的，也不明白一堆很悖论的大道理。但是根据上述理论来分析，中国的房价大概要跌掉一半，这还是在当前低利率下。如果利率升高，理论上房价还会进一步下跌(不明白？贷款买房的人少了，卖房投资的人多了，能不跌么)。以贝壳调查的典型房为例，2500的寻租价格，90W的挂牌价格，按照0涨跌计算，房价应当是52W。差价哪里去了，我倾向于任正强的说法，政府那里去了。
也许有人奇怪，贝壳为什么从头到尾都在讲租房买房买房租房，不分析分析大势技术什么的？那是因为租房是房价相对短期的体现，比较少一些政策，预期的干扰，体现的纯粹的供和需的关系。贝壳不是专业的经济人，可以说就是平头小老百姓一个。数学还算过得去，但是讲专业经济理论，全球经济形势就立刻要了命了。租房这东西有人租，房价就高，没人租，房价就低。价格高低，就看你的量和有多少人能出这个价，干干脆脆明明白白。
同样，上面的东西见仁见智。也许专业的学者能提出无数意见，但是这就是我们小老百姓的盘算。</description>
    </item>
    
    <item>
      <title>笔记本选购不完全指南</title>
      <link>//blog.shell909090.org/blog/archives/58/</link>
      <pubDate>Thu, 02 Apr 2009 12:26:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/58/</guid>
      <description>这几年来，贝壳接触了不少电脑，并且经常被人叫去选购各种电脑和配件。其中最为复杂的就是电脑配置，因为电脑配置具有很强的可换性，可以根据需求精确定 制。喜欢A的CPU加B的主板？完全没问题，买了组装就是。回顾贝壳玩电脑来14年的趋势，组装机逐步的在驱除品牌机。95年的时候品牌机还有很大优势， 而现在只有公司才会考虑进品牌机。最主要的原因也不是出于性价比，而是资产管理和经营者的回扣。作为个人来说，找个信任的人配个配置，去电脑商场比价，讲 价，组装，大多数人都可以做到。而在维护上，遍布各地的维修点，电脑基础维护知识的普及，也大大削弱了品牌电脑的价值。但也因为电脑配置的这种灵活性，使 得电脑选购组装上的普及完全不可能。一个电脑配置单要考虑无数的事情，实在不是非专业人士能够处理的。反倒是灵活性略差的笔记本选购可以由非专业人士搞 定。今天贝壳就讲一下笔记本电脑选购上的几个要点，最近需要下手购入的朋友们，注意了。
首先一点，请先搞清楚你为什么要买笔记本，这有助于确定你要买什么笔记本。买电脑的理由有很多，工作学习娱乐都有可能。不过买笔记本的理由只有一个，移动 使用。如果你是因为地方太小，可以用小机箱加液晶和无线键盘。无论花费大多少，绝对比笔记本便宜。如果因为你有两个地方要用，可以买两台机器，配置同步， 也比笔记本便宜。如果要考虑不断电，那更简单了，一个UPS就可以解决问题。只有多个地方要用或者移动使用，才需要考虑笔记本。而对比买电脑的理由，一般 来说，娱乐是不需要移动使用的。因此我强烈的建议那些买笔记本的理由是打游戏的朋友，买个台式机。如果因为你懒，想在床上玩，请弄个无线键盘鼠标加上液晶 电视接口，或者干脆弄个桌子专门放你的液晶屏幕。无论是效果还是价格，都会比笔记本优秀很多。
而后我们说一下移动学习的问题，一般来说，贝壳不怎么推荐移动学习。要录音，请用MP3。要打字，请回宿舍。要计算，更不用非在餐厅或者教室里。一般来 说，要使用电脑的范围应当不会大于你的宿舍，但是贝壳倒是经常看到一些特例。因此，具体情况请自己分析，想想你是否真的需要一台笔记本。
另外还有一种就是混合应用，外出要学习，回来要炒股，父母打游戏，老婆买东西。这种混合型的应用是实际情况中最多的一种，通常具体情况很难分析，不过请把握上述的原则。只要不要带来带去的，请尽量考虑其他方案。
最后一种就是商务应用，无论是出于保密的原因还是出于方便的原因，贝壳都推荐使用笔记本。
按照上面的讲法，我们推荐使用笔记本的情况基本是三种，商务应用，混合应用，移动学习，还有少量的赶时髦分子。根据这几种原因，我们可以相应的确定你应当 买哪种品牌的电脑。通常而言，商务应用的主力就是Lenovo和Dell，几乎找不到其他机器。其最主要的原因就是这两种本本的商务气质。以Lenovo 为例，他的技术是收购IBM的，因此有很多非常有用的技术。包括指纹识别，硬盘防震，超长电池和增强型电源管理。这些技术有助于你在商务活动中避免为一些 意料外的事情耗费精神，例如窃取，数据丢失，没电（这是普通本在商务应用中最容易碰到的问题）。通常而言，商务本的定位价格有两类，一类是 8000-12000，定位基本就是对着Lenovo去了。另一类是4000-8000，基本就是Dell了。Dell的电脑价格便宜，服务也还不错。唯 一问题是总部设在厦门，一旦你发生需要返修级别的问题，需要回厦门处理。一次往返的时间和价格，有点配不上它商务本的定位。不过看在价格的份上，是否有吸 引力就是见仁见智的问题了。
做商务的同志们需要留心一类本子，通常我们称之为廉价本。价格在2000-4000之间，一般由国内的一些厂家出品。这里并不是说崇洋媚外，而是这些本 中，有相当一部分的是“看上去很美”的本子。配置也不低，和Dell本子4000的机器比也不丢人，价格却非常平易近人。但是，本子却相当的容易出现各种 小毛病。原因在于，一般生产中往往会出现一些有很小瑕疵的成品，我们称为二线产品，或者叫下线货。以这些零件拼装的电脑，价格当然便宜，也当然容易出问 题。一般而言，一流厂商一旦定位为商务本，自然会关注质量问题。如果是下线货，照例是不会用的。一旦出现质量问题导致客户损失，这无疑是拆自己招牌。但是 所谓廉价本，就是针对“坏了也无所谓”的客户的，只是可以肯定，他们不会这么宣传。如果买这种本子，一切问题自行负责。
如果是移动学习，贝壳反到会推荐廉价本。原因在于学生本身钱就不多，多资料损坏也不会太在乎（当然，关键资料还是自己备份起来的好），和厂家折腾几次更是 可以当作磨练。用一个方正或者神舟的入门本子，3000上下就可以挺个3-4年，直到你毕业。可能会坏个一两次，不过也没有什么太大关系。这想必对大多数 学生有相当吸引力吧？当然，如果你有钱，喜欢烧一个顶极的Mac来，那也是你自己的嗜好。
还有两类本子，贝壳分别称为鸡肋本和专用本。例如Sony的一些游戏本，双核，独立显卡，17寸，2W上下。买这种本子，要带的话不如弄个台式机背着，不 带不如弄个台式机放着。整个一个鸡肋。还有Mac的一些高端本子，就是针对图像处理和视频处理去的。你要专业到这个份上，自然会知道这些机器。你要不知 道，就是不够专业。（好——无语的逻辑——）
最后一类就是混合应用，这是非常多的一类，也是最难定义的一类。冲着什么本子去就看你的混合定位和要求最高的一个需求了。如果整个里面混合进一个高端商务 应用，恐怕就非冲着Dell或者Lenovo去了。如果全是看电影打游戏，弄个廉价本吧。如果要不间断的炒股，建议你弄两个本——我没在开玩笑。第二个本 可以考虑采用小型上网本(坚决不推荐某品牌)，价格才2000-3000。本子超小，方便移动应用。 另外就是自配件的估计，普通用户现在推荐160G硬盘，1G内存，准备好升级2G。高端用户建议250G硬盘，2G内存，准备好升级4G。上述估计适用于2009年上半年。</description>
    </item>
    
    <item>
      <title>夜飞临北京有感</title>
      <link>//blog.shell909090.org/blog/archives/57/</link>
      <pubDate>Thu, 26 Mar 2009 12:23:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/57/</guid>
      <description>我不是第一次在夜间坐飞机，但，我是头一次在夜间坐飞机的时候在窗口俯瞰中国的大地。不得不说，我彻底被惊呆了。
开始的一段时间，天上有云，黑漆漆的什么也看不见。但当飞过一段时间后，我在机舱里百无聊赖中随意向外一瞥，眼前却展现出一副瑰丽的景色。飞机不知道什么时候从云层中穿了出去，大地清晰可见。一条条的街道和街灯蜿蜒纵横，将黑色的大地切割成各种形状。有的地方灯光尤其密集，有的地方则疏散一些。远远望去，好似大地上的一块块斑纹。在一块一块的斑纹中，零星点缀着白色的灯光。虽然云层已经过去，但是下面仍有少量的薄雾笼罩在天上。薄雾散射灯光，仿佛在水面上倒映了天上的银河。我凝神细看，依稀可以看到一个街道上的街灯，映照在街道上的影像。这段道路前后都没有灯，不知道是坏了，还是根本就在山中。但是三两盏灯映照在道上，形成一个独立的，小小的天地。也许这是某个少年回家必经的道路，也许这是某个老人天天散步的场所。但是，无人知晓，我，这样一个天上客，在3000米以上的高空，偷窥着这个小小的世界。</description>
    </item>
    
    <item>
      <title>三月西湖游记</title>
      <link>//blog.shell909090.org/blog/archives/56/</link>
      <pubDate>Sun, 22 Mar 2009 11:20:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/56/</guid>
      <description>嘿嘿，跑来跑去做项目虽然辛苦，但是有一个好处，那就是有空的时候可以按照当地情况跑出去旅游。贝壳今天稍稍有空，出去西湖逛了一圈。
说到西湖，其实贝壳跑了无数次了。不过住的虽然近，但是岳庙和苏堤还都没去过。没去过苏堤和三潭映月，怎么能叫去过西湖呢？贝壳今天特意去了一次岳庙和苏堤。岳庙没什么好说的，只是门票稍稍有点不爽。25，说贵倒是不贵。不过我们来接受爱国主义教育还要自己买单，这个——倒置了吧？
苏堤就在岳庙的正门过去。贝壳刚上苏堤，就有人叫。今天真够凑巧，是贝壳在浙报的一个客户，今天也是陪人出来走走，正好碰到。杭州这个地方真的不大，今天就碰到了三个缘分。今天的风景果然应了某人的话，西湖美景三月天，春雨如酒柳如烟。按照此人说法，如果今天突然下雨，我就应该碰到一位姓白的女生借伞—— 问题是，我有伞阿。幸好今天没有下雨，否则就不是西湖美景，而是计算机产品的末日了。贝壳今天出门，就带了那台HPmini1017。不是多心哦，下面就用上了。
问题，苏堤中间有个醉什么亭，是醉什么呢？那个字很像是书字，贝壳没仔细看，差点还以为真的是醉书亭。后来有位老人就着话题讲起了古，这个字不是书字，而是春字。哦？贝壳掏出HPmini，架上蓝牙和GPRS，上网一查。这位老先生还非常有名(http://talkdream.blogbus.com/logs/3839413.html)，在google上找&amp;quot;苏堤醉春亭&amp;quot;，有至少两篇关于这位先生的blog。不过贝壳就着往下一看，差点笑喷出来。这个blog是06年写的，到现在已经有两年半了。这位老先生的讲话线索一点都没有变。浪漫的情人堤后面果然是关于矿泉水的问题，大家还是一如既往的一哄而散。贝壳凑上去，问问这位老先生的底细。他应当是住在西湖附近，以前经常跑到苏东坡纪念馆去看。后来扩建，原来的介绍内容全都变了。于是跑到苏堤上给人科普，顺便讨点矿泉水费。据说03年非典事发前还上过中央4套的节目。难怪他讲的都是苏堤，醉春亭，三潭映月呢。要跑上来一个阿炳，别说记得年代，就是阿炳的原名都未必记得。不过这位老先生毕竟是免费科普，矿泉水费也不是强要，也不是天天来。有缘的碰到没缘的拉到，碰到也算是个缘分吧。
贝壳在听完科普后，立刻上推，更新推，然后再上gtalk，散播八卦散播爱。(MSN上被我冷落的同学们，不是贝壳偏心，TMD只要用GPRS就打不开MSN)
而后，贝壳在花港观渔走了一圈，出门，发现——该死的杭州又堵车了。偏偏从苏堤南面到天目山路的所有车都会被堵，咋办呢？这个时候，贝壳就充分发挥了自己曾经被忽悠过所练出来的——地图通。查了一下google map，从龙井村过去不堵车。记得从龙井村过去是坐游三，到玉泉，玉泉坐15，到天目山回家。好，就这么决定了。
于是贝壳出了西湖，往西走。向着茫茫群山就走了进去&amp;hellip;当然，走没多远就看到了游三车站(大家请记住，这里的度量衡是以贝壳的标准衡量的，一起走过路的同学应该深有体会，尤其是高中同学，要是您也学着走，脚抽筋贝壳恕不接待投诉)。一路上山色真好阿，路旁还有不少喝茶的茶亭，当然，价钱估计便宜不了。实话说，贝壳很想带某同学的朋友到这里，直接自己泡茶自己喝，估计也很爽吧。估计游三路是杭州所有线路中山色最好的线路，有兴趣游览的同学一定不要错过！
最后么，当然，贝壳回家了，于是有了这个blog，事情基本这样结束。
真的结束了么？第三个巧合呢？
贝壳的一个朋友和贝壳说，她的一个朋友是贝壳的blog读者！OMG，今天是什么日子？</description>
    </item>
    
    <item>
      <title>要死的磁盘挂载</title>
      <link>//blog.shell909090.org/blog/archives/55/</link>
      <pubDate>Fri, 20 Mar 2009 16:31:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/55/</guid>
      <description>follow了我推的人应该都看到了，从昨天到今天，贝壳都在狂找U盘挂不上去的原因。贝壳的两个本子，一个T61一个HPmini，明明都装的Debian testing，两边的配置都一样，怎么就是一个可以挂载U盘，一个就是无权限呢？
贝壳首先进行了包检测，是否少装了包，结果没有。然后再进行了配置对比，也没有发现差异。而后，贝壳祭出了绝技，strace和dbg的调试。一跑，贝壳傻眼了。一台机器是AMD64，一台是i386。CPU和内核完全不同，导致整个行为没有一点可对比性。难道无法挂载是因为CPU的问题？
在贝壳长达10多小时的排查后，贝壳无意中打开了HPmini的fstab文件，发现一个让人绝倒的事实。贝壳的HPmini是从u-live上面镜像过来的。因此继承了u-live上面LABEL=live-ntfs /的设置。而亲爱的gnome-mount是会启用这个文件的——
结果，这就是贝壳悲惨世界的原因——</description>
    </item>
    
    <item>
      <title>上网本，UMPC，手机的混血</title>
      <link>//blog.shell909090.org/blog/archives/54/</link>
      <pubDate>Tue, 17 Mar 2009 23:13:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/54/</guid>
      <description>贝壳最近又手痒想败家了。对象是上网本，UMPC，或者HTC G1。不过以上三者都不怎么完美，要能结合起来就非常有诱惑力了。要是价格低点那就更——
不说瞎想了，就说说上网本，UMPC，G1的概念和对应客户。以及贝壳为什么想要混合以上几个东西。
UMPC是指和电脑具有类似构架，但是更为小型的电脑设备。当然，官方有更严格的规定，例如最低分辨率，触摸屏等等。UMPC和上网本的区别主要就是官方的几个内部规定，满足就是UMPC，不满足则是上网本。但是对贝壳来说，不管这些，好用就好。贝壳希望的机器，具有7寸的触摸屏幕，对应的键盘。这样的话，贝壳可以用键盘来操作电脑(熟悉的人应该记得贝壳的快捷键使用和单手操作电脑的绝技吧)，并且触摸屏可以剩下一个触摸板的空间。
但是，仅仅以上条件却不能让贝壳满意。为什么呢？首先是因为体积。现在的上网本经典大小是230x160x30，这么大的一个家伙，就算带出门也够当板砖用了。其次，这东西不支持SIM卡插槽，这造成了非常麻烦的问题(当然，支持恐怕是更麻烦的问题)。贝壳无法通过这个本来直接上网，打电话，管理电话。
其实，后者的特性主要是针对HTC G1去的。现在的手机基本已经相当的智能，但是却有两个先天的问题。一个是没有能让人用起来很爽的键盘！这样写起程序来非常费劲(旁：汗—— ..-_-||||，手机上还不忘编程，真TMD是程序员)。其次是构架不同于经典的x86构架，扩展和使用程序都非常不方便。
如果一个本子，有200x150x30的大小，0.8kg上下的重量，支持SIM卡插槽，支持触摸屏幕，使用SSD硬盘。还可以标准的安装debian，使用linux下的各种程序。那基本就是贝壳梦想中的本子。当然，如果价格能在3000以下更好&amp;hellip;.贝壳可以拿这个本子到处跑(虽然体积还是个问题)，到处写程序看电影看小说都不成问题。还可以打手机(那可以直接从thunderbird中拨出阿～～)，GPRS上网(TMD混蛋中国移动，现在 3G还没出来呢)。
当然，现在很多手机基本也可以实现上面的功能，除了一个标准尺寸的键盘外。但是可惜的是，这些手机的系统都不是标准的系统，一般用户是无法重写和定制的。如果按照刚刚的方案来定制，那么整个机器上跑的就是一个完整的系统，甚至可以跑一个XP起来。稍微定制一下就可以当手机专用系统用了。像贝壳这样的编程人员更可以方便的给手机编程，来扩展手机的功能。
还有更好的一个方案，就是将手机回归原始。使得整个手机除了电话和短信外，什么功能都没有。而后给手机指定一个标准接口，在需要进行复杂应用的时候，直接插在上网本的外面当外接设备使用。这样手机的屏幕和键盘都可以极度精简，体积小巧方便使用。接入电脑后，非常方便的可以浏览网页，观看电影等等。其实本质上就是一个强大的手机(当然，要用经典构架)外接一个大型(相对大型)的显示器和键盘系统。</description>
    </item>
    
    <item>
      <title>Remember The Milk</title>
      <link>//blog.shell909090.org/blog/archives/53/</link>
      <pubDate>Mon, 16 Feb 2009 21:43:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/53/</guid>
      <description>这是篇广告文。
不知道你有没有听说过GTD？我长话短说介绍一下，如果你每天都有成堆的事情要做，经常忘记做什么事情，每天都在焦虑是否有什么被忘记了。或者你经常被意外的事情打断，无法顺利工作，甚至忘记正在做什么，那么你真的需要好好看一下Get Things Done这本书。这本书的主旨在于推荐你一种生活方式，一种不需要焦虑是否忘记了什么的生活方式。他的步骤很简单，最少只需要纸和笔就可以进行(当然，贝壳推荐用电脑)。如果你需要做什么，用纸记录下来。做好一件事情，用笔划掉。每隔一段时间，回顾一下，什么事情还没做，什么事情拖沓了，哪些事情应该先做，哪些事情应该后做。简单来说，就是Todo List。
那么Remember The Milk(下面简称RTM)好在哪里，值得贝壳特意推荐呢？事实上，贝壳在GTD上换过不少工具。Mozilla Sunbird，太庞大，要用的时候老去开笔记本？gtodo，很小巧，问题大同小异。Rainlendar，很漂亮，显示还不错，Todo List就碰到了一样的问题，贝壳总不能天天开着笔记本走路吧(虽然实际情况差不多)。Google Calendar，倒是非常好，行事历丰富，支持短信提醒，同步选项众多。Outlook，Sunbird，Rainlendar，甚至可以直接同步到手机上(不知道的同学，请参考GooSync)。但是有个致命缺陷，无法将事件标记为完成。这样要表示完成就只有删除事件，导致无法回顾。因此，贝壳最终选择了RTM，配合Google Calendar使用。
贝壳已经将RTM设定为主页，这是贝壳的第二个主页，头一个是iGoogle，可惜做到后来太杂乱无章，废弃。每天贝壳空下来了，跑到RTM上，看看今天需要完成什么事情。如果有突发事件(例如你在写论文的时候突然需要找一些资料，有人突然说贝壳来一下)，那么评估一下突发事件的状态。一般来说，如果突发事件没有上下依赖关系，没有回顾的必要，没有突发中的突发(这是最主要的)，那么完全可以不用记录。否则你需要先记录突发事件，将他标记为最优先。如果不这么做，当再次发生突发事件的时候，你要么补充记录上一个的，要么就会忘记事情。一般来说，10分钟以内可以处理掉的事情是很少被再次打断的。当然，如果可行，贝壳推荐突发-延后的处理方式。就是说，当突发发生后，将突发要处理的目标记录下来(例如，12点前去客户那里一下)，标记为最优先，然后接着处理当前的事务。这样一般只会中断1分钟的思考，不会造成记忆的混乱，你的工作可以顺利的继续下去，不会受到各种因素的干扰(当然，必须先处理例外，例如：贝壳来一下)，也不需要担忧忘记事情。
如果在不能开机的状况下，例如路上，贝壳优先考虑使用RTM的mobile版本。如果不行，那只有记录在写字本里面，回去补充。而后，每天晚上，贝壳会翻看一下今天的记录，看看明天有什么需要做的事情，哪些优先，哪些可以推迟。如果有空，可以做什么计划好的事情。等等等等。那么同学们会问了，Google Calendar呢？
GC可以和RTM结合，从而看到RTM的事件列表(方法就自己gg吧，贝壳不废话了)。当然，这只是有限的结合，意义并不大。GC真正的意义在于方便的和手机同步，从而对固定议程，重复议程有很好的显示和提醒作用。例如记忆生日，提醒周报，记忆飞机等等。这个和RTM的GTD并不冲突和重复。</description>
    </item>
    
    <item>
      <title>磁盘对倒迁移</title>
      <link>//blog.shell909090.org/blog/archives/52/</link>
      <pubDate>Thu, 12 Feb 2009 15:40:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/52/</guid>
      <description>贝壳的本本坏了。
Acer的质量真不怎么的，只是正常使用而已，买来不到一个月就返修。费时费力不说，还差点因为IWT的问题无法修理而要付钱。结果刚刚过保半年，总共买了一年半后，坏了。
趁机问老板要了一台ThinkPad，虽说联想的做工不如IBM，不过依旧非常舒服，不愧是商务王者。但是，贝壳原来在笔记本上配置的复杂到死的系统，要是在新机器上一一重装的话，费力先不说，项目肯定是无法按期完工了。
贝壳修旧机器的时候，拆下了硬盘和电池。这里顺便提醒送修笔记本的同志们，记得拆下硬盘和电池。硬盘是你机要数据的所在，将来要恢复系统就全靠他了。而电池——到时候要是发现电量少了，这种东西谁都说不清楚。所以还是拆下来的好。那么，最低限度的，要从旧硬盘上读出数据，否则很多东西完全无法运作了。所以——贝壳找人借了一个移动硬盘盒。嘿嘿，这种东西可以将笔记本的SATA转换成USB使用，从而在新电脑上直接读取旧电脑数据。
为了不重装电脑，贝壳决定在新电脑上直接使用旧电脑的系统。将旧电脑的数据整个复制到新电脑上，就是俗称的磁盘对倒。下面是一个关键的问题，是重建文件系统，然后复制数据好呢？还是直接镜像整个系统？如果是复制数据，相对的数据清晰干净，但是容易发生一些莫名其妙的错误。如果是整个镜像，对了错一并带入新系统。贝壳在这里选择比较保守的方案，镜像整个磁盘。
首先贝壳从U盘启动(刚刚做了U live debian，冲着拯救去的系统，不知道是说幸运呢，还是乌鸦嘴呢)，而后删除原有磁盘的所有分区，输入dd if=/dev/sdc of=/dev/sda，将整个磁盘复制到新电脑上。这里注意，贝壳没有设定区块大小，因此速度比较慢，正确的设定大小有助于加速复制。贝壳的数据是 120G(因此向公司申请的电脑最低是120G硬盘)，复制速度是10M/s多一点，复制时间大约是3小时15分钟。从晚上9点一刻一直到晚上12点半。在完成复制后，直接重启，从硬盘启动Linux，成功！
在几乎没有任何干预的情况下，Linux就可以开机成功，不得不说这给了我很大信心。然后我去启动windows——不动。
贝壳被迫回到了Linux，仔细调试驱动，设法最快的弄出一个可用的系统。下面详细记录了ThinkPadT61上安装Debian的全过程，有兴趣的可以看看。至于六牙四皂和某猫小姐就可以跳过了。
首先贝壳调整了复制后的硬盘上的分区。由于分区表是按照120G的时候计算的，因此新硬盘上的分区使用不足。启动gparted调整大小后，sda6占用了全部新增空间，暴增到200G。而后贝壳开始查看pci设备和驱动。
# lspci -nn 00:00.0 Host bridge [0600]: Intel Corporation Mobile PM965/GM965/GL960 Memory Controller Hub [8086:2a00] (rev 0c) 00:02.0 VGA compatible controller [0300]: Intel Corporation Mobile GM965/GL960 Integrated Graphics Controller [8086:2a02] (rev 0c) 00:02.1 Display controller [0380]: Intel Corporation Mobile GM965/GL960 Integrated Graphics Controller [8086:2a03] (rev 0c) 00:19.0 Ethernet controller [0200]: Intel Corporation 82566MM Gigabit Network Connection [8086:1049] (rev 03) 00:1a.</description>
    </item>
    
    <item>
      <title>回京感想</title>
      <link>//blog.shell909090.org/blog/archives/51/</link>
      <pubDate>Sun, 08 Feb 2009 23:18:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/51/</guid>
      <description>昨天临时接到通知，贝壳周五(二月六日)要去北京出差。具体情况不多说了，不过——贝壳要回老家了。可一年半没回去了阿——
早上5点半从杭州的宿舍出来，赶7点半的飞机。打车走了快一个小时，杭州的机场确实也够远的。师傅紧赶慢赶总算给我提前40分钟赶到了机场，离停止办理手续只有10分钟。这点住北京就很有优势，出门10分钟就到机场。6点半起床，赶8点的飞机绰绰有余。飞机很顺利，事情很顺利，贝壳就不多废话了。唯一的插曲就是贝壳的linux不支持投影仪，搞了半天总算在老板的机器上成功演示。
别的不多说了，就说说北京的风景吧。多了一堆莫名其妙的建筑，其中多数是政府机关的办公楼。贝壳原来认得的地方全都不认得了，鼓楼，宣武门，东直门，也就长安街还保持了一点原来的风景——当然，不算那个巨蛋的话。东直门改的面目全非，斜街那里完全看不到了，建了一个什么汽车中心。西单图书大厦已经快7年没去了，门口那堆书的摆设还在，但是被围起来不能坐了。西单文化广场被修的光怪陆离，完全看不出原来的样子。灵镜胡同没去，不过想必也不复旧观。
贝壳干完事情，被放到了丽都。本来准备和几个高中同学聚聚，可无奈前天才刚刚接到通知。刘江陵同学和佟国美同学非常义气的回了消息，不过很遗憾的，都没赶上机会。李鸿国比较忙，就不说了。老猫直到贝壳快闪了才有反应，够迟钝的。贝壳最后无奈的决定，不去顺义了，直接去机场，第二天可是8点的飞机。丽都旁边贝壳只认得915，那是去顺义的。所以贝壳弄了部车去机场，走的是附路。
机场附路，算算可是有年头没走了。自从在牛栏山上学以后，京顺路通了，附路修路。贝壳就主要坐915去北京，很少走附路了。现在的附路路面都翻修过，比原来顺了很多。运河上的桥还是那个老样子，不过有一段因为要修轻轨，因此被重修了。到了机场，贝壳碰到了一件非常囧的事情，贝壳被锁在家门外了。算算都26的人了，居然还会碰到这种问题。家门口等家长回家，又不是小学生。不过无奈的，贝壳就碰到了这种事情。老妈去上海探亲，老爹上班。大老远的从上海来北京出一次差，居然被锁在了自己家门口。无奈，贝壳出门转一圈吧。
从家里出来，贝壳绕着机场走了一圈。发现机场多了很多小店，建筑也被翻修过了。想必是为了迎奥吧，机场这里是最敏感的地方。唯一没变的就是机场高速的收费站和贝壳的破窝。呆在小时候常爬的假山旁边，不出意外的发现当初奋斗(真的是奋斗，贝壳小时候很胖)很久才能爬上去的山顶差不多就是一伸手的距离。公园的松树还在，前面的大广场却没人跳舞了。工人文化俱乐部(原来唯一的作用就是放电影，我们过去常常在这里看)被改成了XX货真价实的俱乐部，上了金色的招牌，不过恐怕就和工人无关了。最大的变化是贝壳的小学，机场二小，永远的消失了，变成了94中机场分校。估计是机场这里去94中的太多了，干脆弄个分校过来，省得费力。家后面的一排树全推了，改成了通向三号航站楼的大道。
坐在家门口的公园旁边，贝壳感觉五味沉杂。这么多年在外面，始终觉得自己是个过客。没想到到了自己家，才发现家已经不再是从前的样子，自己还是过客。上次出差，呆了两个月。这次出差，呆24小时。贝壳始终来来去去，来了又走走了又来，到底哪里才能停下呢？</description>
    </item>
    
    <item>
      <title>MSN Space可以通过邮件创建</title>
      <link>//blog.shell909090.org/blog/archives/485/</link>
      <pubDate>Fri, 30 Jan 2009 00:51:34 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/485/</guid>
      <description>听说MSN Space Blog可以通过邮件创建，今天测试一下。
如果大家正确的看到了这段内容和前面的缩进，可以试试通过邮件编写blog。对于经常出差离线写东西的人很有效哦。</description>
    </item>
    
    <item>
      <title>牛年快乐</title>
      <link>//blog.shell909090.org/blog/archives/484/</link>
      <pubDate>Mon, 26 Jan 2009 07:59:04 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/484/</guid>
      <description>过年了过年了
祝大家牛年快乐，万事如意
贝壳敬上</description>
    </item>
    
    <item>
      <title>24点计算原理和程序</title>
      <link>//blog.shell909090.org/blog/archives/50/</link>
      <pubDate>Tue, 20 Jan 2009 14:49:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/50/</guid>
      <description>最近开心上狂算24点，于是贝壳搞了一个24点计算程序，并且说明原理。
我们将24点问题一般化，变成一个搜索问题。假定从一个初始表开始，里面有一些原子。我们定义一个操作，结合。每次操作任意从中选择出两个(或者以上)原子，使用算符连接，成为一个新的原子。那么，一般来说，24点就是计算所有可能的路径，从初始表开始，持续进行结合，直到只剩下一个原子，并且对这个原子求值得24。
有人可能在算符优先级上想不开，其实不用考虑这个问题，每次求值的时候，按照求值顺序优先就可以。你想到的另外一种优先级可能，会在穷举的时候被列举出来算掉，不用担心遗漏。
同时，算子必须是两目以上算子，因为单目算子可以持续作用于同一个对象，因此原子表中的原子个数并不严格单调减少，造成无法肯定路径收敛于有限步骤上。并且，如果允许单目算子，那么我只需要求导和阶乘就可以对任何数字求24点。
((a&#39;)!+(b&#39;)!+(c&#39;)!+(d&#39;)!)!=24 因此，单目算符是没有意义的。
另外，注意算符分可交换和非可交换的。例如：a+b=b+a，但是a-b!=b-a。如果不注意这点，倒是不会漏算，但是会造成搜索空间增大，并且有重复结果。
以下是24点计算程序，python版本的。有兴趣的朋友可以用scheme重写，相信会更简洁有效。回头会用django封装一下，做成网页给大家玩玩。
#!/usr/bin/python import sys symbol_list = [ (&amp;quot;%s+%s&amp;quot;, True), (&amp;quot;%s-%s&amp;quot;, False), (&amp;quot;%s*%s&amp;quot;, True), (&amp;quot;%s/%s&amp;quot;, False), (&amp;quot;%s**%s&amp;quot;, False), ] def diff_seq(length): for i in range(0, length): for j in range(i + 1, length): yield (i, j) def get_less_state(input_state): for i, j in diff_seq(len(input_state)): temp = input_state[:] del temp[j] del temp[i] for s in symbol_list: rslt = s[0] % (input_state[i], input_state[j]) rslt = &amp;quot;(%s)&amp;quot; % rslt temp.</description>
    </item>
    
    <item>
      <title>论同时的双系统－－准虚拟对双系统的进一步扩充</title>
      <link>//blog.shell909090.org/blog/archives/49/</link>
      <pubDate>Mon, 12 Jan 2009 01:04:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/49/</guid>
      <description>熟悉贝壳的人都知道，贝壳是个linux爱用者，不过因为工作关系，经常要使用windows。贝壳在自己的笔记本上使用了linux/windows混合双系统，并通过共用磁盘的方式共享数据，解决这个问题。但是长期的使用表明，这种解决方案存在几个巨大的瑕疵。首先是系统切换时间常，因此长期在一个系统中工作，而很少触及另外一个系统。其次是稳定性差，windows下一旦崩溃，进入linux后就需要检测数据盘，80G的数据慢慢扫描，感觉晕到死。那么是否有一种方案，能够同时使用两个工作级系统（注意，不是实验级，贝壳成功的在windows下的vmware里跑了一个oracle，这个可以说是实验级的典范。然而工作级系统的要求和实验级完全不同）。
从系统发展史的角度来说，我们可以预见，将来的系统将是脱离硬件的。首要的原因就是和硬件不相匹配的各个层级的计算能力需求。现在系统发展有两个极端，一个是虚拟机，试图将一个硬件整体分离，运行多个系统。另一个是高性能集群，试图将多个硬件合并，运行一个系统。从根本上说，这是因为高性价比的硬件集中在了一个性能区间，而实际的性能需求却是完全分离的，因此我们才会出现如此两类完全背离的需求。而现在有大量宝贵的人力浪费在了系统和硬件结合，系统稳定性问题上，这无疑是对将来发展的一个巨大瓶颈。虽然无法预知将来的技术发展会以何种方式解决这个问题，然而可以预见的是，解决硬件和性能的背离将是人类计算机发展史上一个重要的里程碑，解决这个问题的人必定会在计算机历史上留下重重的一笔。
同时，更进一步，贝壳揣测，将来的解决方案将是系统硬件调度/驱动和系统软件管理分离。一个软系统拥有一个用户表和一个硬件表，硬件表上写他可能有10个键盘，两个显示器，或者一堆其他设备。系统借助某个可信方案，管理了一系列虚拟抽象设备和真实设备形成的映射。作为系统层以上的软件，我们只要关心如何操作这个虚拟设备即可。而实际上，我们可以通过管理参数和对应关系实现各种需要。例如我们可以将多个机器的硬件管理核心加入一个系统，形成集群。或者我们可以在一个机器的硬件管理核心上加入多个系统，形成虚拟机。这个基本是分布系统的观点。如此一来，系统层软件就无法得知也无需得知自己是在到底运行在什么环境下。只是这个系统设计方案对高性能要求的子系统（主要是显卡）相当不利。
从揣测回到现实，为了实现一个工作级系统（幸好，还不是工业级），我们需要为系统制定一些评判标准，以判别各个方案的优劣。我们首先能想到的评判标准就是速度，一个慢吞吞的系统解决方案是没有任何实用价值的。当然，这个速度是有差异的，可能是linux快一些，windows慢一些，或者相反。我们假定实际的需要是windows快一些，因为linux可以通过定制进行加速。
我们的第二个评判标准就是稳定性，经常会崩溃的系统不比慢吞吞的系统好到哪里去，甚至会更加让人讨厌。虽然工作级系统并没有工业级那样高的要求，然而高负荷稳定，宕机平均频率低于3天/次还是要保证的。而后我们还希望两个系统可以做到数据互通，即两个系统间的数据尽可能的共享，至少要做到文件和邮件的共享。最后，我们希望解决方案简单易用，便于实施和维护。
而后，我们列出了一个原始方案，和以下几个改进解决方案，并给出优劣评价，谨供大家参考借鉴。同时我们在其中还补充了一些无法实际解决问题的虚拟化解决方案，并且说明无法使用的原因，供适合的人自行选用。
原始方案，windows+linux+数据分区。此种方案是最中规中矩的，性能最高的方案。具有对硬件最好的支持，最容易的维护。如果需要运行游戏（尤其是魔兽，WOW），这也是唯一可行的工作级方案。稳定性评价属于尚可，主要由于ntfs在linux的稳定性并不好，ext3在windows需要使用非官方驱动，和某些（就是avast）驱动不兼容。数据互通比较方便，通过数据分区可以轻松的共享文件和邮件。
windows虚拟方案，vmware+虚拟分区。这种方案是改进方案中唯一可以跑游戏的，因为虚拟机随时可以关上。性能上满足windows快 linux慢的要求，虚拟系统显示性能良好，也可以通过文件共享部分的解决数据共享问题（文件共享方便，邮件共享困难）。稳定性很好，基本没有什么不稳定的问题出现，操作和维护都不困难。然而之所以一开始这种方案就被排除在外，主要是因为这种方案无法让linux驱动实体硬件，无法通过机器启动。这样也许对一些跑起来玩玩的人或者是内核工程师/测试员比较有用，然而如果要在linux里面进行大量工作，编译程序，运行服务，这种方案就力有未逮。因此这个方案可以说是一个实验级方案，而非工作级。
windows虚拟方案，vmware+实体硬盘。速度一般，windows快linux慢，基本和上面一个方案一样，唯一的区别就是linux也可以被实际驱动。然而这也成了整个方案的最大败笔，因为linux的驱动灵活性不如windows，因此无法经受这种系统切换的动作。举例来说，真实的机器上，硬盘是sata的，作为sda识别和使用。而虚拟机上则是IDE的，被识别成了hda。于是启动环境一变，就需要修改大量配置来调和这个问题。又例如，在真实机器上，X使用fglrx驱动，而虚拟机下面要用mesa。如果我在/etc/xorg.conf中不指定驱动，那么真实机器的驱动也会变成 mesa，导致性能下降。如果指定驱动，又会导致虚拟机内X无法运行。诸如此类的问题林林总总，需要大量细节修正，因此维护复杂，稳定性差，不建议正式使用。在贝壳机器上更严重的，出现了虚拟机内和虚拟机外争抢数据分区的状况，这种情况下数据分区实质是被当做盘阵用了。使用非专用的磁盘作为底层共享存储，并在上面运行ext3系统，这是及其危险和愚蠢的。
linux虚拟方案，xen。速度超快，但是上来就在贝壳的机器上暴出几个问题，因而没有继续测试。首先是安装xen后x无法启动，出现fglrx驱动无法加载的状况。其次是xen要求使用虚拟盘启动，可贝壳经常需要跑到windows下面打游戏。因此在简单测试后被剔除出局。感觉这种方案的最大问题在于配置管理太过复杂，debian下面已经很轻松了，只需要安装对应内核，使用工具建立虚拟机，但是依旧感觉麻烦到一塌糊涂。相信这种方案在专业级服务器领域应当有不俗表现。
linux虚拟方案，openvz。这种方案压根就不适合贝壳的状况，因为这个虚拟方案要求宿主和客户必须是同一CPU同一系统（不要求同一linux发行）。主要用于希望将一个主机切分成多个独立的同构主机，以达到分离管理的目的（例如业务服务器和数据库服务器分离）。需要做大型网络管理/虚拟主机业务的人可能会对这个虚拟方案感兴趣。
linux虚拟方案，vmware。速度一般，linux快windows慢，视频效果不错。vmware毕竟是商业公司，视频驱动挺齐全的。但是内核驱动的编译麻烦到死，首先是要求编译器版本和主内核编译器版本一致，于是贝壳去搞了个gcc-4.1，然后连接了上去。下面又是内核头定义出现版本差异，搞到现在还没有搞定。谁能搞的定的给个参考，最好是debian上的解决方案。
linux虚拟方案，kvm。这个是贝壳目前使用的方案，基本比较理想。速度很快，和xen基本差不多，显示速度不如vmware（理论上说装好显卡驱动应该会好点，不过贝壳找不到CLDC5446的XP驱动，那是Win32和Win95时代的显卡）。linux快windows慢，但是还在可忍受范围内。稳定性很好，只要测试通过，运行中到目前为止没有死机（当然很多参数是加了之后开机即死机）。数据可以通过samba互通，邮件也同样可以互通。然而使用samba无疑复杂很多，而且性能并不太好。只是从稳定性上说，让linux自己去驱动ext3总比半吊子的windows驱动更好，同时也不会出现争抢的问题。易用性上还算可以，无论是内核编译还是系统使用都不太难，最大的麻烦就是网络配置。根据贝壳的测试，在真实机器上superpi运行100W 位需要45秒，虚拟机内需要54-60秒，尤其在换用kvm-72.2后反而更慢了（54下降到60，折合真实机器83.3％下降到75％）。
总体来说，贝壳更倾向于使用全开源的准-全虚拟解决方案kvm，主要因为他简便易行，对系统影响小，不改变现有系统。同时性能高，稳定性好。主要需要解决显卡效率问题。如果以上问题无法彻底解决，贝壳打算换用linux下的vmware，想办法搞定他的内核模块。</description>
    </item>
    
    <item>
      <title>新年快乐</title>
      <link>//blog.shell909090.org/blog/archives/481/</link>
      <pubDate>Thu, 01 Jan 2009 09:01:24 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/481/</guid>
      <description>废话不多说了，新年快乐。
TMD想找个人说新年快乐也找不到，全出去Happy了，真该考虑找个女朋友了。
另外，专门在Linux里开个虚拟的Windows来写这个东西——鄙视一下微软的产品对Firefox 4 Linux的支持。另外，真TMD的复杂，真浪费。</description>
    </item>
    
    <item>
      <title>emacs简介</title>
      <link>//blog.shell909090.org/blog/archives/48/</link>
      <pubDate>Wed, 17 Dec 2008 11:14:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/48/</guid>
      <description>emacs一定是我梦想中的编辑器，设计者一定是个超级的混蛋。
emacs是一种多平台的编辑器，具有非常古老的历史，和vi一起并称为黑客常用两大编辑器（在贝壳学习linux后，就“顺带”学习了vi——因为根本没有其他选择）。作为编辑器来说，他只接受文本编辑，但是却具有收发邮件，编译软件，调试程序，甚至煮咖啡等各种诡异的非正经功能。很多人疯狂的热爱他，认为他是人工智能的结晶，化妆成编辑器的操作系统。但也有人疯狂的咒骂他，认为这东西纯粹就是折磨人用的。贝壳这次的blog，就是侃侃emacs到底是什么。
说emacs是人工智能平台，其实这个说法并没有错。emacs的运作机理和我们通常的编辑器都有不同。通常来说，一个编辑器可能有多个windows啦，frame啦什么的，但是最终作用于一个文本。你可以添加，删除，修改，或者标记一段文本，进行剪切，复制，粘贴等动作。设计比较完善的还有回退和重做。让我们专注于其中一个任务，例如，删除，看看我们的编辑器是如何工作的。
以notepad++为例吧，在选中一段文字删除的时候，你可以用键，同样，如果没有选中文字，这个键作用于当前光标后面的一个文字。（在此我们不讨论和前后删除的关系）这很简单，一个内容，按删除，就没了。但是你是否注意了这个过程本身，为什么按下是删除，为什么不是按下键或者键？
按照程序员的思维来说，编辑器的基础是一个文本内容和一个光标（或者说一个position），我们通过修改数据结构变更这两者以达到某种目的，这个过程被称为操作。例如，作为删除操作，我们移除（remove）了文本内容的position处的字符。而后，我们将这个操作（也可以称为函数）绑定到键上。于是，我们在按下键的时候，触发了删除函数，导致内容被删除。这个是能够删除文本的核心过程。从正常人思维的角度来说，一般我们都会将这个功能绑定到上面，而不会是或者，或者其他更疯狂的键。同样的机理，我们按下，文件存盘，是因为存盘的功能被绑定到了这个键上。好的编辑器一般带有键绑定修改功能，notepad++就可以自行修改热键。而emacs则更进一步。
emacs允许你自行编写扩充函数，并且将这些新的函数绑定到键上，这样就赋予了编辑器无限的可能性。例如，你可以写一个过程，每次触发就在当前光标处插入当前时间对应的纽约时间。或者你可以写一个过程，自动根据一个预定义的数据表格补充你输入人名的头衔。可以想象，当你需要重复单一工作时，这种扩充能力是非常重要的。你可以免除记忆一堆领导的详细头衔，免除重复输入，免除繁重的劳动，只要你编写一次扩展程序，并且绑定到某个键上。然而现在编辑器的趋势是，我们使用编辑器从事各种不同的工作。有的时候，我们用编辑器记事，有的时候用来写程序，有的时候用来看源码。因此我们对编辑器的个性化能力和强大都没有要求，反之对编辑器的标准化要求很高。说的更通俗点，我们不需要自行扩充一个插件来省事，但是我们一定要用来复制，用来粘帖。因为我们（指普通用户，而非以电脑为生的专业用户或者是变态的geek）不会程序，或者不喜欢为了某个目地花费时间来编写程序，毕竟现在不是70年代，当时接触电脑的都是智力最高的一帮变态。现在接触电脑的都只是普通用户而已，我们不需要强大的扩充，但是我希望我用一个编辑器的时候，这些基本功能在另外一个编辑器上不会产生区别。从这点来说，emacs差劲透了。
emacs的键绑定是根据上世纪70年代unix下（那时候linus都没出生，何况linux）的键盘来的，因此emacs假定你有一个Meta键。这个键在今天的电脑上已经找不到了，我们用Atl来替代。但是同志们，Atl是系统键，这么替代是有副作用的。例如自动补齐的函数热键是M-Tab，但是请试试在windows下按Atl+Tab。亲爱的，你会跳到另外一个程序上。那是windows切换程序的热键。还有我们经常用来复制，来退回。可是在当时的linux下，代表终止程序运行，代表挂起程序到后台。emacs当然要避免这两个热键，于是——你自己试试在emacs下按这两个热键的结果吧。
从热键约定的角度说，emacs是当之无愧的最差编辑器。不过这个很难怪罪emacs，毕竟他出生的年代不用说windows，连dos都没有出生，cp/m还只是个样品。要怪只能怪windows的设计人员在考虑热键的时候根本没有考虑emacs的现有标准，自己瞎设计一通（尤其是最常用的，虽然从人机工程角度这个是最合适的键）。
emacs更强大的特性是，可以根据当前文件的特征鉴定文件类型，并且采用正确的模式。例如，我可以在python模式下编写python程序，在C++模式下编写C++程序。对于用户来说，这两种模式看不出区别，然而他们本身有着非常多的细节不同。例如，在C++模式下，/**/是注释，而python下，#才是注释。灵活的模式允许你使用同样的方法操作不同类型的文件，并且还具有各种扩充。对于C++，他可以编译，对于python，他可以校验。并且有一些比较常用的超级扩充，例如etags。这个程序可以用来生成一些文件，帮助你找到一个符号的位置。利用这个扩充，你可以快速的寻找符号位置，自动完成，等等。这些近几年才在VSIDE和eclipse里面出现的特性，早在数十年前就出现在了emacs里面。
如果你有程序基础，并且长期从事相似的工作，例如写程序，写文档，并且有很多重复的工作，希望解放自己的劳动力，那么推荐你使用emacs。如果你是个找酷的新新人类，希望找一个很少人用的编辑器，具有真正酷的特性，被很多人称赞，那么建议你用emacs。除此外的人，请珍爱生命，远离emacs——这东西太容易上瘾了。~~~~~~~~~~~~</description>
    </item>
    
    <item>
      <title>U盘启动</title>
      <link>//blog.shell909090.org/blog/archives/479/</link>
      <pubDate>Mon, 15 Dec 2008 16:34:28 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/479/</guid>
      <description>hihi
大家看过血色星期一没有？那里面有个家伙用随身的U盘当系统带来带去，很酷哎。
贝壳也有个U盘系统盘，做过使用/分区隐藏/Linux启动/密码访问控制，但是基本用不上，首先一个原因就是――太慢。
KST的2GU盘读写速度是5/1.5，貌似用来启动个30多M的系统也够了，可是加上各种检测，时间就远远比硬盘长，而且长很多。所以贝壳正在寻思，什么时候弄个高速(起码要10M)U盘来当系统。分个2G给linux，足够他跑X了，连带编译器什么都可以加上去。
不过在这之前，首先要搞定系统启动问题。混蛋的grub在U盘启动的时候不稳定，一会把U盘当hd0，一会把硬盘当hd0。可以想象，系统启动的时候每次都要手工确认，这种东西鬼才高兴用。而且U盘系统有的时候开关机不稳定，半路死机ext3就损坏，又要拿debian来扫。ext3损坏本来没什么，可是hd识别又出现变化――变的像死机一样。TMD这种鬼环境，加上600M的空间，会用才有鬼了。
先解决这个问题，然后弄个8GU盘来装酷，就这么决定了。
另外，血色星期一的设定弄的很不错，系统是linux(估计是定制的)，里面用的是python(就是听说用这个语言才去看的)。不过入侵的时候时间和动作都搞笑了点。真正的入侵往往耗时数天甚至数周，而hack高手也不是拿一堆脚本去淹死服务器的家伙。能够从别人认为完美的地方看出破绽才算入门，而能够从逻辑层面升华到理论的才算是大师。</description>
    </item>
    
    <item>
      <title>杭州，火车，咖啡厅</title>
      <link>//blog.shell909090.org/blog/archives/478/</link>
      <pubDate>Fri, 12 Dec 2008 01:13:32 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/478/</guid>
      <description>贝壳，黄昏，杭州，城站火车站旁，上岛咖啡，红烧牛肉饭，充电，无线上网，博客，大家，好玩吗？</description>
    </item>
    
    <item>
      <title>竞价排名和不作恶</title>
      <link>//blog.shell909090.org/blog/archives/47/</link>
      <pubDate>Sun, 23 Nov 2008 22:58:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/47/</guid>
      <description>前两个月贝壳才刚说到百度的竞价排名，果然，这回又出问题了，而且还出的很好笑。
央视曝光了百度竞价排名中的一些问题，主要是有很多医疗信息，百度并没有核实来源。此后，百度总裁李彦宏声称，法律没有要求百度对付费信息负责。从法律角度说，这是对的，我们今天说的主题也不是他，而是这个(http://www.cnbeta.com/articles/69964.htm)。
本来曝光百度，怎么转眼变成google了？
看来百度不应该叫搜索引擎公司，而应该叫公关公司。前两个月讲三鹿问题，他是公关。央视曝光医疗问题，他是公关。现在出这个，还在公关。不过你可以公你的关，不代表股东会买你的帐。详细情况大家可以看这里(http://realtime.zaobao.com /2008/11/081120_21.shtml)。
估计我这篇blog的百度排名应该会很低吧——
下面贝壳废话一下，讲解一下竞价排名的问题，google的价值观和策略。
竞价排名在前两年是一个非常好的模式，通过竞价本身，我们就可以发现很多有价值的信息。例如，我们在搜索IBM的时候，肯花钱的蓝色巨人总比不肯花钱的国际大嘴(International Big Mouth)来的有价值吧。然而问题在于，由于搜索引擎价值的外在性很大，又没有监管，搞不好就要出问题。而且往往不是竞价排名供应商出问题，而是上游下游出，他们没法管。首先我们说外在性的问题，所谓外在性，是指由不应当承担后果的人承担后果的一种状况。好比我在XX地开了一个工厂，生产在欧洲要花很多环保费的东西，破坏了当地的环境。我获得了收入，但是后果由当地人来承担。不论出现的原因，由于外在性的存在，会破坏社会公平，因此很多国家都有补偿外在性的措施。例如排污税，针对富人的高所得税等。竞价排名的外在性在于，有人花钱买排名，并不总是发现价值的过程，也可能是减少价值的过程。而减少价值的损失并不总由百度承担，而是由百度的用户承担。更麻烦的是，这个过程是不可监管的。
我们举例详述整个过程。假定有人在百度竞价买了“流产”(这也是百度最贵的排名)这个关键词，那么，什么人会最乐意去购买呢？我们分析一下流产的潜在市场。正规医院的流产总要通过手续，未成年需要父母签字。很多有钱的小孩宁可多花钱也不希望父母知道，因此他们会选择一些非正规的医院。于是，这些市场一般都是非正规的医院把持的，因为正规医院的收费公开固定，流程有一定监管，肯定没法和这些非正规医院去竞标这个关键词。那么非正规医院中，我们可以想象，应当是付出最高价格的人能够获得这个关键词。如果你按照百度的去，那么你去的地方一定是市场上拥有最高的成本收益比的地方——因为只有这样他才能标到百度的关键词。问题是，什么样的医院会拥有最高的成本收益比？如果是监管医院，这个答案一般是私人贵族医院——如果中国有的话。如果是非监管，那肯定有问题。因为他不能贵族化，收入上不去，又要保证成本收益比，只有降低成本咯。而且医疗系统里面，降低成本普通人根本看不出来。不普通的人——不普通还需要自己找非监管医院么？同样，一些用户不希望被监管的医疗问题中，这个关键词应当也是非常贵的。例如生育，肾亏，等等。这个过程也是不可监管的，百度自己难道还逐个核查竞价排名的真实性？他又如何有权力做这个事情呢？
一家不在监管下的医疗机构，这个问题够严重了吧？但是百度有做什么非法的事情么？没有。从法律角度讲，任何人有权付费将某个信息在百度的排名变更。例如，我可以付费将布什是条狗的网页调整到最高——如果我对布什不爽的话。这个不触犯任何法律，除非你调整有悖法律的关键字。你不能说布什是条狗不是事实，因而不允许我调整排名。那么，百度调整这些有问题的医疗机构的网页，并不能说他触犯了任何一条的法律——从法理上讲是这样的。
通常来说，如果是普通机构，市场会自行调整。如果一个公司提供的信息是违背市场本意的，那么这个公司本身就会被市场淘汰。如果你天天提供广告给我们，我们应当一脚把你踢开。问题是，百度获得了足够的互联网资源，百度搜索是个太重要的东西了。因此他可以屏蔽对自己不利的消息。于是，即使百度有问题，大家也不会知道，直到上面的这幕出现。百度被另外一个媒体的老大——央视——点名，他屏蔽不掉了——总不能屏蔽央视吧？当然，他还是屏蔽了部分消息，并且留下了相当的尾巴。
google的核心哲学观点之一就是“不作恶”。简单来说，就是不因为外力——包括广告，赞助，等等——人工改变排名。google的排名一般有两种变更方法，一种是被发现作弊或者犯规，另一种是更改算法。用google的话来说，即使我们认为某个关键字结果是错误的，修正错误的方法不是我们调整这个页面的pagerank，而是使用更公正的算法，保证每个人在同一个起跑线上。这个和美国法律的精髓如出一辙。即使我认为这个判例是错的，我也不会行政干预这个判决。而是通过议会修正法案来修正法律，保证一个更公正的法律。
至于google的广告，不要误会，google也是卖广告的。google的广告都统一显示在页面的右边，和左边的搜索结果严格分离。大家可以很容易的识别出google的广告。如果你们对广告内容有兴趣，可以点击广告——这是google广告的本意。如果你们对广告内容没兴趣，不强迫你们。这个是“不作恶”的本意。</description>
    </item>
    
    <item>
      <title>关于乙肝的一点常识</title>
      <link>//blog.shell909090.org/blog/archives/46/</link>
      <pubDate>Wed, 12 Nov 2008 16:36:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/46/</guid>
      <description>对于乙肝，贝壳自认为自己了解的已经够多了。至少贝壳知道两对半的意义，作用机理，还有一些乙肝的常识。不过在看了一篇文后，贝壳发现，还是不够多。具体内容可以看这里[1]，中国内可能需要穿墙。
认识贝壳的都知道，贝壳是一个偏执于知识和真理的人。然而知识是否一定带来真理？是，也不是。知识未必带来真理，愚昧一定带来恐慌。上文中描述的乙肝患者歧视现象，贝壳并不怀疑。医院里面长长的体检队伍，电视上大量的乙肝药物广告，都是这一现象的残忍注脚。更不提贝壳从事的职业和传播学也有一定关系，自然知道资本和传播结合又没有管制的后果。那么今天，贝壳就着重提出几个乙肝的基础知识，看看大家是否了解。
乙肝是否会终身感染？
根据香港一个资料[2]，幼年时感染后会终身感染，成年后感染基本会痊愈。
乙肝感染的方式和概率？
根据这个资料[3]，体液交换会传染，包括献血，血液交换，性交和接吻。但是根据上面的文章[1]，接吻传染的概率很低。
乙肝对正常人的传染？
根据资料[3]的说法，只要不发生血液污染，即使是夫妻这样亲密常接触的人，只要接种疫苗就可以防护。同时根据上一个问题，多数情况下你没感觉呢就痊愈了。作为80后的城市青年，贝壳记忆中从初中开始接种过三次乙肝疫苗，应当是终身免疫。
乙肝的后果和概率？
根据文档[1]的说法，也许运气不好的话（大三阳伴随谷丙/谷草异常）会肝功能受损（总体的20%），严重的引发肝硬化（受损的4%，总体的0.8%），少量的会形成肝癌（受损的0.4%，总体的0.08%）。按照当前中国全部乙肝患者全为大三阳肝功异常计算，会有96K人患上肝癌。如果考虑实际情况，大概会有1W人上下吧。
——如果您觉得很多，查查死于心脏病和高血压的人数，再想想您今天的午餐。
乙肝歧视的后果？
计划生育的后果是多出来的男性可以组建一支军队，而乙肝歧视的后果就是患病，无工作的1.2亿人口。——想想这帮人急了拿个针头在你家楼下扎人。
参考： [1].http://item.feedsky.com/~feedsky/my1510/~5935684/129964642/1488578/1/item.html [2].http://www.hku.hk/uhs/he/hep/chi-hepc.html [3].http://www.hbver.com/Article/ygfz/ygzs/200511/4413.html</description>
    </item>
    
    <item>
      <title>SCIP,lambda,Church</title>
      <link>//blog.shell909090.org/blog/archives/45/</link>
      <pubDate>Mon, 10 Nov 2008 14:08:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/45/</guid>
      <description>贝壳最近在看SCIP，感觉受益匪浅。其中有一个2.6，使用函数表达数字，很难理解。贝壳查了查资料，这篇（http://blogs.sun.com/yongsun/entry/lambda%E6%BC%94%E7%AE%97%E4%B8%8Echurch%E8%AE%A1%E6%95%B0 ）写的很好，贝壳就不多说了。贝壳把自己写的内容贴上来，作为一个借鉴。
(define zero (lambda (f) (lambda (x) x))) (define one (lambda (f) (lambda (x) (f x)))) (define two (lambda (f) (lambda (x) (f (f x))))) (define three (lambda (f) (lambda (x) (f (f (f x)))))) (define (add-1 n) (lambda (f) (lambda (x) (f ((n f) x))))) (define (add m n) (lambda (f) (lambda (x) ((m f) ((n f) x))))) (define (mult m n) (lambda (f) (m (n f)))) (define (show-func-number n) (define (inc x) (+ x 1)) ((n inc) 0)) (display (show-func-number zero)) (newline) (display (show-func-number one)) (newline) (display (show-func-number (add-1 one))) (newline) (display (show-func-number (add one two))) (newline) (display (show-func-number (mult two three))) (newline) 结果：</description>
    </item>
    
    <item>
      <title>一些关于盗版、黑屏、开源的事情</title>
      <link>//blog.shell909090.org/blog/archives/44/</link>
      <pubDate>Mon, 03 Nov 2008 14:04:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/44/</guid>
      <description>大家都知道，微软搞黑屏了。贝壳暂时就这个事情不发表评论，而是先说一些其他的事情，然后大家再回过头来看这个事情怎么说。
首先是软件的版权区别。开源软件，自由软件，免费软件，共享软件，收费软件，盗版软件，这些我们经常说的名词究竟有什么意义，有什么相同和区别？
首先，大家要了解一个事情，上述对软件的不同称呼，其实是不可并列称呼的。免费收费，是指软件的付费方式，开源闭源，是指源码的公布方式，正版盗版，是指是否侵犯版权。这些其实是不同的事情，只是很多事情有前后的因果关系，因此大家容易混为一谈。一般我们可以将软件分为是否收费，是否开源，什么版权三种分类方式。分清其中的区别有益于阅读下面的内容。
开源软件是指源代码开放的软件系统。多数情况下，开源意味着免费和自由，但是也存在收费的例子。例如许多大型系统（好像有些UNIX就是，但现在具体什么情况，贝壳没有用过，也没有看过软件协议），其源码对使用者开放（注意，开源并不代表对所有人开放，只要使用者有权获得源码即可。当然，如果范围缩小到使用者中的特定群体有权，则不算开源，例如微软的不可泄露协议），但是属于绝对的收费系统。大家很容易理解这里面的原因，既然源码已经开放，那么多数人都可以轻易写出类似的系统，在这种情况下还要坚持收费就愚蠢了。除非源码庞大，需要相当的水准和时间来理解，这样才能保持收费。当然，更多的情况是开源免费，收取专家服务费。
这里中间还要插入一句法律问题（怎么感觉写成法律普及文了），目标软件的作用是给予使用，源码的作用是表达思想，这是公认一致的原则。换言之，如果你发布的是病毒目标，则是违法。如果你发布了病毒源码（当然，要排除恶意发布），则是研究之用，不属于违法。当年DeCSS的审判之所以被判定无罪，即是基于上述原则。
免费软件是指授权方式是不要钱的。现在免费软件的很大一个来源是来自开源社区，然而并非只有开源了才免费，共享软件和试用软件就是其中的两个典型。共享软件的作者允许你可以免费的使用它的软件，但是并不开源。试用软件的作者允许你在一定期限内免费使用软件或其中的一定功能（其实试用软件的完整授权也不一定要用钱，写个邮件把作者夸一顿或者给他做些事情，例如翻译软件，一样可以获得授权）。这些软件虽然免费，但是往往会因为有其他的原因而选择闭源。例如微软的Process Explorer，就是属于共享软件的典型。这个软件原属于sysinternels的作品，后被微软收购。如果是开源软件，搞不好要和微软打官司，也不可能被收购。而Winrar则是试用软件的典型，大家都听说过Winrar推动检查中国大型公司内使用非授权产品的例子吧。这个例子难就难在取证这个软件产品超过了使用期限，因为大多数人可以通过重装来避免提示。
自由软件是一个非常复杂的概念，要理解需要了解一些西方法律精神。自由软件现在在中国基本被视同为开源软件，其实两者是完全不一样的两个东西。自由指的是你拥有软件的选择权，包括是否使用，是否修改，是否散发，是否改善，具体可以参考这个文档（http://www.gnu.org/philosophy/free-sw.zh-cn.html ）。为了保证以上权力，开源是必须的，然而开源并不代表你拥有以上权力。我们在上文提到过，是否开源和什么版权是两个事情。开源软件可以选择收费版权，也可以选择非收费版权，但是禁止你修改，再散发软件。这些都不属于自由软件的范畴。
自由软件的起因来自于上世纪70年代出现在美国的自由潮。受到自由潮的影响，当时很多软件大牛都是黑客精神（不是现在这堆脚本小子讲的黑客）的拥护者。他们认为人类学习和使用软件的自由不言自明，他们拒绝为他们的帐户加上密钥，并且以破解软件系统为乐。他们所写的程序也是免费分发。很难想象，在上世纪70 年代的时候，很多现在具备极大影响力的项目在当时只是几个人看不爽而随手做的一些小程序。很多自由项目直到现在还无人可以超越，发挥着重要作用。
自由软件运动是天赋人权观念在知识领域的延伸，目的是推动知识的扩散。因为知识产品都有一个学习的概念，新手需要不断的观摩和学习成熟的系统才能成长。然而如果允许其他人无限制的学习，那么新知识的发明就无法给创造者带来利益，从而导致没有人愿意发明创新。因此专利法规定专利的存在，给予了发明人一定时期的权限，使其可以从中获利。而同时规定了专利期限，使得新手可以学习。（贝壳注：现在的很多专利期限动辄50年70年，实在是太长了一点，10年到20 年的期限应当是合适的）而自由软件在创造伊始就放弃了自身的专利权，给予了其他人学习和改进的权利，因此被认为是软件业的第一推动力。尤其是近些年，在 GNU的推动下，出现很多很优秀的软件产品。当然，其中大部分是和普通人无缘的。例如flex分析器，emacs编辑器。
盗版软件这个词很不好界定，因为有两种界定线。一种是收费软件不付费使用，一种是违反软件使用授权。从范围上说，后者比前者更广泛，因为付费主要是取得软件使用授权，不付费一定违反了授权原则。而违反授权则不一定是不付费，也可能是试用软件超期（违反试用授权中期限限定），未授权可以修改而进行修改（这个尤其多出现在使用源码库的时候），违反最终用户协定（在共享软件中常见）。一般我们说的时候都指前者，但实质上，后者也属于软件权违法的例子。我们不妨用违法软件来称呼后者，而用盗版软件来称呼前者。
盗版软件是否是自由软件思想影响下的产物？绝对不是。我们上文说了，自由软件运动的主要目的是普及软件知识，那么破解软件成果如何普及软件知识呢？无法自圆其说。也有人说这个是打击收费软件，以扩大开源软件的影响力。这就要讲到西方的毒树毒果理论，这个理论认为，非法手段（毒树），无论为了什么目地，其产生的结果一定是恶意的（毒果）。开源软件有着自己的适用范围，不需要也不可以通过这种方式强行介入收费领域。再者说，如果没有收费软件来为大型项目提供资金，没有大型公司来消化软件人才，那么程序员的将来也就无法保证，更谈不上进一步普及和推进计算机研究发展了。
盗版软件只是一些不喜欢付费或者根本不拿版权当回事情的人，为了自己的利益编造出来的一堆谎言。例如微软的这次黑屏，很多人都在抵制，都在骂微软。我们可以想象一下，如果微软的产品出来的时候就带着黑屏措施呢？他们照用不误，最多就是搞一下破解。Winrar也带了保护措施，用的人照样一堆堆，破解照样满天飞。微软只和合法购买者订立了合同，保证不会侵犯他们的权益。非法使用者从根本上就没有依据来保障，你的系统即使上了Windows就当场机器爆炸，也无法控告人家。
其实本质上说，贝壳也是违法软件使用者。在这个社会里面，看清每个软件的版权，然后一点不差的照做是完全不可能的，可能的只有知道行为违法后想法弥补。使用盗版windows则是因为贝壳根本是linux用户，但是同事全是清一色的windows，沟通不方便而被迫使用。既然我不是主动高兴买的，就上个盗版得了，被发现最多回到linux下结束（中国的法律对个人侵权行为只纠正行为）。使用盗版windows，我们人人知道违法，但中国的法律基于告诉乃论，就是所谓的民不告，官不纠。自己知道怎么回事，回去闷声发大财就算了，明明是违法者，还跳出来义正词严的指责受害者，做人不能太CNN。
就如同我在MSN名字中写的那样。我虽然不赞成你黑屏，但是我捍卫你黑屏的权力。</description>
    </item>
    
    <item>
      <title>封杀华硕宣告</title>
      <link>//blog.shell909090.org/blog/archives/43/</link>
      <pubDate>Wed, 29 Oct 2008 17:47:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/43/</guid>
      <description>兹因华硕陷害门事件（可于google上搜索 华硕 陷害门 黄静，不要使用百度），决定于今日起封杀华硕系列所有产品。不购买，不使用，不推荐，并向认识的人宣告此问题。特此声明。
P.S:虽然华硕不把我们当回事情，但是我们还是要把华硕当回事情，你想当下一个黄静么？</description>
    </item>
    
    <item>
      <title>程序生产流程管理的一些想法</title>
      <link>//blog.shell909090.org/blog/archives/42/</link>
      <pubDate>Tue, 21 Oct 2008 13:12:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/42/</guid>
      <description>程序的生产管理本质上说应当可以纳入生产管理中，然而程序毕竟是一种特殊的产品，因此程序的生产管理也有其特殊性。下面贝壳从小到大阐述一下个人对生产管理的一些想法。当然，30人以上的团队规模贝壳根本没有碰到过，因此就不予置评。
首先我们从软件的生产流程开始论述，当然你可以没有流程，然而你不能没有过程。没有流程叫做不正规，低成本和高效率，没有过程……没有过程我也不知道你怎么做的，直觉？
管理的头一步是计划，软件生产的头一步是调研和需求分析，然后是紧密关联的系统构架，包括构架选择和结构设计。调研的典型情况是回答以下问题，软件为了谁而做(Who)，设计周期和维护周期是多长(When)，软件的适用范围(When)，软件的意义和核心价值(Why)，软件要达成什么目的 (What)，如何设计达成这些目的(How)。这些问题中，要达成的目的和如何达成是核心。而后通过详细的讨论，得出到底要做什么东西，具备什么功能，以及一些细节问题。这时期形成的是软件需求分析报告和软件需求说明书。需求说明书的尺度是一个很难把握的问题，一般来说，需要灵活对应市场反馈的软件，需求说明书不用过早细化，反之则可以早细化一些。开发人员多，结构复杂的系统，设计说明书必须详尽，反之则可以简单一点。不过如果忽视甚至无视需求说明书，或者将需求说明书仅仅作为一个官样手续的团队，必定会在后面吃大苦头。如果要规避需求说明书，也并非不可以。贝壳会在最后描述一个原型系统方法，来规避灵活和不确定的需求对需求说明书的挑战。然而注意，这只是需求说明书的形成手段，本质上是以程序员和最终用户的互动来清晰需求，同时潜在的让程序员熟悉需求。并非真的不用讨论和细化需求，更不是提倡做项目不出需求说明。
项目的构架选择是在基本明确需求后做的事情，这个阶段主要明确以下问题。是单机软件还是群体软件，C/S还是B/S，.net还是java还是 C，Windows还是Linux。中间是否使用ORM，使用的话怎么设计细粒度表，不使用的话怎么使用冗余设计。结构设计和构架选择互相分离又紧密结合，结构理论上是脱离构架的，然而某些结构就必须适用某些构架(例如如果用了事务明显就不能用mysql，性能会差死)，某些构架则要求你特殊设计结构。结构设计是系统一个非常广阔专业而复杂的问题，有兴趣的可以看系统结构和构架的一些书，还有设计模式和UML的，这里就不细说了。
在系统完成结构设计后，就开始系统的编码过程了。而项目时间确定，到这个时候才有依据。粗说是编码过程，其实又细分为构架实现，技术研发，编码，自测试，系统整合几个部分。结构设计完成后，抽象的结构必须经过严格定义才能进行使用，其中进行严格定义并且文档化的过程绝对不要轻率处理。如果是大型团队，应当指定一个人负责结构定义的维护，并指定几个技术骨干来讨论定义，讨论修改。这个人需要处理每一个对结构修改的请求，分辨是否应当修改结构，并且交给骨干团队讨论。讨论确定后，对定义进行修改，修改定义文档，并且通知所有部门进行修改。
当结构定义后，系统的框架模型已经清晰可见了，剩下的就是编码了。可是否能进行顺利编码呢？未必可行。因为实际上会在过程中碰到很多技术问题。例如需要使用以前没有接触过的框架和组件，需要对抽象数学模型提出可行算法等等。这些问题如果不先行解决，后面的编码无法顺利进行，技术骨干的最主要作用就在这里。在他们解决技术问题后(或者，更经常的，在中间提出的问题被他们解决后)，系统就进入了编码阶段。编码阶段的代码一般来说会有不同级别的自测试，从最简单的写个小程序到最复杂的单元测试+冒烟测试，按照项目的级别具体分析。不过即使是再小的项目再小的模块，一般写一点代码就写个小片断测试下是否可行是最基本的常识，除非你能保证所有程序不论大小一次写对。在完成自测试后，还需要整合入系统，并可能伴随冒烟测试。如果结构设计良好，这个阶段会非常顺利，甚至不出现什么大的问题。反之，如果结构散乱，不用到客户那里，在这步就会碰到非常大的阻力。
在完成主程序的编码和整合后，项目进入收尾阶段。一般是漫长的测试和后续工作，主要包括叠代测试，性能分析，编写使用手册和编码手册，编写项目的技术分析，系统分析报告和各种材料。在这个阶段最主要是要通过测试，先于客户找出错误，并且逐步修改掉。良好的测试结果应当是逐步收敛的，当你看到一个逐步发散或者不稳定，根本没有规律的测试修改结果时，你的麻烦就大了。这通常是因为没有构架，构架错误，中间有不适应构架的修改，构架变化，核心算法错误，需求浮动太大等根本问题所导致的。当然，在测试的同时还要进行全面的文档化过程。
在测试和交付后项目是否结束呢？恐怕还没有。下面是漫长的客户服务期，需要收集和分析客户反馈，进行持续改进。不过那就是后面的问题了。下面我们按照团队的大小来逐步讨论团队的分配和任务。
首先是从一人团队开始，当然，如果也能叫团队的话。作为一人团队，也就没有什么分工问题。文档化要以轻量为主，方便自己日后理解，除非是客户特别需求。
而后是典型的一个团队，一个PM带几个技术，可能还有外面的美工支援什么的。人数不超过五人，不分组。这里前期的需求/后期文档都要由PM完成，程序员主要注重编码和测试(尤其是单元测试)。如果时间充裕，建议一些专门编码一些专门测试，这样可以有效保证代码质量。互相的沟通以开会为主，信息的沟通要诀是让每个人都知道别人的事情，尽量多的向别人传递信息。
再下面是一个典型的“大”团队，两个PM带四个程序员四个测试，其中有两个以上技术骨干，再加上一个专职美工和专职的UI Design(或者两个美工，基本差不多)，8-16人的“大型”团队。说大型是因为这个团队开始内部就要分工协作了，加引号是因为……即使10个人，基本也就刚够分工的底线而已。
贝壳个人建议，除开美工等支持岗位，将这种团队分成三个部分。一个是PM组，负责和用户沟通协调，产生需求文档，盯项目进度，调度程序员，产生用户文档，产生其他材料。这组PM不要求高技术，对于技术建议会用，但不用精通(最好也别精通，业务骨干做PM是非常浪费的)。但是对于沟通技巧，协调能力和领导能力要求非常高，也要求有相当的文字功底。毕竟他们是要和客户沟通的人，要是鸡同鸭讲就麻烦了。和客户产生矛盾，文档写不好，更是麻烦中的大麻烦。由于协调要求非常高，因此PM组强烈建议至少两人，手机24小时开机！建议设立正副职，采取正职负责，副职挂钩的方式。
第二个团队是研发组(Dev)，至少一个技术骨干带队。这组需要负责编码，自测试，系统整合，出开发文档，出技术文档。对于他们要求是沟通能力过关，程序编码效率高。对于系统经验，思考方式的全面和独特没有特殊要求。一般经过培训的新程序员就可以在研发组中担任工作。他们年轻力壮精力旺盛，相对编码效率比较高。不过如果有条件，还是用比较有经验的程序员比较好。在系统的整合测试，返工引发的效率低下控制方面会有相当的好处。
第三个团队是测试组(Test)，至少一个技术骨干带队。这组要求负责系统的叠代测试和性能测试，可能还要帮助编写用户文档，进行项目实施，培训和售后支持。这组人的要求是工作勤奋(叠代测试的工作量是非常高的)，技术过关(否则无法发现一些问题)，系统经验丰富，思考问题全面而独特。因此强列建议由最强的技术骨干和一帮能吃苦的年轻人组成。一般来说测试组和研发组的人员比例在1:2到1:1之间。如果小于1:2，那么会发生测试不充分的情况。如果大于 1:1，只要成本允许，到是强烈支持。
最后一个团队(有人算了算……怎么还有)，是系统的管理组。负责项目的构架选择，结构设计，时间节点认定，人事事务，开发成本控制，技术研发。这个团队有非常高的技术能力，管理能力和执行权限，一般由主PM，研发组和测试组骨干，客户代表，公司代表(多数和主PM是一个人)组成。主要是要对项目过程的监控，项目中人员权限的分配，核心技术的研究和管理进行处理。这个团队等若公司和客户的联合代表，对项目负全部责任。
对于30人以下的团队，估计可以按照比例放大组规模来使用同样的组织结构。不过如果再大，同样结构就不合适了。这主要是因为同一个组中的信息是互相完全流通的，超过10人的组会造成非常高的沟通成本。这时候一般是分解系统结构，分解研发组和测试组。将一个大型系统分解为两个或者多个独立的部分，让每个组分别研发和测试。这样可以避免每组内的信息沟通成本过高，可对文档的严密性和规范性提出了更高要求。通常来说，拆分方法有按照功能和按照构架。即按照功能划分出一个一个的业务模块，每个组开发一个完整的业务模块。和按照构架层次分为数据库组，业务逻辑层组和客户层组。通常来说，我支持以业务为主的拆分方法。因为此时组已经够大，让一个组精通所有层次不难。但是让所有组全部完整了解需求可就很难了。
对于这种成规模的开发，注重的主要是两点，文档和测试。最高的要求(也是我认为最好的褒奖)是及时的文档和全面的测试。此时的难点在于，研发过程中程序员经常为了修补问题而修改代码，但是忘记修改程序文档。或者需求变更后PM改了需求说明，通知了Dev，但是忘记通知Test。又或者通知了Test，但是忘记修改用户手册。因为诸多文档其实是对同一内容的不同描述，所以相互具有关联性。其中之一变化经常导致其他文档落后陈旧，而且版本不统一。
测试应当贯穿正规研发过程。从程序员实现一个个功能起就应当开始叠代，直到项目完成后。并且bug的管理应当和需求管理合并，成为几个组沟通的核心。测试的时候一定要注意充分测试和叠代测试，不要象微软一样弄出新的补丁补出老Bug的状况。
下面贝壳讲以下系统原型法，其实这个就是业界常说的敏捷开发。系统原型方法是指以构建非常简单的系统，实现非常核心功能的原型系统为基础，逐步推导出正规系统的功能和需求的系统分析方法。主要适用于系统需求不清晰，分析困难，开发周期短，程序员数量适中的项目。如果上述条件不成立，那么建议不要使用原型方法。
原型法的头一步是分析需求，不用说不确定的，就说为了实现业务目的(至少这个应该知道吧？)需要哪些功能。然后实现一个可用的，不用很美观，不用性能优化的系统。有了这个系统后，客户可以逐步分析使用这个系统哪里不方便，而后交给程序员改进。逐步反复，直到客户满意为止。使用这个方法，客户和程序员间，程序员互相之间要保证充分沟通，文档可以容后再写(前期还不确定呢，怎么写？)。主要是注意逐个的需求管理和Bug管理，这正好和我上面说的合并管理对应。使用这个方法的好处是当不清楚需求的时候可以马上做，逐步清晰。过程比较直观，做出来东西比较实用，也节约时间。坏处就是会浪费一定的程序员人力，而且一个没控制好就一直改一直改不知道哪里是头了……
当前国内软件业企业的几个问题就是，不注重需求，不注重测试，不尊重专业，不尊重规范，不培养人才，不积累技术，不重视信誉，不打算做事。下面贝壳逐个细说。
不尊重需求，一般来说，老板讲的时候都是需求为重的，可当客户需要变的时候，老板很容易同意需求变更(虽然我可以理解，做生意也不容易)。不尊重测试，做程序的非常理解测试的重要性，然而老板却认为那个岗位可以随便找个人来做。实际上，测试是一个非常专业非常流程化非常严密的东西，测试的主管最好是公司里面最有经验的人。同时，还有不尊重专业的问题。并不是说老板干预程序员的决策，而是很多时候老板根本不了解技术骨干和PM，测试的区别。让技术骨干来做策划，或是负责、或者主导和客户沟通，这都是超级缺乏效率的做法。至于不尊重规范，事先划定的流程，在遇到重大问题的时候，往往就变成了废纸一张。到不是说在重大问题前非要坚持僵硬的步伐，可一个项目一半时间都是重大问题，这就过分了把？先说了项目过程中要推进知识积累，推进技术交流，推进这个推进那个，等项目一忙就全飞了。
同时由于程序员的超高流动率，当前中国的程序界有一个非常不良好的风气，公司基本不培养自己的程序员。都不知道公司是否能开到明年呢，培养了做什么呢？这点在大型公司就比较好，无论什么情况，基础的内部交流总是保证的。只要签长约，多数可以弄到一些培训。中小公司不培养人才一方面是没有必要，另外一方面就是没有能力。于是程序员就被迫自我培训，自学或者脱产参加培训。付出了成本，自然要赶快跳到能实现价值(能把钱赚回来)的公司里面去。中小公司为人员流动付出巨额成本，而且很多都根本无知觉。
举贝壳公司的例子吧。因为发展需要，今年年初公司曾大型招人，C#程序员，结果可用者寥寥无几，很多都是浮夸碰运气的。以至于一天面试十多个人，竟然一个备选都没有的情况经常发生。一个人过来投简历，硕士，要价10K多。不说公司能否负担，看了看做的题目，算法题还不错，C#技术，解决实际问题都一塌糊涂。这种人招进来差不多就是研究算法写Paper的主，要做程序还得培训一下。还有一个人，我前周刚刚送走，转眼又回来，估计是批量投简历的时候忘记筛公司了。还有一个项目经理真的是不错，讲起问题来很深入，经验丰富，可老板认为用不到，贝壳一点办法都没有。由于人员仓促到位，我们在开发后期付出惨烈代价！有一个程序员从到岗到离开公司，最大的贡献就是拖了三个多月的进度，因为他连static函数干吗用的都不知道。还有一些人，很适应岗位，可做不到多久就走了(当然，这是有各种原因的，试用和刚满期的人走是比较正常的事情)。问题是，其他人就要重新接手他的事情，等来了人再换手。这样的直接结果是什么呢？如果说项目拖延有一半是因为我们需求没做到位，另外一半就是团队的人才损失。如果在普通项目上碰到类似问题，来的人不能做事情，人员替换率高。那么本来能按时完成的任务就一定会延后，而且分析的时候很难直接表现出来，多数会被认为是工作效率不够高，工作态度不认真之类的(某种意义上也没错，毕竟不能做事的人，不是因为效率不高就是因为做事不认真)。不能留住人才造成的后果，是通过项目拖延表现出来的，使得公司往往失去了隐性可能的良好口碑。这种软性杀伤是非常致命的但是又是难以直接表现的。
如果说不注重人才，还怎么能积累技术呢？人是技术最主要的载体。尽管我们可以通过互相培训，技术交流，技术文档化来积累技术。但是如果没有老员工的指点，那么新员工是很难吸收企业的原有技术体系的。无法积累技术的直接表现有两个，一个是中国企业没有核心技术，另外一个就是掌握技术的人就卡了公司的脖子。可能有人会举出中国有多少专利多少成果。贝壳告诉你，按照贝壳做项目的经验，那个多数都是项目做好了用来表功的牌坊。很多技术都是公司不敢给个人，个人不敢给公司，因为浮动率太高。许多真正有价值的核心技术往往是因为缺乏大公司(或者缺乏人)作为后台，而无法正式的走向商业化运作，更无法走向系统化理论化。因此中国不但缺乏真正的核心技术(我指能解决问题，有实现难度的技术)，更缺乏(这点可以确认)系统化理论化的技术体系。而掌握公司核心技术的人往往就能卡公司的脖子，尤其是技术都掌握在一个人手中的时候。并非说程序员都有坏心或者什么的，而是程序员有很多和老板不一样的想法(例如要重视测试，要重视专业等等)。当程序员觉得他是对的时候，为了和老板争辩，往往会使出走人的杀手锏。固然，公司是对产品拥有产权的。可是掌握核心技术的人不在，没有人能继续改进，研发新的产品系列，这不是要公司的命么？这时候老板就处于弱势的一方。从某个事情来说程序员往往是对的，可是从企业发展来说却绝非好事。
最后两个问题则是中国软件业更深层次的问题，不重视信誉，不打算做事。整天就想着前辈一夜暴富的事情，或者谁谁风投成功吃喝不愁的事情。根本不打算花心思将事业做好，而是设法请客招待人拉风投，找人做假买点击量买排名，花钱黑掉对手的网站，盘剥底层员工，炒作一些无聊的事情增加知名度。某种意义上说，这个才是中国软件业最大的毒瘤。</description>
    </item>
    
    <item>
      <title>一件最XXX的事</title>
      <link>//blog.shell909090.org/blog/archives/41/</link>
      <pubDate>Mon, 13 Oct 2008 09:28:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/41/</guid>
      <description>好像小时候老师经常出这样的题目，不过我每次都没得可写，总觉得那堆事情太假太做作。没想到，我这两天亲身经历了一件很囧的事情。
事情是这个样子的。贝壳前两天玩开心（好啦，我知道很无聊，不过发现一堆N久没有联系的同学，很好玩那），然后突然想到搜索高中同学。首先跳出来的是我们的于飞同学，据记载，不出我们所料，去日本了。然后是一位叫江宁的同学，哪位？贝壳怕自己忘记了某些曾经的同学，所以打算点进去看看她的好友里面是否有高中的朋友，然后发现——这是谁？
她的列表中有一位“阿达”，这位同志刚刚加我，并且和我一样，是赵一搏的朋友，换句话说，是初中和大学圈子里面的。是不是贝壳点错了？还是开心太强大了？
事实证明，都不是，是事情太巧合了。贝壳联系该同志本人后发现，所谓“阿达”，乃是丁之光同学，正宗的初中和大学同学。而江宁同学在牛栏山高中复读，是杨亮和大佟的同学。他们是同事，我发消息的时候正好在旁边，OMG。
够囧了吧？好戏还在后面呢——
贝壳一时高兴，问，那个秦伯韬你认得么？认得。段旭辉呢？认得。张雷？认得。王巍？认得。朱金辉？认得。许智翔？谁？
shit，怎么就是不认得贝壳，俺这么有名的说。
不过此同学认出了我一箩筐的高中同学，于是贝壳自己都混了。然后说——段是在上海念书么？不是。那上海念书的是谁？张雷。（到底谁在牛山混的久啊？）哦——我知道，大佟的男友吧——
刚刚说完——对面发出了一阵吓死人的叫声——
（贝壳）：说错了么？我记得是杨亮女朋友和我说的（不就是刘莹同学么）——
（江宁）：张雷很帅的——
（贝壳）：小声点，大佟也是你朋友——
（江宁）：呃——
（贝壳）：好像我记得一起看过他们，那次我去复旦玩，大佟和张雷都来的，朱金辉陪他四中的女友，没来——
然后对面发出一阵杀气——
（江宁）：说，朱在复旦有几个女友——
（贝壳）：啊，我又说错什么了？
（江宁）：我一个姐们，是朱前女友——
（贝壳）：（原来是上门讨债的，少说的好）哦，哦，可能我记错了——
（江宁）：OOXX..**（省略一堆话，具体可以自行想象），不过你是可能记错了，当时王巍的女朋友是四中的——
（贝壳）：。。。（乌鸦飞过）。。。——
天啊，贝壳不想活了——</description>
    </item>
    
    <item>
      <title>分词算法的具体实践</title>
      <link>//blog.shell909090.org/blog/archives/40/</link>
      <pubDate>Sun, 12 Oct 2008 09:27:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/40/</guid>
      <description>说到分词算法，可能很多人都很陌生，然而说起百度，google，很多人却是耳熟能详。google，百度在搜索的时候，输入关键词后瞬间就可以得到结果，如果用通用数据库是无法做到的。实行这个加速的关键就是分词算法。例如&amp;quot;项羽是萝莉控&amp;quot;这句句子，我们一般搜索都是搜索项羽，或者萝莉控，萝莉。你见过有去搜&amp;quot;是萝&amp;quot;这个关键字的么？因此系统通过分词，将句子分解为&amp;quot;项羽/是/萝莉控&amp;quot;，去处单字常见词&amp;quot;是&amp;quot;(如果要索引&amp;quot;是&amp;quot;，可以想像有多少文章没有&amp;quot;是&amp;quot;的)，我们就得到了项羽和萝莉控两个词。再通过反向关联，建立项羽，萝莉控指向文章的连接，就可以完成瞬间的搜索了(具体原理不说了，只要有一定数据库基础的人都应当能想明白原理)。并且通过关联性，某种程度上也可以提供&amp;quot;是萝&amp;quot;的搜索(带&amp;quot;是&amp;quot;的词，带&amp;quot;萝&amp;quot;的词，相关度最高)。
那么，如何来计算分词呢？方法很多，大家可以在网络上搜索下，贝壳就不赘述了。贝壳现在要说的是这次贝壳主要试验的方向，基于词典的机械分词中的最大分词算法。
机械分词算法是当今的主流，关键原因在于速度问题。虽然正确的分词很有价值，然而如果速度太慢，一样没有什么用处。机械分词一般可以保证 98%-99.5%以上的正确率，同时提供极高的分词速度。而机械分词一般来说，都是基于词典的。主要有正向分词算法，逆向分词算法，最大匹配分词算法。其中最大匹配分词算法具备最高的灵活性，只要你能评价一个切分的优秀程度，算法能把所有可能算出来让你评价。然而大家可以想像，这个是非常耗费CPU的。贝壳在这个基础上，做了一个具体的实现和细化加速。并且有准备做为一个开源项目来长期运作(只要有人有意向接手合作)。
首先我们先说贝壳这个算法的评价原则。贝壳认为，评价原则应当有以下几点。同时也必须要说明，以下原则是无法正确评价所有情况的。不过以下原则在原则正确的基础上比较便于优化。一、无法分析的词最少(这是全局最大匹配的理论核心)。二、匹配出的原子最少(这是保证分词优秀性的指标)。三、匹配出原子的出现概率和最高(这是纯粹没有办法了从概率上提高匹配正确的可能)。
当我们分析一句话的时候，我们可以想像，这句话应当是正常的，可被理解的。换句话说，句子中应当都是有意义的词。那么，在匹配后无法理解的词是什么呢？一种是匹配错误，一种是新单词，一种是单字成词和无意义助词。单字成词的例子有上面的&amp;quot;是&amp;quot;，我们可以通过一个比较小的词典去除。那么，假定词典够大的情况下，无法理解和分析的词越少的组合越正确。而同样一句话，匹配出的原子越少，在搜索的时候效率越高。因此我们有规定了原子最少原则。至于最后一个，在无法分析词一致，原子个数一致的情况下，我们只能通过出现概率来猜测可能性。
然后，现在让我们分析一下分词的特点，并且做一定的优化。首先就从最著名的例子，&amp;ldquo;长春/市长/春节/致辞&amp;quot;开始。
长春市长春节致辞 首先，匹配算法一定要先搜索到一个出现的词，有词才有匹配优化问题。没有词的话，你试试看分词&amp;quot;嗡嘛呢呗咪吽&amp;rdquo;。根本无法可分。因此首先我们要计算出一个出现的单词。贝壳是从正向开始计算的(主要是因为词典的加速方法是头索引的)。
*长春*{市长春节致辞} *长春市*{长春节致辞} 好的，我们匹配到了两个，不过这就是全部可能么？不是，否则就变成了正向最大搜索。你可以看看&amp;quot;有意见分歧&amp;quot;。如果从头一个匹配到开始计算，无论如何都是&amp;quot;有意/见/分歧&amp;quot;，而事实是&amp;quot;有/意见/分歧&amp;quot;。因此我们还有一种可能，在头一个匹配到的位置，其实并不匹配。不匹配多长呢？最大长度不会超过最短的匹配词。为什么？我们来看下面一个例子。
*长春*{市长春节致辞} *长/春/(这两个字不是词，而是两个无法理解的字){市长春节致辞} 很明显，后一种分法违背了我们的第一原则，无法分析的词最少。无论后面怎么计算，其最优结果是相同的。在后续结果相同的情况下，头一次匹配到词后，所有可能的跳空(搜索可能的不匹配)最大长度严格小于最短匹配词的长度。
那么是否所有跳空都要搜索呢？也不，我们可以继续剪枝。对于情况&amp;quot;有意见分歧&amp;quot;来说，这个路径是必须搜索的。但是对于我们的例子来说，是无需搜索的。为什么呢？我们看以下计算。
*长/{春市长春节致辞}(下一个匹配是什么？总不会是春市吧，所以应当是&amp;quot;市长&amp;quot;) *长/春/市长*{春节致辞} *长春*{市长春节致辞} 大家可以看到，其实这个路径是无需计算的。那什么情况下需要计算呢？
一旦跳空，其跳空后寻找到的下个词的位置必须严格小于最短词的词尾位置。否则就没有搜索价值。具体可以看以下示例。
XXXXXXXNNNNNNNNNNN(X是词，N是无关紧要的)
SSSSSSSXXNNNNNNNNN(S是跳空或者跳空后形成的无法理解字，X是词，在这种情况下，无论后面怎么评价，都不影响该匹配被剔除)
OK，我们回到例子，刚刚我们说了，有&amp;quot;长&amp;quot;的匹配。但是通过刚刚的剪枝，又被剪了出去。我们下面分别计算两个情况。
市长春节致辞 *市/{长春节致辞} *市长*{春节致辞} 长春节致辞 好，我们先不计算下去了。通过上面的计算，我们发现，在计算过程中经常需要计算同一内容的结果。我们可以想一下，同样的分词，同样的算法，出现的应当是同样的结果。就是说，分词函数是状态无关的算法。通过分解一个单词，得到一个最优结果。那么，我们对于同样的数据，何必需要计算两次呢？贝壳上文中提到过记忆函数，这次就用上了。根据贝壳的试验结果，如果记忆全部词的分解结果，会造成大量的记忆-释放，而内容基本没有用到，造成效率下降。如果只记忆长词的分解结果，往往又会因为太长，大多数句子无法达到长度而根本没用。这中间有个平衡值，具体多少贝壳就不说了。我们可以按照上文的方法计算以下两个过程，得到结果。大家可以自行验证。
春节致辞 *春节*致辞* 长春节致辞 *长/春节*致辞* *长春*节/致辞* 结合上面的过程，我们推算得到结果。
*长春*{市长春节致辞} *长春*市长*春节*致辞* *长春市*{长春节致辞} *长春市*长/春节*致辞* *长春市*长春*节/致辞* 按照上面的评价原则，我们得到了正确的结果。
大家可以看看其他例子，这里着重说一下&amp;quot;有意见分歧&amp;quot;。
有意见分歧 *有*意见*分歧* *有意*见/分歧* 注意，有是单字成词，见可不是。如果见单字成词，做看见讲，那这句话就彻底成歧义句了。可以理解为，有意的要看到(或者让其表现出)分歧。这一般是古文语法。由此也可以看出上述原则在理解古文的时候往往会出现问题。同时还要指出的是，在匹配&amp;quot;长春市长春药店&amp;quot;的时候，会出现以下结果。
长春市长春药店 *长春*市长*春药店* *长春市*长春*药店* 两者的无法理解词都没有，切分数一致，最后硬是因为春药店出现概率低而被筛掉。可见系统有的时候是依赖概率和人品在工作的。
经过上面的原则和算法，贝壳实现了一个python的分词程序，1000行代码，原型系统。90W条词情况下，在AMD MK36上(2G主频)分词效率66K/s上下，具体看分词的选项(例如顺序分词就比较节约资源，分词排除重复就比较慢，启用多线程后在单CPU 机器上更慢)，内存使用114M。使用C++写的核心词典后，90W条词的情况下分词速度80K/s，比python的核心词典快了20%，内存70M，节约内存40%。不过可惜，这个核心词典是公司产权，贝壳无权公布。并且贝壳做了一些工作，准备使用分词程序来生成分词词表。这个么贝壳就不准备讲了。前面讲的内容贝壳准备放到试验型站点 http://shell909090.3322.org/split_word/split_show/ 上面去，08年内有效。有兴趣联系我的可以发 mail给我，shell909090+split@gmail.com，欢迎大家试验并提出意见。</description>
    </item>
    
    <item>
      <title>苏博婚礼回来暨python2.6发布</title>
      <link>//blog.shell909090.org/blog/archives/39/</link>
      <pubDate>Mon, 06 Oct 2008 15:50:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/39/</guid>
      <description>这次10.1算是个大日子，因为我们可爱的苏博终于和他美丽的新娘结婚了。据说两个人相识10年拍拖7年，找的高中班主任做证婚人。实在有点为难人家，到底说高中就好上了呢？还是高中没好上？不过总而言之，他们总算结婚了。具体苏博是怎么被我们蹂躏的，以及婚礼的起因经过什么的就不写了，毕竟我不是新闻记者。这次就写一些有趣的事情和感想。
首先是去震泽的车子，因为10.1的关系，并不怎么好去。不过坐在车上晃晃悠悠两个小时，看旁边的河跟路一起走，感觉还是很不错的。江南不愧是水乡，有条河就在我们的路旁跟了10多分钟，还有条船跟我们并排跑。震泽古镇也很灵的，宝塔街古香古色，保证没有现代元素，除了大头发现的几个公共厕所外。建议大家有空可以去看看，苏博的家乡。
而后是新郎和新娘的一个让我比较震撼的问题。婚礼上，主持人问新娘的大学同学，是否在校园里面经常看到新郎。人家说，一直以为苏於良是南大学生。我吓一跳，南大啊，我一直以为王苏瑾在上海念大学。由此我得到一个结论，远距离恋爱是否会失败，和双方爱对方的程度无关，而和双方把爱付诸行动的程度有关。其实不光远距离恋爱，婚姻也是一样。认识我的人都知道我的两个总结。夫妻双方性格相近或相反，价值观一致。今天看来还要加一条，愿意将爱付诸行动。
然后是婚礼前一天，阿丁同学打过来跟我哭诉她和她男友的情况。实话说，虽然被哭诉半天，但是我还是搞不清楚她和她男友的状态，总之是非常复杂一团浆糊。因为隐私关系，我不打算说她和她男友的具体状况。不过大致就是她很喜欢他男友，喜欢到没有自我没有尊严。他男友呢，则是有点——不知道怎么说。说有问题吧，说不出来，说没有问题吧，情况确实——不怎么好。而且她本人处理事情上也不是没有问题，我觉得这个应当叫孽缘吧。不过无论如何，我的建议是——分手。
然后我就建议阿丁同学到震泽来玩一天，反正黄禹同学正好没来。然后她跑来玩了一天，回去和我说了一句雷晕人的话。我彻底无语了——
无论如何，那是她的家事。
再后面就是苏州到上海的车，同样也不怎么好弄。我问今天又没有去上海的车，最好是动车。回答说有，动车。我说来两张票（帮人代买一张），售票员说，晚上11点半的哦～～
我彻底无语。
后面一个朋友则更悲惨。他问，今天到南京的车票还有么？没了。明天的呢？也没了。后天的呢？我们只发售今明两天的～～
最后我们坐大巴回来的。
最后的最后，说一下，python2.6发布了，虽然我不打算用。比以前在构架上有了不少进步，不过很多东西暂时没有这么快迁移过去。我打算等3.0出了后直接用3.0，反正程序是一样写的。</description>
    </item>
    
    <item>
      <title>VeryCD版电驴(eMule)存在封锁</title>
      <link>//blog.shell909090.org/blog/archives/38/</link>
      <pubDate>Wed, 24 Sep 2008 17:11:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/38/</guid>
      <description>eMule是一个GPL程序，所以VeryCD的改版必须公开源码。今天听说VeryCD版有封锁的现象，所以贝壳抓源码来看看。如果大家认为老调重弹的话，不妨把文章拉到最后。
源码从此处下载：http://www.emule.org.cn/download/
最下方链接：http://download.verycd.com/eMule-VeryCD-src.rar
贝壳下到的文件大小13,703,064字节，打包时间2008-09-11。经过贝壳查找，在eMule-VeryCD-srcsrc WordFilter发现两个文件，WordFilter.cpp 2008-03-12 09:57 13374和WordFilter.h 2007-11-20 17:56 1009。仔细阅读里面，发现有以下内容。
void CWordFilter::Init() { HANDLE hFile; DWORD dwRead; int nLen; BOOL bResult; CStringList list; //m_count = 0; CString saaa = thePrefs.GetMuleDirectory(EMULE_EXECUTEABLEDIR) + FLITER_FILE; CString sbbb = thePrefs.GetMuleDirectory(EMULE_CONFIGDIR) + FLITER_FILE; // 如果文件目录不对，程序移动一下，到config目录下 added by kernel1983 2006.07.31 if (PathFileExists(thePrefs.GetMuleDirectory(EMULE_EXECUTEABLEDIR) + FLITER_FILE)) MoveFile(thePrefs.GetMuleDirectory(EMULE_EXECUTEABLEDIR) + FLITER_FILE, thePrefs.GetMuleDirectory(EMULE_CONFIGDIR) + FLITER_FILE); if (!PathFileExists(thePrefs.GetMuleDirectory(EMULE_CONFIGDIR) + FLITER_FILE)) { // 不存在，所有的都过滤 added by kernel1983 2006.08.08 m_filterall = true; return; } // Open file for read hFile = CreateFile(thePrefs.</description>
    </item>
    
    <item>
      <title>百度、官员辞职和特供局</title>
      <link>//blog.shell909090.org/blog/archives/37/</link>
      <pubDate>Tue, 23 Sep 2008 10:33:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/37/</guid>
      <description>这几个东西有什么联系？其实没什么大联系，只是同样是没用的东西而已。
先说百度吧，大家可能不知道，google的一个原则就是“不作恶”。简单来说，不因为人为的理由而改变搜索结果。包括调整排名，屏蔽关键词等。google卖的关键词和百度不大一样，百度的是改变搜索结果，google则是在旁边显示广告栏，其显示特征明显不同于正常搜索结果。从商业角度来说，卖排名当然不如卖广告收入多，但是google的收入却比百度高很多。我以前也完全无法理解google费力坚持不做恶的理由，更无法理解为什么google的收入会远远超过百度，然而这次却明白了。大家应当听说某奶粉品牌300万搞定某搜索引擎的事情吧？当然，某搜索引擎否认了，我们也没有什么证据来说明这次的却是被搞定了。但是，百度卖排名是事实，卖关键词屏蔽也不是什么很难理解的事情吧？也许这次没有被搞定，然而在卖屏蔽却没有什么异议。然而如果这么说的话，那么百度，无疑就成为了遮盖大众知情权的帮凶了。当然，同样的问题google并非没有。google在进入中国后，和政府达成了协议。部分涉及国家的敏感词汇被封锁，大家可以看google最下方的提示。“据当地法律法规和政策，部分搜索结果未予显示。” 如果出现这个，就代表你的关键词有问题，部分内容被屏蔽了。作为进入中国的代价，我们理解这种事情。然而即使是这种程度的改变，依然被很多google的 fans质疑，认为google背叛了“不作恶”的原则。大家可以想想，一个搜索引擎受到国家约束而被迫改变结果尚且要引来怀疑。这时候，一个可以用钱买卖，结果改来该去的引擎，有用么？
因此我强烈的建议大家，使用google的搜索引擎。或者说，当你需要知道什么事情，怀疑什么事情，而这个事情又和强权的利益相关的时候，请使用google搜索引擎，因为百度可能被“买通”了。你不知道你搜索出来的“最有名”的培训公司是否真的好(这是我一个朋友的真实例子，他所在的培训公司就是打的百度排名，但公司有严重问题)，你不知道你“搜索不到”有问题的词是否真的只是因为你个人的问题(例如这次的三鹿)。当你搜索到的东西其实只是一堆利益的集合的时候，我觉得这个搜索引擎也就没用了。
我当然不是对百度有意见，也不是对国产有意见。我本人就是中国的程序员，也有朋友在百度任职。然而中国的公义(好吧，这个词大了点)是不能因为利益而含糊的。说的更准确点，当你为了利益而含糊公义的时候，说不定你的儿女正在喝三鹿奶粉。
下面讲讲官员辞职。这次溃坝辞职的孟学农，其实是第二次辞职了。头一次是因为在北京，非典处置不力而辞职。这次又在山西，因为溃坝辞职。中国官方的解释是，孟学农的两次辞职为做太平梦的太平官敲响了警钟。然而贝壳要问，为什么辞职了两次？
大家理解官员辞职，基本就是，辞去职务。辞去后干什么？我们并不清楚。当然，辞职后又重入公职，说起来也不是不可以。但是，这样真的可以么？有人可能说说法规并不反对，但是我想问，一个已经有了明显的处置不力前科的人，为什么那么容易的又进入了公务员队伍呢？难道中国对农村户口的人进入公职防范的那么严格，对有处理问题不力前科的人反倒不必防范？辞职，下台躲躲风头，学学陈冠希，事情走了再出来，损失的只是以前积累的名气，是不是太容易了？进一步说，这次因为三鹿辞职的某些官员，下次又准备在哪里任职呢？大家明天又想喝些什么呢？
当然，还有一个更坏的理由，就是这些人因为没有背景，被屡次作为代罪羔羊。为什么说比辞职重新担任公职更糟糕呢？因为这代表真正应当负责的人屁股都不必动。辞职重新担任官职，好歹还有躲风头的时间，还要损失自己的名气和政绩。作为官员，在做事情前还是要想想这个代价的。然而花钱弄一堆不做事的替罪羊养起来，出了问题就让他们辞职顶罪，然后再给他们重新安排一个替罪羊的职务。这连想代价的时间都省了，反正这帮人的工资是国家支付，人民出钱。拿人民的钱来糊弄人民，没有比这个更好做的决定了。如果真的碰到这种情况(当然，这只是贝壳的猜测)，那官员问责机制就会从“没什么用 ”彻底变成“什么用都没”。
最后一个，讲讲特供局。特供局的意义相信大家都清楚，就是给皇帝弄贡品的单位。这种局弄出来，肯定要被大家骂的。当官的只管自己吃喝好，不管老百姓生死。有人还这么说，只要特供局存在一天，当官的就不会真正在意老百姓的生死。只要产品安全到家了，总理可以在大街上随便买个番茄吃了。在这里贝壳不打算讨论政府和食品安全问题，只是想问另外一个问题。让一帮人浮于事吃拿卡要的家伙负责另外一帮同样家伙的食品，有用么？
以前给皇帝拿贡品的时候，下面的经手太监经常吃拿卡要雁过拔毛。只要给一定的好处，就可以打上贡品的标签。多收了是朝廷付钱，好吃的自己先吃掉，反正皇帝也不会来查——要是他有这个空，肯定自己来管了。最后经常会出现朝廷的采买太监吃的比皇帝都好的现象。同样的事实难保不会再特供局出现，毕竟东西经过特供局后一般不会再交付其他部门检查。那特供局完全有可能检验一下，扣下一些特别好的，收钱定贡品。反正只要交上去的东西没问题，就没人问他们负责。</description>
    </item>
    
    <item>
      <title>紧急修复</title>
      <link>//blog.shell909090.org/blog/archives/36/</link>
      <pubDate>Mon, 22 Sep 2008 10:36:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/36/</guid>
      <description>贝壳周四的时候收到消息，烟台的系统崩溃，于是在24小时之内走了一趟天堂和地狱间的旅行。
开始的时候，贝壳在查一些业务有关的资料。期间和一个同事开了几句玩笑，但是发现他一脸便秘的样子，和我说没空。贝壳很郁闷，怎么这么没面子？过了几分钟，事情就发展成贝壳也一脸便秘的没胆子了，原因是烟台的系统崩溃。由于远程无法连接，只能让客户去机房重起整个系统。可重起后也没有反应。于是贝壳怕了，马上通知了老板。老板马上做了决定，要我们当时飞去烟台，并且在几分钟内给我们搞定了机票。于是在贝壳头处理紧急问题的时候，就受到了&amp;quot;飞机-出租- 零反应&amp;quot;的待遇。
中间首先要感谢一下给我们做Oracle技术支持的纪锋老师，这次如果不是他的大力协助，恐怕问题不会这么快解决。我们在零时间往烟台赶的时候，纪老师也马上打车往机场走。我们是五点接到的问题通告，五点半就联络好了各种问题，乘公司的车子往机场走(主要怕下班高峰不好打车)。六点多点的时候，我们拿到了登机牌，去做安检，然后顺便讨论起问题原因。当时认为基本不可能是软件问题，因为软件问题重起后基本都可以解决，也不会弄的机器停机(这个最终被检验是正确的)。可能是维护问题或者硬件问题。按照机器安装时间来计算，硬件问题的可能居多(系统才刚刚交付几个月)。
飞机是8点50在烟台落的地，落地后我们心急火燎地坐出租往报社赶。车刚出机场，收到一个消息，问题消失了。我们顿时安心很多，要是问题继续出现导致更严重问题，怕我们全都吃不了兜着走。现在，虽然我们还要去找出根本原因，可总比被客户拷问着检查系统来的好的多。到了报业后，我们先检查了系统。第一个被发现的问题是备份机已经满了，怎么会这样？系统的设计容量是三年500G，按照现在的数据量估计，最高不会超过30G，可备份机上足足有100G的空间！我们倒推了数据，发现备份要用140G以上的空间。怎么会这样呢？
原因我们没有找到，不过按照纪老师给出的原因，是备份的时候大量的归档日志造成了数据量暴增。但是备份暴增怎么会造成系统不能访问呢？贝壳陷入了奇怪的感觉中。虽然直觉上觉得就是这个理由，但是实际上却无法确定。按照我和同事说的话，如果用这个理由来说服我，是无法说服的。但是如果在目前让我给出一个理由，恐怕只有这个了。当天比较晚了，因此没有进一步分析，只是让纪老师调整了备份策略就去睡觉了。
第二天，贝壳仔细检查了所有的系统日志，找到了真正引发错误的理由。Linux9号错误，原因是因为文件无法访问。可是，究竟为什么造成9号错误呢？又是为什么导致重起后错误不消失，过后错误又莫名消失呢？进一步分析日志找到了这后两个问题的理由，客户重起节点1未完成时，直接重起了节点2。RAC似乎在所有节点同时失效后无法自动重连，即使重起也不行，必须重起客户端。最后按照数据倒推，认定问题在本地磁盘耗尽上。只是开始为了检测数据库备份，执行了 crosscheck，释放了部分磁盘空间，因此查不出来。
从这次事故恢复来说，最大的问题在于客户那里没有人及时进行系统维护，最终导致了磁盘耗尽。因此说做一个系统简单，然而要长期维护系统，恐怕就没这么简单了。</description>
    </item>
    
    <item>
      <title>中国又出事了</title>
      <link>//blog.shell909090.org/blog/archives/35/</link>
      <pubDate>Mon, 15 Sep 2008 19:29:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/35/</guid>
      <description>这次是毒奶粉，08年真是多事之秋。贝壳分析了下，估计会进入世界十大事故的行列。
有这么严重么？有。到底有多少奶粉有毒？有多少流入了市场？有多少没有追回？当局能统计出来么？统计出来你信么？如果统计不出来或者你不信，那么我说有可能被做成了月饼进了你的肚子，或者被北京的残奥运动员吃了，你信么？
三鹿的销售体系，是很难统计出最终消费者的，因此我们对比台湾统计的结果。台湾从三鹿进口了有问题的奶粉1000袋，有600袋上下剩余，400袋上下销售，其中没有一袋是进入婴儿市场的，全部被做成食品进了大众的肚子。按照这个比例计算，三鹿出问题的没出问题的奶粉，到底有多少被做成食品，进了你我的肚子呢？谁也说不清楚。月饼，面包，冷饮，这些我们每日要吃的东西里面到底有没有问题呢？谁也不好说。毕竟现在食品成本上升，使用廉价的奶粉来替代昂贵的原料，恐怕是很多企业的第一选择。
这次风波问题更大的在于，还有很多残奥运动员在北京，他们的食品呢？你我当然知道，他们是吃不到廉价的奶产品的。问题是，他们是否愿意相信呢？如果这个问题没有一个很好的解答，恐怕中国这次的运动员餐赔本卖吆喝要变成赔本卖骂名了。
还有这次问题的发生原因，按照三鹿本身的说法，是不法分子造假。那么不说出问题的总数是多少，三鹿说过，召回有问题奶粉700吨。就贝壳看到的资料，原奶和奶粉的质量比大约是8:1。按照这个比例，三鹿有问题的原奶大约是5600吨。这么大量的奶就完全没检查？如果说是部分有问题，到底多大比例？比例低了是不会造成影响的。高了，高了还是得问有没有检查。还有，一个企业，不同产品使用的奶源不一样么？如果一样，为什么只有特定产品出现问题？如果不一样，这会造成成本的升高，为什么不一样？
另外，三鹿集团在这次的危机公关上有严重问题，石家庄当地政府加重了这个问题，而国家又放大了这个问题。三鹿集团说八月已经发现问题，开始召回奶粉。那九月初问题刚发现的时候，发表三鹿奶粉产品质量没有问题的声明是怎么回事？奶粉召回，有没有通知消费者？(也许是中国没有这个惯例，我和一堆朋友说的时候，他们都一脸惊诧，召回产品要通知消费者么？)有没有统计影响面？国家的质管部门呢？免检产品是否真的不需要抽检？那质检是怎么选免检的？口碑？口碑怎么评价？质量历史？企业质量没有问题历史才是常规，有问题历史的要着重查。如果免检产品真的免检，那质检部门有什么用处？如果食品质量有问题造成生病归卫生部门管，那么飞机质量问题造成坠机是否归国安部门管，汽车质量问题造成车祸是否归交通部门管？质检证书造假是否应当归公安管？
实际上，这次事件引发的最严重的问题，在于政府，质量检验体系失去了共信力。根据调查，92%的人不会再选择三鹿的任何产品，6成以上的人对政府质量体系持不信任态度。那么，这次政府说没有对你们造成影响，你们信不信？下次，政府说你们的房子没问题，你们信不信？如果不信，大家准备吃什么？喝什么？</description>
    </item>
    
    <item>
      <title>语言的对比</title>
      <link>//blog.shell909090.org/blog/archives/34/</link>
      <pubDate>Wed, 10 Sep 2008 20:36:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/34/</guid>
      <description>最近贝壳在学(或者准备学)三门语言，python，ruby，scheme。全部都是高级抽象语言，都是脚本语言。加上贝壳本身已经非常熟悉的几门语言，C/C++，Java，Asm，bash，贝壳这次是正宗的要&amp;quot;精通&amp;quot;七门语言了。当然，如果加上勉强会用如vb这些，十多种也不成问题。做为一个学了多种语言用了多种语言的程序员，我想写一下自己多这些语言的认识，作为后来者的参考。
首先是C，当然，是不包含C++特性的C。这门语言可以说是贝壳所见的语言中，最强大最广泛最具备生命力的语言。其他任何一种语言说到混编接口，基本就是C语言接口。C语言也可以模拟非常多的特性，COM，C++，都可以用C模拟。当然，模拟的复杂程度是另外回事情。并且可以编写其他语言的解析器/虚拟机，而这点来说其他语言很难做到。其实本质上说，C语言就是跨机器跨平台的万能汇编语言，所以才具备这些强大特性。C的核心思想是指针，其整个语言构架都是基于指针的。通过指针，我们直接操纵着内存地址的读写。当然有利必定有弊，C语言太难掌握，效率太低了。使用C写代码，就是和机器打交道。你得控制数据的读出写入，控制设备的初始化，控制内核交互。根本上说，一个强大的C程序员，并不强大在算法和创意上，而是强大在对系统的方方面面的了解上，强大在对基础原理的掌握上。
其次是C++，说实话，这语言有点高不成低不就。如果要掌握系统的方方面面，他不比C。如果要抽象要构架要快速要敏捷，他比不上所有的抽象语言。但是 C++的长处在于在系统的层级上引入了算法抽象，增强了编码效率。如果你确定需要在系统层级上编程，又不高兴从C的角度去写。C++可以极大的增加你写代码的速度。当然，他的弊端就是对底层的掌控力和抽象实现的复杂程度。C++(我指的当然是包括STL和Boost的)的长处在系统层级，所以你写代码的时候必须了解抽象的实现方式。然而抽象实现的越强大(例如boost的share_ptr)，其底层的机制就越复杂，你掌握的时间也越长。而如果不了解底层，往往会发生很多很奇怪的问题。例如smart pointer的问题，在其他语言中，这是语言系统的bug。而在C++中，则是你自己的问题。因此，想要真正玩好C++的程序员，必定首先是一个C高手，而不是拿着C++的OO特性把C++当普通OO语言的人。
再次是Asm，这种语言可以说没有什么生命力，因为他变化的太快了。一旦硬件构架改革，汇编就要调整。而且抽象层级不够高。除非你正好做操作系统底层，编译器优化和系统破解，否则最好不要考虑这种语言。这种语言的核心构架是寄存器。
然后是java，当然，还有很类似的C#。这类语言开始，语言的抽象层次提高了，因此可以提供反射(python中叫做自省)。反射是高级语言中必要的特性，然而C/C++并没有提供，原因么则必须说一下编译型和解释型语言。一般语言分为编译型和解释型，编译型的代码成型后只需要相关的库支持(其主要目的是代码复用减少复杂度和内存消耗)，而解释型的语言需要解释器。如果仅仅从方便使用角度说，解释型语言远远不如编译型(因为要单独安装解释器，当然，像 bash这类怪胎就表说了)，而且解释型的语言运行效率仅有编译型的1/10左右。然后当今语言界，编译型语言远远比不上解释型使用广泛。其根本原因有三个，一个是编译过程，一个是反射，最后一个就是内存管理。
如果读者有编译代码的例子，应当知道，除非在同等的条件下，否则编译C++代码是很麻烦的事情。而配置同等的编译条件则彻底失去了C++跨平台的意义。因此C++在不同平台下反复编译的时候，需要考虑大量的问题来达到跨平台的目的。往往这种事情麻烦到需要作者亲自指导编译的地步。如果一个软件，发布的时候声明可以跨平台，然而使用前需要作者指导用户做一堆繁复的操作。估计这个软件只会受到专业用户的欢迎吧。
所谓的语言编译，其实需要经过两步，编译和链接。编译的主要目的是将每行代码翻译成对应的汇编语言，而链接则是将符号引用转换为地址引用。举例来说，我使用了一个变量str来存放一个字符串，这个变量str就是一个符号。我需要在上文中声明(declear)这个变量，以便编译器在编译的时候代换这个符号对应的内存地址，和理解如何使用这个符号(关于上文没有声明的情况下的错误，请看&amp;quot;向下引用&amp;quot;特性)。我使用str的第四个字符的时候，str[3]就会被翻译到固定的内存地址或者基于基址的偏移，机器完全不用理会str是什么。而这点，则是反射实现的最大障碍。反射可以提供一个对象是什么，有什么的信息，并且可以动态创建对象。有了反射以后，才可以实现序列化，分布式等等高级应用。而C类语言在编译后失去了符号是什么的信息，只剩下一个名字，链接后连名字都没了。这种情况下，你怎么知道一个对象是什么呢？
Java/C#可以提供反射，因此属于解释型语言。但是他们又不属于完全的解释型，而是解释型的一个特殊分支，中间代码。中间代码型的语言，需要编译，执行的时候又需要解释器。看起来没什么好处，可是在支持反射的基础上，大概可以以C代码1/2的速度运行，比纯解释快多了。原因何在呢？我们可以看看 C++为什么不支持反射。反射是保存针对执行结构的数据并且提供交互，而C++则在编译时生成后丢弃了这些数据。因此，理论上说只要保存了这些数据就可以实现C++的反射。这就是中间代码语言所做的事情。当然，考虑到跨平台特性，编译的结果并不是汇编代码，而是类似汇编的代码(Java叫P代码，C#叫 IL)。后JVM直接执行P代码，C#则通过引擎编译IL到本地代码。因此JVM执行的时候效率基本恒定，而C#初次执行速度慢，后来则是比C++慢不了多少。
最后就是Java/C#的最强特性，动态内存管理。使用这个特性，可以使得程序员彻底的从内存分配和管理的泥潭中脱身出来。白痴的程序员写的程序可用，强大的程序员写程序的效率提高。可是成也萧何败也萧何，内存不到底不回收，又有额外的内存开销，结果导致系统的缓存命中率下降。我们平时觉得Java类语言执行慢最大原因在这里，半解释才不是根本原因。
因此这些语言的特点就是中间代码，其核心思想是对象。这类语言的最大特性就是抽象和构架，使用强大的设计模式，将大型问题拆分成多个小型问题解决。在解决问题的时候，其代码量并不比C++少多少。
再然后是python和ruby，当然，某种程度上还有bash，只不过他弱了点。这类语言的核心思想是抽象数据，例如字典，字符串等。bash是围绕着字符串处理设计的，python是围绕着集合设计的。这些语言解决问题的速度非常快，但是模块化特征和抽象特征相对弱。一般情况下，和C++相比，解决问题的速度大概是1:5，代码量则是1:3。</description>
    </item>
    
    <item>
      <title>程序员的几个分类</title>
      <link>//blog.shell909090.org/blog/archives/33/</link>
      <pubDate>Tue, 09 Sep 2008 22:36:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/33/</guid>
      <description>程序员有高下之分，可高下怎么分？到底什么是高程？程序员要完成哪些任务，怎么评价是否完成的很好？ 下面由贝壳同学来胡诌一下他的个人感想，以下的程序员都指商业程序员。当然，爱好者可以类推。
首先我们先讨论一个风马牛不相及的问题，程序值钱么？废话，人家账单大门兄都已经是世界首富了。可贝壳认为，程序不值钱，算法也不值钱，如果说值钱的话，就和软件光盘上面的光盘一样，是个成本性质的辛苦钱。软件里真正值钱的是软件的思想，我们大可以想象一下，写一个让人想穿脑子也想不出怎么用的程序——当然，会写的程序员想穿脑子——然后想想值钱不值钱。大家就会了解到，其实程序员，编程本身，是和装配线上的装配工一样的低附加值行业。不同之处在于，不同培训程度的人劳动生产率不同，而且生产率差异远远大于普通行业而已。好的Coding比差的生产率会高上数倍，而且很难多找几个差的来替换好的，水平不足。但是，做Coding，无论做多快，其价值只会线性增长。
那么为什么软件也被称为今年来发展最迅猛的产业呢？其实关键在于软件业让人可以实现以前无法实现的一些想法。例如，以前不会有人能做到让地球上所有的人 (好吧，是大多的人)坐下来一起讨论一个事情的方法。那么，今天我们的技术已经可以做到。有个人针对当前的技术，设计出一个很好的让所有人坐下来讨论事情的系统。包括一个BBS，带自动翻译系统。在线视频会议中心，可以附加购买在线翻译。一个邮件列表，带存档功能。一个文档编辑和管理系统，带同步编辑，版本管理和资料索引。当我说出上面这堆东西的时候，可能有的人已经晕了，当然，六牙四皂小姐估计已经不继续看了。不过做过一些时间和电脑有关商务的童鞋应当都理解这些东西的意义，并且可以想象这些东西带来的便利。在线翻译的支持系统，邮件列表存档系统，同步编辑，版本管理，资料索引，这些都是技术。尤其是资料索引和自动翻译，更是技术的巅峰之作。可是如果不是结合起来让客户用的舒服，这些东西有价值么？
软件业的价值在于将技术转换为客户的满意，并且最终转换成客户的钞票。越成功的规划，越能满足更多的客户，并且让他们付更多的钱。从这个角度讲，不论软件做的怎么样，微软的规划是全球一流的。同时，能促进这个过程的人，才是具有价值的。不过遗憾的说，到这步基本就不是程序员，而是CTO了—— 程序员的最高价值，在于根据技术和行业，判断应当发展什么技术，采用什么框架，从而低成本，高效的做出让客户满意度最高的系统——而且不是一个系统，而是一堆。这有两个非常苛刻的要求同时存在，对于技术非常熟悉，视野开阔感觉敏锐，否则怎么去感觉技术的价值，判断应当研发的技术？就这点而言，许多程序员在超过30岁后往往都可以在熟悉的领域内做到，有条件的话大概可以在多数领域做到。然而最麻烦的在于，做这个事情的时候，你必须熟悉客户，熟悉客户需要什么。这点往往是不可能的！客户是不可理喻的！技术不是万能的！要知道，使用最好的技术，设计你最喜欢的系统，往往是客户最讨厌的事情。行业客户如此，通用客户更如此。
如果上点你做不到，自然有高水准(也许吧)的人来做，那么你可以做次之的工作。什么呢？执行他们制定的方向。上层的人会告诉你应当发展什么技术，采用什么框架。现在要求你——不用会——能够整合实现这个目标。说明白点，你可以招，但是要求能留下人，低成本。你可以培训，但是要求能做事。你可以研发，但是要求好用。你可以买，但是要求低成本。如果你能实现这些目标，那么同样，你也是有价值的。
这个层次的程序员往往是Project Manager(当然，很多PM根本不是程序员)/Team Leader/Core Programmer。对于他们的要求往往是兼顾技术，行政和人事的。他们需要能够组织研发，积累技术，产生产品。很遗憾的，个人编程能力往往又是次之。不过程序员是很艺术化和个性化的一群人，在这个位置上的人，如果没有相当的技术水准，很难镇住下面的人，用普通管理人员来管理程序员的结果往往是给程序员联合起来耍。因此一般情况下也需要了解大致的程序，并且最好有一定技术水准。
最下面一个层次的人，基本就是能够实现程序，会用上面决定的框架和技术，编码效率高，工资要求低——别的没了——当然，以上是从职业分工来讲一个职业程序员的价值的，你可能说上面没道理，贝壳乱讲。不过事实是，职业的情况下就是上面的状态。当然，从业余爱好者，技术研发者来说，程序员又有另外一种不同的分法。 第一个层次，是刚刚学会技术。能够使用某种特定语言，按照一些例子编写一些程序。实话说，按照贝壳的程度，入手一般语言做到这点不超过7天。然而很多人会徘徊在这个水准无法进步，原因在于——他们能写程序了，而且写了能用。从这个引申开来，顺便说一下，程序员的进步是个很吊诡的事情。一方面来说，要勤于钻研技术才能进步。但另一方面来说，如果不够懒，是很难有足够动力学程序的。因此，好程序员都是勤于钻研的懒汉。
第二个层次，学会了使用框架，并且能够设计一些中度复杂的系统，开始接触第二语言。和初级程序员不同的是，他们能实现一套完整的系统，而不是一个个零散的功能了。这要求他们了解框架，什么时候触发什么函数，系统间怎么互相通讯。并且，有水准的还可以写一些小型的框架。
再上一个层次，了解软件工程对软件的意义，能够跨多种语言编程，灵活使用设计模式，能够设计复杂框架，习惯文档化。和上面的区别看起来不大，不过是能多用几种语言，朴素的设计被设计模式所规范，设计的框架复杂化，并且会写一堆无聊的文档。不过从这步开始，程序员开始了迈向大道的第一步，在这个层次以下的只能算爱好者。无论是研究技术，研究数学理论，还是什么，规范化都是必须而且是非常重要的。我们很难想象一堆工程师，各画各的图纸，最后房子还建的多快好省的。同样，作为高级程序员，头一步就是学会和别人合作。使用设计模式的规范进行设计，使用文档描述系统，可以跨越多种语言协作，了解多种语言思想，这是必须的。
再上一个层次，就已经不是程序员的境界了。作为程序员，上个水准已经到头了。更强的程序员意味更规范？效率更高？那是八级钳工！作为程序员，你可以不认识英文，你可以大字不识一个，然而你必须是个数学高手(其实现在数学高手大字不识一个几乎不可能)。作为程序员的巅峰，你可以很轻易和他人协作，使用合适的语言，然而无法规避的是对问题的抽象描述和求解。在贝壳作为程序员的这段时间里，无数次的碰到数学问题，有些往往是大学里面我们所不屑一顾的。例如蒙特卡洛法，拉格朗日乘子算法，这些在程序里面都有很重要的应用。有的时候更要自行抽象数学模型，并且设计满足时间限制和空间限制的解法。能够抽象问题，解决问题的，才是真正的技术系的高手。
OK，上面，贝壳从两个方面(工程和技术)论述了程序员的高下之分，作为他胡诌的结果，他目前的水准大致是——不知道。并且很遗憾的告诉大家，目前贝壳能看到的就这么多，再上面是什么样子——要么等到了再告诉您？</description>
    </item>
    
    <item>
      <title>火灾</title>
      <link>//blog.shell909090.org/blog/archives/462/</link>
      <pubDate>Mon, 08 Sep 2008 00:34:50 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/462/</guid>
      <description>2008年9月7日下午15时45分前后，南泉路1200弄门口的餐馆二楼厨房着火。火灾造成了部分居民家中电视线路中断，从而引发了居民围观。目前着火原因并不清楚，有附近居民说该厨房使用柴油工作，因为墙壁挂油起火。火势在16点前后得到控制，渐渐熄灭。
下面请自己去看相簿，里面有六张照片，并且贝壳手里有10分钟左右的录像，需要的可以在http://shell909090.3322.org/fire.3gp下载到内容，http://shell909090.3322.org/fire.rar可以下载到全部照片。</description>
    </item>
    
    <item>
      <title>C&#43;&#43;下的Variant</title>
      <link>//blog.shell909090.org/blog/archives/32/</link>
      <pubDate>Sat, 06 Sep 2008 22:50:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/32/</guid>
      <description>所谓C++语言，是一种强类型语言。即是说，C++种的某个变量，在使用时类型是已经确定的。这个并不是设计者的喜好或者是偏心，而是C++中的变量都会被翻译成准确的内存地址和大小，如果类型不确定是不可能处理的。但是在事实中，我们经常要处理一种&amp;quot;变类型&amp;quot;。例如，我们可能需要解析表达式，这个时候我们可能用一个或者两个栈来解决这个问题。可栈里面塞的东西就精彩了，对象，函数，数据，都在里面。这时候，如果是python，我们可以直接用list，他是弱类型的。但是C++怎么办？
一般来说，我们会使用Variant类型来解决这个问题。这是C++面对对象机制和算子机制所派生出来的产物，能够让用户自行定义对象的行为。如果一个对象，可以表现的像这个又像那个，那不就解决问题了？因此在COM中就有一个variant。不过贝壳看过机制，是一堆东西的集合，非常的不美丽。今天贝壳又看到一个variant的实现，漂亮多了。
废话少说，上代码。
#include using namespace std; #include using namespace boost; int _tmain(int argc, _TCHAR* argv[]) { any a; a = 10; printf (&amp;quot;%s: %dn&amp;quot;, a.type ().name (), any_cast(a)); a = 10.5; printf (&amp;quot;%s: %fn&amp;quot;, a.type ().name (), any_cast(a)); a = string (&amp;quot;str&amp;quot;); printf (&amp;quot;%s: %sn&amp;quot;, a.type ().name (), any_cast(a).c_str ()); return 0; } 当类型错误时，出现bad_cast exception。</description>
    </item>
    
    <item>
      <title>python的性能问题</title>
      <link>//blog.shell909090.org/blog/archives/31/</link>
      <pubDate>Wed, 27 Aug 2008 22:18:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/31/</guid>
      <description>贝壳最近在一个朋友的网站上看到了关于SICP零钱兑换问题的python求解，使用了记忆机制，然后他给出了代码。然而他的代码计时上有点小问题，也没有用包装器(奇怪的是，有写)，而且python的栈深度有限。因此贝壳做了几个修改的版本，需要测试下性能，下面就是关于性能的几个问题和过程。
本文详细论述了python语言下和C++语言下使用各种方法测试代码性能的方法，以及粗略的关于两种语言不同算法性能对比。
原始的python代码是这样的：
def change_coins(money): first_denomination = { 1: 1, 2: 5, 3: 10, 4: 25, 5: 50, } def cc(amount, kinds_of_coins): if amount == 0: return 1 elif amount &amp;lt; 0 or kinds_of_coins == 0: return 0 else: kind = cc(amount, kinds_of_coins - 1) kind += cc( amount-first_denomination[kinds_of_coins], kinds_of_coins) return kind print(&amp;quot;change_coins return %s&amp;quot; % cc(money, 5)) change_coins(300) 利用记忆原理包装后是这样的：
def memoiza(fun): cache = {} def proc(*arg): if arg in cache: return cache[arg] else: x = fun(*arg) cache[arg] = x return x return proc def decorator_change_coins(money): first_denomination = { 1: 1, 2: 5, 3: 10, 4: 25, 5: 50, } @memoiza def cc(amount, kinds_of_coins): if amount == 0: return 1 elif amount &amp;lt; 0 or kinds_of_coins == 0: return 0 else: kind = cc(amount, kinds_of_coins - 1) kind += cc( amount - first_denomination[kinds_of_coins], kinds_of_coins) return kind print(&amp;quot;decorator_change_coins return %s&amp;quot; % cc(money, 5)) decorator_change_coins(300) 不记忆，利用栈模拟递归展开是这样的：</description>
    </item>
    
    <item>
      <title>运气真好</title>
      <link>//blog.shell909090.org/blog/archives/30/</link>
      <pubDate>Fri, 15 Aug 2008 14:33:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/30/</guid>
      <description>昨天晚上吃完晚饭，觉得应该勤快点，还指不定什么时候回去呢，把衣服洗了。刚刚把衣服放进去，电话过来，说系统出问题了，要赶快去看看。于是，贝壳赶快出门，去看看系统有什么问题。
进去被一顿狂说，怎么这么不稳定，怎么解决。贝壳一个头两个大。马上去看看什么问题，一看把我气个半死。原来新华社的稿件都是一个xml，一个txt，一个图片，主文件名一样，贝壳的程序也是基于这个原理写的。现在到好，只有图片没有xml，或者只有xml没有图片。这叫贝壳做个P啊！据说是因为新华社要推新格式，所以老格式不怎么支持了。问题是，上面说保奥保奥，居然奥运期间来这手，这不是要整死人么？而且通知都没有的，要不过来看，黑锅就我背定了。
抱怨归抱怨，贝壳还是赶快改程序，做了个入新格式的。进度还挺快，虽然差异一堆，但是做到早上三点半基本就做好了。到实验机器上一跑，全部通过。然后到生产环境中一炮——全部报错。
OK，下面可就是贝壳无能为力的了。毕竟数据库那里应该都是一样的，而且也不是贝壳写的，无法调试。于是今天只有这样，回去睡觉。走到电梯里面，贝壳觉得不对，味道不对，一股臭脚的味道。这种味道只有两种可能，一种是中国男足来过了，一种是下雨。出门一看，果然，大雨滂沱。最要命的是，贝壳只带了两套衣服，还有套正在水池里面泡着～～～
于是贝壳一路狂奔，跑过去没两步，哗的一声，贝壳就不知道陷到什么里面去了。吓了一跳，赶快站直，包举高。仔细看看，原来前面马路修路，旁边的土还没有填完整，给水一冲就变成了泥浆坑。贝壳就是陷到这里去了，水刚好漫过小腿肚。
慢慢爬上来，然后贝壳就不敢跑了。前面毕竟还是有几个没有完成的井的。万一掉里面去，连申诉都不会有人管的，毕竟那是还没修好的工地。于是慢慢慢慢走回去，到宾馆的时候全身湿透，外带两脚泥。而且两套衣服全报销了，连第二天吃饭怎么出门都不知道～～～
奥运期间，这个运气还真是——无敌了。</description>
    </item>
    
    <item>
      <title>最近悟到了一个道理</title>
      <link>//blog.shell909090.org/blog/archives/29/</link>
      <pubDate>Mon, 11 Aug 2008 15:20:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/29/</guid>
      <description>贝壳问上帝，中国房价什么时候下来。上帝说，通涨结束，或者居民消费上去就下来了。
贝壳问上帝，中国居民消费什么时候上去。上帝说，全民保障体系搞好就上去了。
贝壳问上帝，中国什么时候结束通涨，搞好全民保障体系呢？上帝哭着说，我看不到那天了。
上面是拿中国足球的玩笑改的一个玩笑，不过贝壳真的悟到了房价高的原因。通涨乱高无比，保障一塌糊涂，赚了钱不敢花，也不能放，当然只有买房了。房价上涨，通涨更加高高高。</description>
    </item>
    
    <item>
      <title>奥运前一天，熬夜到五点半，留念</title>
      <link>//blog.shell909090.org/blog/archives/457/</link>
      <pubDate>Thu, 07 Aug 2008 13:14:56 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/457/</guid>
      <description>奥运前一天，熬夜到五点半，留念。</description>
    </item>
    
    <item>
      <title>程序员入门的12个问题</title>
      <link>//blog.shell909090.org/blog/archives/28/</link>
      <pubDate>Sun, 03 Aug 2008 16:01:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/28/</guid>
      <description>以下题目是应一个朋友问而写的，适用于刚刚入门有志或者有需要做程序的朋友的题目。题目脱胎于日常编程中常见的一些问题，很多是贝壳实际碰到问题的变形。题目不注重所用语言，每道题目可以用不同语言解决。有意思向计算机方向发展的可以试试用不同语言来解决，看看哪种语言最方便解决这种问题。如果打算增加难度的话，请使用C++来做，并且尽量抽象复用。在这个过程中积累下来的可复用代码会对以后编程有很大帮助。
1.读出文件中的以下格式内容，计算逆矩阵，并按照同样格式输出。 1 2 4.5 3 0 1 9 5 2 数字间以空格分割，行以回车分割。 难点： 输入和输出应当可以选择是键盘输入还是文件输入，输出到屏幕还是输出到文件。 逆矩阵计算中有可能求不出，出现除零。设法避免直接的报错。 评价： 很中规中矩的一个问题，有点竞赛的味道。只要做过程序的人一般不会失手。
2.某个XML，其中记录了一些信息。信息是按照时间-地点-人物的顺序记录的，例子如下：
&amp;hellip;
现在需要你颠倒一下，变成这样的：
&amp;hellip;
难点： 看看能想出多少解决问题的方法。 试试尽量减小内存消耗。 评价： 解决问题的方法很多，比较一下这些方法的优劣。 有一年以上程序经验的就可以最终解决，但要解决的比较完善需要两到三年经验。
3.下载google的首页，跟踪二级连接(二级连接，就是首页中连接指向的页面，上面连接指向的页面)。 并计算其中所有页面，显示出的非空白字符的个数。(显示的文字中的非空白字符) 难点： 试试看跟踪js脚本链接。 登陆后的google首页是不一样的，包括提示，语言类型，设法统计登陆后的首页。 如果是多级呢？ 评价： 宽度优先和深度优先算法的应用，对集合运算有一定要求。 重点在于获取和处理html页面的方法。 一年以上即可解决，完善程度和技术水平关系不大。
4.运行两个程序，A和B，将A的输出输入到B中。 难点： 需要等待A的输出和B的输入，以及程序的终止条件。 评价： 需要对系统熟悉，知道管道和用法。知道进程间交互的API。 需要研究过系统，程序水平没有要求。
5.遍历某个目录，找出其中的特定图片文件。 难点： 怎么分析图片文件？文件名是比较粗略的方法，更好的是使用文件签名分析。 下次遍历的时候速度怎么提高(假定文件不变化)。 评价： 还是深度和宽度搜索题目，分析文件是难点。 扩展要求对于数据缓存有一定要求。 一年以上即可解决，文件签名分析看个人水平。
6.监视某个目录的变化，将新加入的mp3的相关信息(IDv3)邮件发给我。 难点： 怎么监视目录变化？ 怎么提取MP3的内容？ 怎么发邮件？ 怎么保证不漏内容。 评价： 要对系统熟悉，了解mp3格式或者能够自行寻找库扩展语言。 了解邮件发送协议，或者能使用系统库发送邮件。 两年以上可解决，完善需三年以上水准。
7.写一个程序，可以计算加减乘除，支持括号。 难点： 让你的程序算算1+2*3，看看是多少。正确应当是7，设计不良是9。 看看你的程序，2/6*3得多少，是不是1.0(最好是1)。 让你的程序设法支持乘方和函数。 评价： 对数据结构和算法要求很高。 一年以上可解决，要扩展支持算符和算法，需要三年水准。
8.画一只乌龟，保存为图片。 难点： 让用户动手画？ 试试保存为各种格式的图片。 评价： 实用项目，按照书本教程最多12小时就可以掌握。 然而需要自行解决并做好，至少一年以上。</description>
    </item>
    
    <item>
      <title>avast4 collide with ext2ifs</title>
      <link>//blog.shell909090.org/blog/archives/27/</link>
      <pubDate>Thu, 31 Jul 2008 01:16:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/27/</guid>
      <description>引用 Affected Product: Avast4 home edition ext2ifs 1.10c ext2ifs 1.11 Description: avast4 home edition is a free anti-virus tools. In 2008-07-30 it update some files, include some file called &amp;lsquo;aswSP.sys&amp;rsquo;. According infomation in autoruns, it&amp;rsquo;s avast self protection module. [Here is info from autoruns.] aswSPavast! self protection module ALWIL Software c:windowssystem32driversaswsp.sys [Here is info from update-log] 2008-7-30 7:36:14 file Direct move of file: C:Program FilesAlwil SoftwareAvast4SetupINFAMD64aswSP.sys 2008-7-30 7:36:14 file Installed file:C:Program FilesAlwil SoftwareAvast4SetupINFAMD64aswSP.</description>
    </item>
    
    <item>
      <title>今天25岁</title>
      <link>//blog.shell909090.org/blog/archives/26/</link>
      <pubDate>Wed, 16 Jul 2008 17:39:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/26/</guid>
      <description>今天贝壳25岁了。
前两天时间紧，赶快找两个人吃了顿当过25。今天早上起来，就收到了六牙四皂小姐的恭喜。这一刻，我总算了解她收到我一堆废纸当生日礼物时的心情了。路上第二个过来，是老妈的。到公司，兔子姐的第三个来了。然后，贝壳把名字改成了今天25岁。猫小姐的第四个和蛆小姐的第五个也来了。才五个，还有两个是提醒的，好失败。
不过无论如何，还是谢谢上述人，在我不长的人生中，还有你们记得我。</description>
    </item>
    
    <item>
      <title>新种病毒出现</title>
      <link>//blog.shell909090.org/blog/archives/25/</link>
      <pubDate>Thu, 10 Jul 2008 12:14:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/25/</guid>
      <description>有新种病毒出现，大家当心。
病毒症状如下：
有MSN好友给你传一个网址，如同http://[用户名].imagecroco.info/。(贝壳注：现在已经被Mozilla列为欺诈网址)当浏览后中毒，会继续给好友发送网址。发送网址时用户离线，发消息用户不回复。中毒用户提示已经在另外一个地址上登录。
机理估计如下：
当你访问网站时，会被要求输入用户名或密码。或者被挂上马，等登录时被套出用户名和密码。当你不使用时，服务器会自动使用你的用户名登录，给你的好友发送病毒。如果不修改密码，即使本机清理病毒或者设置名称提醒也未必有用。</description>
    </item>
    
    <item>
      <title>贝壳房里的澡堂</title>
      <link>//blog.shell909090.org/blog/archives/24/</link>
      <pubDate>Wed, 09 Jul 2008 23:51:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/24/</guid>
      <description>贝壳住的旅馆，屋子的中心是一个浴室。透明玻璃的……
六牙四皂小姐已经参观过了，评价是很华丽。</description>
    </item>
    
    <item>
      <title>是我太无知，还是世界太疯狂</title>
      <link>//blog.shell909090.org/blog/archives/23/</link>
      <pubDate>Tue, 08 Jul 2008 22:54:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/23/</guid>
      <description>刚刚在用电脑，突然听到空调咔咔狂响(没错，不是硬盘)，然后从里面飞出……一块冰？
我知道沈阳很凉快，不用这么提醒我吧。
是我太无知，还是世界太疯狂？</description>
    </item>
    
    <item>
      <title>沈阳记一兼我还活着</title>
      <link>//blog.shell909090.org/blog/archives/22/</link>
      <pubDate>Fri, 04 Jul 2008 01:09:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/22/</guid>
      <description>同志们，我还活着。最近项目不断，贝壳来了走走了又来，先是烟台，回上海修养两天再回烟台，然后回上海救火两天，连公司都没回去报销又来烟台，刚刚搞的差不多又来沈阳。下面据说还有上海和烟台，貌似奥运前是没完了。
而且烟台的网络状况急转直下。本来速度快的跟鬼一样，现在报社上网要用代理，每次打开个页面就要点一次密码确认，点记住密码也没用。这种情况下速度根本没意义，宾馆则是慢的跟鬼一样。然后……贝壳就光荣的断网了。
祸不单行，贝壳在7月1日接到了移动的通知，说话费只有14元多，记得充值。贝壳想，哦，也能用上一些时间了。谁知道第二天就断网，这才想起来移动的话费是第二日过的。然后紧急找人充值，却被告知因为欠费无法充值。然后贝壳要和客户联系，要用飞信帮人测东西，要收的通知，移动上网看blog……全部没了。最要命的是，我马上要出差沈阳。
贝壳到了沈阳，打车到位，一点不差，真的是运气。否则喊救命都不知道喊谁了。第二天，找个地方充值，总算把手机开开，谁想到刚开就用到了。我说要去故宫旁边的如家七斗星酒店，结果混蛋司机给我拉到了故宫旁边的如家酒店。下来才发现不是，回头找司机没影了。幸好这个时候，手机已经可以用了。于是我打开Moto A1200r，接入中国移动GPRS网络，使用Google Map手机版，很容易的找到了当前位置。(贝壳注，以上不是广告，当然和周XX的大XX里面那个MXXX和移XXX的XX更不一样……)。走走两分钟就到了，作为手机地图来说，这算是立了头功了。</description>
    </item>
    
    <item>
      <title>招行的一些数据</title>
      <link>//blog.shell909090.org/blog/archives/449/</link>
      <pubDate>Sat, 14 Jun 2008 12:55:42 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/449/</guid>
      <description>银行的平均窗口服务效率是每人4.5分钟。
普通窗口队列长度是62人(周五14:20记录)，三个窗口，等待时间90分钟。
金卡窗口队列长度是10人(同一时间记录)，一个窗口，等待时间45分钟。
普卡/金卡比为6.2:1，即存款在5W以上的人占总人数的13.89%。
存款结算时数据为存款利率86.14，但总资产计算时利率只算了86.13，出现一分误差。
以上。</description>
    </item>
    
    <item>
      <title>关于捐款的问题</title>
      <link>//blog.shell909090.org/blog/archives/21/</link>
      <pubDate>Thu, 22 May 2008 14:27:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/21/</guid>
      <description>上次贝壳已经给捐款不痛快过一次了，这次还是得继续不痛快。
首先是一条低调的新闻，网易终止与红十字会的合作，据说原因是&amp;quot;过程无法监控&amp;quot;。作为一个慈善机构，过程和结果无法监控，在发达国家(好吧，成熟国家，省得犯了某些人的讳)是不可想像的。网易为什么要提出监控，红十字为什么不给监控，这个就要说到善款的结算过程和意义，以及当前中国非政府组织的现状。
已经上班的朋友可能知道，我国有两种税征收方式，连带征收和查账征收。查账征收中，国家会检查企业的出入账目，计算企业盈利，并从中抽取企业收入的一定比例，这个就是所谓的增值税。如果您不小心亏本了，或者打平，那么是无需纳税的，这个很合理。总不会说亏本继续纳税吧。企业怎么减小增值税呢？主要是购买各种东西，当然是生产过程所需的东西，这些东西会计入成本(因此出差报销需要发票，因为这些发票代表着出差这个东西的成本)。如果企业收集很多发票，做帐做到打平，不就可以节税了么？事实没这么简单的，每个企业都有所谓的总支出，而总支出是无法作假的。因为一般的发票(餐饮，手机等一般人能搞到的发票)在总支出中占的比例不得大于一定的值。换句话说，做300W的生意，如果花45W作为餐饮花费是合法的，如果花100W，那就只能按45W报账。而其他发票可不是一般途径可以搞的到的，毕竟上游厂商也要开增值税发票，从源头的1元成本增值到100元产品，增长的99元里面的税收，不是落入上游就是落入下游，大家商量着来吧。从此意义上说，捐款(尤其是企业捐款)开具发票和财务透明就尤其重要。我举个例子。
例如，你是一个企业老板，做的是把一种东西买进，加工，然后卖出的生意。东西的成本是8元，加工的成本是2元，卖出去是15元，其中渠道和营销需要2元成本(原谅我用这种很白痴的例子)，那么每个东西的净盈利就是3元。国家按照34%收税，简单点我们说税收就是1元(其实例子中还是有问题的，渠道成本超标了)。那么你每个东西纯利润就是2元。好，现在，你打算给灾区捐款，捐300(原谅我这种白痴比喻)。那么我们说，理论上你卖100个东西够么？不够！为什么？因为你要交税。你的纯盈利是3，可税交好就变2了，因此你要卖150个才够。
哪里有这种事情，我做好事还要缴税？这不是强盗逻辑么？所以一般企业捐款都要求开具发票，证明这笔钱是捐掉的。这样国家会把这笔钱计算为成本，不会让你交这种税。可如果捐款不给发票，那事情就有趣了。我做好事，还要缴税，而且很重。而且谁能开具这样的捐款发票呢？如果人人能开，那么好，我当场开个NGO，说是慈善，然后把企业盈利全部捐掉。这样我的企业永远打平(甚至可以亏损，享受国家补贴)，然后钱还在我自己口袋里面。因此可以接受捐款的慈善机构也不是说开就能让他开的，否则会成为大企业的避税所。一般情况下，一个NGO如果要开，必须要公开账目，而后获得国家认可。公开账目是获得国家认可的必要前提，如果账目不公开，国家不会认可的，否则就会产生偷税。而中国的现状是，即使开慈善组织，账目公开，也很难获得国家认可。大家只能把NGO注册成公司，给工商界开一般营业发票，然后上税。因此大家捐款只能捐给红十字会，而他的账目却是不公开的，因为你没别的选择。
而且账目不公开会产生一个更混帐的后果。如果说前面一个只是不合理，那么这种可能就只能说是混帐加没人性。那就是贪污。我们捐100，NGO提取50%(或者更高)作为运作成本，然后剩下的发给灾民，对外宣称全发了。因为你根本不知道自己捐多少，自己拿的是多少。例如，你自己捐了100，你知道你的朋友捐了500，那么如果这个NGO说总数捐了1000，你怎么知道是不是真的只有1000呢？如果公开账目，你可以核对你的捐款是否在里面。很明显，如果不在，这是有问题的。如果在，而且每个捐款人的款项都在，最后的这个总数一定是正确的。发放也是同样的问题，如果公开发放账目，你可以看你拿到没有。如果有写没有拿，这是有问题的。如果每个上面写的人都确认收到了后面的款项，那总发放数也一定是对的。而后，我们通过总接收和总发放可以算出一个组织的组织运作成本。如果有大量的善款被消耗了，那么我们就可以说这个NGO是有问题的，我们会更换NGO捐款。而造成这种高消耗的最大可能就是贪污。同时，我们也可以计算出NGO的其他问题。例如，一个NGO的工作人员拿2W去买药品，他和药品供应商很熟悉(这个情况很普通吧)。所以让他们给1W的药品，开2W的发票。实际上就是给2W现金，开2W发票，给2W药品。1W给红十字会，1W实体药品自己拿回去分掉。公开账目后可以发现，这种情况下药品价格会比正常价格高一倍。如果说为地方增加产值后，自己贪掉一部分的贪污是某种程度上是可以接受的。如果说尸位素餐，人浮于事的贪污是让人痛恨的。那么拿灾民的带血的钱的贪污就是不可忍受的，伤阴德的。更粗俗的说，生儿子没屁眼。也许，我们的红十字会账目不公开有其他理由。也许，我们的红十字会大量提留是有其他原因。然而，你这个样子，让我怎么相信你？
最后就是关于捐款的数目。有人骂姚明捐的不够多，好，我想最好的方法是这个人站出来。我们计算下姚明同志的总捐款额度和拉到的捐款额度，比上全年除税总收入，再计算下你的总捐款额度和拉到的捐款额度，比上全年除税总收入。如果你高过姚明，我们随便你骂。捐款这种东西，要骂可以，站出来。我不反对攀比，我反对的是说别人捐少了，自己却不多捐。不过估计这些人也有郁闷的理由，据说国家政府机关是摊派捐款，有个银行每人要1000多。这些人估计就是这么郁闷出来的。</description>
    </item>
    
    <item>
      <title>关于地震的预报</title>
      <link>//blog.shell909090.org/blog/archives/20/</link>
      <pubDate>Sat, 17 May 2008 14:29:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/20/</guid>
      <description>贝壳这几天一直在关注地震的事情，其中经常能听到一个消息，其实地震前已经有了预测，只是因为奥运压了下来。而后贝壳在youtube上找到了一个视频&amp;quot;小动物曾经给予我们的警告！！(四川电视台新闻视频 )&amp;quot;，是关于10号在四川电视台播出的新闻，其中就有大量出现蟾蜍的解释。这个事情让贝壳觉得很惊讶和伤心，莫非上万的人命不及政治任务？不过今天，贝壳在wikipedia上找到了这个事情的全面分析，可见wikipedia也不是全无是处么。
2008年5月10日，四川绵竹市西南镇檀木村（距离震中不到100千米）日前出现了大规模的蟾蜍迁徙，有数十万只蟾蜍在一制药厂附近公路上行走，但当地林业部门解释称，这是蟾蜍正常的迁徙。地震发生后，有网民十分激动，并留言指责“专家还不如蟾蜍”，而有动物学家亦认为，“动物感受地壳变动的能力较人类敏感，因此它们能预知自然灾害也不足为奇。”。但是经过网民搜索，发现蟾蜍大规模迁徙现象曾在2006年4月于重庆、2007年5月于河北唐山、2007年9月于山东临沂、2005年7月于吉林长春、2008年5月于江苏泰州、2007年4月于四川成都等全国大范围地区多次发生并被报道，完全不于地震相关，应属一种自然现象。
OK，上面我们可以看到，有这个报道是不假，可出现现象和发生地震间不正相相关。要是出现一次防震一次，的却非常麻烦。所以这次的事情，可谓事出有因。我们也可以想像一下国家的立场，如果确认有地震，跑不掉躲不开，那为何不报呢？一方面避免了人员财产损失，一方面展现了高科技，一方面还不会给奥运带来麻烦。所以我估计最严重是国家并不确认地震，因此为了奥运而不做可能性的防范。
不过由此我到想到一个关于地震预报上的缺陷。大家知道，我们国家很多事情是领导负责制。好不好，看领导。事情做好了固然领导有很大好处，可出问题领导也会倒大霉，因此很多人不求有功但求无过。唐山地震的反思中就有消息说其实地震前已经有了现象，可是领导对于不确定的东西不敢报，怕负责。毕竟地震这东西谁都说不好，就算我们看到各种景象，可万一不地震怎么办？对于地震这种问题，领导负责制是非常荒谬的。但是如果没有一个制度去平衡，恐怕我们又会陷入另外一个极端。地震局一有情况就报，也是怕负责。那我们会陷入漫天地震预报，就是不见地震的情况下。
对于这种情况，实话说贝壳也没有什么好的想法。不过如果让贝壳做选择的话，贝壳还宁可听到一堆未必发生，也不愿意听不到将要发生。大家可以想想，你是愿意多听几次下雨没碰到呢？还是愿意下雨前完全没预报呢？</description>
    </item>
    
    <item>
      <title>关于地震的问题</title>
      <link>//blog.shell909090.org/blog/archives/19/</link>
      <pubDate>Thu, 15 May 2008 14:32:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/19/</guid>
      <description>大家知道贝壳不是穷人(至少算起来，在社会上不算穷人)，这次地震了，公司组织捐款。老实说，公司里面要是普遍捐1000的，贝壳最多也就挠挠脑袋，说句&amp;quot;半个手机又没了&amp;quot;，就扔出去了。或者要是有说法，说你要带头怎么怎么的，贝壳最多也就是想想，捐了也就捐了。不过这次情况比较特殊，贝壳在出差，所以就出了点不愉快的事情。
因为贝壳在出差，所以无法直接捐款。公司组织了垫付捐款，让每个人讲个捐款额度，然后公司垫付捐款，回来再给。结果公司的一帮同事自己捐100，哄(发阴平声，一声)贝壳捐500。贝壳不想当这个出头鸟，所以就准备捐200。结果完后一统计，贝壳觉得不大对，怎么这多阿。赶紧问统计的同事，结果他回一句，你不是捐500么？
贝壳马上找负责捐钱的人联系这个问题，到不是说不想捐，而是要捐不要捐完全是我的自由，不经过我的同意怎么能随便说我要捐多少呢？大家可能觉得献爱心么，怎么还计较这个。实话说，要是哪个捐了自己一年工资，我随便你说这话，否则闭嘴。我高兴怎么捐是我自由，捐钱是捐钱，财务问题是财务问题。不经过本人同意就捐款，说起来回来让我认还是不认呢？认了就破财当出头鸟，不认回头还指不定别人怎么戳脊梁骨呢。这种随便让人一统计就捐钱的做法是否有点太不严谨了呢？
说到这里，贝壳还想起昨天看的一个笑话。一个照片，上面写，&amp;ldquo;XX慈善基金会请您捐款XXXX&amp;hellip;&amp;quot;。说实话，昨天我是当笑话看的，今天我就有点笑不出来了。诚然，地震了，大家都很难过，我们想为灾区的人民做点什么，可做什么呢？怎么做呢？我的一个朋友在MSN签名上写，每次地震就捐款，捐款了就盖楼，盖楼了就回扣，回扣了就豆腐渣，豆腐渣了一震就倒，倒了继续轰轰烈烈的捐款。所以她的结论是，一分不捐。
我还是得强调一点自己的观点，每个人有捐的自由，也有不捐的自由，所以我觉得这个朋友的做法并没有什么错误。不过我们可以想想地震灾情最严重的是什么？学校。谁有听说政府机构有什么问题么？没有。要说缺钱，说地方贫穷，说着急上教育，说我们没办法。为什么死的都是孩子，而不是公务员？难道政府比学校更有钱？难道政府应该比学校更有钱？另外贝壳曾在哪里看过一个报道(请恕贝壳找不到原文)，说这次受灾的聚源中学，被称为“危房”的旧校舍没事，新校舍反到倒了。对比对比各地的白宫式衙门，不觉得讽刺和悲哀么？
http://bbs.yaolan.com/thread_50222085.aspx
http://www.my1510.cn/article.php?e5d36d79e4f603f0
还有就是贝壳看到的一个资料，凤凰的节目，江河水走西南的记者写的blog。[http://www.my1510.cn/article.php?f734ba3f59d26040]其中就谈到了，过度的开发水利资源有导致地震的可能。关于这个问题，贝壳以前从未得知(当然，贝壳也不学水利地质，所以也不知道这个问题的具体情况)，以前一直认为水坝这种东西，修越多越好。那么现在我们是否应当关注这些问题，关注水坝的负面效应。如果这是真的，即使因为实际需要而修建水坝，也至少不要为毁坏我们家园而感到骄傲。
最后就是这次中国政府的态度，我得说，主旋律是好的。反应迅速，信息公开。和三十年前的唐山，今年二月的雪灾比，相信大家心里都有数。但是我还是得说，还是不足够。很多国家的救援队不得进入灾区，新闻报道也主要以新华社为主，报道以主旋律为主。虽然说我可以理解这些行为的理由，但是我觉得，我们可以更公开。让我们看到失去生命的人群，失去生命的城市不会让我们感恐慌，一直说没事才会让我们恐慌。让我们看到有发国难财的人，有明哲保身的人，自私的人，也不会让我们止步不前，而是会让我们更明白自己在这种时候怎么做。</description>
    </item>
    
    <item>
      <title>上帝都反奥，我们怎么办</title>
      <link>//blog.shell909090.org/blog/archives/18/</link>
      <pubDate>Mon, 12 May 2008 14:58:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/18/</guid>
      <description>听说北京地震了，全国地震了，这奥运还办不办？</description>
    </item>
    
    <item>
      <title>python的几个改进</title>
      <link>//blog.shell909090.org/blog/archives/17/</link>
      <pubDate>Sun, 11 May 2008 19:35:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/17/</guid>
      <description>首先需要增加的就是kill掉线程的方法，目前我们统统是调用系统函数。有没有搞错阿，需要针对系统写代码不说，还不安全。在线程关闭的过程中没有辗转开解和安全捕获。从最安全的角度上说，要关闭线程最方便的就是给其他线程抛异常。python并非不可以给其他线程抛异常，可非常麻烦不说，具体执行的时候发现，其实根本不是抛异常，而是在执行过程中检查异常。这样当程序在调用外部代码的时候死循环，想kill线程的时候根本不可行。所以安全的关闭线程的异常和直接kill掉线程的方法都要有。
其次，这东西没有什么可以快速辅助处理集合的工具类，例如STL中的set_union等等。虽说每个都不难，可是统一的实现和各自的实现毕竟是有差别的。很多时候，我们只需要抽象的计算两个集合，一个和一个的交集，就OK了。</description>
    </item>
    
    <item>
      <title>反射的几个类型</title>
      <link>//blog.shell909090.org/blog/archives/16/</link>
      <pubDate>Tue, 06 May 2008 16:53:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/16/</guid>
      <description>所谓反射，其实就是在运行时可以获得代码数据的技术，算是面对对象编程语言的专利。从这个意义上说，反射可以分为三个类型。
头一类是RTTI，其实这根本不算反射，本质上只能说多态。RTTI是一种鉴别某个对象是否为某个类的派生实例的技术，在C++中就有实现。简单的方法就是实现一个特定的虚函数，将当前对象所属的类虚函数表和所属父类的虚函数表一一返回。这样对比某个类的虚函数表，就可以知道是否为派生实例了。支持RTTI，程序才算真正支持了面对对象，而反射则是更高一层的技术。
第二类就是在C#和Java中盛行的反射技术，这种技术的核心在于可以通过名称寻找到对象。例如，我们可以寻找到一个叫做abc的对象，枚举其中的成员和方法，并且执行调用，这才是反射最大的意义。当我们遇到不同的数据输入时，我们可以调用不同的方法来处理这个数据，并且这个过程是动态配置的。而在C++中，我们无法通过编译器支持这个能力，必须手工的建立一个名称和一个对象的关联关系表，在合适的时候通过这个表，获得某个名称的函数入口指针。其实C#和Java中实现的方法和VM息息相关，他们的代码在目标文件中还保持着命名空间-类-对象的结构，Java还进一步的保留了源码(只是被翻译为了更快的P代码)，而C#只保留了IL代码。这样VM在执行的时候自然可以很轻松的找到对应的函数，并且获得函数签名。而C类语言的特征是汇编时代的&amp;quot;符号链接&amp;quot;方式，编译的时候保有符号，完成链接就没了。
中间插一句，其实我们完全可以写一个只支持高阶语言的系统。这样的系统未必高效，可一定方便阿。
最后一种则是python中的系统，当用户调用一个类中的函数的时候，使用一个专门的函数来决定调用哪个。因此当对付SOAP这种东西的时候，python可以直接上。而C#，Java，C++都要通过工具生成代理方法。再用代理方法去调用公共函数库，实现调用。因为python直接将调用定向到了一个统一的函数上，所以压根不需要这步。不过这步的代价是严重的性能问题，因为每次函数调用都要去检查调用目标。python是纯脚本语言，占了这点便宜，所以才能这么干。</description>
    </item>
    
    <item>
      <title>C&#43;&#43;继承,虚,转换规则探究</title>
      <link>//blog.shell909090.org/blog/archives/15/</link>
      <pubDate>Fri, 02 May 2008 19:03:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/15/</guid>
      <description>以下讨论的东西都是在VS2005下跑出来的，如果想知道别的编译器规则，请照跑一遍。以下是类定义，函数内容为打印出当前函数名称，所以就不再贴了。
class Base { public: Base(); Base(const Base &amp;amp;amp; o); virtual ~Base(); virtual Base &amp;amp;amp; operator = (const Base &amp;amp;amp; o); void function1(); virtual void function2(); void function3(); virtual void function4(); //virtual void function5(); virtual void function6(); }; class Derive : public Base { public: Derive(); Derive(const Derive &amp;amp;amp; o); virtual ~Derive(); virtual Derive &amp;amp;amp; operator = (const Derive &amp;amp;amp; o); void function1(); virtual void function2(); virtual void function3(); void function4(); //compiler error //int function5(); protected: virtual void function6(); public: }; 首先我们讨论继承下的构造/析构顺序。</description>
    </item>
    
    <item>
      <title>无条件的爱国和无聊的自尊</title>
      <link>//blog.shell909090.org/blog/archives/14/</link>
      <pubDate>Fri, 25 Apr 2008 00:30:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/14/</guid>
      <description>实话说，这个文章不好写，标题更不好起，尤其是在这种爱国情绪异常高涨的敏感时期。不过我还是得说说，关于某些中国人无聊的自尊和奇怪的爱国主义观点。
大家知道，我是个程序员，因为工作的关系，经常得和人讨论一些计算机上的问题。几年前我就和一个人讨论过关于中国是否需要自己的芯片，自己的系统，等等等等的问题。我的意见是，中国不需要自己的芯片产品和系统产品，但是必须拥有自己的芯片技术储备和系统产品储备。因为掌握一个技术系统是一回事情，而投资研发生产就是另外一回了，后者是需要成本的，亏了你负责还是我负责？而对方的观点是，我们必须拥有自己的芯片产品，拥有自己的系统产品，因为我们是中国。关于这个我就很奇怪，英法德意奥这些八国联军，除了美国，也没有多少芯片产品阿(其实是有的，不过多数是专用芯片)。如果说系统，世界上的商用级别系统基本就三个，Windows，MacOSX，Unix，全是美国的。至于要说其他国家开发的系统有没有，一个必须是商用级别的，像我当年自己写的哪种“操作系统”就请免谈，还有一个要和Unix没有派生关系，否则还不是老美的根？按照这两个条件来说，可以说世界上的系统只有美国一家。即使是按照经营公司(注意不是基金会)来算，也是美国大头。至少我只知道一个Novell的SuSE不是美国的，其他商用系统，Microsoft的Windows，Apple的MaxOSX，Redhat，Sun的Solaris，HPUX，IBM的AIX，全是美国的。如果说我们担心技术受制于人，担心后门担心漏洞，而在保密领域采用自主操作系统，并且将这个过程作为国家的操作系统技术储备的过程的话，我是完全理解和支持的。可是自己开发一套芯片产品和系统产品，而且原因仅仅是“我们是中国”。我没有感觉到说话掷地有声的自豪感，反而清晰的感觉到了某些人头上的两个大字“傻X”。
仅仅因为我们是中国，就开发一套自己的系统，因为作为一个大国，不能没有系统。我不知道是不是这个逻辑。这个逻辑看上去到也没错，不过开发以后呢？没人用呢？再号召大家爱国一回，每个人都使用这个国产系统？不说别的，那位兄台当时还在请教我关于Windows安装的某些问题，不知道他会不会因为爱国去弄套银河(据说也是Unix内核)，然后装上去写文档。如果我们陷入无条件的爱国中，那就会发生无数傻事，产生无数傻瓜，例如这种号召做操作系统的，还有下面要说的血狮，佳乐福等等。
至于血狮，经历过那个事情的都会觉得，那就是个爱国主义的大笑话。当年血狮打着爱国主义的大旗做了N多宣传，结果呢？一塌糊涂。此后我就一直对所谓的“爱国主义”抱有一定的戒心，因为这个东西实在太容易被人利用了，谁能定义清楚什么是爱国呢？买外国的产品爱不爱国？如果买外国产品就是不爱国，那么东莞为全世界每人生产了一双皮鞋，号称世界工厂的值得我们骄傲的事实，就会变成东莞诱使全世界每人叛国一次了。可能又有人要和我争辩情况不同，可是，不知道大家看没看过公平论。只有当你抛开你是谁的时候，才可能公平。我们暂时抛开中国人的身份，单论买外国货是否就算背叛，那么无论如何是得不到这个结论的。我的观点是，当质量，性价比相近，或者说有的比较的时候，我会选择国货，因为让国内厂商赚钱就是让中国人赚钱，让中国人赚钱就是让我赚钱。但是当国货是个垃圾，或者我很讨厌。我并不介意外国产品，尤其是日本产品。不得不说，虽然我挺讨厌日本的一些东西，然而却不得不佩服日本的另外一些东西。
说到这里，我还准备说一下所谓的“公平论”。我是不知道在哪里看到的简介的，没有拜读过原文，不过我觉得他讲的很有意思。很多时候，我们睁眼说瞎话，就是因为我们是“既得利益者”。只有在你根本不知道你会是谁的时候，你才能真正的说公平。例如一个老板和一个员工，老板希望少发钱多干事，员工希望多发钱少干事。支持谁呢？只有你不知道你会成为谁，你才能公平对待。如果你讲支持老板，可将来做了员工，不要懊悔到心痛么？如果你讲支持员工，偏偏做了老板，不要伤心到白发么？很多事情我们只有抽离开我们是谁，抛弃固有的立场，才能公平对待和评价，当然，前提是你打算做出公平的评价。在这点上，我到是喜欢真小人胜过伪君子。事实是对我有利，我就说，虽然不公平，可世界何尝公平，我就是要这么做，因为对我有利。而不是摆出一堆的道理，站在看似公平的立场上说着冠冕堂皇的东西。北京高考分数线低，要不要改？问我，我说不改，为啥，因为我在北京。
OK，有了上面的一堆爱国和公平，我们现在看看我们今天的重头，佳乐福。这超市也算倒霉，就因为生来带有法国基因，又因为法国政府无聊的支持了下藏独，就被一群群的中国人鄙视。实话说，我觉得实在有不够理智和不够解决问题。首先我们就说说法国政府的言论吧。我一直有一个观点(但是很难做到阿)，即使你说的是对的，也应当允许别人说错的，尤其在政治，思想等等这种无法立刻明辩是非的领域。认为自己是正确的，而禁止别人说错误的，我感觉仿佛回到了文化大革命时代。当然，你可以尽力宣传自己的观点，尽力说服对方。但是如果我们坚持我们是对的，而禁止别人说错的，那么就会陷入随大流的怪圈中，你不敢，或者无法说出正确的东西。而我们知道，真理往往掌握在少数人手中。当然，我们会努力表达我们的意见，上层也会(好吧，是至少大多时候会)按照大部分人的意见行为。然而禁止其他人的言论，绝对不是一个好的行为。也许，我的话会被某些人解读为支持藏独，我相信这些人的逻辑一定是零蛋。我说即使我们说的对的，也应当允许别人说错的，那么推论下来的潜台词就是藏独是错的，不过世界上就有些逻辑零蛋的傻瓜。
其次，有人说西藏问题是中国的内政，谢绝国外的讨论和干预。诚然，我支持西藏问题是中国的内政，支持谢绝国外干预。不过评论？我看说这话的人没少对美国指手画脚，至少，他们说西藏问题是西方世界的阴谋。这算不算个悖论？你要说西藏问题谢绝国外评论，就不能说西藏问题是西方世界的阴谋。你要说西藏问题是西方世界遏制中国的阴谋，就不能说谢绝国外评论。否则，你又有什么资格对美国的做法指手画脚大加评论？当然，可能有人会说一个是内政，一个是国际事务。不过，我们就真的没有评论过人家的内政么？如果非洲某个军权国家大肆屠杀贫民，你会闭口不言呢？还是跳出来说话？如果闭口不言，你缺乏人类基本的同情心，如果跳出来说话，凭什么？这不是评论内政么？对于西方的评论，我们只能认为其中有利益集团为了利益而歪曲报道(当然，其中还有中国媒体控制的“功劳”)。然而拒绝国外评论内政，拒绝所有得罪过自己的国家的所有企业……这是否有点小家子气呢？
而后，法国政府支持藏独，关佳乐福什么事情？抛开所谓双赢的理论，抛开所谓是非，如果仅仅因为法国政府支持藏独，佳乐福就要倒霉。那么中国政府干点啥不地道的，是否每个人都要跟着倒霉呢？不要说我们是正义的，伟大的什么狗屁理论，我相信我们是伟大的，然而谁都不能排除政府里有败类(前两天刚审的不就一个，虽然那未必是因败类受审)，如果这些人做了什么事情，你是否情愿接受你的倒霉命运？
最后，我们看这次的佳乐福事件，是否觉得有种阴谋的味道？包括将佳乐福设定为反法的典型，包括说佳乐福5.1降价打算让中国人自食其果(原谅我没有使用原文)。佛祖在上(似乎也有点崇洋，要不要改老君？)，有多少商家5.1节没有规划降价促销的？这个关于降价的说法一出来，就逼得佳乐福很难做。如果不降价促销，恢复人气，那么可能佳乐福在中国就要受到重创。更不用说竞争对手们一定会趁机降价，甚至打出爱国的招牌。可降价的话，会让大家觉得这个事情真有其事。最可笑的是我收到的一个版本里面，说法国政府斥资让佳乐福降价一成。拜托，以佳乐福现在的状态，降价一成基本只是和当前持平而已(要考虑到不降价的库存成本)，最多加上小亏，再加上考虑到将来的人气因素等等，应当是佳乐福主动去做才对。哪里有政府捧钱上门要求降价的说法，何况这笔钱怎么出？法国可不像中国，如果发现有这种钱出来，那基本就是某人或者某些人辞职的结局。我固然不喜欢成为“可能的”法国政府对付中国人民的棋子，但是也讨厌成为某些人对付竞争对手的棋子。
我觉得，我们很多人都陷入了谵妄的爱国主义情绪中。凡是反对中国的，就是反对我的。凡是反对我的，就要被打倒。这种理论反过来用的可以说是疯子也可以说是天才，然而如果正着用只能说是傻瓜。个人不代表国家，国家也只能部分代表个人，其代表的程度和国家的民主程度呈正比。诚然我反对分裂西藏分裂台湾，不过理由说起来可能不怎么冠冕堂皇，因为我有利，其次才是国家有利，西藏人民有利。而且我欢迎别人评论，无论你说好也好，说势利也好，说卖国也好，总之你说你的吧。大国之所以能成为大国，就是要有这么种气度和耐性。如果自尊过剩，别人刚一评论便跳起来让人闭嘴，甚至出口谩骂以致动手(不论谩骂的理由是什么)，那最多也就是街头小混混的等级。这种情况下，更像是因为自卑，所以自傲。</description>
    </item>
    
    <item>
      <title>语言造就人</title>
      <link>//blog.shell909090.org/blog/archives/13/</link>
      <pubDate>Tue, 15 Apr 2008 22:07:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/13/</guid>
      <description>学汇编的是硬件，学C的是指针，学C++的是模版，学Matlab的是矩阵，学Lisp的是图灵机，学Java的是模型，学Awk的是字符串，学SQL的是数据集。</description>
    </item>
    
    <item>
      <title>关于上飞机的问题</title>
      <link>//blog.shell909090.org/blog/archives/12/</link>
      <pubDate>Mon, 14 Apr 2008 11:13:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/12/</guid>
      <description>在blog前，贝壳先问大家一个问题，一个人坐飞机要提前多少时间到机场？
相信我们很多人都坐过飞机，但是很少有人关心过准确的手续时间问题。根据国家的标准，乘客应当在飞机起飞前90分钟到达机场。登机牌是在飞机起飞前90分钟开始办理，直到起飞前30分钟停止办理。机票的停止发票时间也差不多，如果临时到机场，可以在航空公司柜台(票务柜台，不是登机柜台)办理机票，而后在对面的登机柜台直接更换登机牌上飞机，不过这种情况下多数就是全票了。在柜台停止办理登机手续后，紧急柜台(特殊柜台)会开放特殊票(贝壳的特殊折扣票就是这种)。同时，候机室会开放登机口，旅客开始登机。在飞机起飞前5分钟，登机口关闭，辅助系统撤离，等待塔台指令起飞。当然，以上是理想流程。
不过我们中的多数人都不会把上面的时间当回事情，一般情况下，我们会提前一个小时到机场。然后直接拿票，5分钟搞定问题。再直接过安检，10分钟就差不多了。等个5分钟上下，登机口就开放了。上飞机后20分钟，飞机起飞。一切都很不错。但是今早，贝壳遇到了一个诡异的事情，和上次在首都机场跑两次安检，在虹桥机场连等12小时差不多经典。
贝壳今天要乘坐东航的MU5545次航班去烟台(没错，就是那架起飞后机舱内有汽油味返航的，大家可以GG)，飞机7:50在虹桥机场起飞，贝壳以前坐过一次。按照前次经验，从家出租过去是18分钟，所以贝壳这次6:20起床，6:30上出租，7:00到，7:50起飞。当然，是这么预计的拉。
实际是，贝壳6:20起床，6:30上的出租，出租到离机场差1公里的时候是6:55，但是这1公里足足走了20分钟。最后贝壳实在等不及，直接下来坐摩托到了候机楼(还花了20大洋)。7:15分到候机楼一看，里外三层的人。贝壳赶紧找保安，&amp;ldquo;我是急客&amp;rdquo;。保安说OK，这里外三层全是急客。贝壳没办法，安生排队吧，排到一半，保安说不用排了，肯定关柜台了。贝壳冲到票务柜台，要求改签，结果只有晚上八点的飞机，然后发现两个同事也没办上。这次去6个，只走成一半，有一个7点到的还没排上呢。话说一半，发现对面柜台空了，全冲到东航柜台前面来改签了。据赶上的说，他们是8点上的飞机，安检过的特别慢，上去后空了一堆的位子(完全可以想像)。
如果说过错的话，到说不出东航什么过错，毕竟他们是按照国家规定的时间表走的。可这次早上大规模的滞留，总不会是我们突然都不会坐飞机了吧。也不知道是哪里出了错，这种情况，真的能应对奥运么？</description>
    </item>
    
    <item>
      <title>python的非经典错误</title>
      <link>//blog.shell909090.org/blog/archives/11/</link>
      <pubDate>Tue, 08 Apr 2008 14:05:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/11/</guid>
      <description>def comp_tuple_file(tuple_file1, tuple_file2): for i in tuple_file1: if i in tuple_file2: tuple_file1.remove(i) tuple_file2.remove(i) if __name__ == &amp;quot;__main__&amp;quot;: t1 = [(1, &amp;quot;1&amp;quot;), (2, &amp;quot;2&amp;quot;), (3, &amp;quot;3&amp;quot;)] t2 = [(1, &amp;quot;1&amp;quot;), (3, &amp;quot;3&amp;quot;), (2, &amp;quot;2&amp;quot;), (4, &amp;quot;2&amp;quot;)] comp_tuple_file(t1, t2) print(t1) print(t2) 错在哪里？
头一次循环，i=(1,&amp;ldquo;1&amp;rdquo;)被正确移除了。但是接下来，i=(3,&amp;ldquo;3&amp;rdquo;)？
这个叠代器的行为很有意思哦，貌似叠代器内存储的是集合的索引。
def comp_tuple_file(tuple_file1, tuple_file2): collection = tuple_file1[:] for i in collection: if i in tuple_file2: tuple_file1.remove(i) tuple_file2.remove(i) if __name__ == &amp;quot;__main__&amp;quot;: t1 = [(1, &amp;quot;1&amp;quot;), (2, &amp;quot;2&amp;quot;), (3, &amp;quot;3&amp;quot;)] t2 = [(1, &amp;quot;1&amp;quot;), (3, &amp;quot;3&amp;quot;), (2, &amp;quot;2&amp;quot;), (4, &amp;quot;2&amp;quot;)] comp_tuple_file(t1, t2) print(t1) print(t2) 这才是正确的代码。</description>
    </item>
    
    <item>
      <title>链接上的问题</title>
      <link>//blog.shell909090.org/blog/archives/10/</link>
      <pubDate>Mon, 07 Apr 2008 18:34:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/10/</guid>
      <description>贝壳最近在用库上吃了不少苦头，先是crypto++5.52。编译后怎么也链接不上。后来发现需要用/MT参数编译为多线程。后来又在STLport上又吃一次苦头，可见VC2003的默认单线程模式确实不得人心。
下面说一下STL的编译手记。下载STLport，解压。运行vcvars32.bat设置环境变量,去build/lib下面，运行 configuare -c msvc71(如果你是2003，否则按configuare &amp;ndash;help察看你的编译器类型)。然后运行nmake -f msvc.mak install。可以看到有两个目录被建立了，bin和lib。把bin的复制到windows/system32下面，把lib的复制到系统目录下面。 安装就OK了。
上述和boost都差不多，然而和boost不一样的是，编写程序的时候，需要手工指定stlport的头文件路径。boost的可以以&amp;lt;&amp;gt;来引入，因此boost的头可以复制到系统里面去。然而stlport的必须以手工方式指定，否则就要覆盖默认的stl 了。</description>
    </item>
    
    <item>
      <title>显示自身的代码</title>
      <link>//blog.shell909090.org/blog/archives/9/</link>
      <pubDate>Tue, 01 Apr 2008 10:47:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/9/</guid>
      <description>void main(){char* a=&amp;quot;void main(){char* a=%c%s%c;printf (a,34,a,34);}&amp;quot;;printf(a,34,a,34);} 核心是使用printf(a,a)来代换显示，并且用34来规避转换。当然，完整的要带include，稍微有点区别。</description>
    </item>
    
    <item>
      <title>None</title>
      <link>//blog.shell909090.org/blog/archives/8/</link>
      <pubDate>Thu, 27 Mar 2008 09:47:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/8/</guid>
      <description>说要换blog，但是隔了几个月还是没动，因为贝壳了解到一个悲惨的事实。google提供的blog，是要穿墙的。
这样说的话，我估计这篇blog是没有几个国内用户了。不过华语使用者众，多条路也不错。</description>
    </item>
    
    <item>
      <title>一些使用firefox的技巧</title>
      <link>//blog.shell909090.org/blog/archives/435/</link>
      <pubDate>Mon, 10 Mar 2008 13:33:31 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/435/</guid>
      <description>在linux下和windows下共享同样配置/插件。这个很简单，上面的blog中有篇文章说到thnunderbird在双系统下共享同样邮件的问题，firefox也一样解决。能用linux的人不会查不出配置目录位置吧。
节约内存技巧。
firefox虽然号称小巧，然而很多时候我们发现他的内存消耗也非常惊人。在贝壳的机器上，有的时候会高达150M，基本等于普通编辑器/播放器的10倍。事实上，不是firefox浪费内存，而是默认的内存配置是针对&amp;quot;机器上只开firefox&amp;quot;设计的。如果你机器内存小，或者需要同时开其他程序，最好自己配置一下firefox。
首先就是fasterfox，关闭其中的&amp;quot;增强预读&amp;quot;，这东西很消耗内存。然后是内存缓存，调整到32M吧。一般一个网页上所有文件差不多1M-2M，32M够把20个网页的所有内容缓存起来，再多就不大正常了。根据贝壳自己的猜测，渲染动作应当是动态进行的，否则内存根本顶不住长文本的渲染。这样在浏览的时候，从后台抓取内容，动态渲染的速度就非常重要，因此强烈推荐不要小于8M。否则连5个页面的内容都不在内存中命中，还玩个P阿～
还有渲染中的&amp;quot;启用快速返回&amp;quot;，将内存中的保留页面数调整小，贝壳用的是3。当然，这个只适用于firefox1.5。
其次是session manager，将&amp;quot;撤销关闭&amp;quot;尽量减小。反正贝壳减小到了1个窗口3个页面。这些页面在关闭后还是继续消耗系统的内存，因此越小越好。当然，小到多少是要看你的具体需要了。
最后，少用插件，少启用插件，除非你真的需要。长期不需要的就禁用，或者干脆卸载。
内存回收技巧。
很简单，觉得不够了，关了再开。反正有session manager，正在浏览的网页根本不会有影响。
同时打开大批网页技巧。
最好使用Tree Style Tab，这样方便。另外，如果需要打开一个页面的所有连接，可以这样做。先察看页面信息，选择&amp;quot;链接&amp;quot;-&amp;gt;&amp;ldquo;全部选择&amp;rdquo;-&amp;gt;&amp;ldquo;复制&amp;rdquo;，然后开一个文本文件，把内容粘贴进去。可以看到内容其实是一堆的页面链接。当然，如果页面内有js做的链接指向，可以试试用Convert javascript or onclick to normal links这个greasemonkey脚本转换成目标链接。然后，把这个文本文件改名成htm，打开。通常情况下应该是一堆无法点击的文字，不过你可以用Linkify ting来把文字转换成一堆链接。然后……一个个点过去吧。
上面是使用greasemonkey解决的方法，当然，也有更简单的方法。你可以安装flashgot，然后新增一个下载管理器，名字叫做firefox。路径就指向firefox的执行文件路径，参数不用动。平时用你喜欢的管理器，需要打开全部链接的时候，更改为firefox，然后&amp;quot;使用flashgot下载全部链接&amp;quot;。当然，缺点是对付不了js脚本，除非你加载Convert javascript or onclick to normal。
不过鉴于内存状态考虑，建议不要同时打开大量页面。维持在10-20个上下最好。</description>
    </item>
    
    <item>
      <title>大灌篮的广告</title>
      <link>//blog.shell909090.org/blog/archives/434/</link>
      <pubDate>Thu, 06 Mar 2008 21:41:28 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/434/</guid>
      <description>昨天看大灌篮，多好看是没看出来，不过广告让我印象深刻。
周杰伦一接手机，HelloMoto。
打开一看，移动飞信。
…………</description>
    </item>
    
    <item>
      <title>晒一晒我的firefox</title>
      <link>//blog.shell909090.org/blog/archives/433/</link>
      <pubDate>Wed, 05 Mar 2008 22:43:32 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/433/</guid>
      <description>firefox是很有名的浏览器，以其短小和安全而著称。相信很多朋友喜欢使用firefox，然而你真的会用么？
首先纠正一点，最标准的浏览器虽然不是IE，但是也不是firefox。而是以下三个，Safari(WebKit) / Opera(Presto) / Konqueror(KHTML)。Safari是Mac上的浏览器，Konqueror是Linux上的，Opera则多数用于手机上。Firefox 2.0.0.3 (Gecko 1.8.1.3)稍微差点，Internet Explorer 7.0 (Trident)和Internet Explorer 6.0 (Trident)是最不标准的。具体请看Acid2测试(http://www.osxcn.com/css/the-second-acid-test.html)。当然，也有消息称Firefox和IE已经都通过了测试(http://www.appbeta.com/50226711/ie8afirefoxasafariaoperaecaeacid2ce_133101.php)。
其次，当你用着号称国人精华的XX浏览器的时候。首先请注意一下他是否使用了ie内核。IE有一个非常大的框架，其内核是Trident。所谓的浏览器内核，就是负责将html转换为DOM，然后渲染的组件集。当然，还有一些执行js等等的组件。微软的IE内核一般在mshtml.dll上，如果你有procexp，可以看看所谓的XX浏览器是否用了这个dll。如果用了，没的说，肯定是Trident内核。如果没有么……将mshtml改名转移，直到IE无法正常浏览。然后看看您的XX浏览器怎么样。
Firefox的内核是Gecko，据说将来要使用Cairo。这两种组件……嘿嘿，贝壳都用过。但是firefox最强大的是他的插件组，效果终身难忘，让人不忍舍弃。下面贝壳介绍一下firefox的部分插件，脚本。
/find/，这是个很小巧的插件，可以使得firefox能够以正则表达式在全文进行搜索。普通用户就表想了，这东西可是专业人士的杀手工具。可以做出&amp;quot;搜索全文中的所有电话号码&amp;quot;或者&amp;quot;搜索全文中的所有email&amp;quot;等等强大功能。当然，如果你需要的话。
CustomizeGoogle，GFan一定要用。这个插件可以定制Google，例如可以在其他搜索引擎搜索，剔除赞助商广告，修改搜索的语言(贝壳的firefox就老阿达到英文上去，用这个插件就一切OK)。适用于Google的多个产品，包括gmail，google reader等等。
fasterfox，强力推荐，加速插件。不过通常我都是用来调整性能参数的。自定义设置，不启用增强预读，缓存32M。这个配置对于0.5-1G的本本很有用。
firebug，这东西也就网站开发人员用。不过绝对是杀手阿，可以看到网页的css，javascript，在线调试，察看ajax的网络通讯。通过这个东西，很容易调试多数的网页。
fireshot，推荐看小说的的人用。可以将当前的网页整个导出成png(贝壳注：这不就是Cairo的基础功能么？导出到虚拟interface)。想想你看小说，将当前页面打印到png。不用截屏拼接，嘿嘿。当然，更好的方法是用firebug，直接可以提取内容。不过……看你水准了。
flashgot，强力推荐，用这个东西可以将firefox的下载转到flashget上。当然，也支持迅雷，netant和bitcomet。这个东西弥补了firefox不支持专用下载软件的尴尬。当然，也有人喜欢都在firefox里面做。这个就如人饮水拉。
gladder，用于爬GFW看Wikipedia的东西。如果听不懂，我不再解释。
gmark，推荐多个电脑的人用，可以在各个地方用google bookmark，就好像用自己的bookmark一样，方便统一bookmark。如果你不喜欢在线bookmark(我觉得没有必要，用浏览器必定在线，除非google故障离线bookmark才有用)，那么可以用gmark的导出功能，导出到html。然后用firefox的导入，同步两个bookmark。其他插件要么是使用不习惯，要么就是不能和firefox自身的bookmark同步(都是单向的从firefox bookmark导出)。
google reader notifier，推荐用google reader的挂线族。这个插件会提示你有多少东西你没有读，定时刷新。
google笔记本，这个需要到google去下载，和gmark一样是让多个电脑同步的好东西。可以直接弹出一个google note让你记东西，并且在任何地方访问。同时也可以选中网页中的部分内容，点击加笔记，自动添加到笔记本中。
greasemonkey，强力推荐，将用户脚本插入到页面中的组件，可以动态修改页面行为。下面会专门讲用这个组件挂脚本的技巧。
IE tab，强力推荐，有的时候突然需要看IE，但是单独开一个IE非常麻烦。直接点右下的这个图标，当前页面就会自动切换成IE浏览。只是如果处于登陆中，恐怕会退出。
keyconfig，可以自己配置firefox的快捷键。
MinimizeToTray，最小化到托盘区的组件。配合上面一个，对付老板的利器阿。
NoScript，强力推荐，拒绝恶意脚本，增加安全性。当然，弄不好就是拒绝正常脚本，增加麻烦。
Session Manager，强力推荐，可以保存你当前在看的所有列表，下次恢复。也可以同时恢复登陆状态(例如你登陆了网站，下次上线就如同中间没有做任何动作一样，当然如果超时被踢就没办法了)，恢复关闭窗口。对付firefox的重起，减少内存消耗(手动重起)，看一堆页面看到一半有事……等等。非常有效。
Tree Style Tab，另类的tab样式，把tab在左边做成树，可以折叠展开。如果你和我一样，经常喜欢大量的打开页面。此时，上面的tab往往缩的很小，看都看不到，但是还是长的要左右乱翻。这个时候这个插件非常有效。而且可以看到浏览的派生关系。如果平时觉得浪费空间，可以改回去。等需要的时候改过来。
Update Scanner，扫描页面变化，如果有变化提示。对于看小说/泡论坛……等等。不用你们一天老去刷帖子了，这个插件可以提示你页面是否更新。当然不是没有更好的，不过那些东西都要写变化脚本，天哪～～
上述的插件大都能在addons.mozilla.org或者addons.mozine.cn找到，如果不行就去google搜索。注意使用插件会消耗一定内存，尽管上面的大多插件都不怎么消耗内存，可都放上也比较让人受不了。一般贝壳都是将不用的转到禁用的。
下面讲解greasemonkey的用户脚本技巧，多数脚本可以到userscript.org找到。
GoogleTagCloudMaker，最好用的greasemonkey脚本。可以将google搜索的广告移除，变成关键字云。点击关键字云往往能追踪搜索，直到找到需要的东西。
Show Btchina，让你可以浏览bt.btchina.net。这是个bittorrent种子搜集站，但是firefox无法浏览。使用这个脚本使得firefox可以正常浏览。
Download Youtube Video III，在youtube的播放文件下面显示一个download，链接到播放的flv文件。可以很轻松的进行下载。以前贝壳都是用youplayer，老开着占内存，不老开就要重起firefox。虽然有session manager，不过也很讨厌。使用脚本就可以针对页面工作，减少内存消耗。
以上的脚本在安装greasemonkey后可以直接点击安装。</description>
    </item>
    
    <item>
      <title>用firefox看facebook的问题</title>
      <link>//blog.shell909090.org/blog/archives/432/</link>
      <pubDate>Mon, 03 Mar 2008 14:37:26 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/432/</guid>
      <description>用firefox看facebook的时候老出问题，主要是验证码无法通过。会么？这年头连live spaces都可以用firefox了。(当然图片上传例外，除非你用IE Tab)而且facebook还有firefox的toolbar，要是再无法使用firefox就太奇怪了。
今天总算发现了问题的所在，facebook使用了ajax技术，这种技术会动态的载入和卸载一些页面内容。而我使用了NoScript脚本，并且将facebook加入了白名单。这下可中计了。facebook常规浏览的时候，脚本都来自facebook本身。而当验证的时候，使用的另外一个公司的服务。在验证前，页面的脚本都是不被阻止的，因此我也没有发现异常。在点击验证后，由于页面没有刷，所以我压根没有注意到，下面的阻止从完全通过变成了部分阻止。当然，被阻止的就是另外一家公司的验证脚本。
因此，我将这家公司也加入了NoScript的白名单。OK，世界从此清静了。</description>
    </item>
    
    <item>
      <title>艳照门事件的问题所在</title>
      <link>//blog.shell909090.org/blog/archives/431/</link>
      <pubDate>Sun, 02 Mar 2008 14:21:12 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/431/</guid>
      <description>艳照门事件，大家都骂陈冠希变态。不过可能没人想过，自拍可不是问题所在。
如果要说自拍大家无法接受的话，莫非那堆女的也跟着变态。要是陈冠希和老婆的照片流出来，大家绝对会当那是受害者吧。陈冠希的罪状，在于滥交和第三者。而其中让大家最起哄的，莫过于男人对女主角数量的嫉妒和女人这种事情的反感。</description>
    </item>
    
    <item>
      <title>多出的一天，被偷走的一天</title>
      <link>//blog.shell909090.org/blog/archives/430/</link>
      <pubDate>Fri, 29 Feb 2008 23:17:32 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/430/</guid>
      <description>四年一次，229。
今年我们是幸运的，因为四年才碰到一次，项目周期可以多一天。
今年我们也是不幸的，因为如果不跨二月，项目周期可以再多一天。
下次229会是幸运还是不幸呢？鬼知道。
P.S.本来都忘记了，结果今天看nancy同学blog的rss，又想起来了。赶在今天最后的一点时间，写点啥纪念纪念。</description>
    </item>
    
    <item>
      <title>关于香港艺人裸照事件</title>
      <link>//blog.shell909090.org/blog/archives/429/</link>
      <pubDate>Thu, 28 Feb 2008 20:37:50 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/429/</guid>
      <description>香港的艺人裸照事件现在已经是沸沸扬扬，具体情况相信也不用我说了，去网络上找一下，遍地都是。既然大家都已经发表意见，当事人也不愿意多说，我也不想揭人伤疤。不过我倒是对裸照事件中网络的特性很感兴趣，并且想说说未来网络的各各方面的问题。
在这次裸照事件中，真正的幕后发布者&amp;quot;奇拿&amp;quot;从头到尾没有露面，也没有任何消息确认谁就是&amp;quot;奇拿&amp;quot;。他发布照片也不是满世界张贴，而是通过各处的网民转贴。如果不是网络，这一切都是不可想像的。你无法想像自己的裸照会意外的流出，被人倒处张贴，而这个人你还绝对找不到。为什么网络如此特殊呢？因为网络从设计的开始就注定和通常的通讯系统不同。网络具备很高的匿名性，具有一定技术的人员(这种技术要求大致就相当于一个高中水平的人经过一年训练的水准)可以任意的发送消息而不会被追踪。电影上那种特工通过什么东西而追踪用户的事情，在经过一定训练的人手里完全不可能发生。国和国之间的矛盾，法律真空地区，他们永远有办法躲避追踪。换句话说，只要你希望，任何人都可以随意在网络上发消息而且保持匿名。并且广大的网友会自动的将消息传递到各个角落。而且这种发布是极为迅速的，往往是发布会还在开，讲稿已经到了各大论坛。
这个特性是对各国政府，各大公司，大型组织的一个极大挑战！
为什么呢？
自从传播学被从其他学科中分离并且发展起来后，任何大型组织都不会忽视传播的力量。很多巨大的事情往往会因为一点信息而被改变，因此控制信息的人具有相当的力量。也许有人会说我影射中国政府，我不驳斥我说的大型组织中包括中国共产党。然而谁可以找到一个大型组织，对自己的信息完全忽视，还可以蓬勃发展呢？美国也有水门事件，也有新闻控制。从这个意义上说，&amp;ldquo;控制信息&amp;quot;可以被视为大型组织维持自身形象的一个必然手段。
然而网络打破了这个手段。
大家应该都知道中国的GFW，当然，其宣称的目的是&amp;quot;屏蔽境外有悖于中共当前政策的内容，例如黄色，反动等&amp;rdquo;。这个可以看做是中共对于网络的必然反应－－既希望可以借助网络的力量来发展国家，又担心网络的发展使得国家失去对信息的掌控力。然而通过技术屏蔽的手段是无效的，绕过和伪装远远比发现简单。自从二战以来，数学密码，换位密码，对称密钥的发展，使得加密比破解容易上无数倍。即使是个人，也完全有能力传递国家无法破解的信息，或者将其伪装到根本不会被注意的庞大信息海洋中。可以说，现在如果有战争，那么敌对国家间首要做的事情就是断网，彻底从Internate上断开，包括无线信号。否则只要有邮件收发，就根本查不出其中是否被混入了无法侦测的内容。而返回我们这个论题本身，大型组织对于信息的掌控力，则彻底的被网络剥夺了。
然后，我们完全可能设计出一套系统，使得信息从一个人到另外一个人的传递是无法被窥视和修改的，也是无需通过中心节点的。(笔者当年就曾经设计过这种东西，当然因为众所周知的原因，放弃了)当然，大众是否会使用是一回事情。通过这种东西，我们将来的信息必然是分布的，从个人到个人的，无干预的。这种情况下，我们需要考虑两个问题。这种可能性对社会的影响，这种可能性下的规范。
如果考虑这种可能性对社会的影响，我觉得是相当难说的。一方面，开放的信息传播使得信息透明化和公开化。如果掌控的好，会成为大众监督政府的利器。政府的问题会被迅速瀑光，并且得到解决。从这个角度讲，我们会得到一个更加公正的社会。然而从另外一方面讲，信息的匿名化会使得信息质量劣化。成为虚假消息的温床和散播垃圾的根据地，不负责的言论和奇谈怪论试图吸引人民的眼球。并且，更严重的，会产生很多违背本意的现象。例如网络暴力。
因此我们必须对这种可能性有所规范，从道德层面到法律层面。从道德层面(或许没有这么严重)来说，我们尽力不传播对于我们没有意义的信息，减少传播未经核实的信息。以此减少信息垃圾的产生。然而，我们是否应当去从法律层面阻断垃圾信息的传递呢？恐怕不行。从趋势上说，信息的公开是趋势。反对公开信息，将信息传播控制的权力掌握在少数人手里是逆潮流的。从这个意义上讲，中国公安部禁止个人间传递照片的行为也有简单粗暴的嫌疑。正确的应当是个人间的传递国家不干涉，然而可以由受害者提起民事附带刑事诉讼。</description>
    </item>
    
    <item>
      <title>通知时代</title>
      <link>//blog.shell909090.org/blog/archives/428/</link>
      <pubDate>Thu, 21 Feb 2008 22:54:36 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/428/</guid>
      <description>以下内容可以说是作为一个时代的预告，请大家见证将来是否按照我的预想进行。
首先请大家想想，当大家上网的时候，都做什么？也许是打游戏，也许是看电影，也许是泡论坛，也许是看好友的blog。随着web2.0时代的到来，我们每个人都有发布自己话语的能力。看上去和上世纪末的主页时代类似，然而不同的是，发布的频率增高了。假定你和我一样，有大约20-50个好友在网络上进场写blog。每个人每月写一篇，那么你每天就有1-2篇blog要看。你喜欢的电视剧有10个，它们每周更新一次，那么你每天就有1-2集电视剧要看。依此类推，你所关心的东西在网络上绝对不缺。每天平均下来都要看3-5篇东西，和几个朋友聊聊最新的生活，看几集电视剧，多好的生活。然而，当前却有个不和谐的问题，你需要持续的检查更新！
按照我们上文举出的数据来推算，如果这个人每天需要看这些东西作为日常的网络活动。那么他就需要检查30-100个页面来确定哪些内容更新了，需要跟踪10-20个页面来确定需要下载的东西。在网络小众的时代，也许这不是个问题。我们的习惯是每天上网，然后收一次邮件，检查书签里面所有的页面，看看是否有更新了。下载最新的东西，把写好的信件发出去。以天为单位来说，这不是一个问题。然而正如在线时间的增长催生了IM来替代Mail一样，长时间的在线使得我们希望简单的获得&amp;quot;第一时间&amp;quot;的东西。邮件到达的时候，我希望&amp;quot;第一时间&amp;quot;的获得。有新闻的时候，我希望&amp;quot;第一时间&amp;quot;的关注。朋友写了blog的时候，我希望&amp;quot;第一时间&amp;quot;的回复。OK，假定5分钟是你可以认可的&amp;quot;第一时间&amp;quot;。那么你需要每5分钟&amp;quot;检查30-100个页面来确定哪些内容更新了，需要跟踪10-20个页面来确定需要下载的东西&amp;quot;。
幸运的是，我们可以使用程序来自动做这些事情，并且现在已经有了部分解决方案。有一种邮件跟踪程序，可以跟踪pop3，hotmail，yahoo等常见的邮箱，检查是否有新的邮件。好友的blog和新闻都可以用rss软件来跟踪是否有新的内容。然而不幸的是，每种解决方案都是单独的。如果你需要持续的跟踪，就必须挂上邮箱的检查程序，rss的检查程序，网页的检查程序(用于部分不支持rss的网页)。不但复杂难以管理而且资源消耗也相当惊人。
我预期将来大家都会持续的挂线，因此预计将来的模型是&amp;quot;通知&amp;quot;而非&amp;quot;检查&amp;quot;。当你有邮件时，会收到邮件到达通知，当你关注的新闻更新时，会收到新闻更新通知。而具体怎么实现呢？我估计是IM系统整合。当今IM界发展的趋势是互通，IM的特点又是即时，因此有很大可能性会是使用IM来通告新的内容到达。你可以向一些支持的网站注册你的IM，而后他们会视图加你为好友，并且向你提供验证号。当你将验证号回复给网站后，你的网站账户(如果需要的话)就和IM绑定在一起。而后你可以主动订阅一些内容主体的更新通知，当网站程序更新这些内容的时候，会读取到你的订阅。而后将内容更新和你的IM发送到一个队列中，这个队列再将这些消息发送到你的IM中。
当然，IM接受这些消息的显示方式很可能不会用通常的消息界面，更可行的界面是类似google
reader的聚合通告界面。当你完成订阅后，你的IM就会将源放到一个通知树中。每个源是一个列表，代表了这个源的内容。例如邮箱源的列表就是邮箱内的邮件，rss源的列表就是rss的新闻，&amp;ldquo;越狱&amp;quot;这种源的列表就是一堆的&amp;quot;越狱&amp;quot;影片下载地址(当然，如果合法的话)。甚至论坛的某个帖子都可以做源。源代表了内容，并且通告变化，而IM则记录了客户是否看过每个源的具体内容。有可能还会出现一些服务网站，负责每一定时间去检测不支持源的页面，如果满足一定的更新条件，那么就通知页面更新了。
通过这种模式，你每天上线后就可以看到没上线时更新的内容，直接点击过去看。并且在线的时候各种需要的消息还会持续的通告过来。当然，你也应该可以(只要客户端支持)设定某种消息会强制的弹出(例如公司的邮箱里面有新邮件)，而某些只是更改托盘区的图标(例如某些有点关心的新闻更新了，你不会希望这个原因把你从游戏里面拉出来吧)。理论上说，当IM的客户端范畴拓展到手机后，我们甚至可以如同宣传中说的一样&amp;quot;随时随地，掌握信息&amp;quot;了。</description>
    </item>
    
    <item>
      <title>找女朋友就像招聘</title>
      <link>//blog.shell909090.org/blog/archives/427/</link>
      <pubDate>Sat, 16 Feb 2008 01:56:38 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/427/</guid>
      <description>最近公司管理做多了，发现人真的变态了。新年新气象，要有新目标。写个2007年总结报告和2008年工作计划，然后再画个甘特图。那找女朋友这个怎么操作？就当招聘好了。
兹需高级特种工作人员一名，年限20-26，女性未婚。从事家政服务和精神安慰工作，地点目前在上海，可能视工作需要调动到北京和烟台。要求熟练掌握装笑，装文雅，装高贵和装大尾巴狼的技巧，具备编故事和忽悠人的能力。工作经历要求，不限，最好没有。工资，面议。福利，每月休息一周。
注：面试通过后请带体检表复试……
……谁在北桥认识人？</description>
    </item>
    
    <item>
      <title>Process Explorer的潜在内存泄漏</title>
      <link>//blog.shell909090.org/blog/archives/426/</link>
      <pubDate>Thu, 31 Jan 2008 19:21:06 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/426/</guid>
      <description>贝壳最近碰到一个郁闷到死的问题。机器经常出现硬盘狂转，系统响应延迟。系统弹出一个错误，然后死机。贝壳开始猜测是硬盘驱动问题，升级驱动N次，无效。然后再猜测是ext2fs的问题(贝壳用这个驱动挂载linux下面的盘的)，看来看去，不是。最后，贝壳确定了，这是内存泄漏了～～～
问题是，这时候可没人跳出来推荐喝什么口服液的。贝壳系统中永远挂着一个procexp，看内存状态的。这东西是sysinternals的产品，后来被微软收购了。功能强大，很多系统调试，杀马都需要用到。于是贝壳就用这个工具看哪个程序的内存泄漏，可是看来看去看不到。准确说，是没等贝壳看到，系统就先死透了。最后贝壳多次尝试，发现了一个死机的规律。当mysql开启的时候，procexp就会随时发生异常死机。这是一个重要的提示，要么mysql内存泄漏了，要么procexp内存泄漏了。究竟是哪个呢？贝壳用了同属于sysinternals开发的pstools系列工具，仔细检查了异常发生时候的内存状态，确定，Process Explorer存在内存泄漏的风险！
看来sysinternals被微软收购后，旗下的工具也出现了微软的一贯特色。以下是一次内存泄漏后，终止mysql服务后抓下来的内存状态输出。如果不终止mysql，不等我抓系统就挂了。
Process memory detail for HOME-B2326348D0:
Name Pid VM WS Priv Priv Pk Faults NonP Page
Idle 0 0 28 0 0 0 0 0
System 4 800 52 0 0 10120 0 0
smss 772 3748 48 172 1648 223 0 5
csrss 828 68132 1464 2304 3768 13748 6 144
winlogon 856 61528 580 8536 8684 5143 39 96
services 900 37724 804 2256 2404 2740 7 65</description>
    </item>
    
    <item>
      <title>弄死MSN的共享文件夹</title>
      <link>//blog.shell909090.org/blog/archives/425/</link>
      <pubDate>Sat, 26 Jan 2008 22:43:47 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/425/</guid>
      <description>MSN8的共享文件夹功能根本就是一个废物功能，速度慢，不习惯，而且用处不大。最恶心的是，没有卸载选项不说，手工卸载后一开MSN一重起还会回来。NND，看我怎么弄死他。MSN虽然是微软自己的产品，但是也需要遵守微软的API行为。改变资源管理器的行为是用COM组件注入到exlporer中实现的，没有使用驱动层的东西。那么我们就设法阻断DLL文件的注入加载。
首先，regsvr32 /u是不行的。因为MSN一启动又会注册上，除非你不用MSN。删除文件也不行，因为会再生成一个。那么，我放着文件不动，把内容清空，然后再删除NTFS权限怎么样呢？即使是微软的产品，也不会强制说我的更改无效，然后自己胡来一套吧。
首先，关闭所有MSN有关软件，在运行中输入cmd开一个命令行窗口。然后，用process explorer(现在这东西也是微软的产品)终止explorer进程(系统自带那个应该也行，不过我没有测试过)。这步顺序非常重要，因为我们要先阻断COM组件的加载，否则无法对文件实行更改。所以我们要先打开一个CMD，然后再关闭explorer。否则一旦关闭explorer，开CMD就难了。而没有CMD，要去删除文件就要多费一些手续了。
我们现在在CMD中切换到MSN所在目录，删除fsshext.8.1.0178.00.dll啥的文件。这个文件名会根据你安装的版本而变化。而后启动explorer(在CMD里面敲explorer就好)，这个时候COM组件已经没有加载了。于是我们建立一个文本文件，改名叫fsshext.8.1.0178.00.dll，放到MSN的目录里面，再删除所有人的访问权限。删除的方法是文件上右击，点属性，安全，高级，取消&amp;quot;从父目录继承权限&amp;quot;的勾选，然后点删除。如果看不到安全选项卡，检查以下项目。工具，文件夹选项，察看，使用简单文件共享(推荐)，取消他的勾选。微软的东西，最好表随便勾。
根据我的测试，这时候你随便重起电脑，MSN的组件说加载不上就加载不上。同理也可以应用到3721之类的流氓组件上，只要抢先建立了同名的文件，并且阻断了权限，这些组件就会无法使用。如果你进一步做了分离权限(日常不使用管理员账户)，即使安装程序作者知道这种方法都无法应对。如果可以的话，就说明微软存在漏洞了。</description>
    </item>
    
    <item>
      <title>财务数据库</title>
      <link>//blog.shell909090.org/blog/archives/424/</link>
      <pubDate>Fri, 25 Jan 2008 21:15:26 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/424/</guid>
      <description>贝壳最近工作繁忙，一般都是晚上十一点到家睡觉，第二天早上继续上班的那种，所以blog基本没怎么动。现在放篇财务数据库的原型，大家参考一下吧。当然，是对程序员而言。像六牙四皂小姐这种下面估计是压根看不懂的，而且也不会有那种变态的资金准度要求。
首先建立一个账户表。
DROP TABLE IF EXISTS `accont_info`; CREATE TABLE `accont_info` ( `id` int(11) NOT NULL auto_increment, `username` varchar(40) NOT NULL, `accont` varchar(40) NOT NULL, `accont_type` int(11) NOT NULL default &#39;0&#39;, PRIMARY KEY (`id`), UNIQUE KEY `username` (`username`,`accont`) ) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=gbk; 输入用户名，账户名和账户类型，例如&amp;quot;许智翔&amp;quot;,&amp;ldquo;招行账户&amp;rdquo;,2。账户类型中规定1是现金，2是存款，3是信用卡，4以上不计算。这样可以使用多个现金账户，存款账户和信用卡账户。然后利用子查询把所有类型间的相互行为统计出来。
然后是类型表。
DROP TABLE IF EXISTS `type_info`; CREATE TABLE `type_info` ( `id` int(11) NOT NULL auto_increment, `type` varchar(40) NOT NULL, `subtype` varchar(40) default NULL, PRIMARY KEY (`id`), UNIQUE KEY `type` (`type`,`subtype`) ) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=gbk; 最后是资金流动数据表，accont_id中填写出户账户名，to_accont中填写入户账户名。如果是外部(例如从别人那里拿钱或者给别人钱)，则写0。happen_time上填写发生时间，money上写金额，message上写备忘。</description>
    </item>
    
    <item>
      <title>libxml使用中的编码问题</title>
      <link>//blog.shell909090.org/blog/archives/423/</link>
      <pubDate>Thu, 27 Dec 2007 22:04:59 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/423/</guid>
      <description>libxml是gnome的XML解析库，具有强大的解析能力，支持DOM和SAX解析模型，属于验证型解析器。其内部是使用utf-8编码工作的，因此gbk之类编码的XML无法解析。为了解决这个问题，我们可以使用一个很简单的小窍门。
libxml是要和iconv一并使用的，头文件引用一般类似以下形式。
#include &amp;lt;iconv.h&amp;gt; #pragma comment(lib, &amp;quot;iconv&amp;quot;) #include &amp;lt;libxml/tree.h&amp;gt; #include &amp;lt;libxml/parser.h&amp;gt; #pragma comment(lib, &amp;quot;libxml2&amp;quot;) 这样的话，我们向libxml注册一个处理句柄，对其他编码的xml先执行一次转换，再进行解析。
iconv_t iconv_utf8_gbk = NULL; iconv_t iconv_gbk_utf8 = NULL; int gbk_input (unsigned char *out, int *outlen, const unsigned char *in, int *inlen) { char *outbuf = (char *) out; char *inbuf = (char *) in; size_t rslt; rslt =	iconv (iconv_utf8_gbk, (const char **) &amp;amp;inbuf, (size_t *) inlen, &amp;amp;outbuf, (size_t *) outlen); if (rslt &amp;lt; 0) return rslt; *outlen = ((unsigned char *) outbuf - out); *inlen = ((unsigned char *) inbuf - in); return *outlen; } int gbk_output (unsigned char *out, int *outlen, const unsigned char *in, int *inlen) { char *outbuf = (char *) out; char *inbuf = (char *) in; size_t rslt; rslt =	iconv (iconv_gbk_utf8, (const char **) &amp;amp;inbuf, (size_t *) inlen, &amp;amp;outbuf, (size_t *) outlen); if (rslt &amp;lt; 0) return rslt; *outlen = ((unsigned char *) outbuf - out); *inlen = ((unsigned char *) inbuf - in); return *outlen; } 初始化的时候运行以下代码进行句柄注册。</description>
    </item>
    
    <item>
      <title>继承函数的拷贝构造</title>
      <link>//blog.shell909090.org/blog/archives/422/</link>
      <pubDate>Tue, 25 Dec 2007 23:49:53 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/422/</guid>
      <description>从基类继承一个子类，基类有一个拷贝构造函数，子类重载了一个。那么在子类拷贝构造的时候会自动调用基类的拷贝构造函数吗？
答案是不会，自动调用的是基类的构造函数。
子类中如果需要调用基类的拷贝构造函数，需要这样用。
D (const D &amp;amp; o): B (o){...} </description>
    </item>
    
    <item>
      <title>wc、sort介绍</title>
      <link>//blog.shell909090.org/blog/archives/421/</link>
      <pubDate>Tue, 04 Dec 2007 05:44:52 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/421/</guid>
      <description>首先声明一点，我介绍的小软件系列都是Linux下的，在Windows下可以找Gnuwin32里面提供的移植包。因此多数人都是可以使用的，只是高兴不高兴用的问题而已。
其次我得道歉。本来说好了每周介绍一些小软件的，结果MSN空间不稳定，加上贝壳又忙。所以现在才介绍第二个，大家理解理解吧。
这次介绍的对象是wc，不是厕所，也不是世界杯，而是一个字符统计软件。这个软件的目的是统计出一个文件内的行数，单词数，字符数。行数是按照硬回车来统计的，单词是按照分割符号来统计的，字符么就不说了。这个和Word的字符统计很像，不过用起来并不那么方便。也许有人奇怪，这种软件有什么用呢？主要是在脚本程序内使用来统计一些数据，也有用来统计程序的代码行数的。平时大家一般都是分开统计行数，这次可以wc -l *.cpp *.h。就可以得到所有文件的行数和总行数。
而后我补充介绍一个东西，sort。这东西也很简单，就是把输入的内容按照一定的法则排序输出。一般来说，排序法则是alpha法则，当然也有数字法则等等。这个软件主要是从输出中排除一些重复数据，或者把输出过滤。例如我们可以和上面的联合使用，wc -l *.c *.h | sort。就可以得到当前所有的文件的行数，并且排序。</description>
    </item>
    
    <item>
      <title>IM之争</title>
      <link>//blog.shell909090.org/blog/archives/420/</link>
      <pubDate>Sun, 02 Dec 2007 06:56:53 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/420/</guid>
      <description>我不记得这个Title是否已经写过了，不过无所谓，因为国际形势发生了变化。
以前是ICQ和QQ争霸中国市场。后来MSN加进来一脚，ICQ淡出了。现在Fetion跑进来了。那么未来呢？
我们先看看IM软件的发展方向吧。IM最早的远亲应当是IRC和电子邮件。不过电子邮件对于服务器需求太强大，用于实时对聊做不到。IRC虽然需求小了点，但也在不可承受的范围内。随着网络的发展，大家挂网时间越来越多。所以大家要求一种廉价有效的即时通讯手段。可以和某个人对话，而不用耗费太多的服务器成本。于是，ICQ应运而生了。ICQ可以说是最初的P2P体系者，两个人聊天的时候数据都是互相发送的，只有登录的时候才和服务器通讯。这样的好处是避免了大量的服务器开销，坏处是无法穿透防火墙。
从协议上说，IM的协议互动机制和电子邮件基本是一致的。如果不介意服务器开销的话，我们可以把IM协议构架在POP3和SMTP上。对于这种倾向，有人应该感觉熟悉。那不是MSN的离线消息么？差不多。我们定义发送逻辑为，如果可以找到对方IP就找对方IP，不可以找到对方IP就给对方发送邮件。接受的时候我们就接受邮件，如果碰到特殊格式的就解析掉当做消息处理。同时如果在线则服务器会主动推送邮件消息过来(如果不这样就要非常快的定时查询新消息，非常耗费资源)。那么我们就构成了一个跨越服务商的IM方案了，并且还支持多种客户端和离线消息。例如我们通过智能手机的终端接入进来(记得么？我们的客户端其实只是个特殊点的邮件程序)，那就成了无线IM。
问题是，我们动了谁的奶酪？
服务商恐怕对此会非常不高兴。大家知道，电子邮件服务商的竞争比IM残酷多了。那么多IT公司，有多少是纯粹做电子邮件做发起来的？几乎没有。为什么呢？因为电子邮件的开放性强。开放性强是历史的产物，早在主机时代邮件协议就已经固定了，而且有了大量的实现。如果哪个ISP不遵循，那么就没有用户。但是遵循标准的结果就是谁都可以被谁替代。也许某某邮箱系统的界面好看点，某某邮箱系统的容量大点，某某邮箱的速度快点，某某邮箱的垃圾少点。但是都不是不可以替代的，属于非强用户粘着性的产品。(注意我没有使用弱这个词，因为一般人习惯用一个邮箱后也就不怎么更改了)如果邮箱服务收费，ISP会发现，几乎是立刻就没有用户了——
然而IM则是在端点时代才发展出来的，而且始作俑者不是IETF成员，IETF也没有太关注。——这捅了大篓子。现在的IM产品，几乎一个产品和另外一个无法连接。一旦你大部分的朋友使用了某种IM，你也必须被迫使用某种IM。好比贝壳虽然不喜欢QQ(这厮没Linux版本还老封锁协议)，但一帮朋友都是QQ的，难道不用？这是意味着IM是扩散用户粘着的产品！
这意味着什么呢？ISP们不用推销，只要他们拥有一定的用户了，用户就会自动扩展用户群。而且你的用户不会轻易离开你，即使你收费，也有相当的用户。如果改成开放的形式，很多大型的IM商就等着客户流失吧。因为他们有相当的客户群，因此往往会收取一定的费用或者产生较多的广告。而IETF已经开始制订IM的交互协议了，即SIMPLE协议。先不说这个协议是否先进是否安全，至少这个协议是开放的。开放的协议意味低附加值的服务，因此IM商肯定会抵制协议的推行。一般的逻辑是。如果SIMPLE协议的总客户集群无法和自己的客户群比较，则不和SIMPLE互通。这样有利于维持自己的IM群，进而取得收益。如果SIMPLE协议的总客户集群已经大大超过了自身的客户群，则和SIMPLE互通。因为可以扩大自己的群，进而扩大用户。所以SIMPLE协议应该是从新兴公司开始推广的。
因此，作为一个用户来说，我更希望大家现在开始使用带有SIMPLE特征的服务。这样更有利于促使更多IM商互通服务，而且还会减少服务的费用。
从历史上说，当今的各大IM厂商自有其来。QQ是特殊历史时期的特殊软件。开始的时候其实就是简化的ICQ中文版，除了中国制造外没有什么特长。后来中国的互联网娱乐潮起，QQ向娱乐转型，主攻大众市场，结果红的发紫。MSN则是更晚时期的产物，是MS攻占全球IM市场的拳头产品，主攻的是商务市场。Fetion是中移动今年新推出的IM产品，特点是和手机互通。
就发展趋势来预期，IM主要呈现两个特点，一个是全分布化，一个是嵌入化。
虽然IM软件的工作原理对于服务器要求不高，然而很多后续服务对于服务器却有强烈需求。我们先仅仅计算基础通讯消费吧。一个人登录的时候先认证，后回传所有好友的名单，套接字。一般登录一次开销最小也要在3K上下。一般成熟的IM软件总用户量至少是1000W以上(国内市场)，峰值冗余计算为五倍。计算结果就是一天的通信最少300G，最低带宽需求是20M。这还仅仅是登录造成的通讯成本。我们再考虑持续心跳激活某个特定客户端的重复时间——那这个开销就不是某个服务器所能支持的了。现在的IM服务器端，一般都是服务器组来完成这系列的需求。当然——未来的IM软件，我们的期许绝对不是仅仅1000W用户这个级别了，至少要包含国内的上亿人，加上国际的上亿人。每个IM的有效注册用户规模可能达到数亿这种恐怖规模。加上嵌入化的发展，在线时间也会越来越长。因此服务器的规模也会随之上升，进而造成IM收费时代的到来。
如果要IM持续免费，则我们就必定要发展分布式IM。简单来说，用户登录，持续心跳等等都不以服务器为中心，而以分布网络为中心。服务器只辅之以用户入口和统一的模糊查询的功能。这样会大大减轻服务器的负担，但是也会带来几个问题。
首先是用户的注册，没有用户数据库了。不过不难解决，可以让用户不需要注册。因为没有一个统一的服务器，因此用户注册只需要生成一个UUID，生成一对公私密钥，就算完成了。登录的时候即是告知别人自己的UUID，公钥和套接字即可。需要寻找一个好友的时候，可以使用UUID查询此人的套接字，具体方法请看DHT，Kademila，我上面有写的。
其次是大规模块内容的传输，简单来说其实就是传文件。这些数据如果可以直接传输则没有问题，但是在无根分布系统中，间接数据传输是要过中间机的。这样会造成中间机的网络开销。这个还要看人家乐意不乐意呢。这个没有什么好的解决方法。
最后则是安全问题。这倒不难解决，发送内容用私钥和对方公钥各加密一遍，接受用对方公钥和私钥解密就好了。第一次发送一个统一加密块，后面就用这个块加密，定时更换。兼顾了安全和效率。
IM的另外一个特点就是嵌入化，简单来说就是移植向手机上。中国的移动运营是特殊状态，不过世界的发展大致都是一样的。就是将手机发展为网络终端，然后尽量用软件解决问题。那么中国移动现在的短信优势还能持续多久就是一个非常大的问题了。当然不排除短信优势消灭前飞信拥有了新的特性的可能。</description>
    </item>
    
    <item>
      <title>网络银行安全性的理论分析</title>
      <link>//blog.shell909090.org/blog/archives/419/</link>
      <pubDate>Wed, 28 Nov 2007 23:55:11 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/419/</guid>
      <description>最近好像用网银的人比较多阿，贝壳就做件好事，简单介绍下密码学体系。让大家了解下网银安全性的方方面面。
我们说，银行系统的安全性和易用性往往是一个磁石的南北极，不大可能出现在一个地方的。从易用性角度来说，输入用户名和取款密码直接操作的网银是最方便的。可惜，你的钱被偷的概率也是最高的。因为你和银行间的通讯过程需要流经无数节点，任何一个地方都可以轻易拿到你的登录密码。那么重复这个过程就可以登录并且操作你的钱。所以，任何一家银行都不会提供直接的登录手段。
一般来说，银行在设计网银的时候，往往会提防以下的攻击手段。社会工程学，嗅探，重复发送，钓鱼，中间人钓鱼，猜解，内部盗窃。我们先来大致了解下这些攻击手段的方法和实施条件，然后再说银行的对应手段。
社会工程学攻击是成功率最高的，技术要求最低的攻击。其要决就是一个字，“骗”！社会工程学攻击主体上就是各种骗术，例如把机器塞上，旁边写一个处理电话。等你打电话的时候，就过来一个“工作人员”。然后弄出你的卡来，说要验明你是否是卡主，问你密码。等确认好了身份，你拿到的就不是自己的卡了，那个工作人员也就拿了钱跑了。诸如此类的攻击核心要点就是骗取客户信任。所以社会工程学的对应手段只有让客户提高警惕，其他没别的好办法。
嗅探指的是从登录的机器上或者附近符合一定条件的机器上(具体是哪些需要一定的专业知识)，窃取登录过程数据，并且从中还原出用户密码的手段。这种攻击往往和重复发送一起使用。无法还原密码的情况下，将原先登录的包重新发送一次。对应嗅探攻击的方法很简单，就是挑战-回应方法(Challenge-Responses)。现代加密算法有专门对应已知明文攻击的，用于对抗已经知道明文和密文情况下反解密码。服务器发送一个随机数过来，客户端加密后发送回去。服务器端核验客户端的加密结果和服务器端的加密结果，就知道客户端是否通过认证了。而嗅探者需要相当数目的明密文对才能知道密码。所以相对安全程度更高。
钓鱼是一种社会工程攻击。一般是通过邮件或者其他手段引导你到某个网站上，看上去和网银很像。等你登录想用的时候，会发现上面说网银现在正在调整。如果当时没有在意，等下次登录的时候帐户里面的钱就没了。由于窃取的是密码本身，所以挑战-回应方法无法解决这个问题。这种情况下就必须使用挑战-回应方法的变形，例如零知识验证。大致上看起来就是这样的，银行给你本很长的书，里面写什么你也不知道。然后银行问你，第512页三行15个字是啥？钓鱼收集到这个知识就没用了。但是中间人攻击还是有效的。中间人和钓鱼看起来很像，只是中间人不是窃取密码，而是窃取会话。当你以为登录到银行的时候，其实是登录到了一个中间服务器。一切你的操作其实是通过中间服务器代理上去的。当你退出的时候，中间服务器就会替换你的操作，实施一次转帐和退出。要屏蔽中间人攻击，就必须使用签名证书系统来认证服务器地址。
猜解和内部盗窃是通过对主人情况的了解来猜测或者偷窃密码/密码设备的攻击。目前没有啥好办法，只有想点自己都想不到的东西作为密码才行。生日，电话，车牌，名字，都不可以直接作为密码。当然，做一些基础变形后作为弱密码还是可以的。例如将生日倒过来作为查询密码。
目前网银的认证系统有以下几种，密码直接验证，文件证书验证，密码卡认证，手机动态认证，硬件设备认证。
密码直接认证一般使用了SSL技术来防止嗅探，但是对于钓鱼，中间人，猜解，内部盗窃都没有防护能力。一般都是各个网银的最差防护状态，为某些对安全不在意的人设计的。只是使用方便而已。
文件证书验证是利用密码和文件数字证书来验证身份的方法，对于钓鱼，中间人有比较好的防护手段。可以防止猜解，但是无法防止内部盗窃。因为文件证书为了方便起见都是存放在电脑内部的，所以文件证书的安全就又成了问题。即使是存放在U盘上，也会在使用的瞬间被复制。电脑中木马，文件或者U盘被盗拷，都是产生不安全的原因。
密码卡是某种零知识验证的变形。差不多就是给你张密码卡，刮一次能上一次。对于钓鱼有一定防护能力，但是对于中间人攻击无能为力。可以防止猜解，但是无法防止内部盗窃。
手机动态认证是通过手机收取临时动态验证码来确认客户的身份。如果要窃取客户的身份，就必须同时得到用户手机卡和用户密码。所以，也是防嗅探，钓鱼，猜解，但是不防中间人和内部盗窃。注意这里有种特殊形式，大家也许不知道，手机发送的短信是可以被特殊设备截获破解的——
硬件设备认证则是将密钥和计算放入了特殊硬件内。银行发送挑战数到硬件上，硬件设备返回数据到银行。如果要窃取身份，就必须获得设备和密码。因此，也是防嗅探，钓鱼，猜解，但是不防中间人和内部盗窃。一般就是指银行的U盾设备，但是要注意区分U盾究竟是用来计算呢，还是用来存放密钥。后者的安全级别和文件证书一致。
我们对比各种攻击之前，先去掉两个特殊选项，社会工程和中间人攻击。社会工程某种意义上是无法防御的，你说你要把东西交给别人，银行怎么防范？拿你的生物特征？那就太麻烦了。中间人则是因为可以用CA证书验证地址有效性，因此现在很少成功。当然，也有先欺骗DNS服务器的。碰上这种蓄意的中间人攻击，差不多就和碰上人强奸一样——反抗是没意义的。这两种方法，只要是有心算无心，基本都可以成功。因此我们先去掉这两个成功么未必成功，防范么没法防范的选项。
SSL技术是网银登录的基础技术，没有的话请记得早日离开这家银行。文件证书使用方便，但是电脑一旦中木马就立刻危险。密码卡看似安全，其实对于精心设计的钓鱼还是没用的。而且使用麻烦，不如趁早不用。手机动态验证的安全性是非常高啦，可是要记得手机的安全就是帐户的安全。所以手机卡千万看住，别被人复制了。(手机卡是可以复制的，然后就可以用这个号码打电话了。当然这种事情发生概率很小，一般倒是用在一卡多号上比较多)还有手机信号问题，找个深山老林上网吧。
硬件设备认证是比较硬的方法，一般是比较完美的。可惜价格太贵。
综合下来，偷懒的可以用手机。怕事的还是用硬件。</description>
    </item>
    
    <item>
      <title>Google Calender</title>
      <link>//blog.shell909090.org/blog/archives/418/</link>
      <pubDate>Mon, 26 Nov 2007 17:49:12 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/418/</guid>
      <description>Google有很多产品，Google Calender就是其中之一，这个东西主要的目的就是管理日历。
其实从常规角度考虑，这是最不适合bs的产品。日历的要点就是随身，谁会高兴为了看个日历找宽带上网阿。可不能不感慨Google的水平，凭着各种技术的支持，这么一个产品居然还真让我觉得好用。
Google Calender的两个核心思想就是同步和共享，同步用的是iCalender标准，共享也很类似。Google Calender的管理中，允许在多种客户端内同步Google Calender的日程。这样Google Calender就从一个不适合的产品一下变成了多个日程工具的平台标准。贝壳现在是利用他同步多个机器上的多个软件，主要的产品包括Sunbird/Lighting，raincalender，部分的手机日历，相信很多人也会做这个应用。贝壳用的就是其中的Sunbird，这个软件是Mozilla的产品之一。(贝壳现在是Mozilla的忠实用户，FireFox，Thunderbird，Sunbird三件套常备，都做了跨系统共享)不加载Provider for Google Calendar的情况下，可以读取iCalender格式的远程日历。加载插件后会多出一个Google日历的选项，用Google中的个人xml链接，保存入个人的用户名和密码(个人的gmail，带域名)，然后就可以双向同步gcal了。
至于共享，在管理的时候应该可以看到和谁共享。做项目的时候，拉组员进来共享。或者没有gmail的可以用全可见加给html链接的方式。这样就可以给组员看他们的工作状态，别人的工作状态，将来的项目安排。如果组员可信任，可以给予写权限。这样他们会自动更新进度，可谓超级省事。
最后，Google Calender可以被结合入iGoogle里面，成为标准平台的一部分。</description>
    </item>
    
    <item>
      <title>开blog宣言</title>
      <link>//blog.shell909090.org/blog/archives/7/</link>
      <pubDate>Mon, 26 Nov 2007 00:07:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/7/</guid>
      <description>blog供应商更改，发个新的纪念下。
msn的blog已经用了好几年了，期间也没有出过什么大问题。只是最近在Linux下面写的东西无法提交，windows下也没有格式。问了几个朋友都正常，莫非是贝壳人品问题？算了，不搞这么复杂了，听说google的产品也不错，换了算了。
就这样。</description>
    </item>
    
    <item>
      <title>Linux和windows共享邮件</title>
      <link>//blog.shell909090.org/blog/archives/417/</link>
      <pubDate>Sun, 04 Nov 2007 22:59:14 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/417/</guid>
      <description>总算能发正常的文章了，前面发出来的老是不会断行。庆祝一下。
很多人像贝壳一样使用双系统，Linux加windows。贝壳的Linux用的是Debian，最近其中的xfce4出现一些问题。使用的时候老是死机，这日子没法过了。所以贝壳就稍微下了点功夫，先弄个好用的windows凑合一下。
windows下最难办的恐怕就是邮件了，到不是说不能收。只是windows下一个邮件状况，Linux下一个。未免讨厌了点。就算有导入导出可以转换，你想转换多少次呢？
下面贝壳就说一种方法来对付这种状况。
首先你的系统盘应当是ntfs，否则这方法不能用。然后在windows下安装ext2ifs来读取linux的home目录，假定是d:\username.mozilla-thunderbird。windows下安装类似版本的thunderbird，然后看看你的C:\Document and Setting\username\Application Data\Thunderbird下面，是否有一个profile.ini？有就对了。删除这个目录(我没说错)，然后去下一个叫做junction的软件，微软出的。这个软件可以将ntfs的某个目录映射到一个目标上去，对这个目录的访问就等同于对这个目标的访问，就好像linux下面的符号链接一样。下面知道我要做什么了么？
junction &amp;quot;C:\Document and Setting\username\Application Data\Thunderbird&amp;quot; d:\username\.mozilla-thunderbird 然后启动thunderbird，他首先会检查你系统中插件的版本可用性。然后你的Linux下邮件就可以用了。
简单吧？</description>
    </item>
    
    <item>
      <title>关于程序的一点想法</title>
      <link>//blog.shell909090.org/blog/archives/416/</link>
      <pubDate>Sat, 13 Oct 2007 07:06:16 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/416/</guid>
      <description>以下内容六牙四皂小姐可以看看，至于看的懂看不懂不负责。
程序届有个说法，只有你想不到的，没有我做不到的。当然，程序是基于数学的。如果违反了数学的基础理论，程序还是无法实现的。可程序又不同于数学。说穿了，程序有一个时间，成本和环境的限制，有的时候还有法律问题。理论上说，任何一个水平足够的人都可以写一个windows出来。但是，首先是一个人写需要多少时间。其次是这些时间，还有其他投资(例如电脑)所造成的成本。然后是这个windows所能运用的环境。当然windows也许没有这个问题，可如果是程序就必须考虑适用系统(Windows,*nix)，字长(32bits,64bits)等等限制。最后，一个和windows一样的系统是否会侵犯了微软的版权？
对于程序员来说，可能这些都不是问题。程序员面对的是明确的目标，环境，解决方法和框架。他们要解决的是按照构思来实现功能，并且按照算法来构建代码。例如一个播放器，对程序员来说可能就是一个确定的接口，向里面写入固定格式的数据。或者引用某种算法读取压缩数据，解压为通用数据进行播放。或者是实现解码器的注册和管理。这些都是已经被严格确定了的目标。程序员有一个固定的环境，一个统一的框架。解决方法或者是被说明的，或者是不言而喻的。
可是由一个抽象的需求来获得一个明确的目标，并且确定环境和实现方法由谁来做呢？一般这些人被称为需求分析师和系统构架师。需求分析师的工作在于帮助用户确定需求，分析需求的可能性产出(例如播放器中是否需要一个屏保屏蔽功能)，分析系统的目标环境。这些任务更多的是出于用户角度考虑的，主要是我需要做什么(what,
why)。系统构架师则是一个对称的职务。其主要职能在于确定如何使用目标环境中的各种技术实现目标需求，使用这些技术完成目标需要多少时间，多少成本，是否引发法律问题。等等等等。这些问题更倾向于从程序员角度考虑，主要是怎么做(how,
when)。
当然可能没有这种职位，但不可能没有这种职能。有的时候分析和构架是由项目经理兼任的，有的时候是由客户驱动的(尤其是外包的时候)。至于完全没有的时候，就只有将需求分解为零散的问题，对问题求工具了。理论上说这是一种很好的方法，强大的bash语言体系其实就是由一堆解决细节问题的工具组成的。问题是，这种情况下，对于工具的使用者就提出了很高要求。往往会把工具的使用者变成另外门语言的使用者。例如我们看电影，一般用户只是点开就看而已。如果是针对问题求解，可能我们会出现一个播放容器，一个编码分析器，一个视频解码管理系统，一个音频解码管理系统。最后还需要一个注册器来关联适当属性的播放容器和某种文件类型。从软件结构角度，这样的软件有利于构架和编写。可从用户的角度，这是最差劲的播放器。事实上，mplayer就属于这种播放器。我们用起来觉得简单是因为一些高手制作了一些预先设定的包，将所有组件关联起来。
我们回到原本的问题上来。如果用户驱动了系统的构架，那问题自然不大。只需要制作方评估系统规模，然后按照规模给出成本和时间。双方讨论一个可以接受的成本和时间，东西就可以做了。至于客户变更了系统，那自然有相关的人员会重新评价，给出新的成本和时间。问题是如果约定不清晰，可能会造成比较大的麻烦。例如客户认为他们给出的解决中必须实现某个东西，而程序这里认为是最好实现某个东西。那就扯不清楚了。因此一般建议编程人员向客户要求一份详细的制式计划书，然后双方签字确认。根据合同法规定，如果制式合同中出现纠纷，应当被解读为不利于提供方的方式。倒过来显然是不行的，既不能指望编程人员提供计划书，也不能指望客户不会对计划书随便解释。
如果是由非客户的分析和构架人员来做系统构架，那么情况就复杂了。问题实质上其实变成了五方会谈。客户方，代表客户方的需求分析师，制作方，代表制作方的系统构架师，还有程序员。看起来有点重复，但是其中都有利害关系的。客户方希望需求分析师提出尽可能多的需求，因为这样才能产生好用的软件。系统构架师则希望需求分析师提出尽可能少的需求，这个才容易制作和维护软件。制作方希望系统构架师提出尽可能高的成本和时间预算。这样有充裕的时间制作，不会制作失败，还可以多赚钱。但是客户方不会喜欢很高的成本和迟到的软件。程序员希望系统构架师给出的解决方案足够清晰，而且改动少。系统分析师总喜欢在程序员的失败中改进方案，因为简单啊。客户方希望程序员给出完整的文档和后期维护，但是程序员都不喜欢写那东西。
所以需求分析师往往会提出一堆怪怪的功能，即使这东西一般人八辈子用不到。系统构架师往往会提出高的吓人的成本和时间预算。和股指差不多吧，没几个有脑子的相信。真正的成本和时间就会在客户和制作的吵架声中被确定，并且往往成本高出正常值，时间低于正常值。程序员就在一次次的咒骂声中修改系统，并且经常忘记跟着修改文档。客户拿到手的往往是一个延期了再延期的系统。它们十有八九跑的起来，刚好可以完成预定目标。只是往往会有一些Bug，并且只有不同步的文档。系统就会在客户的抱怨声中被退回，而且客户还会追加两个需求，加上句“钱不是问题”。制作方看在孔方兄的面子上，往往也会说“保证完成任务”。系统修改的结果往往是Bug越改越多，文档越改越老，系统越改越奇怪。最后系统分析员往往会找到一个下家而跳槽，客户往往会因为钱是问题而拖帐，制作方往往会保证完不成任务，程序员往往会抱怨天天加班，唯一没问题的需求分析师往往是客户亲戚兼任的。
到底是哪里出的问题？</description>
    </item>
    
    <item>
      <title>空之轨迹SC中文版部分攻略</title>
      <link>//blog.shell909090.org/blog/archives/415/</link>
      <pubDate>Fri, 12 Oct 2007 00:28:18 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/415/</guid>
      <description>贝壳望眼欲穿望穿秋水(好像是一个意思)，总算盼望到了英雄传说SC中文版的发行。Falcom牛阿，卡卡布三部曲那么强的东西在前面，空之轨迹居然还能超越，而且一部比一部好。做到这种境界真的不容易。轩辕剑系列就有点略略的走下坡的样子。
现在讲几个解迷中比较恶心的地方。
头一个是被盗的招牌。先找钟楼背后，然后是卡佩尔里面的对话。然后是三个联在一起的烟囱，最后到地下找菲。
然后是和小女孩捉迷藏，找过所有地点(四个)后可以进入接待室。在台子的底下，别到处乱找了。
下面是玲暗语。头一个是钓师工会的标本，然后是西区的咖啡厅。下面是东区的冰激凌店，最后去空港。
再然后是消失的订婚戒指，在翡翠塔顶部。
下面是被盗的勋章。头一个地点是在导力工厂后面的花盆里面(倒置密码)，第二个是协会三层的书里面(维基尼亚密码)。下一个在机场下面的铲车上，最后去教会上面的书里面。
消失的侄女那章，那位小姐就是市长小姐的女仆，关系很好的那位。看发色应该看的出吧～～
在利贝尔方舟上面领福音的时候，选择名字赛雷斯托.D.奥赛雷斯。就是一堆晶体里面有写的那位，公主的祖先。所以要验证身份的时候只有公主能验证通过，要记得带人过来，比较麻烦。
最后是最终的大BOSS，合体后的白面。这家伙血99999，而且硬的下不去手。正常的攻击魔法都伤不到100点，还有一堆小怪在旁边消除空间。消除了的空间就会永远消失，地板会越来越少。正确的做法是经常看看这家伙的属性(一定要有情报一类的回路啦)。这家伙会轮流跳来跳去，在火土水风不防护，其余免疫上。属性对了一刀就是3000-5000。如果都是100，那用物理攻击。如果缺哪门只有死的份了。
贝壳攻略这个游戏的时间大约是50小时，其中还修改了游戏的很多关键属性(主要是钱和晶石，后期修了一堆神圣挂链和土人偶)。虽然省下不少打游戏的时间，但是还是完成了很多支线任务(有几个不知道状况的被错过了)。解迷真的很费劲阿，尤其是被盗的勋章和一个地宫的怪物。那家伙强力气绝，一个弄不好就是全灭。三五次没过去花了我两个小时，一怒干脆弄出堆神圣挂链当手信了。</description>
    </item>
    
    <item>
      <title>三甲港游记</title>
      <link>//blog.shell909090.org/blog/archives/414/</link>
      <pubDate>Wed, 10 Oct 2007 19:03:26 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/414/</guid>
      <description>三号的时候，找了个朋友出去玩。找来找去，上海没有啥好玩地方，干脆去三甲港吧。
三甲港是浦东最早开发的旅游海港，离机场不是很远。有钱的可以坐车到龙阳路，再磁悬浮到机场，打车过去。不过一般来说，只有白痴才这么坐啦。来回路费就高达100每人，差不多够去玩的所有费用了。推荐坐地铁到陆家嘴，走到东昌路渡口。或者到外滩，摆渡过去就是。贝壳是地铁过去，在正大吃过午饭再出去的。
说到午饭，还有一桩怪事。贝壳的朋友，传说中的六牙四皂小姐，来到上海玩。她换了手机和号码，因此贝壳发的拜节短信没有收到。同时也没有贝壳的号码，所以她没法联系贝壳。所以，当天中午贝壳在正大的汉堡王吃饭，六牙四皂小姐就在旁边的松本家吃饭。NND，第二次错身而过。
三甲港的门票要38一个——是很不便宜。里面玩的东西也一般。皮艇，竹筏，骑马，乘车观海，胆子大的还可以游泳。港口本身是看不到海的，前面被很大的防波堤挡着。因此有电动车观海，还有骑马在大堤上跑的项目。至于皮艇和竹筏，好像是水边的必备项目吧。至于游泳，海水不是很干净。回头要记得冲洗，以免生病。其实还是找个游泳池来的划算，毕竟游泳池更为安全放心(呃，除了比较像下饺子)。
贝壳也没有带泳裤，所以只有划船咯。海边的风不小，还有夕晒。不撑伞会被晒伤，撑伞就会被往芦苇里面吹。要是全是臂力不足的女士们来玩，请千万带好男性同胞。贝壳就看到了两帮女士在芦苇里面没辙的场景，或者你想冒着被晒伤的风险放弃打伞？
晚上的饭就在旁边的餐厅吃的。本来里面有烧烤，可是贝壳和李定婷同志上次烧烤的经验实在太过惨烈。外面黑了，里面还带血，想想要再吃哪种东西就心寒。而且一个炉子45，要吃饱起码100多，也不合算。出去吃烧烤吧——灰太多。强烈建议三甲港的管理部门整理一下，海边这么多灰像话么？最后吃海鲜，旁边到有几个大的海鲜城。可惜看价格也不是我吃的起的。小饭店点了一个鲈鱼结束。
说道鲈鱼就丢人，本来以为海边的东西应该都新鲜的。蒸上来一看，眼睛出来的。当场就知道吃亏了。不过别的都吃到一半了，这个亏也只有认了。希望大家下次吃之前弄清楚这些问题，省得再吃这种亏。</description>
    </item>
    
    <item>
      <title>英雄传说6空之轨迹SC修改</title>
      <link>//blog.shell909090.org/blog/archives/413/</link>
      <pubDate>Wed, 10 Oct 2007 06:01:26 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/413/</guid>
      <description>以下是空之轨迹SC的存档修改方法和部分物品代码表，六牙四皂小姐可以跳过了。
晶片数目：
0x2534C 金钱
0x25354 地
0x25358 水
0x2535C 火
0x25360 风
0x25364 行动
0x25368 EP
0x2536C 时间
个人经验：
0x1F460 艾丝蒂尔经验
0x1F514 奥利维尔经验
0x1F550 科络丝经验
0x1F604 金经验
物品代码：
01c9 最终浓缩药草茶
01c8 大麦奶酪果冻
01c7 苦味兽肉焖
01C6 每日天妇罗
01AE 提神果冻
01C4 营养果汁
019F 清凉药草茶
01B9 内陆佳肴
01BD 卡布其诺薄饼
0195 千层薄饼
01a0 红莲炖兽肉
01a6 春风螺狮面
01ba 阳光冰淇凌
01bb 月光冰淇凌
01A1 不可思议的糊
01AF 激情蛋卷
01be 终极冰淇凌
01b0 海味鲜珍
000f 火绒草杖
0014 蓝璃
001b 麒麟</description>
    </item>
    
    <item>
      <title>骑马</title>
      <link>//blog.shell909090.org/blog/archives/412/</link>
      <pubDate>Mon, 08 Oct 2007 21:02:55 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/412/</guid>
      <description>首先请大家表误会，这个马真的是指马。
国庆前一天，公司请大家去玩，内容就是骑马。
贝壳这体重骑马，OMG，貌似有那么点点的问题。上去的时候，马一颤差点就跪下了。幸好在骑的时候问题并不大，虽然马的速度有那么一点点的折扣——
骑马的时候需要随着马的上下颠簸而起伏，否则会被颠成白痴的。不过很可惜，贝壳的体重要颠簸是非常困难的。无论是从人的角度还是从马的角度都是种折磨。所以，贝壳为了人的健康(尤其是为了男人的健康)和马的健康，骑了两圈就逃跑了——
还是等减肥完成再讨论吧——</description>
    </item>
    
    <item>
      <title>libxml2入门和中文支持</title>
      <link>//blog.shell909090.org/blog/archives/411/</link>
      <pubDate>Fri, 28 Sep 2007 22:43:40 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/411/</guid>
      <description>libxml2是gnome做的一个xml的库，支持SAX和DOM。
在解析xml的时候，libxml2会将xml中不属于标签的部分作为text节点插入。如果是属性，则添加一个属性节点到父节点上，一个文字节点到属性节点下。那么整个xml就变成了一颗单纯的树。
支持多语言的问题上，libxml2的内核只支持UTF-8。但是可以通过注册编码句柄来添加语言支持，一般是配合iconv[2]使用的，因为libxml2的编译依赖就是iconv。下面是代码。
iconv_t iconv_utf8_gbk; iconv_t iconv_gbk_utf8; int gbk_input (unsigned char *out, int *outlen, const unsigned char *in, int *inlen) { char *outbuf = (char *) out; char *inbuf = (char *) in; size_t rslt; rslt =	iconv (iconv_utf8_gbk, (const char **) &amp;amp;inbuf, (size_t *) inlen, &amp;amp;outbuf, (size_t *) outlen); if (rslt &amp;lt; 0) return rslt; *outlen = ((unsigned char *) outbuf - out); *inlen = ((unsigned char *) inbuf - in); return *outlen; } int gbk_output (unsigned char *out, int *outlen, const unsigned char *in, int *inlen) { char *outbuf = (char *) out; char *inbuf = (char *) in; size_t rslt; rslt =	iconv (iconv_gbk_utf8, (const char **) &amp;amp;inbuf, (size_t *) inlen, &amp;amp;outbuf, (size_t *) outlen); if (rslt &amp;lt; 0) return rslt; *outlen = ((unsigned char *) outbuf - out); *inlen = ((unsigned char *) inbuf - in); return *outlen; } static void print_element_names (xmlDocPtr doc, xmlNode * a_node, int n) { xmlNode *cur_node = NULL; xmlAttr *cur_attr = NULL; xmlChar *key; for (cur_node = a_node; cur_node; cur_node = cur_node-&amp;gt;next) { for (int i = 0; i &amp;lt; n; ++i) printf (&amp;quot; &amp;quot;); // key = xmlNodeListGetString(doc, cur_node-&amp;gt;xmlChildrenNode, 1); printf (&amp;quot;node %d: %s = %sn&amp;quot;, cur_node-&amp;gt;type, cur_node-&amp;gt;name, cur_node-&amp;gt;content); if (cur_node-&amp;gt;properties !</description>
    </item>
    
    <item>
      <title>wget介绍</title>
      <link>//blog.shell909090.org/blog/archives/410/</link>
      <pubDate>Tue, 25 Sep 2007 17:53:48 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/410/</guid>
      <description>从今天开始，贝壳每周介绍一些小软件，作为基础的电脑知识普及。软件可能是Windows的，也可能是Linux的，要点是轻巧好用。由于是简介，不会写的太详细。想要看专业介绍的，会给出Reference。
今天介绍的软件就是wget[1]。这个是*nix下的下载软件，也有windows移植[2]。现在可以运行在任何一种POSIX系统上。软件是GPL版权的，属于GNU开源组织的核心代码，也是GNU组织的几大招牌之一(最出名的是GCC)。如果要看详细的资料，请看这里[3]，可惜是英文的。
wget是*nix时代出名的下载软件，以稳定和通用出名。主要针对http和ftp协议的文件下载，拥有很多配置选项和能力。其中比较有名的是链接跟随，这种能力可以跟踪html内的链接。例如将所有链接所需的文件下载到本地，并且修改链接地址，即抓取完整页面文件。跟随链接抓取多重页面(网络蜘蛛)。
wget不支持多线程下载，但是支持断点续传。最常用的用法是wget -c [URL]。如果没有文件就直接下载，有文件就尝试续传。如果没有文件重试次数的指定，几乎就是无限制的下载。下载非常稳定，就算每小时下载10字节都不会断线。
和今天的GUI多线程，甚至带P2P的下载软件相比，wget无疑是非常单薄的。然而由于是基于命令行的，而且非常稳定，因此经常被用于脚本语言中。例如bash或者python，用于下载网络文件后的处理。windows中的很多脚本也可以用这个软件来下载网络文件，非常方便。
Reference:
GNU Wget: http://www.gnu.org/software/wget/
Wget for Windows: http://gnuwin32.sourceforge.net/packages/wget.htm
GNU Wget Manual: http://www.gnu.org/software/wget/manual</description>
    </item>
    
    <item>
      <title>自由软件日</title>
      <link>//blog.shell909090.org/blog/archives/409/</link>
      <pubDate>Mon, 24 Sep 2007 22:51:58 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/409/</guid>
      <description>大家好久都没有看到贝壳了，知道干嘛去了么？到总公司辞职是一件事情(分公司员工还要去总公司辞职，还不报销来回路费)。还有一个就是自由软件日。
贝壳3号辞职，公司效率倒是挺高，6号就办好了手续。可贝壳还要等等确认所有东西对了，加上贝壳的一点东西拖了好久(什么东西？就是上面blog有写的那个阿——就是那个——)。所以趁机做掉去。(尽管知道是怎么回事，可是说出来还是感觉两腿间发凉)。做掉后需要静养一周。消炎静卧还不能洗澡。贝壳上班忙没这功夫，这次正好到巧了。
做掉之后(继续发凉)，贝壳修养好了刚刚好参加自由软件日，然后乘飞机回上海等上班。飞机的情况大家都看到过了，今天就说自由软件日咯。
这个活动的举办地点在清华东门的Fit楼，主旨是向学生推广一下自由软件的概念。同时也是几个社区的人聚会一下，大家认识一下。贝壳也算是热心公益，跑过去凑凑热闹。
会其实不大，楼下一堆Linux厂商。红旗，RH，debian，等等等等。楼上是一个演讲厅，一堆大牛在里面演讲。好歹贝壳是志愿者，老跑上去听演讲可不专业。所以还是乖乖的在楼下开了贝壳自己的本本，给别人讲解啥是Debian。期间贝壳发现几个有趣的现象。
首先，漂亮MM旁边都有老外，老外旁边未必是漂亮MM。当然也有旁边不是老外的漂亮MM，那多数是专门做演示演讲的活动人员。
其次，跑上来问7.04还是7.10的一堆，问这是什么系统的其次。不问系统而问我本本左边插的CPU抽吸式散热器的最多。让我不知道这个是自由软件日展览还是奇怪的设备展览——
最后，光盘散发的是所有纪念品中最快的，几乎是刚刚开就没了。衣服其次，最后还多了几件不对号码的。贴纸和传单快到结束了才发光。
不过总之，能介绍介绍自由软件，认识几个朋友，这界自由软件日也基本是物有所值拉。</description>
    </item>
    
    <item>
      <title>为什么是国航赞助的奥运</title>
      <link>//blog.shell909090.org/blog/archives/408/</link>
      <pubDate>Mon, 17 Sep 2007 02:45:33 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/408/</guid>
      <description>why is airchina who sponsor the Olympic Games
熟悉贝壳的人都知道，贝壳的老妈是原中国国际航空公司(Airchina)客舱服务部六分部的乘务长，贝壳非常为此骄傲。而且因此享受一张北京到上海的往返机票，理论上是免票。
说是免票拉，但是其实还是要交钱的，原因是燃油附加费和机场税。加上这两笔费用后基本可以坐火车过来了，不过考虑到飞机的时间，所以还是合算的。但是不要以为事情就这样结束了，免票享受的是候补待遇，因此贝壳也就能经常的体会候补的痛苦。在此给大家举几个例子。
首先，候补的签发时间是飞机起飞前，而且在全价购票和正常飞机改签之后。估计有的人会晕，的却有点复杂。什么概念呢？候补指你使用候补票或者折扣票进行候补登记，等到飞机没有人要上了，多余的空座位里面你挑。想当然，是挑不到什么靠窗靠走道靠前的好座位的。全价购票是指因为特殊原因，在飞机起飞前在航空公司柜台办理购票，新买一张最近的机票。然后就走正常登机流程。不过，想也知道这种情况下是没有折扣的。飞机改签是指你不想乘坐你预定的航班，和航空公司确认提前或者延后。但是航空公司会优先考虑全价购票，所以不会马上说，OK，给你改了。所以如果改签，就有两种方案，一种是你改签航班的现在售价小于你持有的机票，航空公司就会推荐你退了当前的票订新航班的票。要么就在候补柜台等待起飞前候补。当然，起飞前多余座位的分配是全价票优先，改签其次，折扣票候补最后。同样情况金卡客户优先，普通客户其次。这些条件都相同，就是看你候补的优先程度。先到先得。
因此贝壳曾经碰到一个很恶心的状况，并且写过一个blog，虹桥机场最漫长的一天。原因是因为早上的航班机械故障无法起飞，所有旅客都退票或者等待改签。注意，待遇是改签哦。如果想快走，可以，全价机票，旧的自己退掉。想当然耳，找旅游公司退票会累死的，而且肯定是退折扣后的价格。等于费劲半天折扣变成全价票。有的旅客还等不到国航的全价票，就找别的航空的全价。造成整个虹桥机场当前到北京航班全部爆满。然后是改签候补等待，全价都没了，那你们就慢慢等吧。就贝壳印象，最后一个是下午6点多的航班走的。就是等待了8个钟头。因为不是延误，而是不可抗力。所以也没有延误补偿，只有客饭。当然这个贝壳不很清楚，只是和等的人聊到而已。最后就是贝壳这种折扣候补，从早上9点到等到晚上10点半起飞，落地后已经是半夜一点了。如果不是空管局取消了红眼航班的限制，贝壳当天就又要打的回家重来。
而后，就是候补的签发具体时间。一般是起飞前30分钟。由于时间太过紧张，所以是很难托运行李的。但是由于空管局的规定，飞机上禁止携带液态行李物品。除非必须，而且需要开瓶检验。所以一般情况下，候补票是无法携带液态物品的。这点对改签候补的尤其麻烦，因为他们往往是可以托运携带物品的正常旅客，所以往往已经在要托运的行李里面放了液态物品。当然，多数情况下如果出现这个纠纷，可以交涉一下。拿到等机牌后态度可以强硬点，因为这个座位已经是你的了。而且你也应当可以正常托运，只要别弄的没赶上飞机。没拿到就别那么嚣张了。到时候说，阿——没座位了。我们又不知道是不是真的没了还是在整人。
再然后就要说到传说中的京沪快线了。北京到上海的飞机因为人数太多，专门处理，俗称京沪快线。这系列的航班候补签发时间是起飞前20分钟。今天早上贝壳就是多次死在了这个时间上！！！
在北京首都国际机场2号航站楼(2 terimal station of beijing caption national airport)坐过飞机的旅客都应该在安检后看到过一个告示。从此到最远的登机口步行需要12分钟，请酌情考虑以免延误航班。如果参考这个告示，我们从拿到登机牌到上飞机的20分钟里面，差不多就有10分钟需要消耗在走路上。(当然可能实际只需要走一分钟，不过要是能次次保证这种运气，你可以去买彩票了)如果飞机没有延误，登机口会在起飞前五分钟关闭。所以，我们还有五分钟的时间从办票柜台到完成安检。然后安检的时候需要将电脑包打开查验，至于原因别问我为什么。根据贝壳的经验，安检通道在没有人的时候需要一分半通过，排1个人大约是20秒。也就是说，排超过10个人——当——时间到。
当然，上述种种好运不一定会同时发生，虽然贝壳今早就碰到了一次。贝壳从小在机场长大，三个航站楼是无比熟悉。(包括那个已经废弃的老机场)就算不能背出准确位置，可也绝对不会走错路！老妈又熟悉流程，所以专门申请走的急客通道。理论上是最快流程了，可是赶到的时候，登机口已经关闭了。当场把贝壳气的够呛。于是贝壳只能再重复一次快速跑道，乘坐8点30的CA1501(这原来是老妈老飞的航班，贝壳听航班号就知道是干嘛的)。8点15取的票，有录像为证。一路跑步到急客通道——好，没有人。然后8点16多点通过的安检。掉头一路小跑到登机口——快跑已经跑不动了——所有旅客已经完成登机，通道准备关闭了。贝壳通过通道，8点20，然后喘了口气，通道就关闭了。贝壳和机组(不是乘务组)人员一起上的飞机。上去后行李还没有放，飞机已经开始滑行(taxi)了。
这种让旅客来回跑，还带卡点的登机方式。难怪国航能赞助奥运，让我们和刘翔一起跑。</description>
    </item>
    
    <item>
      <title>一点小东西</title>
      <link>//blog.shell909090.org/blog/archives/407/</link>
      <pubDate>Tue, 11 Sep 2007 21:08:03 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/407/</guid>
      <description>贝壳近几天碰上个事情，算不上好也算不上坏。原本在小学的时候，贝壳的脖子上就有一粒东西，也不知道是什么。和家人说了，都不觉得奇怪。外公还给我看，他脖子上也有。所以估计是遗传，就像一粒肉囊一样的东西。外婆让我老用头发系上，等到了高中的时候，渐渐的就脱落了。
到了大学的时候，一天贝壳上厕所的时候一摸，在大腿根部的地方又出一粒东西。比原来的大小大N多，大概有豌豆般大小，碰上去的时候还有感觉。贝壳人也胖，走路经常摩擦。有的时候刚好碰到，就弄的苦不堪言，可又没有时间处理。(其实是因为平时也没有什么大事，整个一寒号鸟现代版)这次在北京，总算得了点空，上医院做掉了。医生看了眼，也没和我说是啥，直接说可以用激光手术处理掉。创伤恢复需要一周上下，期间不能沾水。以这个位置来看，当然也就不能洗澡了。交了80的费用(好贵阿)，然后开了50上下的创伤药品和消炎药。就直接进了一间手术室，里面就一个激光器。贝壳小的时候做过冷冻治疗，这次又是激光，还和皮肤科挺有缘，虽然也不是啥好缘分就是了。上次手术贝壳痛死了，所以这次手术紧张的要死，拼命和医生说千万别误伤。(想像一下什么部位吧——万一贝壳吃痛动了一下～～～～)医生到很放心，让贝壳站着就是。
手术到还不怎么特别痛，大概就和刀子喇肉差不多。只是手术过程中能清楚的闻到毛发烧焦的味道，想想正在做的事情，不由一阵恶心。再想想位置，更是一阵担心。速度很快，大概半分钟就搞定了。创口是平整的烧焦点，抹上碘优消毒就差不多了。
总算是搞定了，不过想想好像家族遗传这东西，那～
贝壳不由感到自己和孩子的将来是一片的黑暗阿～～～～</description>
    </item>
    
    <item>
      <title>关于最近我的个人问题</title>
      <link>//blog.shell909090.org/blog/archives/406/</link>
      <pubDate>Fri, 07 Sep 2007 22:26:37 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/406/</guid>
      <description>首先，我得坦诚的承认，我分手了，算是跳槽了，将来的工作地点未定。
这件事情先要从我就职的公司说起。我原先就职于上海某软件技术公司，后来被北京一家电子媒体公司收购。收购后上海这里就成为了分部，我和新公司重新签署了合约。
事情起因于今年的五月，当时刘凯找我和苏谈话，关于孟可能要离职的事情。他是我们程序部的主管，很受老板器重。当时我很奇怪，为什么做的好好的要离职。孟的能力不错，工作也不错，也很受老板器重，没有道理在这种最重要的时候辞职。后来北京方面来了个人，就是主管软件的许总，找我们谈话。关于孟为什么要离职的解释上，他说孟向公司要求加薪，提升为CEO等等条件。公司无法接受，结果他就离职了。
事情往往没有这么简单就结束。果然，孟离职前带出一个隐患，成果的源码在他个人手里面，他向公司主张这个软件的版权。这点我解释一下，什么概念呢？软件成果的版权应当归属公司所有，这是一般合约中都签署了的。但是也有部分情况下例外。例如草创型的公司，无力支付主程序员他们所期望的薪水，往往会以技术入股的方式，来使得程序员获得一部分成果的版权，即共同版权。注意这和微软的送股票可不一样。微软送的是公司股票，个人对源码还是没有所有权的。孟在任何合约中没有关于技术入股的约定，按照默认的规则，他应当无法享有版权。同时这也是一个职业道德问题，这种事情往往是职业场上很忌讳的。所以孟主张他应当享有版权，当然的遭到了公司的拒绝。但是如果他拒绝交出源码，我们就无法工作。所以当时北京和上海多次协商解决这个问题。我们就在下面没事干，闲闲拿薪水，看着公司里面来人和孟打笔仗。
七月的时候，公司有了比较大的动静，北京总部那里调派了我们这里的一堆核心骨干去北京出差。说是出差其实是隔离。估计是要处理孟的事情了，怕影响到核心员工的工作状态。名单上是我，苏，刘，钱四个人去北京，加上当时已经在北京的叶，总共就是五个人。苏没法去，因为他最近正在忙夜校的考试问题。于是总部的员工宿舍里面就住了四个人。说实话，有房子有空调，不用熬夏天。我觉得运气还不错的。我们在北京的工作也不是特别多，主要就是对上海做的一些事情补充和完整。主要在很多人事等方面问题上有一堆事情，让人比较闹心，情况天天在变化。
最终，在我们到北京后的一周(也就是刘和钱到的第二天)，许总把我们叫进了办公室，宣布上海方面裁员30人的决定。我们当时很难接受，难道上海就这么被裁了？我们的后路就这么断了？将来是否会轮到我们？要知道30人的裁员相当于上海方面总人数的一半，考虑裁员后的主动离职问题，估计公司八成以上的人都会在三个月内离开。北京方面征求了我们的意见，是否愿意继续在北京工作。他们给钱开出了加薪60%的待遇。他的工资和我类似，我估计我也有希望争取一定的加薪。至于上海的问题，只能说，按照规矩来吧。该补偿的补偿，我们还能说什么呢？
在上海裁员一个月后，刘和钱坐不住了，很多事情拖着。他们希望尽快回上海一次，搞定问题。所以钱找许总谈了一次，结论是当初许诺的高薪无法到位(原因就不去猜测了)。他们商量了一下，决定不继续留任北京。北京方面答应了他们的要求，安排他们尽快的回了上海。然后不久，刘就给我发来了消息，他们也被裁员了。整个上海分部解散了。
就在这个时候，女友给了我一个消息，说我在北京给她发的短信太少了，她喜欢上别人了。实话说，我从头到脚就不是一个很粘的人。MSN上可以聊的很欢，可是邮件和短信基本都是直来直去，解决事情为主，这点从头到尾就没有变过。我来北京见不到面，电话太贵，又不愿意用短信，她又不愿意上网，自然老碰不到头。这种情况下一个月就分手，哎，什么感觉呢？庆幸居多吧。
许总找我谈了一次，问我是否愿意留任北京。我说来北京我的可支配资金太少了，上海不交三金，北京要扣金，还有房子问题。让人做这么大调动总得出点血吧，虽然对我来说不算是坏事。许总给的答复很有意思。他说你的工资在整个部门里面已经算是中高收入了，所以不准备加薪。但是公司宿舍继续让你住，如果有人士变动不能住了，再谈加薪。
公司的宿舍，什么概念呢？没有任何合约限制，只有口头承诺让你住。换句话说，说不让住了随时就请你走人了。对于这点多少我心里还是清楚的。至于再谈加薪，那余地就小多了。往往是加个500了事。公司的这个举措可谓一举两得，首先将因为上海解散而空余出来的房子做了利用，减小了公司的财务压力。其次人先过来再谈加薪，余地就小。不过先有房子后可加薪，还转移到北京来，总好过给一个月工资的资遣。对我来说后方已经没了，和公司谈也没啥可谈的，女友也说要分手了。于是还是答应了这个条件，准备回去搬家。
到了上海以后，先是去公司拿东西。整个公司一片狼藉凄惨无比，所有的人都已经离开了，剩下一地的废纸诉说着当初的辉煌。我毕竟还算个一脚跨进黑客门槛的家伙，把所有废纸全读了一遍以后。对原来公司的各种情况算是有个基本的了解了，不过还有什么意义呢？能够左右公司的从来不是我们，还是收收东西准备走人吧。
一件意外的事情改变了我的决定。我的老板准备开高薪找我做程序，而且主管C++部门。那这一衡量就又不一样了，多出来的工资够交金租房还有富裕，更不说主管部门和普通程序员是天壤之别。对于老板的这个信任还有什么话好说呢？所以准备倒过来向北京这里辞职。
向北京这里辞职的时候，许总的态度很有意思。他很爽快的就答应了下来，一点也没有惊讶什么的。上面说了，他说我原来的工资在部门算是中高收入，那见到有人开我高薪怎么完全不惊讶呢？多少也应该有惊讶的场面话吧？结合他平日说的一些话的推断，估计是我原先的薪水根本是底薪中的底薪，许总原先说的根本是借口。那么公司要我来北京的意图也很明显了，有便宜不要白不要，辞退了还要多一个月工资呢。如果是这种心态，将来的发展可想而知。我倒是感到有点幸运。
所以现在，贝壳是个没车子没房子没票子没马子，工作地点没有确定，手下一个人都没有的——C++部门主管。</description>
    </item>
    
    <item>
      <title>活活憋死&amp;最近的状态</title>
      <link>//blog.shell909090.org/blog/archives/405/</link>
      <pubDate>Thu, 06 Sep 2007 04:49:10 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/405/</guid>
      <description>今天碰到一个恶心事情，贝壳用的是Debian，相信大家都知道。今天贝壳上上海移动的网站，发现上海移动的网站虽然可以登录，但是在使用过程中过渡是使用Flash的。换句话说，没有装Flash的就死定了。贝壳虽然装了Flash，但是不知道是版本还是什么别的问题，不能用。于是贝壳无奈之下切换到了windows，然后准备去上这个网站。
切到windows下——发现新装的系统没有设定过网络密码。贝壳赶快挂上Debian的根分区，找到网络配置配上。然后完成查询，重启进入Linux——系统死机——
由于这个机器才修过——贝壳一下超级紧张。于是重启进入单用户，照旧死机。贝壳转到windows，好的。于是贝壳再进入一个Linux，总算发现原来机器是死在了ext3文件系统挂载上。
死的是个根分区，压根没法启动系统。贝壳只好找人借启动盘。找到一个RH9的，却无法识别SATA设备。最后没办法，一边找人下载镜像，一边问一个网上的朋友求援。最后运气不错，总算弄到一个启动盘。重启进入启动盘后fsck.ext3 /dev/sda?就可以了。
就这么简单的一件事情，因为没有启动盘搞的贝壳非常狼狈。浪费了一个下午啥都没做到处求援。Linux对于系统的容错和健壮看来也是有问题的。
接下来的几天，贝壳恐怕无法天天上网了。不过估计会几天上一次来收发一下邮件，检查一下blog，还有看看新的小说。诸位有事的话就发邮件好了，别的恐怕是找不到人了。</description>
    </item>
    
    <item>
      <title>逝去的岁月</title>
      <link>//blog.shell909090.org/blog/archives/404/</link>
      <pubDate>Tue, 04 Sep 2007 19:52:46 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/404/</guid>
      <description>今天在家中，隔窗向外眺望。青白色的天空上点缀着金黄的云彩，飞机偶尔从上面悠闲的路过。下面是黑色的群山，忽远忽近的点缀着。迎着金黄的夕阳，远处的城市显得越发清晰起来。一堆的高楼大厦，四处包围过来。记得小时候也曾经这么看过窗外，一眼望出去一览无余，除了远处郁郁葱葱的大片森林，看不见什么东西。只有偶尔在要下雨的时候，才能看到天际线出隐约浮现出模糊的一些建筑。我知道那是北京。十多年转眼过去了，贝壳也从当年的无知小孩变成了赚钱养家的俗人。今天有半天的空暇，从窗口眺望长夏的天空，祭奠我曾经的青春。</description>
    </item>
    
    <item>
      <title>散热器的种类，测量和挑选</title>
      <link>//blog.shell909090.org/blog/archives/403/</link>
      <pubDate>Tue, 28 Aug 2007 05:36:17 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/403/</guid>
      <description>上篇文章中贝壳提到了散热垫。非常不幸的，经过贝壳的实际测量，贝壳所购买的散热垫基本没有任何效果。为了让大家对散热产品有个了解，贝壳就大致介绍一下散热器的分类和作用。还有一些常用术语，常见参数和解释。
首先一类是散热垫，这是最常见的产品。优势在于可以非常快的散去表面温度，手感非常明显。缺点在于不方便携带。主要分为吹风式，抽风式和双向循环三种工作方式。同时可以按照表面材质分为非金属，铁，铝合金三种，按照供电方式分为外接，USB, USB HUB三种。
吹风式的主要特点是从后部或者其他部位吸收空气，向底部吹风。吸风式则相反。双向循环两者都有。一般笔记本如果带风扇，都是从下面吸收空气向外排出(大多数是左上或者后面，因为没有鼠标干涉)。这时候如果采用吸风式，则会产生干涉，导致效果不明显。贝壳的头个散热垫就是这个问题。但是一般吸风式的散热效果比较明显。热量不必经过复杂的通道流转，因此对于表面温度的抑制非常明显。建议如果是带风扇的本本，按照风扇方向选择，没有风扇就用吸风式的。双向循环是最好的一种，可惜比较贵。
表面材质是关于被动散热问题的关键，如果本本底部是平的(没有垫脚垫高)。金属材质的表面会有很明显的散热作用，尤其以铝合金的为最(BTW，其实纯铜的导热最好，可惜价格贵，容易腐蚀，所以没听说谁用)。但是如果底部被垫高了(多数主动风扇散热的本本都要垫高的)，那么效果就大打折扣。建议如果本本是小型式的，平底无风扇的，千万记得选购一个铝合金的吸风散热垫。
外接的供电最充足，功率相对大。可惜需要额外的电源，而且噪音大，因此相对少见。一般只有在特别固定的场所，例如家中，才会固定放置一个。否则带散热垫还带一个电源和插座，谁也受不了的。USB是最常见的形式，需要用本本的一级供电口。一般取用电流都在200mA上下，功率大约1W上下，因此无源hub口是用不上的。但是大家知道，小型本本一般usb只有两个，分一个出来专门供电怎么行？因此好的散热器是usb hub的，正如上篇文章所说，取电的同时还能输出至少两个usb接口(严格是四个，不过限于功率问题，大家应该知道是无法同时接上的)。
再下来就是主动抽取式的外挂风扇。现在我只看到EVERCOOL有一款。也是唯一用下来对我有价值的一款。上文说了，散热垫的主要作用是整体散热。对于主板过热和硬盘过热都有很好的抑制作用。不过什么时候这两者过热呢？一般空气温度都要超过30度了，这两者才会过热，多数环境下是比较少见的。而CPU的温度则不是特别受散热垫的影响。一般CPU的散热过程都是从CPU上直接接一个热管到散热器上，将CPU的热能通过热管传输。如果热量很大，热管传输不足的话，就会造成结构性的热能堆积。这是散热设备无能为力的。而有的时候是热管传输出去的热能堆积在散热器上，导致热管效率下降(热管的工作效率取决于两端温度差，这根本是牛顿散热定律)。这时候可以给散热器强制排风增强散热，这就需要主动抽取式风扇了。按照以上所述，主动抽取风扇最擅长的是给CPU降温。缺点是价格高，使用范围有限，对主板和硬盘无效。顺便说一下，贝壳的主动风扇使用后，温度下降5度，是唯一能看出明显差距的散热器。
下面就是非本本的散热器了，首先是我们最熟悉的CPU风扇，主要用途就是给CPU散热。大家别小看这风扇，弄个不好上百的CPU就会毁在一个几块的风扇上。CPU风扇和散热器合起来叫做CPU散热设备，按照散热器材质分为铝合金，纯铜两种，按照散热器造型分为方阵和鳍片两种。鳍片就是大家在显卡上经常看到的从中心向外辐射的散热片，一般Intel的原状散热器这样居多。
CPU有几个参数，首先是最重要的，转数。越快越好。这决定了CPU本质的散热能力。其次，口径。这东西是匹配CPU的，小口不用大风扇，大口不用小风扇，不用贝壳废话。然后是CFM，这是排风量，可以根据口径，叶片角度，转速来计算。最后也是最重要的，轴承。决定了风扇的寿命和噪音。转速的一般性指标是1000－10000转，视具体产品而定。一般的机箱散热器都是1000多转的大口径风扇，排风量大，散热也很快。只是风无法聚集吹送，用来给CPU散热就废物了。CPU风扇最小是3000转起，高的有7000多转的。CFM小的只有10上下，大的有60多的，一般都在30上下。一般风扇都是滚珠轴承的，高档的才用液压轴承。
除了风冷外还有一类，水冷介质。如果您不是超级超频DIYer，这节对您没用。如果是，您还来看我的文？所以跳过。同理，液氮冷也跳过。我们说说半导体冷却。
半导体是贝壳觉得最有实用价值的一类冷却设备。不便宜，可效果好。一块CPU同等大小的半导体制冷片所最需要关心的问题是凝露而不是过热。就是说，CPU同大小的制冷片足够把热量降到0度以下。唯一遗憾的是所需的功率也很惊人，大约在30-300W，足足半台电脑的功率。贝壳在考虑是否将来的本本会加很小一块在热管和散热器之间，然后将热管扩展到整个本本(其实不用这么夸张，大多数的纯铜散热片，中间热管穿以下就够了)。热管的工作足够将整个本本的所有热量导入到高热的散热器上，然后排出。只是这功率的问题——
另外说以下贝壳积累下的经验数据，经验而已，大家指正。下面的室温都是25度上下。
硬盘，Hitachi的。经常性非工作温度为38度上下，全力工作温度为44度上下。根据贝壳经验，建议温度不要超过45度(台式硬盘在这个温度挺了几年没事)。按照这个计算，机器大规模使用硬盘的环境最高温度为25度。
CPU，AMD Turion64 MK-36。经常性非工作温度为45度上下，全力工作温度为65度上下。根据贝壳读到的数据，建议不要超过70度。加装散热器后温度低了5度。按照这个计算，机器大规模使用CPU的环境最高温度为35度以下。
手感温度，按照室温25度衡量，无热感为20-30度，30度以上有热感，40度以上温暖，50度以上开始烫手，60度差不多就无法留手了。</description>
    </item>
    
    <item>
      <title>Linux下设备可靠性控制</title>
      <link>//blog.shell909090.org/blog/archives/402/</link>
      <pubDate>Thu, 16 Aug 2007 19:27:04 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/402/</guid>
      <description>上篇文章中提到了一个问题，CPU温度。关于这个问题，就涉及了另外一个问题。Linux下如何获得设备可靠性参数，例如电压，功率，温度，风扇转速，SMART等等。至于获得后要如何做的问题，这还轮不到我关心，相信大家都会使用各种用法。
首先是最主要的组件，lm-sensors包。安装后有一个叫做sensors-detect的程序，运行一下。这个程序会检测你有什么性能控制设备，并且提示你加载相应的驱动模块。在完成加载后(不加载驱动的话就无法查看)，使用sensors查看各个传感器的各个数据。通常有CPU温度和电压等等。贝壳使用的是xfce4，因此还需要一个xfce4-sensors-plugin包。安装后可以在控制面板中添加一个applet，用于检查当前温度。
而后，是硬盘的温度。贝壳不知道是否所有的硬盘都支持温度控制，不过目前本本上的这个Hitachi
HTS541612J9SA00支持硬盘温度测量。贝壳实验过，真的会变化。安装hddtemp包，而后以root身份运行hddtemp就可以了。如果要获得干净的文本，可以使用hddtemp [dev] | cut -d: -f3来取得。唯一可惜的就是这个程序必须以root运行，因而无法运用在applet上进行即时检测。
最后，是SMART信息。包是smartmontools，可以检测硬盘的SMART状态。
基本就上面这些了。</description>
    </item>
    
    <item>
      <title>散热器和扩展坞</title>
      <link>//blog.shell909090.org/blog/archives/401/</link>
      <pubDate>Tue, 07 Aug 2007 01:04:09 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/401/</guid>
      <description>贝壳的本本烧了一次，大家都知道吧？痛定思痛，贝壳认为，这是给热的——
于是贝壳上网查了下本本的散热状况。不查不知道，一查吓一跳。贝壳本本的出口温度体感大约是40度，内部温度至少是50度。长期这样工作，难怪会烧。最简单的解决方案是垫高本本底部。垫高一厘米后，下层手感倒是没了，但是出口温度基本没有变化。看来需要更强劲的解决方案。
贝壳去中关村淘了一个本本用的散热器，带一个usb hub，85块，便宜的也有70多的。垫在本本下面非常稳当，电源使用usb端口取电，不用变压器，直接用线接在本本上就好。usb的标准电压是5V，初级端口的最高电流是500mA，小型设备的最高电流是100mA，因此一个无源hub可以扩展4个小型设备。这个散热器的功率是0.9W，电流消耗小于180mA，加上一定的hub芯片和中途损耗，还可以在hub端口上连接两个小功率设备。悬点能连接三个，不过总电流就达到了纯480mA以上，稳定性就要掂量着点了。反正加一个鼠标一个U盘还是没啥问题的。三个风扇全开后，出口温度在平时没有升温的感觉，大约是20-30度上下，全功率工作的时候才有温感，大约是30-40度。内部温度不会超过40度。硬盘温度降低到不明显，因为风扇没有正对硬盘，而是对上了硬盘的进风口。硬盘又没有辅助散热片，所以温度自然无法明显降低，大约目前是40度上下吧。
由这个散热产品，贝壳想到了本本的两重化问题。一个是要求小型化便携化，要求可以发挥本本的长处，到处带了跑。一个是要求全面化，要求能够替代台式机，能够个自行更改升级。这是两个违背的要求，一个要求设备少设计紧密，一个要求设备多设计松散。就拿光驱来说吧，带了个光驱到处跑，怎么做到小型化？但是不带光驱，怎么和主机比？打个游戏放个电影都是问题。
解决这个问题的曙光是扩展坞，很多超小型化设计的本本，为了追求超小超薄，经常就牺牲了很多周边设备，包括最关键的usb端口数目。一般小型本本上都只有两个，一个插一个鼠标，这必定要用的吧。另外一个呢？移动硬盘？摄像头？打架了吧？所以很多商家就增加了扩展坞，最常见的主要是IBM的ThinkPad系列扩展坞。但是一般一个扩展坞只能用于某个特定产品，原因是需要专用接口。
我们可以想象一个产品，其接口基于usb/1394系列，作为本本的通用扩展坞。区分出用于13-17寸的几个尺码的型号，附加上不同的配置，就形成了不同的扩展坞。通过usb连接本本，并且提供一些usb接口。无源的时候可以解决基本的散热问题和usb数量不足的问题，有源的时候可以驱动内部的DVD光驱等等，形成完整的工作平台。
我们再具体细化一下产品，假定本本上只有两个usb输出，一个无线网卡，没有PCMCIA扩展，没有光驱，散热一般。那本本应该可以做到很小的地步吧？缺少的东西可以通过扩展坞增加，无源的时候就当一个hub和散热器，也许还可以启动一个有线网卡，一个读卡器，光驱肯定没戏了。加电源的话，为了求简单可以使用本本电源，然后再输出到本本中(等于串联上去)。这样可以附加驱动一个光驱，一对串行/并行接口，一个猫，一个有线网卡，一个读卡器。等等等等，还可以再输出部分的usb接口。电力上由于截取了本本的主电源，因此基本等于无限。数据带宽上说，光驱的典型平均带宽大约在10M/s上下。摄像头的典型带宽消耗大约是5M/s上下，网卡的极限带宽是12.5M/s。鼠标的带宽可以忽略不计，串行并行带宽也不高。一个usb2.0高速的极限速率大约是60M/s，一般最高只能发挥出一半。但是即使如此，全加在一起也照跑不误。问题比较大的就是移动硬盘一类的设备，硬盘的内部典型速率是50M上下，突发速率可以高达100M/s以上(而且以上很多)，如果接入在扩展坞上铁定是占满全部带宽。幸好一般移动硬盘也需要比较大的供电，干脆直接接入本本好了。只是本本的两个USB接口必须使用分离的控制芯片连接到南桥上，否则还是会出现带宽耗尽的现象。
通用扩展坞的缺点是电源限制，虽然可以截取主电源，但是所有设备加起来数十W的功率。如果外电断电就彻底完蛋了，等于突然拔设备。不过这问题单纯主机也有，而且更糟糕，直接关机。但是其优点就非常明显了。首先是分离了常用/非常用设备，从而使得本本轻巧容易携带，放下来又功能强大。其次是设备外置分散开来，散热问题就比较容易解决。(那东西自己主体就是一个散热设备，解决不掉撞豆腐去算了)然而最大的意义却在于，由于分离了周边设备和核心设备，并通过usb通用连接接通。使得本本的外设成为常规设备，具备充分的扩展性和互换性。因此可以充分降低外设的成本，不会出现sony的本本非配sony光驱的问题。也容易进一步挤压本本外设市场的利润空间，从而降低本本的平均价格。
估计这个过程应该从通用(第三方)扩展坞的流行和可定制化开始。在这个过程中，所有精简外设本本的销量会上升，而外设强大的本本销量会下降，从而促使市场完成转变。估计各大本本厂商不大会喜欢这种变化，因此不知道他们会如何对应这个产品。但是可以预期将来这种产品应该会大行其道。</description>
    </item>
    
    <item>
      <title>笔记本电脑维修问题</title>
      <link>//blog.shell909090.org/blog/archives/400/</link>
      <pubDate>Wed, 01 Aug 2007 23:46:36 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/400/</guid>
      <description>最近贝壳碰到一个非常恶心的问题。
大家都知道吧，贝壳的电脑是托Nicole同学从LA带来的，中间过程煞费周折。不过到手之后用起来还不错，感觉物有所值。
但是，最近贝壳碰到一个非常悲惨的事实――电脑烧了――
7月16号晚上，贝壳生日刚刚过一天，晚上贝壳正在看电影――
突然，屏幕上的人呆住了，维持在一个傻傻的样子――
贝壳开始没有在意，刚刚升级过系统，可能是不稳定吧。因此贝壳重启了电脑，然后再次进入系统，可是出现执行异常！
贝壳觉得不大妙了――于是重启进入2.6.18内核，这个比2.6.21稳定很多，贝壳用了很久――照旧执行异常！
再进入windows――根本不行――
再重启――黑了――
从此后，贝壳开机最好的情况就是进入系统选择单――然后不是死机就是花屏。一般情况下根本没有自检――一律黑――
贝壳基本肯定是CPU或者内存问题，于是第二天打给了宏基维护人员。得到答复是，全球联保必须带护照！
这不是和没有一样的条约么？贝壳哪里来的护照？加上贝壳公司着急需要其中的程序，贝壳就按照维护人员的推荐――拆机器了。
幸好，硬盘是好的。挂在一个公司电脑上照样跑。
这时候就要感慨下Linux的彪悍了。windows开始是鼠标键盘不能用，因为只有USB的。后面是网卡不能用。Linux就修改了几处配置，一路畅通无阻。
贝壳这个时候后悔自己的轻率了，虽然贝壳买电脑是没有护照的，不过老妈应该能弄到一个旅美的护照。可是硬盘已经拆下来了――怎么办呢？
算了――明天先让老妈送修看看――如果便宜的就不搞事了。否则让老妈吵吵看，两个月就故障也太过分了。
7月18日，老妈拿去送修了，说是先到蓝岛的一家代理，因为近。
过不了两个小时，老妈超级气愤的打电话回来，说那里要这要那的，一点诚意都没有。然后准备去中关村的总部碰碰运气。贝壳心想，这次可能要上备用方案了。
不过还是没有用上，中关村那边爽快的收下了，压根没有提证件，也没有说拆下笔记本硬盘的问题。就说检查是否是人为故障，如果是还需要付钱。电池先拆下自行带回，省得说他们换电池说不清楚。老妈乘机投诉蓝岛那里的代理，被告知原来其实也很繁琐的，不过最近简化了。蓝岛那里是代理，因此很多事情不敢作主，所以啥都要。
过了两天，贝壳打电话过去问，据说是主板坏了。和贝壳预期的一样，反正就在主板内存CPU之一了。问多少时间修好，回答说不好说了。因为是国外发行产品，需要从国外调货，如果没有货还需要付费升级。贝壳不由腹诽宏基总部的白痴，这电脑型号也不是太老，怎么会没有全球备货呢？不过腹诽归腹诽，事情还是要处理的。贝壳着急要硬盘中的数据，所以问是否可以先把硬盘要回来。对方态度很好的，说你提前打电话通知预约就可以拿。
7月25的上午，贝壳的老妈又跑了一次中关村那里的总部，顺利的将硬盘先取了回来。没鱼虾也好，至少可以顺利的升级系统和收发邮件，工作不至于耽搁。不过贝壳要求北京总部这里在修好后写明修理内容和时间，需要的话回头找宏基总部算帐去。
7月26日的上午，总算通知修理好了，虽然很高兴，不过心里却有点被耍的不爽。昨天我才刚刚去拿硬盘，今天就修好？算了算了，至少比再过两天好。最后的单子上写的是CPU损坏，不知道怎么回事情。
总体来说，北京这里的服务还是非常不错的，办事人员都很通情达理。不过最好不要去蓝岛的代理那里，太麻烦了，而且还可能有服务质量问题。总部的管理很难说是否有瑕疵，不过修理时间的公示是两天，实际却已经一周以上了。虽然事出有因，但是网上压根不用写那种疯狂的公示。送修最短一天，最多两周，都尚在可以接受的范围内的。</description>
    </item>
    
    <item>
      <title>北京出差4</title>
      <link>//blog.shell909090.org/blog/archives/399/</link>
      <pubDate>Tue, 31 Jul 2007 03:47:10 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/399/</guid>
      <description>上面的提示――要是不知道大束是谁的――记得高中在我辞典上“蛆”这页留名字的那位么？
至于为啥这么长时间没有更新——贝壳的电脑坏了。下面会有篇专门的blog来说这个事情。不过还有一个更重要的原因，很多人没义气阿～～～～
15号是贝壳的生日，相信很多人都不知道吧。
实质上，贝壳的生日只有父母，还有两个同事一起吃了顿。主要原因是——很多人都不来——(没义气阿～～～)
一周过后的周末，贝壳到顺义请这帮人吃了顿。说是一帮，其实主要就是付蕾和柳江陵，周颖出现了一瞬间，还意外的来了一个韩静。剩下的——全在北京城里陪GFBF回不来了。韩静据说在通讯设备公司做，好像被辐射荼毒的很严重的样子。柳江陵交了一个小男朋友。付蕾还是老样子。其余就——没了——
下下周的周末，贝壳再找人——还算被粘在BFGF的身边——这不是刺激贝壳么？出差N久啦～～～～
这就是最近贝壳的生活——无聊阿——</description>
    </item>
    
    <item>
      <title>北京出差3</title>
      <link>//blog.shell909090.org/blog/archives/398/</link>
      <pubDate>Wed, 18 Jul 2007 00:09:35 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/398/</guid>
      <description>7月6号，本来大束约了贝壳吃晚饭。到了当天，来电话，晚饭改咖啡。好，贝壳提前请假。再过几小时，来电话，咖啡也没时间了。尽管她人就在协和医院，离贝壳只有一条街。但是按照本人的期望，当天一下午她要跑遍半个北京城。
不过聊表欣慰的，当天下午她找朋友接她回去。偏巧这个朋友要经过机场，所以贝壳可以搭一个顺风车，要搭车的记得4点半到鼓楼。贝壳听了当然高兴阿，不过还是要假仙一下的。
阿——方便么？
方便阿——你也认识阿——我们高中的——王茵阿——
哦~~~~~~(王茵？哪个王茵？)
到了下午，贝壳准备走了。经理突然叫住贝壳，临时有事。虽说请假了，但是这种情况下又不能丢下句“我赶火车”就跑。所以贝壳还是老老实实的坐下来解决事情。解决了就心急火燎的往宿舍跑——要迟到咯——
等贝壳到了鼓楼附近，已经迟到了。正到处张望呢，正好看到一个小店里面探出个脑袋来，歪着脖子看我，贝壳也歪脖子看回去。一看之下，顿时乐了。这么多年了——贝壳胖多咯——她倒是没啥变化。(想当年贝壳也是很瘦的——阿～～～～～)
进店一看，人家在买PSP。天阿——贝壳还买不起呢——问下来是弟弟刚考上大学，看样子考的不错。那是当然要奖励一下咯——大束在前面试机器，贝壳就在后面乘凉。正闲闲没事干，从外面进来个人，看着好像是高中同学——就是忘记啥名字了——
大束转身回来介绍——NND，这位就是王茵同学——靠——(以上仅为本人独白——讲出来是要被扁的——)
今天正好是王茵送一个朋友去机场，顺便回老家，再顺便送大束会怀柔，再顺便中的顺便带贝壳到机场。好卑微渺小的动机阿——到了机场就是贝壳地头了，本来说人家送过来，多少是个人情。那就送人家朋友上飞机吧。偏偏那位同志提早了三个钟头到机场，还无法领登机牌呢，那贝壳也就无奈了。
7月8号，贝壳到怀柔找大束玩去了——毕竟人家送过来——多少要谢谢吧，再加上大束又说怀柔虹鳟不错。于是贝壳就跑过去了。途中两次路过牛栏山道口，感觉怀念阿。不知道这次还有没有机会去。虹鳟确实不错，不过最后贝壳还是没有付钱成。于是承诺，下次到上海请客。
上海？她下次啥时候去阿？算了——碰到再请客呗——</description>
    </item>
    
    <item>
      <title>北京出差2</title>
      <link>//blog.shell909090.org/blog/archives/397/</link>
      <pubDate>Mon, 16 Jul 2007 18:06:39 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/397/</guid>
      <description>北京这里的工作写出来没啥意思，所以工作相关部分我全部跳过了。因为内容不足，日记的记录数也不是严格按照日期来的，往往会几天的记一起。不过贝壳都会注明日期的，不会让大家看了头晕的。
跳过周三的初来乍到，周四就联系上一堆朋友，其中猫同学当天就说有时间聚聚。不过因为当天下班都比较晚，去哪里就成了问题。最后看下来我下班比她到家早，那就是我去她那里。正好，反正交通也可以报销。所以贝壳就无知的跳上了一辆出租，还跟师傅指点说什么什么地方，就是哪里哪里往哪里去。然后贝壳就准备着在猫同学到家前打车到。结果世界的真相是，在猫同学到家后半个小时，贝壳同学还堵塞在车阵中动弹不得。而且更憋气的是，师傅说怎么怎么走快。我说那你怎么不走呢？师傅说你不是说怎么怎么走么？我说那是我说什么地方的阿，不是让你照着走阿——天阿——这个——
见面的时候，发现猫同学胖了很多。估计不是有了，那就是天天好吃好睡造成的。(希望她看到后不会凌迟我致死)。在迟到了N分钟和上次没有尽地主之谊的罪过下(具体请看以前blog)，贝壳被迫答应请客这顿饭，虽然我开始也没准备让她付钱。吃个西餐讲求还真多，这个那个的。贝壳虽然不是没有吃过，不过和专业人士(某人是公共关系专家哦)比还是差很多。贝壳点西餐从来是一个饮料加一个主餐，不够再一个主餐，吃不了换一个成前菜。总之就是怎么够用怎么来。这次看了某人的讲究，果然专业，证据就是结帐的时候，赫然就是70(贝壳一日伙食报销的极限)。
总之当天的饭吃爽了，贝壳就回去了。</description>
    </item>
    
    <item>
      <title>北京出差1</title>
      <link>//blog.shell909090.org/blog/archives/396/</link>
      <pubDate>Fri, 13 Jul 2007 01:23:05 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/396/</guid>
      <description>当真是一月一出差，准过大姨妈，我正自疑惑7月有什么差使的时候，接到上级通知，居然是出差北京。妈的，这么多年住下来，居然有朝一日要出差到家门口了。以前要是有人告诉我会出差到北京来，估计要笑掉大牙。谁想这厢真的应验了，不知道啥心情。
周二晚上的夕发朝至火车，上车前还有点事情要完成。已经答应了Nicole补办手机卡，还要给一个手镯。既然提前约好了，总不方便随便爽约吧。正好火车走的晚，干脆背着行李去请客，请客完了上火车。就带着Nicole去了上次阿丁带去的火锅，贝壳在此郑重向大家推荐南京东路东边地铁口对面的傣妹火锅，价格便宜量又足。Nicole同学很满意。
上了火车，车是软卧。仅仅分上下层，非常好，不比飞机差(当然也不比飞机便宜，快500了)。和我一个车厢的是一家人老小到北京玩，小女孩才3年级，古灵精怪非常可爱。看着这一家老小就好像看到自己多年前的样子，不过转眼都已经独自回老家出差了。不知道这个小女孩以后会不会到北京念书，找一个北京工作，然后出差出回上海去。如果将来你有天看到我这个blog，想起多年前看到的叔叔(这个年纪已经被叫做叔叔了——我哭——)，不妨当作历史的宿命吧。
到站从火车站出来，我到有点无所适从了。如果是飞机场，估计下来先回家拿东西休息休息，总不会学大禹过门而不入吧(今天说这个，有人回答，大禹肯定比你瘦。偶的神阿～～)。火车站的话，离我要去的金宝街太近了。打车没一个愿意去的，集体拒载。不过这个也不能难为人家了。等了一早上，交钱排队，难道就做10块生意？算了，问人吧。我又创了个记录，在自己地盘上问路，而且是问很近的路。
坐车到了金宝街，远远就能看到大厦的牌子。火车快的出乎意料，我才8点就已经到了公司，而9点才正式上班。算是我运气不错，走到里面刚好来的最早的阿姨来上班了。人家很热情的请我进去喝水坐坐(不过现在想起来好像没问我要身份证明哎——)。然后过一会就陆续有人来上班了。上来一个人问我是怎么回事情，我说我上海来出差的，火车到太早了，休息一下。对方就很热情的说请你吃早餐好了。贝壳感动，还是好人多阿～～～～
对方自我介绍是北京人事部的。我说笑说我也北京的阿，家住机场的。她吓一跳，说人事部另外一个人也是机场的，有机会见见。
正式上班了，人事部的大姐找人领我去宿舍。就在刚刚下车的朝阳门南小街和金宝街的交道口，10层的一栋普通房间。两室一厅，普普通通。两张双人床两张沙发，看来最多能住6个人，住宿满能省每天上千的标准呢。里面有热水空调洗衣机电冰箱，貌似生活没啥问题了。唯一可惜的就是只有一个ADSL
Modem，没有路由器，所以上网要抢的。
回公司，领导带我熟悉环境的时候，碰到一个同事。刚见面就问，你是不是来过北京出差阿，我好像见过你。我说您我也眼熟阿，不过我这是头次来北京出差，绝对不会记错。然后心说记得绝对清楚，比珍珠还真。过一会路过人事部的时候，发现原来这个人是人事部的。想起刚刚人事部的大姐说过，人事部的另外一个同事也是住机场的。立时脸色就变了，进去问问。果然，住机场的，估计以前在街上碰到过。哎——都叫什么事情阿——</description>
    </item>
    
    <item>
      <title>Linux下的模拟器</title>
      <link>//blog.shell909090.org/blog/archives/395/</link>
      <pubDate>Wed, 27 Jun 2007 18:25:39 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/395/</guid>
      <description>模拟器是一个很模糊的概念，究竟什么是模拟器？这个问题可能对于诸多玩友并不困难，但是对于程序员却是很难界定。什么是模拟器，bochs算吗？wine算吗？POSIX子系统算吗？OS/360算吗？
下面所定义的模拟器是至少具备以下几个特征的。
1.模拟目标机的CPU。按照这个特征，wine就被剔除出模拟器的范畴。这种东西其实最好规划在模拟子系统中(虚拟机)，这类软件是以本地CPU真实运行为基础特征的。如果这样被算入模拟器，那Windows算不算？
2.模拟目标机的硬件响应。这个特性其实说了和没说一样的。
限于贝壳接触的限制，目前我们的目标系统仅仅涵盖以下几种机器。GB/GBA NES/SNES(FC/SFC) NeoGeo MD 街机
PS。这几种机器相信应该没有人不知道吧。其中FC就是中国风靡一时的红白机。
我们来看看对应的模拟器。注意以下全是Linux系统下的模拟器，FreeBSD之类的需要进一步测试。
gngb
只能用于GB，GBA无法模拟。
gnuboy
和gngb看不出什么区别。
Visual Boy advance
至少从名字上知道能模拟GBA，不过我没有用，下面会说原因。
fceu
FC模拟器，非常好用的东西，有Windows版。除了吞食天地2外还没有模拟不出来的东西(贝壳语：为什么是我喜欢的吞食天地啊～～～)。不过贝壳一样没用，下面有原因。
mednafen
万能的救世主，最全能的模拟器(Linux下)。支持GB/GBA NES NeoGeo涵盖除了MD外的大多数系统，开源而且方便好用，具备Win32版本。不过吞食天地2一样模拟不出来。(贝壳：为什么～～～)
mopher
严格来说这不是Linux模拟器，而是WinCE的。不过鉴于一样是偏门系统，贝壳就顺便介绍以下好了，是GB/GBA
NES/SNES MD的全能模拟器。
dgen
唯一的，也是最好的MD模拟器，可惜在AMD64系统上运行不大正常。
mame
就是Windows下超强模拟器mame的Linux版本，唯一能够模拟街机的模拟器。发布版本超多，支持Windows,
Mac, Linux, Xbox(贝壳：?!), CE(贝壳：??!!),
Nokia9210(贝壳：???!!!)。简直是模拟器族啊——！
pcsx
PS模拟器，其实是PS2啦。支持Windows, Linux,
DreamCast(表问贝壳最后一个是啥东东)。如果你没有超级强劲的CPU就想都别想。
X GL SDL问题
这三者都是图形界面接口。一般来说，Xv是2D最快的，GL是3D最快的。所以能用X的不用SDL，能用SDL的不用GL，跑3D没的商量。
建议大家安装一个mednafen的X版本，一个mame的X版本。不是AMD64的装一个dgen，CPU够劲的装一个pcsx。基本上面的机器都能模拟了</description>
    </item>
    
    <item>
      <title>鸣谢</title>
      <link>//blog.shell909090.org/blog/archives/394/</link>
      <pubDate>Mon, 18 Jun 2007 21:47:55 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/394/</guid>
      <description>如果是明星获奖后的那种鸣谢的话，我想谢谢自己的父母，谢谢老师们，谢谢所有帮助过我的人们——谢谢你们——
不过好像有点无聊，所以，我还是准备鸣谢这次的对象。一个叫做Krzysztof Burghaedt的可爱家伙，虽然他估计根本看不懂这篇文章。
具体原文请看Install and using Debian GNU/Linux on Acer Aspire 5102WLMi
贝壳最近买的机器是Acer Aspire 5100，这么说大家也许能明白几分。贝壳自行驱动了大部分的设备，除了几个比较妖怪的问题。
一个是USB线路连接手机问题，事后证明A1200不在保用之列。
一个是MMC驱动问题，遗憾，现在还没有解决。
最后一个是声卡问题，音量不能调节。
贝壳曾经问过很多人，还在gg上疯狂找了几天。最后在此人的homepage上找到了正确答案(之所以说正确是因为有人曾经告诉贝壳，需要删除alsa1.0.13，使用1.0.14。当然，结果是无用的)。
首先删除/var/lib/alsa/asound.state，而后重新加载驱动。
#rmmod snd_hda_intel #modprobe snd_hda_intel 而后就可以正常使用了。
所有有类似设备，发现alsamixer: function snd_mixer_load failed: Invalid argument错误的朋友们可以试试。</description>
    </item>
    
    <item>
      <title>论P2P构架的变革</title>
      <link>//blog.shell909090.org/blog/archives/393/</link>
      <pubDate>Fri, 15 Jun 2007 01:56:38 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/393/</guid>
      <description>目前P2P正在蓬勃发展，不过其中也有很多问题。本文试图列举目前P2P所碰到的最大几个问题，并分析成因和解决方法，最后提出一种P2P传输方式。
P2P传输目前所碰到的几大问题有，传输数据不可控，及其衍生出的版权控制问题，广告控制问题，病毒控制问题。传输速度和传输持续性的冲突。“吸血”、“限速”和“卡种”。搜索的敏感性和代价。传输过程的保密和安全性。
首先讨论最大的一类问题，传输数据不可控，又称为无障碍特性。所谓传输数据不可控，是指所有通过P2P共享传输的数据都无法被某个人标记和阻止。Http的网页内容很容易被封锁掉，而ED/BT的数据可就封不住了。基于这个特点，很多人都用P2P来下载XXX内容。不过相对来说有利有弊，这同样造成了病毒，色情，暴力的泛滥。而且衍生了另外一个相当巨大的问题，版权问题。
上文可知，单个个体是无法对P2P内容的传输构成干扰的，此处的个体不单单指个人，还包括了企业实体等等。相对的全体则是指所有个体的集合。其实从某种意义上说，上面一句根本就是说，P2P传输内容不受干扰。那么我们可以想见，如果是一般传媒，个人利益受到侵害的时候个人是无力的，企业利益收到侵害的时候企业是财大气粗的。但是P2P这里，企业和个人一样无力了。因此P2P就成了很多企业的眼中钉肉中刺，而保护版权，就是他们最好的理由。其实从某种意义上来说，传统媒体就没有版权的问题吗？P2P传播方式就一定带来版权问题吗？
而更进一步来说，我们面对着自由传播和反自由传播的斗争。前者认为人类的知识财富应当为人类所共有，前人的知识应当能让后人学习。而后者则认为人类的知识应当保密，以便能带给创造知识的人利益。前者为黑客时代的精神核心，目前的开源软件基金即继承了此种思想。其中哪种更好确实难说，没有学习就没有进步，可是没有利益谁去学习呢？
OK，言归正传，当前我们面对着版权保护上的困难。从根本上说，我们应当考虑的是如何才能在新情况下重新分配利益，而不是如何阻拦技术的进步以保护旧有的利益格局。尽力争取将其价值内在体现而不是外在化，更直接的说就是尽力使得公开技术本身就能获得收益，而不是拿去卖钱。例如将内容公开，而且从感兴趣的人中收集潜在客户，或者是在内容中引导宣传等等。此时P2P的无障碍特性不但不是缺陷，反而是优势。
而后，P2P的传输速度和传输持续性的矛盾。其实严格来说这并不是矛盾，P2P越热，传输速度就越快。但是一个东西的热度总是有限的，因此就P2P应当牺牲持续提供下载的能力来保持传输速度，还是牺牲传输速度来保证持续下载的能力。P2P分成了两类，ED阵营和BT阵营。本质上说没有什么问题，要保证又有持续下载性又有速度是很困难的。因此这个问题是一个内在的矛盾。
再而后，“吸血”、“限速”和“卡种”的问题，这也是P2P最为内在和难以解决的一个问题。所谓吸血，是ED术语。指仅仅从别人那里下载，而不为别人提供上传的人。在BT中就是减小上传，下了就跑。限速是P2P术语，指限制上传和下载速度。卡种则是BT术语。指当上传到99.9%的时候停止发布，使得大量的人维持在99.9%无法完成下载的方法。实践证明短期的卡种可以“强迫”下了就跑的人持续“做种”上传，使得整体速度提升。但是时间长一点就会打击某些下载积极分子的积极性，导致跑种，浪费带宽。在ED中，使用收益上传者来解决此类问题。
本质上，这个问题是源于P2P的核心思想的。P2P认为，我为人人，人人为我。但是有人的带宽要收费，有人懒得为别人做贡献，怎么办？于是吸血骡等等软件和方法就应运而生。下载的时候凶猛，上传的时候不给。于是整体的速度就被吸血骡拖慢了，所有人的下载也越来越困难。为了对应吸血骡和下了就跑的人，人们开发了收益上传者系统和卡种方法，不过都是治标不治本。技术无论如何进步，都解决不了人自身的贪婪。
至于限速，则是一个两说的话题，有人认为限速拖慢了整体网速，有人认为限速无妨。其实应当这么说，如果一个人限速的时候同时限制了上传和下载速度，那么无所谓。如果上传限速一点点，下载限速非常高，或者根本不限速。那么只能说RPWT了。
搜索的敏感性和代价，这个问题不是一个完整的P2P上的问题。可以说，这个问题牵涉了互联网的本质，即信息的收集和获得。作为P2P来说，在信息的敏感性和代价上具有特殊的特点。
最简单情况下，数据被集中到核心服务器上，搜索者驱动核心服务器来做搜索。当数据量增大后，核心服务器就无法支撑了。于是这时候出现了集群服务器，即以一组服务器替代一个服务器。按照读写发生的频率，又可以分为多对等服务器和多分离服务器两大类型。多对等服务器将每个服务器视为具备相同的数据，查询操作可以在和单服务器同等的时间内完成，但是更新和修改操作就必须花费原来时间的N倍，同时数据存储成本是单服务器的N倍。而多分离服务器则认为每个服务器负担一部分数据，更新和修改操作的时间比单服务器略长，模糊查询操作则需要付出原先N倍的代价，数据存储成本则和单服务器一致。前者可以看做是RAID0的变形，后者则是RAID1的变形。当前主流产品都具有多负载冗余的能力，基本就是RAID5的变形。
在更复杂的情况下，例如互联网的数据索引，当前的服务器根本无法支撑。于是就产生一个基础想法，分布式数据库。分布式数据库又可以称为网格数据库。和分布式数据库本质的区别在于，无协调状况下可以自适应的分布数据，并且完成数据的冗余工作。简单来说，理想状态下一个机器加入或者离开网格的影响只体现在性能上。
听上去很好，不过实际还有很多问题。例如ED中使用的Kadimila协议就是一种分布数据库系统，具体请看前面的一篇文章。Kadimila的最大弱点在于无法模糊搜索。通俗的说，一般搜索引擎，“国家体制”搜索的出的东西，“国家”的搜索结果中一定也有。虽然不一定靠前，能让你一次看到。然而，Kadimila协议中，“国家体制”搜索的出的东西，“国家”基本就出不来了。这是因为需要通过关键字来计算HashNum，然后查找索引了数据的计算机。关键字变了，索引也变了，因此结果就不一样了。
这是一个关键而难解决的问题，问题的关键则在于“必须根据关键字做出索引”上。如果没有关键字索引和根据索引查找机器，那么查询就会在所有机器上实行。从而带来非常大的开销。而通过关键字索引的话，目前没有一种算法能够获得一个上下文所有的关键字。因此我们只能将内容和可能最大的几个关键字关联，最终导致搜索不全。
最后就是传输过程的保密性和安全性，这是一个密码学上的双重意义的概念。保密就是传输的内容不会为第三者所知道，安全性则是传输的内容不会为第三者篡改。当然，在这里还要加入一个不会为第三者阻拦。
P2P的客户端大部分数据都来自其他客户端，由此，其他客户端可以巧妙的构
造传输内容，使得客户</description>
    </item>
    
    <item>
      <title>忙忙忙</title>
      <link>//blog.shell909090.org/blog/archives/392/</link>
      <pubDate>Tue, 12 Jun 2007 21:19:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/392/</guid>
      <description>最近贝壳的生活不知道怎么回事情，弄的非常忙碌疲惫不堪一团糟。这日子怎么说的？
先是从西安回来，公司很体贴的帮贝壳订了飞机票。其实本来说不行的，不过火车没有卧铺了，飞机票又打折。总不能让贝壳坐回来不是？
贝壳周一晚上到的上海，周二正常上班。然后下午，亲耐的PAL和Nicole同时约时间。天啊，为啥要来都一起来啊？最后约定一起到四川北路吃饭。结果快晚上了，Nicole改地方了，到楼下，说犯时差想睡觉了。俄的神啊，赶快和PAL取消约定，然后查怎么去Nicole家楼下。说是海伦路下来坐145，结果证实了没去过的地方不要乱相信搜索引擎的保证。贝壳兜了半天才发现，原来海宁路旁边就是周家嘴路。站着还傻傻的问，周家嘴路在哪里？My God——不想活了。
周二很正常的拿了电脑(至少相对正常，其中细节我就不说了)，周三PAL同学不干了，非要我出来玩通宵。好好好——我放鸽子在先，怎么也要舍命陪君子不是？
周三通宵好，周四接到Nicole同学的消息，说有朋友周五下午到，要自己去接，最好我能陪去。贝壳想想，人家跑上海来人生地不熟(好像有点不对——)，机场接人是一个很耗费体力精力的活，最好还要熟悉各种路线，熟悉机场的情况。最重要的，就是最好要有车。贝壳除了最后一个没有外，基本都还行。所以就答应下来，问主管请假。
主管很上路的说，他考核工作量的，什么什么事情做好就好了。当然当晚还至少要装装样子加个班，就可以算贝壳调休了。贝壳心说这不错的，拿了事情就去加班。结果贝壳忘记了一件事情，昨天才刚刚通宵哎！加班做好事情，贝壳周五早上半早上起不来。
起不来归起不来，该做的事情还是要做的。好容易请假一天，贝壳就顺便去证券公司开户吧。平时都不能开户的说，什么时候有好机会就抢进去捞一把出来。结果证券公司人山人海，开户就开了半天。中午请Nicole吃了麻辣烫，下午去太平洋三期和沃尔玛买东西，时间紧张跟打仗一样，然后准备乘磁悬浮去机场。
结果在要上磁悬浮的时候，查了一下落地时间，延迟了快两个钟头，所以我们突然就没事干了。没办法，就干脆慢慢搭车去机场好了。到最后Nicole还是没有享受到磁悬浮。到了机场还是早，吃了次麦当劳，然后提前了点时间到接机口等人。毕竟国际航班过来手机不能用，语言不通。要是我们接出岔子，那有人就就要喊救命，我们要吃不了兜着走了。
贝壳等了一个半钟头，总算体会了一把接人的痛苦，我们亲耐的国际友人才缓缓的出现。而且有意思的是，她走的是直行通道。接机的都知道，国际出口总共两个。一个接人的，一个直行。如果你没有人接机，非常熟悉这个城市，可以从直行口直接出去。否则要绕啊绕的，让接机的找到你。结果她从直行口出去，自己找到了我们。我们还在那里望穿秋水等啊等。
出来后打了个车到租的地方，这也是贝壳最后的事情。租房子是贝壳经手的，总要把事情办妥当。结果机场出来的出租车司机暴走，在路上狂飚，把我们亲耐的国际友人吓了个半死。贝壳录了录像，回头大家自己看。最后还停错位置，转弯转错了。最可气的是贝壳其实认出来了，不过以为是自己认错了，毕竟贝壳还是比较相信司机的。最后又打了个车，走了400米就到了。要不是箱子的问题，贝壳真的想走过去的。
晚上接好人，贝壳的手机就不断响。最后到家的时候，总算被敲定为周六加班。周六贝壳到了公司，居然电梯不能用。贝壳身体已经受不了了有点小感冒，这时候还要爬11楼，真TMD酷刑啊。其实这还没有完，看下去还有更残酷的事情。
周日贝壳继续出去跑，买一个合适的电脑包，然后就是去银行排队。排了快一个小时，总算办妥银证转账，股市的事情基本稳定了。难怪都说银行排队的厉害，现在银行处理流程已经改了很多。大堂一个接待人员变成三个，办公窗口多了一个，可排队时间有增无减。
周一，贝壳上班，发现电梯又坏了，所有人堵楼下上不来。贝壳等了近10分钟才电梯上来。关于这个贝壳也录了录像，回头大家自己看吧。租办公室的千万记得，不要租中山北路2899号中关村科技大厦。物业太烂了。
现在数数贝壳这周的事情吧。周二丁丁同学据说要请我吃火锅，谁付钱相信大家清楚。周六是哥哥的婚礼，周日老师要我去闵行开会。天啊，天啊，贝壳不活了。</description>
    </item>
    
    <item>
      <title>西安出差4</title>
      <link>//blog.shell909090.org/blog/archives/391/</link>
      <pubDate>Mon, 11 Jun 2007 23:38:07 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/391/</guid>
      <description>贝壳今天的行程是西安交大，大唐芙蓉园，还有大雁塔。
早上起来，贝壳草草吃过了早饭，上了辆公交去西安交大。西安交大闻名已久，可惜一直没有机会来西安。毕竟这里是燕子的学校，Stella的老家，还有一堆老师也是这里出来的。
来到北门，首先看到的就是标志性的校门。西安交大的校门还真是简单多了，比起上海交大的校门的话。上海交大闵行校区有三个主门，就是俗称的拖鞋门，凯旋门和庙门。都是什么和什么啊。校内风景不错，绿化和南师范有的拼，完全不像是西北地区的学校。这点上上海交大的有关部门应该集体跳楼，因为我曾经评价过，上海交大根本就TM是个广场。
在校内漫步，看着周围的建筑，有着奇怪的感觉。不知道哪个是燕子以前曾经住过的，哪个是Stella童年曾经玩过的。沿着整个学校的中轴线，走到四大发明广场。这个广场位于学校的中间，北边就是钱学森图书馆。广场上放着四个奇怪的雕塑，象征四大发明，不过贝壳只能看懂那个勺子，其余实在搞不懂一堆方块线条和四大发明有什么联系。
从南门走出学校，门口有一堆出租车。叫了一辆车去大唐芙蓉园，我们的客户说里面有点意思。贝壳进去后才发现，这根本就和世纪公园差不多，属于城市主题型公园。不同的是一个主题是现代化，一个主题是古代文明。里面有很多很有意思的景点，可惜都是人造的，就全跳过不表了。其中有个紫云殿，是整个公园的主殿，南有山北有水，很不错的地形。可惜山南水北为阳，山北水南为阴。地方出于阴地，朝向又是向北，与传统建筑的布局朝向大相径庭。
大唐芙蓉园出来不远就是大雁塔，西游记的起始点就在于此。不过注意了，是玄奘回长安后才修建的大慈恩寺，而不是先有大慈恩寺才去取经的。塔是四面砖木结构，曾经翻修，现有七层，取意“救人一命，胜造七级浮屠”。塔的方向正对南北，位于古长安城的东南方。现在是西安的标志建筑，佛学胜地，国家AAAA级文物保护单位。登塔眺望，长安历历在目。塔下的石碑上还有很多古代的题文，可见其珍贵之处。
大雁塔北广场上有一个非常大的喷泉广场，建议带小人与女子去的，不管是孩子，女朋友，还是老婆，都要一人多带一件衣服。因为以上几种人基本一半以上都冲进了广场乱跑，孩子的感冒概率，女朋友的走光概率都高达一半以上。诸位男士不可不防啊。不过喷泉还是非常好看的，贝壳很满意。</description>
    </item>
    
    <item>
      <title>西安出差3</title>
      <link>//blog.shell909090.org/blog/archives/390/</link>
      <pubDate>Fri, 08 Jun 2007 22:00:46 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/390/</guid>
      <description>贝壳今天彻底无事，所以就出远门去兵马俑。兵马俑号称世界第八大奇迹，在距离西安40公里的地方。贝壳早就听闻，到没有想到自己还能去看看。
先乘车到了火车站，然后换乘旅游线路。车票很便宜，7块。车行一个小时，到了兵马俑的门口。贝壳买票进门，发现里面一堆导游。本来贝壳没打算找个导游的，开玩笑，自己就是专看前秦历史的，还能差到哪里去？不过后来一个导游上来拉贝壳，告诉我路线错了，根据规定要按照路线绕的。贝壳顿时汗——然后导游小姐说导游一次三十，贝壳想想，还是请一个吧。毕竟通熟历史也未必能明白现实。
后来贝壳发现请的还真是值得，兵马俑一号坑的前部是复制品，不知道的就傻傻的当真品了呢。后面的才是真品，相比起来颜色更加深一些，也可以隐约看到碎裂修复的花纹。据导游小姐说，一号坑的后面部分和二号坑都尚未开挖。因为秦俑和唐三彩不同，是烧制后上色，因此相对容易掉色。一号坑的文物出土时是带颜色的，可是三天不到就全掉了。从这个意义上说，我们又给子孙造了孽，可是这事情恐怕是无法避免的。不出土怎么知道情况呢？希望国家能以此为戒，小心处理秦皇陵的问题。毕竟天下之大，秦皇陵也只有一个。要是一个处理不好，恐怕就是遗臭万年了。
兵马俑位于秦皇陵的东侧，寓意守卫秦皇陵，抵御来自东方的敌人。东方哪里来的敌人？齐楚燕韩赵魏秦，其余六个不都在东方？因此兵马俑也面向东方，整体呈混合编组阵列。中军为车马，前锋为弩兵和轻装步兵。左右军为重装步兵。后军没开挖，贝壳没看到。整体排列很类似马其顿方阵，可惜贝壳确定绝对不是。马其顿方针的最前方是盾牌兵，后面用剑和矛，最后是密集的步兵阵列。意在以密集的步兵阵列产生强大的冲击力。而兵马俑的布局太稀疏了，也太狭窄。估计是用于混合兵种作战的，简称混战。其中混杂了少量的骑兵，估计是作为冲锋力量和斥候用的。秦在征战时，当时正处于战国末年，黑铁兵器正在取代青铜兵器。秦国拥有良好的黑铁矿，因此估计在兵器上没少占便宜。当时的骑兵理论还没有彻底发展起来，尤其是铁器刚刚普及，更不可能有条件发明重装骑兵理论。因此秦国的马只能作为乘的形式来使用，即拉车，让车上的人把车作为移动城堡来作战。单人骑兵估计也就是轻骑兵，战斗力十分有限，但是作为情报工具和联络工具是必不可少的。
二号坑没有发掘，跳过。三号坑是一个小的坑道，估计是作战指挥部。右室是军帐，也就是会议室。地上青砖尚在，都是2000多年前的东西。导游小姐说也就是陕西这东西还留的下来，换做南方绝对不行。想想也是，南方潮湿，青砖都是泥土低温烧制，要是放在湿润的地方2000多年早变成泥了。左边是祭祀室，古人曾经说，国之大事，在戎与祀。孙子兵法也说过，庙算多者得胜多。虽然那个庙算的算指的是谋划，不过也说明了作战指挥和祭祀的关系。
在此稍微说一下秦皇陵的布局。秦皇陵布局十分特殊，与其他陵墓布局全不相同。首先，秦皇陵是坐南朝北，这大大违反了常识。因为中国地处北半球，因此日光都从南方辐射。住宅为了能够采光，也多是坐北朝南。坟墓作为阴宅，一般也符合这个规律。秦皇陵的南边是蓝田，产美玉，东边产黄金，北边是渭水。秦皇陵是基于特殊的风水环境修建的，因此违反了这个常规。其次，中国历代帝王宫殿，都是中正对称的布局。而秦皇陵则是不完全对称，中间修的不是大道而是隔墙。估计是汉代前的宫殿特色。
兵马俑出来，导游小姐说有个朋友在山上开车，30块能拉着到秦皇陵，地宫，华清池等等地方。贝壳算算也不错，干脆就上了他的车。上去一看，私家车，算了，反正旅游是个人事情，也不去报销了。车上贝壳问司机认识不认识哪里卖玉的，贝壳在看兵马俑的时候才发现秦皇陵北边竟然是赫赫有名的蓝田。蓝田玉位居中国四大名玉，过而不入未免可惜。
蓝田出产的玉器分为数种，江花玉，缠丝玉，木纹玉，墨玉，芙蓉玉。江花玉是玉石中层的玉，基本以绿色为主。要点是以绿为尊，越绿越通透则越好。号称会根据人的身体情况而变化，身体好的戴了通透，身体差的戴了污浊。墨玉则是更下面的，由于透入了铁元素，因此颜色呈现深黑色。好的墨玉要晶莹通透，通体乌黑发亮，对光看则又是通透的绿色。缠丝玉是晶莹的玉石里面带上各种丝纹，其名贵之处就在于一刀开。大块的缠丝玉石被一刀开成一对一样的镯子，丝纹配对，独一无二。珍贵处想必不用多说了吧？芙蓉玉则是唐明皇松杨贵妃的定情信物。颜色是粉红色的天然玉石，里面有冰晶状的颗粒。一般来说，玉石都是丝状絮状的，翠才是颗粒状的，这个倒应该是例外。
贝壳买了一件江花玉的手镯，绿色带一点黑。一对缠丝玉的，可惜是边角料开了配对的，因此倒是便宜。总共花了800多，好贵啊。
司机帮我拉到华清池，人说华清池水洗凝脂，其实华清池根本不是某个特定池子，而是一片园林。其中杨贵妃的海棠池至今仍在，池底全用墨玉雕刻成。当然时至今日，经过千年的时光摧残，已经完全看不出当年富丽堂皇的模样了。而旁边则是环园，据说是慈禧太后协光绪幼帝西逃时的行宫，也是赫赫有名的双十二事变的发生地。至今墙上还留有当时的弹孔，而骊山的半山腰上还有一个兵谏亭，是当时蒋介石出逃藏匿最后被捉的地方。
最后导游带着去了旁边的一个小玉器店，贝壳这下被坑大了。进去后，贝壳居然看到了墨玉，而且很便宜。贝壳当场就买了一个手镯和一个挂坠，还心说刚才的店太黑。等回去仔细看后才发现，玉是真的墨玉，只是品级不高。不够晶莹透亮，而且镯子也不够大。虽然180不贵，但是确实是冲动购物了。
刚刚发现一件恐怖的事情，根据贝壳的计算，贝壳到西安后自负费用已经达到了1707。其中吃住各种费用189，门票用了290，买玉买掉了1228。</description>
    </item>
    
    <item>
      <title>西安出差2</title>
      <link>//blog.shell909090.org/blog/archives/389/</link>
      <pubDate>Mon, 04 Jun 2007 17:20:57 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/389/</guid>
      <description>今天早上睡不着，习惯了8点准时起床。早上起来，和对方约好了下午去碰头。那一上午就没事干了，闲着也是闲着，干脆去游西安。
从气象宾馆走出来，沿着未央街南行，走不远就是安远门。西安是按照汉长安城的布局建的。长安地处关中平原，地势平坦，因此路修的横平竖直。平原上人工建城后发展的城市多数如此，例如北京。一般古代大城池分为内外城，例如北京的城墙和紫禁城。内城是防止外城破城后作为后备抵抗用的，一般驻扎军队和行政机构。外城则多数为商业和平民居住。外国的很多城市也在城心留有城堡，是同样的考量。例如法国著名的巴士底监狱。最少的内外城四个方向各一个门，因此古代城池至少是八个门。北京的门就不说了，城墙拆除后就剩下地名，建国门永定门都不是随便叫的。南京的城墙和城门都在，可惜不分内外城，也不是横平竖直的布局。这倒是地形所限，无可奈何。金陵在古代的布防和平原城池大不相同，就其地理位置而言，布防的重点在于隔江而守。西安现在的市中心在长安旧址的内城中，留存了数个城门。安远门安定门长乐门，哦对了，最后一个应该是唐朝的名称。大唐的国都也在长安阿。城市的中心古代遗址已经荡然无存，但是还剩余了一座钟楼一座鼓楼给人探听。哎，比北京好啊，中轴线上的建筑都破坏，还留下点什么呢？
贝壳沿着中轴线继续走，就去参观位于西安市中心的钟鼓楼。古人说晨钟暮鼓，意思是早上敲钟，告诉全城人，起床了。晚上打鼓告诉全城人，收工了。在没有计时装置的古代，称得上是政府的闹钟。里面的东西看看很有意思，可惜多数是明清的东西。要看清朝的东西还不如去故宫呢。有一个有意思的事情，贝壳知道很多出来展览的东西都是复制品。这次在钟楼看到的景云钟，贝壳虽然估计是假的，但是居然在背后看到西安某馆藏监制，某某合资企业赞助。天那，仿制也有点职业道德好不好。要么就干脆说是复制品。
原先到过长安的人都会赞叹玄武大道，今天当然找不到当年的玄武大道。但是贝壳瞎猜猜玄武大道的位置，应当在现在的北二环路不到，玄武路附近。一者是当今有个路就名叫玄武路，想必不是白叫得吧。再者玄武属水，位在北，色黑，应于冬。如果以五行来命名，玄武大道应当是在北方的某条路。而玄武路正好又在北方。最后是北环城二路遗留下来的一条河。这河横平竖直，猜测应当是古护城河遗址。按此推算距离，应该差不多。也难怪人说唐时长安足有当前的九个这么大。按照贝壳的推算，西安的城市化区域大致相当于上海的浦东新区加闵行区，工商业水平则尚有不如。如果按照这个反推，当时长安可就是和当前上海差不多大的城市，确实相当惊人阿。不过也不用惊奇，现在的上海高楼一堆，人口密度极大，因此才算得上是世界五大超级城市之一。换成汉长安城怎么也不可能建一堆高层建筑吧。</description>
    </item>
    
    <item>
      <title>西安出差1</title>
      <link>//blog.shell909090.org/blog/archives/388/</link>
      <pubDate>Sat, 02 Jun 2007 22:34:39 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/388/</guid>
      <description>以前肖想来西安好久了，本来燕子还在这里，不过毕业了就回北京了。Stella同学的故乡也在这里，不过她现在在美国。所以，在没有任何人在的日子里，我来了。一个人拜访千年的古迹，也顺便解决单位的问题。
二月广东，三月烟台，四月广东，五月西安。TMD，贝壳心想，你们每个月都要让我出去转转啊，简直比大姨妈还准时。中间还插了一个贝壳自己去的南京，现在贝壳是满中国乱转啊。这次是周三，贝壳正美滋滋的算计，明天新手机就要到货了，到时候。别到时候了，主管叫住我，说西安有个事情，要立刻马上现在就过去。于是，贝壳的生活又陷入惨不忍睹中。当天下午知道的事情，当场安排所有事情，然后隔天就飞了西安。先是坐磁悬浮，然后飞机。贝壳花了3个小时就到了西安。跟大家说明一下情况，这里的天气干燥，风沙很大，每天记得多喝水。贝壳已经两次口干舌燥了，而且都是没讲多少话。
人说西安是千年古城，当真不假。在南京的时候我听人家提到是六朝古都，当场就笑出来。六朝古都不假，可是算算年头。西安远在秦汉时期就建城，而且还是国都，和顺义在汉朝屯兵因而名叫狐奴这种挂羊头卖狗肉的建城完全不是一个档次的。当然，从某种意义上讲，河南郑州那种殷商古都更老，可惜现在都是农田了。山东倒也是圣人之地，可惜在烟台啥也没看上。
当天到了后，和人家碰了个头就出去吃东西了。吃的是人家介绍的肉夹馍和凉皮，那叫一个好吃。可惜吃多了也有问题，连续两天吃下来，总算明白燕子当时为啥那么咯应肉夹馍了。是个餐馆就拿它当主食，再美味也得受不了阿。还有，这里的物价超级低，贝壳满大街吃小吃，都是没有发票的店。看看价钱我也不好意思要，吃的撑死了，也就10块。我还敢要么？
当天下午分析了下对方的需求，然后就看电影不表。贝壳当天晚上11点去了公司，12点就解决了问题。程序届(其实是某些特殊的圈子)管这种当天解决的叫做0day，贝壳做了这么多年，居然碰上一个。</description>
    </item>
    
    <item>
      <title>千里送鹅毛</title>
      <link>//blog.shell909090.org/blog/archives/387/</link>
      <pubDate>Mon, 21 May 2007 18:36:57 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/387/</guid>
      <description>前段时间去南京玩，回来的游记上说留个念头的事情，最近听到回复了。大家看到上篇Blog的回复了吧？意料之中，虽然有点遗憾。
事情是这样的，lilium同学说要招待我玩南京已久，可惜贝壳一直没有机会去。这次好容易去南京了，伊却拍拍屁股回家了。玩了半天不能不留个念头，于是贝壳在lilium的学校进门左手第一个电话亭外面的一个电话的左面挡板外侧下面的一个小缝隙里面，放了贝壳去年去广州时候的机票。
lilium同学回学校，找了半天没找着——</description>
    </item>
    
    <item>
      <title>DPI计算原理</title>
      <link>//blog.shell909090.org/blog/archives/386/</link>
      <pubDate>Thu, 17 May 2007 19:06:15 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/386/</guid>
      <description>DPI这东西大家不陌生吧，经常和像素啥的绞到一起。下面说说具体计算方法。
DPI是Dot Per Inch的缩写，每英寸点阵。常用的还有PPI，Pixel Per
Inch。同时，每英寸合25.4毫米。以此我们能算出19寸屏幕和17寸屏幕在1024*768下的DPI。
1024Pixel/(19Inch*0.8)=67.36PPI。所以要乘0.8是因为19寸是对角线尺寸，长宽比4:3，勾三股四弦五。
1024Pixel/(17Inch*0.8)=75.29PPI。同样分辩率，大小小了，DPI就高了。
我们由此可以看出，普通的显示器，我们按照72DPI计算的时候。所产生的像素密度刚刚好使得整幅图像在屏幕上按照原始的尺寸显示。呃，至少大致是这样啦。</description>
    </item>
    
    <item>
      <title>什么客户都是存在的</title>
      <link>//blog.shell909090.org/blog/archives/385/</link>
      <pubDate>Mon, 14 May 2007 17:22:07 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/385/</guid>
      <description>一次，贝壳中午在休息，突然客户打电话过来说问题。贝壳不好挂电话，可是游戏打到一半(贝壳公司中午允许打游戏，老板更是此中高手&amp;hellip;&amp;hellip;汗&amp;hellip;&amp;hellip;)实在头痛。干脆问题记下来，说我们下午看看帮你解决。结果下午我们解决问题的时候，客户连续打电话7次。虽说次次都是有原因的，不过催这么着急——
另外一次，我们的某客户投诉贝壳的一个软件有问题，贝壳大为紧张。这软件问题不断，贝壳受不了，问题很严重。我们问，什么问题，客户回答什么什么——然后——我们赫然发现——该客户不识字——
我们在说明书中大字标题写着，我们的程序依赖几个其他程序。该客户一个都没装，就用贝壳写的东西。然后和贝壳报错——
切，啥BT客户都素存在的——</description>
    </item>
    
    <item>
      <title>字符编码概论</title>
      <link>//blog.shell909090.org/blog/archives/384/</link>
      <pubDate>Fri, 11 May 2007 17:11:31 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/384/</guid>
      <description>首先，阐明几个基本概念。字符集，编码方案，编码范围，编码方法，编码位数，兼容性，编码兼容性。
字符集是指一系列符号的集合。计算机中只能处理数字，因此符号必须给予编码，而后储存符号编码。打印时按照编码索引到符号，再索引到字体。因此一个字符集编码为数字的方案就是编码方案。其中西文编码规范就是ASCII(ISO-8859-1)。
编码范围是指字符集的有效符号编码的范围。例如当前的ASCII编码范围是0-127，因此所有兼容ASCII的编码，其编码范围必定要回避0-127，否则就会出现编码冲突。而编码方法(不等同于编码方案)则是这个数字转换为计算机内数据的方法，一般分big endian(大端点)和little endian(小端点)两种。
big endian和little endian是CPU处理多字节数的不同方式。例如“汉”字的Unicode编码是6C49。那么写到文件里时，究竟是将6C写在前面，还是将49写在前面？如果将6C写在前面，就是big endian。还是将49写在前面，就是little endian。“endian”这个词出自《格列佛游记》。小人国的内战就源于吃鸡蛋时是究竟从大头(Big-Endian)敲开还是从小头(Little-Endian)敲开，由此曾发生过六次叛乱，其中一个皇帝送了命，另一个丢了王位。
当然，编码方法还有其他情况，例如UTF-8就也是一种编码方法，叫做非等长编码。非等长编码在安全性，扩充性和兼容性上优于等长编码，但是使用起来效率非常差。不信的可以用windows中的_mbsdec函数看看，除了当前指针，还需要起始指针进行逆遍历，效率可想而知。
在大端点和小端点的情况下，存储一个符号所需要用的位数叫做编码位数。位数分为固定位数和浮动位数。又因为编码位数一般都为8的整数倍，因此一般都使用编码字节数来代替。
兼容是指一个字符集的文字在另外一个字符集中全部存在。所以，A字符集兼容B，一般B字符集不兼容A，否则两者就相同了。编码兼容性是指一个字符集的文字在另外一个字符集中全部存在，并且同一文字表示的编码一致。可以想见，编码兼容的字符集本身一定兼容。
其次，GB3212, GBK, GB18030, BIG5, CNS11643, CJK, Unicode, UCS-2, UTF-8的区别。
简体中文来说，基本是GB系列的大陆地区简体中文国家标准，全部都是向下编码兼容的(附注：存在部分的兼容错误)。有GB3212, GBK, GB18030三个标准。编码方案都是兼容小端点序。(GB18030有变长编码)
1980年制定的GB2312是国家早期的字符编码规范。一共收录了7445个字符，范围是0xA1A1 - 0xFEFE。现在意义基本等同于国家最小字符编码集。支持中文的产品最小要支持所有GB2312字符的显示。
1995年制定的汉字扩展规范GBK1.0，简称GBK。收录了21886个符号，范围是0x8140 - 0xFEFE。现在多数电脑的字符集都是这个，向下编码兼容GB2312标准。
2000年的GB18030是取代GBK1.0的正式国家标准，该标准收录了27484个汉字，同时还收录了藏文、蒙文、维吾尔文等主要的少数民族文字。编码是变长的，其二字节部分与GBK兼容；四字节部分是扩充的字形、字位，其编码范围是首字节0x81-0xfe、二字节0x30-0x39、三字节0x81-0xfe、四字节0x30-0x39。向下编码兼容GBK1.0，当前使用中，GB18030和GBK的区别一般人无法区分(也没有多少人碰的上这种字)，所以一般GBK就通用指代了GB系列中比较复杂的那种编码。
繁体中文来说，有BIG5, CNS11643, HKSCS三种。贝壳实际应用比较少，下面可能存在错误，请大家指正。
BIG5是在CCCII不為政府單位採納，國家頒布的中文標準碼又不堪用的情況下。在1984年，由台北市電腦公會主導，聯合了十三家業者，
共同制定，并在2003年进行了修订(Big5-2003)，旨在提供一个小型基本字符集以便对当前的繁体中文字符进行编码。Big5-2003是Big5的扩展，仅有2个平面，包含13051个繁体中文字符和778个符号，共13829个字符。编码范围是0xA140 - 0xF9FE, 0xA1A1 - 0xF9FE。对于熟悉电脑的人来说，都知道Big5是繁体字的事实标准。
CNS11643在1992年制定，并在2004年进行了修订(称为CNS11643-2004)，旨在提供足够的字符编码以便对所有当前的繁体中文字符进行编码。CNS11643-2004是CNS11643的扩展，可以有 80 个编码平面。该标准支持： 8836 x 80 = 706,880 个编码点。原来的CNS11643标准仅有16个编码平面。在平面4以及平面12到15中，包含了台湾地区政府允许的所有法定人名用繁体中文字符。CNS11643直接取用了Big5的大部分编码，因此不考虑几个特例的情况下(准确的说，是两个)，CNS11643编码兼容了Big5。
香港增补字符集(HKSCS)原来叫做政府通用字库(GCCS)，分两个编码方案。其中Big5版是香港政府为big5加的3049个字，因此也可以说HKSCS编码兼容了BIg5。ISO 10646方案是香港政府在给Big5添加符号后向ISO标准委员会提交了申请的结果，和Big5的版本互相兼容，只是编码方案(不是编码方法)不一致而已。
再附加一点说明，一般我们说的编码转换，就是在Big5和GB2312间转换。鉴于繁体和简体文字的非严格对应性，转换可能存在误差。至于最大字符集组GB18030和CNS11643间的完美转换——还是等世界和平吧。
下面说明Unicode家族，根据网络上的介绍，原来Unicode联盟和ISO标准组织都要对整个人类的符号进行编码工作(背景音乐：数星星啊数星星～××)，后来两者联合，这事就成了(it was so，玩笑玩笑)。大家知道，中国文件和东南亚各国间互相交流，因此字符重复者甚众。其中CJK是原来中国(包括香港、台湾地区)与朝鲜、韩国、日本联合制定的三国文字集合，现在已经被收入Unicode中。Unicode是一个单纯的编码方案，不过编码方法就相对复杂了，分为UCS-2，UCS-4，UTF-8等等。
UCS-2和UCS-4是等长编码方法，简单来说就是U+65535以内的可以编码入UCS-2，以上就需要使用UCS-4了(目前这个范围还没有启用)。UCS-2总共有65535个编码点，又叫做UCS-4的BMP区域。本质上是使用大端点或者小端点编码方法直接编码，可以在字符串开始的地方加入FF FE或者FE FF加以判别。优点是将所有字符熔於一个体系，没有编码冲突问题，因此可以在一个容器内引用多国文字(例如在同一句话中引用简体和繁体中文)，效率非常高，但是有个致命缺点，不兼容ASCII。
为了解决这个问题，我们一般使用Unicode的时候，使用它的UTF-8编码方法。这个编码方法是非等长的，其中多数汉字需要使用三字节来存储。如果您看到有什么中文变成乱码后长度增加了一半的，那多数就是UTF-8编码。对于ASCII，UTF-8就是一字节码，于是就完整的兼容了ASCII。对于UCS-4中可能出现的最大编码来说，这时候就需要六字节来描述一个符号。因此可以想见，将来UTF-8是一定要灭亡的。
Reference:
[1].谈谈Unicode编码 http://www.windsn.com/article/viewmore.asp?id=227
[2].中文编码基础知识介绍 http://www.eygle.com/digest/2007/01/zhs16gbk_char.html
[3].The CJK package for LaTeX http://cjk.</description>
    </item>
    
    <item>
      <title>南京游记3</title>
      <link>//blog.shell909090.org/blog/archives/383/</link>
      <pubDate>Wed, 09 May 2007 18:48:32 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/383/</guid>
      <description>第三天，贝壳想想实在无处可去，于是就去了鸡鸣寺。返回来到新街口下面的莱迪转了圈，顺便随便吃了点东西。然后退了房间去玄武湖上乱转，晚饭跑到湖南路随便吃了点，再到一茶一坐坐了半天，打车回的上海。
鸡鸣寺是南京古寺之一，据说历史悠久，好像非常重要。贝壳看来看去看不出啦，不过鸡鸣寺塔的位置真的很好，正坐落在南京闹市旁边。要从高出看南京景色，一个位置是雨花阁，一个就是鸡鸣寺了。雨花阁位置还稍稍差了点，已经坐落在市郊了。鸡鸣寺则正在湖旁，天气好的话能一窥玄武湖全景和南京闹市全景。不过这前提天气好贝壳实在是赶不上了，去了三天就没有碰到过好天气，都是勉勉强强雾雾蒙蒙。不过即使这样，能看到的东西也非常多了。而且旁边就是古城墙，古色古香。看着就想起北京，想起北京就来气——算了算了。湖畔清风吹拂，非常凉快。相比雨花台的票价来说，已经算是廉价享受了。
从鸡鸣寺下来，打车去了莱迪。莱迪看上去就很有颓废的城市情调，其证明就是门口的涂鸦。看下面的架势和lilium的介绍，估计和人民广场下面的商店街差不多。结果重复了人民广场正下方的遭遇——转晕！问了一路总算找到地铁和卖吃的的地方，买了块水晶糕，吃了点鸭血馄饨。感觉是价格公道味道赞，上海和这个没的比啊*_*~~~
中午回去稍微休息了二十分钟，就急冲冲出来退房了。没办法——再呆下去又要多一堆钱，没必要啊。结果下午休息不足，走的腿累死。从玄武门进入玄武湖公园，然后问人家玩水上自行车能不能寄包。结果被人狠狠的鄙视了。人家问我多重，贝壳保守的回答，200，然后——算了算了——*_*`````。不过玄武湖上开游艇项目的人还真多，经常是船放不掉。不像北海，排都不一定排的上。其他也没有啥好玩的，就和去北海差不多，最重要的是风景环境和气氛。毕竟一个城市有山有水有树和没山没水没树差很多的，不信大家去北京和南京玩玩对比一下。
玄武湖上转累了，熬着去湖南路上吃小吃。毕竟这点路打车，司机不说啥我都会不好意思。吃的还是鸭血粉丝，还是很赞。(贝壳今天中午在公司看到点菜单上就有鸭血粉丝，决定做一次小白鼠试试)吃好了开始发愁了，还有两个钟头，贝壳可怎么办呢？没办法，去一茶一坐呆着吧。贝壳去过多次，这次总算是体会了一次彻底的茶文化。尤其是最后的乌龙，好喝啊～～～可惜还没回味够，要赶火车了，下次上海再去吧。
最后是这次去南京玩的总报表，三天往返总计花费1239元。其中住宿436(单人房两天)，来返火车176，所有门票186，一个游艇50，一茶一坐55，其余吃饭买东西总共花销336。如果双人出游，估计一人一天房费150，游艇25，两天往返总费用761，算的上是物美价廉好去处了。下次周末有机会，带上PAL去吧。</description>
    </item>
    
    <item>
      <title>南京游记2</title>
      <link>//blog.shell909090.org/blog/archives/382/</link>
      <pubDate>Tue, 08 May 2007 19:03:21 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/382/</guid>
      <description>从第二天起，贝壳的行程就更贴近一个游客的行程了。头天纯粹是看看南京本地城市风情的，在整个城市里面胡跑，逛逛庙会夜市。贝壳第二天的行程是早上跑到钟山去，中午去湖南路吃饭，下午回旅馆信息，快晚上去雨花台，最后去风波庄吃饭。
钟山在南京的东部，包括三个主要景点，明孝陵，中山陵，灵谷寺，门票总共是130。这里的门票很有意思，套票130，年票120。而且多数公园的年票和门票差不多价格，可见纯粹斩外地游客的。从门口进去，明孝陵的风景很不错啊，整个陵区全是山。其实不光是中山风景区，整个南京市里面都很多树，把整个路面都遮盖起来了，给人一种很舒服的感觉。不像上海的街道，就旁边种点小树苗。陵墓这东西贝壳建议大家有空还是跳过别去看了，尤其是古陵墓，例如十三陵。没啥好看的东西，基本就这样。中山陵到好一些，修的和灵山大佛有的拼。顺着山修了很大的一堆楼梯，把贝壳爬了个够呛。基本游中山陵就是看楼梯，风景和MM去了。孙先生门口排着一堆人等着接见，看看排不动，所以就学大禹过门不入了。不过想想孙先生也够可怜了，人家有给人看了三天三夜给看死的。中山先生被人看了三十年都不止，不知道地下有知的话作何感想。
至于灵谷寺就更不知所谓了，压根没听说过，看看也没啥好看的。但是不买带灵谷寺的套票，中山陵加明孝陵是150。所以——算了算了，当灵谷寺门票是-20好了。
其实头天晚上贝壳就去湖南路吃过鸭血粉丝汤了，就在从夫子庙出来写完blog后。很赞啊，只是回来后主管给发了一个邮件“让我们一起绝食吧”。里面历数了一堆有毒食品，其中赫然就有鸭血，很是把贝壳恶心了一顿。哎——湖南路和上海的南京路一样，都是美食和购物天堂啊。不知道湖南有没有上海路呢——嘿嘿。贝壳上午从钟山出来，顺手打了个车去湖南路，去吃lilium同学推荐的尹氏鸡汁汤包。嘿嘿，lilium同学还真不愧是本地人哦，推荐的东西价格便宜量又足，新鲜好吃有特色。鸡汁汤包真的很好吃，不过最大的好处是够快够便宜。大家可以看看在城隍庙吃蟹粉小笼是啥架势，队伍里三层外三层，排上了还十多块一屉小笼。我在尹氏鸡汁汤包吃一碗鸭血粉丝汤加两屉汤包，17块吃的撑死，幸福死啊～～。
中午回房间休息，顺便再给电池充电。等下午4点不到，贝壳再出门，去雨花台玩。门票不贵，35。进去后贝壳没有直奔纪念碑(事实上到最后也没有去)，而是左转去了旁边的雨花阁，登高而望远——南京能见度真TM低啊～～。转了半天出门去照中华门，再打车去华侨路吃lilum推荐的风波庄。嘿嘿，她这个又推荐对了。进门就是大侠您几位，上楼要当心铁头功(楼梯低矮，小心脑袋)。上菜上个十全大补丸(其实根本就是个鸭蛋肉丸子)，一帮小二忙进忙出，感觉上吃的就是个意思。
这家店的老板绝对是个高手中的高手，贝壳去随便吃了吃，要了17。其实在本地来说已经算贵了，但是贝壳一点不觉得贵，门口的长龙也可以证明这点。没了客源问题，那就是翻台率了。老板的管理好像借鉴了必胜客的方式，排队带客，点菜，服务上菜全部分离。更狠的是，去了根本没有菜单，都是小二帮着点的。先问有没有忌口，喜欢不喜欢吃辣，有没有特别想点的，剩下就是小二自行处理了，不喜欢只要没动筷子小二就帮你换。上菜绝对是先一个十全大补丸，而且号称吃一个增加功力，吃两个走火入魔，吊住胃口让你下次还想来。小二帮你点菜有个特点啊，厨房随便烧，不怕没人要。因此上菜速度特别快，翻台率也特别高。老板那是日进斗金啊。高人，高人。
顺便说一个笑话，贝壳旁边一桌有个小孩。他爸啤酒喝光了，张口叫小二。话没说清楚，那个小孩学他爹，张口叫成了老二——靠～～～～全桌喷菜啊——</description>
    </item>
    
    <item>
      <title>南京游记1</title>
      <link>//blog.shell909090.org/blog/archives/381/</link>
      <pubDate>Fri, 04 May 2007 02:54:08 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/381/</guid>
      <description>贝壳这次总算到了南京，以前据说来过一次，不过都没有印象了。这次本来准备和PAL一起来的，结果她不来。lilium同学也回老家去了，贝壳只有一个人走南京了。
现在贝壳正在一个网吧里面，老实说，贝壳估计这里的系统有病毒，所以回家要修改密码了。来网吧的最主要原因不是写这篇blog，而是贝壳照相机卡暴了，只有倒到U盘里面。今天早上贝壳毫厘之差乘上了火车，一路非常快的跑过来，感觉和乘地铁没有什么不同。不过速度快了很多，南翔用了7分钟，苏州是半小时，够恐怖的。
到了南京，贝壳就先去了宾馆，然后坐车去了鼓楼。走到云南路，但是没有看到传说中的烤鸡翅膀。再跑几步就到了金银街，不过感觉被lilum同学晃点，因为啥都没有看到。然后跑去宁海路看南师，还给lilium同学留了个小念头。详细情况，几天后贝壳会专门撰文说明故事和结果。然后跑去看传说中的南大，感觉也没啥啊，和复旦差不多。不过说实在的，无论是南师，南大，还是复旦，都比交大强多了，尤其闵行校区。如果一个是公元的话，一个就是广场了。
走到走不动，就跑回宾馆喝水充电(不是比喻，贝壳暴了一对电池)，然后打车到了夫子庙。这里感觉和上海的豫园好像，不过秦淮河的商业利用率更高而已，毕竟上海就这点地方。然后呢？当然是跑出来倒胶卷，然后顺手写了这篇blog。今天就到这里了。</description>
    </item>
    
    <item>
      <title>广州出差2</title>
      <link>//blog.shell909090.org/blog/archives/380/</link>
      <pubDate>Sun, 29 Apr 2007 17:04:21 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/380/</guid>
      <description>李胜昊同志在出差第二天总算赶了回来，支援了贝壳2500。贝壳算算总可以了，不过看看他的钱包，空空如也。要不是他自己第三天就要回上海了，恐怕他自己要捉摸下怎么办了。李大师一回来就落实了一个问题，贝壳30号回去。哎，猫同志的晚餐恐怕要到北京请客了。不过李胜昊听说猫在做上海车展，倒是非常感兴趣。我心说你怎么有空去的，不是都要上班吗？也没问那么多，直接把人家电话给了他，让他自己去问去。
这里的宾馆是送早餐的，而且还便宜(相对，相对，在我问过的所有家里面)。早餐不吃白不吃，和李大师跑下去享受了顿早餐，吃的是舒服哦。吃到一半，李大师上去拿行李准备走人，贝壳就把房卡给了他。前脚刚刚走，后脚报社的电话就来追杀。问题是贝壳早餐没吃好不说，没有房卡怎么走人阿。干脆等五分钟，贝壳吃好早餐，李大师拿了东西下来。再去报社。
第三天，贝壳当天的任务上午就弄好了，下午去和黎叔喝茶。也不是贝壳喜欢翘班，这里的报社是24小时追杀的，关键在于上班时间太难捉摸，下面就有介绍。经常是11点多打来，让人精神不自觉想崩溃。不过也不怪他们，看看他们自己的作息也是苦哈哈的。今天他们的主管不在，据说是晚班，要8点多过来。那贝壳下午来了也没有什么意思，干脆还不如去喝茶。
说起黎叔，好久不见到是气色好了很多。听说房子卖了，想必是不再受那房子的荼毒的缘故。喝了两个小时茶，顺便吃了午饭。回宾馆先和公司落实火车票问题再说。李胜昊说30号能走，可票子问题没解决心里总是有点不放心。Rachel说回程不能买飞机票了，贝壳当时心里就不爽。来的时候你们着急，飞机票给我弄过来，弄得我一堆事情留在那里。回去的时候不着急了，就给个火车票，还要我自己订？要是报销上有点啥不爽，下次出差贝壳就想办法死留上海好了。
不爽归不爽，贝壳这次还是要订车票的。下楼一问，30号的没了，只有29的。而且还要150的代理费用，人家要马上冲到火车站去帮贝壳抢，否则交钱了也没有票。贝壳想了想，150的费用好办，财务让我自己去楼下订，想必是认可这费用的。否则不是坑我么？不认可也方便，贝壳身份证给拿去办事了，不在。哪个有本事让我再去哪里出差的？问题是29号回去。贝壳拿人工资帮人做事，事情总不能胡乱来。说30号的，29要走总不合适。可是眼看没办法，贝壳直接打给了李胜昊，回复和对方协商确定。好，有你这句就好办。再打给对方报社，报社领导很大方的说，你可以29号走。谢天谢地，赶快让人家把票抓回来。
后面贝壳的一个朋友过来添乱，说她们组织了去旅游，三男四女不方便，问贝壳要不要去。正好是30号晚上的长途车，去嫠源，三号回来。贝壳盘算着说，要是南京车票可以改一天，那放假就可以旅游两次咯。让外婆赶快去改签去，结果告诉我回程车票没了。贝壳算了算，回程车票是很紧张，那没办法，敏敏姐那里的旅游就对不起了。
晚上估计快8点了，跑到报社没有人，打过去问报社的陈小姐。答复是她也不在报社，让我问蒙主任。蒙主任呢，也没有上班，结果我白白过去，一腔热血白浪费。倒是到了晚上10点多，陈小姐去上班了，一个电话接着一个电话打过来。我心说这堆人都是昼夜颠倒的吗？</description>
    </item>
    
    <item>
      <title>广州出差1</title>
      <link>//blog.shell909090.org/blog/archives/379/</link>
      <pubDate>Sat, 28 Apr 2007 16:18:52 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/379/</guid>
      <description>同志们，同学们，我又到广州出差了。
本来贝壳又是在捉摸最近有空了，要干点啥。最近电信要过来装线路了。猫同志才刚刚来上海参加车展，贝壳刚刚准备请客，打电话过去约明天晚上吃饭。丁丁同志也从北京回来了，说要请我。算着算着，被一个商务背后一拍。
明天去广州，10点的飞机哦。
哦，你去广州阿。
还有你。
阿。
赶快打电话过去给老猫道歉，然后又和PAL还有丁丁打个招呼。然后发个消息给外婆，准备下衣服。给老妈发个消息，问问黎叔在不在广州。再给舅舅打个电话，帮忙看看宽带线路的问题。然后准备了衣服物品，洗澡吃饭准备明天跑路。
第二天，25号，上了飞机，急匆匆地跑到了南方，给客户装东西做演示，好歹算半过不过的搞定了演示。然后对方要看服务器效果，让贝壳配置服务器去。有没有搞错，贝壳素程序员，不是系统管理员。就算是，也是Linux管理员，不管Windows的。不过总算也简单，贝壳在无限电话费的支持下，和在公司的同事通话了大约半小时，总算搞定了所有东西的部署。期间李胜昊非常不仗义的丢下贝壳就跑东莞去了，贝壳只好自力更生。先给Rachle打电话，帮忙订个房间。Rachle说她有事，没办法，自己订。电话一打发现不得了，广州交易会期间，所有房间都是三倍价格，最便宜的是800，我们上次住的那个金桥要1400。吓得贝壳立刻挂了电话给财务打过去，财务说了，能住招待所住招待所，不行找最便宜的宾馆。实在不行了，没办法，全报销，特殊情况特殊处理。好，谢天谢地，这冤枉钱贝壳可不高兴掏，不行还得麻烦黎叔。确定了方针，下去问招待所。结果招待所380，全订满，只有当晚一个晚上还有一个房间。贝壳无奈啊，只有先住一个晚上，第二天再去换宾馆。
第二天贝壳全部解决了报社方面的问题，然后下去拿东西出来换家宾馆。查了查情况，最便宜的也要800，好了好了，800就800。两天预定下来，贝壳的卡又快暴卡了，天啊。</description>
    </item>
    
    <item>
      <title>经典职场X骚扰</title>
      <link>//blog.shell909090.org/blog/archives/378/</link>
      <pubDate>Tue, 24 Apr 2007 18:20:31 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/378/</guid>
      <description>贝壳这里一般开两个共享。一个是program，只读的，放一堆程序。一个是pp，读写的，放数据。这样防毒比较好点。
某日，一个同事要求我传一个文件给他，偏偏邮件服务器坏了。
“我用共享传给你把。”
“好的。”
“已经放到pp里面了。”
“我等等去拿去。”
“好，反正pp里面的东西又掉不出来。”
“嗯，是啊。”
——————沉默的三秒钟——————
爆笑。</description>
    </item>
    
    <item>
      <title>电信的服务原来也是半斤八两</title>
      <link>//blog.shell909090.org/blog/archives/377/</link>
      <pubDate>Mon, 23 Apr 2007 22:41:10 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/377/</guid>
      <description>本来说有线通的服务能让人肺气炸，没有想到电信的服务也是半斤八两。
我们申请的时候，是使用电话预约，确认满足安装条件后可以立刻安装。到移机的时候，就必须去营业厅亲自办理，而且确认满足安装条件后还需要十五天的等待期。估计是有线路先给新装的用。为啥？因为新装机器可以收取一年的费用，移机可只有一个工本费。哦，不是一个工本费，还有一个不可理喻的单独拉线费用。
移机需要缴费可以理解，但是为啥还需要交一次单独拉线费用呢？上次拉的线我还能接着用吗？要不能钱能退我吗？新拉根线要收钱，上跟线又不能继续用，不能继续钱还不退还。这不明摆了坑钱么？
而且ADSL和有线通的机制不一样，ADSL的锁定是在线路上，有线通锁定是在设备上。所以ADSL移机是机组设备端调整配置，而有线通是直接移动设备。ADSL的移机费用肯定跑不掉，有线通的则只要一个拉线工本费。
本想说今年一年用完就不用的。后来想想，有线通限制ED，不能用。ADSL服务太霸道，也不能用。整个一个上海，竟然没有一个能让人满意的宽带服务提供商。也许我们是应该想想垄断行业引入外企竞争的问题了。</description>
    </item>
    
    <item>
      <title>又一次搬家</title>
      <link>//blog.shell909090.org/blog/archives/376/</link>
      <pubDate>Fri, 20 Apr 2007 23:04:17 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/376/</guid>
      <description>继上次搬家后，贝壳又要搬家了。从外婆家附近搬到外婆家隔壁，没多远的地方。
搬家原因是房东房子不借了，估计是要涨价，租给别人了。麻烦外婆张罗，在家隔壁找了一个房子。已经借出去了，不过房客很爽气。等他老婆跑上海来玩结束，分我间小的。2M网通宽带，嘿嘿嘿嘿。
更好玩的是房东，赶人的事后凶巴巴的，说一点商量都没有。等我们快落实了，打电话过来说，要是暂时租不到，可以继续住下去。估计是讲好的租房租不出去了，或者是新房客要晚一点入住。呵呵，我许某虽然不是啥大人物，也犯不上让你一个房东呼来喝去。更何况为了搬家钱都花出去了，这次不搬等下次，再出一次钱？这钱难道你出？
纯粹有病。</description>
    </item>
    
    <item>
      <title>回老家</title>
      <link>//blog.shell909090.org/blog/archives/375/</link>
      <pubDate>Thu, 19 Apr 2007 17:10:22 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/375/</guid>
      <description>贝壳前几天在回家的车上，莫名其妙接受到一个短信。这周末有空吗？有空回来看看。一看署名，老爹。再算日子，清明。想想家人，爷爷走了一年半。应该错不了的，扫墓。
靠，居然碰到传说中的扫墓，又碰到传说中的扫墓大军。贝壳跑到老北站，问去张家港的车。售票员很高兴的回答我，没有了，要到下午3点。有没有搞错？现在才早上9点。门口碰到一个黄牛，问去不去常熟。我去常熟干嘛？有没有张家港的。有部过路的，快客(事后知道鬼个快客)，原价50，你60。我想想蛮合算，10块钱家吃顿午饭的车钱都差不多了，还节约这个？事后证实，票价差不多50。这个黄牛人品不错，服务也不错。下次就选他了。
车晃悠了三个小时，总算到了站。贝壳确认了，快客个头。跳下车就上了轿车，张姐到是很热情，派车来接。后来知道一个更直接的原因，那是人家家门口&amp;hellip;&amp;hellip;到了大姑姑家吃了顿午饭，下午一点的午饭。然后贝壳的老爹(老贝壳？)就琢磨下午没事，去干点啥了。因此我们跑到附近一个公园去玩了一个下午。说是公园么——其实有个很气派的大湖，至少比北海气派多了。而且湖上面有个很有意思的东西，就是那种充足气的大球，把人塞进去在水上跑的那种。贝壳听说过许多次了，看电视看过许多次了，今天总算看到真实表演了。不过贝壳本人还是不准备尝试的。按照贝壳的体重，加上不会游泳，我下去就可以直接送医院了。
当天晚上基本就是一堆亲戚聚会，除了老爹一个上一辈的，有个小孩下一辈的，剩下都是贝壳的兄弟姐妹。哎——贝壳年纪轻轻(画外音：骗谁呢？)就已经当上叔叔了——当天吃的羊肉，确实比上海这里的羊肉好吃多了，至少没有毛！
第二天基本还是走亲戚，中午和昨天差不多的人继续吃饭。被一堆喝到大舌头的人灌酒和拉着手说各种言不及义的话。到现在贝壳还没有弄明白自己到底哪里看的出有悟性了，需要人家送一本列入联合国文化保护名录的书来悟一悟。不过席面上总不能对着长辈说，您老舌头已经大了，要不要喝点茶？还是得笑着说一定一定——天知道这种书拿来贝壳有哪里的美国时间来看。</description>
    </item>
    
    <item>
      <title>两句牢骚</title>
      <link>//blog.shell909090.org/blog/archives/374/</link>
      <pubDate>Wed, 18 Apr 2007 17:13:29 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/374/</guid>
      <description>最近忙死了，过年到现在就逛了一天街，勉强可以算做是休息。虽然这个休息能不能恢复体力和精神大家都猜的到。先是年前去了广州，然后就是过年。过年后就狂改PDFConverter，还给发配到了烟台。虽然烟台没做什么事情，不过好歹也算是出差不是。等回来，事情已经堆成了山。招行卡里面钱没了，必须去取工资了。蒋老师的项目已经要开始推进了。老鼠的网站要推起来了，项目也要交货了。水电费也该交了，还有配电脑，升级机器，买几个小东西。最后老爹还拉我去了老家。林林总总一堆事情，花掉了我出差到现在的所有时间。
先是老鼠的网站，找了一个同事去做。怎么样我也不管了。反正不收钱，只管指导怎么回事，另外拉个皮条。
再是老妹的电脑，具体就看机器的问题吧。回来的头周周末，就基本贡献给了老妹的电脑。当然，我自己也买了一个U盘两条内存，现在居然还有D43的颗粒。靠，运气啊。谁知道当晚U盘就老死机。每听说过吧，U盘也会死机。于是周日我去换了一个，顺便在隔壁的浦发里面把工资转了过去。
然后是蒋老师的项目，跑闵行两次徐汇一次。头一次是下班冲过去，开到地铁没有回来。老师车刚巧坏了，结果蹭的一号线末班车(一号线不愧是主线，运行时间是最长的)，到徐汇换出租。当晚忙了个半死，第二天还要上班。第二次是周末跑徐汇。回来的第二个周末，头天刚刚去逛好街，隔天就要去徐汇开会。一堆本科生该做的事情不是没做就是做错，更夸张的是人一个都不来。让我感慨世风日下，当年我混学分好歹也是跑了N次工厂的。第三次大家都知道了，老师车总算修好出门。结果当真开门红，让人不知道说啥好。前几次坐车就知道老师车技差，这次更加证实而已。不过要是老师继续请你坐车，恐怕还是要大无畏的坐上去的。
再然后就是老爹了。具体请看回老家。这就是我的第三个周末。
然后——还有什么然后，谁再然后我跟谁急。</description>
    </item>
    
    <item>
      <title>买机器的问题</title>
      <link>//blog.shell909090.org/blog/archives/373/</link>
      <pubDate>Tue, 17 Apr 2007 17:18:58 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/373/</guid>
      <description>前几天碰到一个朋友买机器，结果买的不怎么满意。3800+的机器，双核的愣没开双通，预计配置7900的显卡配了7600，EPoX的主板换了精英的。虽然价钱上确实就是这个价钱，但是总体讲性价比就不高了。到我们的一个邻居那里配的机器，看来熟人也不能全信任啊。尤其这个熟人没有权又不懂电脑的时候。
不过想起周岚的电脑恐怕性价比更差，周岚同学兴冲冲喊要买电脑，逼着老爸平了股票去拿钱。结果拿出钱来打我电话，发现我刚刚好去了烟台。等我烟台回来，没错，电脑便宜了300多。不过股票从3块涨到5块，到今天已经是8块了。虽然话不能这么说，不过如果这么计算。这台电脑可理论上价值22000多。算我配的电脑里面最贵的一个。</description>
    </item>
    
    <item>
      <title>地铁再次延误</title>
      <link>//blog.shell909090.org/blog/archives/372/</link>
      <pubDate>Mon, 16 Apr 2007 17:07:11 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/372/</guid>
      <description>2007年4月11日星期二，上午8时40分，在宝山路发生延误。当时我所在的，8时18分自兰村路发车向大木桥路方向的四号线班车延误。延误时间20分钟，至9时整，列车开始启动，9时13分到达曹杨路。
这次连和他们废话都懒了，反正在20分钟内，因为地铁造成延误，公司不罚钱。去值班室要了一个延误证明，外面慢慢买了个煎饼，慢慢走到公司，把东西叫给小罗罗，OK，事情就这样了。</description>
    </item>
    
    <item>
      <title>一次意外</title>
      <link>//blog.shell909090.org/blog/archives/371/</link>
      <pubDate>Thu, 12 Apr 2007 19:28:47 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/371/</guid>
      <description>上周发生一个蛮不幸的事情的，我晚上去参加老师的项目，太晚了，老师开车送我回去。连带车上还有一个老师一个学生，总共四个人，车满当当的。开到一半，斜刺里面突然冲出一个骑自行车的人来。老师刹车了大约1秒，还是撞上去了。车自南向北行驶，人自东向西穿越。南北为主路，双车道，东西为小道。车辆在外车道，过桥后50米左右的一个路口发现行人，向内车道避让。自行车撞到了车的右前灯后倒下，人头撞到右后视镜，倒在右后车轮处，碰撞处大约在外车道中心。路口限速60公里，没有红绿灯，没有人行横道线。
我们几个没有事情，惊魂初定，赶快下车。撞车的是个老头，人躺在地上，看不出情况。地上有口带血的唾沫，口中无溢血，可能是口里受伤了。精神基本正常，意识清醒，本人还准备爬起来，被我们劝躺下了。当时女儿在旁边哭喊，要我们送他父亲去医院。可是老师的车又不能动，叫了救护车不来，干脆弄了个出租过去。另外一位老师跟车走了，我们留在现场等警察。
警察到的比救护车快，看来下次这种时候还是别等救护车吧。初步勘测后，其他东西都照实记录了。只是车后面一个刹车痕迹搞不清楚是不是老师的车的。虽然轮胎痕迹一致，不过也不能认定。刹车痕迹很长，按照这个痕迹判断就是超速了。也幸好这个时候现场没有动，老师的车和刹车痕的方位对不起来。而且我个人觉得，老师的车有ABS系统，是不可能刹出这种痕迹的。警察叫人把老师的车拖走，然后给了个单子，让他了解下对方的情况，然后明天去交警大队。
我们打车去了医院，路上听到个好消息。那个老头检查下来没有什么大事情，只是喝酒了。不过警察说了，骑车喝酒不犯法，所以等于没用。我最后估计老师的车要回厂小出笔血了，对方可能要个医药费就差不多了，最倒霉的是老师的驾照和保险，不知道怎么样。
结论。出了车祸首先看看现场状况，不要着急倒车。否则可能本来没事，退的时候压到人了。再去查看人有事没事，大致看有没有破损外伤，有没有明显骨折，肿胀，积水，出血，还有本人意识是否清醒，瞳孔什么情况，反射什么情况。(再说下去估计看的人要先把我撞了)没事不要随意搬动，但是有事没事赶快送医院，毕竟万一看不出来的事情引发后遗症，赔偿可比医药费贵多了，更何况弄不好一条人命。不肯去要求对方开不肯就医切结书(本人XXX，于XXX时在XXX处被XXX撞到，自觉无碍，无需就医，所引发一切后果由本人承担)，记得找一个三方证人。千万记得车别乱动，保留现场。这次要车动了，估计老师就麻烦大了。
大致就这些吧，不过最关键的还是。安全驾驶。</description>
    </item>
    
    <item>
      <title>中国房产问题的思考</title>
      <link>//blog.shell909090.org/blog/archives/370/</link>
      <pubDate>Tue, 03 Apr 2007 22:25:05 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/370/</guid>
      <description>刚刚看到一个文章，说中国有人不希望房价降下来，是因为房价降下来，房地产商的房子就卖不出去了。那很多人就要破产。我看完就骂句白痴，基础理论就错误了。房子是便宜的时候好卖，还是贵的时候好卖阿？
回答这个问题，我们首先就要了解房子是什么商品。曾经有人说中国的房子属于吉芬商品，说起来也对也不对。说对，是因为中国房市实在的表现出了吉芬效应，即交易量随着价格上涨而上涨。但是出现吉芬效应的不一定是吉芬商品，股市中有的股票是越贵交易量越大，这也是吉芬商品？所谓吉芬商品，是指社会收入不变情况下，基础物资的价格上涨，导致相对收入减少。进一步的导致高等产品的消费减少，而以基础替代。最终导致基础物资的交易上涨。从这点来说，房子很像吉芬商品。问题是替代效应中，关于房子的替代效应就两个，买房和租房，还有挤一下。按照上文分析，我们说如果房价上涨，引发相对收入减少，社会通货膨胀是一定的。相对的替代效应就应当是买房改租房。问题是改租房了，我们对房子的交易就上涨了？至于挤一起就更不用说了。
房子是个特殊的商品，在于无论价格高低，有100个人要房子就有100个房子交易，最多是买和租的差异。所以房子应当是消费强刚性商品，而非吉芬商品。至于房子出现吉芬性，是房子的强刚性造成房市是一个相当容易投机的市场，因为价格高了也不会没人买。因此房价持续走高的时候就会有很多人介入房市，导致实际的价格虚高。相对来说，我们可以想见，房子的生产也应当是强刚性的。因为无论多高的价格，土地都只有这点。所以当我们的供需曲线些微变化的时候，就会产生价格的暴起暴落。
当前中国的土地还是处于相对缺乏状况，尤其是在地区之间不协调，使用状况上不协调。所以暂时价格不会产生暴落的状况。不过我们可以想见，那也就是迟早的事情。</description>
    </item>
    
    <item>
      <title>RTTI的几个应用</title>
      <link>//blog.shell909090.org/blog/archives/369/</link>
      <pubDate>Mon, 02 Apr 2007 23:39:23 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/369/</guid>
      <description>贝壳最近研究了下RTTI，发现几个有意思的事情。
dynamic_cast的应用。
dynamic_cast可以将一个指针的类型试图转换为指定的类型，是否能转换要看当前指针的动态类型是否是指定类型的子类，而不管指针的声明类型。当失败时返回NULL，因此可以用来识别一个指针的动态类型是否是某个类的子类。
typeid的应用。
typeid可以获得某个类的类型信息，最主要的就是name。指明了当前是哪个类，这在串行化中是必要的信息。当判断一个指针的动态类型是否就是某个类的时候可以这样typeid(*p)==typeid(class)。</description>
    </item>
    
    <item>
      <title>烟台出差7</title>
      <link>//blog.shell909090.org/blog/archives/368/</link>
      <pubDate>Mon, 19 Mar 2007 04:55:53 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/368/</guid>
      <description>同志们，我还在烟台。今天已经是第16天了，我基本没做什么事情。
公司说回去已经说了很久了，也不知道什么时候才实现。先不说这个了，我还有两个项目呢。没办法，只有在远程做了。幸好两个项目都已经有眉目了，就是实现起来快慢的问题，值得欣慰值得欣慰。
今天陪我们的秦总去了次海边，上次去的时候他不在。这次感觉真是差别大阿，很多东西都修好了，我们才发现，哦，原来这个东西本来是这个样子的阿。我就在感叹广场变化很大的时候，旁边两个人也在感叹，是阿是啊，好多漂亮MM。我靠。不过这次广场的人真的非常多，很多MM也很PP。只是旁边牵着的GG总让我们想起太上老君牵青牛的情况。看到这里还真感慨没有带PAL出来，不过也就是想想而已，要真带来才是问题吧。秦总跑到广场没感慨海景多么的无敌，倒是感慨起没有带鞋了，否则就去滑直排。当真是，不说什么了。不过别处滑不好时摔倒到地上，这里滑不好可是摔倒到海里的。想想这个，好好考虑考虑吧。
我们看好了海景就直接打车去了购物街。先是去了振华商场。进去后是化妆品，商场基本都这样。然后上面6层全是各种各样衣服，让我们怀疑是否走到了振华衣物专卖。最后终于有鼠标了，一个鼠标要75，还是最便宜的。当我们白痴吗？我们干脆啥都不买了，托现代商业的福，烟台也有沃尔玛，一个鼠标才30。我们顺便解决了解决晚饭，一堆的饼把卖饼的MM弄得手忙脚乱的。
回到旅馆的时候，我们又复现了我们前几天的麻烦，秦总的卡也爆了。这次再换我上，我一次800刷不出来，吓我一跳。干脆刷银行卡，银行卡还有1800的资金。回到饭店检查了一下卡，发现刚刚又缴了保险，还剩下787块。难怪刷不出来。这次我们又没钱了，而且还没有支援。</description>
    </item>
    
    <item>
      <title>烟台出差6</title>
      <link>//blog.shell909090.org/blog/archives/367/</link>
      <pubDate>Sun, 11 Mar 2007 05:02:50 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/367/</guid>
      <description>没有想到，烟台出差的这个系列已经到6了，就是说我至少在烟台住了6天。我的习惯是一天写一个东西，一般不会串。
今天总算不上班了，贝壳习惯了起床，一下到了8点就自动起床了，没有偷懒。中午和同事还有烟台的同事们出去玩去，有本地人带路就是不一样。贝壳今天算是看到漂亮的大海了，相比起来前两天看的那个只算一般而已。具体情况请去看blog吧，不过这个经历想必是比较少见的。因为人烟稀少的大海，再加上好天气和大浪，不住在海边没有这么巧吧。
大的海浪一层层的打上来，基本就看不出海岸线在哪里。据烟台报业的同事说，夏天的时候这里人满为患，非常漂亮。现在却是人烟罕至，几乎没人。前段时间的暴风潮将整个海岸都破坏了，有的棚子的顶棚都飞了。砂子也被吹到了路边，还需要用机械推回去。海风呼呼的吹，非常冷，大约5度上下吧。整个手仿佛泡在冰水中一样，整个都不灵活了，身体也不是很舒服。所以大家知道为什么夏天才人满为患了吧，因为冬天来不时享受的，是来找罪受的。不过这样的环境看上去非常大气，让人感觉非常高兴非常舒服。听着海涛轰轰的响着，海风在身旁吹着，让人感觉这才是大海。
吹完了海风我们一时还没有去的地方了，更离谱的是，本地的同事也找不到地方了。最后找了半天找到地方，去了她学校那里。参观了下鲁东大学，不错的学校，很漂亮。校园比上外大多了，和复旦差不多。至于交大闵行校区这种变态地方——不比也罢。然后跑到学校附近去唱歌，贝壳悲哀的发现自己的嗓子音域本来就不怎么样，感冒好了更小了，几乎难点的歌就不能唱。不过贝壳还是唱出了今天的三个满分，大家别高兴，最后一首歌时韩文的，根本没人会。贝壳最后就说了句，总算结束了，评分居然是100。可见这个所谓评分根本是看人品的，唔，这么说贝壳人品很好咯？
最后我们就近跑到鲁东大学的食堂里面吃包子，嘿嘿，总体上说还是不错的。至少比交大的包子好吃。不过菜就——算了，不说了。</description>
    </item>
    
    <item>
      <title>烟台出差5</title>
      <link>//blog.shell909090.org/blog/archives/366/</link>
      <pubDate>Sat, 10 Mar 2007 06:05:34 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/366/</guid>
      <description>贝壳来了烟台，说怎么也弄点海鲜吃吃阿。否则来烟台不时白来了吗？还有在北京的时候吃羊楔子吃的蛮爽。所以咯，看到楼下有吃羊楔子的，就过去吃了。然后同事看到里面有天鹅蛋，当然要拿来吃咯。在此说明一下，天鹅蛋不是天鹅的蛋，而是一种海产品。大致上和扇贝有点相似。
果然好吃，羊楔子好吃，天鹅蛋更好吃。问题在于吃完了回来后，贝壳当晚吐了一晚，然后隔天狂拉肚子。咳嗽药水还被吃光了，所以继续咳嗽。算上这三者，这次出差贝壳已经是四种毛病了。然后吃什么什么不舒服，睡觉又睡觉不好，当真是难受到死。
中午的时候发生了一个有意思的事情，算是有意思吧。继前几天后，贝壳中午又跑回旅馆，拿出卡，很随意的说，续一天。然后前台一刷卡，告诉我，爆了。啊？爆了？贝壳算了算，才刷了2000多啊，怎么爆了。没办法，到隔壁银行提了1000来交钱。回去怎么也想不通，为啥才2000就爆卡了呢？
贝壳连上网，输入查询密码看看为啥。幸好有查询密码，否则贝壳还不敢查呢。最后发现上个月还有800多的款没有交。问题找到了，贝壳的自动缴款日期是13号。上个月的帐单到13号才自动缴掉，贝壳来之前没有想到要手工缴钱。结果当前还有一笔钱没有缴掉，所以现在就刷不动了。
根据贝壳的计算，最多再几天，贝壳就没钱了，怎么办呢？</description>
    </item>
    
    <item>
      <title>烟台出差4</title>
      <link>//blog.shell909090.org/blog/archives/365/</link>
      <pubDate>Thu, 08 Mar 2007 18:24:15 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/365/</guid>
      <description>先向大家预告一个好消息，因为贝壳可能出差加版回不来，因此，买电脑的，讨论网站的，做项目的，要钱的，要给钱的，先暂缓一个礼拜。
扔板砖的也别着急了，贝壳也是无可奈何花落去。这次出差亏大了，感冒出来不说，还碰到了38年来最大的暴风潮。咳嗽咳得天花板快穿了，嗓子现在还哑着。衣服也带的不够，贝壳今天回去要洗衣服了。卡现在已经刷了1600了，估计再4天就暴卡了。而且最TMD的是事情多不说，出差还不计算加班。
更严重的还在后面，贝壳要是无法及时回去。给老妹配电脑的计划就要延后了，舅舅就会拿酒瓶碎了我。帮人做的网站就要过期了，朋友就要拿机械部件灭了我。老师的项目要严重拖后，老师就要拿口水淹了我。给女朋友的钱就到不了位了，女朋友要拖过去PK了我。问人要钱的就没法要了，这帐要从狗年跨到鼠年不能还我。最夸张的时欠钱的还拼命要还我，可就一直没碰到我。</description>
    </item>
    
    <item>
      <title>烟台出差3</title>
      <link>//blog.shell909090.org/blog/archives/364/</link>
      <pubDate>Tue, 06 Mar 2007 06:26:24 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/364/</guid>
      <description>今天去上工，看到昨天的狂风卷雪，居然卷倒不少广告牌。其中最近一块就在我们昨天走过的位置，要是凑巧的话，贝壳和同事们说不定已经集体住院了。虽然雪还在下，但是却能看到天了。
今天第三天了，风稍稍的小了，阴云渐渐散去。虽然还有风雪，但是大海开始显露出瑰丽的颜色来。我们住的地方就在海边，但是住的低，被房子遮挡住了，看不到海。工作的地方虽然有海，但是刚到时天黑了，后面又见大风雪。在风雪稍住的今天，总算能从高处远远的眺望海了。
海的颜色并看不真切，毕竟离了很远，中间风夹雪还吹不停歇。但是海的壮阔确真实的让我感受到了，具体情况就看我的照片吧。隔了很久，总算能用IE把照片传输上来了。家里的配置太过严格，传输起来着实不容易。</description>
    </item>
    
    <item>
      <title>烟台出差2</title>
      <link>//blog.shell909090.org/blog/archives/363/</link>
      <pubDate>Mon, 05 Mar 2007 04:45:21 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/363/</guid>
      <description>到了烟台才发现这里标准一个小地方，不是说鄙视啥的。我出门和司机说去哪里，司机问我上海冷不冷。我奇怪他怎么知道我上海来的啊，跑这我用的就是一口标准的普通话，加上感冒，要听口音听出来的打死我也不信。最后司机跟我说了，这里机场每天多点下哪里的飞机都算的出来的。贝壳当场无语。
到了宾馆，贝壳发现一个让我差点昏倒的情况。宾馆居然每天打电话来问，先生需要按摩吗？我&amp;hellip;&amp;hellip;然后宾馆里面套套精油一应俱全，我粉怀疑这到底是什么旅馆。
第三天，更汗的事情出现了。贝壳下午跑到对方公司加班，然后出去吃晚饭。发现面外居然在飘东西，马上趴窗口看看。好消息是，没有下雨。坏消息是，下雪了。
这里的雪很恐怖的，倒不是说我没有见过大雪。北京住这么多年大雪还少么？不过这里随着雪下来的是7级大风。出门就是瓷砖，当时站都不能站的。站着就滑，身上大衣兜风，一吹就倒。实在没辙，所有人手拉手冲过瓷砖区。然后到了路上一放手，就硬生生给风吹跑了。不是说风太大，主要是站不稳，一吹就跟着跑了。乱糟糟的跑回宾馆，贝壳在考虑，还要不要去看海呢？</description>
    </item>
    
    <item>
      <title>烟台出差1</title>
      <link>//blog.shell909090.org/blog/archives/362/</link>
      <pubDate>Sun, 04 Mar 2007 23:46:52 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/362/</guid>
      <description>妈的，我现在还在出差中呢。
周五的时候,贝壳正在美滋滋的盘算周末要干点啥.估计要见两个人,其余就可以好好休养下.最近贝壳感冒了,咳嗽的惨不忍睹.突然经理跑过来说,那个谁啊,说马上要你过去.我给你订了下午一点的飞机,没问题吧?于是贝壳的生命骤然坠入了兵荒马乱和惨不忍睹中.
先是要调集笔记本电脑,公司的全调出去了.刚刚好出去的人回来了还在休假,中午回来.于是经理赶快打电话去威胁中午一定要来公司,就算人不到,电脑一定要到.然后贝壳紧急冲回家拿东西.上午10点多知道的情况,11点到家拿东西,11半带了一堆的衣服就冲出去了,12点多点就到了公司.先快速的解决午饭,12点半多,电脑来不及重装就拿着又冲了出去.紧急打车冲向虹桥机场,大约在半小时后,1点多,到了虹桥.
说起来也算幸运,虹桥机场我可熟悉阿,当年在这里被困了12个小时呢.而且还是国航的班机,嘿嘿嘿嘿嘿嘿嘿嘿,熟悉贝壳的人估计也在跟着嘿嘿了.快速冲过去办理手续通关,到Gate的时候已经1点20了,过了5分钟开始登机,刚刚好&amp;hellip;&amp;hellip;
后面的事情更加验证了祸不单行的说法,贝壳的老妹突然电我(长途阿&amp;hellip;&amp;hellip;),问我周末有空吗?准备买新电脑.然后贝壳的老师也电我(长途&amp;hellip;&amp;hellip;),说下周要讨论一些问题.于是继贝壳失去春节后的第一个周末后,第二个周末也报废了,还不知道安排不安排的开.更严重的是,贝壳素病号,感冒还没好.</description>
    </item>
    
    <item>
      <title>感冒了</title>
      <link>//blog.shell909090.org/blog/archives/361/</link>
      <pubDate>Fri, 02 Mar 2007 00:37:45 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/361/</guid>
      <description>妈的，难过死了</description>
    </item>
    
    <item>
      <title>广州出差记</title>
      <link>//blog.shell909090.org/blog/archives/360/</link>
      <pubDate>Mon, 12 Feb 2007 19:05:46 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/360/</guid>
      <description>这次被公司派去广州出差了，又去了次广州。没啥好说的，挑几个有意思的事情写写吧。
公司给订了一个旅馆，我住进去，当然不花我的钱咯。然后累了，换上拖鞋，也是免费的。(拖鞋篮里面有张纸，免费擦鞋——)然后看旁边有烧水的，下面居然还有小冰箱，可乐啤酒一应俱全。哇——不愧是专业的。拿了罐可乐刚刚想开，发现旁边有张纸。《如果您用了小吧台中的饮料，请填写本单，费用会结算到您的房费中。》后面赫然是，可乐10块。
不知道是公司付费还是我付费，干脆放回去了。
后来刘凯知道这事情，说随便喝好了。一个人住宿是300的额度，我们三个才676，平均一人226。没问题，喝。后面又跟了句，回头让李胜昊从外面带一罐回来补上就得了。
我靠——
不过后来发现可乐包装挺特殊，怕补不上。我当时也不渴了，没试试看。
回上海的时候，从对方公司出来，立刻叫车，然后往白云山机场跑。我坐前排右边，车窗开着的。我看风大就没拿相机出来照相。过一个立交桥的时候，发现桥那里有个雕像。两腿叉开，双手插腰，挺有气势的。我心说这年头了这里还有这种雕像，不容易。车开近点看看，好像是个活人哎，而且还是裸的——OGM——绝对是传说中的裸奔——
啊，相机啊相机——来不及了——
过去了——
你看到了吗？
打电话给南方，又有新闻了。
别傻了，人家说不定已经看习惯了，还笑话我们没见过市面。
那怎么办？
你不想学的话就当不存在了。
嗯，都是幻觉，吓不倒我的。</description>
    </item>
    
    <item>
      <title>内存泄露检测简说</title>
      <link>//blog.shell909090.org/blog/archives/359/</link>
      <pubDate>Wed, 07 Feb 2007 22:48:13 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/359/</guid>
      <description>我们首先从一段代码说起。
#define _CRTDBG_MAP_ALLOC #include #include class test { public: test () { lpBuffer = new char[0x1000]; }; \~test () { delete lpBuffer; }; void *operator new (size_t s) { return malloc (s); }; void operator delete (void *pvMem) { if (pvMem != NULL) free (pvMem); }; void *operator new[] (size_t s) { return malloc (s); }; void operator delete[] (void *pvMem) { if (pvMem != NULL) free (pvMem); }; char *lpBuffer; }; test &amp;amp; tt () { static test t; return t; } //test t; void process () { test tf; // _CrtDumpMemoryLeaks (); } int _tmain (int argc, _TCHAR * argv[]) { // test tf; test* tp=new test(); _CrtSetReportMode (_CRT_WARN, _CRTDBG_MODE_FILE); _CrtSetReportFile (_CRT_WARN, _CRTDBG_FILE_STDERR); _CrtSetDbgFlag (_CRTDBG_ALLOC_MEM_DF | _CRTDBG_LEAK_CHECK_DF); process (); // printf(&amp;quot;hello, world.</description>
    </item>
    
    <item>
      <title>CPUID</title>
      <link>//blog.shell909090.org/blog/archives/358/</link>
      <pubDate>Mon, 05 Feb 2007 19:00:16 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/358/</guid>
      <description>近两天研究了下CPUID指令。虽然原本是准备作为加密技术的储备的，不过后来发现作为加密技术实在不可行，倒是平台识别有很大用途。
CPUID指令可以看做一个汇编中的函数，预先设定一个EAX的编号，就可以返回EAX,EBX,ECX,EDX四个数据。根据不同EAX，返回不同的数据。问题在于，对于EAX和返回的约定上，AMD和Intel是完全不同的。其中AMD根本不支持CPU编号特性。
我先给出我所用的函数：
void getCpuID (PDWORD pData, DWORD ID) { __asm { push ebx push ecx push edx push esi mov eax, ID cpuid mov esi, pData mov [esi], eax mov [esi+4], ebx mov [esi+8], ecx mov [esi+12], edx pop esi pop ecx pop ebx pop edx } } 其中pData是一个足够大的数组，ID是入口编号。根据Intel和AMD的约定，0,1,80000001-80000003是共同的。0在EBX,EDX,ECX中返回了厂商标识，例如目前机器上就是AuthenticAMD。(注意，不是顺序存放的，按照我刚刚写的顺序)80000001-80000003在返回中顺序存放了CPU的标识，例如目前机器上是AMD Sempron(tm) Processor 2500+。1在EAX中返回了CPU的系列编号，EDX中返回了特性编号。以上都是标准的返回，可以看出在识别平台的时候很方便。
Intel的CPU在2中存放了配置参数，3中存放了序列编号。而AMD在这两者上都是0。由此大家就知道为什么无法用来作为加密技术了，难道这个程序只能在Intel芯片上跑吗？</description>
    </item>
    
    <item>
      <title>继承类静态对象虚拟化</title>
      <link>//blog.shell909090.org/blog/archives/357/</link>
      <pubDate>Fri, 02 Feb 2007 17:36:35 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/357/</guid>
      <description>其实这个标题不准确，准确的说，应该是继承类拥有自己的基类静态对象。
我们知道，类中的静态对象本质上是全局变量，不过名字在类命名空间里面。如果类B有静态对象S，D继承了B(先按照public继承讨论，其他其实也一样)。那么在D里面访问S的时候，其实是访问的B命名空间里面的静态对象S。验证代码如下：
class B { protected: static int S; }; int B::S = 0; class D:public B { public: void print () { printf (&amp;quot;%dn&amp;quot;, S); }; }; class E:public B { public: static void rewrite () { S = 1; }; }; int _tmain (int argc, _TCHAR * argv[]){ D d; d.print (); E::rewrite (); d.print (); return 0; } 上例中可以看到，两个继承类，其实都是将父类的命名空间导入而已。假定我们要使得每类专有一个静态成员，例如我们要计算每个类的生成对象个数，怎么办呢？
如果不用继承，我们可以在每个类里面加一个静态成员。然后在构造函数中加1，析构中减1。但是如果我们想把这个功能放到基类中，事情就麻烦了。因为所有类从同一个基类派生，我们算出来的其实是所有从基类继承的类的总对象生成个数。
当然，我们可以用实现的方法来做。把所需要的功能抽离出来，放到一个单独的计数类中。然后构造的时候调用加1，析构的时候减1。听起来很蠢，那是因为例子容易的关系。比较复杂的时候，这样抽象相对简单的。计数类可以用于多个类，实现了代码重用。但是仍旧没有解决关键问题，怎么让继承类特化基类的静态对象？(虚拟化和特化的意思差不多，就是针对具体对象使用具体方法)
答案最后被我在More Effective C++中找到了，正确的方法不是寻找一个特化的方法，而是继承不同的基类，使用同一套代码。既然是不同基类，怎么具备同一套代码呢？想到了吧，模版。
template&amp;lt;T&amp;gt; class B { protected: static int S; }; class D:public B&amp;lt;D&amp;gt; { public: void print () { printf (&amp;quot;%dn&amp;quot;, S); }; }; int B&amp;lt;D&amp;gt;::S = 0; class E:public B&amp;lt;E&amp;gt; { public: static void rewrite () { S = 1; }; }; int B&amp;lt;E&amp;gt;::S = 0; int _tmain (int argc, _TCHAR * argv[]) { D d; d.</description>
    </item>
    
    <item>
      <title>轻轨意外延迟的处理过程</title>
      <link>//blog.shell909090.org/blog/archives/356/</link>
      <pubDate>Tue, 30 Jan 2007 17:48:44 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/356/</guid>
      <description>昨天坐轻轨的时候，在海伦路延迟了10分钟，宝山路延迟了4-5分钟，还啥广播都没有。一怒之下干脆打114查询号码，然后打到地铁投诉热线投诉去。当时没说清楚，只说三号线上好像有人跳车，然后答应尽快给出回访结果。
当天下午回访就过来了，仔细的问了延迟的车站和时间(幸好我平时早上的车为了赶点，时间都算过的，而且算的很准)。然后再三道歉，说是车门故障，下次会记得广播。
既然人家都诚心诚意的道歉了，而且单位也知道情况，不算迟到，那么这个事情就这样了吧。</description>
    </item>
    
    <item>
      <title>惊魂记</title>
      <link>//blog.shell909090.org/blog/archives/355/</link>
      <pubDate>Mon, 29 Jan 2007 19:07:01 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/355/</guid>
      <description>大家知道贝壳的财务是通过自己写的程序进行跟踪合计的。以前是excel表单上面加VBA宏，后来移动到了Mysql数据库。因为数据存储量大，运行稳定，使用方便，所以贝壳一直很得意。
昨天贝壳发现自己的财务怎么也算不对，因为单位的工资发到了浦发的卡上，而程序里面是没有浦发的账户的。本质上是由于程序中使用硬编码导致程序对数据库存在非合理依赖(有点专业，听不懂就算了)。所以从理论上说，我需要修改表结构。
于是贝壳就先备份了表结构(悲惨啊，大家后来就知道了)，然后修改了账户的表结构。然后贝壳发现财务表里面没有使用UNIQ限定，于是又对财务表修改了结构。但是无法通过，原因是因为现有数据中有的不符合UNIQ限定。于是贝壳又合并数据，做了半个小时多的操作，好算添加了UNIQ限定。这时候，贝壳送了口气。处于不可告人的怪癖，贝壳运行了自己写的核算程序，上面赫然写着，当前现金，-1034。
不用说，一定是合并数据的时候出现了错误，问题是错误在哪里呢？不知道，贝壳只有删除了UNIQ限定，然后恢复数据——shit，没备份。
开始的时候，贝壳只需要修改表结构，于是就只备份了表结构，数据还是上个月的备份。OMG，怎么办？怎么办？怎么办？
于是贝壳就开始了悲惨的修复经历。
首先我确定合并的数据都是在上个月备份以内的。就是说，这个月新添加的数据都是没有经过合并操作的。于是贝壳导出当前错误的数据，并且从中截取出这个月新的数据，这部分数据一定是正确的。然后和上个月的备份合并到一起，放到新的文件里面导入数据库。运行财务核算程序，OK，当前现金380.89。
贝壳又一次低估了上帝的决心，高高兴兴的删除了临时文件。然后导出新数据，准备关闭程序睡觉去。然而运气的是，贝壳在关闭前看了眼数据。啥？注释是乱码？
财务软件并不使用注释字段，那个是被贝壳用的，所以财务软件不会报错。可是注释乱糟糟，等于一半的功能被砍掉了。贝壳赶快想怎么解决。当前数据和备份都是错误的，上个月的备份还在，可是少一个月数据。就是说贝壳丢失了一个月的数据！
没办法，贝壳紧急安装修复软件。但是超级RP的是，贝壳上次Uninstall了一个东东还没reset(这是贝壳的一个坏习惯，Uninstall了以后不reset，等系统自然需要reset)。FinalData的Installer在Uninstall事件没有完成前不能运行。我靠～～～贝壳顿时怒了——上网找了半天，找到一个免安装绿色修复软件，Recover4all。运行，找到了上次导出的数据。
吃一堑长一智，贝壳先完美的备份了这个文件(包括扔到了U盘上一份)。然后将这个和上月的备份重新合并，切换编码，重新导入——蓝了——
靠——上帝的决心是无止境的——比客户的变态还无止境——当导入超长的时候，居然诱发了XP64的溢出。由用户输入诱发溢出，我还真是伟大。
贝壳重启，重新合并，然后切分成两次，切换编码，分次导入。总算数据正常了。然后运行财务核算程序，也正常。去手工看表，也正常。不过贝壳的几个新修改和半小时的合并工作就作废了。
忙碌两个小时快，总算让数据库恢复到了以前的状态。还真是——
不说啥了——</description>
    </item>
    
    <item>
      <title>基础类</title>
      <link>//blog.shell909090.org/blog/archives/354/</link>
      <pubDate>Fri, 26 Jan 2007 18:28:28 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/354/</guid>
      <description>设计程序的时候，往往觉得怎么这么困难，基础类为什么不多提供些能力。现在风水轮流转，我开始设计基础类了。
站着说话不腰疼，设计基础类才发现基础类这东西真不是人做的。调用上讲究非常多。要返回引用呢？还是值？是需要const呢，还是不能const。返回的时候是一次拷贝构造呢？还是两次。算子需要不需要设计成friend，重复代码能不能消除。着重效率还是安全性，线程安全不安全。这些问题真是活活逼死人啊。
现在正在设计实现一下几个类，有兴趣的可以一起来研究。
LargeInteger 超大整数实现
计算RSA的时候很有用，考虑在内部实现一些有用的算法
Matrix模板类,容器类 矩阵实现
设计的时候就考虑到内部容纳的不一定是数据，也可能是字符串或者超大数
vector2D 两维矢量 专门针对平面计算优化
Line 两维线 专门针对平面计算优化</description>
    </item>
    
    <item>
      <title>关于Java和C&#43;&#43;的一点争论</title>
      <link>//blog.shell909090.org/blog/archives/353/</link>
      <pubDate>Fri, 26 Jan 2007 07:00:15 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/353/</guid>
      <description>不知道为什么，大家好像都喜欢争来争去。关于Java和C++的优劣不知道听了多少。碰巧我两者都会，怎么说也算是公平了吧。我就大着胆子，比较下两者的情况。
对程序而言，速度不是最终要素。否则我们都应该去用汇编不是？一个程序有六个特性，易学，易用，安全，高效，可变，成本低。然而他们一般都是两两冲突的，好学了，就不好用。强大了，就不好学。安全了，自然要执行很多检查，高效了，自然不安全。针对某个平添优化了，可变性就很差，又不能移植，又不好修改。成本低了，自然什么都差。
往往我们写企业应用的时候，都看重可变，低成本，安全，易用。高效呢？企业有钱买大服务器啊，这样的话效率差的不是太多也能接受。易学呢？企业有钱搞推广培训啊，只要有什么功能就加什么功能，不用考虑学不会。写用户应用的时候，则是看重安全，高效，然后易学易用里面要占据一样。可变呢？用户应用有多大？不行重写一个。低成本呢？这就是比较吊诡的事情了，没有啥经济效益的用户程序，往往是写起来最不怕费时最不管经济效益的。
首先从性能角度来说。也许C++程序员说到这里就得意了，不过先别高兴。如果单论速度，汇编语言还在C之上呢。现在网络上很多人讲C优化好了比汇编快，Java优化好了比C快。听听都要笑掉大牙的。C再怎么快，完成同样的步骤，都需要这些汇编代码。Java再怎么快，完成一个动作，底下C代码也不会少的。所谓Java优化好了能快过C，不过是一个Java高手一门心思搞优化，加上碰到一个C语言白痴而已。
我们先不讨论上面问题，就一般Java程序员和C++程序员而言(注意为啥我没说是C程序员，因为能自称纯C程序员的人要么非常精通语言，不会使用C++特性，要么就根本是个白痴)，Java程序员编写出的代码效率比C++大约慢5倍上下。这个数据是我个人写两个程序，一个运算，一个读取处理，对比出来的。都是没有优化的代码。经过极端的优化后，C++的代码我大概提高了4-8倍的速度。可惜我不是个很好的Java程序员，Java代码的速度大概提升了一倍还不足。就是说，最终C++代码比Java快了将近15倍。
但是C++程序员们先别乐，首先我Java语言并不好，这还不是最终的速度比。其次我牺牲了C++的很多特性。运算上几乎就是在写汇编了，接口都直接用了WIN32SDKAPI。没有移植性，没有可维护性，还需要特殊的技巧，怎么想都是牺牲重大。如果要真的这么追求速度，相信汇编会是更好的选择。我们在速度相差5倍左右的情况下就可以使用C++而不用汇编，为什么不能在速度相差5倍的情况下选择Java呢？
然后我们再看性能的另外一个方面，存储管理。说简单点，就是外围设备吞吐管理和内存管理。这方面上C++也是远远超越了Java。不需要的内存就不要，不必须的吞吐就不吐。C++是门培养人的语言，没有很好的功底是无法驾驭的。C++是门程序员负责一切的语言，任何错误都是程序员的错误。然而对于Java来说，就不必处理复杂而没有意义的内存管理了。假设一个Java程序员需要传一个对象给子函数，他只要传递就可以了。然而如果C++程序员直接传递，那么就会出现参数拷贝过程。不但效率差，还可能出现错误。单单一个参数传递，就有三种方式。传值，传址，引用。又分成四类，静态动态，常量非常量。交叉起来，总共是12种情况，需要量材选用。如此烦琐的管理方式，我们可以想想对于内存来说是很有好处的。嵌入系统中大型程序设计绝对是C的天下。然而这么困难的使用方式，需要多大的人力成本才能做到呢？这明显的违反了低成本的原则。
Java的内存管理从C++的角度看绝对是具有瑕疵的，内存释放了不管，直到没有空间了才收集。然而很多C++程序高手在特殊情况下，会重载operator
new算子。其中的行为就很类似这个，Java只是将特殊情况下的应用放到了一般情况。这样对于速度的后果就是，很多的缓存会被持续的从物理内存中挤压出去，导致磁盘吞吐效率降低。对于Java程序，我猜测提升效率的瓶颈将会在和系统交互以取得最佳的垃圾收集时间上。
下面的论题就可能是C++程序员所不高兴看到的了，安全性和可变性。
就语言来说，用户输入的检查这种安全性是一点意义都没有的。我们所说的基本包括几个方面，非正常用法安全，线程安全，异常过程安全。就语言来说，分为了解释型和编译型。那么怎么区分呢？我这里有个很简单的方法，如果程序本身能被本身修改，就是编译型的，否则是解释型。注意，不是让你修改了磁盘上的源码再运行。这个能力赋予了C++强大的功能，例如修改游戏，检查病毒，都需要这个能力。但是不可否认的，比起无法修改自身的程序，安全性就差太多了。线程安全性上讲，Java的所有对象都是系统管理的，也就很容易的可以管理互斥。用过C++的都知道，C++自身是没有互斥的，全靠系统的函数库或者第三方库支撑。好用不好用不说，无法移植是一定的！最后是异常过程安全，C++的异常过程是很恐怖的。关键在于C++的异常传递有三种办法，传值，传址，引用。而且在异常过程中还又涉及回了内存管理啥的。天啊，要是异常都不能专心处理异常，我还要异常干嘛？
至于可变性，那就更别说了。连处理异常都要小心内存泄露的家伙，你指望在修改代码的时候轻松到哪里去？C++是具备了强大的可变性，然而处于效率考虑，很多增强可变性的东西是选项的。例如RTTI，居然要开编译器选项的说。需要使用可变性就要牺牲性能，而且还要你小心的使用。如果使用不小心，抱歉，你又陷入效率和安全的问题里面去了。
如果你有很好的系统功底，准备往计算机领域发展(注意不是计算领域)。那么C++是门很好的语言，只是非常费时而已。而且建议你学C#，VB或者Java作为第二语言，选择Bash或者Perl作为第三语言。这样在处理问题上可以事半功倍。如果你打算增加自己的计算机能力，方便日常的电脑使用，而不准备深入学习这个领域。那么只学C#，VB或者Java就足够了。
最后要提到的是易学和易用，这两个特性都是软件设计所赋予的。也就是说，即使是以简单著称的VB.NET，也可以写很好用的程序。以复杂著称的汇编，也可以写很友好的界面。这就不在本文的论题以内了。</description>
    </item>
    
    <item>
      <title>TTS杂论</title>
      <link>//blog.shell909090.org/blog/archives/352/</link>
      <pubDate>Thu, 25 Jan 2007 06:19:51 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/352/</guid>
      <description>近两天按照公司要求，试用了下TTS。现在能看到的TTS主要有4个，MS TTS,IBM TTS, FreeTTS, Festival.多少都有点问题啦。 Festival只支持英语，西班牙语，威尔士语。FreeTTS居然是Java程序(不过想想也是，要是Java没款TTS产品才奇怪了呢)。MS TTS倒是简单好用，可惜效果太差。微软研究院放出的线上版本又不知道怎么购买。IBM TTS很贵，而且还只有服务器版本。所以这里就挑用过的说(其实就是MS TTS)。 MS TTS很简单，安装，然后核心组件就会在系统内注册到COM组件。然后按照COM组件来调用就是了。使用哪种发音库可以在控制面板里面修改，也可以用发音语法标记来定制。可以解析多种情况，例如标准化存储，文件，字符串。可以输出到特定设备，例如WAV文件。基本就这样。</description>
    </item>
    
    <item>
      <title>多线程同步说</title>
      <link>//blog.shell909090.org/blog/archives/351/</link>
      <pubDate>Fri, 19 Jan 2007 00:00:13 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/351/</guid>
      <description>先给大家看个恐怖东西.
class TIFF2JPEG { public: static void newInstance (tstring &amp;amp; strFilepath, HGLOBAL hGlobal); static void waitObject (); protected: static ULONG_PTR initInstance (); static DWORD WINAPI ThreadProc (LPVOID lpParameter); TIFF2JPEG (); TIFF2JPEG (tstring &amp;amp; str, HGLOBAL hg); int Translate (); static ULONG_PTR gdiplusToken; tstring strFilepath; HGLOBAL hGlobal; DWORD dwSize; }; int ImageInMemory = 0; deque &amp;lt; TIFF2JPEG * &amp;gt;t2j_list; CRITICAL_SECTION CriticalSection_t2j_list; CLSID GifCodec; bool bThreadDelete = 0; vector &amp;lt; HANDLE &amp;gt; vThreads; TIFF2JPEG::TIFF2JPEG () { } TIFF2JPEG::TIFF2JPEG (tstring &amp;amp; str, HGLOBAL hg):strFilepath (str) { hGlobal = hg; dwSize = GlobalSize (hGlobal); return; } ULONG_PTR TIFF2JPEG::initInstance () { int i; HANDLE hThread; GdiplusStartupInput gdiplusStartupInput; ULONG_PTR gdiplusToken; GdiplusStartup (&amp;amp;gdiplusToken, &amp;amp;gdiplusStartupInput, NULL); GetCodecClsid (L&amp;quot;image/jpeg&amp;quot;, &amp;amp;GifCodec); InitializeCriticalSection (&amp;amp;CriticalSection_t2j_list); for (i = 0; i &amp;lt; MAX_THREAD; i++) { hThread = CreateThread (NULL, 0, TIFF2JPEG::ThreadProc, NULL, 0, NULL); SetThreadPriority (hThread, THREAD_PRIORITY_IDLE); vThreads.</description>
    </item>
    
    <item>
      <title>全局初始化</title>
      <link>//blog.shell909090.org/blog/archives/350/</link>
      <pubDate>Wed, 17 Jan 2007 18:57:57 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/350/</guid>
      <description>大家写代码的时候，假如写了一个组件，自身需要开一个线程的。那么多数是在初始化代码中直接写开线程的。如果要求这个类不在初始化代码中添加函数，怎么做？
MSDN中有个例子，不是解决这个问题的，但是可以用。
class DialogWindow{ public: static short GetTextHeight(){ return 1; }; private: static short nTextHeight; }; short DialogWindow :: nTextHeight = GetTextHeight(); int main(){} 在这里，把GetTextHeight里面添加上你需要的代码就可以了。
但是注意，这些代码的运行时间要早于main(准确的说，是在wmainCRTStartup里面运行的_c_init函数)。所以很多自然而然就有的初始化没做，你自己在main里面调用的初始化(例如WSAStartup啦，GDI+初始化啦)更是没做。所以必须严格测试。</description>
    </item>
    
    <item>
      <title>KMP</title>
      <link>//blog.shell909090.org/blog/archives/349/</link>
      <pubDate>Tue, 16 Jan 2007 00:53:52 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/349/</guid>
      <description>KMP是一个给人捧滥了的算法，其实单看同时有三个发明人这点，就知道这个算法是自古华山一条路，没别的想法的。KMP的算法每步虽然难想但是自然有道理，没有别的方法的。不像排序算法，一嘟噜的算法还没完。根据各种侧重点不同有不同的算法可用。
KMP的比较算法核心在于不回朔。我们先看一个正常的例子。
SSSSSSSSSSSSSS
TTTTT i=0, j=1,2,3&amp;hellip;
TTTTT i=1, j=1,2,3&amp;hellip;
TTTTT i=2, j=1,2,3&amp;hellip;
我们用T去匹配S，先对齐T和S的头部，然后对比T和S。如果T的范围内，TS内容一致，则匹配成功。不成功的话就将T向后移动一个字符。再次匹配T范围内TS的内容是否一致。ij的范围最大会在0&amp;lt;=i&amp;lt;=&amp;ldquo;j KMP算法的核心在于，如果T范围内TS的内容不一致，那么T向后移动不是一个字符，而是多个。而当前比较位置永远不向前移动。如果您写出来的算法当前比较位置向前移动了，那么肯定是写错了。
我们假定T范围内第i个字符匹配失败(0&amp;lt;=i
为什么能移动一个以上呢？Next[i]怎么确定呢？我们看一个抽象的例子：M代表匹配，N不匹配，U不知道。
MMMMMNUUUUU
TTTTTTTTTTTTTTT
TTTTTTTTTTTTTTT
我们可以看到，向后移动字符的时候，T自身有重合的部分。这时候有三种状况，我们先假定一种重合的状况。假定T向后移动了一些字符，P代表当前比较位置。在这个位置上TS出现了不匹配。
..MMMNUUU..
..TTTTTPTTTT..
..MMNTTTTTT..
在这个T向后移动一些距离后，在当前比较位置前已经出现了自身和自身不匹配的状况。根据上面我们知道，当前位置以前的T和S是匹配的。那么就是说，移动了这些字符后。T当前的位置上不可能取得匹配。我们称这种情况为这个位置的自身完全不匹配。
然后是另外一种匹配状况，符号和上面一致。
..MMMNUUU..
..TTTTTPTTTT..
..MMMNTTTT..
这个时候，T在当前匹配位置上自身不匹配，前面位置都匹配。同理可以知道，T在滑移到这个位置后可能取得匹配。我们称这种情况为这个位置的自身部分不匹配。
最后一种匹配情况是。
..MMMNUUU..
..TTTTTPTTTT..
..MMMMUUU..
这个时候，T在在前面和当前位置都匹配。我们知道前面是匹配的，然而当前既然已经被证明了和S不匹配。那么滑移这些位置后，新的位置上T也不可能和S取得匹配。我们称这种情况为这个位置的自身完全匹配。
然后我们可以回头看看比较过程了。当我们对齐TS，然后进行比较的过程中。出现了不匹配。
注意一个问题，我们回朔是为了知道移动后的T是否仍旧匹配。所以如果我们知道T匹配不匹配，就不用回朔。
这个时候我们不移动一次T，然后回朔。而是将T滑移一下，先滑移1位好了。假设出现了当前比较位置的自身完全不匹配或者自身完全匹配，那么滑动1位肯定也无法获得一个有效的匹配。那么就继续滑动，直到出现了自身部分不匹配，或者T已经完全的滑动到了当前位置的后面。这时候T的位置才是有可能获得匹配的位置，其余的位置就没必要浪费时间了。
也就是说，滑移距离Next[i]是i这个位置上滑动距离逐渐增加的时候，首次出现自身部分不匹配情况的位置。如果这情况不出现，那么就设定为&amp;lt;1的值。操作上将整个T滑动到当前位置的后面，并且从下一个位置开始比较起。
然后附上初始版的代码和比较过程。
int *cul_next (char *lpTpl)
{
unsigned int i = 0, j = 0, l = 0;
int *next;
l = strlen (lpTpl);
next = new int[l];
memset (next, 0, l * sizeof (int));</description>
    </item>
    
    <item>
      <title>查找重复文件</title>
      <link>//blog.shell909090.org/blog/archives/348/</link>
      <pubDate>Mon, 15 Jan 2007 07:39:52 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/348/</guid>
      <description>算是介绍一个奇淫巧技吧。查找重复的文件，这个应该有很多软件都可以做的。不过在Linux里面，利用系统工具，一句语句查找应该就比较少见了。
$find . -name &amp;quot;*&amp;quot; -type f -size +0 -exec md5sum {} ; | sort | uniq -d -w 32 原理是这样的，先用find查找当前所有文件。我们加上限定类型必须是文件，目录不要。限定大小不为0，空文件不要。然后对所有满足条件的执行md5sum，获得md5和文件的列表。然后排序，再针对md5的部分做唯一限定。就得到了所有md5相同的文件的列表。
问题是，这时候我们得到的还只是一堆重复的文件的md5。我们可以把以上步骤拆开来获得完整的输出。
$find . -name &amp;quot;*&amp;quot; -type f -size +0 -exec md5sum {} ; | sort &amp;gt; file_md5 $cat file_md5 | uniq -d -w 32 $grep &amp;quot;...&amp;quot; file_md5 相信大家都看出是怎么回事情了，就不赘言了。
Windows下以前我总是执行不出，原因在于要这么写。
find . -type f -size +0 -exec md5sum {} ; | sort &amp;gt; report.txt 差一个转义，因为不需要。
总结一下，我们可以用一个脚本来处理这些问题。
--------------------------fine_rep------------------------------ find $1 -type f -size +0 -exec md5sum {} ; | sort &amp;gt; &amp;quot;file_md5&amp;quot; cat &amp;quot;file_md5&amp;quot; | uniq -d -w 32 | cut -d&amp;quot; &amp;quot; -f1 | while read x do grep &amp;quot;$x&amp;quot; file_md5 echo &amp;quot;&amp;quot; done echo &amp;quot;done&amp;quot; rm &amp;quot;file_md5&amp;quot; ------------------------------------------------------------ </description>
    </item>
    
    <item>
      <title>构造过程</title>
      <link>//blog.shell909090.org/blog/archives/347/</link>
      <pubDate>Sat, 13 Jan 2007 22:12:10 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/347/</guid>
      <description>在进入正题前，我们首先回顾下我们的基础C++常识。如果调用某个对象的某个方法，那么会调用到什么？
一般来说，如果这个方法是普通函数，则按照这个对象的声明类型去调用。就好像(&amp;amp;obj)-&amp;gt;obj_type::function(param&amp;hellip;);。而如果是虚函数，则是按照这个对象的构造类型去调用。就好像(&amp;amp;obj)-&amp;gt;((&amp;amp;obj)-&amp;gt;_v_ptr[n])(param&amp;hellip;);。或者说简单点，一个是按照这个类看起来像是哪个类来调用，一个是按照这个类实际是哪个类来调用。
那么，如果在一个基类的某个成员里面调用这个类的另外一个虚函数，调用的是哪个呢？
任何正常人来说，都应该说是，按照这个类的构造类型来确定。基本上没错，不过有一个函数例外。
那么先看一个问题。
class B { public: B(){test ();} virtual void test (){printf (&amp;quot;parentn&amp;quot;);} void out (){test ();} }; class D:public B { public: virtual void test (){printf (&amp;quot;childn&amp;quot;);} }; int _tmain(int argc, _TCHAR* argv[]){ D d; d.out(); return 0; } 想像下输出，再运行下。想想为什么，再看下面。想通了就不用看了。
&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;我是无敌的分割线&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;
C++标准规定，任何一个带有虚函数的类都有一个_v_ptr成员，这个成员必须存放在这个类内存地址中头部。这个成员指向了这个类的虚函数表。于是，调用虚函数的时候，我们首先确定这个是虚函数。(按照这个逻辑，如果父类不声明为虚函数，子类重载为虚函数，还是没用的)然后，我们确定这是第几个虚函数(严格来说，这并不符合面对对象的设计规范，应该是按照函数名字查表的，_v_ptr也不应该仅仅指向虚函数表，而应该是类形态表)。最后，我们去虚函数表中取得入口地址进行调用。
那么为什么在构造函数中调用就无法调用子类的虚函数呢？问题在于_v_ptr的初始化时间上。某个类的构造函数启动前，这个类的_v_ptr才能完成初始化。如果是多重继承，那么首先调用最初类的，然后是次类的，最后是子类的。_v_ptr首先指向基类的，再是继承类，最后是子类。我们在父类构造函数中，_v_ptr指针还指向了父类的虚函数表，所以调用不到子类的虚函数。
其实我们可以这么说，构造函数以前，子类不存在。</description>
    </item>
    
    <item>
      <title>IDE</title>
      <link>//blog.shell909090.org/blog/archives/346/</link>
      <pubDate>Fri, 12 Jan 2007 23:09:53 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/346/</guid>
      <description>现在真是深深的为IDE所苦啊。
基本来说，现在用的IDE有几种，eclipse，MSVC，Anjuta，MingStudio，Code::Blocks。不过都有毛病。
eclipse好用的很，功能齐全，插件多，支持多，跨平台。可惜开发Java是本行，C就稍微有点小毛病，而且消耗资源太大。MSVC也是功能强大，可惜Linux下面没法用，而且不支持CVS。Anjuta只是Linux下面的开发程序，而且使用了Automake和Autoconf。MingStudio不开源，Code::Blocks编译困难。
不过想想也是，IDE都又好用又免费了，M$要$哪个去？
其中唯一好用点的也就是Code::Blocks了。前两天看一个论坛上说Code::Blocks是针对单语言的，所以要用Anjuta。我立刻喷笑。说起来一个人能会多少语言呢？三种？五种？要真的是多语言，不如用Eclipse或者Emacs。Eclipse支持Java/C++/Php，Emacs配置好了啥都支持。问题是支持多了，效果就差了。Eclipse在支持C++上就和MSVC没的比。
要比较一个IDE，基本来说是比较三个方面，自动写作，生成和版本管理，统一化测试/调试。
自动写作有四个主要方面，自动完成，符号提示，参数提示，自动格式化。说明白点，自动完成，就是使用某个范围的某个东西，例如变量或者方法。在写好范围(例如对象名或者类名)后会提示这个东西的名字。好比写了::Messa就基本可以自动给出::MessageBox。符号提示则更加智能些，在写作的时候自动判断当前最可能使用的对象并且给出提示。参数提示是指调用函数的时候提示应该传入的参数类型和个数，当然也有自动将最可能的变量传入的例子。自动格式化，就是乱糟糟的代码自动格式整齐。针对C++来说，MSVC可以自动完成，符号提示，参数提示，外挂插件可以自动格式化。Eclipse可以自动完成，参数提示(这就是那个自动填写最可能参数的例子)，外挂插件可以自动格式化。Anjuta和Code::Blocks没用过，不过Code::Blocks可以外挂插件格式化。
生成和版本管理来说，MSVC，Code::Blocks和Eclipse用的是自身的格式，脱离了IDE基本就没用了。Anjuta用的是Autoconf和Automake，即使没有IDE也可以编译。便于跨语言和发行原码包。
统一化测试/调试来说，基本都有行调试的功能，不过都不带测试工具的。</description>
    </item>
    
    <item>
      <title>用户和软件制造商的博弈</title>
      <link>//blog.shell909090.org/blog/archives/345/</link>
      <pubDate>Thu, 11 Jan 2007 20:40:18 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/345/</guid>
      <description>作为用户来说，软件越便宜越好。制造商来说，越贵越好。
软件的价格和很多因素相关，生产基础成本，市场竞争，应用市场，技术含量。不过我们今天分析三种因素，服务，技术和市场。
软件的价格中，有很大一部分是用于服务的。大致上包括客户服务费用，安全保证费用(例如出现产品造成客户损失等等)，软件升级和维护费用。免费软件和收费软件在这方面区别最大，收费软件自然可以做好(应该说是必须做好)服务，免费软件也可以做好服务。但是免费软件既然是免费的，让我免费写了大家用我不介意，反正没人用也是浪费，有人用还可扬名。但是还要提供服务，恐怕没人乐意了。所以免费软件的服务基本都是空白，或者是收费的(例如apache的文档)。这个因素基本和我们今天讨论的主题不相关，只是讨厌于某些厂商的服务质量有感而发。
市场的领域和含义非常复杂，大致上领域包括了某个产品理论可以用于的领域和当前用于的领域。理论上说记事本可以用于超大的程序开发，实际上你看到有人在用记事本写代码吗？含义的话，市场不仅仅是一个可用的范围，还应当包括所有用户和所有竞争对手，以及所有人的互相关系和当前状态。其实这已经是非常简化的状况了，软件的市场远远没有传统行业来的大，但是复杂程度却尤有甚之。美国的一个农民可能出售牛肉到日本，中国的一个农民也可能出售牛肉到日本。但是这两个农民互相间不认识，他们不构成直接的竞争动力。他们的代理出售者可能竞价，但是他们本人基本不可能调整自己的产品(当然，我也想像不出来牛肉可以怎么调整——除去中国某些恶心商人的手段外)。然而美国的一个公司卖软件到日本，中国公司也卖，他们一定认识，而且会根据对手行为和当前处境，以及客户状态来调整他们的产品。
最后一个是竞争的关键，技术。这里讨论的是广义上的技术，即抛却含量，纯粹从跑马圈地的角度来讲。如果讲技术的发展性，那最好大家公开所有技术内幕，不过看来不可能的。
技术的意义在于做别人不能做的事情。windows的进程管理器不能显示用户加载模块，sysinternals的就可以。这就是技术。有技术就有仿制。为了保持技术，一般有两种方法。一种是持续研发，成本高，但是优势十足。还有就是专利，恶心人的无奈东西。
如果说技术只是单纯能或者不能的问题，结合到市场上就有复杂的变化。最重要的一种就是利用技术特性来占领市场。如果某个产品是开放的，例如开放标准，出售代码。就可能出现很多不准确的免费仿制品。这些仿制品的大量应用奠定了这个产品的基础，使得产品具备非常大的市场和价值。然而市场，准确的说是用户，是具备产品粘着度的。也就是说，如果喜欢一个产品，就会一直使用这个产品。如果一个产品不具备粘着度，那就完全的没有价值了。因为他的用户随时都会转变为别人的。培育市场，就是培育大量的用户，并且使得他们具备高的粘着度。技术上说，存在这么一种情况，专利A，开放标准，出售研发代码(SDK)。专利B，封闭标准，出售研发代码，但是兼容专利A。那么专利B的产品会给客户一种导向，就是B比A更好。如果价格一样的话，我们不难想像客户的选择。这样的话A不仅仅是流失客户的问题，而且在后续产品上，用户会有惊人的粘着度。一直都是B专利兼容A专利，一直被压了打。
理论上这样会导致大家不愿意在核心格式上开放标准，然而标准的开放会带来非常广阔的兼容性好处。例如著名的开放标准XML，从技术角度讲几乎就没有什么难以理解的高级技术。然而这个标准本身却是伟大的发明。所以比较流行的方式应当是授权标准，标准是免费的，但是是授权的。如果在此上面衍生变化必须得到标准化委员会的认可，然而其中还是有很大问题的。例如微软就变更了java的标准，并且在事实上(虽然从来不承认)变更了html的标准。IE可以浏览标准的html，但是标准的html浏览器却不能浏览IE的格式。由此可以看出各个生产厂商在专利上的竞争方式。
作为厂商来讲，最好的运作模式是没实力兼容标准，这样用户觉得你功能强大。有实力就修改标准，这样可以养成用户粘着度。然而在用户看来，最好选择仅仅使用最开放最便宜的标准的软件。虽然这样会在使用中造成不便。然而却杜绝了大厂商篡改标准圈地的可能，在用户和软件公司博弈的时候获得更大的优势。</description>
    </item>
    
    <item>
      <title>code2dia和cpp2dia</title>
      <link>//blog.shell909090.org/blog/archives/344/</link>
      <pubDate>Wed, 10 Jan 2007 18:35:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/344/</guid>
      <description>前两天找自动化工具，发现两个工具，叫dia2code和cpp2dia。两个都已经玩过了，还不错。这两个工具是基于UML的建模工具，和IBM Retional有异曲同工之妙，只是没有那么完整好用而已。
dia是一种矢量图编辑工具，其中包含了UML模块。不过只有UML图的建模工具是不完整的，dia2code可以将UML转换成多种语言的定义文件，其中包括了C++和java(我也就要这两种就够了)。画出关系图后，一条指令就可以自动生成代码框架，套用indent格式一把就可以拿来写了(java的话自然是eclipse)。美中不足的是，如果生成代码框架可以自动扩充就好了。例如当前我已经在某个框架上写了代码，然后发现要添加一个函数。难道还要重生成一遍，然后再Ctrl+C,Ctrl+V吗？回头估计要写一个程序来解决这个问题。
cpp2dia到是可以部分的解决这个问题。如果说dia2code是以UML模型为基础，cpp2dia就是以程序代码为基础。cpp2dia可以从代码中生成出dia模型来(当然，看名字就知道，只支持C++)。如果要添加函数，尽管修改代码，回头重新生成dia就是。不过这个毕竟不是比较完美的解决方案。
我做了一个测试。画了一个图形a.dia，然后用dia2code生成一堆框架。拿框架去套cpp2dia，结果出来一个output.dia。output.dia和a.dia拓朴结构一致，但是位置就差很多了(这也没办法)。最后用output.dia生成框架，生成结果和原来框架完全一致。
这两个工具的意义，在于编写代码的同时，可以清晰的看到代码的相互关系。代码写好了，文档也自然有了。UML图在手里面，代码自然也好写多了。同类的解决方案有IBM的Retional，Sun的JavaStudio，Microsoft的Visio，虽然都是要收费的，而且是白花花的银子啊～～～</description>
    </item>
    
    <item>
      <title>超级牛力</title>
      <link>//blog.shell909090.org/blog/archives/343/</link>
      <pubDate>Mon, 08 Jan 2007 06:27:29 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/343/</guid>
      <description>用过debian的朋友，在用apt-get和aptitude的时候会发现有句声明。
#aptitude --help ... 这个 aptitude 没有超级牛力。 #apt-get --help ... 本 APT 有着超级牛力。 什么是超级牛力呢？
超級牛力是 Debian 系統中一股神秘的力量。
/*
..暴打ing..
*/
其实说明白点，超级牛力就是一个彩蛋。详细可以参看SuperCowPowers。
$ apt-get moo (__) (oo) /------/ / | || * /---/ ~~ ~~ ....&amp;quot;Have you mooed today?&amp;quot;... $ apt-build moo (__) ~ (oo) / _____/___/ / / / / ~ / * / / ___/ *----/ / / / ~ ~ ...&amp;quot;Have you danced today ? Discow !&amp;quot;... $ aptitude moo 此軟體沒有復活節彩蛋程式。 $ aptitude -v moo 此軟體真的沒有復活節彩蛋程式。 $ aptitude -vv moo 我不是已經告訴你這個軟體真的沒有復活節彩蛋程式了嗎?</description>
    </item>
    
    <item>
      <title>中国的出国网络断了</title>
      <link>//blog.shell909090.org/blog/archives/342/</link>
      <pubDate>Fri, 05 Jan 2007 01:49:56 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/342/</guid>
      <description>同志们，由于人力不可抗拒因素(中国的出国网络海底光缆给地震震断了)，所以我的blog不定期更新。
敬请耐心等待。</description>
    </item>
    
    <item>
      <title>getline的效率问题</title>
      <link>//blog.shell909090.org/blog/archives/341/</link>
      <pubDate>Tue, 26 Dec 2006 01:09:20 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/341/</guid>
      <description>用过C++的肯定都知道getline(cin, str)这个用法吧，用于将某行读入到一个字符串对象中。但是根据我的测试，这个方法有严重的效率问题。
正则表达式行匹配器，匹配一个23M文件。用getline的总运行时间是21秒，用直接文件读取方法只有7秒。getline方法在屏蔽对读入数据的正则匹配后还运行了9秒上下。这里有人可能弄不懂，即使读取不用时间，getline花费的时间加正则运算时间不应该是总时间吗？结论是不是的，因为多个接口上下调用需要时间，str对象得到指针需要时间。所以其中还有一些时间差。不过getline方法效率差是显而易见的。
原因在于istream的类型和行的长度。我们是从文件中读取的，一次获得一个字符的取得的。ifstream应该没有弱智到一次只ReadFile一个字节，估计是用了1-4K的缓冲簇。对于大型文件，这个缓冲簇应该越大效率越高。但是stream不会知道输入流的长度，所以——
而且即使知道了，50W个byte就是50W次call调用，花多少时间自己考虑吧。
还有一个是string类型的问题。getline istream一般都是用string作为接收对象的，因为string几乎可以无限制的接收。在STL的实现中，string是vector一样的连续块分配。当长度超出的时候，就必须重新分配，然后复制数据，删除原先块。因此STL中建议给string对象reserve一个块来提高效率。不过getline开始的时候会earse string对象，可能在这里面保留区域就被OOXX了——
所以在大规模数据处理中，还是手来吧。</description>
    </item>
    
    <item>
      <title>EPS转BMP和代码优化</title>
      <link>//blog.shell909090.org/blog/archives/340/</link>
      <pubDate>Fri, 22 Dec 2006 17:53:13 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/340/</guid>
      <description>EPS转BMP(我用的是PNG，不过还是一回事情)。EPS内部有两种图片，一个是TIF，位置和大小在头32个字节中描述。具体可以看EPS文档，在lp[5]保存位置，lp[6]保存大小。还有就是%%BeginBinary:
后面跟一个大小，然后跟beginimagex0D。在前文中应当有大小，自己找找看去，最后是一堆数据。存放方法是一位一位的像素连续存放，先存放一行C，然后是一行M，然后是Y，然后是K。当这4者全部存放完后，向后跳空一端区域，到本行开始的4字节对齐处，开始下一行的存放。
例如3个像素宽的图片(好简单——)存放方法就是，在0字节的最高三位(7,6,5位)，存放了这三个像素的C值。次三位(4,3,2位)，存放了M值。然后Y值存放在0字节的两位(1,0位)和1字节的一位(7位)。最后K值存放在1字节的次三位(6,5,4位)。然后跳空对齐，在4字节的位置开始描述下一行。
了解这个过程了，就应该发现，要转换到BMP需要大量的位操作。前置过程不说了，假定数据在内存里面(我当然不会用读取这种方法，用的是文件内存映射啦)，然后目标是GDI+的BitmapData对象。
BYTE getBit (PBYTE lpInData, int bit) { bit*=n; BYTE rslt; rslt = lpInData[bit / 8]; rslt &amp;gt;&amp;gt;= (7 - bit % 8); return rslt &amp;amp; 0x1; } for (y = 0; y &amp;lt; tgtData.Height; y++) { line_start = lpOut + l * n * Stride; for (x = 0; x &amp;lt; tgtData.Width; x++) { c = 1 - getBit (line_start, x); m = 1 - getBit (line_start, x + tgtData.</description>
    </item>
    
    <item>
      <title>正则表达式解析文本</title>
      <link>//blog.shell909090.org/blog/archives/339/</link>
      <pubDate>Thu, 21 Dec 2006 20:04:02 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/339/</guid>
      <description>最近碰到这么个问题，一个文本，每行都是乱糟糟的东西，要从里面解析出东西来。行匹配铁定是用正则表达式，我用了Boost，不会的看我前两天的blog去。
下面是按行解析问题。简单来说，写一个类继承Lister，然后实现里面的三个纯虚方法。maxSeqence返回最大可以支持的表达式，registe_regex返回表达式文本，seqenceProcess返回相应函数的指针。其实可以写成直接调用seqenceProcess加上匹配序号，然后让用户在函数内部做switch-case的。不过这样用户代码量稍微有点多，所以干脆玩一把技术。然后是几个非纯虚函数，nextSeqence可以根据当前状态来控制下一个要匹配的表达式，默认是+1，一个一个全部匹配。beforeProcess和afterProcess分别是处理前后，可以调整输入流。noMatch是一个比较常用的虚函数，用于响应没有匹配时的状态。
匹配的结果在cmatch &amp;amp; what中，详细请看boost::regex。不过what[0].str()可以获得整句的string型返回，what[1]开始就是正则的匹配结果。
&amp;mdash;&amp;mdash;&amp;mdash;2006-12-25&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;
原来的结果删除，我重写了一个。
主要有两个问题，一个是getline的效率问题，我会撰文说明的。还有就是两处细节不大好。
为了修正这两个问题，我突然发现整个的构架不大好了——怎么办？重写吧——
下面是新的，一个类line_regex，直接继承就好。line_buffer是用于解决getline效率不高的问题的，当然我偷了个懒，实现代码用了WIN32API，所以是不可移植的。而且数据是一次读取，最多256M。不过相信这种级别的问题还难不倒大家。line_buffer类中的函数都很清晰明了，就不介绍了。
Process (tistream &amp;amp; is)和Process (line_buffer &amp;amp; lb)是两大入口，同时支持自有的输入方法和流输入。当然流输入清晰明了标准化程度高。不过效率差的一塌糊涂。继承类初始化的时候，记得设置pfTable为入口列表，然后调用注册函数完成注册。nextSeqence和上面一样，可以定制下一个匹配式。noMatch用于无匹配的时候。beforeProcess和afterProcess分别会在某行开始和结束匹配后用，返回-1结束运行。其中beforeProcess返回正数会导致本行跳过，可以作为过滤器。
---------------------LineRegex.h-------------------- #include #include #include #include #include #include #include using namespace std; using namespace boost; typedef basic_stringtstring; typedef basic_regextregex; typedef match_resultstmatch; typedef basic_istream &amp;gt;tistream; #ifndef_LINE_REGEX_H_ #define_LINE_REGEX_H_ class line_regex; typedef int (line_regex::*ProcessFunction) (const tmatch &amp;amp; what, int line); class line_buffer { public: line_buffer(); ~line_buffer(); intopen(LPCTSTR lpPath); voidclose(); LPTSTRgetline(); longsize(); protected: UINTFileSize; LPVOIDlpFile; TCHAR *lpNow, *lpNext; }; class line_regex { public: line_regex(); ~line_regex(); virtualintnextSeqence(int seqence); virtual intnoMatch(LPTSTR strLine, int line); virtual int beforeProcess (LPTSTR strLine, int line); virtual int afterProcess (LPTSTR strLine, int line); voidregiste_expression(LPCTSTRexps[]); int Process (tistream &amp;amp; is); int Process (line_buffer &amp;amp; lb); protected: intProcessLine(LPTSTR strLine, int line); longmaxSeqence; ProcessFunction*pfTable; tregex*expressions; tmatchwhat; }; #endif//_LINE_REGEX_H_ ---------------------------------------------------- ----------------------LineRegex.</description>
    </item>
    
    <item>
      <title>windows service的C&#43;&#43;封装实现</title>
      <link>//blog.shell909090.org/blog/archives/338/</link>
      <pubDate>Wed, 20 Dec 2006 20:09:10 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/338/</guid>
      <description>windows系统服务入口的封装类，service是基类，service_manager是管理类。支持UNICODE，可以多服务封装在一个程序里面，过程当然都是自动的。拥有自动防错系统，在服务异常退出的时候会去关闭服务，而不是开着服务直接没了进程。写一个类，继承service，然后在哪里出一个实例，就可以了。service中有很多虚函数，可以重载了监听对应事件(我应该写的比较明白吧)。get_service_name，返回UNICODE的字符串指针，定义服务名称。注意是纯虚函数，必须实现。get_dependence，也是返回UNICODE的字符指针。指明这个服务依赖什么服务。get_service_type返回服务类型，其实也就是是否可以交互。get_contral_accepts，支持的信号(例如是否可以暂停)，默认可以暂停。on_start开始时候调用的函数，下同。
使用方法
#include #include &amp;quot;service.h&amp;quot; class test_service : public service{ public: virtual LPTSTRget_service_name (); virtual DWORD on_start (DWORD argc, LPTSTR * argv); virtual DWORD on_stop (); virtual DWORD on_shutdown (); }; LPTSTR test_service::get_service_name () { return _T (&amp;quot;test_service&amp;quot;); } DWORD test_service::on_start (DWORD argc, LPTSTR * argv) { return service::on_start (argc, argv); } DWORD test_service::on_stop () { return service::on_stop (); } DWORD test_service::on_shutdown () { return service::on_shutdown (); } int _tmain (int argc, _TCHAR * argv[]) { test_service ts; if (argc == 1) service_manager::start (); else if (!</description>
    </item>
    
    <item>
      <title>出差到宁波</title>
      <link>//blog.shell909090.org/blog/archives/337/</link>
      <pubDate>Tue, 19 Dec 2006 23:54:35 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/337/</guid>
      <description>名义上是出差，其实基本没干嘛。倒是看到了Gigi同学去过的天一广场。因为没带相机，所以啥也没有，就这样。</description>
    </item>
    
    <item>
      <title>P2P和DHT的结构</title>
      <link>//blog.shell909090.org/blog/archives/336/</link>
      <pubDate>Fri, 15 Dec 2006 19:29:29 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/336/</guid>
      <description>最近P2P是越来越盛行，按照公司要求，我们要写一个P2P下载支持。老板发话，越小越好。想想有道理，只是要减轻服务器压力，又不是要和P2P下载商抢生意。不过老板又发话，必须保持核心服务器高可用性。偶当场啥掉，怎么办？
说起P2P下载的原始面目，其实是很简单的技术。假定你一个人在下载一个文件，同时你又知道所有有这个文件或者在下这个文件(那就有一部分)的人的套接字。那么连接上去下载，并且提供你可以提供的部分就好了。其中只有两个问题(也和算法没啥关系)，应该先下谁的，应该先给谁。但是困难在于，你如何知道谁有某个文件呢？
按照获得这个信息的方法不同，P2P分成三代。
第一代是核心服务器型的，术语叫做中心化拓扑（Centralized Topology）[1]，例如Napster[4]。这种类型的P2P下载可以说是传统下载和P2P下载的结合体。他同时具备了P2P的特性，例如带宽占用分布，高容错，高可用。也具备了核心模式的特性，例如中心依赖，可模糊搜索。Napster可以说就是因为核心依赖性而输掉了官司。
这代P2P的运作方式是，用户上线的时候把自身的资源提交到服务器。由服务器维护表来做查询，并且定时删除过期的客户。用户查找文件的时候需要向服务器提交请求，服务器返回拥有文件的客户端。由于文件信息提交到服务器端，因此服务器上可以说是拥有版权文件的索引。
第二代是泛洪/限制性泛洪型的，术语叫做全分布式非结构化拓扑（Decentralized Unstructured Topology）[1]，代表就是Gnutella[3]。这种类型的P2P才是完全意义上的P2P，因为去掉了核心服务器，因此没有中心依赖性。拥有P2P良好的带宽占用分布，高容错，高可用性能。但是致命缺点是，当网络节点扩展时，维护网络的带宽消耗就会成几何扩展。在大规模应用中，这无疑是不可接受的。所以有限制性泛洪的结构，不过限制性泛洪只是增强网络的抗性，没有根本的改变现状。
这类P2P的运作方式是，用户维护自身拥有文件的列表，和其他一些客户的列表。当一个用户需要知道谁有一个文件的时候，就向他所有知道的其他客户查询。如此反复层级查询，并且用SPT或者TTL来做优化，最后可以得到结果。不过可想而知，网络消耗是惊人的。
这代P2P有个变形，术语叫做半分布式拓扑（Partially Decentralized Topology）[1]，代表是KaZaa。简单来说就是把核心服务器型的一个核心服务拆成多个分布在某些比较强大的节点上。核心服务间使用泛洪/限制性泛洪型的方式通讯，核心和非核心间还是核心服务器查询的老路子。这类P2P修正了核心服务器型的中心依赖问题，并且可模糊搜索。也修正了泛洪的带宽占用问题。但是资源消耗分布不均匀，结构比较复杂，而且长期运行的核心节点可能莫名其妙就成为了被告，因为核心节点也拥有版权文件的索引。
第三代是DHT型，术语叫做全分布式结构化拓扑（Decentralized Structured Topology）[1]，代表就是Chord[6]，Pastry[5]，Kadamila[2]。这种的P2P也是去核心的，拥有P2P良好的带宽占用分布，高容错，高可用性能。同时资源消耗比较平均，网络消耗小，扩展性好，抗网络不稳定能力强。缺点就是失去了模糊搜索的能力，只能变通的模糊搜索。
DHT是Distributed Hash Table的缩写，用于节点搜索的。在此之前，我们先来想想数据结构课程的一些东西(没学的就表看了，看下面的吧，这节看了铁晕)。如果我需要知道一个对象，找出关联的一个对象，那应该用哪种结构？map！那如果要增加map的效率怎么办？hash table！那么hash table的内存布型怎么处理？如果要经常删除添加，那应该用链表。OK，我们想像一下，假设一个节点就持有链表中的一项，上下项的指针改成上下节点的网络描述，那是啥？Bingo，DHT。当然，DHT不会傻到让一个节点就保存两个网络描述，那一旦断裂就全玩完。DHT中是先给予所有节点一个ID，然后定义一个距离算法，再按照ID来保存hash的。一个节点保存和他的ID相邻的一定距离的hash(当然还包括值)，并且保存一些ID近的节点的网络描述和一些节点远的网络描述。就好像在hash table里面，一个节点保存了上下临节点的同时，也保存了很远的节点的指针。这样在链表查询的时候速度可以更快。
DHT的运作原理是，一个节点加入DHT网络，就会生成一个不重复的ID。然后会寻找一些节点来扩充自己的相邻节点列表，并且获取于自己相邻到一定程度的Hash的内容。当节点够多的时候，所有的Hash都会有一个以上的节点来维护，这样就有了足够的容错性，性能，稳定性。在寻取一个内容的时候，会寻找自己的临节点列表中最近的节点，然后向他查询进一步的消息。这个在几次循环后就可以足够近到获得目标信息了。当然，大家可以看出，要寻取一个对象，就必须有这个对象的hash，因此是不可模糊的。
Kadamila是eMule所用的服务，很多BT中也使用了兼容协议。
另外顺便在此提出一个P2P流的思想。传统的P2P下载是基于块的，简单来说就是文件。现在很多P2P技术可以基于流，就是可以在允许一定延时的情况下，将延时允许区域内的数据作为一个块来传送。这种技术对于P2P的要求更高，但是应用范围更加广阔。例如用于视频流播放，广播，股票数据传输等等。现在的流技术都是针对特定协议来展开的，例如视频流点播就用PPstream。我们可以将P2P流封装成一个独立服务，从发起端上连接一个接口，到客户端上监听一个接口，中间过程透明化。简单来说，发送端上运行一个服务，客户端上运行一个服务。发送端上的服务连接到一个特定端口来获得数据，然后通过P2P流来传输给客户端，客户端的P2P服务再监听到一个端口上，向所有(或者有限)连接上的接口提供数据。除去只能接受数据，并且存在一定延迟和丢包外。整个过程就被掩盖在了单纯的网络传输下面。这样很多协议可以在不修改协议(但是至少要可以对抗错包丢包等等网络状况)的情况下直接P2P流化。当然，P2P流在实时性，安全性上的要求会更加高。
顺便说一下网状模型的一个修改吧，几年前的东西了，可惜一直弄不出算法来。当前的网状模型是一个节点传输给其他节点，然后层级传递。理论上应该将发起节点最近的和提供带宽最高的节点放在顶层，以减少网的层数。不过将底层的节点带宽废弃还是可惜了点。我们可以将一个流分成两个部分(如果先天就可以分离最好，例如视频和音频，不过他们不对等)，然后组成两颗树。这样网络中的底层节点就可以在另外一颗树中被定义为次层节点。如此会对带宽利用更加彻底，当然，程序也会更加复杂。
参考和引用:
1.P2P网络的拓扑结构:http://www.intsci.ac.cn/users/luojw/P2P/ch02.html
2.Kademlia协议:http://www.itslife.net/blog/?p=132
:http://blog.csdn.net/colinchan/archive/2006/05/08/712760.aspx
3.Gnutella协议:http://www9.limewire.com/developer/gnutella_protocol_0.4.pdf
4.Napster官方网站:http://www.napster.com/
5.Pastry 工程:http://research.microsoft.com/~antr/PAST/pastry.pdf
6.Chord 工程:http://pdos.csail.mit.edu/chord/
7.对等网络中主流分布式哈希算法比较分析:http://www.p2psky.com/tech/article1274.html
8.细说 Kademlia:http://www.vshj.com/Article/2005/200512/Article_18386.shtml</description>
    </item>
    
    <item>
      <title>Boost</title>
      <link>//blog.shell909090.org/blog/archives/335/</link>
      <pubDate>Thu, 14 Dec 2006 23:18:24 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/335/</guid>
      <description>谢天谢地，好久没有正常的用blog了。无论哪里都是能看不能改，痛苦死我。
先写个技术文，关于Boost库的。
首先，你得装Vs2003.net。VC++6的编译器在支持列表里面一片血红，用那个不如用Linux跑GCC。如果有MSVC8(不要脑子转不过来，就是Vs2005.net)，那就比较完美了。基本和Linux下的GCC4.1平分秋色。下面是按照Vs2003.net+windows的例子来讲的。
然后，下载一个boost的库源代码，解压安装，没有一点困难。好的很。
接下来，请在PATH里面确认添加C:\Program Files\Microsoft Visual Studio .NET 2003\Vc7\bin;C:\Program Files\Microsoft Visual Studio .NET 2003\Common7\IDE;或者等效路径，关键是要能将cl.exe，link.exe，vcvars32.bat，mspdb71.dll纳入搜索路径。然后切换到boost的目录boost_1_33_1libs\regex\build，运行vcvars32.bat，再运行nmake -f vc71.mak，或者等效的指令(其实就是71还是70 80)。再运行nmake -f vc71.mak install，向VC的lib目录里面添加库。至此boost库的regex组件库算是编译好了能用，如果你不用正则表达式，抱歉，上面的话在耍你。
然后是用法，倒不难。
cmatch what; regex reg(&amp;quot;^abc$); if(regex_search(str.c_str(), what, reg)){ .... } what里面会保存从正则表达式里面匹配出来的东西。
利用这个库可以很好的做字符串拆分，验证的操作，弥补了C++没有正则表达式的缺憾。
我写了一个类，可以从流里面获得每行，然后做匹配，然后派发到相应函数里面去。有需要的可以联系我。</description>
    </item>
    
    <item>
      <title>我工作了</title>
      <link>//blog.shell909090.org/blog/archives/334/</link>
      <pubDate>Sat, 02 Dec 2006 17:44:03 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/334/</guid>
      <description>最近我又被朋友们拷问关于工作的问题。恩，没错，我工作了，地点在曹杨路，当然是程序员，薪水不太满意。从9点到6点。
没缺什么吧？</description>
    </item>
    
    <item>
      <title>某件事情</title>
      <link>//blog.shell909090.org/blog/archives/333/</link>
      <pubDate>Thu, 16 Nov 2006 23:47:14 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/333/</guid>
      <description>恩，今天应当事人要求，我需要讲某件事情，请大家评评理。应当事人要求，特地隐去名字，称为某君。但是在说事情以前，我必须坦诚另外一件事情，我谈恋爱了。
相信这年头，谈恋爱不是啥应当游街批斗的罪过，当然接吻也不是。问题就出在我和某君接吻后面——
她和我的某位亲戚是同学，所以在接吻后没多久就主动找上我这位亲戚分享心得。言语中谈及什么我一直不知，据某君本人说也记不清楚了。不过就我辗转得知，其中应当有“是不是姿势错误”和“口水满脸都是”云云。我的这位亲戚觉得某君言语说的太过露骨，将来说给其他人知道，于我不利。于是找上我的长上和盘托出，长上听后颇为不齿，斥为“二百五，这种事情怎么好说的阿。”。于是又找上在下的高堂，托她转告。高堂特意约谈我，说“这事情不应该这么做。这么做让人觉得——按你XX的话说，有点二百五”。我听了颇为尴尬，于是又约谈某君，说其侵犯隐私云云。某君不服，认为此事不应怪她，虽然事情因她而起，可是她不应承担主要责任。好比导火线一样，虽然造成爆炸，本身没有什么过错。言称我那位亲戚到处乱说，才当是罪魁祸首。又说我的长上道听途说即说其是“二百五”，话语太重，下结论太随便。我本人未就此事向此二位长上辩解，未克尽男友的责任云云。
我反驳她，说她随便说话已经不是首次。接吻当天就向她的母亲完全坦诚此事，导致她母亲下令禁止她再到我这里来。随后又主动找上我的亲戚，言及我的私隐。就此两件事情，何谓不承担主要责任。长上说小辈一句“二百五”，就是我自己这些年也被说了无数次，又有什么委屈呢？说到道听途说，除非说我那位亲戚随意编造。可此事只有我和某君知道，我没有说，某君没有说，我那位亲戚又不是千里眼，怎么连细节都知道呢？至于我未就此事向二位长上辩解，不说事情因何而起，单单我为人晚辈，是否合适辩解呢？
大家应当知道整个事情来龙去脉了，可以评评理看，倒底事情如何？知道详情的也可以在下面补充，看看我哪里没有说到。</description>
    </item>
    
    <item>
      <title>租屋公告</title>
      <link>//blog.shell909090.org/blog/archives/332/</link>
      <pubDate>Tue, 07 Nov 2006 19:26:11 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/332/</guid>
      <description>最近碰到朋友——除了问头发，还经常被问到出租屋的事情。好吧好吧，我租出来了。
具体请看这里。
别说我没说过。</description>
    </item>
    
    <item>
      <title>剪发公告</title>
      <link>//blog.shell909090.org/blog/archives/331/</link>
      <pubDate>Mon, 06 Nov 2006 21:56:01 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/331/</guid>
      <description>最近碰到朋友——老问我，你最近如何。我说还行，就是头发剪了。然后就被要求照片。好，现在特此公告。照片如下。
别说我没说过。</description>
    </item>
    
    <item>
      <title>一只小狗</title>
      <link>//blog.shell909090.org/blog/archives/330/</link>
      <pubDate>Mon, 06 Nov 2006 05:42:44 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/330/</guid>
      <description>今天老妈跑到我租的房子里面的时候，在门口看到一个小狗。(关于我租房子的事情后面再说，我很懒，就这样)脖子上有个牌子，看来是有主人的狗。看上去很乖巧很可怜的一个小狗，趴在我家门口附近。不知道哪里来的。老妈看看可爱，又看看有主人的，放心的喂了块肉。结果，麻烦大了。
到中午我去吃饭，把早饭时候的锅子带回去。结果出门发现，它还在那里。看到我出来，一下子站起来。有没有搞错，别说我可不是老妈。就算是，也不能在空锅子里面变出肉来阿。赶紧给老妈打了个电话，老妈还说我大惊小怪。好好好，见怪不怪。我出去看到它注意力正被邻居引开了，干脆一溜烟跑下去。
晚上去吃饭，发现还在——有没有搞错阿——就算黑猫叔叔也要休息的好吧。没办法，和老妈说了，你喂的肉，你搞定。老妈想想也没办法，吃了晚饭到我哪里准备抱下去。结果路上看到一个邻居的狗，也跟我们上来了。
两个狗见面了非常有意思，互相闻来闻去。然后邻居的狗居然想骑那个可怜的狗了。它(或者应该叫她？)到处跑。我赶快跑到屋子里面，省得看狗打架。老妈赶快把狗抱到下面去，结果发现110来了。看来是刚刚他们打架的声音太大，吓到谁了。邻居的狗应该没事，不过这只可怜的小狗就麻烦了。虽然有狗牌，但是不能用来查找主人。(狠狠鄙视下中国的动物管理制度，收了钱不管理的么)派出所的人看看也很可怜，问我妈说要不要养。养的话省下1000来挂狗牌，不养的话回去他们也是处理了。(其实就是人道毁灭)我妈听了也很想，问题是这狗可带不回北京阿——即使带回去也没法养。原来的狗就是一个证明。所以很无奈的看着给接走了。</description>
    </item>
    
    <item>
      <title>上海电信ADSL宽带测试报告</title>
      <link>//blog.shell909090.org/blog/archives/329/</link>
      <pubDate>Wed, 25 Oct 2006 19:33:50 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/329/</guid>
      <description>总算把该死的有线通换成ADSL了——现在我们看看电信的宽带质量。
我做了几项测试，因为时间关系(我要吃饭了——)，没有做的很足，回头补个详细的。
1.tcp连接丢包率
根据我的测试，有一次出现了4%的丢包率，其余时间是0。
2.网络时延测试
www.google.com的测试结果是 平均/抖动=295.3/591.7
www.sina.com.cn的测试接过是 平均/抖动=435.1/714.3
3.TTL状态
平均TTL大约在12-18左右，略略好于有线通1-2个路由器。
4.动态丢包测试
P2P/HTTP混合实际使用下1分钟8863个包，丢包2.7%。
5.网络压力测试
未进行。
从以上参数中可以看出，电信的质量略略好于有线通的。但是网络时延大，带有数据丢包。这个要去检查是否是信号线上的问题。
下午仔细检测了ADSL的详细状况，然后得出了一个更详细的表，附录如下：
1.tcp连接丢包率&amp;amp;网络时延测试
#hping -p 80 www.sina.com.cn #hping -p 80 www.google.com 2.TTL状态
NTOP测定，平均TTL大约在12-18左右，略略好于有线通1-2个路由器。
3.动态丢包测试
wireshark测定。
1.无网络压力状态下测试
双机器自然负荷，仅仅开启MSN等IM软件。
--- www.google.com hping statistic --- 96 packets transmitted, 95 packets received, 2% packet loss round-trip min/avg/max = 36.1/39.3/57.6 ms 平均/抖动=39.3/21.5
--- www.sina.com.cn hping statistic --- 96 packets transmitted, 96 packets received, 0% packet loss round-trip min/avg/max = 10.6/13.1/16.7 ms 平均/抖动=13.</description>
    </item>
    
    <item>
      <title>通过LPIC1</title>
      <link>//blog.shell909090.org/blog/archives/328/</link>
      <pubDate>Sat, 21 Oct 2006 08:04:40 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/328/</guid>
      <description>总算正式通过LPIC1了，搞了半年这个东西，真的差点让我崩溃。通过可以有两种方法，背考古题，或者拥有深厚的功底。
里面最让我觉得不爽的就是很多莫名其妙的参数还需要记忆。例如tracroute -n的n，是阻止R-DNS的意思。这个如果是RHCE，一个man就知道了——可是这里，就需要人自行记忆。除非相当长时间的使用，让你对这些参数了如指掌，否则——考古题。
不过里面对于功底的考察蛮细致的，有的题目会问你一些正常不会细究的东西。我为了通过考试，自行研究了整个Linux引导的详细过程。从开机到initrd，然后从服务到启动X，到自动执行脚本。非常详细的了解了整个Linux的基础，并且可以自行定制一个Live系统。这里面需要非常详细的研究，一般的大路货考试好像还没有这个必要——
不过我要说的是——这些东西——纯粹是自己吓自己。事实上，LPI-101我考了550分，LPI-102我考了640。不是啥高分，不过远远超过通过分数。原因是对于考试评价过高——还特意拖了很久——等很多事情稳定了，而且功底扎实了才去。没想到这么简单，扫兴。
总体来说——考试通过的感觉还不错，不过没有什么好惊讶的。意料中的事情——除了多出来的1300块钞票——我的钱阿——</description>
    </item>
    
    <item>
      <title>LPI的表述问题</title>
      <link>//blog.shell909090.org/blog/archives/327/</link>
      <pubDate>Tue, 17 Oct 2006 19:42:02 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/327/</guid>
      <description>+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+ | {width=&amp;ldquo;181&amp;rdquo; height=&amp;ldquo;80&amp;rdquo;} | | 在您准备接受LPI认证考试前,必须在 LPI | | 官方网站上进行注册登记,注册后系统会发送一个LPI | | | | ID到您的邮箱中，同时登陆会员区也可查看 LPI | | ID。 | | | | 如果您在注册中遇到困难,请致电: 010-62670579,或发邮件到 | | candy@lpi-china.org 或 bai@lpi-china.org, | | 我们有考试官员为您服务，所有注册都是免费的。 | +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+ | {width=&amp;ldquo;183&amp;rdquo; height=&amp;ldquo;80&amp;rdquo;} | | 拿到您的LPI | | ID后，您可持本人身份证到LPI中国办公室、LPI授权培训中心及[Prometric](http://www.prometric.com.cn/ | | )考试中心报名，同时一次性交纳考试费￥1300元，然后您会得到一个准考证，持准考证及身份证到指定的考场去参加考试。 | | | | | | 注：考生在报名时，请选择对应的考试级别和中、英文试题：LPIC-1 | | | | 和 LPIC-2。 |
&amp;ndash; LPIC-1 101 102 LPIC-2 201 202 &amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;- &amp;ndash; 以任何顺序通过 101 和 102,可以获得 LPIC-1 证书,只有获得了 LPIC-1 证书,又获得 201 和 202 考试的专业人士才能获得 LPIC-2 证书。 +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+ {width=&amp;ldquo;181&amp;rdquo; height=&amp;ldquo;80&amp;rdquo;} 在附近的 Prometric 考试中心预定考试时间,接受考试,成绩会立即出来,证书要等 7 个工作日,从加 +&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+ http://www.</description>
    </item>
    
    <item>
      <title>Windows和Linux之争</title>
      <link>//blog.shell909090.org/blog/archives/326/</link>
      <pubDate>Fri, 06 Oct 2006 22:56:15 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/326/</guid>
      <description>在网络上大家经常能看到争论Linux和Windows哪个更实用的帖子。两者无非抱持两种论点，Linux胜在价格和灵活性，Windows胜在简便和可用。一般来说都是说，不论怎么说，Linux可以如何如何而Windows不行。或者是，Windows可以什么什么而Linux不行。
总体来说，Windows擅长于桌面应用而Linux擅长于服务系统。Windows最大的资本在于品牌和延伸。Windows的品牌和可乐的不同在于，可乐的品牌仅仅是牌子，是虚拟价值。一旦可乐公司全部烧毁，那么能否靠可乐的牌子重新站起还是一个问题。但是Windows的牌子还附带了用户对于UI操作方式的粘滞。一旦M$烧了，别人也是很难抢这个蛋糕的。Linux长处在于免费，就单机成本来说，Linux远远要低于Windows。但是这是不完全的运营模式。一个不赚钱的项目？如何吸引别人？
我不考虑Windows和Linux哪个更好，而是考虑另外两个问题。他们是否有存在的必要，以及他们谁更适合我。
大家想必知道，POSIX标准下还有Linux，BSD，Solaris的分别。如果今天不是WL之争，是否会出现UL之争呢？我不知道，历史无法假设。不过我相信，多个公司多种模式的混合竞争，会造成好的效应。很多Windows项目，都潜在的为Linux项目提供了资金(至少M$养活了很多程序员)。而很多Linux项目，又为Windows项目提供了技术和支持。最重要的是，没有Linux的追赶，windows就会无限制的膨胀，垄断，守旧，出现问题。而没有挑战Windows的需要，Linux也不会不断进步。
很多人往往把Windows和Linux等同到开源软件和商业软件。其实这是不严格的。软件往往分为商业软件，试用软件，共享软件和免费软件。商业软件是指代码封闭，作为公司的一个资产。可以转让，可以有条件开放。软件收取使用费用，并且出品公司对于功能提供保证。这样的一类软件。试用软件是商业软件的特殊版本，指限制或者取消了部分或全部功能，准许用户合法免费有限使用的一种特例。代码可以封闭也可以开放(但即使开放也往往是部分代码，甚至是理论代码)，通常是全部软件的一个部分，或者是修改版。往往可以通过缴费来变成商业软件。共享软件指软件作者保留软件的所有权，但是免费的发行软件，不收取费用或者仅仅收取手续费。源码可以封闭也可以开放。免费软件指作者按照源码形式发布软件，并且放弃源码所有权力。一般有有条件发布和无条件发布。GPL就是一种发布条件，虽然作者不继续拥有代码所有权力，但是这些代码不得进入商业领域。而无条件的免费软件，所有者放弃所有权力，任何人可以合法的运用其中的代码。
由此来看的话，大致是商业软件和试用软件一个阵营，共享软件和免费软件一个阵营。然后，Windows上有大量的共享软件，例如Winamp，这已经是Windows得以生存的一个基础了。Linux上面也有很多的商业软件，例如MAYA。往往是属于免费阵营的共享软件稳固了Windows的存在基础，给Windows系统提供了大量的功能和定制。而属于商业阵营的MAYA等为开发4Linux的软件，而为Linux提供了大量的资金。
至于哪个更适合我(注意，这里的我，可不是贝壳本人)，则要看系统的功能，成本，特性而定了。首先是成本问题，M$曾经提出所谓总体拥有成本。即，Windows通过一次购买就可以低成本的运行，而Linux一般都是要为机器配备高水准的管理员。所以管理员水平的上涨引发的费用应当被计入成本中。而且Windows系统对于操作者是基本不用培训的，而Linux需要培训操作者，因此也会产生成本。
问题在于，Windows一次购买1000台机器的时候，大约40W是的纯软件成本。如果原来是需要配置3个网管，现在要配置5个高水准的。那么原来大约需要12W一年，现在需要25W一年。如果3年内需要购买升级产品，则会导致Windows的成本反而高。问题在于，Windows也是会购买升级的，所以软件的成本也会平摊在每年上。当运行的机器多了，就会导致网管的工资上升不算啥的状况。而且注意，其中还不包括因为要在Windows上工作而需要购买的其他软件，例如Office。如此计算下来，单纯从配置的平均拥有成本讲，Windows不占有优势。
不过在雇员培训上，Windows就非常有优势了。现在会Office的雇员满天飞，不会才奇怪。因此可以说是无成本的。然后不会的人找起来反而困难，加上培训，每人成本就要高出100-200。而且非Windows环境和Windows环境交互上比较麻烦，所以这个成本还要更高。从这点来说，一般企业都不适合用Linux。什么企业适合呢？1000台以上机器，雇员学历偏高，在和他人交互上需要他人配合的企业。其实去了企业就可以明白说是政府了。
特性上说，Linux奉行的是专业分工合作的模式。由一个软件完成一个非常专的部分，例如排序，或者下载。然后通过交互通道来协调各个软件，达到一个复杂软件的构成。例如一个邮件软件，可以在里面加入HTML，加入加密，加入VIM编辑。定制性非常强，对于和某些常见任务接近但是细节上有区别，又强调细节必须实现的特殊任务。往往可以非常简单快速的完成。例如同样一个从Internel上面抓专利信息形成数据库的工作，Windows下要专门写程序，而Linux下面可以通过连接lynx|sed&amp;gt;来完成。
然而这对于使用者水平要求非常高，如果不熟悉系统，根本无法做到。对于学校，专家来说，使用Linux是非常方便的。而对于正常用户来说，Linux可就是鸡肋了。
windows的特性是大而全，思考是基于用户傻瓜的模式。固然没人愿意说自己是傻瓜，可是做傻瓜考量的软件总不做天才考量的软件好用。简单来说，windows不追求低成本，不追求好用，只追求用户最简单可以用。可见，随着电脑普及，windows这种思路是无法持续的，或者至少是要萎缩的。
最后一个是功能，Linux的功能和windows总体评价来看差不多。不过Linux的软件更多是专业用的，例如免费的符号表达求解。而windows更多是娱乐的，例如游戏。因此要实现有限功能的人可以自由选择，例如办公环境。需要专业的人最好用Linux，需要娱乐的人最好用windows。
综上来说，对于政府，学校，专家，需要专业软件的人，建议选择Linux。而对于中小企业，需要娱乐的个人，最好选择Windows。</description>
    </item>
    
    <item>
      <title>租房和买房</title>
      <link>//blog.shell909090.org/blog/archives/325/</link>
      <pubDate>Thu, 05 Oct 2006 07:03:10 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/325/</guid>
      <description>租房和买房的选择中其实有两个问题。报酬率，还有投资选择。
首先看报酬率问题，我们看房价/租房比值。
假定一个房子没有装修，这个房子每个月租金理论应当是多少？答案是房价在当前长期存款中的一个月平均利息(注意不是复利，房租可不会计算复利)，简单来说是总房价X乘r，其中r是长期存款的单月收入率。因为买房，在没有价格波动的情况下，和长期存款一样。都是一个投资，指望获得利润。如果理论租金高，那么会更多人买房子去租，导致房价上涨。而且出租间竞争导致房租下跌。由此平衡到利率。我们假定一般这两个投资期限都是五年，并且都没有风险(这两个投资对于货币贬值这个风险的反应是一样的)。注意这里的两个前提，理性投资，价格不波动，房子不装修。
投资者有一个等式，他对某个资产的每个月所得减去每个月支出，应当等于这个资产价值的当月获利。
那么我们再考虑房子装修的情况。一个房子是固定资产，可是装修就是更短期的损耗品。如果装修的可以使用期限是N个月，而一次装修费用是裸房总价的k倍(当然，k可以小于1)。那么装修在每期的费用就是总房价X乘k/N。然后我们综合上面，得到了房价/租房比值。每月所得(房租x)，每月支出(Xk/N)，每月利息(Xr)，x-Xk/N=Xr。X/x应当是1/(r+k/N)。还是注意这里的前提，理性投资，价格不波动。
我们先计算下，当前中国升息后5年期以上的月利率是0.345%(银行注明是月利率0.3%，我现在还不知道怎么计算出来的)。一次装修普遍是120个月为周期，大约投入资金为房价的1成(伪推定，按照房子地段和装修水平，此处变化非常大)。这样我们计算出233倍。如果是两成的装修，就是195倍。但是基本都在200-290倍间。装修越好，比值越小。房价/租房比值是指明你租房多少时间可以买一个房子的数值。当你装修很好的时候，很短的时间就可以重新买一个房子了。国际上一般这个值都在100-200间，可能是由于装修比较好，而且当前美元利率也比人民币高出一倍。当前上海的此比值在320-370间浮动，和我们计算的并不符合，原因就是在于远期预计。
我们现在保持理性投资的假定不变，那么当我们预计房价会以一定比值变化的时候。我们会改变买房和租房的行为，从而导致房价/租房比值的变化。那么，我们预计投资者的收入会在租房房价外加上房子上涨在每个月的平均所得XR(假定房价上涨当场折现，事实上你必须在一定时候出手折现，然后平摊在你拥有房子的这些年上。如果跌了，R为负)。现在，每月所得(房租x+房子上涨在每个月的所得XR)，每月支出(Xk/N)，每月利息(Xr)，x+XR-Xk/N=Xr。X/x应当是1/(r+k/N-R)。
同样，我们按照上面的假定来进行计算，1/350=1/233-R或者是1/350=1/195-R。R应当是0.143%-0.227%的样子，换算平均年预期房价上涨是大约是1.66%到2.59%。预期房价上涨越高，当前的房价/租房比值越高。关系式很简单，R=r+k/N-P，其中P是预期房价上涨带来的平均每月收入。
显然，当前房价/租房比值的状态显示大众的心理还是基本相信房价逐年上涨的状态。
当然，消费者未必在房屋上全理性，因为受到工作，生活，个性的影响，我们对于房子的选择也是非理性的。而且上面的市场也是完全市场。因此上面的分析仅仅是分析而已。
另外一个问题，就是投资选择问题。简单来说，就是房贷和存款利率的差的问题。这涉及风险评估问题，根据不同的风险，商业贷款的利率应当不同。但是中国目前利率固定，因此开始就没有讨论价值(加上公积金等等问题，更难说清楚)。但是一般来说，如果风险不变化，存款利率不变。提升贷款利率的结果会催生地下钱庄。反之则会疯狂贷款，催生呆帐。因为同样通胀水平下，风险越大，投资回报比例越高。
同理，如果说没有其他问题，贷款利率升高，风险也增大。不知道这是否预示着中国的领导层预期到中国将来房贷的返还风险增加。换句话说，失业或者房价下跌(高失业率或者高通胀率)，痛苦指数增加。</description>
    </item>
    
    <item>
      <title>网络性能测试和标准</title>
      <link>//blog.shell909090.org/blog/archives/324/</link>
      <pubDate>Sat, 30 Sep 2006 22:46:28 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/324/</guid>
      <description>前两天弄有线通的事情弄的郁闷了，所以就研究了网络性能测试。以后不用也是浪费，大家需要就看看吧。
1.目标
测试目的往往是测试清楚几个值，包括:IP包传输往返时延(RTT)，IP包时延变化(抖动)，IP包丢失率(Lost rate)，IP业务可用性，还有带宽(Bandwidth)。
2.适用标准
RFC 1242， RFC1944， RFC2285， RFC2432。
** 中华人民共和国信息产业部令第36号(http://www.chinanetcom.com.cn/mj/dxsc.asp?Unid=3810)
** IP网络技术要求&amp;ndash; 网络性能参数与指标(YD/T 1171-2001)
3.测试平台和工具
我们假定基于POSIX兼容平台测试，演示用的例子来自Debian Etch/Kernel 2.6.17-2-686。Windows下所需要工具可以参考移植工具。
iperf 网络带宽测试工具
paratrace 被动路由测试工具
hping2 网络联通和时延测试工具
wireshark(ethereal) 抓包分析工具
p0f 被动指纹分析工具
4.测试对象，方法，和结果分析
以下为实例测试，参数需要根据具体情况变化。
4.1.测试网络带宽
在服务器端运行iperf -s。
在客户端运行iperf -c 192.168.0.2
100Mbps网络环境下，得到结果为92.6Mbps，折合为11.5MB/s。即数据极限传输速度。
4.2.测试网络IP包传输往返时延(RTT)和IP包时延变化(抖动)
分主动被动方法，被动方法用wireshark抓包分析。下面主要介绍主动方法：
运行hping2 www.google.com -p 80。得到
56 packets transmitted, 56 packets received, 0% packet loss round-trip min/avg/max = 242.5/269.9/381.1 ms 即在主动建立的到www.google.com的TCP连接中(默认为TCP，可以使用UDP，ICMP，IP，具体请看hping2 &amp;ndash;help)，丢包率为0。平均传输延迟为269.9，抖动为138.6。
注：按照《**中华人民共和国信息产业部令第36号》，**往返时延平均值≤200毫秒，时延变化平均值≤80毫秒。此处已经超标。但因为测试环境和适用条件不完全吻合，因此无法作为有效证据。
4.3.IP包丢失率(Lost rate)
也分主动方法和被动方法，主动方法见上。被动方法是用wireshark抓包后，通过tpc.analysis.lost_segment标志分析丢包数量和总体数量。具体为。
用wireshark抓包。
用( tcp.srcport == 7007 || tcp.</description>
    </item>
    
    <item>
      <title>从踢牙老奶奶到火星文，从火星文到人工智能</title>
      <link>//blog.shell909090.org/blog/archives/323/</link>
      <pubDate>Sat, 30 Sep 2006 07:19:07 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/323/</guid>
      <description>先复制一个小的密码——
£³¨Ç£ê£±£¬£µ¨É¨Ù¨Ó¡££±¨Ð¨Ç¨Í£¬£±¨Ð£ä¨Ê¡£
¨×£²£ä£´£¬¨ß¨Ç¨Ñ¨È¡£¨ÙYA¨È£ã£¬£ê£±£´¨Ø¡£
£´¨Ñ£´£õ£¬£â£ã£â¨Ó¡££±£ã£±¨É£¬¨Í¨Ø£´¨Ó¡£
看的出来的——请和火星总部联系。
很多朋友可能不知道一个事情，不过不少人应该听说过无冬城之夜。台湾版的无冬城之夜本地化(l10n)中有一个重大bug。俗称踢牙老奶奶。
原文是：我看到一位老奶奶慈祥的脸——我抓住她的手，但是她竟然一脚踢到我的牙齿。
估计所谓踢牙，应当是英文kicked my teeth in，指漠视。最后应当是她竟然无视我。这是典型的一个翻译错误，而且估计可能是机器辅助翻译没有修润的结果。这个错误和当年大菠萝的温暖骷髅情况不一样，没有任何一个电脑会把蠕虫骷髅(wormskull)错成温暖骷髅(warmskull)。
由此肇因产生了很多火星文，例如说：这个游戏里面到处是踢牙老奶奶。
不过，无论是机器翻译不完善造成的火星文，还是人造的火星文。其实都是一个核心问题，NLP。
机器可以理解形式化的编程语言，并且转换为机器代码。是因为语言是具备一定的形式(form)的，或者叫做范式(pattern)。而例如说可以借助符号来做唯一分割(语法树的生成，或者说波兰树的生成)，符号的唯一性。(所谓重载，是用将参数等重载辨识元素附加在名字里面，导致名字的定义仍旧唯一，详细大家可以看有做对象导出的库的导出符号表)然而自然语言本身分割未必唯一，符号也是和上下文相关的。例如最有名的例子，中国队大败美国队获得冠军。(中国队大败美国队获得冠军。和中国队大败美国队获得冠军。前一句中的败是动词，后一个应当是使动用法)这句同时出现了非唯一分割和符号歧义，即使对于人来说，也是具备歧义句特征的。只有在特定的语境中，歧义才会消除。例如如果在表扬中国队表现的文章中，那应当是后面一个解释。
对于自然语言的理解，人工智能中叫做NLP问题(Nature Language Precess)。首先要处理的就是断词和消除歧义。其中涉及的问题到不繁复，但是很庞大。最关键就在于数据量上。
断句的话，一般简单的都采用HMM算法，这就需要有前后词或者词组的衔接概率作为基础。中文又具备一个恶心的特性，就是假借。尤其在口语和古语方言一类的东西里面，倒置使动频繁。所以单纯做HMM还不完全解决问题。现在有很多分词软件，是基于HMM的。拿古文上去试试就知道是不是了，例如：古之人诚不余欺也。
至于消除歧义，更是麻烦的要死的东西。要消除歧义，只有把所有歧义可能全部列举出来。然后查看上下文中相关词汇出现的频率，选择比较高的一个。然而对于上面那个使动用法的例子，两者相关词汇的频率应当差不多。而电脑又不会像人一样判断语境，因此要误判就不奇怪了。
还有一个就是上面踢牙老奶奶出现的原因，俗语(idiom)或者叫俚语。例如百口莫辩，如果不加处理，至少也是can&amp;rsquo;t argue with one hundred mouth(people)。事实上比较恰当的翻译应当是unable to give a convincing explanation for self-defense。当然，NLP的目的未必是翻译，因此可能出现别的错误。不过错误的原因是一样的，就是俗语不了解。这个问题人也会出现，只是人的智能就比电脑高一些。百口莫辩不知道典故错误翻译过去还算难免，买椟还珠这种东西即使知道椟怎么翻译，在真的翻译前也会问问典故的吧。</description>
    </item>
    
    <item>
      <title>玉女穿梭</title>
      <link>//blog.shell909090.org/blog/archives/322/</link>
      <pubDate>Wed, 27 Sep 2006 06:26:55 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/322/</guid>
      <description>今天弄了一个好玩的东西，esound4win。
现在在我的linux和windows上面有一堆穿来穿去的协议，大家看看实现方法，然后头晕不头晕。
首先是VNC，在windows上面安装RealVNC，启动服务。然后用linux的xvncviewer访问，就可以无缝在linux上面访问windows。
然后是Xming，这个是Cygwin的一个部分。可以在windows上启动X服务，这样我们可以运行一个远程跨平台的图形界面。在我的Debian上面是这样的。
用一个tty登录进去，然后
$export DISPLAY=192.168.0.X:0 $/etc/X11/Xsession &amp;amp; 这样就完成了完整的一个界面，界面控制是在windows下，但是程序是在linux下跑。和VNC不一样的是，windows的前端在操作的时候，其他的前端可以同步操作。
再然后是esound，这也是Cygwin的一个部分。可以在windows上开启一个esound daemon。方法是运行。
esound -tcp -public 在linux下面，esound可以跨站传输，方法是设定。
$export ESPEAKER=192.168.0.X:16001 当然，监听端口可以自行设定。
这样，就完成了从linux上将声音输出到windows听的功能。
最后，我讲讲我的实现。我先开了一个VNC穿到windows上操作，然后启动Xming。按F8退出到本地，用Ctrl+Atl+F2切换到tty登录，并且连接上Xming的前台X。然后Atl+F7返回GUI，F8返回VNC全屏模式。在Xming里面，开了个term。export了参数后启动xmms，并且切换到esound输出。再在windows下面运行esound4win，插上耳机。最后我点了下VNC中的Xming中的xmms的播放，声音出来了——世界多么奇妙？</description>
    </item>
    
    <item>
      <title>电脑程度测试</title>
      <link>//blog.shell909090.org/blog/archives/321/</link>
      <pubDate>Tue, 26 Sep 2006 05:58:34 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/321/</guid>
      <description>随便写了点问题玩玩——大家开心就好哦——
1.电脑开机和关机一样简单 2.会按照标准流程关机 3.非常习惯的在关机的时候点关机去 4.电脑不经常关机 5.为啥要关机？ 1.不知道啥叫重装系统 2.定期找人重装系统 3.会自己重装系统 4.用过windows以外的系统 5.用的是自己定制的系统 1.从来都只在网络上听歌而不下载 2.没有用过CMD窗口下的命令 3.会按照网络上的说明调整系统 4.中了木马会手工查找 5.经常在自己的论坛或者wiki上写东西 1.看到弹出一个对话框就习惯的按回车 2.删除错误了去回收站里面找 3.文件按照分类摆放 4.经常写两个脚本用用 5.经常猜到将来会流行什么类型的软件 1.电脑里的软件都是中文的 2.可以用一些英文软件 3.偶尔自己装几个软件试用一下 4.经常试用各种软件 5.一般只用自己熟悉的软件 1.出现异常的时候手足无措 2.出现异常时候的反应是，中病毒了 3.出现异常会去论坛上提问 4.出现异常会提交报告 5.出现异常会条件反应出出错的原因 评：
5-8分：您是标准的电脑白痴，除非有人帮忙，否则电脑就是废物。 9-12分:您刚刚学会用电脑，不过还不是很熟练 13-16分：您的电脑还算不错 17-20分：已经算是个高手了 21-25分：对您来说，用电脑和呼吸一样自然，你是神吗？ </description>
    </item>
    
    <item>
      <title>上海有线通网络封锁解析</title>
      <link>//blog.shell909090.org/blog/archives/320/</link>
      <pubDate>Tue, 12 Sep 2006 09:01:16 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/320/</guid>
      <description>OK，今天贝壳稍微辛苦了点。给用有线通的朋友们准备了份礼物。
贝壳今天解析了有线通的抓包，发现了有线通限制P2P的方法，那就是，丢包。
TCP传输的时候，会有一定几率的丢失部分或者全部传输的数据，对方会根据你的SEQ和checksum来分析是否接收到了所有的包，并且返回一个包，告诉你报文状况。一般来说，丢包率都是很小的，大约是0.1%以下。丢包太多往往意味着各种网络异常，例如抢占MAC的sniffer方式就会有大量的丢包。这里是丢包率的详细解释。
贝壳刚刚截取了32秒的数据，总共传输3082个，丢包率是ED数据丢失119个，其余总共丢失2个，总丢包率3.9%。图片内有相应的截图，并且贝壳可以提供多次的抓包分析证明。
贝壳又做了一次分析，这次贝壳从skycn.com上面下载directx9c，同时保持ED通信。ED是7K上传40K下载的样子，HTTP是15K的样子。在60秒内总共是16763个包，其中ED相关丢包321个，非ED相关丢包13个，丢包率1.99%。
通过这个就可以证明，即使不说有线通封锁P2P的问题，有线通的网络服务质量也存在硬性问题。</description>
    </item>
    
    <item>
      <title>X system 配置文件执行流程分析</title>
      <link>//blog.shell909090.org/blog/archives/319/</link>
      <pubDate>Mon, 11 Sep 2006 21:47:55 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/319/</guid>
      <description>1.startx启动流程
/usr/bin/startx +-&amp;gt;/etc/X11/xinit/xinitrc |-&amp;gt;/etc/X11/Xsession |-&amp;gt;~/.xinitrc |-&amp;gt;/etc/X11/xinit/xserverrc |-&amp;gt;/usr/bin/X11/X -&amp;gt;~/.xserverrc
startx脚本会分析用户主目录下是否存在特殊配置文件，如果不存在则使用系统默认脚本。默认脚本分两个部份，xinitrc启动客户端部份，xserverrc启动服务器端部份。
xserverrc内容仅为启动X。xinitrc会执行/etc/X11/Xsession，而后进入session分析。
2.Xsession
/etc/X11/Xsession -&amp;gt; /etc/X11/Xsession.d/*
/etc/X11/Xsession和/etc/init.d/rc很类似，是用来循环依次启动其他脚本的控制脚本。他负责启动/etc/X11/Xsession.d/下的所有文件。其中50xfree86-common_determine-startup文件会依次检测以下3个文件，并且设置到STARTUP变量中。x-session-manager;x-window-manager;x-terminal-emulator;最后99xfree86-common_start文件会执行exec $STARTUP;完成整个系统的启动过程。
3.gdm
gdm服务被/etc/init.d/gdm启动，而后读取/etc/gdm/gdm.conf配置自身。后面是基于理论分析，没有加以验证。
|-gdm---gdm-+-Xorg | `-x-session-manag-+-scim | `-ssh-agent 上面是pstree的结果，第1个gdm是/etc/init.d/gdm，第2个gdm是/usr/bin/gdm。gdm先启动一个X作为服务端，否则自身也无法以图形方式显示登录界面。而后gdm成为此X界面的唯一用户，显示登录系统。在用户登录后，gdm启动/etc/gdm/Xsession。这个脚本的内容和/etc/X11/Xsession非常类似，我怀疑为什么他们不用链接的方式(可能是因为包的关系？)。这时整个启动活动就结束了。</description>
    </item>
    
    <item>
      <title>Linux配置文件测序</title>
      <link>//blog.shell909090.org/blog/archives/318/</link>
      <pubDate>Mon, 11 Sep 2006 06:44:44 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/318/</guid>
      <description>CopyRight:
Written by Shell.E.Xu. Published under GPL.
KeyWord:
Linux bash profile 配置文件。
Abstract:
利用变量声明次序测定多个配置文件是否被调用以及调用的次序。
环境：
Debian/GNU Linux starg 3.1
Kernel:2.6.16-686-2
测定方法，加入变量TEST=XXX。此方法可能被某些变量解除函数解除，因此不予执行的反应未必是真，不过执行次序一般假不了。
1.tty登录时
/etc/environment;/etc/profile;~/.bash_profile-&amp;gt;~/.bashrc-&amp;gt;/etc/bashrc;
/etc/environment;/etc/profile;~/.bash_login
/etc/environment;/etc/profile;~/.profile
当上级启动过程中文件不存在时，才进行下面的过程。
2.GDM登录时
/etc/environment
3.新启动bash时
/etc/bash.bashrc;~/.bashrc-&amp;gt;/etc/bashrc;
4.~/.inputrc
根据文档，这个函数在readline函数初始化时启用。
5.结论
如果需要有效执行命令，需要同时修改/etc/profile和/etc/bash.bashrc。因为GDM登录的时候不执行登录脚本顺序，所以仅仅修改/etc/profile会造成对GUI下面开的term无效。虽然/etc/bashrc在理论上也有效，但是一旦~/.bashrc中没有引用，则无效(例如Debian中的root，由于安装系统的时候没有copy skel，所以缺少很多.XX文件)。如果仅仅是设定变量，可以用/etc/environment。该文件没有找到资料，其中仅可以设定变量(不用export，应当是被某程序作为配置读取而非脚本执行)，据分析是登录时当即起效。</description>
    </item>
    
    <item>
      <title>有线通封锁变通办法</title>
      <link>//blog.shell909090.org/blog/archives/317/</link>
      <pubDate>Sat, 09 Sep 2006 05:27:34 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/317/</guid>
      <description>虽然决定不用有线通了，但是还是要熬到年费结束。所以稍微研究了有线通的封锁方法，看看有没有变通方案。根据我上面的研究，有线通浦东地区封锁的是协议。所以我实验打开了BT和ED两个协议。结果证实，这两个协议同时打开对于单个协议的速度稍微有影响，估计是TCP的优先相应问题。不过总体速度比单个协议高了很多。昨天打开的时候，ED是30下载5上传，没有BT。今天同时打开的结果是BT45下载10上传，ED17下载10上传。总体来说有62下载20上传左右，高了很多。
其中针对BT说一句。之所以有这么高的速度，主要因为打开了BT中的加密协议头优先。这样在某些传输中就被当作HTTP连接，这个速度就是赚到的。不过现在不多，因此也没有太高的提升。不过总体下来不无小补，所以提供给继续要受到有线通荼毒的人士用用。
另外，有线通对HTTP下载不限速。大家可以把HTTP下载速度降低到不影响P2P连接的水平(例如用flashget的限制速度功能)，慢慢下。这样你的总体平均流速是最大的，同时对于有线通的杀伤也是最大的。</description>
    </item>
    
    <item>
      <title>音乐文件转换技巧和脚本</title>
      <link>//blog.shell909090.org/blog/archives/316/</link>
      <pubDate>Fri, 08 Sep 2006 01:50:47 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/316/</guid>
      <description>好久没动手写啥东西了，最近在准备LPIC1考试。Will everyone keep finger cross 4 me?嘿嘿——
这个题目是个大家伙，反正每天写一点，也不忙在一时。大家有啥需要了解的，也可以问在下面。我会更新的。
copyright:
本文所提到各种软件版权归各个软件开发者所有。文章内容及所有附属脚本为独创，按照GPL发布。
keyword:
音乐 格式 转换 脚本 标签 bash shell script mp3 midi ape flac cue
toc
directory:
1.文件格式解说
1.1.mp3/ogg
1.2.midi
1.3.ape
1.4.flac
1.5.cue/toc
1.6.wav
1.7.iso
2.文件转换
2.1.wav/mp3
2.2.wav/ape
2.3.wav/flac
2.4.midi2wav
2.5.iso/wav
3.转换细节问题
3.1.按照cue切割
content:
1.1.mp3/ogg
这两个是非常有名的音乐压缩文件，其中MP3是mepg II layer
3。不要以为是mpeg
III。一般来说，MP3都被认为是一种小巧但是音质比较差的格式。不过事实上，要指摘MP3的音质前，你先自己找找是否满足了一定条件。周围是否安静，没有噪音。音源是否高清晰（拿MP3还原出来的CD是没意义的）。声音设备是否足够好（至少也要是高质量的音响或者高档耳机，耳塞或者200－300的所谓音箱根本不用说）。如果没有上述条件，那么MP3的音质也算过的去的。MP3格式的压缩比值大约是10：1，和wav相比。另外，如果有CD的话，最好使用lame进行适当压缩。而不要为了方便随便使用一个压缩工具。压缩最好使用VBR格式。这种格式本质上没有什么变化，只是在信息流高的地方使用高的编码格式，以获得最高的质量/空间比值。ogg具体情况没有研究，不过使用上和MP3没有区别。
1.2.midi
midi是所有格式中唯一不记录音频数据的音乐格式。midi记录的实质上是发声事件，简单来说就是什么时候鼓响了一下，什么时候钢琴的哪个键被按下了。因此midi也是没有立体声效果的。除非你使用特殊的软件指定某个乐器演奏时候的位置，然后根据环境生成出相应的音乐文件。midi文件在当前主要是两个用途。一个是midi记录了乐手演奏时候的指法细节，也记录了曲子的曲谱。midi本质上就是谱子。另外一个是midi的超小体积使得在某些嵌入系统（例如手机）上面可以作为背景音乐。
1.3.ape
ape是一种无损压缩格式，你可以把ape看成是一种只能对wav作用的zip文件。压缩比一般是2:1。
1.4.flac
flac和ape基本差不多。
1.5.cue/toc
cue/toc不是音乐文件，他们是用于flac/ape等光盘的音轨定义。一个CD可以有多个音轨，iso会记录下音轨的切分方式。但是ape就不行了。于是eac等抓轨软件生成cue来切分音乐文件。往往看到ape的发行方式是一个ape和一个cue，直接打开ape往往是一首非常长的歌曲。其实切分信息在cue里面。虚拟光驱使用的bin文件也是一样，会有配套的cue文件。两者可以用cuetools和mkcue互相转换。
1.6.wav
wav文件又叫做PCM编码格式。这是一切音乐的基础。无论你是哪种格式，最后都会被还原成wav的某种格式或者变形，才能够从声卡中播放出去。当然，midi的情况特殊，不在此列。
1.7.iso
iso也不是音乐文件，但是和音乐的关系非常密切。大家都知道iso是光盘的镜像，其实说的还不确切。iso本身就是光盘内容严格1字节比1字节复制的结果。至于有的为什么有其他格式。那就涉及光驱设备工作和数据流／加解密的问题了。
另外说一个iso的问题，大家知道linux下面挂载iso的指令是
# mount -t iso9660 -o loop file /mnt 这其实是两个步骤，一个是</description>
    </item>
    
    <item>
      <title>上海有线通，不爽</title>
      <link>//blog.shell909090.org/blog/archives/315/</link>
      <pubDate>Tue, 05 Sep 2006 22:07:46 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/315/</guid>
      <description>最近贝壳要换ISP了。大家知道，贝壳用了5年多的上海有线通。虽然速度不快，偶尔还有降到半速的现象，但是总体来说还是不错的。TTL跃点主要在12到16上下(经过12-16个路由器)，极限上传一般在55K/s上下。虽然说和标称有一定区别，不过考虑IP封包头问题，也还可以。只是最近有线通不怎么像话，封了P2P不说，还不告知。去询问，又不承认。幸好贝壳两个月后包年到期，到时就跑了结束。
开始(8.30左右)贝壳的ED速度突然从50K/s持续上传下跌到7K/s持续上传。贝壳以为是电信故障维修，造成数个连线失效，路由重生成后形成瓶颈。这现象照理不会在电信这种大公司发生。不过按照莫菲定律，什么坏事都可能发生。就随他去了。24小时以后，贝壳打电话到96877报修。对方开始说会不会是系统问题，windows新出病毒云云。贝壳两台电脑，平台不一样(Intel和AMD64)，系统不一样(WindowsXP和Debian/GNU Linux)，所用软件不一样(eMuleVC，BC0.70和aMule)。不会都是出这个问题吧？再说windows出病毒，关linux啥事情？
维修人员看看没法说的通，换了口风。说这种问题不能算是问题，他需要“提交”一下。OK，你本身做维护的，还向谁提交问题？我也不管他，这几天忙，没空和他唠叨。说好好，你提交下看看。
过两天空了，看问题照旧，贝壳坐不住了。莫非我碰到了P2P封锁？贝壳先查看了网络上的评论，说上海有线通有这问题，已经有人在315网上提交了抱怨。贝壳下面做了几个测试。
首先将eMule复制一份，保留原先的配置。然后关闭所有共享，只共享一个文件。名字起的奇怪点，这样就没有别的下载客户了。然后找一个朋友来做下载，速度是5K上下，而且一般有下没上。
然后贝壳打开apache2，共享同一个文件，打开端口映射(ED等软件的端口映射也是做好的，经EtherReal核查没有问题)。下载速度是50K上下，一般有上没下。
再打开BT，勾选其中“加密数据包头”为“优先”。然后在传输测试中，多数客户的速度是2K-3K，但是一个也是BC0.70的客户，本地发起连接，速度高达50K。后面偶尔也会出现这样的客户，估计是因为不是所有BT客户端全支持加密数据包头的。
最后，测试Debian/GNU Linux从ftp.linuxforum.net下载更新的速度。这是ftp和http混用协议，一般在70K以上，最高甚至达到120K。
至此，基本可以下结论，有线通封锁了P2P类软件的使用。
最可笑的是，我再次打电话过去。他们的服务人员开始还跟我念叨机器问题等等。然后我把测试方法一说，他们立刻改口，说从不保证任何P2P类软件的稳定。只保证Http协议的传输速度。什么时候宽带还有条款，说只能保证Http协议的速度了？如果说只衡量HTTP协议速度，那条款应该重新修订。如果说网络速度，一般都是指IP封包的传输速度。或者放松说，底层网络封包的传输速度。有线通此举就是明显的侵权。上述电话可以向有线通查询的，工号7061。
任何愿意起诉有线通的同志，贝壳这里免费提供技术支持，提供有线通的网络数据统计(ntop统计结果)。大家高兴起诉的，贝壳提供声援和支持。并且贝壳郑重表示，有生之年，见到用有线通的就游说用别的宽带，即使他道歉并且解除封锁也不例外。自10月底有线通到期后，贝壳即抽空银行资金，签订解约协议，改用ADSL。</description>
    </item>
    
    <item>
      <title>Helix关键提示</title>
      <link>//blog.shell909090.org/blog/archives/314/</link>
      <pubDate>Mon, 07 Aug 2006 04:56:28 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/314/</guid>
      <description>今天被整死了，好久不用Helix，结果细节忘记光了。
开启Helix后的测试是http://localhost:port/admin/index.html，其中port是安装时候指定的管理端口。然后要输入安装时候指定的用户和密码。开的开吧——那就用不着它了。
在HelixProducer中的设置是Push, user &amp;amp; pass，然后用户和密码就填写管理员的（要么刚刚的管理界面里面自己新建一个去）。端口改安装时候设置的http端口，千万别搞错了。path可以不写，传输方式UDP。最后要记得流名字。
然后我们的点播URL就是rtsp://ip:port/path/filename。port是你指定的rtsp端口，path是HelixProducer指定的，不写就没有，filename是流名字。
希望大家顺利吧。</description>
    </item>
    
    <item>
      <title>testren</title>
      <link>//blog.shell909090.org/blog/archives/313/</link>
      <pubDate>Thu, 03 Aug 2006 22:18:01 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/313/</guid>
      <description>shell909090.testren.com，相信很多我的朋友都在上面做了题。其中成绩最高的是李默雯小姐，一半答对——说实话，她应该去赌球的，我的题目可不比世界杯好猜——。最低的是Stella同学，相信伊直觉差的和我有拼。
下面公布下正确的答案：
1、下面哪种技术/标准是贝壳完全没有研究的？
c、 CLR
CLR是用于.net的Common Language
Runtime，小马在这里弄错了——亏你还和我一起看的SQL。
2、下面哪个组织/论坛是贝壳没有提供过技术支持/服务的？
d、 www.foxmail.com
其他几个贝壳至少都做了服务的,sinofrance是GIGI工作的那个。
3、贝壳邮箱的909090是？
a、 缓冲区溢出中的代码
NOP指令，熟悉ASM的人应该看的出来——
4、贝壳家里面完全没有人做过的职业是？
d、 海员
有在船上工作的，但是没有出海。
5、贝壳曾经在2006年春天出去旅游，当时和多少人去了几个城市？
c、 1个5城市
我自己去的，深圳没啥好写的——所以看我博客的同志，辛苦了。
6、贝壳和上面广告中的Shell Company的关系是？
a、 没有关系
恩，不要想太多。
7、贝壳名字的由来是？
c、 有一种算法叫shell
其实也是有个人叫shell的，算法就是以他命名的。问题是——我不崇拜那家伙——
至于说交互程序的，的却，很像，可惜，不是——
8、贝壳属于以下哪个星座？
d、 巨蟹
有的人——错的很不应该阿——
9、贝壳曾经养过以下哪种动物？
a、 狗
答狗熊的给扔出去——
10、下面哪门课，贝壳一次就过了？
a、 体育
这是所有题目错误最高的——所有全错了。贝壳高数因为太嚣张，结果被85分关掉。体育到是因为认识老师（李忠彬阿，Stella不知道还记得不——不好意思——），所以一次过去。
11、下面哪个学校，贝壳完全没有念过？
d、 汇文中学
恩，因为北京和上海都有汇文中学（这个我是跟李默雯小姐确认过的，她就是上的汇文，所以一次就答对），但是贝壳从来没有上过任何一个汇文中学。因此拿来蒙人——
12、以下哪种技能，贝壳完全不在行？
c、 八卦
呃，无论是八卦，还是八卦掌，贝壳全不会——
答其他的去撞墙吧——
13、下面哪个不是贝壳的昵称/外号？
c、 阿迪达斯
答D的去医院检查眼睛去——
14、贝壳的DVD存档总资料量是多大？
d、 450G
没啥好说的——
15、贝壳维护的桌面系统最常未重装时间是多久？
嘿嘿，厉害吧——
16、下面哪种系统，贝壳本人的机器上从来没有运行过？
a、 Minix
混蛋minix跑不起来——So。
17、贝壳曾经在自己的机器上运行过多少种类的系统？</description>
    </item>
    
    <item>
      <title>新版MSN试用报告</title>
      <link>//blog.shell909090.org/blog/archives/312/</link>
      <pubDate>Sun, 30 Jul 2006 20:43:37 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/312/</guid>
      <description>最近MSN又更新了，出乎我的意料，这次是stella同学率先跟进的。结果伊在刚刚用的时候发现好友全部消失了，正在惊惶的时候，偶撞上去打招呼，结果被伊捉来拷问。最后恢复是恢复了，不过还欠下新版MSN的论文一篇。
虽然不知道伊何时对MSN的机制感兴趣了，不过偶还是写了一个blog来分析新MSN的战略意义和运行机制。
免责声明，以下内容尚没有经过严密测试。如有偏差，作者不负任何责任。
copyright
itten by Shell.E.Xu, public under GPL.
abstract
新版MSN的功能和工作原理。
keywords
N，安全，兼容，分布式
context
我们先分析what&amp;rsquo;s new上面提到的两个新功能，语音通讯和共享文件夹。
1.语音通讯
这东西很老啦，我测试的情况下是直接连接，连对方的IP都暴了出来，而且还不稳定。不知道为啥微软拿来宣传。
2.共享文件夹
共享文件夹的功能不是MSN的独创，但是MSN的共享文件夹思路很特殊，是针对每个人共享的。这不同于设置共享文件夹权限的做法，针对每个人的共享在正常来看差不多就是文件传输。通常IM的文件共享都是共享一个文件集，然后设置不同人的访问权限。这个时候IM宿主的功能就好像一个文件服务器。但是MSN的做法使得管理者不是单个IM宿主，而是两个。而且IM宿主不必在线，也可以修改文件。对此我跟踪了下整个实现过程，发现是这样的。
MSN使用了%ROOT%Local SettingsApplication
DataMicrosoftMessenger%EMAIL%目录来保存和共享有关的东西，对每个人的共享内容都会保存在SharedFolder下面的Email下。每个人只保存自己共享出去的，对方的内容在联机的时候同步。这里要提到一个概念，硬连接和软连接。假定文件内容相同，连接能减小空间损耗。NTFS虽然在理论上支持了硬连接，但是却没有在platform
API里面导出相关函数。何况FAT根本不支持硬连接。所以MSN使用硬连接的可能为0。至于软连接，同样，FAT根本不支持。所以使用软连接的可能也不大。因此，假定你一个文件要共享给所有人，使用MSN的话你要重复拖曳，并且多次保存。（短期试用，还不知道是否真的必须这样）这样共享文件根本不经济。更何况每次上线都要进行同步，取得别人的更新，这样对网络也非常浪费。同时还存在下载染毒文件的风险（当然不会有运行的风险）。不知道微软存了啥心思。
3.Windows Live Safely Scanner
微软在共享文件夹里面配套提倡的，就是Windows Live Safely
Scanner。其他厂商为了增大合作空间，一般在查毒功能上都是利用外包方式，只要你提供一个杀毒软件主程序的路径，就可以利用%PATH%
%FILE%的方式查毒。微软就在MSN内推荐使用本公司的产品。由此看出微软准备借助IM的优势，向安全领域进军。
4.联系人列表加密
这个是本人最不齿的功能，如果要加密了联系人列表，那么gaim一类的东西就全成了废物。微软如果真的有这个心思，完全是本着把开放协议搞成封闭协议的精神在做事了。如此无异于步QQ的后尘。
5.其他特征
新版MSN登录时间一般比较长，估计是在做功能通讯。有得有失，大家就别计较了吧。不过如果你登录过，速度就比较快了。MSN新版的稳定性还是不行，stella小姐被吓个半死，我这里是分组丢失。不过伊重新登录就恢复了，偶拿gaim登录也正常了。</description>
    </item>
    
    <item>
      <title>BOINC分布式计算</title>
      <link>//blog.shell909090.org/blog/archives/311/</link>
      <pubDate>Thu, 27 Jul 2006 08:11:44 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/311/</guid>
      <description>嘿嘿，贝壳我现在正式参加了BONIC的两个项目，SETI＠home和Einstein＠home。这两个项目是通过个人电脑的剩余CPU能力来计算大规模运算项目。SETI是寻找外星人的存在。通过个人电脑来计算美国航天局射电望远镜的信号，来分析外星文明的存在可能。Einstein是在2005世界物理年发起的计算引力波的项目。
个人觉得计算来说，PII以上的计算机就可以参与计算，以下的就算了吧。因为您算出来的时候已经超时了。运算是在后台进行，除了系统指示上CPU基本全是满的以外没有什么异常。电影照看网络照上，就是CPU温度可能高了点。不过相对人为和意外来说，这点造成的寿命问题完全可以忽略。
BOINC还有很多有意思的项目，包括计算蛋白质折叠，计算病毒分子情况（以上的都是用来寻找疫苗的），还有大气环流（这个是预报自然灾害和预测人类行为影响的），计算防疫药品最有效分布，计算最大质数，分解大质因数等等。很多都有相当的科学意义。
BOINC的安装相当简单。下载程序，安装，在计算主页上注册，在软件上登录。然后你就不用管了，只要定期看看有多少分就好了。可以用多个计算机算一个项目，也可以一个计算机算多个项目。建议每个计算机算两个项目，这样一般不会超时，而且也不会没的算。
如果您有兴趣，可以参看。
伯克利开放式网络计算平台
Berkeley Open Infrastructure for Network Computing
如果决定参加的话，最好再加入中文站点上面列出的项目小组，为世界做贡献的同时为中国添光彩。
SETI@China , Einstein@China , LHC@China , Predictor@China , Rosetta@China , CPDN@China</description>
    </item>
    
    <item>
      <title>祝自己生日快乐</title>
      <link>//blog.shell909090.org/blog/archives/310/</link>
      <pubDate>Sun, 16 Jul 2006 00:42:32 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/310/</guid>
      <description>原来人生不过如此。</description>
    </item>
    
    <item>
      <title>删除无赖</title>
      <link>//blog.shell909090.org/blog/archives/309/</link>
      <pubDate>Fri, 14 Jul 2006 01:34:54 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/309/</guid>
      <description>大家知道，从3721首开记录后，很多软件都有卸不掉的情况。多数是插一个dll到explorer里面，让你无法UnloadLib，也不能kill。然后保护一堆文件不能删除，再放注册表项目。3721还加了一个驱动，这样就是神仙也删不掉。
骂人不多骂了，方法两个。http://www.sysinternals.com/Utilities/PendMoves.html有一个项目，可以延迟删除。换句话说就是在启动的时候，讨厌的流氓加载前让内核做删除动作。很方便，重起下就没了。至于怎么找这些流氓的位置。http://www.sysinternals.com/Utilities/Autoruns.html同样公司，这个项目可以将开机所有自动加载的模块全部找出来。IE的插入组件也可以找出来。
不过这个办法虽然好，可是还是会有破绽。万一连这两个软件运行都屏蔽呢？这个时候可以用linux live+ntfs r/w modules，这样删除任何东西的时候，神仙也挡不住。
BTW,做live的时候，千万记得放一个ntfsfix在盘里面。贝壳的/dev/hda1有个logfile没有clean，结果死活不能写挂载……</description>
    </item>
    
    <item>
      <title>论linux引导过程</title>
      <link>//blog.shell909090.org/blog/archives/308/</link>
      <pubDate>Thu, 13 Jul 2006 23:36:57 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/308/</guid>
      <description>keywords
引导过程, initrd, init, rc
copyright
Shell.E.Xu撰写，按GPL发布。
abstract
简要介绍了引导流程的流转。
main
1.grub&amp;amp;lilo
引导的第一步，是启动引导管理器。这个种类非常复杂，从最早的MBR+专用引导扇区到现在的NTLDR,LILO,GRUB，大小和功能都有非常大的变化。但是主要来讲目的都是一样的。当今引导程序一般都分两个部分，引导扇区和主引导模块。NTLDR来说，C:NTLDR文件即是主引导模块。GRUB的主引导模块在/boot/grub/stage2，至于引导扇区，不用太过关心的。
主引导模块在加载后都会读取引导配置文件，当代流行引导管理器其实都有命令交互功能，可是你总不能指望每次启动都先敲堆命令吧。GRUB来说，配置文件是/boot/grub/menu.lst。注意，GRUB是在启动的时候读取配置的，但是LILO是根据配置来安装的。所以LILO在改变配置的时候需要重新安装。
2.vmlinuz&amp;amp;initrd
引导管理器会自动的将vmlinuz安置在内存中，然后寻找initrd传给vmlinuz。在没有initrd的情况下也可以引导，不过当下的趋势是将引导过程用脚本管理，放置在initrd中。这样引导参数解析，模块加载，设备管理都纳入了脚本的范围内。用linux哪能不会脚本，因此linux引导就有非常强的可以定制特性。
initrd分两种，cpio-initrd和ramfs。这里主要介绍
cpio-initrd。cpio-initrd的建立方法很简单，我上篇文章中有介绍。大致来说，就是把一些内容打包备份而已。vmlinuz会启动根下面的init脚本，我下篇文章会专门解析debian中配置的initrd.img的init脚本。现在大致说下。
init首先建立两个目录，建立/dev系统，并且建立null和console文件，否则udev的运做会出错。然后解析引导参数，解析到每个变量。而后依次运作init-top,init-premount,init-bottom（这些目录内的文件）。在init-bottom运行前会运行包含指定的脚本，这个脚本由BOOT参数指定，并且内部包含mount函数。这样可以通过指定BOOT参数定制mountroot的过程。最后是迁移大部分的系统过去（主要是/sys和/proc），最后通过run-init直接chroot和init。
3.init&amp;amp;rc
init运行的开始，会寻找inittab。其中指定了系统的很多特性，最主要的是runlevel。首先是寻找/etc/init.d/rc并且运行，并且把运行级别作为第一参数传递。然后rc会寻找/etc/init.d/rcS和/etc/default/rcS，如果有的话则包含或者运行。然后rc会以参数S运行自身，过程和正常启动一样。这个作为基础启动参数，无论你以何种级别运行都会运行rcS.d里面的脚本。
4.service
service启动的时候，是用rc?.d的脚本启动的。多数会用start-stop-daemon作为另外一个身份启动成守护进程。
5.bash&amp;amp;gdm
6.conf files
reference:
[1].</description>
    </item>
    
    <item>
      <title>debian live</title>
      <link>//blog.shell909090.org/blog/archives/307/</link>
      <pubDate>Tue, 11 Jul 2006 09:10:46 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/307/</guid>
      <description>准备做debian
live了，期间有什么东西都会写在这里。大致来说就是打算实践一个项目。
copyright
Shell.E.Xu撰写，按GPL发布。
abstract
用debian3.1testing为基础建立live cd。128M以内，无X系统，无交换区和/tmp，使用内存盘。
target
用于挂载ext3 ntfs vfat文件系统，实施文件系统管理和修复，访问文件系统内容并修改。
注：准备特别针对3721，yahoo助手之类类似rootkit的东西实施扫描清理。
environment
debian 3.1 starg testing（貌似是废话）
grub stage2_eltorito支持光盘启动
linux-kernel-2.6.15-8 直接使用deb包中内容
initrd 在kernel包中包含
step by step
1.建立基础文件系统并且复制所需文件
建立~/syscd/boot/grub/，复制menu.lst stage2_eltorito文件过去。
复制vmlinuz system.map config到~/syscd/boot中，注意ISO9660格式中文件名不能过长（多少记不清了）。
复制/lib到~/syscd/lib，并且调节内容。（我个人在其中添加了我需要的nVIDIA显卡驱动）
2.grub和iso
cd \~ mkdir initrd #关于initrd的原理生成和使用后面讲 mkdir root #这个是用于内存的镜像内容 mkdir cramfs #这个是只读镜像内容 vi \~/testsyscd ------------------我是邪恶的分割线-------------------- #!/bin/bash qemu -no-kqemu -cdrom \~/syscd.iso -boot d &amp;gt;/dev/null ------------------我是邪恶的分割线-------------------- chmod 755 \~/testsyscd vi \~/mksyscd ------------------我是邪恶的分割线-------------------- #!/bin/bash COMPRESS_MODE=-9 cd \~ # block of create initrd.</description>
    </item>
    
    <item>
      <title>linux中文说</title>
      <link>//blog.shell909090.org/blog/archives/306/</link>
      <pubDate>Sun, 02 Jul 2006 19:18:31 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/306/</guid>
      <description>linux号称可以支持全部语言，其实细节上还是有不少问题的。具体情况大致是这样的，linux的中文支持分三部分，locales，字体，设置。
首先是locale的部分，这个最简单不过，用root运行dpkg-reconfigure locales，然后选择你需要的解码方式，最后再设定系统默认语言（这个是可以修改的），就OK了。
然后是字体，字体的设定比较复杂，不过在debian中安装所有中文桌面的字体就可以了。不用自己去绞尽脑汁。
最后是设定，这个比较复杂。因为可定制性非常好的系统，无法避免要用大量的脚本来定制。如果可定制性差，相信你也不会用了。和中文相关的设置大致有一下几个，针对debian系统。
/etc/default/gdm:LANG=zh_CN.GBK #gdm登录时候的locales
/etc/default/locale:LANG=zh_CN.GBK #这个是系统默认登录的locals，如果你使用命令行登录就是使用这个的
/etc/environment:LANGUAGE=&amp;ldquo;zh_CN:zh:en_US:en&amp;rdquo;
/etc/environment:LANG=zh_CN #这个是登录进入X后的设置，你运行的所有程序基本都是使用这个
dpkg-reconfigure locales的默认语言设定修改的是/etc/default/locale，所以对X登录进去后的程序不一定起作用。一般情况下这zh_CN的设定就通吃了，不过有的时候有点小BUG，例如term下面vi后退出，就变成看不懂的乱马了。这个时候要重设屏幕才可以恢复。而且在输入的时候没有——的，很多东西也看不到。所以我改成了zh_CN.GBK，然后出现了两个问题。
一个是gvim不运行了，这个看了看别人，这么解决。
----------------------\~/.gvimrc----------------------- set encoding=gb2312 set langmenu=zh_CN.GB2312 set imcmdline source $VIMRUNTIME/delmenu.vim source $VIMRUNTIME/menu.vim --------------------------------------------------------- 保证这个文件里面有这些内容就可以了。
然后是gtk1.X的程序都不正常了，主要是xmms和audacity。这个看了人家忽悠半天，最后这么解决的。
-----------------/usr/bin/env_zh_CN--------------- #!/bin/bash LANG=zh_CN exec $@ ---------------------------------------------------------- 然后chmod a+x /usr/bin/env_zh_CN
再修改所有运行语句成env_zh_CN xmms
我修改了两处。
世界基本就清静了。</description>
    </item>
    
    <item>
      <title>Google earth</title>
      <link>//blog.shell909090.org/blog/archives/305/</link>
      <pubDate>Sat, 01 Jul 2006 05:35:56 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/305/</guid>
      <description>google earth很多人已经用过了，不过google earth有linux的bata版了。下载解压，解压界面非常漂亮，很容易上手。运行来看，是QT的界面。不愧是google阿。</description>
    </item>
    
    <item>
      <title>香港游记二</title>
      <link>//blog.shell909090.org/blog/archives/304/</link>
      <pubDate>Sat, 01 Jul 2006 05:33:37 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/304/</guid>
      <description>占位</description>
    </item>
    
    <item>
      <title>香港游记一</title>
      <link>//blog.shell909090.org/blog/archives/303/</link>
      <pubDate>Sat, 01 Jul 2006 05:31:49 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/303/</guid>
      <description>占位，死也要把游记留在六月</description>
    </item>
    
    <item>
      <title>澳门游记</title>
      <link>//blog.shell909090.org/blog/archives/302/</link>
      <pubDate>Fri, 23 Jun 2006 03:51:11 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/302/</guid>
      <description>今天七点过关，刚刚开关的时候人密密麻麻，感觉像成群结队上架的鸭子。通关并不困难，只要那通行证去就好了，不过包都不开，要是拿违禁品怎么查呢？
过关后从一个街道上笔直南走，路上能见到很多学生，白衣长裙，黑鞋白袜，如同电影中一样。然后再向南走，中间看到一个道教分坛，不知道是什么路数。然后走着走着，热了，肚子也不舒服。所以干脆上了一个bus，开到葡京赌场周围，发现在修。怎么进去不知道，干脆不进去。肚子问题找了个小赌场解决，人家的WC漂亮过我家的大厅，真的有钱的恐怖阿。本来我想拍的，结果意外打碎了一个东西。然后找人商量怎么赔偿，结果进来一个打扫的，抬手说免了。要在国内阿，要么就直接要赔了，要么就A了，要么就向上级请示了。
下面出去转了转，跑到金莎去赌了两把。如果说有天生赢钱的人和天生输钱的人，会输大钱的多数是会赢钱的人。因为会输钱的人觉得完全没有意思，所以不会赌多少的。我就是那种会输的人，进去试下手，结果只见到输的，没有见到赢的。权当破财消灾拉。
出来在一家饭店吃午饭，那里的碎肉面做的真的很好。虽然有点怪，不像一般的面，可是真的很有风味，想试试的可以去澳门吃吃看哦。吃过饭去对面的新八百伴购物（上海这里我家附近就有个店叫做八百伴）。老实说我不知道逛街有什么乐趣，我在购物的时候计算合算不合算算的头痛，花钱买东西买的心痛，跑来跑去跑的脚痛。搞不懂女人为什么习惯购物。
不过说是这么说，怎么样也好，给一个侄子买了衣服，给他妈买了卸妆水，给外公外婆买了西洋参，出来又到金行给老妈买了手链。然后就穷了……
出来听人家指点到了一个步行街，走过去居然不知道这里就是议事亭前地。现在是行政总署正前方。走了半晌，买了两个饰物，手信就基本齐了（钱也就基本没了……）。中间到圣母玫瑰堂转了一圈，澳门的教堂还真是多阿。出门绕了圈远路，再回原地照相，然后再跑上三大巴牌坊照相。下面就没了，回珠海，吃饭睡觉……</description>
    </item>
    
    <item>
      <title>珠海之旅</title>
      <link>//blog.shell909090.org/blog/archives/301/</link>
      <pubDate>Tue, 20 Jun 2006 18:44:40 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/301/</guid>
      <description>隔这么久才放上来，真的很不好意思，贝壳前段时间在弄系统，嘿嘿。
12：00抵达珠海，中途下果雨，雨后的空气非常清新，但是非常潮湿，不是很舒服。车站旁就是福海酒店。因此刚刚抵达就入了房，然后乘9路公交车去九州港，听错了人家的指点中途下车，走了不少冤枉路，不过拍了不少好东西，也算有的有失。九州港乘船出去环游澳门一周，让人心情愉快。然后转过去拍珠海渔女，据说是一个著名青年雕塑家的作品，作为珠海著名旅游景点。一点意思也没有，完全名不副实。其实珠海只要保留优美的风光和清新的空气就好了阿。
回来的途中顺便吃了晚饭，然后在酒店洗澡，出门在隔壁就有网吧和洗头。留长头发出来旅游最麻烦的就是洗头了，反正我全是去洗头店的，衣服也是洗衣房，时间成本阿时间成本。不过这样玩下来反到比前面的观光更有度假休闲的味道。总之，头天的行程很无聊。</description>
    </item>
    
    <item>
      <title>旅游报告</title>
      <link>//blog.shell909090.org/blog/archives/300/</link>
      <pubDate>Sat, 20 May 2006 08:20:23 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/300/</guid>
      <description>先给出我的出行状况和花销水平，还有各地物价水平。大家了解下。
2006-04-15到达北京开始办理港澳通行证
2006-04-29到达广州
2006-05-05到达珠海
2006-05-06当日来返澳门观光
2006-05-07到达香港
2006-05-09香港返回广州
2006-05-10广州返回北京
2006-05-17北京返回上海
历时32天，总共行程6300公里以上，超过长江距离。（虽然多数行程都是在飞机上睡觉……）
消费情况
准备费用205
港澳旅行杂项2000
车旅费（北京）530
车旅费（香港）790
食物（北京）260
食物（香港）510
购物2600
总计6900
北京总费用1000
北京单日费用55.5
港澳费用3300
港澳单日费用275
以上均为人民币估量值。
北京 上海 香港
水 3.7 2.0 ?
电 0.48 0.61 0.9
汽油 4.3 4.3 14
港币汇率按1.03计算,美元汇率按8计算，美元对港币按7.79计算，澳元按1计算</description>
    </item>
    
    <item>
      <title>故地重游</title>
      <link>//blog.shell909090.org/blog/archives/299/</link>
      <pubDate>Sat, 22 Apr 2006 20:48:37 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/299/</guid>
      <description>今天去了牛栏山，感觉时光仿佛被凝固了一样。我拿着相机到处照相，透过镜头，依稀可以看见我们往日的身影。
漫步走进校园，巨大的广场依旧，只是前面多了一个大型的——什么。我不知道那算是什么，雕塑不算雕塑，假山不算假山。除此以外的所有东西倒是没有啥变化。主楼上面的牛头依旧，只是我们这些当年穿牛头的人已经散落天涯。前面的大广场其实都是后来的事情了，我们那个时候最初还是一个沥青马路，旁边有不少的街灯，再前面是烟囱和厕所。科技楼，高三宿舍，阶梯教室并没有什么变化，还如同我走时的模样。只是当时我绝对不会知道有天，自己会怀着莫名的心情参观自己熟悉的地方。看见高三宿舍，就想到厕所里面的灯光。想到阶梯教室，就想到辩论会，想到唱歌大赛。不知道现在的学生是否还有当年的传统，每每有人一展歌喉。想想当年干的事情，如同一首词一样，少年不是愁滋味，爱上层楼。爱上层楼，为赋新词强说愁。少年时的愁滋味，欲说还休。欲说还休，却道天凉好个秋。
当年红砖堆砌的男生宿舍已经铁瓷砖翻新，并且成了女生宿舍。不知道我们当初是否还留下了什么纪念品，有没有吓坏某个无辜的学妹。刻在墙上的社歌，是否已经被擦去，如同歌里写的那样，只是结局恰恰相反。学校后面的运动场还如同以前，篮球场则有所变化。我苦苦思索回忆，终于想起以前的球场是沥青地面，十足让我吃饱苦头。想到这里不禁哑然失笑，仿佛我只是在完大家来找茬，不过一张图片在现在，一张图片在五年前，在我记忆的深处。体育场上的看台，那时是新的，现在是旧的。周围的景色，那时是旧的，现在是新的。来来往往的人，每年都在变化。只是我这个过客，从从来匆匆去，不留下什么。
现在那里也有不少女生在打球，说起来我认识的不少女生都是打球的。这么说也不恰当，应该说我打球认识了不少女生，或者说我为了认识女生而打球。看看现在女孩子们打球的样子，依稀我还能看见徐贺，佟国美，关苗苗。一个喜欢运球，一个喜欢投篮，一个喜欢抢篮板。
这次回去，我特意看了西面斜坡的上坡道，还有男生楼后的樱花。原来的坡道在男楼和运动场间，是学生回宿舍的毕经要道。我曾经因为下雪而多次在上面滑倒。现在的上坡道依然干净，只是没有人行上下的痕迹了。楼后面的樱花在阳春三月开得应当正艳，当初我们绕行楼后的时候多少人曾经目睹。只是现在楼后干干净净，不知道樱花何去何从。绕行楼后的小路已经完全看不出了，单从地上看，谁能看得出当年人流连绵不断，我们在窗前高歌计算回头率的情景呢？大食堂小食堂和教师办公室已经全部作古，原来我们的水房现在是车库，只有边上的古树古墙证明着我们存在的痕迹。出来看到小男楼前面的紫藤架，仿佛在向我证明着另外一些人存在的痕迹。他们的欢乐，他们的悲伤，只是原来我从未注意。
元圣宫和牛山一中一体双生，命运相连。作为古迹，自是不会随意破坏。这也许是学校里面为数不多的尚未变化的地方了。古树参天碑林依旧，记录的不仅仅是我们这一时代。不过变化还是有的，南门已经封死，外面是学校的题词碑林，大鹏想再借元圣宫搞高三动员讲座就要绕行了。旧校门的题词依旧，只是无人行经，想想也是一种讽刺。
坐在学校的门口，一如当年，晚风携酒香而来。心中自然感到一种安定，仿佛这时光就在此刻停滞。我依旧是我，大家依旧是大家。</description>
    </item>
    
    <item>
      <title>虹桥机场最长的一天</title>
      <link>//blog.shell909090.org/blog/archives/298/</link>
      <pubDate>Sat, 22 Apr 2006 20:46:41 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/298/</guid>
      <description>昨天应该是个高兴的日子，我跑回北京来办理港澳通行证，按后转去香港旅游。不过看来是什么东西觉得我太高兴了，于是我碰到了乘飞机12年来最古怪的一次情况。
我准备乘11点半的飞机起飞的，这个飞机昨天差的时候座位蛮多，而且后面的航班我也查过，座位也非常多。不过因为10点半的飞机机械故障，一支延误到我离开机场的时候。很多人立即买了后面飞机的机票，或者等待候补。于是我的机会就只有当天最晚的9点航班，并且因为飞机晚点导致此班航班的抵达时间到了12天半。换句话说，我头次乘到了午夜航班。
最麻烦的事情还不是在航班上，因为我一直不能确定候补的状况，所以我就只能一直在机场里面等待，而且每个小时要去问一次，然后重新寻找座位。还要自己帖钱吃饭。
民航的免票，你的名字是女人。</description>
    </item>
    
    <item>
      <title>时间消费分析</title>
      <link>//blog.shell909090.org/blog/archives/297/</link>
      <pubDate>Sun, 02 Apr 2006 19:31:40 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/297/</guid>
      <description>前面篇文章A同学说看不懂，OK，这次来个看的懂的。再看不懂去看统计学里面IO表去。
上班的时候总觉得时间不够用，上学的时候不明显阿。我的时间哪里去，做个投入产出分析好咯。
首先做消费分析，周期是周(Week)。所以用周是因为休息基本按周算的，平均的话差异最小。
一周的投入是175H，固定的。
一周的基本产出是这样的：
睡觉8*7=56-60H，固定的。当然，特殊情况可以熬夜。不过天天熬夜的就成苦海神龙咯。
吃饭0.537=10.5H，固定的。有的人边吃饭便做事情，奉劝饭要好好吃，胃是自己的。
上厕所，刷牙洗脸。这个没啥固定时间的，如果你不拉稀不便秘，再加上其他必须做的杂碎事情，每天大概就是花半个小时吧。0.5*7=3.5H
OK，这个是固定产出。你可以不上班不上学，但是不能不吃饭睡觉。吃饭可以蹭可以报公帐，但是事情花的时间不能省。去了这些时间，我们还剩下175H-60H-10.5H-3.5H=101H。
顺便讲解下，有的同学听说做软件的有3W的薪水，觉得很高。其实没啥好奇怪的。如果封闭开发，吃饭睡觉都不许走出去，不许上网不许玩的情况下。周工作时间就是100H，最高工作时间，除非压缩吃饭睡觉。同等也要拿人家两个半月的薪水，何况这种工作肯定要加薪的，能不高吗？如果倒算过来，薪水只有12000。差不多咯。
然后我们就要分配100H去上班上课学习娱乐。这里我们先算下理论的标准工作时间。国家一年有10天带薪假期，一个企业一般也给七天带薪假的。都是白给的。这样就是8(H/D)*17(D/Y)/52(W/Y)=2.6(H/W)，就是每周2.6小时带薪假期。那么理论上每周工作时间就是37.4H。
基本上来说这是必须上的班，除非工作性质特殊，否则不上足是要出问题的。我们所需要的就是将剩下的101H-37.4H=63.6H发挥最大效率。这是我们的纯投入，前面的投入只是为了产出能正常工作生活的人。OK，作为一个无奈的事实，我们必须将这个投入中的部分用来做无聊的事情。大致来说有这几样：
坐车走路，我是每天1.5*5=7.5H。自主时间的11.8%就这么浪费了。剩下56.1H。
锻炼身体，我是每周6H，自主时间的9.4%就没了。像坐办公室的，不练身体的话，上班等于伤命，不可不练阿。剩下50.1H。
额外加班，说不准多少时间，具体也算不出来，不过每周总会多出6-7个小时。因为毕竟上班要提前到，宁早勿晚。下班要以后走，宁晚勿早。这种时间很无奈的。，占9.4％，剩下44.1H。(Stella同学，如果刚刚你没有感觉神经一紧怎么这么熟悉，那么我可以肯定你做音乐处理没前途咯)
磨磨蹭蹭东张西望不知道在干吗，偶尔有点时间上网逛逛写个博客。这种时间一般人都会有吧，每天愣个20分钟，一周就是2.4H，占3.8%，剩下40.3小时。
换句话说，每周我们的剩余时间就是40H上下，大致和上班一样。在这个时间里面我们要处理各种个人杂事约会见面看同学吃饭请客逛街还偶尔要拿去加班。如果你人不怎么和别人打交道，那么每周处理下个人杂事5-10个小时就够了，剩下30-35H拿去加班，最高可以加班出周工作70-75H的记录。这就是所谓每周正常加班不能超过36H的由来，再多就妨碍个人正常生活了。不过话说回来，国家规定加班是每周多少呢？我查了查，正常状态下是不超过9H！如果说的苛刻的话，我每天光上下班多出来的时间就快让公司违法了(注：这个时间不能算入加班，所以大家不用高兴)。
但是作为计算机程序员来说，我的时间具有特殊性。为什么呢？我需要不断学习。
举个例子来说，如果说翻译学了外语，他基本不用怎么学习新的知识，因为语言变化速度相对比较慢。但是软件业几年就淘汰一代，如果没有相对的学习速度，吃饭减产是注定的。我们下面就无法进行消费分析了，必须用投入产出分析。</description>
    </item>
    
    <item>
      <title>整死人</title>
      <link>//blog.shell909090.org/blog/archives/296/</link>
      <pubDate>Sat, 01 Apr 2006 07:23:25 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/296/</guid>
      <description>我在编译mplayer1.0的时候需要xf86vmode.h文件，这应该是安装某个dev包。根据packages的结果，是xlibs-static-dev。不过系统还提示找不到，事实上，他在libxxf86vm-dev。</description>
    </item>
    
    <item>
      <title>debian的桌面研究（二）－－完美桌面</title>
      <link>//blog.shell909090.org/blog/archives/295/</link>
      <pubDate>Fri, 31 Mar 2006 19:46:43 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/295/</guid>
      <description>一个系统好不好，不是看他崩溃频率（除非崩溃得比9X还欢），也不是看精美程度（除非比MAC还夸张比windows还花哨看界面就像在看美国大片），而是看功能，看应用程序的多少。linux下面要流畅的工作，大致需要以下几个软件。
firefox gaim lumaqq azureus xmule xmms office eclipse
下面逐个讲解安装过程：
firefox：著名的浏览器，功能强劲方便安全
1.aptitude里面找，安不上的纯粹RPWT。
2.debian里面firefox的最新版本是1.0.2,不过网络上面出到1.5了，而且还是比较稳定的。如果要自行升级的请看下面流程，当然，首先先下个firefox的包。
tar -zxvf OOXX.tar.gz chmod -R 755 firefox/ mv firefox /usr/share gedit /usr/share/applications/firefox [Desktop Entry] Encoding=UTF-8 Name=firefox Exec=/usr/share/firefox/firefox Icon=/usr/share/firefox/..#你自己看什么合适吧 Terminal=false Type=Application Categories=Application;Network; StartupNotify=true gaim：聊天程序，要上msn/icq的找他
aptitude里面找，安不上的纯粹RPWT。
lumaqq：聊天程序，上QQ4linux的
安装比较麻烦，首先要安装java4linux。下面我要装eclipse，所以用的是jdk，用jre的也差不多处理。
xmms：音频播放，linux下面的winamp
aptitude里面找，安不上的纯粹RPWT。
PS，gnome的菜单包是menu-xdg，放置位置/usr/share/applications，模版如下
[Desktop Entry] Encoding=UTF-8 Name=程序名称 Exec=执行代码 Icon=图标 Terminal=false Type=Application Categories=Application;Network;Develope; StartupNotify=true 根据需要修改添加就可以了。
PS，其实还有两个，realplay和mplayer，不过这两个程序正常debian用的话有点小问题，所以放到下篇说了。</description>
    </item>
    
    <item>
      <title>debian的桌面研究（一）－－精简安装</title>
      <link>//blog.shell909090.org/blog/archives/294/</link>
      <pubDate>Fri, 31 Mar 2006 19:18:10 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/294/</guid>
      <description>debian应该算是一个比较方便的OS，100M的安装盘就可以自动安装。不过最近debian出了点小小的bug，所以安装过程也要有点技巧的好。下面所说的所有系统都指debian3.1sarge，去年五月出品，是目前最新的版本。
问题出在一个系统核心的更新上，如果默认安装的话就全部都会失败。所以应该在安装的时候中断所有安装更新动作，不安装任何桌面和服务，直接完成安装进入系统。然后更改/etc/apt/source.list加入所有你想要的源（这样安装的速度会比原来快很多），然后运行aptitude -o APT::Force-LoopBreak=1。update一下，有什么可以更新的全部更新上，再选中最新的合适使用的内核和源码（对stable和testing来说，debian的最新发布内核已经没有什么瑕疵可能存在了），然后安装。这个过程大约要下载70-100M的东西，端看你什么时候跑的安装。我这里大约是三刻钟就跑完了下载安装。重启下，用最新内核启动，然后卸载旧内核（不重启的话会非常罗嗦，而且不安全）。这样整个可用系统的最小版本就出来了，装机大约是一个钟头。
然后是桌面环境了，在aptitude里面，选择以下包vim gnome mc x-system-core im-switch gaim选中，然后再选择所有中文桌面和环境（不要用的输入法可以去掉点），这样大约有350M上下的文件需要下载，整个过程约会持续三个钟头。其中设置就不具体说了，不过系统还需要做以下更改。
首先在/etc/X11/xorg.conf里面将mouse类型改成ImPS/2，模拟三键去了。然后修改/etc/X11/xinit/xinput.d/default文件，加入以下内容。
GTK_IM_MODULE=SCIM XIM=SCIM XIM_PROGRAM=&amp;quot;/usr/bin/scim&amp;quot; XIM_ARGS=&#39;-d&#39; 这样基本来说系统就ok了。</description>
    </item>
    
    <item>
      <title>补牙</title>
      <link>//blog.shell909090.org/blog/archives/293/</link>
      <pubDate>Tue, 28 Mar 2006 21:23:54 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/293/</guid>
      <description>最近很倒霉，原来补的位置掉了，所以两天不能好好吃东西。而且刚刚牙痛的时候还贪方便吃芬必得，结果其药物反应。上吐下泄，晚上还打抖发冷，次日微烧无力。反正我以后是不敢再吃了。
今天去补了个牙，花了三十，等了一个钟头，禁食六小时，总算是搞定了。哎，希望别再掉咯。</description>
    </item>
    
    <item>
      <title>语言</title>
      <link>//blog.shell909090.org/blog/archives/292/</link>
      <pubDate>Tue, 21 Mar 2006 22:41:25 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/292/</guid>
      <description>如果不考虑实现的难度，理论上说只要能输入16进制的编码就可以编程。不过事实上这种事情即使在小说里面也不会有人去做的，毕竟人的精力是有限的。现在人们一般使用某种语言来进行编程，那么语言的到底是什么呢？
就程序语言的发展来说，最初的语言应该是汇编。这种语言严格来说不具备语言的特征，只是转换可理解的代码到不可理解的代码而已。近代首次语言上的重大突破是IBM公司的forturn语言，这种语言基本具备了高级语言的几大特征。而后就是伴随UNIX一起称霸了计算机界半边天的C，以及同属于C系列的C++/Jaca。目前趋势来看，形式化/结构化语言用Java，操作化语言用C已经成为流行。估计在十到二十年内我们会迎来语言的又一大发展。
任何语言基本来说，都要考虑三大要素。语义逻辑解析，程序操作接口，复用。这三大要素的出现顺序是按时间顺序排列的。
首次出现高级语言的时候，着重是在语义逻辑解析上。主要目的是将人类思考的形式以自然语言的方法描述，转换成可以实现的机器语言。这一时期的语言不能说没有考虑后两者，不过在实现上的却比现在差很多。
程序操作接口是我们注意的第二个要素，我不知道C以前的语言是怎么处理和系统交互的问题的，不过C的解决方案的却不算是很理想的方案。C利用相对独立的和系统相关的代码库来实现接口的抽离，这种方式如同舍弃高级语言中的转跳而使得语言结构化增强一样，是一种无奈的取舍。但是如此一来，操作底层的时候就必须舍弃标准代码，而使用标准代码就却不能完全脱离系统。（关于此点，相信所有被TC中16位的unsigned
int困扰过的朋友们都深有体会）于是std标准库就成了半个鸡肋，之所以说半个是因为聊胜于无。java在抽离上比C更进了一步，彻底的同系统抽离了，这使得在形式操作的时候我们可以避免考虑系统差异。但是和刚刚一样，java操作底层是非常差劲的。大家可以试试用java在windows中编写一个服务，注册运行。不过jni的开放在一定程度上弥补了这个问题，上有java，下有C。虽然差强人意，不过也算是比较完美的解决了系统接口的问题。
最后一个问题就是当前我们关心的要点，复用。复用的最大意义就是减少劳动的重复，增加劳动的效率。从目前来看，复用主要是两种形式。黑箱接口，同形重用，而这两者又不是完全割裂的。黑箱接口的核心就是将相同部分组成一个黑箱，黑箱外可以任意操作黑箱。只要遵循黑箱的说明原则，就不必关心黑箱内部是怎么实现的。而同形复用也可以相对称为白箱复用，是指将一系列代码组成一个白箱，对外部并不封闭。在应变的时候需要改变箱内的内容，但是这种改变要么是自动的，要么是轻松的。黑箱多数是运行时复用，而白箱多数是编译时复用。例如库技术，接口，COM（这个应该也算接口吧）就是黑箱。在编译前无需假定操作对象是什么。而C++的模板技术就是典型的白箱，编译前必须假定操作对象。如果编译的时候我们没有编译针对某个类的函数，那么运行时就会出错。
复用和接口有着紧密的关系，假定我们有一套操作下层接口的方法，并且经常被用到。那么根据复用的原则，我们就应该把他封装成复用块。这样，复用块成了新程序的基础。也就是说，对在此上写的程序来说，这些复用的代码是接口的一部分。
我前面曾经说，在十到二十年内我们会迎来语言的又一大发展，主要是在说分布和同步上。目前我们的所有程序都已经从单线程转为多线程了（我指支持，如果你硬要写单线程也可以），然而线程间的同步依旧是非常麻烦的事情。如果线程间共享数据，那么我们必须手工操作同步。java算是比较先进的，可以通过形式化的方式来设定同步。然而这不是语言发展的最终目的，我们的最终目的是要使得同步有一系列明确的机制，只要按照机制来做，就可以不考虑同步的问题。这不仅仅是说本地线程的同步，而且是说如果一个程序在两个地方分别有一个线程，到底应该如何操作。如果能完美有效的解决这个问题，相信我们也就同时解决了诸如B/S好还是C/S好，分布资源的调集等等我们现在非常头痛的问题。</description>
    </item>
    
    <item>
      <title>妖怪阿</title>
      <link>//blog.shell909090.org/blog/archives/291/</link>
      <pubDate>Tue, 07 Mar 2006 19:34:09 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/291/</guid>
      <description>硕志公司的员工招聘仿佛是被女巫诅咒过一般，完全找不到人。先是来了个余工，共产党员。然后一个月后辞职，原因是要去日本当地下党……后面来了个刘磊，资深IT工程师。结果头天还说要来，第二天神秘失踪，人找不到，手机一直通，没人接……再后面，再后面是顾工（股肱之臣阿……XXX表打偶……），来了一天。在签约前包袱款款跑了……再后面，再后面就是偶许某人辞职了……希望杨总不要因此花轰。
这种怪异情况基本有以下几种可能。一个是被人恶意整蛊，来了就跑，招不到人。一个是招聘范围太窄，开出天价还是招不到合适的。还有就是薪水不合理，这种薪水招不到合适的人。招来的根本不能开发。按照偶的观点，貌似是最后一个。</description>
    </item>
    
    <item>
      <title>装机记</title>
      <link>//blog.shell909090.org/blog/archives/290/</link>
      <pubDate>Mon, 06 Mar 2006 22:11:35 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/290/</guid>
      <description>连续叫了两个月的升级，昨天终于升好了。AMD Athlon64 3000+/E6的内核，200x9频率超到233，FSB933。内存是KST512MDDR400，目前在233外频工作。七彩虹镭风x550ct冰封骑士4,PCIE16,在110MHz的外频工作。总共花了3000大洋，加一个机箱。然后剩下一个C1.2G+256M内存，40G SGU6硬盘组linux试验机。另外还剩下了一个256M内存（居然还是BGA封装），一个三内存条的PIII800M，一个SGB4 40G硬盘，没有显卡没光驱，外加一个机箱。准备出货给赵一博同学……谢谢接盘。
下面说说在本次装机中的妖怪事情，AMD64的片子正常应该是可以点32的系统的，但是我这里上32系统就死机。看上去是内存问题，但是XP内核的光盘系统可以运行，内存测试通过。估计是某种体质上的兼容问题吧。反正64系统能跑，我就不管了。64系统上AMDCPU后可以开DEP，我看了看，这个和64程序基本是一致的。现在只有系统的软件是开了DEP的，也只有系统程序是64位的。这样在溢出攻击上恐怕要特殊点。其它程序统统还是32位模式，不开启DEP。估计其中差异在LARGEADDRESS选项打开上。赵一博同学说ND和DT跑不了，用司机和酒精就好了。只是rich8就不用指望了，那个一定要DT加RP才开的起来……BT哦……
另外就是系统管理模式的完善，开两个用户，一个admin，一个user。然后用XP的账户选项弄成一个受限用户一个管理用户。受限的那个加PowerUser组，然后所有数据目录都加Administrator组F，User组R，PowerUser组RW。这样一般的受限用户在数据上只读，来宾是看不到，高级是正常用，权限归admin管。再把windows下面的权限调整成adminF，PowerUser只读，User只读，这样一般软件都动不了系统了。然后微调服务和策略，基本就可以完成配置。</description>
    </item>
    
    <item>
      <title>分布式软件构架的变革</title>
      <link>//blog.shell909090.org/blog/archives/289/</link>
      <pubDate>Wed, 22 Feb 2006 03:34:53 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/289/</guid>
      <description>分布式软件构架由来已久，从最初的并行计算到现在的大规模网络并行计算，再发展到网格计算。这代表了分布软件的一个变革，而另外一个变革则是从数据-程序-界面合一的构架转换到数据-程序-界面分离的构架。MVC大家都很熟悉吧。现在软件界的三大困扰是什么？安全，效率，可复用。其中程序从界面层剥离开造成了当前你用出bug的程序可以对别人施加影响，而程序和数据层间的紧密结合更加剧了这个问题。还有程序到界面的接口是最影响成本和收益的地方，因为界面和程序的可复用是最能降低成本的。
我们现在流行的一种模式是使用网页界面的B/S模式，诚然，这种模式比C/S模式有更大的优点。客户端与系统无关，这样客户端的可复用性非常好。但是这种模式的缺点也是明显的。网络传输效率低（这个现在没有多少人计较了），构架不合理（人家HTTP本来是传输文件的说），而且不安全。
我们相信将来的软件设计模式是基于分布的，那么可能如何分布呢？我个人认为有两种主要模式，一种是平台抽象式分布，一种是组件抽象式分布。
平台抽象式分布是指软件的运行在一个网络平台上，其具体运行在哪个电脑上，如何协调对象，并不是软件关心的内容。平台负责抽象了机器，平衡了性能，增加了效率，但是对于机器间的传输实时性要求比较高。适用于企业内部的发展方向，以多台电脑平衡性能。均衡性能需求峰值，降低硬件成本，并且可以充分利用旧机器。用于这种分布的基础是分布式操作系统，在系统运行后即无条件陷入分布系统的接管中。前台的模拟为纯终端，后台模拟为纯资源。然后终端向资源登陆。这种模式的近似产品是win2k中的AD，不过AD只提供了资源的访问指向和访问控制，还有权限分散管理模型。而没有提供最核心的内存共享和锁定，还有线程分布和游离运行。
组件抽象式的分布其核心是将一个软件分离到不同的组件中，不同的组件在不同的机器上运行。这种模型更适合于自由的广域环境，当然前提是能成功解决组件通讯的问题。现在这种模型相对前种有更广的发展。这种模型和现在的B/S模式中最大的差异是，B/S模式的用户接口是浏览器和服务器程序共同完成的。从来没有人听说过有页面直接驱动后台组件的吧。如果我们可以用一种抽离语言（JAVA的显示效率太低了）来完成前台的接口部分模块，那么我们应该试图用这种方式来发布软件的前台端。这样软件的抽象更为简单明确，而且可复用性更高。</description>
    </item>
    
    <item>
      <title>标准和软件同质化</title>
      <link>//blog.shell909090.org/blog/archives/288/</link>
      <pubDate>Wed, 22 Feb 2006 03:13:28 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/288/</guid>
      <description>软件标准，啥叫软件标准呢？最出名的（也是我最敬佩的）就是RFC（Request 4 Comment，内容堪称网络的基石，但名字虚怀若谷，绝对比现在乱糟糟的名字好多了），微软的WINAPI也算标准吧，还有POSIX等等。用各种标准来写软件确实方便多了，要DOS时代，每次系统升级都会有报废的软件。而且DOS和WINDOWS软件也不能互换，但是WIN9X和WIN2K的软件互换就超过八成了。
不过软件标准却造成了现在的一个严重问题，就是软件同质化严重。简单的讲是软件的功能一致。深层次来分析的话，软件是一个中间层，他上有实现标准，下有使用标准。在类似的平台上，使用标准是类似的。如果实现标准再类似，那么除非有突破型的技术，否则就注定了软件只有同质化的下场。举例来说吧，例如IM软件，他们的下层都是TCP/IP协议，由于网络情况复杂，多数都不能在IP层（网络层）玩花样，一般都是在TCP/UDP层（传输层）做各种变换。例如内网穿越，代理等等。对上层来说，要实现的标准也是很类似的。由于其上层就是用户，所以必须按照类似的用户需求来写软件，最后IM都是一个模子里面出来的，也没啥好奇怪的了。
软件同质化特点大致有以下几个：
1.值钱不要钱，要钱不值钱。IM来说，最重要的功能是整合通讯，但是现在没有一个IM的整合通讯是收费的。相反，收费的统统是什么送花啦，群拉等等非常花哨的功能。因为整合的功能同质化不严重，所以收费还有人用。但是核心功能都完全同质化了，竞争太严重，根本没法收费，广告都不好打。
2.你卖的软件和我差不多，盗用代码违法，盗用想法合法。这个毕竟也是无奈，要判盗版想法的话，windows都是盗版了。
3.软件行业技术水平低下，技术标准的确立，无疑使得所有使用标准的人之需要在标准上竞争，这样无形限制了竞争的范围。其实在某些情况下，无视标准反而有更强的优势。例如RealMedia系列的压缩格式就完全不同于AVI的封装格式。熟悉媒体格式的人应该知道，AVI是可以封装各种算法的格式。但是RM凭借自己的努力获得了一片天空。如果RM使用的是AVI封装格式的话，现在媒体软件市场是何样形式还很难说。
4.产业增值集中在核心技术和标准上。如果标准是收费的（无论费用是怎么收上来的），那么同质化竞争的最终收益者应该是技术标准所有者，因为他们限制了竞争条件，那么竞争对手的减少造成收益理当的归属标准所有者。如果技术标准不收费，那么他们就不能限制标准的使用，这就是只孵不出蛋的金鸡。
其实我们可以看出，所谓标准，只是另外一种形式的垄断。</description>
    </item>
    
    <item>
      <title>第三代博客的兴起</title>
      <link>//blog.shell909090.org/blog/archives/287/</link>
      <pubDate>Tue, 21 Feb 2006 06:48:01 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/287/</guid>
      <description>第一代博客是少数人的博客，这种博客文化好比前几年的个人主页一般。参与的是少数，出名的也是少数。这种文化好比DHT网络研究中的深度节点模式。不熟悉的朋友也不用看了，大概上讲，信息扩散的拓扑网络有两种主要分类。一种是每个节点的链数目差不多，链接长度也差不多。这种模式传播抗突变和崩溃很好，而且节点的要求也不高。缺点是信息传递路径长，容易变形，而且传播不稳定。还有一种模式是有一些节点的链接数目大，而且长度方差大。这种模式信息传递快而且稳定。但是抗突变能力查，而且节点要求高。目前DHT的努力方向就是以后种模式为骨干的结合两者优点。而“深度博客”文化，或者叫“个人博客”文化。主要是将某些人作为博客的卖点，进而推动博客的发展。如果没有名人，没有卖点，一个博客再稳定强大都没用。而第二代博客是大众化的文字博客。这种博客类似DHT中的分布节点模式，主旨是推行每个人独立的创造博客，最终通过程序链合聚集。在我看来，博客的日志功能只是辅助，其交换，聚集，索引才是核心实质。这种博客是以稳定和强大为基础的，具备很强大的客户粘着性。如果用户的blog某日丢失了，那名人再多也无法挽回局面。
而第三代博客是以媒体为基础的博客。任何媒体，任何形式，都是从文字开始，然后到多媒体。从专业化开始，然后渗入生活。从集成开始，然后嵌入。我们可以仔细观察现在的HTML规范，还有常见的HTML语言，然后和1994年的欧洲核物理研究中心创立的追初的HTML规范对比。我们可以很容易发现，现在的HTML语言更趋近于媒体使用而不是文字，并且现在的HTTP协议更倾向于在网络上交互事件和数据而不是传递文件。后者恐怕我还要专门撰文评价，而前者则是网络界从文字向媒体转换的明证。
我们现在的每个blog理论上都有关键字，所有饮用有通过RSS协议。这是我们得以开放式交换链接，并且实现追踪搜索的根本。如果我们在媒体上类似的处理，我们也可以制作类似的媒体blog。届时我们每天的blog内容更新可以是通过录像而不是打字，这不仅仅是效率的增加，而且是方式的变革。相对来说，当前的blog中加入图片根本是小孩子的玩具。
相信这个问题不是没有人想过，但是实现上有个巨大的难度。当前的第二代blog的栖身之所是巨型的服务器集群，这样才可以负担千万级的用户。如果要在其上传输媒体，未免太强人所难。这个问题可以回到当初我们的DHT网络上去。DHT本质来说是什么？应该是知识网格。通过一些方式将你的知识和信息散布到网络上去，然后别人可以找到。这本不是难事，但是我们现在的主要实现方式是集成数据库！这意味着如果没有核心服务器，我们无法交换信息。而我们交换信息越频繁，核心服务器越大。这当然的限制了交换的发展。DHT是将信息冗余分布在网络上的方法。同样，我们可以将媒体通过一些P2P方式封装，浏览过的人将为将来的人提供上载，这样可以相当的解决第三代blog最严重的带宽问题。
不过其中解决一个问题的同时带来了另外一个问题，公众的公德心，上传的问题。这个问题的解决恐怕要依赖于P2P软件中的补偿机制的完善了。</description>
    </item>
    
    <item>
      <title>一个人的春节……</title>
      <link>//blog.shell909090.org/blog/archives/286/</link>
      <pubDate>Thu, 02 Feb 2006 18:50:59 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/286/</guid>
      <description></description>
    </item>
    
    <item>
      <title>英雄传说VI存档修改</title>
      <link>//blog.shell909090.org/blog/archives/285/</link>
      <pubDate>Wed, 01 Feb 2006 06:15:01 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/285/</guid>
      <description>存档文件都会找吧，HEX编辑器都会用吧。不会还想修改，一头撞死去吧。相对来说游戏还是比较好修改的，继承了FALCOM存档的一致风格。（汗……这个……）和大宇一样白痴兮兮一点加密都没有，差分分析就搞定了……不像某些游戏的存档，居然用RSA加密！（再汗……）不过更夸张的是，游戏的资料全是zip压缩的可读可编辑资源，连对话都可以随便改……（庐山瀑布汗，晕倒。）
下面是地址和数据，除了物品代码和个数是WORD以外，剩下都是DWORD。下面物品不全，有部分我忘记了，还有就是懒。多数情况是够用了，不过晶石是缺的，料理也不全。如果有哪位搞定了全部数据，请和我给我留言……
0x25C88 金钱
0x25C90 七耀石
0x23E64 Js经验
0x23E98 Es经验
0x266B4 战斗次数
0x25C8C BP
0x266B6 战斗不能次数
0x266B8 战斗胜利次数
0x24C8A 物品
0011 太极棍
0030 黑千鸟.白千鸟
0041 九尾
0062 王权之光
0080 水晶剑
009D 狂战士巨刃
00BA 高能量粒子炮
00D9 代达罗斯护腕
00FD 皇家骑士铠甲
00FE 女武神铠甲
0119 天神之鞋
011A 风神之鞋
012D 银耳环
012E 打火机
012F 幻影戒指
0130 黑色手镯
0131 魅惑项圈
0132 光明背带
0133 珍珠耳环
0134 百合项链
0135 羽毛胸针
0136 骷髅项链
0137 活性脚镯
0138 魔力鸟冠
0139 神圣挂链</description>
    </item>
    
    <item>
      <title>The change of M$’s Blog</title>
      <link>//blog.shell909090.org/blog/archives/284/</link>
      <pubDate>Tue, 31 Jan 2006 01:06:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/284/</guid>
      <description>偶非常不爽，因为M$的blog改版。可能因为新年，so
M$在做改版，至少俺的一个在M$供职的朋友在加班，默哀三指令周期的说。不过新版的东西还不如旧版，可能是js和我这里的IE八字不合，俺……所有的评论回复全回不上去，切到最高权限模式还是一样……幸好发blog还是正常的，否则俺就抓狂了。在此把所有要回的blog先全部回这里，希望偶尔跑过来玩的朋友看到点了你的名字，自己找找到底回的哪里，别怪偶，怪M$吧……
2kaka：俺也老咯……你还有GG丫……
2piaoaa：你的歌蛮好听……我不客气的扒下来用了……
2stella：中间一张漫步海滩头发遮了面容的是你吧……嘿嘿……你们很幸福哦……这种黄昏漫步海边的浪漫……</description>
    </item>
    
    <item>
      <title>Runas系统管理方法</title>
      <link>//blog.shell909090.org/blog/archives/283/</link>
      <pubDate>Wed, 25 Jan 2006 06:09:25 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/283/</guid>
      <description>一个系统，做一个管理员（不是administrator），做一个受限用户。然后用受限用户，不用管理员。做一个链接。
C:WINDOWS\system32\runas.exe /user:user C:WINDOWSsystem32cmd.exe 然后启动后输入管理秘密，就可以用管理员身份来做管理了，启动注册表编辑或者啥都很方便。</description>
    </item>
    
    <item>
      <title>IE屏蔽方法</title>
      <link>//blog.shell909090.org/blog/archives/282/</link>
      <pubDate>Sat, 21 Jan 2006 17:47:02 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/282/</guid>
      <description>IE这个东西讨人喜欢讨人嫌，很多时候没有它不行，有了又容易中各种东西。下面的研究就是怎么样来控制IE的各种行为。首先是屏蔽IE的开启
cacls &amp;quot;C:\Program Files\Internet Explorer&amp;quot; /P admini:N /E 这条语句的目的是屏蔽administrator对浏览器目录的访问权限，访问权限都没了，浏览器自然开不了了。不过这只适合于用户手工开启浏览器，如果系统自动弹出，浏览器还是照样开的。例如我们亲爱的MSN，所以还要加下面这条。
cacls &amp;quot;C:\WINNT\system32\BROWSEUI.DLL&amp;quot; /P admini:N /E 这条屏蔽的是IE的界面（UI），所以凡用IE界面的东西全部弹不出来。像刚刚我就差点无法写新的日志。所以用这两条语句重新开启访问权限。
cacls &amp;quot;C:\WINNT\system32\BROWSEUI.DLL&amp;quot; /P admini:F /E cacls &amp;quot;C:\Program Files\Internet Explorer&amp;quot; /P admini:F /E 这里要特别说明下，admini在我的机器上指administrator，而我机器上的administrator则是一个连guest权限都没有的空账户，专门用来诱骗攻击的。各种账户的情况大家可以根据自己机器自行修改。
上面屏蔽了IE的UI，但是内核还是可以访问的，所以在FireFox里面用IE插件可以载入IE的解释系统，外壳则是FireFox的。如果要真正保证安全就使用这个语句。
cacls &amp;quot;C:\WINNT\system32\MSHTML.DLL&amp;quot; /P admini:N /E 这个语句屏蔽的是IE内核入口，所以下面所有的IE行为全部都会变成下载。有啥网页也全都是下载而不是解释出来显示在网页上。至于解除代码，自己想吧。</description>
    </item>
    
    <item>
      <title>杀虫方法</title>
      <link>//blog.shell909090.org/blog/archives/281/</link>
      <pubDate>Tue, 10 Jan 2006 01:13:21 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/281/</guid>
      <description>3721，YiSou，等等这些东西让人烦死了……所以我决定正式开始研究杀除方法。
预防方法：
1.先建立一个和对方目标目录一样的目录，然后删除所有权限……
2.编辑C:WINNTsystem32driversetchosts文件，将混帐们的网站重定向到127.0.0.1。
3.IE的安全设置到最高，然后平时用FireFox。再把混蛋们的网站加入受限制站点。
4.偏执狂的做法，新建一个受限制的系统用户，然后去访问网站。
杀除方法：
1.找到正确的位置，然后用ERD或者linux启动系统，删除。再正常进入系统扫描无用的COM。
2.利用ProcessExplorer找DLL的注入宿主（一般是IE或者是Explorer）。然后找正确的DLL位置。启动CMD，输入删除宿主的命令，然后用ProcessExplorer关闭垃圾进程，留下核心，然后运行CMD的命令。
3.将DLL删除命令放到autoexec.bat里面，这个东西在winNT下也会执行。可以用&amp;gt;c:/rslt.txt察看是否成功。
一点建议，谁可以研究下linux光盘引导方法，做一个NTFS支持的引导光盘，自动搜索所有垃圾的位置，然后清理？</description>
    </item>
    
    <item>
      <title>沙袋、月光、我愿意</title>
      <link>//blog.shell909090.org/blog/archives/280/</link>
      <pubDate>Sun, 08 Jan 2006 23:27:29 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/280/</guid>
      <description>最近贝壳处于极端的繁忙中，公司需要在新年前加班处理程序，所以贝壳就变成了旋转的贝壳。不同于我喜爱的程序研究，繁忙完全没有驱散古典。相反，也许是因为繁忙，所以格外的孤单。于是带人出去玩，滑雪，逛街，直到没人再愿意出去……于是只好在自己的世界里，为自己弹上一曲。
以上可能都是借口，不过事实是，我最近喜欢上了吉他和太极。这么说也许比较奇怪，因为我一直喜欢吉他和太极。以前还有计算机和篮球，不过现在靠计算机吃饭，所以就不用明说了。而篮球嘛……贝壳为了弹吉他留了指甲，你认为有人愿意和我对打篮球吗？而且贝壳的体重也……哎，不说也罢。
前几天为了练拳，专门去买了个沙袋，100多的，加一加总共有七公斤左右。绑在手脚上玩，目前稍微有点感觉。在吃饭打字这种静止动作的时候觉得比较吃力，动的动作还是没有啥大感觉……也许本身的体重就比较重吧。不过想要练沙袋的注意了，脚上的沙袋绑了后会痛。因为沙子会按照你的脚的形状沉积在下面。拿下来再绑上去就会硌到，很痛。一定要拿下来后弄平了再绑。手上的调整很简单，所以没有这个问题。
另外受听吉他音乐会的刺激，我现在重新开始练习吉他，大规模的练习……如果有时间的话。目前找出来原来的N多吉他资料，开始复习忘记的曲子。至少复习比学习简单多了。这个周末我弹了月光和我愿意，后者还曾经在别人的婚礼上弹过。不过失败的是，吉他这种独奏乐器想在婚礼礼堂上演奏必须要有好的拾音放大设备。这件事情教训我们做事前一定要想想清楚……不过我对去婚礼上弹琴的事情不后悔就是了……</description>
    </item>
    
    <item>
      <title>新年</title>
      <link>//blog.shell909090.org/blog/archives/279/</link>
      <pubDate>Tue, 03 Jan 2006 07:39:18 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/279/</guid>
      <description>过年啦，忙阿……
留个爪印的说……
呜～人家粉无聊阿
整天处理程序……
说话没有回答……
呜～</description>
    </item>
    
    <item>
      <title>滑雪</title>
      <link>//blog.shell909090.org/blog/archives/278/</link>
      <pubDate>Mon, 26 Dec 2005 23:16:53 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/278/</guid>
      <description>周日偶出去败家去了……好吧，是去滑雪去了，不过真的很贵。两个人要了280,亏了亏了。
滑雪这个东西绝对是需要很好的平衡感和体力的。偶进去就摔了两跤，从坡上下来一次又摔了两跤。学到最后没有摔跤滑下来的就一次，其余的统统摔了。不过还不错，摔下来一点不痛。其诀窍总结就是，不要怕。
滑雪的要诀是重心前移，向前是不会摔的，向后是一定完蛋的。我头次就是这样摔倒的。但是下坡时在地面滑行速度加快后，人总会向后倒。因为重心向前会加速滑行的速度，然后一怕，向后移动重心，就挂了。其次是平衡要好，不要靠力量。有的时候滑的方向歪了，强行用力调整的结果就是摔。力量是够强了，但是滑板根本承受不了阿。用力的结果就是滑板和鞋硬性脱离，本来是通过一个扣扣上的说……</description>
    </item>
    
    <item>
      <title>吉他演出</title>
      <link>//blog.shell909090.org/blog/archives/277/</link>
      <pubDate>Mon, 26 Dec 2005 22:21:14 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/277/</guid>
      <description></description>
    </item>
    
    <item>
      <title>未来软件系统构架的猜想（一）</title>
      <link>//blog.shell909090.org/blog/archives/276/</link>
      <pubDate>Wed, 21 Dec 2005 06:29:47 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/276/</guid>
      <description>贝壳最近接触了不少软件系统，看了不少构架。现在就来猜猜未来软件系统构架的方案吧。
贝壳的推论是按照一个观点进行的，即市场决定技术。即迎合市场的技术，无论好坏，就是将来的方向。如果说更进一步，那只有市场过程决定技术。即在过程中占领了市场的技术，无论好坏，是将来的主流。
那么，将来的市场需要什么？贝壳认为，应该是嵌入和分布。嵌入先掠过，分布角度来说，有三种不同的分布，角色分布，计算分布，资源分布，三者按层次递进。
角色分布，我们已经在实现了。大致来说，就是按照使用角色的不同，允许多个人共用一个系统，并且交互。角色分布最大的技术难点在于权限控制、对象锁定和同步。
计算分布是我们在如火如荼的进行的。其主旨在于将运算过程分散到多个机器上去，实现物尽其用。计算分布最大的难点在于计算量预测、进程间通讯和数据保密。
资源分布则是比较困难的。目前贝壳接触过两种不同风格的信息分布方法，一种是文件，一种是数据库。这两者的侧重层次不同，文件侧重于信息的传输，数据库侧重于信息的格式和内容。未来的系统中两者肯定会并存。
未来的系统必定会采用平台无关的前台构架（UI），将前台的显示和动作的响应管理交给前台的deamon程序去。而设计上采用映射相关的方法将前台的资源和行为映射到程序中加以表示。这样前台就被模拟成了一个组件，使用分布计算的构架可以轻松的和这种标准化的组件通讯。至于效率问题，你觉得会比BS模式更差吗？
未来的计算构架肯定是分布的，每个单元（cell）都是和平台无关的。单元上运行标准的组件，而组件间通讯尽力避免锁定问题。
未来的信息存储分布是我最难确定的，因为目前还没有什么方向可言。不过DHT等研究正在展开，相信一两年内应该会有一个大致的方向。</description>
    </item>
    
    <item>
      <title>那玩意是交大？</title>
      <link>//blog.shell909090.org/blog/archives/275/</link>
      <pubDate>Mon, 19 Dec 2005 06:05:18 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/275/</guid>
      <description>难以致信，交大居然圈了N大的一片地皮，造了N漂亮的一堆房子。看起来我们以前宽广豪华的校园就像是破烂一般。最夸张的是，我居然没有看到游泳馆。
整个交大的新校区都是双线的柏油马路，主干道路上有校园巴士。完成整个环绕大约要20分钟，大家可以想像整个校园的规模。按照我的估计，现在交大的校园规模大约是我们进来时候的2.5倍，面积大约16-20平方公里。原谅我这些都是估计值，按照交大的横向极限距离乘纵向极限距离得到的，应该会比较大。整个校园里面都是漂亮的草坪，道路，湖泊，河流。路边有树，路口有灯，路有路牌。看上去就像是电视里面那种超贵族的学校，根本不像一所百年的学府。当日……里面肯定有我的血汗钱……俺的重修费。
具体就看俺的blog photo吧。</description>
    </item>
    
    <item>
      <title>服务器，好漂亮</title>
      <link>//blog.shell909090.org/blog/archives/274/</link>
      <pubDate>Sat, 17 Dec 2005 05:35:34 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/274/</guid>
      <description>今天偶终于见识到了传说中的服务器是如何组装的。话说我们公司准备用台Linux服务器来做发布。偶就负责了服务器的采购大业。最终抱回来的是一个如下配置的大怪兽：
Xeon x2 KSTDDR2 1G Registed ECC x4 MT 73G SCSI x3Adpetec 2120S RAID Card Hatekey 550W Power SuperMicro&amp;hellip;.(I forgot it, but it&amp;rsquo;s E7320MCH)
从昨天下午开始，我们就坐在店里面死等服务器组件到。结果服务器组件姗姗来迟。等掉了三个钟头，逛了两圈，遇到四个熟人，聊了不知道多少时间天。还让我知道IDE居然可以插根线用USB口拖，上帝阿……我的旧硬盘有救了。
昨天下午服务器组件到货后我们就开始组装，具体请看贝壳上传的图片。不过看着闪闪发光的两个大纯铜风扇，真是让没见过啥好货的贝壳流口水阿。本来贝壳还对着SuperMicro的板子留口水，然后一个人看不过去，带去看了看顶尖主板。然后贝壳口水不流了，眼睛掉出来了，知道自己孤陋寡闻了。
时间跳阿跳，直接到今天。搞定所有部件，将最后的SCSI线插上去后。OK，开机正常了。大家不要听过程简单，其实很麻烦的。最关键是机箱，只要配合上有点错误，就装不上去了。整个过程就像在螺丝壳里做道场。真不知道1U的机箱怎么混的……麻烦装机器的师傅了。
Adpetec卡还不错，真的不错。上去后驱动没装就认出来了，省却我很多麻烦。否则我先要重编译一个合适的内核，然后上驱动，再放到安装盘里面刻录一个新的，以这个内核为基础的安装盘。这样才认的出来，然后可以安装。只要基础系统出的来，剩下的东西就好办了。装好系统直接上了一个ProE1000的驱动，居然上去了……厉害的。然后Copy下所有需要安装的，再下面就和服务器无关了……</description>
    </item>
    
    <item>
      <title>linux2.6.14-3内核编译与安装,iptables1.3.4与模块</title>
      <link>//blog.shell909090.org/blog/archives/273/</link>
      <pubDate>Mon, 12 Dec 2005 19:18:38 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/273/</guid>
      <description>这次讲的是贝壳的一次比较顺利的经历，安装linux2.6.14-3内核。并且在其上使用iptables时出现问题和解决的方法。
cd /usr/src tar -zxvf linux... ln -s linux... linux cd linux make mrproper make menuconfig make dep make bzImage make modules make modules_install mkinitrd initrd-2.6.14-3.img 2.6.14.3 cp initrd-2.6.14-3.img /boot cp System.map /boot/System.map-2.6.14-3 cp arch/i386/boot/bzImage /boot/vmlinuz-2.6.14-3 cp .config /boot/config-2.6.14-3 cd /boot vi grub/menu.lst 以上就完成了内核编译的工作，按照经典流程走的，没有啥问题，问题在后面。
重启，然后运行到iptables的时候报错。所以升级两个东西，iptables-1.3.4和module-init-tools-3.2.2。然后发现还是有问题。然后我打入lsmod。发现什么模块也没有，这样不出错才见鬼了呢。多试验几次，可以发现要加载iptable_filter模块。而他又依赖于ip_tables模块。OK，用modprobe加载。再启动，还是报错。
仔细看看设置，是在REJECT行报错，所以应该是加载REJECT模块，ipt_REJECT。成功，加载的具体方法是在/etc/init.d/iptables里面添加。
/usr/local/sbin/modprobe -a ip_tables iptable_filter ipt_REJECT 很简单吧。</description>
    </item>
    
    <item>
      <title>apache2服务器证书生成过程</title>
      <link>//blog.shell909090.org/blog/archives/272/</link>
      <pubDate>Tue, 06 Dec 2005 19:42:04 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/272/</guid>
      <description>首先为 CA 创建一个 RSA 私用密钥
openssl genrsa -des3 -out ca.key 1024 利用 CA 的 RSA 密钥创建一个自签署的 CA 证书（X.509结构）
openssl req -new -x509 -days 3650 -key ca.key -out ca.crt 首先为你的 Apache 创建一个 RSA 私用密钥
openssl genrsa -des3 -out server.key 1024 用 server.key 生成证书签署请求 CSR
openssl req -new -key server.key -out server.csr 签署证书
openssl x509 -md5 -days 3560 -req -signkey server.key -CAcreateserial -CAserial ca.crt -in server.csr -out server.crt 最后apache设置，将下面的参数改为
SSLCertificateFILE /usr/local/apache/conf/server.crt SSLCertificateKeyFile /usr/local/apache/conf/server.</description>
    </item>
    
    <item>
      <title>无溪游记一</title>
      <link>//blog.shell909090.org/blog/archives/271/</link>
      <pubDate>Tue, 06 Dec 2005 18:00:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/271/</guid>
      <description>蛮爽的，上星期刚刚去好临安，这星期又去无溪。虽然这次只有一天还要自己付钱，不过有的玩总归比没的玩爽。说到无溪，就不能不提无溪的紫砂，糖醋排骨，大阿福。其中外婆严厉警告我，如果买糖醋排骨回来就自己消受掉。因为对于我们来说，那个东西太甜了。
我们预定了两个地方，一个先去灵山大佛那里拜佛。这个对小一正合适，毕竟他学佛的。俺学道的，不过也没啥冲突，看看无妨。进门的地方蛮漂亮，不过后面写的几个字完全不认识。不像是中文，倒像是藏文梵文一类的文字，看上去和中东印度一脉的文字很像。我在那里开玩笑是“欢迎光临”或者是“下次再来”，不过想也知道佛门地方不会有这种搞笑事情出来。门后是一座牌坊，前面看的到是“布施”“持戒”“忍辱”，后面小一就和我打赌是“禅定”“精进”“般若”。当然，对他说中我是没有啥异议啦，不过念佛的人可以和人打赌吗？
门口的请香处很“热闹”，毕竟大家不是出家人，六根清净无欲无求。佛能不能保佑你是另外一回事，不过烧香至少能烧个心里清净，这种地方说明白了就是花钱买个安心。所以还是老老实实请了香去烧。
在转经处中间是九龙灌浴的设备，我们去的时候有，不过没有看，准备回来的时候看。所以就在转经回廊上面去转经。所谓转经就是用手去推动一个个大的金属桶，上面刻有经文。据说这样会成倍的获得福报。福报来了没有我不知道，不过手快断了到是真的。从下至上的结构很有意思，都是中轴对称。从山门开始中轴一直到佛祖脚下，都是正的南北走向。而且东青龙西白虎，南玄武北朱雀（这个反过来，不知道啥意思）。左右对称而不完全一致。九龙灌浴的上面是天下第一掌和百子戏弥勒，天下第一掌纯粹就是灵山大佛手掌的微缩版，放到下面来而已。百子戏弥勒到有点意思，不过介绍上语焉不详，不知道有什么典故或者意义。这两个也是左右对称的，再上面就是大雄宝殿了。
一般寺庙中基本都有大雄宝殿，结构也很经典，就不多说了。越殿而前，是佛祖面前的上百级阶梯。不知道是否佛祖要考验我们这些前来朝拜的，但是要抱佛脚要受的考验绝对出乎你的意料。首先是交15块的佛博览馆费，然后要穿越长长的回廊。我们去的时候空旷如野，但可想见节前人头篡动，摩肩接踵，大家焦急等待，艰难前行的情景。上去拜佛的时候通道修的很低，说明是拜佛要心诚，先低头。最让我们吃惊的是佛祖脚下居然还有条专门卖东西的回廊。这到是让我们了解了什么叫做做生意。这种情景让我想起原来的一个笑话。一个美国商人找到罗马教皇，说要捐献一百亿美金。教皇拒绝了，因为商人要求教皇祈祷结束的时候说：哦，可口可乐。
去看九龙灌浴前还有人庆幸，说还好没有下雨。我说话要分两层说的，没有下雨叫显灵，下了雨叫考验。结果去看的当时下雨了，你自己挑合适的话说吧。九龙灌浴是很壮观没错啦，看的也很爽啦。问题是淋的相当厉害，连相机都淋湿了。而且还没有找到组织，因此没有给别人留下很多照片，比较遗憾。
临走前我内急去了次厕所，谢天谢地这种地方也有厕所。当真是，佛门清净地，大开方便门。</description>
    </item>
    
    <item>
      <title>AS3下安装resin出错</title>
      <link>//blog.shell909090.org/blog/archives/270/</link>
      <pubDate>Tue, 06 Dec 2005 17:17:59 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/270/</guid>
      <description>make不通过
出错如下
clude/linux -I../common -DCPU=&amp;quot;i386&amp;quot; -DOS= -c -o ssl.o ssl.c In file included from /usr/include/openssl/ssl.h:179, from ssl.c:62: /usr/include/openssl/kssl.h:72:18: krb5.h: No such file or directory In file included from /usr/include/openssl/ssl.h:179, from ssl.c:62: 解决方法：
export LOCALDEFS=&amp;quot;-DOPENSSL_NO_KRB5&amp;quot; export C_INCLUDE_PATH=&amp;quot;/usr/kerberos/include&amp;quot; 引用自http://www.thinkjam.org/meteor/archives/2005/04/as3resin.html</description>
    </item>
    
    <item>
      <title>临安青山湖，浙西大峡谷。二</title>
      <link>//blog.shell909090.org/blog/archives/269/</link>
      <pubDate>Fri, 02 Dec 2005 03:59:49 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/269/</guid>
      <description>当晚我们跑到临安的一家宾馆住了一个晚上，宾馆的名字叫聚贤。不知道金庸大侠是否去过那里。宾馆分配的时候李兄正好在对门，结果整个晚上我都在吃她带的各种东西。貌似上次去嘉年华的时候也是一样……汗一个先。和我住一起的是柏菊的男朋友，做芯片封装的。总算有个同志可以谈谈电脑了……
第二天去的是青山湖，来的时候就是从那里过来的，风景还是非常不错的。我们乘一个小船去看据说当年尼克松带来的红杉树，现在那里已经是最大的水上森林了。不过可惜的是现在是枯水期，所以看不到水上森林，而且船也开不过去。不过也正是因为枯水期，我们跑到了湖中央的滩涂上去玩。导游也说这是他头次跑到滩涂上面，因为枯水期根本没有什么人会走这条线路。奇怪的是滩涂上还有一个破破的帐篷，不知道什么人在那里搭的……汗……
青山湖游完就不知道跑哪里去玩了，所以干脆跑到旁边的草地上烤肉玩扑克。我们没有啥烤肉经验，烤的时候没有放油。整个肉都烤的外黑内红，根本不能吃。最后我们问边上的人借了点油解决这个问题，当然，肯定是有借没有还的……嘿嘿……我也在上面烤，而且工艺是最特殊的。别人烤肉都是串一串，然后去烤。我是拿一块，然后用烤肉签去翻它。所以烤肉签不容易烧断掉，而且翻动频率也比较高，烤的非常均匀。相反烤一串的要么签烤断了，要么没有熟，总之都不能吃。不过吃好东西是有后遗症的，我们烤的是兔子肉，又不一定熟。害我上火N天，牙痛肚子痛。李定婷同志怎么没事呢？
下午就是回程了，没有啥意思，不过车上N多人在唱歌。李定婷还在那里评论这个歌怎样，那个歌怎样。再后来就讲到吉他和小提琴了，包括conan和romance。我还把conan的旋律唱错了，脸红一个。中途下过一次车，导游让我们去一个房间喝菊花茶，估计是外快性质的啦。不过这种东西也是太公钓鱼的事情。杨总买了点杭白菊，感觉蛮实在。我要是早知道这两天上火，我也买了。
最后就是跑到上海后的事情了，李定婷想直接在高架上下车，然后走就走的回家了。不过想也知道那是不可能的。还是要跑到人民广场去，买了两包翅膀尖，然后回家。感觉比N年前去杭州的时候好玩，主要是去杭州的时候可没有多于的时间让我们买东西……</description>
    </item>
    
    <item>
      <title>电信机房参观</title>
      <link>//blog.shell909090.org/blog/archives/268/</link>
      <pubDate>Wed, 30 Nov 2005 04:12:43 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/268/</guid>
      <description>今天偶跑到上海电信机房去参观了，看里面的机器感觉真是爽阿。很多都是品牌机，拼装机都看着非常专业。绝对不是我们公司里面那种破烂机器能比的上的。问代理商，代理商说这是电信的1G光纤分流到户，每个机柜100M带宽，20个机器去分，每个用户不限制流量。因为我们用的那个机柜都是小流量的机器，所以保证我们10M没有问题。如果以后流量太大，也可以换一个接入，用专用的100M口。
偶们在公司里面估算过，假定一个页面调入，不计算图片等媒体，需要50K的网络数据传输。（这也是公司一般页面设计的大小）调入非媒体的时间假定在五秒不会让用户感觉到慢。这样一个用户连接就需要保持10K的带宽。10个用户就是100K，换成bps就是大约合0.8Mbps。图片一般都是静态的，所以只要跑一次，后面IE会自动看缓存。所以每次会耗用KeepAlive的Session大约250字节的数据，基本可以忽略。只是如果带宽空余点首次跑图片的时候比较快，如果不空就比较慢。到后面访问几乎没有差异。
按照供应商的数据，我们有可以至少支持125个页面并发。假定平均一个用户同时开启的页面是两个（有的人开新窗口来用的，还有部分是我们需要弹出或者页面内引用页面），那么就是支持60个用户并发左右，貌似够了。因为60个用户并发，假定每个用户等待加操作需要10秒/页面，而读取的速度是5秒/页面。那样峰值用户数就是120人。平均来说可以支撑最少1000个用户。
问题在于问题在于，杨总设计的业务流程中大量的使用了内嵌的office文件。经常要上传下载office文件。那么我们要把这部分的流量抽离开来使用。一个office文件平均100K，而用户静态数据区大小是100M。按照单次使用不超过总容量1/10的原则来计算，一次用户操作的最大空间就是10M合100个office文件。实际到是没有这么多，一般是5个上下。这样算来，用户需要在五分钟内上下传500K的额外数据。运气好的话只有两个的客户在做这个东西，那么就是6Mbps的速度要求！
我们在假定了两个客户同步做上下传的前提下，还得到这种惨淡的结果。要我们支撑120个同步用户至少需要20Mbps以上带宽。不知道这个系统在后面还怎么经营下去……
算了，那个也不关我事，至少目前不关。到是服务商的收费理由让我感到很有趣。他说他收费贵是因为机房建立的比较好。电池是专门的在线UPS，大楼有备用的发电设备，灭火器是干粉的，大厦是抗震的，所以比较贵点。这些理由怎么样不说啦，至少让我开了眼界……
回来的时候碰到件妖怪的事情。我不知道怎么回去，正好和陈工的981顺路，所以一起回去。结果车等了很久，上去人很多。开了没多久，发现熄火。司机关掉机器再开，启动不了。然后狂踩离合器，汽车居然跑的动了。虽然速度奇慢，不过让我觉得很神奇……</description>
    </item>
    
    <item>
      <title>临安青山湖，浙西大峡谷。一</title>
      <link>//blog.shell909090.org/blog/archives/267/</link>
      <pubDate>Tue, 29 Nov 2005 06:10:15 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/267/</guid>
      <description>这次公司准备去旅游，我们去的目的地是临安。本来准备叫老妹同行，不过她不去（具体啥原因就不深究了）。所以干脆叫上李定婷同志，啥时候还能拉一个曲子（笑……）。
临行前李定婷同志充分展现了她坏事大于做事三倍的功力，把我和我们耍的够呛。我早猜到她会睡懒觉，所以提前准备了morning call。不过她居然关机，然后安安心心睡到六点。放我鸽子有够彻底。这也就算了，毕竟人家还肯拉车过来，也就不计较了。不过她拉车的方式比较特殊，不是从高架上面走最近路线，而是先乘个渡轮乘掉20分钟再说。我对此在紧急情况下的气定神闲表示十二万分的敬意。最后搞的我左右赔不是，尴尬的要死。
李定婷MM充分的展现了她吃东西的功力，路上就看到我们在说话和吃各种东西，除了水。而且她拿来的各种东西都很好吃，据说还很便宜，不知道为什么那么有口福，偶羡慕。车上开了五个多钟头，以前陪老爹乘各种怪车子已经习惯了。毕竟我已经过了上车上吐下泄的年龄，何况这次又有MM在边上。不过同行的四个小毛头就倒了大霉，一个吐了一个拉了。我们中的某人路上说小孩最好，让大人抱着满山跑。照我说小孩最痛苦，看又看不懂，还要忍着不吐，憋着不拉。弄个不好还感冒发烧啥的，大人小孩一起倒霉。
浙西大峡谷是我们观光的头个景点，行程在头天下午。汽车开到一处鸟不生蛋的地方，然后换个小车再开。起初我们不解其意，后来看到狭窄出两车交错的惊险，顿觉一身冷汗。再回想我们的大车，均有戚戚然之心。俗话说天堂非乐土，乐土非天堂，里面越是人烟罕至的地方越有意思。开始是一个小水谭加些干涸的河道。相比起来还是石壁上的如链如帘四个字更有吸引力。后来我们贴河道而行。现下正是枯水期，走过河道旁的时候可以下到河底，拣石头踩沙子别有乐趣。凌空于河上的吊桥和边上的“禁止摇晃”更加深了我们的乐趣。我人很好的，不怎么忽悠别人。不过所有人中总有那么几个好事者，喜欢听别人和自己在忽悠中的尖叫。幸好太极拳颇见成效，扎下马步任尔随便恍，我自岿然不动。
山崖上的侗族舞蹈表演让我了解了旅游景点做生意的诀窍。先美其名送你小礼包请你参加游戏，然后给你“参观”下婚礼的仪式。当然人家姑娘不能白嫁人。入洞房之时就是主婚人问你要钱之时，你的小老婆还问你要彩礼钱。最嘲的是最后请你记得这里的小老婆，下次再来！当真佩服佩服。
最后的白马崖才是游山的重头。我们去的时候天色已晚，人迹罕至。从下走至上奇山怪石不断，风景独绝。走在山路上感觉和城市里的楼梯非常相仿，不过如果城市中有这种景色可看，有这种新鲜空气可享。那我定会早起三五分钟来多爬几层。最后费尽力气才走上白马崖顶的小亭。上面的古钟本应收费，不过时间已晚，管理员前去吃饭，白白便宜了我们。</description>
    </item>
    
    <item>
      <title>debian上配置基于apache2的resin</title>
      <link>//blog.shell909090.org/blog/archives/266/</link>
      <pubDate>Tue, 29 Nov 2005 00:26:52 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/266/</guid>
      <description>别的不说了，先用debian自带的apt安装apache2,记得安装dev部分，还有libapr0,libapr-dev,libapr0-dev。千万别忘记安装后面的部分，否则你在下面编译的时候就要出现问题。
拿到resin，放在目标目录下面，然后tar -jxvf。完成后用ln -s做一个链接上去，使用resin的名字，这样可以方便的替换版本。然后在主目录下面运行./configure，make一下。一般来说，会出不少错误，最后生成一个libresin.so放到libexec下面，并且更新了resin的主执行程序。这个so很具有迷惑性，开始贝壳就被他骗了。这个so貌似是resin在本地平台下的加速程序，而不是嵌入到apache系列服务器中的整合插件。其中最大的差异是没有caucho_module导出符号，在apache加载的时候肯定会失败。
跑到src/c/plugins/apache2下面运行make。可能会报错，可能没有。贝壳这里报了错，不过贝壳运行configure的时候没有加任何参数，也许加了参数就正常了。如果不正常，出错的代码可能分别是httpd.h找不到或者apr_time.h找不到。运行vi Makefile，看到有INCLUDE的目录吗？那里面要包含/usr/include/apache2和/usr/include/apr-0两个目录，没有就肯定出错。好了，修改然后重新make。得到的文件是mod_caucho.so。将它cp到$RESIN_HOME/libexec下面，这个动态库导出了caucho_module符号。
在/etc/apache2/httpd.conf里面编辑一下，添加这个内容。
LoadModule caucho_module /usr/resin/libexec/mod_caucho.so &amp;lt;IfModule mod_caucho.c&amp;gt; CauchoConfigFile ......../resin.conf &amp;lt;Location /caucho-status&amp;gt; SetHandler caucho-status &amp;lt;/Location&amp;gt; &amp;lt;/IfModule&amp;gt; 在/usr/resin/conf/resin.conf里面，添加这些内容。
&amp;lt;doc-dir&amp;gt;/var/www/htdocs&amp;lt;/doc-dir&amp;gt; &amp;lt;war-dir id=&#39;/var/www/htdocs&#39;/&amp;gt; 在/etc/apache2/sites-available/default中可能要修改如下配置。
DocumentRoot /var/www/htdocs/ &amp;lt;Directory /var/www/htdocs/&amp;gt; 然后注销
RedirectMatch ^/$ /apache2-default/ OK，这样就基本完成了整个系统的整合配置。</description>
    </item>
    
    <item>
      <title>quiz tree</title>
      <link>//blog.shell909090.org/blog/archives/265/</link>
      <pubDate>Fri, 25 Nov 2005 04:42:13 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/265/</guid>
      <description>提问1：2005年，你的野心是什么！！『出题人：狐狸』
找一个电脑公司发展
提问2：为以下物品撰写一句话。此物品为二锅头。『出题人：葵』
牛栏山
提问3：叙述你或者你想象中的最囧（jiong）的一次恋爱经历
限原创；字数250字以上。『出题人：栗子』
目前没有最囧，只有更囧。因为每次都是暗恋，然后失恋。
提问4：一天早上起来，发现自己身边的人都变成蛤蟆似的只会跳，只会呱呱叫，你怎么办？『出题人：鬼丸』
努力研究NLP，争取早日翻译蛤蟆语
提问5：如果发现自己最近衰到极点，你会怎么办？『出题人：星星』
读周易
提问6：请形容一下你理想（妄想）中的结婚场景吧。。包括结婚对象。『出题人：泡泡璐』
Dear and Be Lover， we gether here to celebrate this man and this woman lawfulholy wedding&amp;hellip;
结婚对象可以是计算机吗？可以的话我选深蓝
提问7：如果你可以变成动漫/卡通里的角色，你想变成谁，说出原因。『出题人：猫猫HISA』
如果不计较性别，应该是天空之城的shuta。不过她是女的，所以还是AhMyGodness中的森里莹一好了。
提问8：初吻的地点，时间，对象。哈哈哈哈。。如果还没有，那希望跟谁？『出题人：叉』
这题的答案会害我被揍死，免了吧
提问9：最想到什麽地方定居。和谁一起去。以及原因。很简单的问题吧。『出题人：熊子』
可以和米特尼兹定居到MIT中心机房吗？
提问10：觉得人生对自己最重要的是什么？『出题人：lulu 』
我不大清楚“人生”是男的女的，不过“自己”应该是男的。所以最重要的应该是爱情吧。
提问11：你一觉醒来，发现全世界的人都看不见你，也听不见你说话，你会怎么办？『出题人：樱桃猫猫』
先去各个大学的中央机房上个机，弄几个账号，再去微软拿份源代码，最后去瑞士银行搬纳粹金条。
提问12：如果可以从机器猫（也奏是哆啦A梦）那里得到一样宝贝，你想得到什么？『出题人：小文』
不用别的了，机器猫可以给我吗？我想研究下主程序
提问13：如果重新让你选择一次已经过完的这段人生，你会想从什么时候开始？换句话说，你对自己什么阶段最后悔，想重新来过？『出题人：野孩子』
小时候，最小的时候
提问14：你最后一次ml是什么时候？跟谁? 『出题人：阿米』
这个问题恕不解答
提问15：你认为孙悟空和黑猫警长哪个更性感点？『出题人：假民工』
是男性的性感还是女性的？
提问16：死的时候你会送我什么？『出题人：benbenz』
周易吧
提问17：人为什么要识字？是为了活得漂亮一点，还是为了忧患？『出题人：sep』
为了可以操作计算机
提问18：你非常丑，只有你最爱的人爱你；你非常美，除了你最爱的人人人都爱你。如何选择？『出题人：半缘君』
很难选择，还是丑点好了。我很丑但是我很温柔。
提问19：你非常坚持个性，男/女友坚持你改变个性，如何权衡？『出题人：秋暮晨』
没有权衡问题，我念你听噢。你非常坚持个性，男/女友坚持你 改变个性。
提问20：最计较的一件事情？『出题人：一抹深蓝』
你可以拒绝，但是不能说谎
提问21：你认为自己真正爱过吗？『出题人：Lisa文文』
没有
提问22：用一种花、一种饮料来形容自己。『出题人：KK』
昙花，清水
提问23：坚持自我，真的那么重要吗？『出题人：Mizukii』
自我都没了，还做啥人
提问24：如果明天就世界毁灭，你会做些什么？！『出题人：可爱的33鬼娃娃』
先写个程序模拟下好了
提问25: 你会把心事藏多久? 出题者：KYO</description>
    </item>
    
    <item>
      <title>Linux内存计数详解</title>
      <link>//blog.shell909090.org/blog/archives/264/</link>
      <pubDate>Thu, 24 Nov 2005 23:53:35 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/264/</guid>
      <description>又中计了……
近几天用oracle，发现oracle狂用内存，经常内存小到10M的规模。汗一个，赶快让经理买了新的1G内存来装，上去后发现根本认不出来。加班一多小时才发现386内核根本不认高端内存(HIGHMEM)，所以内存极限一直是896M。以前是1G内存，所以看不出来，现在换了1.5G，看出来了。
赶快上了一个2.6.12-1-686的内核，然后重启，认出来了。不过free还是只有32M左右，我们大惊小怪的打电话到oracle那里去咨询，得到的答复是要安装完整的补丁，并且要用oracle认证过的服务器。oracle认证了啥服务器？RedHatEnterpriseAS3/4,那个东西要收费的，而且绝对不便宜。最后无奈，做了一次不启动oracle的测试。出乎我们意料的，mysql吃了多数的内存。具体造成这种状况的原因是啥呢？
偶查阅了linux内存管理资料，发现linux的内存管理计数上讲的东西和windows讲的有很大差异。下面具体列举下几种计数、查看方式和含义。
total mem，可以用top free查看出来。
free mem，可以用top free vmstat查看出来。
used mem，可以用top free查看出来.
buffer mem，可以用top free vmstat查看出来。
shared mem，可以用free查看出来。
swap mem，可以用top查看出来。
swap used，可以用top vmstat查看出来。
cached mem，可以用top free vmstat查看出来。
active mem，可以用free vmstat -a查看出来，即cached used。
inactive mem，可以用free vmstat -a查看出来，即cached free。
其中total mem是除去系统外的可用内存，系统大约占1M多。然后分配给free mem和used mem。used mem又包括了内核表使用（例如GDT），程序使用，buffer，cached。所以
cached mem=active mem+inactive mem
total mem=free mem+used mem
used mem=内核表使用+程序使用物理内存+buffer mem+cached mem
略去内核表使用，这个式子可以变形成这样：
程序使用总内存=swap used+程序使用物理内存
=swap used+used mem-buffer mem-cached mem
=total mem-free mem+swap used-buffer mem-cached mem</description>
    </item>
    
    <item>
      <title>C&#43;&#43;语言跨系统编程</title>
      <link>//blog.shell909090.org/blog/archives/263/</link>
      <pubDate>Wed, 23 Nov 2005 03:38:06 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/263/</guid>
      <description>首先我们给这个话题增加一个基础，就是您的C++代码没有用到native的部分。具体哪些部分我会列出让你慢慢检查的，不过用到了还想跨平台，你做梦去吧……
我们假定你代码是在windows的VC++下面写的，因为VC++的转换过去有点麻烦，反向的转换基本可以自动生成。
首先请检查你的头文件依赖性，如果是引用了标准的头文件，那么不需要额外的设定。一般g++的设置中都会自动设定标准的头文件和库。如果引用了某个自己写的文件，那么请检查相对路径是否正确。尤其请着重检查大小写。因为windows不会管大小写的，但是却会将大小写带入*nix。
另外VC++中有一个头文件预编译的加速选项，默认是开启的。将stdafx.cpp(which is empty)预编译次，就得到了stdafx.h的编译结果。在*nix里面我目前还不知道怎么支持，所以stdafx.cpp可以不用理会。
然后请检查标准函数，部分VC++声明在STDLIB.H中的函数其实是VC自带的。用这种函数的结果就是编译100%的失败。遇到这种函数可以自己写一个代替，反正一般都不是特别麻烦。
另外一般不需要关心数据类型和端点型，多数库文件中都会自动处理。不过两种情况需要手工干预。一个是程序中使用了windows特有类型例如DWORD或者linux特有类型le32。这样用typedef重新定义就好了。还有就是跨平台的时候连同芯片类别一起跨过去。这样就要手工确定所有库文件会自动处理数据类型，并且人工定义一组会使用的数据类型扩展宏来处理跨平台的问题。最明显的例子就是int在不同平台的大小问题，对此还有一个特殊的建议就是使用char short long来代替，这三者在所有系统上的长度是相同的。
下面是使用sh脚本来编译代码。其实可以使用make文件来做的，不过俺不会。所以用sh来做好了，反正一般跨平台的程序都不会过于复杂，凑合下就过去了。
g++的编译对象一般是cpp文件，如果是一般的可执行文件，那么编译的指令是g++ *.cpp -o oufile。我这次编译的对象是共享库，所以指令是g++ -shared*.cpp -o outfile。
g++处理extren的比较特殊。如果extren在编译成目标文件时还没有指定链接到哪个符号，那么g++就自动将这个定义为从动态库中引入。不过多数情况下，这应该会出错的。所以要多个cpp文件一起编译，或者使用-c编译到.o文件后再ld起来。否则单个cpp的编译结果根本无法使用。
如果需要使用少量native的方法，也可以按下面说的方法跨平台。
在VC++中定义一个win.cpp，其中将native的方法封装成函数。在主程序中使用C++标准函数和这些函数。
在linux中定义一个linux.cpp，然后用linux的native函数实现对应的函数。在编译的时候略过win.cpp。
VC++中工程引入的时候不要加入linux.cpp。
这样可以保证在两个系统下分别对应不同的函数，当然更好的方法是使用平台相关宏。
附录1，windows下的专有编程技巧：
使用了nativeAPI的绝对无法移植，它们有的甚至无法跨越2000/XP的差异。
使用windowsAPI的，一般不可以移植。这类API多数声明在windows.h中。
使用winsock的没有希望啦，要用socket2才可以。winsock的特征是WSAStartup。
使用了__try{的无法移植，而try{可以。前者是SEH的捕获模块，后者是C++异常捕获模块，在windows下异常捕获是用SEH实现的，不过linux下面不是。linux根本没有SEH。
使用了windows或者VC专用宏的无法移植。
使用C++库和std库的可以移植，包括cout。
使用STL可以移植，不过注意平台差异性。
附录2，linux项目在VC++中引入的方法。
新建一个工程，然后copy所有源代码到工程下面。再然后添加文件到工程，然后F7编译。over</description>
    </item>
    
    <item>
      <title>Debian GNU/Linux下安装Oracle 9i</title>
      <link>//blog.shell909090.org/blog/archives/262/</link>
      <pubDate>Mon, 21 Nov 2005 21:58:01 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/262/</guid>
      <description>最近因为工作需要，在Debian GNU/Linux安装了Oracle 9i。Debian代号sarge，版本号release 3.1，testing发行。Oracle代号9ir2,版本号9.2.0.4。安装文件名称为ship_9204_linux_disk1.cpio.gz ship_9204_linux_disk2.cpio.gz ship_9204_linux_disk3.cpio.gz。需要一个补丁，文件名为p3006854_9204_LINUX.zip。Oracle 9i安装的是Enterprise Datebase。
先执行以下脚本：
#! /bin/bash #变更内核参数 cd /proc/sys/kernel #1G内存状况，按照需要调整 echo 4294967295 &amp;gt; shmmax touch /etc/rac_on #增加一个link，debian需要 apt-get install libstdc++-glibc ; 或者使用aptitude cd /usr/lib ln -s libstdc++-libc6.2-2.so.3 libstdc++-libc6.1-1.so.2 #增加用户 cd /home mkdir oracle groupadd dba useradd -g dba -d /home/oracle -s /bin/bash oracle #注意-s参数，如果不指定下面的初试化脚本不一定跑的起来 passwd -d oracle chown -cR oracle:dba oracle cd /usr mkdir oracle chown -cR oracle:dba oracle cd /var mkdir oracle chown -cR oracle:dba oracle #增加初试化脚本 cd /home/oracle echo &amp;quot;export DISPLAY=&#39;&#39;&amp;quot;&amp;gt;.</description>
    </item>
    
    <item>
      <title>模块化便携设备</title>
      <link>//blog.shell909090.org/blog/archives/261/</link>
      <pubDate>Thu, 17 Nov 2005 06:46:34 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/261/</guid>
      <description>前几天和一个fashion派的同学聊天，她说买个相机啥的多花点钱，然后就不升级了。偶想这不傻瓜嘛。不过后来想想偶聪明到哪里去呢？升级也就升级个SD卡，要换别的重新买。PDA等于半个废物。
其实现在的机器都做的太分散了，所以价格超贵。按照偶的电脑中心论的观点，只要技术成熟，所有东西都要集成到核心电脑上做。
注意，以下说明的种种情况都只是猜想，在目前技术条件下设备可以做到何种程度。至于为啥没做，和贝壳无关……
例如将PDA加一个底板包包起来（当然看起来更像吧PDA插到某个设备上面，类似偶的PDA底座一类的东西），就可以做成PDA数码相机。闪光灯电源另外供应，从缩放到啥的都可以集成在这里了。相信没有啥变态会在照相的时候处理公务吧。另外PDA内部一定要集成一个可以更换的SD卡，这样有充分的空间可以做各种扩展，不会像偶这么悲惨，插了SD不能干别的，不插SD啥都不能干。
还有PDA一定要集成一个扩展背包，可以充电/内部带电源。放在电源上就给PDA和自身充电，拿起来就用自身给PDA充电，类似扩展电池啦，不要的时候可以拔下来。上面一定要有USB接口，至少可以驱动U盘（所以这个扩展包才要有电池阿），这样偶要倒歌就非常方便了。最好还可以驱动小键盘，偶可以写写程序。如果可以，最好整合D-15接口，这样方便商务用。毕竟做投影之类的还是比较常见的。
PDA上一定不能内部整合手机，否则PDA电玩没了你要接电话就死翘翘了。不过可以考虑做一个背包插接块，将手机固定在PDA上，红外口对红外口。这样PDA就能顺手上网。可以的话还可以给手机做上充电。如果有其他解决方案，最好手机只有接电话的功能，连短信都没有。所有的手机设置，管理，看短信，无线上网，统统放给PDA。这样手机只有三个键，没有液晶板，绝对超便宜。
PDA上一定要整合声音功能，至少要可以扩展出录放和无线设备。这样等于有个MP3，不怕费电还可以当录音笔用。偶尔懒的看也可以让PDA给读出来。在平时这个功能不见得好用，颠簸的车上读个东西还真比自己去看要强。至于GPS定位天线就大家自己搞定吧，这个东西加上去不是重量或者电力的问题，而是价格的问题。毕竟GPS服务的价格放在那里呢。
OK，我们看看有多少个模块组，重量价格和电力情况如何。
PDA，内置一个可更换SD卡，带内置/扩展录音播放，支持无线收音。价格带SD卡大约3000吧，这个价格绝对够了。用电大约是四五小时，重量大约300g。
底版照相包，扩充成照相机用。价格大约1200，要自带闪光灯电池。重量500g多点吧，不带电池。
扩展背包，扩展设备的主电力，价格大约1000，重量600g多，毕竟人家有电池嘛。
整合用手机。这个另外算吧，但是应该价格在200上下，重量300g上下，电力另外算。
扩展键盘，扩展在背包上，价格大约200，重量大约600g左右。
整体全部拿下来的价格是5600，重量2.3kg。打折加别的东西进去，价格应该在5300上下，重量2.5kg。功能包括一个能上网的正常电脑（除了小了点），一部数码相机（带卡噢），一部手机（短信收发超方便），MP3和录音笔（现在卖的MP3都整合录音了）。总体使用时间大约是三四个小时。而目前要买这么几个东西，笔记本超贵就不说了，数码相机就要2500，MP3要300，手机要500。这已经3300了，还不说到底多沉。
整体的一个核心思想就是，既然各种设备上都有类似的东西（液晶屏幕，核心处理器，电池），那为什么不将所有资源放到一起呢？毕竟没有多少情况要用两份资源的。</description>
    </item>
    
    <item>
      <title>照月亮</title>
      <link>//blog.shell909090.org/blog/archives/260/</link>
      <pubDate>Thu, 17 Nov 2005 06:13:39 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/260/</guid>
      <description>Dear Turing，我实在太激动啦。今天偶出门照月亮，照到手都冻僵快了。不过收获不错，DC在不同模式下照出来的东西都有可看处。圆圆的漂亮的大月亮终于藏进了偶的相机。唉，说话越来越像XX了，莫非她的东西看多了。
何人江畔初见月，江月何年处照人。问的多好阿，这么漂亮的月亮，是什么时候才有的呢？按照Ross的回答，technically, it&amp;rsquo;s 7-billion years ago。不过虽然人不同，地点不同，时间不同，我们看的月亮是相同的。这个圆圆的漂亮的白色大球，李白看过，说举头望明月。张若虚看过，于是有了春江花月夜（偶打太极老听见……）。当然秦始皇汉高祖唐明皇之类煞风景的玩意也看过，这就不说了。今天我看到了，你……也看到了吗？
月儿圆，人团圆……</description>
    </item>
    
    <item>
      <title>人和人</title>
      <link>//blog.shell909090.org/blog/archives/259/</link>
      <pubDate>Wed, 16 Nov 2005 19:13:58 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/259/</guid>
      <description>今天坐在车上，看人来人往，感觉一如从前。
我每天上班的时候喜欢在7:53分坐787从南泉路向德平路走，时间比较稳定，车坐的久了，看到的人都有点认识的。在我上车的站，总有一个喜欢穿紫色衣服的MM，应该是哪个公司的白领，在陆家嘴附近工作。维纺路会上来一个头发比较爆炸的中年人，每次都腋下夹着报纸或者包上来。不知道是不是夹的习惯了，没有包就买张报纸夹着。东昌路地铁站会上来一个瘦瘦的酷酷的MM，很像高中时候的贾小凤。我下车的时候还在车上安稳的看报纸，估计是坐到底的。每次的报纸都是时代报，而且都是看第三版。源深路的时候会下去很多学生MM，其中一个特别高，估计和我差不多，怀疑是做模特的，只是年龄不对。民生路的时候又下去不少学生MM，都是海事大学的。其中有两个看着特别像高中女生的，不过我肯定是大学生，因为有次我看到他们拿出民法在看。高中生是不会这么做的。
回家的时候是反过来坐的，时间当然也没有上班的时候那么准。一般会看到上去的时候后面有很多学生。有初中的，也有高中的。其中有一对学生couple因为我搭过两次话比较熟悉，看到都会打个招呼。估计他们也不难认出我来，因为我的头发已经是上海市的注册商标了。有几个是初中的小MM和小DD，他们都是在民生路下的，那里有个初中。
不知道这些人，是否知道我。不知道他们眼里，我是怎么样？</description>
    </item>
    
    <item>
      <title>SrouceForge</title>
      <link>//blog.shell909090.org/blog/archives/258/</link>
      <pubDate>Mon, 14 Nov 2005 05:33:26 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/258/</guid>
      <description>今天去看了开源代码区，www.SrouceForge.net。总体来说不错，只是慢了点。里面有很多有趣的软件，我还在试他们。刚刚发现一个好东西，truecrypt。
truecrypt是一个加密软件，姑且算吧。用hash和对称加密算法来做加解密，速度非常了得。不过最惊人的地方不是加密的部分，而是实现方法。它先生成一个加密文件，然后在上面加密码（或者密码文件）。然后将这个文件挂载到某个windows没有使用的驱动器上，就好像插入一个加密U盘一样。这个对文件系统完全透明，就我所知，是要写IFS驱动的。但是我在里面没有看到IFS驱动，也可能是封装在程序内部去释放他了，或者是因为扩展名是dll。因为有个主dll啥导出都没有。
总之这个软件我是大力推荐的，如果你打算要一个强加密的系统。使用方便，绿色无污染。使用的时候也没有加解密过程。那么就用它吧。它最合适的地方是放U盘，上面放个文件系统，然后分出点空间来做加密。运行软件后任何系统上（这年头没兄弟还是98了吧）都可以做透明操作，就仿佛你有一个非加密U盘和加密U盘。</description>
    </item>
    
    <item>
      <title>JNI试用记</title>
      <link>//blog.shell909090.org/blog/archives/257/</link>
      <pubDate>Thu, 10 Nov 2005 19:35:19 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/257/</guid>
      <description>近两天要用JIN做数据加密系统，所以特别写了这篇。省得以后忘记，顺便造福大家。
下面是核心编码：
//CTX.java
public abstract class CTX {
protected byte[] state = new byte[20];
protected long count;
protected byte[] buffer = new byte[0]; /* input buffer */
protected byte[] PADDING = { -128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,</description>
    </item>
    
    <item>
      <title>被骗了</title>
      <link>//blog.shell909090.org/blog/archives/256/</link>
      <pubDate>Tue, 08 Nov 2005 06:20:32 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/256/</guid>
      <description>如果这个代码出现在linux内核里面，你们怎么想？
subtypes[n].parse(state, bdev, START_SECT(p)*sector_size, NR_SECTS(p)*sector_size, slot); 很像是对象数组调用方法吧，很多人可能甚至会猜想这个东西是虚函数。问题是，大家记得吗？linux内核，是C的！
事实上，这是声明。
static struct { unsigned char id; void (*parse)(struct parsed_partitions *, struct block_device*, u32, u32, int); }; 怎么想？这个是方法映射。技术上讲，和虚函数属于同种类的应用（dymanic binding）。当然，数据结构有差异。虚函数要先根据n确定对象位置，根据v_ptr确定虚函数表，根据虚函数表定位了函数入口。而这里是根据n定位了对象，然后直接找到了函数入口。
可是，还是被骗了……
PS.谨以此纪念首次在GNU/GPL下引用Linux内核源码用于程序开发，因为分区系统资料该死的不清楚！</description>
    </item>
    
    <item>
      <title>U盘数据隐藏原理和密码系统</title>
      <link>//blog.shell909090.org/blog/archives/255/</link>
      <pubDate>Mon, 07 Nov 2005 17:25:13 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/255/</guid>
      <description>U盘在windows下有个很好玩的特性。除非不能分区，否则一旦经过分区，windows永远只认第一个分区。也就是说如果U盘映射到sda，那么windows只认sda1。很多隐藏数据或者特殊功能就是利用这个特点来实现的。
现在我们要自己用这个特性，那么就需要自己去操作U盘的数据。也许很多人会想到U盘驱动或者IFS上去。没措，通过那个你可以使用U盘所有特性。但是要操作分区根本不需要这么复杂。根据我的测试，U盘接入后会成为PDn。例如我这里就是PD2，PD0是启动盘，PD1是第二硬盘。利用CreateFile的文件读写机制就可以直接读写U盘的底层数据。
通过这个特性，U盘在我们眼里就变成了一个文件。然后就是如何编辑分区表的问题了。这个嘛，写个程序吧，让他可以通过这种形式来编辑特定分区表，filedisk &amp;ldquo;.PhysiceDiskn&amp;rdquo;，就如同linux下的fdisk命令形式，fdisk /dev/sda一样。
下面就是格式化磁盘，给我们自己的盘一个特殊的类型标示，然后通过我们自己程序的直接读写来定位和操作这个分区。为了保证安全性，我们最好还利用某种方式来进行加密。一般来说我推荐使用PD0（这个肯定存在）的SN和用户键入的密码形成密钥块。</description>
    </item>
    
    <item>
      <title>工博会第三天</title>
      <link>//blog.shell909090.org/blog/archives/254/</link>
      <pubDate>Mon, 07 Nov 2005 17:00:15 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/254/</guid>
      <description>其实第三天并不完整，因为贝壳感冒了……
头天累过头了，然后晚上吹了点冷风。结果当晚就感冒了，今天起来说话嗡嗡的。还好没有发高烧，否则问题严重了。可怜我还要带一个包和一个笔记本去展厅。因为这个是昨天我带回来的，总不能不带过去阿。所以撑着到展览场地，通关进去，好玩……今天我最早。于是连上笔记本然后准备好参展的东西，坐下来休息休息。
柏菊同志是第二个来的，紧接着就是曾经理。知道情况后和杨总打个招呼，放我回家。我说我先顶个上午吧，否则交接不好做。要是客户上来一问三不知就不好了。何况我还要照点照片。于是顶到杨总到，基本东西都说完了，跑去拍MM照片。原来前天看到的Hot
Girl是阿尔卡特请来跳舞的，难怪……
跑到西门子的展厅里面，发现还需要登记资料和排队。我问警卫这个队伍大概多少时间，他回答是二十分钟。按照一贯的情况来分析，这句话的真实含义是，起码要半个钟头以上！我哪里有那么多美国时间阿。半个钟头后已经过了吃饭时间了，算了，照了两张排队照片出来了。到是周一可能比较轻松的进去，不过感冒呢，还是算了吧。
回家吃饭，下午去邮局领了老妈寄过来的芯片。测试了下，还是低速的，而且比原来的还差！大致和老板N年前买的相机里面的128M低速芯片性能一致。真不知道这些人到底是干吗的，没见过高速芯片吗？</description>
    </item>
    
    <item>
      <title>工博会次日记</title>
      <link>//blog.shell909090.org/blog/archives/253/</link>
      <pubDate>Sun, 06 Nov 2005 16:40:12 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/253/</guid>
      <description>今天跑过去又早了，所以拿了相机去照其他几个馆。先跑到了五馆，赫然发现有交大的展台（后面还碰到了一个交大的老师）。妈呀，虽然毕业前对交大是恨之入骨，这么多年对于交大捞钱的恶德行也是知之甚深。但是毕业后突然看到交大还是蛮……怀念的。难怪N多人难忘母校，其实和他在学校里面受何种教育无关，主要是这个标志代表了他的一段少年时光。后面还有复旦等等的展台，不知道大佟看没看到这个blog。不过你学校都参加了你还不知道工博会是啥，这个也够……
有大学必定有高科技演示和啥引进会联合会发布会一类的东西，这里也不例外。我看到一个潜水机器人的演示，觉得很像JR他们搞的那个。要是小方JR看到这个blog，记得查查你们的东西是不是给copy了。我肯定那个不是原版，因为没有一陀陀的硅胶在上面。
后面我跑去本馆看移动了，不知道为什么移动那里有辆车。照相的时候给MM发现了，摆了Pose让我照。奇怪，移动啥时候卖车了？Coffe
MM照例还是满街跑。不过今天公司同仁不上班，全部倾巢而出，在展位上搞了N多东西。拉了一拨又一拨的人，弄的我都没时间休息。期间我还看到了一对外国人，不过讲的不是英文，应该也不是法文和德文。这几国文字不会但的听的多了，所以也能听出来点。
今天还有一个奇怪的就是有很多小朋友在展位里面转。大的十多岁，小的三四岁。不过后来池工带了他的老婆孩子过来，然后还有个客户带了他女儿过来。So我弄明白了怎么回事。还有个客户在和我们大谈和电信合作服务的可能，杨总看来明白不少，我反正还是一脑袋雾水。
杨总搞了个主意，用有奖答卷来吸引客户。结果我们买了两斤……棒棒糖。看着曾经理在那里举棒棒糖的样子，真的是蛮搞笑的。最后我照了N多搞笑的照片，包括吃帮帮糖的，janny同志倒水的等等。</description>
    </item>
    
    <item>
      <title>工博会首日记</title>
      <link>//blog.shell909090.org/blog/archives/252/</link>
      <pubDate>Sun, 06 Nov 2005 04:24:34 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/252/</guid>
      <description>今天去工博会，早上出门打领带花了我不少时间，一直解决不了。最后还是小舅舅跑过来搞定问题。建议没有试过打领带的可以先试试，省得到需要的时候手忙脚乱。路上打车，应该说很快的。我预计是12块搞定。但是在杨高路上堵车堵了10分钟，结果花了21。明天怎么过去再说吧。
进馆的时候是我看过最白痴的设计。参展商一定要从2门进来，要经过10分钟左右的通关检查。大致来说就和机场的那套一样，从小看到大，我烦都烦死了。结果我提了两桶水通关，累个半死。然后更加白痴的是所有人员都要从大门口出去，为了这出去的问题我又化了10分钟出去。通关走3
瓶水花了我20分钟。最后干脆让人送进来，反正是老板付钱。
进去以后就是部署，我主要把整个系统放在了展台上面，弄了点图片在上面不断循环播放。具体大家看照片吧。下面我带了数码相机进去，趁大部队还没有到，赶快跑出去照相去。好容易不要钱进来，不照相岂不浪费？不过可惜慢了几分钟，导致开幕的瞬间没有照到，可惜可惜。
整个展会让人印象最深刻的就是MM暴多，而且和交大的质量简直天壤之别。不过想想也是，工业的MM比较少，可是服务器依靠MM吸引眼球再正常不过了吧。嘿嘿，我这种照相狂就幸福到了。里面还有一个比较让人爽到的是汽车特别多，好车虽然不多（又不是车展）。但是能看这么多车也算不错了，毕竟我是计算机专家，不是汽车专家，我爸才是。里面还有比较夸张的地方就是居然有架直升飞机，MyGod，你要卖给谁阿？带到这里。不怕给人晚上拉了开走？
说到安全，尽管安检如此严密。还是有人被偷了。而且就是我们隔壁，有两个PPMM的那家，做网络视频会议的。他们还比较搞笑，服务器的内存和CPU被偷，其他没事。上帝，这个贼还挺精。这两个部件小，外表根本看不出来，而且价钱超贵。我看到的报价大约是加一加2000多。所以怀疑是内贼。
里面几个卖点。头一个是流动的Coffe
Girl。经常有PPMM跑过来问我们咖啡要吗？一杯十块，这个创意真的很厉害。因为十块的咖啡不见得如何贵，有MM可看（对同样是女性来说也可以起到吸引眼球的作用），不用跑路。所以我看到好几个人掏钱了，真的是商业无处不在。但是首先我们不嗜好咖啡。其次她来的不是时候。有人在大早上刚刚来和吃好午饭的时候喝咖啡吗？所以我没有买。
第二个卖点是会弹琴的机器人。其实这个东西很简单。原理上讲就是将一个工作组件定位在一个特定位置，保持位置和向性。然后组件工作。很多部件组装都用了相似原理。但是将整个原理如此show给大家看就有点意思了。
第三个在第二个后面点的位置，是一个会运动的城市交通系统。模型照片可以看照片集。我看不大懂技术难点，不过觉得很好玩。</description>
    </item>
    
    <item>
      <title>工博会eve</title>
      <link>//blog.shell909090.org/blog/archives/251/</link>
      <pubDate>Fri, 04 Nov 2005 05:34:44 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/251/</guid>
      <description>今天是工博会的前夜，贝壳还在辛苦赶工。古人云是非只因多开口，烦恼皆因强出头。贝壳今日无意多说句，我家离工博会现场很近。结果被老板勒令加班，还把所有参展用具全部带回家节约时间……贝壳不要啦……
结果抗议无效，贝壳还是背着N多东西回家。明天七点赶去会场现场，部署各种用品。具体情况明天再说啦。</description>
    </item>
    
    <item>
      <title>雨一直下</title>
      <link>//blog.shell909090.org/blog/archives/250/</link>
      <pubDate>Thu, 03 Nov 2005 08:05:16 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/250/</guid>
      <description>今天上海终于下雨了，开始我还不知道，洗澡，然后当做是哪里水在流……
丢脸的检查回来，坐在椅子上看某某的blog。感觉真的蛮那个的。此人是我初中同学，我曾经喜欢过她。而今她在美国，思念着一个上海的某某。我在上海，思念着一个北京的某某。那两个某某都是曾经的同学，而且都是明确的拒绝了我们。于是发现，人生真的很像。不过不同的是，她喜欢自虐，牛角尖钻进去出不来。我可能是道学佛学看太多了，得失增减不放心头，文字发泄下就没事情了。（前面酸的可以的文字看到了？）面对那个某某的时候还笑的出来，于是我知道，这辈子我休想真的爱上某某。
也许每个人看的书不一样，走的路不一样，过的日子就不一样，想法也完全不一样。我家中无人信道，也没有人弄电脑。可是我硬是学起了周易，玩起了电脑。而且还凭他吃了饭，不可以说不是缘分。但是长期的理科电脑化思维，我的心眼仿佛起了变化。小时候看世界，仿佛是没有颜色的，一就是一。什么东西都还其本相，最单纯也最直接。而长大我看世界，世界是两种颜色的，对象和方法。我们考虑的是对象和方法的拓扑连接关系。她们的眼中世界是彩色的，每个人都有自己的颜色。至于谁的更漂亮……知道了吧，这就是她们。
我的这种思维，已经渗入骨髓和血液中。这也是所以为何我不会爱上某某的关系。因为对我来说，爱人也不过是一个符号。用来连接爱情，结婚，资产管理变更和后代。那么我怎么会爱上这种符号呢？对我来说，眼中没有符号的年代已经过去。如果说爱过，只是从前的贝壳爱过从前的某某。只要有一天我还是按照符号来看人，那么一天我就无法爱上任何人。
也许有的人晕了，那么我来举个例子。每个宗教都有神，可是什么是神？某人说过这么句，他们的神不是我的神。呵呵，对我来说，神就是唯一，唯一就是神。这个概念和一神教到是相似，可是形似而神离。他们认为神存在，且唯一。我认为唯一存在，即是神。如果系统供应商在领域里面独占了，那么他就是神。对于我们每个人来说，我们自己，也是神。世界上的神，多不可数，但只有一个。
典型的形而上思维吧，这就是我们工科男生的典型思维方式。如果一个人定义了自己的爱情，并且按照定义遵从，那么他是爱上某人呢？还是……
我不知道，不过严格来说，这就是我的爱情。
……如同今天的雨，和今天的厕所……</description>
    </item>
    
    <item>
      <title>精简debian和服务器</title>
      <link>//blog.shell909090.org/blog/archives/249/</link>
      <pubDate>Mon, 31 Oct 2005 19:36:26 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/249/</guid>
      <description>最近在用单位的1G电脑跑debian，不开gnome的情况下真是快啊。长期安装debian（其实才几个月），所以对debian的安装有点心得。准备精简打包一个最小debian，用于拯救和安装。然后cache一个pool做移动使用。这样以后用起来应该方便点。
debian上面装别的问题不大，但是装oracle的时候头痛的要死。难怪oracle一般要和solaris一起安装，而DB2一般捆绑在AIX上面。这种东西换个系统简直就是要了命了。</description>
    </item>
    
    <item>
      <title>道德经</title>
      <link>//blog.shell909090.org/blog/archives/248/</link>
      <pubDate>Tue, 25 Oct 2005 20:59:53 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/248/</guid>
      <description>道，可道，非恒道。名，可名，非恒名。无名，天地之始；有名，万物之母。故常无欲，以观其妙；常有欲，以观其徼。此两者同出而异名，同谓之玄。玄之又玄，众妙之门。
天下皆知美之为美，斯恶已；皆知善之为善，斯不善矣。有无相生，难易相成，长短相形，高下相盈，音声相和，前后相随，恒也。是以圣人处无为之事，行不言之教，万物作而弗始，生而弗有，为而弗恃，功成而弗居。夫唯弗居，是以不去。
不尚贤，使民不争；不贵难得之货，使民不为盗；不见可欲，使民心不乱。是以圣人之治，虚其心，实其腹；弱其志，强其骨。常使民无知无欲。使夫知不敢弗为而已，则无不治。
道冲，而用之或不盈。渊兮，似万物之宗。挫其锐，解其纷，和其光，同其尘。湛兮，似或存。吾不知谁之子，象帝之先。
天地不仁，以万物为刍狗；圣人不仁，以百姓为刍狗。天地之间，其犹橐龠乎？虚而不屈，动而愈出。多闻数穷，不如守中。
谷神不死，是谓玄牝。玄牝之门，是谓天地根。绵绵若存，用之不勤。
天长地久。天地所以能长且久者，以其不自生，故能长生。是以圣人后其身而身先，外其身而身存。不以其无私邪？故能成其私。
上善若水。水善利万物而不争，居众人之所恶，故几于道。居善地，心善渊，与善仁，言善信，政善治，事善能，动善时。夫唯不争，故无尤。
持而盈之，不如其已。揣而锐之，不可长保。金玉满堂，莫之能守。富贵而骄，自遗其咎。功遂身退，天下之道。
载营魄抱一，能无离乎？专气致柔，能如婴儿乎？修除玄览，能无疵乎？爱民治国，能无智乎？天门开阖，能为雌乎？明白四达，能无知乎？生之、畜之，生而不有，长而不宰。是为玄德。
三十辐共一毂，当其无，有车之用。埏埴以为器，当其无，有器之用。凿户牖以为室，当其无，有室之用。故有之以为利，无之以为用。
五色令人目盲；五音令人耳聋；五味令人口爽；驰骋畋猎，令人心发狂；难得之货，令人行妨。是以圣人为腹不为目，故去彼取此。
宠辱若惊，贵大患若身。何谓宠辱若惊？宠为下，得之若惊，失之若惊，是谓宠辱若惊。何谓贵大患若身？吾所以有大患者，为吾有身，及吾无身，吾有何患？故贵以身为天下，若可寄天下；爱以身为天下，若可托天下。
视之不见，名曰微；听之不闻，名曰希；搏之不得，名曰夷。此三者，不可致诘，故混而为一。其上不皎，其下不昧，绳绳兮不可名，复归于物。是谓无状之状，无物之象，是谓惚恍。迎之不见其首，随之不见其后。执古之道，以御今之有。能知古始，是谓道纪。
古之善为道者，微妙玄通，深不可识。夫唯不可识，故强为之容：豫兮，若冬涉川；犹兮，若畏四邻；俨兮，其若客；涣兮，其若凌释；敦兮，其若朴；旷兮，其若谷；混兮，其若浊。孰能浊以止？静之徐清。孰能安以久？动之徐生。保此道者，不欲盈。夫唯不盈，故能蔽而新成。
致虚极，守静笃。万物并作，吾以观复。夫物芸芸，各复归其根。归根曰静，静曰复命。复命曰常，知常曰明。不知常，妄作，凶。知常容，容乃公，公乃王，王乃天，天乃道，道乃久，殁身不殆。
太上，不知有之；其次，亲而誉之；其次，畏之；其次，侮之。信不足焉，有不信焉。悠兮，其贵言。功成事遂，百姓皆谓：「我自然」。
大道废，有仁义；智慧出，有大伪；六亲不和，有孝慈；国家昏乱，有忠臣。
绝圣弃智，民利百倍；绝仁弃义，民复孝慈；绝巧弃利，盗贼无有。此三者以为文，不足。故令有所属：见素抱朴，少思寡欲，绝学无忧。
唯之与阿，相去几何？美之与恶，相去若何？人之所畏，不可不畏。荒兮，其未央哉！众人熙熙，如享太牢，如春登台。我独泊兮，其未兆；沌沌兮，如婴儿之未孩；儡儡兮，若无所归。众人皆有馀，而我独若遗。我愚人之心也哉，沌沌兮！俗人昭昭，我独昏昏。俗人察察，我独闷闷。淡兮，其若海，望兮，若无止。众人皆有以，而我独顽似鄙。我独异于人，而贵食母。
孔德之容，惟道是从。道之为物，惟恍惟惚。惚兮恍兮，其中有象；恍兮惚兮，其中有物；窈兮冥兮，其中有精；其精甚真，其中有信。自今及古，其名不去，以阅众甫。吾何以知众甫之状哉？以此。
「曲则全，枉则直，洼则盈，敝则新，少则得，多则惑。」是以圣人抱一为天下式。不自见，故明；不自是，故彰；不自伐，故有功；不自矜，故长。夫唯不争，故天下莫能与之争。古之所谓「曲则全」者，岂虚言哉！诚全而归之。
希言自然。故飘风不终朝，骤雨不终日。孰为此者？天地。天地尚不能久，而况于人乎？故从事于道者，同于道；德者，同于德；失者，同于失。同于道者，道亦乐得之；同于德者，德亦乐得之；同于失者，失亦乐得之。信不足焉，有不信焉。
企者不立；跨者不行；自见者不明；自是者不彰；自伐者无功；自矜者不长。其在道也，曰馀食赘形，物或恶之，故有道者不居。
有物混成，先天地生。寂兮寥兮，独立而不改，周行而不殆，可以为天地母。吾不知其名，字之曰道，强为之名曰大。大曰逝，逝曰远，远曰反。故道大，天大，地大，人亦大。域中有四大，而人居其一焉。人法地，地法天，天法道，道法自然。
重为轻根，静为躁君。是以君子终日行不离辎重。虽有荣观，燕处超然。奈何万乘之主，而以身轻天下？轻则失根，躁则失君。
善行，无辙迹；善言，无瑕谪；善数，不用筹策；善闭，无关楗而不可开；善结，无绳约而不可解。是以圣人常善救人，故无弃人；常善救物，故无弃物。是谓神明。故善人者，不善人之师；不善人者，善人之资。不贵其师，不爱其资，虽智大迷。是谓要妙。
知其雄，守其雌，为天下溪。为天下溪，常德不离。常德不离，复归于婴儿。知其荣，守其辱，为天下谷。为天下谷，常德乃足。常德乃足，复归于朴。知其白，守其黑，为天下式。为天下式，常德不忒。常德不忒，复归于无极。朴散则为器，圣人用之，则为官长。故大制无割。
将欲取天下而为之，吾见其不得已。天下神器，不可为也。为者败之，执者失之。物，或行或随，或嘘或吹，或强或羸，或挫或隳。是以圣人去甚，去奢，去泰。
以道佐人主者，不以兵强天下，其事好还：师之所居，荆棘生焉。大军之后，必有凶年。善有果而已，不以取强。果而勿矜，果而勿伐，果而勿骄，果而不得已，果而勿强。物壮则老，是谓不道，不道早已。
夫兵者，不祥之器。物或恶之，故有道者不居。君子居则贵左，用兵则贵右，故兵者非君子之器。不祥之器，不得已而用之，恬淡为上。胜而不美，而美之者，是乐杀人。夫乐杀人者，则不可得志于天下矣。吉事尚左，凶事尚右。偏将军居左，上将军居右，言以丧礼处之。杀人之众，以悲哀泣之，战胜以丧礼处之。
道常无名。朴虽小，天下莫能臣。侯王若能守之，万物将自宾。天地相合，以降甘露，民莫之令而自均。始制有名，名亦既有，夫亦将知止。知止可以不殆。譬道之在天下，犹川谷之于江海。
知人者智，自知者明；胜人者有力，自胜者强。知足者富。强行者有志。不失其所者久。死而不亡者寿。
大道泛兮，其可左右。万物恃之而生而不辞，功成而不名有。衣养万物而不为主，可名于小；万物归焉而不为主，可名为大。以其终不自为大，故能成其大。
执大象，天下往。往而不害，安平泰。乐与饵，过客止。道之出口，淡乎其无味，视之不足见，听之不足闻，用之不足既。
将欲歙之，必故张之；将欲弱之，必故强之；将欲废之，必故兴之；将欲取之，必故与之。是谓微明。柔弱胜刚强。鱼不可脱于渊，国之利器不可以示人。
道恒无名，侯王若能守之，万物将自化。化而欲作，吾将镇之以无名之朴。无名之朴，夫亦将不欲。不欲以静，天地将自正。
上德不德，是以有德；下德不失德，是以无德。上德无为而无以为；下德无为而有以为。上仁为之而无以为；上义为之而有以为。上礼为之而莫之应，则攘臂而扔之。故失道而后德，失德而后仁，失仁而后义，失义而后礼。夫礼者，忠信之薄，而乱之首。前识者，道之华，而愚之始。是以大丈夫居其厚，不居其薄；居其实，不居其华。故去彼取此。
昔之得一者：天得一以清；地得一以宁；神得一以灵；谷得一以盈；侯得一以为天下正。其致之。天无以清，将恐裂；地无以宁，将恐废；神无以灵，将恐歇；谷无以盈，将恐竭；侯王无以贵高，将恐蹶。故贵以贱为本，高以下为基。是以侯王自谓「孤」、「寡」、「不谷」。此非以贱为本耶？非乎？故致数誉无誉。是故不欲禄禄如玉。珞珞如石。
反者道之动；弱者道之用。天下万物生于有，有生于无。
上士闻道，勤而行之；中士闻道，若存若亡；下士闻道，大笑之。不笑不足以为道。故建言有之：「明道若昧，进道若退，夷道若类，上德若谷，大白若辱，广德若不足，建德若偷；质真若渝，大方无隅，大器晚成，大音希声；大象无形。」道隐无名，夫唯道，善始且善成。
道生一，一生二，二生三，三生万物。万物负阴而抱阳，冲气以为和。人之所恶，唯「孤」、「寡」、「不谷」。而王公以为称。故，物或损之而益，或益之而损。人之所教，我亦教之：「强梁者不得其死」，吾将以为教父。
天下之至柔，驰骋天下之至坚。无有入无间。吾是以知无为之有益。不言之教，无为之益，天下希及之。
名与身孰亲？身与货孰多？得与亡孰病？是故，甚爱必大费，多藏必厚亡。知足不辱，知止不殆，可以长久。
大成若缺，其用不弊。大盈若冲，其用不穷。大直若屈，大巧若拙，大辩若讷。躁胜寒，静胜热，清静为天下正。
天下有道，却走马以粪。天下无道，戎马生于郊。祸莫大于不知足；咎莫大于欲得。故，知足之足，常足矣。
不出户，知天下；不窥牖，见天道。其出弥远，其知弥少。是以圣人不行而知，不见而明，不为而成。
为学日益，为道日损。损之又损，以至于无为。无为而无不为。取天下常以无事。及其有事，不足以取天下。
圣人常无心，以百姓心为心。善者吾善之，不善者吾亦善之，得善。信者吾信之，不信者吾亦信之，得信。圣人在天下，歙歙焉，为天下浑其心，圣人皆孩之。
出生入死。生之徒，十有三；死之徒，十有三；人之生，动之死地，亦十有三。夫何故？以其生之厚。盖闻善摄生者，陵行不遇兕虎，入军不被甲兵。兕无所投其角，虎无所措其爪，兵无所容其刃。夫何故？以其无死地。
道生之，德畜之，物形之，器成之。是以万物莫不尊道而贵德。道之尊，德之贵，夫莫之命而常自然。故道生之，德畜之。长之育之，亭之毒之，养之覆之，生而不有，为而不恃，长而不宰，是谓玄德。
天下有始，以为天下母。既得其母，以知其子。既知其子，复守其母，没身不殆。塞其兑，闭其门，终身不勤。启其兑，济其事，终身不救。见小曰明，守柔曰强。用其光，复归其明，无遗身殃，是为习常。
使我介然有知，行于大道，唯施是畏。大道甚夷，而民好径。朝甚除，田甚芜，仓甚虚，服文采，带利剑，厌饮食，财货有馀，是为盗竽。非道也哉！
善建者不拔，善抱者不脱，子孙以祭祀不辍。修之于身，其德乃真；修之于家，其德乃馀；修之于乡，其德乃长；修之于邦，其德乃丰；修之于天下，其德乃普。故以身观身，以家观家，以乡观乡，以邦观邦，以天下观天下。吾何以知天下然哉？以此。
含「德」之厚，比于赤子。毒虫不螫，猛兽不据，攫鸟不搏。骨弱筋柔而握固。未知牝牡之合而□作，精之至也。终日号而不嗄，和之至也。知和曰常，知常曰明，益生曰祥，心使气曰强。物壮则老，谓之不道，不道早已。
知者不言，言者不知。塞其兑，闭其门，挫其锐，解其纷，和其光，同其尘，是谓玄同。故不可得而亲，不可得而疏；不可得而利，不可得而害；不可得而贵，不可得而贱。故为天下贵。
以正治国，以奇用兵，以无事取天下。吾何以知其然哉？以此：天下多忌讳，而民弥贫；人多利器，国家滋昏；人多伎巧，奇物滋起；法令滋彰，盗贼多有。故圣人云：「我无为，而民自化；我好静，而民自正；我无事，而民自富；我无欲，而民自朴。」
其政闷闷，其民淳淳；其政察察，其民缺缺。祸兮，福之所倚，福兮，祸之所伏。孰知其极？其无正。正复为奇，善复为妖。人之迷，其日固久！是以圣人方而不割，廉而不刿，直而不肆，光而不耀。
治人、事天，莫若啬。夫为啬，是谓早服，早服谓之重积德。重积德则无不克。无不克则莫知其极。莫知其极，可以有国。有国之母，可以长久。是谓深根固柢，长生久视之道。
治大国若烹小鲜。以道莅天下，其鬼不神。非其鬼不神，其神不伤人。非其神不伤人，圣人亦不伤人。夫两不相伤，故德交归焉。
大国者下流，天下之牝，天下之交。牝常以静胜牡，以静为下。故大国以下小国，则取小国；小国以下大国，则取大国。故或下以取，或下而取。大国不过欲兼畜人，小国不过欲入事人。夫两者各得所欲，大者宜为下。
道者，万物之奥。善人之宝，不善人之所保。美言可以市尊，美行可以加人。人之不善，何弃之有？故立天子，置三公，虽有拱璧以先驷马，不如坐进此道。古之所以贵此道者何？不曰：求以得，有罪以免邪？故为天下贵。
为无为，事无事，味无味。大小多少，报怨以德。图难于其易；为大于其细。天下难事，必作于易；天下大事，必作于细。是以圣人终不为大，故能成其大。夫轻诺必寡信，多易必多难。是以圣人犹难之，故终无难矣。
其安易持；其未兆易谋；其脆易泮；其微易散。为之于未有，治之于未乱。合抱之木，生于毫末；九层之台，起于累土；千里之行，始于足下。为者败之；持者失之。是以，圣人无为，故无败；无持，故无失。民之从事，常于几成而败之。慎终如始，则无败事。是以圣人欲不欲，不贵难得之货，学不学，复众人之所过。以辅万物自然而不敢为。
古之善为道者，非以明民，将以愚之。民之难治，以其智多。故以智治国，国之贼；不以智治国，国之福。知此两者亦稽式。常知稽式，是谓玄德。玄德深矣，远矣，与物反矣，然后乃至大顺。
江海所以能为百谷王者，以其善下之，故能为百谷王。是以圣人欲上民，必以言下之；欲先民，必以身后之。是以圣人居上而民不重，居前而民不害。是以天下乐推而不厌。以其不争，故天下莫能与之争。
天下皆谓我道大，似不肖。夫唯大，故似不肖。若肖，久矣其细也夫！我有三宝，持而保之：一曰慈，二曰俭，三曰不敢为天下先。慈，故能勇；俭，故能广；不敢为天下先，故能成器长。今舍慈且勇，舍俭且广，舍后且先，死矣。夫慈，以战则胜，以守则固。天将救之，以慈卫之。
善为士者，不武。善战者，不怒。善胜敌者，不与。善用人者，为之下。是谓不争之德，是谓用人之力，是谓配天，古之极。
用兵有言：「吾不敢为主，而为客；不敢进寸，而退尺。」是谓行无行，攘无臂，执无兵，乃无敌矣。祸莫大于轻敌，轻敌几丧吾宝。故抗兵相若，哀者胜矣。
吾言甚易知，甚易行。天下莫能知，莫能行。言有宗，事有君。夫唯无知，是以不我知。知我者希，则我者贵。是以圣人被褐而怀玉。</description>
    </item>
    
    <item>
      <title>易下</title>
      <link>//blog.shell909090.org/blog/archives/247/</link>
      <pubDate>Tue, 25 Oct 2005 20:50:19 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/247/</guid>
      <description>咸（卦三十一）斋 ⅷ
ⅶ（艮下兑上）
咸：亨。利贞。取女吉。
《彖》曰：咸，感也。柔上而刚下，二气感应以相与。止而说，男下女，是以“亨利贞，取女吉”也。天地感而万物化生，圣人感人心而天下和平。观其所感，而天地万物之情可见矣。
《象》曰：山上有泽，咸。君子以虚受人。
初六，咸其拇。斋
《象》曰“咸其拇”，志在外也。
六二，咸其腓，凶。居吉。
《象》曰虽“凶居吉”，顺不害也。
九三，咸其股，执其随，往吝。斋
《象》曰：“咸其股”，亦不处也。志在随人，所执下也。
九四，贞吉。悔亡。憧憧往来，朋従尔思。
《象》曰：“贞吉悔亡”，未感害也。“憧憧往来”，未光大也。
九五，咸其脢，无悔。斋
《象》曰：“咸其脢”，志末也。
上六，咸其辅颊舌。
《象》曰：“咸其辅颊舌”，滕口说也。
恒（卦三十二） ⅲ
ⅳ（巽下震上）
恒：亨。无咎。利贞。利有攸往。斋
《彖》曰：恒，久也。刚上而柔下。雷风相与，巽而动，刚柔皆应，恒。“恒亨无咎利贞”，久于其道也。天地之道恒久而不已也。“利有攸往”，终则有始也。日月得天而能久照，四时变化而能久成。圣人久于其道而天下化成。观其所恒，而天地万物之情可见矣。斋
《象》曰：雷风，恒。君子以立不易方。
初六，浚恒，贞凶，无攸利。
《《象》曰：“浚恒”之“凶”，始求深也。
九二，悔亡。斋
《象》曰：九二“悔亡”，能久中也。
九三，不恒其德，或承之羞，贞吝。
《象》曰：“不恒其德”，无所容也。
九四，田无禽。斋
《象》曰：久非其位，安得禽也。
六五，恒其德，贞，妇人吉，夫子凶。
《象》曰：妇人贞吉，従一而终也。夫子制义，従妇凶也。
上六，振恒，凶。斋
《象》曰：振恒在上，大无功也。
遯（卦三十三） ⅰ斋
ⅶ（艮下乾上）
《遯》：亨。小利贞。
《彖》曰：“遯亨”，遯而亨也。刚当位而应，与时行也。“小利贞”，浸而长也。遯之时义大矣哉！斋
《象》曰：天下有山，遯。君子以远小人，不恶而严。
初六，遯尾，厉，勿用有攸往。
《象》曰：“遯尾”之“厉”，不往何灾也？
六二，执之用黄牛之革，莫之胜说。斋
《象》曰：“执用黄牛”，固志也。
九三，系遯，有疾厉，畜臣妾吉。
《象》曰：“系遯”之“厉”，有疾惫也。“畜臣妾吉”，不可大事也。
九四，好遯，君子吉，小人否。斋
《象》曰：“君子好遯，小人否”也。
九五，嘉遯，贞吉。
《象》曰：“嘉遯贞吉”，以正志也。
上九，肥遯，无不利。斋
《象》曰：“肥遯无不利”，无所疑也。
大壮（卦三十四） ⅲ斋
ⅰ（乾下震上）
《大壮》：利贞。
《彖》曰：大壮，大者壮也。刚以动，故壮。“大壮利贞”，大者正也。正大，而天地之情可见矣。斋
《象》曰：雷在天上，大壮。君子以非礼弗履。
初九，壮于趾，征凶，有孚。
《象》曰：“壮于趾”，其孚穷也。
九二，贞吉。斋
《象》曰：九二“贞吉”，以中也。
九三，小人用壮，君子用罔，贞厉。羝羊触藩，羸其角。
《象》曰：“小人用壮”，君子以罔也。
九四，贞吉，悔亡。藩决不羸，壮于大舆之輹。斋
《象》曰：“藩决不羸”，尚往也。
六五，丧羊于易，无悔。</description>
    </item>
    
    <item>
      <title>易上</title>
      <link>//blog.shell909090.org/blog/archives/246/</link>
      <pubDate>Tue, 25 Oct 2005 20:49:59 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/246/</guid>
      <description>乾（卦一） ⅰ
ⅰ（乾下乾上）
《乾》：元，亨，利，贞。
初九：潜龙，勿用。
九二：见龙在田，利见大人。
九三：君子终日乾乾，夕惕若。厉无咎。
九四：或跃在渊，无咎。
九五：飞龙在天，利见大人。
上九：亢龙，有悔。
用九：见群龙无首，吉。
《彖》曰：大哉乾元，万物资始，乃统天。云行雨施，品物流形。大明终始，六位时成。时乘六龙以御天。乾道变化，各正性命。保合大和，乃利贞。首出庶物，万国威宁。
《象》曰：天行健，君子以自强不息。“潜龙勿用”，阳在下也。“见龙在田”，德施普也。“终日乾乾”，反复道也。“或跃在渊”，进无咎也。“飞龙在天”，大人造也。“亢龙有悔”，盈不可久也。“用九”，天德不可为首也。
《文言》曰：“元”者，善之长也；“亨”者，嘉之会也；“利”者，义之和也；“贞”者，事之干也。君子体仁，足以长人；嘉会，足以合礼；利物，足以和义；贞固，足以干事。君子行此四德者，故曰“乾：元、亨、利、贞。”
初九曰“潜龙勿用”，何谓也？子曰：“龙，德而隐者也。不易乎世，不成乎名，遯世无闷，不见是而无闷。乐则行之，忧则违之，确乎其不可拔，潜龙也。”
九二曰“见龙在田，利见大人”，何谓也？子曰：“龙德而正中者也。庸言之信，庸行之谨，闲邪存其诚，善世而不伐，德博而化。《易》曰：‘见龙在田，利见大人’，君德也。”
九三曰“君子终日乾乾，夕惕若，厉无咎”，何谓也？子曰：“君子进德修业。忠信所以进德也。修辞立其诚，所以居业也。至至之，可与言几也。终终之，可与存义也。是故居上位而不骄，在下位而不忧，故乾乾因其时而惕，虽危无咎矣。”
九四曰“或跃在渊，无咎”，何谓也？子曰：“上下无常，非为邪也。进退无恒，非离群也。君子进德修业，欲及时也，故无咎。”
九五曰“飞龙在天，利见大人”，何谓也？子曰：“同声相应，同气相求。水流湿，火就燥，云従龙，风従虎，圣人作而万物睹。本乎天者亲上，本乎地者亲下，则各従其类也。”
上九曰“亢龙有悔”，何谓也？子曰：“贵而无位，高而无民，贤人在下位而无辅，是以动而有悔也。”
“潜龙勿用”，下也。“见龙在田”，时舍也。“终日乾乾”，行事也。“或跃在渊”，自试也。“飞龙在天”，上治也。“亢龙有悔”，穷之灾也。乾元“用九”，天下治也。
“潜龙勿用”，阳气潜藏。“见龙在田”，天下文明。“终日乾乾”，与时偕行。“或跃在渊”，乾道乃革。“飞龙在天”，乃位乎天德。“亢龙有悔”，与时偕极。乾元“用九”，乃是天则。
《乾》“元”者，始而亨者也。“利贞”者，性情也。乾始能以美利利天下，不言所利，大矣哉！大哉乾乎！刚健中正，纯粹精也。六爻发挥，旁通情也。“时乘六龙”，以“御天”也。“云行雨施”，天下平也。君子以成德为行，日可见之行也。“潜”之为言也，隐而未见，行而未成，是以君子“弗用”也。
君子学以聚之，问以辩之，宽以居之，仁以行之。《易》曰：见龙在田，利见大人”，君德也。
九三重刚而不中，上不在天，下不在田，故乾乾因其时而惕，虽危无咎矣。
九四重刚而不中，上不在天，下不在田，中不在人，故“或”之。“或”之者，疑之也，故“无咎”。
夫“大人”者，与天地合其德，与日月合其明，与四时合其序，与鬼神合其吉凶，先天而天弗违，后天而奉天时。天且弗违，而况于人乎？况于鬼神乎？
“亢”之为言也，进而不退，存而不亡，得而不丧。其唯圣人乎！进退存亡而不失其正者，其唯圣人乎！
坤（卦二） ⅱ
ⅱ（坤下坤上）
《坤》：元亨。利牝马之贞。君子有攸往，先迷，後得，利。西南得朋，东北丧朋。安贞吉。
《彖》曰：至哉坤元，万物资生，乃顺承天。坤厚载物，德合无疆。含弘光大，品物咸亨。牝马地类，行地无疆，柔顺利贞。君子。君子攸行，先迷失道，後顺得常。西南得朋，乃与类行。东北丧朋，乃终有庆。安贞之吉，应地无疆。
《象》曰：地势坤。君子以厚德载物。
初六：履霜，坚冰至。
《象》曰：“履霜坚冰”，阴始凝也，驯致其道，至坚冰也。
六二，直、方、大，不习，无不利。
《象》曰：六二之动，直以方也。“不习无不利”，地道光也。
六三，含章，可贞，或従王事，无成有终。
《象》曰“含章可贞”，以时发也。“或従王事”，光大也。
六四，括囊，无咎无誉。
《象》曰：“括囊无咎”，慎不害也。
六五，黄裳，元吉。
《象》曰：“黄裳元吉”，文在中也。
上六，龙战于野，其血玄黄。
《象》曰：“龙战于野”，共道穷也。
用六，利永贞。
《象》曰：用六“永贞”，以大终也。
《文言》曰：坤至柔而动也刚，至静而德方，后得而有常，含万物而化光。坤道其顺乎，承天而时行。积善之家必有余庆，积不善之家必有余殃。臣弑其君，子弑其父，非一朝一夕之故，其所由来者渐矣，由辩之不早辩也。《易》曰：“履霜，坚冰至”，盖言顺也。
“直”其正也，“方”其义也。君子敬以直内，义以方外，敬义立而德不孤。“直、方、大，不习无不利”，则不疑其所行也。
阴虽有美，“含”之以従王事，弗敢成也。地道也，妻道也，臣道也，地道无成而代有终也。
天地变化，草木蕃。天地闭，贤人隐。《易》曰：“括囊，无咎无誉”，盖言谨也。
君子黄中通理，正位居体，美在其中而畅于四支，发于事业，美之至也。
阴疑于阳必战，为其嫌于无阳也，故称“龙”焉。犹未离其类也，故称“血”焉。夫玄黄者，天地之杂也，天玄而地黄。
03．屯（卦三）
ⅴ
ⅲ（震下坎上）
《屯》：元亨，利贞。勿用有攸往。利建侯。
《彖》曰：屯，刚柔始交而难生。动乎险中，大亨贞。雷雨之动满盈，天造草昧。宜寻建侯而不宁。
《象》曰：云雷，屯。君子以经纶。
初九，磐桓，利居贞。利建侯。
《象》曰：虽磐桓，志行正也。以贵下贱，大得民也。
六二，屯如邅如，乘马班如。匪寇，婚媾。女子贞不字，十年乃字。
《象》曰：六二之难，乘刚也。十年乃字，反常也。
六三，即鹿无虞，惟入于林中，君子几不如舍，往吝。
《象》曰：“即鹿无虞”，以従禽也。君子舍之，往吝穷也。
六四，乘马班如，求婚媾。往吉，无不利。
《象》曰：求而往，明也。
九五，屯其膏，小，贞吉；大，贞凶。</description>
    </item>
    
    <item>
      <title>易</title>
      <link>//blog.shell909090.org/blog/archives/245/</link>
      <pubDate>Tue, 25 Oct 2005 20:47:35 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/245/</guid>
      <description>说卦 昔者圣人之作《易》也，幽赞于神明而生蓍，参天两地而倚数，观变于阴阳而立卦，发挥于刚柔而生爻，和顺于道德而理于义，穷理尽性以至于命。
昔者圣人之作《易》也，将以顺性命之理。是以立天之道曰阴与阳，立地之道曰柔与刚，立人之道曰仁与义。兼三才而两之，故《易》六画而成卦。分阴分阳，迭用柔刚，故《易》六位而成章。
天地定位，山泽通气，雷风相薄，水火不相射，八卦相错。数往者顺，来者逆，是故《易》逆数也。
雷以动之，风以散之，雨以润之，日以烜之，艮以止之，兑以说之，乾以君之，坤以藏之。
帝出乎震，齐乎巽，相见乎离，致役乎坤，说言乎兑，战乎乾，劳乎坎，成言乎艮。万物出乎震，震东方也。齐乎巽，巽东南也；齐也者，言万物之絜齐也。离也者，明也，万物皆相见，南方之卦也，圣人南面而听天下，向明而治，盖取诸此也。坤也者，地也，万物皆致养焉，故曰：致役乎坤。兑，正秋也，万物之所说也，故曰：说言乎兑。战乎乾，乾西北之卦也，言阴阳相薄也。坎者水也，正北方之卦也，劳卦也，万物之所归也，故曰：劳乎坎。艮，东北之卦也。万物之所成终而成始也，故曰：成言乎艮。
神也者，妙万物而为言者也。动万物者莫疾乎雷，挠万物者莫疾乎风，躁万物者莫乎火，说万物者莫说乎泽，润万物者莫润乎水，终万物始万物者莫盛乎艮。故水火相逮，雷风不相悖，山泽通气，然后能变化，既成万物也。
乾，健也。坤，顺也。震，动也。巽，入也。坎，陷也。离，丽也。艮，止也。兑，说也。
乾为马，坤为牛，震为龙，巽为鸡，坎为豕，离为雉，艮为狗，兑为羊。
乾为首，坤为腹，震为足，巽为股，坎为耳，离为目，艮为手，兑为口。
乾，天也，故称乎父。坤，地也，故称乎母。震一索而得男，故谓之长男。巽一索而得女，故谓之长女。坎再索而得男。故谓之中男。离谓之中男。离再索而得女，故谓之中女。艮三索而得男，故谓之少男。兑三索而得女，故谓之少女。
乾为天，为圆，为君，为父，为玉，为金，为寒，为冰，为大赤，为良马，为老马，为瘠马，为驳马，为木果。
坤为地，为母，为布，为釜，为吝啬，为均，为子母牛，为大舆，为文，为众，为柄，其于地也为黑。
震为雷，为龙，为玄黄，为旉，为大途，为长子，为决躁，为苍筤竹，为萑苇。其于马也，为善鸣，为足，为作足，为的颡。其于稼也，为反生。其究为健，为蕃鲜。
巽为木，为风，为长女，为绳直，为工，为白，为长，为高，为进退，为不果，为臭。其于人也，为寡发，为广颡，为多白眼，为近利市三倍，其究为躁卦。
坎为水，为沟渎，为隐伏，为矫輮，为弓轮。其于人也，为加忧，为心病，为耳痛，为血卦，为赤。其于马也，为美脊，为亟心，为下首，为薄蹄，为曳。其于舆也，为多眚，为通，为月，为盗。其于木也，为坚多心。
离为火，为日，为电，为中女，为甲胄，为戈兵。其于人也，为大腹。为乾卦，为鳖，为蟹，为蠃，为蚌，为龟。其于木也，为科上槁。
艮为山，为径路，为小石，为门阙，为果蓏，为阍寺，为指，为狗，为鼠，为黔喙之属。其于木也，为坚多节。
兑为泽，为少女，为巫，为口舌，为毁折，为附决。其于地也，为刚卤。为妾，为羊。
序卦 有天地，然后万物生焉。盈天地之间者唯万物，故受之以《屯》。屯者，盈也。屯者，物之始生也。物生必蒙，故受之以《蒙》。蒙者，蒙也，物之稚也。物稚不可不养也，故受之以《需》。需者，饮食之道也。饮食必有讼，故受之以《讼》。讼必有众起，故受之以《师》。师者，众也。众必有所比，故受之以《比》。比者，比也。比必有所畜，故受之以《小畜》。物畜然后有礼，故受之以《履》。履者，礼也。履而泰然后安，故受之以《泰》。泰者，通也。物不可以终通，故受之以《否》。物不可以终否，故受之以《同人》。与人同者，物必归焉，故受之以《大有》。有大者，不可以盈，故受之以《谦》。有大而能谦必豫，故受之以《豫》。豫必有随，故受之以《随》。以喜随人者必有事，故受之以《蛊》。蛊者，事也。有事而后可大，故受之以《临》。临者，大也。物大然后可观，故受之以《观》。可观而后有所合，故受之以《噬嗑》。嗑者，合也。物不可以苟合而已，故受之以《贲》。贲者，饰也。致饰然后亨则尽矣，故受之以《剥》。剥者，剥也。物不可以终尽剥，穷上反下，故受之以《复》。复则不妄矣，故受之以《无妄》。有无妄，物然后可畜，故受之以《大畜》。物畜然后可养，故受之以《颐》。颐者，养也。不养则不可动，故受之以《大过》。物不可以终过，故受之以《坎》。坎者，陷也。陷必有所丽，故受之以《离》。离者，丽也。
有天地然后有万物，有万物然后有男女，有男女然后有夫妇，有夫妇然后有父子，有父子然后有君臣，有君臣然后有上下，有上下然后礼义有所错。夫妇之道不可以不久也，故受之以《恒》。恒者，久也。物不可以久居其所，故受之以《遯》。遯者，退也。物不可以终遯，故受之以《大壮》。物不可以终壮，故受之以《晋》。晋者，进也。进必有所伤，故受之以《明夷》。夷者，伤也。伤于外者必反于家，故受之以《家人》。家道穷必乖，故受之以《睽》。睽者，乖也。乖必有难，故受之以《蹇》。蹇者，难也。物不可以终难，故受之以《解》。解者，缓也。缓必有所失，故受之以《损》。损而不已必益，故受之以《益》。益而不已必决，故受之以《夬》。夬者，决也。决必有遇，故受之以《姤》。姤者，遇也。物相遇而后聚，故受之以《萃》。萃者，聚也。聚而上者谓之升，故受之以《升》。升而不已必困，故受之以《困》。困乎上者必反下，故受之以《井》。井道不可不革，故受之以《革》。革物者莫若鼎，故受之以《鼎》。器者莫若长子，故受之以《震》。震者，动也。物不可以终动，止之，故受之以《艮》。艮者，止也。物不可以终止，故受之以《渐》。渐者，进也。进必有所归，故受之以《归妹》。得其所归者必大，故受之以《丰》。丰者，大也。穷大者必失其居，故受之以《旅》。旅而无所容，故受之以《巽》。巽者，入也。入而后说之，故受之以《兑》。兑者，说也。说而后散之，故受之以《涣》。涣者，离也。物不可以终离，故受之以《节》。节而信之，故受之以《中孚》。有其信者必行之，故受之以《小过》。有过物者必济，故受之以《既济》。物不可穷也，故受之以《未济》，终焉。
杂卦 《乾》刚《坤》柔，《比》乐《师》忧；《临》《观》之义，或与或求。《屯》见而不失其居。《蒙》杂而著。《震》，起也。《艮》，止也。《损》、《益》盛衰之始也。《大畜》，时也。《无妄》，灾也。《萃》聚而《升》不来也。《谦》轻而《豫》怠也。《噬嗑》，食也。《贲》，无色也。《兑》见而《巽》伏也。《随》无故也。《蛊》则饬也。《剥》，烂也。《复》，反也。《晋》，昼也。《明夷》，诛也。《井》通而《困》相遇也。《咸》速也。《恒》，久也。《涣》，离也。《节》，止也。《解》，缓也。《蹇》，难也。《睽》，外也。《家人》，内也。《否》、《泰》反其类也。《大壮》则止，《遯》则退也。《大有》，众也。《同人》，亲也。《革》，去故也。《鼎》，取新也。《小过》，过也。《中孚》，信也。《丰》，多故也。亲寡《旅》也。《离》上而《坎》下也。《小畜》，寡也。《履》，不处也。《需》，不进也。《讼》，不亲也。《大过》，颠也。《姤》，遇也，柔遇刚也。《渐》，女归待男行也。《颐》，养正也。《既济》，定也。《归妹》，女之终也。《未济》，男之穷也。《夬》，决也，刚决柔也。君子道长，小人道忧也。
系辞 天尊地卑，乾坤定矣。卑高以陈，贵贱位矣。动静有常，刚柔断矣。方以类聚，物以群分，吉凶生矣。在天成象，在地成形，变化见矣。是故刚柔相摩，八卦相荡，鼓之以雷霆，润之以风雨；日月运行，一寒一暑。乾道成男，坤道成女。乾大始，坤作成物。乾以易，坤以简能；易则易，简则易従；易则有亲，易従则有功；有亲则可久，有功则可大；可久则贤人之德，可大则贤人之业。易简而天下之理得矣。天下之理得，而成位乎其中矣。
圣人设卦观象，系辞焉而明吉凶，刚柔相推而生变化。是故吉凶者，失得之象也；悔吝者，忧虞之象也；变化者，进退之象也；刚柔者，昼夜之象也。六爻之动，三极之道也。是故君子所居而安者，《易》之序也；所乐而玩者，爻之辞也。是故君子居则观其象而玩其辞，动则观其变而玩其占，是以自天祐之，吉无不利。
彖者，言乎象者也；爻者，言乎变者也。吉凶者，言乎其失得也；悔吝者，言乎其小疵也。无咎者，善补过者也。是故列贵贱者存乎位，齐小大者存乎卦，辩吉凶者存乎辞，忧悔吝者存乎介，震无咎者存乎悔。是故卦有小大，辞有险易；辞也者，各指其所之。
《易》与天地准，故能弥纶天地之道。仰以观于天文，俯以察于地理，是故幽明之故；原始反终，故死生之说；精气为物，游魂为变，是故鬼神之情状。与天地相似，故不违；周乎万物，而道济天下，故不过；旁行而不流，乐天命，故不忧；安土敦乎仁，故能爱。范围天地之化而不过，曲成万物而不遗，通乎昼夜之道而，故神无方而《易》无体。
一阴一阳之谓道，继之者善也，成之者性也。仁者见之谓之仁，者见之谓之，百姓日用而不，故君子之道鲜矣。显诸仁，藏诸用，鼓万物而不与圣人同忧，盛德大业至矣哉！富有之谓大业，日新之谓盛德。生生之谓易，成象之谓乾，效法之谓坤，极数来之谓占，通变之谓事，阴阳不测之谓神。
夫《易》广矣大矣，以言乎远则不御，以言乎迩则静而正，以言乎天地之间则备矣。夫乾，其静也专，其动也直，是以大生焉。夫坤，其静也翕，其动也辟，是以广生焉。广大配天地，变通配四时，阴阳之义配日月，易简之善配至德。
子曰：“《易》，其至矣乎！夫《易》，圣人所以崇德而广业也。崇礼卑，崇效天，卑法地。天地设位，而《易》行乎其中矣。成性存存，道义之门。”
圣人有以见天下之赜，而拟诸其形容，象其物宜，是故谓之象。圣人有以见天下之动，而观其会通，以行其典礼，系辞焉以断其吉凶，是故谓之爻，言天下之至赜而不可恶也。言天下之至动而不可乱也。拟之而后言，议之而后动，拟议以成其变化。
“鸣鹤在阴，其子和之。我有好爵，吾与尔靡之。”子曰：
“君子居其室，出其言善，则千里之外应之，况其迩者乎？居其室，出其言不善，则千里之外违之，况其迩者乎？言出乎身，加乎民；行发乎迩，见乎远。言行，君子之枢机。枢机之发，荣辱之也。言行，君子之所以动天地也，可不慎乎！”
“《同人》：先号咷而后笑。”子曰：“君子之道，或出或处，或默或语。二人同心，其利断金。同心之言，其臭如兰。”
“初六，藉用白茅，无咎。”子曰：“苟错诸地而可矣，藉之用茅，何咎之有？慎之至也。夫茅之为物薄，而用可重也。慎斯术也以往，其无所失矣。”
“劳谦，君子有终，吉。”子曰：“劳而不伐，有功而不德，厚之至也。语以其功下人者也。德言盛，礼言恭；谦也者，致恭以存其位者也。”
“亢龙有悔。”子曰：“贵而无位，高而无民，贤人在下位而无辅，是以动而有悔也。”
“不出户庭，无咎。”子曰：“乱之所生也，则言语以为阶。君不密则失臣，臣不密则失身，几事不密则害成。是以君子慎密而不出也。”
子曰：“作《易》者，其盗乎？《易》曰‘负且乘，致寇至。’负也者，小人之事也。乘也者，君子之器也。小人而乘君子之器，盗思夺之矣。上慢下暴，盗思伐之矣。慢藏诲盗，冶容诲淫。《易》曰：‘负且乘，致寇至。’盗之招也。”
大衍之数五十，其用四十有九。分而为二以象两，挂一以象三，揲之以四以象四时，归奇于扐以象闰；五岁再闰，故再扐而后挂。天数五，地数五。五位相得而各有合，天数二十有五，地数三十，凡天地之数五十有五，此所以成变化而行鬼神也。《乾》之策二百一十有六，《坤》之策百四十有四，凡三百六十，当期之日。二篇之策，万有一千五百二十，当万物之数也。是故四营而成《易》，十有八变而成卦，八卦而小成。引而伸之，触类而长之，天下之能事毕矣。显道神德行，是故可与酬酢，可与祐神矣。子曰：“变化之道者，其神之所为乎。”
《易》有圣人之道四焉：以言者尚其辞，以动者尚其变，以制器者尚其象，以卜筮者尚其占。是以君子将有为也，将有行也，问焉而以言，其受命也如响。无有远近幽深，遂来物。非天下之至精，其孰能与于此。参伍以变，错综其数。通其变，遂成天下之文；极其数，遂定天下之象。非天下之至变，其孰能与于此。《易》无思也，无为也，寂然不动，感而遂通天下之故。非天下之至神，其孰能与于此。夫《易》，圣人之所以极深而研几也。唯深也，故能通天下之志；唯几也，故能成天下之务；唯神也，故不疾而速，不行而至。子曰：“《易》有圣人之道四焉”者，此之谓也。
天一，地二；天三，地四；天五，地六；天七，地八；天九，地十。子曰：“夫《易》何为者也？夫《易》开物成务，冒天下之道，如斯而已者也。”是故圣人以通天下之志，以定天下之业，以断天下之疑。是故蓍之德圆而神，卦之德方以，六爻之义易以贡。圣人以此洗心，退藏于密，吉凶与民同患。神以来，以藏往，其孰能与于此哉！之聪明睿，神武而不杀者夫。是以明于天之道，而察于民之故，是兴神物以前民用。圣人以此戒，以神明其德夫。是故阖户谓之坤，辟户谓之乾，一阖一辟谓之变，往来不穷谓之通，见乃谓之象，形乃谓之器，制而用之谓之法，利用出入，民咸用之谓之神。
是故《易》有大极，是生两仪。两仪生四象。四象生八卦。八卦定吉凶，吉凶生大业。是故法象莫大乎天地；变通莫大乎四时；县象著明莫大乎日月；崇高莫大乎富贵；备物致用，立成器以为天下利，莫大乎圣人探赜索隐，钩深致远，以定天下之吉凶，成天下之亹亹者，莫大乎蓍龟。是故天生神物，圣人则之；天地变化，圣人效之；天垂象，见吉凶，圣人象之；河出图，洛出书，圣人则之。《易》有四象，所以示也。系辞焉，所以告也；定之以吉凶，所以断也。
《易》曰：“自天祐之，吉无不利。”子曰：“祐者，助也。天之所助者，顺也；人之所助者，信也。履信思乎顺，又以尚贤也。是以‘自天祐之，吉无不利’也。”子曰：“书不尽言，言不尽意。”然则圣人之意，其不可见乎？子曰：“圣人立象以尽意，设卦以尽情伪，系辞焉以尽其言。变而通之以尽利，鼓之舞之以尽神。”乾坤，其《易》之邪？乾坤成列，而《易》立乎其中矣。乾坤毁，则无以见《易》。《易》不可见，则乾坤或几乎息矣。是故形而上者谓之道，形而下者谓之器。化而裁之谓之变，推而行之谓之通，举而错之天下之民谓之事业。是故夫象，圣人有以见天下之赜，而拟诸其形容，象其物宜，是故谓之象。圣人有以见天下之动，而观其会通，以行其典礼，系辞焉以断其吉凶，是故谓之爻。极天下之赜者存乎卦，鼓天下之动者存乎辞；化而裁之存乎变；推而行之存乎通；神而明之存乎其人；默而成之，不言而信，存乎德行。
八卦成列，象在其中矣；因而重之，爻在其中矣；刚柔相推，变在其中焉；系辞焉而命之，动在其中矣。吉凶悔吝者，生乎动者也；刚柔者，立本者也；变通者，趣时者也。吉凶者，贞胜者也；天地之道，贞观者也；日月之道，贞明者也；天下之动，贞夫一者也。夫乾，确然示人易矣；夫坤，确然示人简矣。爻也者，效此者也。象也者，像此者也；爻象动乎内，吉凶见乎外，功业见乎变，圣人之情见乎辞。天地之大德曰生，圣人之大宝曰位。何以守位？曰仁。何以聚人？曰财。理财正辞、禁民为非曰义。
者包牺氏之王天下也，仰则观象于天，俯则观法于地，观鸟兽之文与地之宜，近取诸身，远取诸物，于是始作八卦，以通神明之德，以类万物之情。作结绳而为网罟，以佃以渔，盖取诸《离》。包牺氏没，神农氏作，斫木为耜，揉木为耒，耒耨之利，以教天下，盖取诸《益》。日中为市，致天下之民，聚天下之货，交易而退，各得其所，盖取诸《噬嗑》。神农氏没，黄帝、尧、舜氏作，通其变，使民不倦，神而化之，使民宜之。《易》穷则变，变则通，通则久。是以“自天祐之，吉无不利”。黄帝、尧、舜垂衣裳而天下治，盖取诸《乾》、《坤》。刳木为舟，剡木为楫，舟楫之利，以济不通，致远以利天下，盖取诸《涣》。服牛乘马，引重致远，以利天下，盖取诸《随》。重门击柝，以待暴客，盖取诸《豫》。断木为杵，掘地为臼，杵臼之利，万民以济，盖取诸《小过》。弦木为弧，剡木为矢，弧矢之利，以威天下，盖取诸《睽》。上穴居而野处，后世圣人易之以宫室，上栋下宇，以待风雨，盖取诸《大壮》。之葬者，厚衣之以薪，葬之中野，不封不树，丧期无数。后世圣人易之以棺椁，盖取诸《大过》。上结绳而治，后世圣人易之以书契，百官以治，万民以察，盖取诸《夬》。
是故《易》者，象也；象也者，像也。彖者，材也；爻也者，效天下之动者也。是故吉凶生而悔吝著也。
阳卦多阴，阴卦多阳，其故何也？阳卦奇，阴卦耦。其德行何也？阳一君而二民，君子之道也。阴二君而一民，小人之道也。
《易》曰“憧憧往来，朋従尔思。”子曰：“天下何思何虑？天下同归而殊途，一致而百虑。天下何思何虑？日往则月来，月往则日来，日月相推而明生焉。寒往则暑来，暑往则寒来，寒暑相推而岁成焉。往者屈也，来者信也，屈信相感而利生焉。尺蠖之屈，以求信也；龙蛇之蛰，以存身也。精义入神，以致用也；利用安身，以崇德也。过此以往，未之或也；穷神化，德之盛也。”
《易》曰：“困于石，据于蒺藜，入于其宫，不见其妻，凶。”子曰：“非所困而困焉，名必辱。非所据而据焉，身必危。既辱且危，死期将至，妻其可得见耶！”
《易》曰：“公用射隼于高墉之上，获之，无不利。”子曰：“隼者，禽也；弓矢者，器也；射之者，人也。君子藏器于身，待时而动，何不利之有？动而不括，是以出而有获，语成器而动者也。”
子曰：“小人不耻不仁，不畏不义，不见利不劝，不威不惩。小惩而不诫，此小人之福也。《易》曰：‘履校灭趾，无咎。’此之谓也。”
“善不积不足以成名，恶不积不足以灭身。小人以小善为无益而弗为也，以小恶为无伤而弗去也，故恶积而不可掩，罪大而不可解。《易》曰：‘何校灭耳，凶。’”
子曰：“危者，安其位者也；亡者，保其存者也；乱者，有其治者也。是故君子安而不忘危，存而不忘亡，治而不忘乱，是以身安而国家可保也。《易》曰：‘其亡其亡，系于苞桑。’”
子曰：“德薄而位尊，小而谋大，力少而任重，鲜不及矣。《易》曰：‘鼎折足，覆公餗，其形渥，凶。’言不胜其任也。”
子曰：“几其神乎！君子上交不谄，下交不渎，其几乎？几者，动之微，吉之先见者也。君子见几而作，不俟终日。《易》曰：‘介于石，不终日，贞吉。’介如石焉，宁用终日？断可识矣。君子微彰，柔刚，万夫之望。”
子曰：“颜氏之子，其殆庶几乎？有不善未尝不，之未尝复行也。《易》曰：‘不远复，无祗悔，元吉。’”
天地絪温，万物化醇。男女构精，万物化生。《易》曰：‘三人行则损一人，一人行则得其友。’言致一也。
子曰：“君子安其身而后动，易其心而后语，定其交而后求。君子修此三者，故全也。危以动，则民不与也；惧以语，则民不应也；无交而求，则民不与也；莫之与，则伤之者至矣。《易》曰：‘莫益之，或击之，立心勿恒，凶。’”
子曰：“乾坤，其《易》之门耶？”乾，阳物也；坤，阴物也。阴阳合德，而刚柔有体。以体天地之撰，以通神明之德。其称名也，杂而不越。于稽其类，其衰世之意邪？夫《易》，彰往而察来，而微显阐幽，开而当名，辨物正言断辞，则备矣。其称名也小，其取类也大。其旨远，其辞文，其言曲而中，其事肆而隐。因贰以济民行，以明失得之报。
《易》之兴也，其于中乎？作《易》者，其有忧患乎？是故《履》，德之基也，《谦》，德之柄也，《复》，德之本也，《恒》，德之固也，《损》，德之修也，《益》，德之裕也，《困》，德之辨也，《井》，德之地也，《巽》，德之制也。《履》，和而至。《谦》，尊而光，《复》，小而辨于物，《恒》，杂而不厌，《损》，先难而后易，《益》，长裕而不设，《困》，穷而通，《井》，居其所而迁，《巽》，称而隐。《履》以和行，《谦》以制礼，《复》以自，《恒》以一德，《损》以远害，《益》以兴利，《困》以寡怨，《井》以辨义，《巽》以行权。
《易》之为书也不可远，为道也屡迁，变动不居，周流六虚，上下无常，刚柔相易，不可为典要，唯变所适。其出入以度外内，使惧。又明于忧患与故。无有师保，如临父母。初率其辞而揆其方，既有典常。苟非其人，道不虚行。
《易》之为书也，原始要终，以为质也。六爻相杂，唯其时物也。其初难，其上易，本末也。初辞拟之，卒成之终。若夫杂物撰德，辩是与非，则非其中爻不备。噫！亦要存亡吉凶，则居可矣。者观其彖辞，则思过半矣。二与四同功而异位，其善不同；二多誉，四多惧，近也。柔之为道，不利远者；其要无咎。其用柔中也。三与五同功而异位，三多凶，五多功，贵贱之等也。其柔危，其刚胜耶？
《易》之为书也，广大悉备。有天道焉，有人道焉，有地道焉。兼三才而两之，故六。六者非它也，三材之道也。道有变动，故曰爻；爻有等，故曰物；物相杂，故曰文；文不当，故吉凶生焉。
《易》之兴也，其当殷之末世，周之盛德耶？当文王与纣之事耶？是故其辞危。危者使平，易者使倾。其道甚大，百物不废。惧以终始，其要无咎，此之谓《易》之道也。
夫乾，天下之至健也，德行恒易以险。夫坤，天下之至顺也，德行恒简以阻。能说诸心，能研诸侯之虑，定天下之吉凶，成天下之亹亹者。是故变化云为，吉事有祥。象事器，占事来。天地设位，圣人成能。人谋鬼谋，百姓与能。八卦以象告，爻彖以情言，刚柔杂居，而吉凶可见矣。变动以利言，吉凶以情迁。是故爱恶相攻而吉凶生，远近相取而悔吝生，情伪相感而利害生。凡《易》之情，近而不相得则凶，或害之，悔且吝。将叛者其辞惭，中心疑者其辞枝，吉人之辞寡，躁人之辞多，诬善之人其辞游，失其守者其辞屈。</description>
    </item>
    
    <item>
      <title>wonderful life, wonderful day</title>
      <link>//blog.shell909090.org/blog/archives/244/</link>
      <pubDate>Mon, 24 Oct 2005 05:10:22 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/244/</guid>
      <description>7:00 Get up early, goto hongkou park to practice taichi chen style.
11:00 Get back, having lunch.
12:00 Do something with computer, like reading e-book&amp;hellip;
13:00 Go sleeping&amp;hellip;Z..z..Z..z..
16:00 Wake up, take awalk and try to get some food.
17:00 Having dinner.
18:00 Peek up my ClassicalGuitar, do some practice.
19:30 Watching TV, then play taichi which just lean today.
20:00 Go on Guitar.
22:00 Take a bath.
22:30Talk with someone in MSN.</description>
    </item>
    
    <item>
      <title>日子</title>
      <link>//blog.shell909090.org/blog/archives/243/</link>
      <pubDate>Mon, 24 Oct 2005 01:31:50 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/243/</guid>
      <description>日子就是和你一起在黄昏冲到四里外的大超市买一瓶六块的果汁。省下一块，在街上直接吃掉。</description>
    </item>
    
    <item>
      <title>程序解释器</title>
      <link>//blog.shell909090.org/blog/archives/242/</link>
      <pubDate>Sun, 23 Oct 2005 03:26:29 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/242/</guid>
      <description>贝壳在费尽N天功夫后终于得到了一个程序解释器，目前可以无结构运行。正在附加函数声明和调用结构。先存念一个Output。
int i; i=0; i=i+15*50; i=i-1; print(i); Result Output: Parse Begin [;] [] [;, ;] [] Parse End Parse Begin [;] [var(i):0] [;, =] [var(i):0] [;, =] [var(i):0, 0] [;] [0] [;, ;] [0] Parse End Parse Begin [;] [var(i):0] [;, =] [var(i):0] [;, =] [var(i):0, var(i):0] [;, =, +] [var(i):0, var(i):0] [;, =, +] [var(i):0, var(i):0, 15] [;, =, +, *] [var(i):0, var(i):0, 15] [;, =, +, *] [var(i):0, var(i):0, 15, 50] [;, =, +] [var(i):0, var(i):0, 750] [;, =] [var(i):0, 750] [;] [750] [;, ;] [750] Parse End Parse Begin [;] [var(i):750] [;, =] [var(i):750] [;, =] [var(i):750, var(i):750] [;, =, -] [var(i):750, var(i):750] [;, =, -] [var(i):750, var(i):750, 1] [;, =] [var(i):750, 749] [;] [749] [;, ;] [749] Parse End Parse Begin Begin Function Expression Paser Parse Begin [;] [var(i):749] [;, ;] [var(i):749] Parse End Function Stack[var(i):749] 749 Function Stack[] [;] [] [;, ;] [] Parse End 以上为script读取文件运行，在打开调试输出情况下的结果。</description>
    </item>
    
    <item>
      <title>表达式解析算法</title>
      <link>//blog.shell909090.org/blog/archives/241/</link>
      <pubDate>Thu, 20 Oct 2005 03:31:13 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/241/</guid>
      <description>表达式解析的本质是什么？是树的构造和消解。其他算法本质上都是树算法。
首先，我们使用Token算法来获得一个Token和Object混合的列表。然后我们将列表展开成为一颗树。这个树符合以下条件。
树的所有叶子都是Object，无论是数据还是变量。 树的节点上都是算符或函数，其分支数目和算符目或函数参数相等。 单根，无()。 那么我提出一种构造方法。我们假定一种算符passby，然后用Token算法切分表达式并且转换成合适的对象，放置在passby上面。然后我们根据(,,)的规则将整个列表递归表达成同级树。树的每层都是同级的。而后每层都根据优先级从高到低的顺序来计算结果，反馈到上层。由此我们可以得到有效的结果。
但是我没有按照上述方法写解析器。原因是太麻烦，运算时间长，不容易看懂。代码大，维护困难。我问一个同学，你是喜欢精致小巧但是有瑕疵的东西呢？还是庞大严谨没有错误的东西。结果回答说是精致小巧的。好，这就是解析器算法来源。我用了数据结构中的堆栈算法。这种算法在解析正确的式子的时候没有问题，但是精心构造的“看起来”不正确“的式子也可以解析。而且不容易检查堆栈问题。但是谁管呢？喜欢就好。</description>
    </item>
    
    <item>
      <title>Windows Installer修复记录</title>
      <link>//blog.shell909090.org/blog/archives/240/</link>
      <pubDate>Thu, 20 Oct 2005 01:00:19 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/240/</guid>
      <description>贝壳遇到邪门事了，msiexec的服务死活起不来。这个东西服务态啊，又不好做跟踪的。贝壳无奈只好求助于google。结果找到一个解决办法，适用于windowsXPWindows
Installer服务启动即关闭症状的解决。
Windows Registry Editor Version 5.00 [HKEY_LOCAL_MACHINESYSTEMCurrentControlSetSevicesMS IServer] &amp;quot;ImagePath&amp;quot;=- &amp;quot;ImagePath&amp;quot;=hex(2):25,00,53,00,79,00,73,00,74,00,65,00,6d,00,52,00,6f, 00,6f,00,74,00,25,00,5c,00,53,00,79,00,73,00,74,00,65,00,6d,00,33,00,32, 00,5c00,6d,73,00,69,00,65,00,78,00,65,00,63,00,2e,00,65,00,78,00,65,00, 20,00,2f,00,56,00,00,00 注意最后是两个回车。
特存留念，方便自己和大家以后使用。</description>
    </item>
    
    <item>
      <title>语言和人</title>
      <link>//blog.shell909090.org/blog/archives/239/</link>
      <pubDate>Wed, 19 Oct 2005 22:49:41 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/239/</guid>
      <description>GiGi和Nancy先表激动，偶语言暴差，不是你们脑子里面想的那种语言啦。
今天用java，忽然想到以前有趣的比喻，自己也来写一个。
C/C++：黑客的语言。外人根本看不懂。
JAVA：大学教授的语言。逻辑性超强，但是太过理想化太空洞。
ASM：文学家的语言。每个人说出来另外一个人都有另外的理解。
BASIC：傻瓜的语言。拣最简单的说。
DELPHI：神的语言。快要绝迹了……
SQL：我们的语言。就是英语吧……
UML：哑巴的语言。……
XML：全世界的语言。</description>
    </item>
    
    <item>
      <title>火灾</title>
      <link>//blog.shell909090.org/blog/archives/238/</link>
      <pubDate>Wed, 19 Oct 2005 03:56:29 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/238/</guid>
      <description>贝壳前两天在上班的时候看到火灾了，别人家的。表说我幸灾乐祸，这种事情不多见嘛。而且烧了个水塔而已。独乐乐不如众乐乐，贝壳今天上传火灾照片。其实还有录像的，但是msnspace……不说也罢……</description>
    </item>
    
    <item>
      <title>IE内嵌对象提取方法</title>
      <link>//blog.shell909090.org/blog/archives/237/</link>
      <pubDate>Wed, 19 Oct 2005 03:49:29 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/237/</guid>
      <description>我发现很多MM喜欢在blog里面嵌入各种对象，例如flash或者music。例如光MM的光良的歌，功MM的如果的事。一般来说要将这些内嵌对象保存下来是比较麻烦的。因为内嵌对象直接播放，没有引用和连接，那么用连接跟踪器就分析不出结果。
通常来说URL是通过阅读代码来获得的，但是有的时候网页是通过javascript来引用的。这个时候代码分析和代码分析器（例如Mozilla内嵌的那个）就无效了。一般来说是用sniffer来解决问题的，贝壳以前用的是iris。后来出现了种种的特种sniffer分析器（其实分析cap抓包文件就好了），所以这个问题看似就解决了。但是恶搞是没有境界的，还有别的解决方法吗？
贝壳首先想到的是COM分析和跟踪，跟踪COM的dll载入过程和接口参数。这样当然可以获得对象，问题是成本太高了。然后贝壳又设想了文件钩子，在向缓存区域写入特定文件的时候hook到。然后导出这个文件。但是文件确定的问题太困难了，假如同时有1000个内嵌的mid，这个方法等于没用。这个还不是最严重的问题，最严重的问题是这个解决方案可不比特种sniffer简单。
后来贝壳在用ProcExp（www.sysinternal.com出品）的时候发现这个软件可以跟踪进程的句柄。这样的话IE内嵌对象必定在缓存区缓存，COM在打开的时候肯定使用了句柄。我们只要跟踪所有文件句柄，其中不会有很多的。（其实这个方法和前面的方法一样，要确定文件名是个困难的事情。）然后将文件的路径复制到console里面，运行下copy指令，文件就出来了。这个是我想的到的最简单的IE内嵌对象提取方法了。</description>
    </item>
    
    <item>
      <title>错车记</title>
      <link>//blog.shell909090.org/blog/archives/236/</link>
      <pubDate>Wed, 19 Oct 2005 03:32:03 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/236/</guid>
      <description>今天贝壳粗心的毛病又犯了。回家应该乘的车叫787，开来一个叫788的车，在最后的8上面8清楚。所以贝壳不假思索的上去了……
车开到崮山路，转弯了。贝壳发现了，不对了。赶快问，结果吓到了。怎么办？
贝壳感觉今天处理事情和以前的却不一样了。以前的处理模式比较傻瓜。赶快下车，倒乘或者找最近的车站重新乘对的车。今天贝壳先看了788的路线，然后推测了788的行经位置。得到的结论是，继续坐。
坐到峨山路，果然和我想的一样。在峨山路和杨高路的交界口附近停了。然后贝壳啥车都不倒，直接走了回来。不多花钱，不多花时间。多走的路和换车差不多。嘿嘿，赚到了。
鉴于这次错车的经历，贝壳决定了。下次来车的时候一定看清楚了……</description>
    </item>
    
    <item>
      <title>上海深度旅游</title>
      <link>//blog.shell909090.org/blog/archives/235/</link>
      <pubDate>Mon, 17 Oct 2005 05:57:39 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/235/</guid>
      <description>前几天净在外面跑，先是北京后张家港。计划了明年出去玩，可是回头才发现，我，还没有看过全部的上海。
都说别人的月亮圆，去看看没啥不好。不过去见识别人的月亮前，先别浪费，看看自己眼前的月亮吧。</description>
    </item>
    
    <item>
      <title>抑制-释放(restrain-release)模型和转换(transition)模型</title>
      <link>//blog.shell909090.org/blog/archives/234/</link>
      <pubDate>Mon, 17 Oct 2005 03:06:31 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/234/</guid>
      <description>一个同学和我讨论关于某电影的剧情，大致来说就是一种含蓄的无奈。但是我脑子里面却想到的是台湾言情和侦探片的剧情，简单来说可以用日本小孩描述超人片的句子来表达。大约一半时间的时候反派登场，20分钟左右超人给打个半死。然后到最后五分钟超人暴走，搞定反派。最后三分钟交待下，end。
台湾的言情小说和侦探片的剧情也大致符合某个规律。简单来说，就是在一半左右的时候，出现某种反面的因素，所以让人觉得非常压抑。用某人的话说就是“人都是自虐的”。下面就是喜剧(comedy)和悲剧(cothurnus)的区别，喜剧一般在后面扭转了这种因素，而悲剧则一直没有扭转。
一般来说，经典的悲剧会比较完美些。按照余秋雨的说法，就是一种双重悖论。简单来说，就是左也不行，右也不行。具体说的话，剧中的反面因素不是因为某个具体的人或者某些具体的人造成的。拿红楼梦来说，我们都希望贾宝玉和林黛玉在一起。可是因为整个家族利益需要，社会风气效应，所以他们不能在一起。退一步说，即使可以，但是一个如此小心眼，如此敏感。另外一个如此的……风流吧……即使在一起，能不能在一起还是个问题。这里可以看到，没有任何一个人是蓄意要他们分离的，应该是整个的构架造成的这个悲剧。
从另外一个层面上看，红楼梦和titanic有相似之处。在整体的宏观构架下交织了个人的无奈的爱情。一个是沉船，一个是家族兴亡。最终一个是一个死一个出家，一个是一个死一个嫁人。
如果是喜剧，那么是否可以取消这种悲剧模式的前奏呢？应该说可以，但是出现一个问题。一般来说，持续的写喜会造成观众的审美疲劳。所以通用的模式是两种。抑制-释放(restrain-release)模型和转换(transition)模型。
抑制-释放模型的核心很简单，前半部分是悲剧。但是大家别担心，后面都会矫正回来的。主角前面怎么悲惨了，后面反派会更悲惨的。最特征的恐怕就是日本的超人剧了……
转换模型是我在看古灵的小说的时候发现的特征模型。先说明，这个应该算言情小说。可是书里面很少出现经典的反派或者误会，有的话一般也是很小。主要的特征在于通过主角的各种行为充分转换观众的各种心情，以此避免审美疲劳。简单来说前面是哭，后面就是敬佩，再后面是甜蜜，等等等等。而且构架也是符合双重悖论的。所以看古灵的小说的时候一般都是整体的甜蜜温馨，不是琼遥小说的自虐状……
转换模型的另外经典作品就是金庸大侠的作品，尤其是天龙八部。
严格来说抑制-释放模型也是一种转换模型。但是其转换的方向是从特定的悲转向特定的喜而已。准备写悲剧的可以试试从特定的喜转向特定的悲，或者悲-喜-悲的三段转换模型。但是小心给骂死哦。</description>
    </item>
    
    <item>
      <title>回到原始</title>
      <link>//blog.shell909090.org/blog/archives/233/</link>
      <pubDate>Sun, 16 Oct 2005 16:21:37 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/233/</guid>
      <description>回到这里就像回到童年，回到最原始的地方，回到心最柔软的地方，回到过去的快乐。于是遇到过去最熟悉的人，记忆最深的人，看她最甜美的笑，心就向不可及的深渊沦陷了。明知不可为而为之，是勇敢还是无奈。</description>
    </item>
    
    <item>
      <title>语言的魅力</title>
      <link>//blog.shell909090.org/blog/archives/232/</link>
      <pubDate>Fri, 14 Oct 2005 22:05:03 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/232/</guid>
      <description>从古而今，自中而外。优美的语言无不符合一个规律，即节奏。人的语言可以区分为三个要素，音，高，声。音即发音方法，一般决定了音素听起来是什么样子。高指语言的音高，器乐声学角度讲就是声音的频率。声指讲话的音量。
其中声是自由控制的，只要在允许范围内，音量的大小是可以自由控制并且可控的。而高不是完全自由的，许多语言中的升降调由此产生。最典型的就是汉语的四声音调，古称为平仄。而音是行程语言最重要的因素，失去音即失去了语言的基础。
三者在时间上的展开行程语言，优美的语言自然会具备规律的特性。如声的变化形成抑扬，高的变化形成平仄，音的变化形成押韵。从文字的角度来讲，优美的文学总要通过语言层面去形成。这种意义上的优美更倾向于骈文，并没有实际的意境在里面。</description>
    </item>
    
    <item>
      <title>洗尽铅华</title>
      <link>//blog.shell909090.org/blog/archives/231/</link>
      <pubDate>Fri, 14 Oct 2005 21:42:26 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/231/</guid>
      <description>如果说上海代表了喧嚣和忙碌，那么北京就代表了安逸与宁静。虽然说这里不是没有变化，没有厮杀和拼搏。可我更爱这里的闲逸。与三五好友到公园聚坐，什么事都不做，静观落叶潇潇而下。河上有鹅，鹅沉浮而水波荡漾，如同苏格兰的碎花布。不过更加光怪陆离，更加平静清淡。抑或漫步街上，举箸轩中。土气下面自有风骨。不需似大城的气派，自然有采菊东篱下，悠然见南山的的意境。蓝天白云夕阳渐斜，远眺群山，见纵野空旷，天地悠悠。何处不人生，何必囿于一隅。</description>
    </item>
    
    <item>
      <title>忆北京</title>
      <link>//blog.shell909090.org/blog/archives/230/</link>
      <pubDate>Thu, 13 Oct 2005 05:10:17 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/230/</guid>
      <description>网上听一个同学的忆北京，又勾起了我不少的思念，虽然我才刚刚离开。
记得高一到什刹海体校补课的时候，下课就从满满当当的大教室内挤出去，走到走廊的尽头去呼吸下久违的阳光。冬天的北京，风是冷的，阳光是暖的。吸进嘴里吐出来，变成缓缓的白雾。吃饭的时候就要从什刹海走到鼓楼大街。当时那里还在修路，车很少，行人也不多，尽是凹凸不平的路。一个人上下行走，颇有闹市取静的感觉。阳光晒在破棉衣上，老老的，给人一种安心的感觉。在鼓楼大街有家面馆。卖牛肉面。这么多年了，已经忘记了当年的味道，只是记得棕褐的汤上飘着金黄的油，喝下去让人腹中浮起一阵暖意。额头上禁不住沁出细密的汗珠来。出门搓搓冻僵的双手，慢慢的走回去。有种偷得浮生半日闲的感悟。如同偷到了这冬日可爱的阳光，让他永远得停在了这里。
PS:贝壳写的时候把鼓楼写成前门了，汗一个……</description>
    </item>
    
    <item>
      <title>亚历山大结</title>
      <link>//blog.shell909090.org/blog/archives/229/</link>
      <pubDate>Thu, 13 Oct 2005 04:57:28 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/229/</guid>
      <description>爱情就像丘比特编织的亚历山大结。你爱她，她不爱你。她爱你，你不爱她。
爱情就像一条无形的锁链，一端在看不见的感情里面，一端在看不见的命运里面。
你不知道你爱的会是你的谁，谁曾经偷偷的爱你，谁是你今生的唯一。</description>
    </item>
    
    <item>
      <title>惜缘</title>
      <link>//blog.shell909090.org/blog/archives/228/</link>
      <pubDate>Thu, 13 Oct 2005 04:54:34 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/228/</guid>
      <description>无论是你爱的人，还是爱你的人，请珍惜她们。
你爱的人，如果可以，请告诉她你爱她，无论她可能如何回应。如果她为难，那就别说。
爱你的人，如果可以，请告诉他你的感受，不要顾虑别人的眼光。如果你为难，那就别点破。
人只有一生，无论如何都要了无遗憾，无论如何都要活的精彩。但是无论如何都会带着遗憾，无论如何都会平平淡淡。如果说相爱相知是缘，那相依相守就是份。</description>
    </item>
    
    <item>
      <title>三次的爱情</title>
      <link>//blog.shell909090.org/blog/archives/227/</link>
      <pubDate>Thu, 13 Oct 2005 04:50:18 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/227/</guid>
      <description>一个人一生应该有三次爱情，最初的爱恋，最深的爱恋，最后的爱恋。
一生中最美好的，就是最初的爱恋。无关家世，无关年龄，无关学历，无关金钱。仅仅是因为我喜欢你，你喜欢我。仅仅是因为喜欢对方时那种纯纯的感情。
找女友时，得到的是最深刻的爱恋。也许你今生爱许多人更逾性命，然而有且仅有一个，才能和你发自内心契合。那是超越所有世俗的心灵之恋。
结婚的时候，选择的是最后的爱恋。也许心灵上带着缺憾，但是却因为种种情由和她在一起。感情可以走过世上的千山万水，然后却走不过两个人自己的心灵。能够结合的两个人，不但要能在心灵上契合，而且还要能在生活上契合。这样，缺憾的人生才不会更遗憾。</description>
    </item>
    
    <item>
      <title>郁闷</title>
      <link>//blog.shell909090.org/blog/archives/226/</link>
      <pubDate>Thu, 13 Oct 2005 04:37:14 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/226/</guid>
      <description>今天和外婆小闹了顿脾气，老实说，感觉不好。
起因是因为一个公文包，老妈买的。115，什么都没有，产地，牌子等等等等。我说我不需要，因为我很少用到，老妈说这个也只是撑撑门面的。既然是母亲的心思，我虽然不需要，还是天天在用。结果，他因为我的过度使用（如果两个月能过度使用的话）坏了。一个把手坏了。
我和外婆说，明天不用，你拿去修吧。外婆看了看，拿针缝了缝，说没关系可以用的。我说反正可用可不用，明天我就不用吧。外婆在旁边宣传她的结实，如同市场的小贩在推销她的西瓜。于是我说，试试看？
公文包里面的负重只有一副眼镜，一个数码相机，一本本子，一瓶眼药水。我单手向上一拎，两个手把带子全断了。外婆说，你总是要把东西弄坏。我说，我用单手，这个是我太用力还是它不结实？外婆没答话。她说我怎么给你处理，一定好的。
我有点冒火，这个东西这种质量水平。今天弄的好这个，明天又哪里坏？如果有票据，我肯定退了它，问题是没有票据。我就直说，这个东西扔了吧。外婆还在那里说怎么修。我又说，这个东西是它不结实还是我太用力？外婆不答。于是我干脆最后总结，您直接给个结论吧，是我太用力还是它不结实，如果您不说，我扔了它，求个清静。外婆还是在说怎么修。
修啥修，扔了。</description>
    </item>
    
    <item>
      <title>人生</title>
      <link>//blog.shell909090.org/blog/archives/225/</link>
      <pubDate>Wed, 12 Oct 2005 05:49:59 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/225/</guid>
      <description>从爷爷的葬礼上回来，感觉很平淡。有个人说她爷爷死了，他很难接受。先且不论我几乎没有见过爷爷的面，就是非常熟，我也怀疑我是不是哭的出来。
我这个人可能道家的东西学多了，对于生死看的很淡。当然，不是说有人拿刀子问我要钱还是要命的时候风淡云轻的回答他，让他杀。不过我对于一个人的生死看的并不是很重。一个人，这样的来，这样的走，只不过回到原本的状态而已，有什么好悲伤的呢？逞论是大宴宾客兴师动众。虽然从社会行为分析角度讲是有意义的，但是我觉得还是太……浪费了。
俗话说人死如灯灭，什么都留不下。有人记住你，如同在世界上留下幽莹的一盏灯火。记住你的人也死了，就完全的消失了。我们记的住武则天这个名字，可是谁知道武则天的音容相貌，谁知道她在想什么，在念什么？死后一了百了，伤心也好，快乐也好，从此一笔购销。
如果我死，那么我一定不要这样的葬礼，一定不要有人哭。生前我没有带给你们快乐，我没有快乐。那么在死后请你们笑一笑吧。庆贺我不用再为了我喜欢的人和喜欢我的人而头痛。庆贺你们不用再为了我的生命而烦恼。如果可以的话，请记住我的名字，在快乐的时候，悲伤的时候，念我的名字，宛如我还在一般。这样，在你们的心里，生命就与我分享了，无论我是否还在。
既而身后一场空，何须身前一世名。想想喜欢我的，我喜欢的，都觉得宛如天边的斜阳一样。阳光遥遥照在层云上宛如虚幻的群山，真耶幻耶。我想要的，不过是听听喜欢的音乐，静静的看远方群山奔驰，心情平静的直到老死。激烈的东西如爱情一类的不适合我。
有个朋友又说，那是因为你还没有爱过。也许吧，我心动过。但是没有爱过。我经历过迷茫的爱情，酸甜如同纯纯的柠檬汁。经历过痛苦的爱恋，如同飞蛾扑火却是凤凰涅盘。经历或心灵的契合，真耶幻耶我自己都快迷失。经历过别人的告白，感动但却无可奈何。经历过一见钟情，到最后才发现我失去的已是我的所有。但是我爱过吗？没有。或许是我的被动，或许是天意使然。我到现在还是尚未爱恋的人。
有人对我说，男孩子要主动点。可是很多事情不是主动就可以改变的，也可以称之为悲哀的无奈。生死是一桩，血缘是一桩，别人的爱情也是一桩。我求教于一个应该在幸福中的朋友，得闻，她也在迷茫，如何能指点我？于是我更加迷茫，一个心灵契合的人就如此难得？to be or not to be? that was a quiz.虽然我没有得到答案，但是我知道我宁可活在美妙的孤独中。</description>
    </item>
    
    <item>
      <title>多事之秋</title>
      <link>//blog.shell909090.org/blog/archives/224/</link>
      <pubDate>Mon, 10 Oct 2005 01:02:57 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/224/</guid>
      <description>还真是标准的多事之秋，贝壳的爷爷走了，贝壳要去送行。因此一两天内不在线上，着急找贝壳的朋友可以短我，别打我，电话很贵。北京去一次已经用掉一个月的包月了。回来以后恐怕还要完成一篇悼文（如果能算的话），还有完成嘉年华。可计算信任路径是在太难写，可能要等等时间。贝壳还在具体理清思路，并且要查阅和购买些资料。还有其他的短文就慢慢上吧……
BTW，哪位朋友用过paypal贝宝买过国外的产品？能教贝壳怎么换外币付款吗？</description>
    </item>
    
    <item>
      <title>可信任路径计算</title>
      <link>//blog.shell909090.org/blog/archives/223/</link>
      <pubDate>Sat, 08 Oct 2005 02:29:20 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/223/</guid>
      <description>可信任路径计算，其实只是图管理的一个应用而已。不过可以结合计算方法，来精确度量过程的安全程度。
下面提到实体，指以下三种可能。一，法律人。二，计算机。三，协议对象。
以下提到连接，指以下两种可能。一，物理联系。二，逻辑联系。
我们假定用户实体要产生活动，则必须信任某些实体。例如要存钱必须信任银行，要买书必须信任出版商和作者。如果用户要做某项活动，必须信任某种实体，那么用户的活动安全度，则于所信任实体和连接方式，以及连接评估实体相关。
我们假定所有连接都会产生一个权，这个权由某个信任实体直接给出。
我们假定用户对自己的信任是1。
我们假定连接存在以下五种类型：
请求。有向关系。 应答。有向关系。 依赖/依存。有向/无向关系。 包含于，有向关系。 互斥，无向关系。 利用以上假定，我们可以计算某个系统行为模式对某个用户的潜在风向。
先停止写，去看UML建模。根据分析结果，计算和信息的相关程序有相当关系。</description>
    </item>
    
    <item>
      <title>全球嘉年华</title>
      <link>//blog.shell909090.org/blog/archives/222/</link>
      <pubDate>Sat, 08 Oct 2005 02:10:04 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/222/</guid>
      <description>10月6日星期四，有人约我去全球嘉年华。说起来我和这个约我的人的关系还蛮诡异的，她是我一个网友/网上认的姐姐，现在已经嫁人并且怀孕，回头小孩百日要包红包了……钱啊……/结婚时候请的朋友，去拉小提琴的。我是去弹吉他的，但是忘记一个关键问题。古典吉他是典型的独奏乐器。在大型房间内演出必须是音乐厅这种声音结构良好的地方或者有很好的拾音扩大装置。当日的麦克风根本不行，房间肯定也不行，结果大家都听不到，打击啊。不过可能因为大家都是拉乐器的，所以走前面交换了手机号码。她到拉的不错，结果金融的学生现在专职拉琴为生。赚的比我还多，更大的打击啊……
先去了人民广场等人，人民广场这里是上海的标志地了。朋友经常问我北京好还是上海好，对此我实在难说什么。论生活条件，北京拍马难及上海。不论水资源造成的风沙不断，就是从伙食上都能看出明显对比。论城市结构吧，上海虽然乱，但是堵车明显比北京小/上下班除外/，而且分销物流体系成熟。随处可见小便利店，买东西缴费啥的都方便。北京做点什么事情还要自己先开车，好不容易到了能不能办成还另说。从发展角度来说更差异了，北京聚集了全国所有的能人，竞争激烈。而且天子脚下，什么事情都深受管制。上海这里办事情不是说没有黑暗了。但是什么该伸手，伸多少都很简单。而且拿人好处就痛快办事。而且如果本来就应该办的事情根本不拖拉，也不怎么吃拿卡要，完全走照章办事的模式。但是从人文角度来讲就正好相反了。我这么评价吧，北京车上可以见到让座的，上海这种事情基本少见。北京看到老人摔倒那都用自家车送医院的，上海看到邻居摔在面前还要躲着跑。说起来虽然并非没有道理，可是毕竟少了一种人情味。我和几个同样跨地谱双城的同志一致评论，在这里要工作赚钱好办，要生活真的是减寿的……
嘿嘿，跑题了，话说回来。人民广场等人的时候又见识了毛主席名言“人多力量大”的威力，用英语描述就是people
montain people
sea。小小一个KFC门口等人的我至少看到了七拨，路过的那就不计其数了。有个人染个黄发滑旱冰，非常潇洒，看的我羡慕的要死。贝壳没有啥怪癖/众人：真实的谎言，下面才刚刚写了五个怪癖……/，但是只要控制了带轮子的就会变身成为人间凶器。貌似这辈子是学不了自行车旱冰小轿车了，还是等下辈子吧。莫非这就是大家传说中的上帝为你打开一扇窗，就会关闭另外一扇？不管了，最后我还是认不出人家MM，人家认出我的。这说明两个问题。一，我TMD就是目标明显，要去作奸犯科根本不用贴照片，光文字描述就能让我无处容身。二，女人是一种神奇的动物，只要使用CD一类的产品就可以轻易变成另外一个人。
另外还有MM的两个同学，和另外一个朋友。鬼知道怎么认识的，也许和我一样是被拖出来的。贝壳还刚刚从北京的飞机上面下来，神志还不是怎么清醒。结果给几个MM拖着就去了嘉年华，票还贼贵。我们的李兄/此人女性/居然买了三张，原因是因为伊认为token是用票换的，进去有钱也弄不到。我当场无语问苍天……
里面的东西其实玩过不少了，上次也是被一个MM拖出来，莫名其妙的玩，然后就莫名其妙的没了联系。不过这次显然玩的更疯狂点。上次好歹摩天轮坐掉不少时间，这次不耗时，直接上去座旋转秋千。其实如果秋千平行转动，再快贝壳也不怕。问题是上下浮动，贝壳的平衡神经不好，所以下来后就非常想吐/呕～～呕～～/。幸好没有当场出丑。然后该死的相机给我卡壳，浪费好多表情。/也幸好没有照下来当时的样子/
MM们比偶们两个男的勇敢多了，莫非平时压力太大来发泄来了？两个MM直接上了一部上下旋转的机器，具体情况恕我无力形容，自己看照片吧。然后偶们去吃午饭，发现大失误。这里的午饭是金子做的吗？交大卖五块的炒面这里只有六分东西卖十块，自己想想啥水准吧。而且坐的地方奇难找，我们容易抢个坐，吃完了最后还是别人“请”我们让下。
下午两个MM更是将疯狂发挥到极点。我们为了减少上阵伤亡的可能性，就选择了一部貌似不是很厉害的机器上去，就是那种一排人左右上下转的那种。谁知道机器貌似不厉害，实际上是扮猪吃老虎。加速度大的吓人，我上去后耳朵翁翁的，而且全身都被保险杠卡的发红。建议大家下次陪MM去想减少伤亡换那种鬼屋就好，至少伤亡系数应该小点，而且说不定有MM投怀送抱。
还有一个不得不说的就是急流勇进，我坐了不少了，不过这次才知道原来会有这么多水下来的。可怜了贝壳的新裤子，全毁在这里了。
最后大约三点跑出嘉年华，玩的是比较痛快了。痛的是钱包和脑袋，快的是时间。本来说找个地方吃饭或者喝水。MM要去正大，没有办法，去就去吧。几个人跑到正大，全部都满。最终好容易找了个休息的坐，就在正大西边三层，风景不错的说。可惜没有*8g，否则说不定能看到传说中的zoomy同志卖咖啡。最后在滨江大道上照掉了剩下的空间跑回来了，又是快乐而美好的一天……
人生苦短，何必老想着不痛快……</description>
    </item>
    
    <item>
      <title>剥离管理模型</title>
      <link>//blog.shell909090.org/blog/archives/221/</link>
      <pubDate>Sat, 08 Oct 2005 01:07:27 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/221/</guid>
      <description>有一就有二，老人家脑子不好，大家多多见谅。
剥离管理模型，分三个层面。对象层，数据容器，应用层。
对象层来说，分三组对象，本人，电脑，第三方。分析安全特性时候可以加上攻击者。本人指每个管理的主体，电脑泛指所有可用的电脑对象，每个电脑对象区分安全级别。第三方泛指所有和本人相关的合作者，包括电脑和个人。攻击者分为电脑和个人。
数据容器层来说，区分的是数据的类型和安全类型。以个人来说，具备全局配置，软件配置，安全区域三个部分。以机器来说，包括本地数据，本地配置和本地程序三个部分。第三方的合作关系放置在安全区域和本地配置中。
应用层是关系建立的模式，具体来说就是路径信任计算。回头专门写吧。
一个机器运行的应该是和机器和用户无关的本地程序，根据本地配置来运行具体程序参数，个人软件配置覆盖本地配置。
……脑子乱了，回头慢慢来写吧……头痛啊……还有个可计算信任路径的问题呢……
先停止写，去看UML了。</description>
    </item>
    
    <item>
      <title>核心集合理论（最小集合）</title>
      <link>//blog.shell909090.org/blog/archives/220/</link>
      <pubDate>Fri, 07 Oct 2005 20:40:40 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/220/</guid>
      <description>本来北京游记都写不完了，中间插一个技术论点很不伦不类。但是老了，脑子不大好，不记下来就忘记了。大家姑且原谅吧。
编译器理论中有中叫做核心构造和自构造。首先通过A语言写出B语言的初次编译器，然后通过初次编译器编译用B语言写的B语言编译器本身，形成二次编译器。逐步叠代，形成稳定的核心编译器，然后通过核心编译器编译层次1，通过编译器和层次1编译层次2，逐步递推，形成最终release的集成编译器。最出名的产品就是IBM公司的Pascal语言。（还有多少人在学……世代更替啊）
同样在离散数学的数理逻辑算符体系中也有一个最小构造集合。通过最小构造集合的有限次叠代可以产生全集合的等效结果。所以又被称为核心集合。
大家可能会认为比较无聊，不过不才贝壳我现在搬到语言上套用，看看这种理论是否可行。
首先通过单词表等等对比的形式教会最小的单词集合。 然后通过标准语法格式教会最小的语法集合。 通过标准语法集合解释扩展单词和语法集合1。 逐次叠代教会大多数的单词和语法。 着重解释如何学习新的单词和语法。 按照我们使用中文的习惯，还有我使用计算机的经验。我们不是什么都知道的。很多人不知道二进制(binary)是什么意思，但是他们可以很快的学会。如果我们不知道二进制的英文，我们很习惯是通过中文词表的方式来获得其中的意思。但是真正英语好的人都是通过交互的解释来获得意思的，这样的好处是具备非常好的动态性能。因为很多英文单词没有贴切的中文解释，语法更是天地之别。通过英语本身获得英语知识的能力可以让一个人不但具备英语能力，而且可以根据不同环境变化自己的英语。
通常来说，一个人学习语言的最初是模仿，通过学习周围人的发音和对应的可能意义来分辨词素的音和意。至于形来说，符号文字一般都具备相当的音形对应性，象形文字则是意形对应性。这个可以通过后天的刻意学习获得，而且也无关人的交流。毕竟在美国也不是完全没有文盲的。然后音意的对应性存在一个问题，就是循环解释。我们可以通过一个基础的词意去解释另外一个，但是语言是唯一无法用语言来解释的东西。一个词的解释最后永远涉及他的自身。所以我们通过一个最小单词和语法的构造集合来解决这个问题。毕竟发展出自我独立的语言体系结构是我们小时候做的事情，现在完全没有必要这么麻烦。</description>
    </item>
    
    <item>
      <title>北京游记四.遥远的祝福，尾巴，我回来了</title>
      <link>//blog.shell909090.org/blog/archives/219/</link>
      <pubDate>Fri, 07 Oct 2005 02:44:50 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/219/</guid>
      <description>10月5日星期三，今天本来应该回上海了，临时接到消息，猫旅游回来，佳书在北京。总算朋友一场，过去看看吧。于是和老妈订了下午一点的机票，上午八点半起来冲到东直门。佳书有事情不能来，猫能到场。这个地方总算刚刚和海鹏撮过，还算熟悉，不至于出丑。可是临到场还是发现两个人面对面打手机，我的电话费啊……这个又是一个奇观，和对眼，想谁谁到可以并称了。看来回来我可以写本奇遇了……
本来说去必胜客吃pizza，结果我说那里肯定在装修。没办法，刚刚和海鹏逛过。有人强行要去，还是去了。结果啥都没吃到，跑会原地吃麦当劳。说实在的，麦当劳实在太审美疲劳了。可是也没有办法。吃的时候聊了聊近况聊了聊朋友。猫的老公在德国，老是催她去。看来幸福不远矣，唉，我的春天在哪里？
虽然没有吃到什么，不过和谁吃比吃什么重要。所以十一点大家要吃东西的时候跑了，麦当劳应该感谢我们这种优质客户。车从东直门一路蘑菇到机场，到的时候十二点了。家都不回，让老妈收了东西就直接去候机楼。最后总算顺利的上了飞机，在危险的安全时间到达了。期间和大家群拜了一个，短信彻底没钱了。不过回复还挺让人感动的。
我回来了，仲夏夜之梦的北京。我会回去的，也许在不久的将来，大约在冬季。</description>
    </item>
    
    <item>
      <title>北京游记三.中关村，MP3和数码相机</title>
      <link>//blog.shell909090.org/blog/archives/218/</link>
      <pubDate>Fri, 07 Oct 2005 02:44:10 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/218/</guid>
      <description>10月3日星期一，按照别人的逻辑，去了北京不能不去天安门。那么按照我的逻辑，回到北京就不能不到中关村。这种事情如同朝圣者于麦加，就算知道去了只能看到人山人海，但是沾点灵气总是好的。中关村其实我蛮熟悉的，即使高中同学，除去几个家在海淀的，剩下的人考入清华也不过是四年的事情。我第一台电脑就在中关村被黑的，因为这个事情经常跑过去，严格算来已经有七年以上时间了。不过其实去中关村的时间越短，对它越熟悉。因为如果对比七年前的记忆，你恐怕会一路走到园明园。一个四车道乘四车道的十字路口，现在改建成了立交。北四环和中关村大街的交接点，北大和清华的分水岭，海龙旁边，中关村的核心地带。我的旅程就是从这里开始的。
海龙在三四年前就建了，不过现在还是一样火。进去问了几个报价，不知道是节日宰人，我比较像傻瓜，还是北京上海差价。中关村的报价居然比上海还高。顺便问了服务器报价，真TMD不是人，最精简配置需要壹万以上。这个价格我宁可拼两个并行服务器，如果可以的话。虽然开始不准备买东西，不过最后挡不住诱惑，买了一个MP3。自我催眠说数码相机去上海用信用卡买好了。结果老妈给我一个更大的诱惑，直接买一个给我。这么嘛……还是后面再说好了。
海龙逛完去了鼎好，这里最让人爽的就是顶楼的美食。以前去中关村吃饭不方便，这里建好以后我一直来这里吃。嘿嘿，其实也就是两年的事情。这里一般十块一个人就能吃到不错的东西，二十可以吃的翻过来。正好中午，先撮顿攒的。然后去下面乱逛，想起赵一博个家伙让我给带东西。于是上taxi跑双清路，找了半天，等了半天，总算将他要的东西带到手。问问邮寄价格，NND亏大了。我28车钱不算手机，邮寄才20……
最后坐车跑回海龙，逛了下以前的中海电子市场，现在已经关了。很多以前东西现在也找不到了。最后兴趣索然，照了两张就回去了。
10月4日星期二，老妈给了我一个超级的诱惑，直接送我一个数码相机。说实在我希望在上海买，这样一年内保修方便。事实证明我的却有远见，不过远见比不上东西，还是被诱惑了……
老爸先是开车直接到了北航对门的百盛，进去才发现这种地方也能叫卖场？超市差不多！可是我们的消费卡只能这里消费，所以老妈就贴了一块钱（女人的算计是很可怕的，重复让你试衣服更可怕，在此敬告天下王老五三思），买了几件衣服。然后转去亚运村东面的华堂，这里到是东西够多了。可是中关村2300的东西这里买快4000，只有神经病和有毛病才会这么买东西。干脆，老妈再买了点衣服，买点电池回家。最后没有办法，我领父母去中关村鼎好。说起来老爸在北京开车，道路应该比我熟悉很多。可是中关村这里他想停车吃饭买东西绝对只能拜我下风。
我们跑到一家公司去买数码相机，说到这里我就觉得似乎被坑了。毕竟电脑熟悉数码相机不熟悉，之前又没有在网络上查过报价。家里的电脑坏了，磁道损坏。只有2000原版安装盘情况下能装好已经非常厉害了，能驱动上网更难。不过要用小猫当宽带你还是打死我吧。还有一个PDA，不过只能查SD卡速度，而且还没电池了，要买。所以没有带去，造成中招。
话说数码相机是非常好的，可是相机不带SD卡和备用电池。所以配了一对。但是根据回来后测算的结果，卡是四速读取0.1速写入，而我的低速卡也有1.3速读取2.1速写入。不对称嘛！难怪每次照相都要等很久。备用电池更扯淡，压根充不进去。所以干脆和发票留在北京让老妈回头去换了。唉，要是在上海敢玩这手，我弄死他们。
现在数码用的是我的PDA上的SD卡，还要专门由数码相机格式化，否则老出异常。搞的我PDA还需要重装。电池就用的主电池，南浮跟本顶不住。唉……</description>
    </item>
    
    <item>
      <title>北京游记二.消停的一天，顺义</title>
      <link>//blog.shell909090.org/blog/archives/217/</link>
      <pubDate>Fri, 07 Oct 2005 02:43:39 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/217/</guid>
      <description>10月1日星期六，这天估计大家都在拜，所以没怎么活动。只是短信拜节而已。不过贝壳的短信在六天内耗用光，相信和这个拜节具有莫大的联系。
10月2日星期日，节日又是周末，大家该拜的也拜了，该玩的也玩了。有空出来聚一聚，没空的我也没空了。所以喊上所有能联系到的同学，在顺义聚了次。这次还算不错，开始就叫了三个人，李宏国，柳江陵，老狗。结果老狗上午不来，李宏国骗来了太阳和张兴研，肖雄没骗到。下午老狗到场，凑齐六个人。中午李宏国请客吃了顿，在万家灯火吃的饺子。本来要我请的，可是小姐死活不来结账，结果给他跑过去结了。兴研自己开了车，活的滋润啊。李宏国好久没见，到是出息了。没读研在学校跟着导师干活，拿3300多的税后还嫌少了。郑磊保了研，和老狗一样。据说秦建立也保研了，在北航研究飞行器。柳江陵拿着工程管理的学位去一个政府机构，管乡镇管理。天天在跑也算辛苦。当年在A班混的一些人，向心力也不算强，不过毕竟同学一场，情分尚在。出身牛山，混的也都不错。比上虽然不足，比下尚且有余。相信以后再聚会会更好点。
下午去了李宏国啥的童年所在，顺义的幼儿园。一帮人像小孩似的乱跑，不过怎么也没有当年的野劲了。所谓物似人非，就是这样吧。很多事情都是回不来的，与其苦苦追寻不果，不如潇洒让他过去。后面我们去了顺义公园，环境真的不错，下次有空再怀念怀念吧。</description>
    </item>
    
    <item>
      <title>北京游记一.机场，东直门和健翔桥</title>
      <link>//blog.shell909090.org/blog/archives/216/</link>
      <pubDate>Fri, 07 Oct 2005 02:43:00 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/216/</guid>
      <description>9月26日星期一，在车上晃悠，忽然想起家乡的破烂公交。于是兴起了回家看看的念头。虽然我老在两地跑，但是还没有连续两年没有去过另外一个地方的。是离开很久了，也不知道家乡的父母，儿时的同学如何，该回去看看了。
9月27日星期二，向老板请假，问老妈机票问题。得到答复，装好所有电脑就回家。机票一切好说。
9月28日星期三，在一个上午装好两个机器，部署四个系统和驱动还有应用程序，体现个人并行处理能力的极限。下午冲到华山路售票点，还不知道路，从徐汇广场打的过去的，最后才知道离静安寺一公里，浪费啊。售票小姐磨蹭半天才出票，说以前没有办过。嘿嘿，国航在上海的工作人员家属是少了点。
9月29日星期四，晚上有聚会，所以要乘11点的班机。直接结果就是临时多向老板请假半天，间接结果还有我欠老板半天假。公司有个电脑差点要我回去修，不管了。
到了机场，拍身份证照到是挺顺利，不枉我提前回来。这也是我提前请假的官方理由，不过老板要求八号必须上班，交付新添置的两台电脑。然后晚上参加小学同学聚会。毕竟十年没有见面了，李默雯和宋天伟见过照片，还认的出来。王立鹏和张玥玥就不行了。不过这也没有起啥作用，宋天伟最后才到。李默雯到是到的挺早，不过见面像见鬼一样（谁不是呢？），还在找人的时候碰到熟人结果把我晾一边了，害我闹个大笑话。
话说我十年没见同学了，认不出来，当然她们也一样。所以我看见张玥玥进来，然后拼命找我。还在想，这个人挺眼熟，找谁呢？可是也不敢上去认啊。所以叫服务员过来，说你看见有找这五个人或者叫这五个名字的，请他们找我来，然后报了我们五个名字。刚刚说好，王立鹏下班过来了。他总算我还认得，赶紧打招呼。不过他先认不出人，然后就是见鬼的表情（唉……）。刚刚对眼五分钟也就成了全机场的大笑话。
具体说话就不谈了，四个人，加我四个工作的。所有人里面一个人和老公去德国，一个人女朋友在搞新闻。没有女朋友的那个在中航油，没有男朋友那个在学开车。不在中航油的男士一个搞程序一个搞销售。请问有几个王老五？
9月30日星期五，上午海鹏突然打电话过来（我的手机费！），说中午有空。那么就在东直门聚聚吧，把上海交大的北京同乡会开到北京来。于是临时和人改约修电脑，漏空跑到东直门外大街去。等了半天海鹏，饿的要死，就在旁边一个叫东北人的餐厅撮了顿赞的。别的都没印象了，就是葱油饼和豆腐印象比较深刻。还有饭店那长的要死的菜名……
吃好没事做，溜达到使馆区。海鹏也要去德国了，（BTW，我最近N多朋友要去德国，还有吗？我准备组织北京人在德国海外分部了……）所以要去使馆办点签证事项。开始我们按照Australia，Canada的顺序找下去。结果我多嘴说了句&amp;quot;Maybe the next one is China because it&amp;rsquo;s ordered by alpha increasing.&amp;quot;。然后海鹏的语言模式就全部切换成英语了……傻掉。最后找不到，跟着帮德国佬走，找到了前面。上书“办理签证请走北门”。（原文如此，不过北门也是后门）于是我们灰溜溜的跑到后门去了。
下午找于静一吃饭，这个家伙现在在华北计算技术研究所做。也就是国家计算机质量检验中心那里。一个的送到健翔桥，结果也说不清楚那里，干脆送到桥下。其时，于静一同志还在敬业中。所以在周围乱逛。最后跟静一同志跑到花园后街吃饭，小涮锅。吃的非常不错，下次可以再考虑下。大家要是有啥也可以去试试，韩国老板开的。静一个家伙貌似在中科大给憋坏了，一劲的看MM。根据柳江陵同志的评论，说话没谱。回去宿舍（我怎么看都像研究生宿舍，连床都像……）还老看MM，置我热情的影片心理分析和蒙太奇分析于不顾。真是……</description>
    </item>
    
    <item>
      <title>萤火虫之恋</title>
      <link>//blog.shell909090.org/blog/archives/215/</link>
      <pubDate>Thu, 06 Oct 2005 05:44:04 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/215/</guid>
      <description>如果我们的生命仅仅只有一天。我们用八小时成长，三十分钟相爱，四小时痛苦，四小时甜蜜，剩下的时间陪你老死。</description>
    </item>
    
    <item>
      <title>我只在乎你</title>
      <link>//blog.shell909090.org/blog/archives/214/</link>
      <pubDate>Thu, 06 Oct 2005 01:36:29 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/214/</guid>
      <description>如果我不曾离开，一直在你身旁守护，我是否就能拥有你。如果我不曾回来，永远不再见到你，是否就可以逃离。然而生命中没有如果，因为离开，我失去你，因为回来，我爱上你，因为你，我无法逃避。</description>
    </item>
    
    <item>
      <title>北京全记录</title>
      <link>//blog.shell909090.org/blog/archives/213/</link>
      <pubDate>Tue, 04 Oct 2005 05:39:27 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/213/</guid>
      <description>贝壳不日将在网络上公布在北京的整个情况，现在先发广告。在拨号使用中很贵哎。</description>
    </item>
    
    <item>
      <title>椭圆曲线算法</title>
      <link>//blog.shell909090.org/blog/archives/212/</link>
      <pubDate>Wed, 28 Sep 2005 15:22:17 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/212/</guid>
      <description>frist of all, today is google&amp;rsquo;s 7th brithday. Happy brithday.
这篇是接上篇windows版本论的，主要讲述windows的SN算法和椭圆曲线算法。
windows的SN长度是25位，大家都知道了。但是大家可能不知道，windows的SN是base24的
UUCode算法的结果，所以里面应该只有以下字符BCDFGHJKMPQRTVWXY2346789。如果有别的就不用试了，肯定假的。在UUDecode后应该有114bit的数据，其中只有31bit的有效数据，我们称为data。
具体椭圆曲线密码体系就不说了，大致来说，和RSA一样，是属于非对称密钥体系。RSA是利用大质数分解构造的陷门函数，椭圆曲线利用的是二次方程的整数解。应用方法说明如下：
先利用data和private key经过SHA-1算法hash出一个hsah，取28位。
利用data和private key经过椭圆曲线算法得到sign，55位。
将(data, hash, sign)三元组UUCode出SN。
SN上面算法如下：
用SN做UUDecode得到(data, hash, sign)三元组。
利用sign和hash可以求出private key。（贝壳这里有点看不懂） 利用data和private key经过SHA-1算法hash出一个hsah，取28位。
效验private key。
我们的破解程序很明显在根据public key求private key，正好是要算死的那种。幸好微软为了考虑用户输入SN的麻烦，所以sign才55位。否则我们这辈子休想算出一个号来。</description>
    </item>
    
    <item>
      <title>论windows的版本</title>
      <link>//blog.shell909090.org/blog/archives/211/</link>
      <pubDate>Wed, 28 Sep 2005 05:00:35 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/211/</guid>
      <description>一下资料基本是按照我脑子里面的记忆整理的，对于大家选用OS可以当做参考。不过不对不要说我不负责，把资料email我份我改就是了。
1.windows1.0版，1986年出品，有人用的话给我备份一个，收藏用。
2.windows3.2简称win32，此版本不是32位，不要搞错。现在基本用于磁盘启动的系统修复盘，不知道的请去无忧启动论坛。
3.windowsNT4.0以下，用于以前的服务器，和novell并称。目前不多用。
4.windows95，就是chicago。微软得意之作，奠定OS界destop应用霸主地位的产品。分两个版本，目前已经全部停止支持。
4.1.windows95，95年出品，sn固定，根本不用破解（事实上我连干吗要sn都不知道……）。
4.2.windows95OEM2，OEM版，97年出品，俗称win97。因为不是所有硬件都可以跑所以没有正式release。
5.windows98，称霸五年的重量系统。具备所有操作系统特性（唯独除了“她是个独立系统”），流行时间非常长。当前还在很多旧机器中运行，虽然已经停止支持。她的API被纳入win32本地子模块（CSRSS支持）的标准API群。详细论述请看Jeffery
Richter的Advanced windows programming。基本分三个版本。
5.1.windows98 frist
release。最初发布版，版本号忘记了……SN很有特征的。
5.2.windows98 2222A版。最流行的版本。
5.3.windows98 第三版，其实就是2222A集成了最后的所有补丁。
6.windowsME，不是Mobile Edition，而是Millionium
Edition，千年版本。可能为了千年虫发布的吧。不过太过花哨，兰屏满天，贝壳用了不久就换回win98了。目前已经无疾而终。
7.windows2000，windows的标准版。其后的所有版本其实都是修改版，例如XP版本号5.1，2003版本号5.3。（表问我5.2哪里去了，那个应该在上面，是2222A）具备当今所有成功OS的特征，独立OS（总算去了dos了……），微内核消息系统。多层驱动模型，抽象硬件层，高级网络支持，多子系统，兼容POSIX（不过从来没听说有人用过噢），com和RPC……等等等等。具体分四个版本。主要有SP2和SP4两个补丁版本。
7.1.windows2000professional，号称专家版，其实个人用的啦，偏偏小孩的，目前SP4还支持中（快停止了吧……）。
7.2.windows2000server，服务器版本，支持二个CPU，SMP。4G内存，高级并行能力等等……主要用于小型服务器搭建和AD的Directory。
7.3.windows2000advanced
server，高级服务器版，贝壳的版本。基本和上面一样，不过管理功能好点。
7.4windows2000DataCenterServer版，目前无中文盗版。贝壳有幸拿到过英文复制版，好激动阿……这个东西的竞争对手一般是AIX或者Solaris之类的。支持64CPU的SMP，有Culter能力，多少G的内存忘记了，还有OOXX的N多强大功能。可惜无论多强劲，一旦给服务器装上，三天两头在server上面看到兰屏一定很好玩……
8.windowsXP，目前用的人最多的版本。MM比2000好很多，不过界面还是太花哨了。要界面花哨，学习java的awt和wsing就好咯，要你M$插嘴干吗？这个比以前多了一个激活的东西，关系到使用和升级，麻烦的要死。基本分SP1和SP2两个补丁版本，Home和Profrssional两个发行版本。发行版本差异基本没有，就是微软小气，限制了功能而已。其实说来上面的2000中前三个版本也是一样，除了windows2000DataCenterServer使用专用内核外，别的只有注册表差异而已……
8.1.原版激活版，用标准SN安装的XP可以用三十天，在此时限内用算号器计算出号码，再用批量验证器验证。得到的SN如果是005-008子段，没有被M$封锁，就可以再安装成为原版激活版。以后使用连M$都认不出来，只要不是太多人使用导致被封锁……号称最完美版本。
不过windows的SN是椭圆曲线算法的（类似RC系列），当代计算机九分钟算一个出来，平均一百个中一个能用的……也号称最麻烦版本……
8.2.windowsXP俄罗斯破解版。要说俄国人的hacker水平就是强，kaspersky的破解就是俄国出品嘛，windowsXP最早也是，StarForce也是。哎……中国阿……
离题了，说到哪里了？对咯，俄罗斯的破解其实是修改文件，用于SP上面就要出问题。俄罗斯破解的SP1或者SP2都是强制修改版本号的结果。你自己看看文件就知道了。
8.3.windowsXP联想版，需要修改BIOS打上联想的标志。NND我自己养猪干吗给你按戳，不用……
8.4.windowsXPVLKSP2版，也称为大上海政府版，注意在DVD上安装时容易出问题。由于是用于批量安装的，没有SN，也没有激活，当然，更新也是有限的……
9.windows2003，M$用于服务器的版本。同样是要激活的，不过没有用过所以知道的不详细。大致来说有Reset5.0，按照服务注册的激活方法。俄罗斯破解（又来），原版注册。具体情况只有微软晓得了。
10.windowsPE，Pre-Installnation
Edition。是用于光盘启动等等的超微型版本，一般使用XP内核。ERD拯救系统和snoopy等等就是基于这个系统。这个内核用于在光盘等地方启动一个超微缩的NT系统，然后可以从容的挂载NTFS，执行安装等等。
11.windowsCE，这个是用于嵌入式的版本，有至少四个版本（我知道四个）。一般用于PDA，叫做PPC（Pocket
Personal Computer）。贝壳有幸用过……不好用……
11.1.windowsCE最早的版本，没啥玩头啦。
11.2.windows Mobile 2003，我现在用的版本。
11.3.windows Mobile 2004，先进噢，没用过，系统限制没法升级。
11.4.windows Mobile 2005，听说而已，我没有亲见。
总算结束了，目前微软还没有新的产品挤压我的脑浆……</description>
    </item>
    
    <item>
      <title>RTD of java</title>
      <link>//blog.shell909090.org/blog/archives/210/</link>
      <pubDate>Mon, 26 Sep 2005 07:04:12 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/210/</guid>
      <description>Everyone who use VC++ knows that VC++ have a Run Time Debugger in it. And you can watch assemble code of you program or even ofcommon library code. Farther, we use Ollydbg or softice or something like that which is called Run Time Debugger to track the program. Or looking assemble code, enumerate window handles or some other handles, searching stack for something importent like password. In a word, you can do anything you wanna.</description>
    </item>
    
    <item>
      <title>五个怪癖</title>
      <link>//blog.shell909090.org/blog/archives/209/</link>
      <pubDate>Wed, 21 Sep 2005 23:18:57 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/209/</guid>
      <description>最近看大家自曝怪癖之风日行，我算比较迟钝一人。所以就在尾巴上凑凑热闹，拿几个怪癖出来开涮。
一，玩电脑，学周易。这两个东西号称是一脉相承，不过我看一起玩的鲜有人在。别的不说，光六四卦名称念念，乾坤坎离震艮巽兑……您全念下来了吗？
二，编程癖。常人有说拳不离手曲不离口，我吃这行饭天天写是正常的，不正常的是不写的时候。经常会习惯性的焦躁，不知道该干吗。非要隔点时间整点程序出来设计才正常……莫非又是一种强迫症如同减肥强迫症一般……
四，不会数数，如果您没有当场发现这个问题的话请立刻联系北桥神经病院……
三，阅读。阅读不是啥毛病，不过读到我这个份上就难说了。一般人读书都是找啥红字啦，巴黎圣母院啦来读。我读是也读啦，不过深觉不过瘾的同时，顺手读了读西区柯克读了读红楼读了读琼瑶读了读言情读了读黄色读了读玄幻读了读周易读了读奥塞罗读了读哈姆雷特读了读死亡书。
五，流浪癖。静想着去西藏台湾南极巴黎埃及新加坡转转。目前来说是没钱，将来来说是没时间。不过我向来对于家的概念淡薄，没有啥安定感。也许是成长经历的关系吧。</description>
    </item>
    
    <item>
      <title>离校手续</title>
      <link>//blog.shell909090.org/blog/archives/208/</link>
      <pubDate>Fri, 16 Sep 2005 00:20:04 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/208/</guid>
      <description>不做过不知道辛苦，今天实际操作了下离校手续，才明白到底有多难。
不明白的我先说下流程吧。先拿四联单，单位盖章个人签字，然后去学校就业中心做见证，到学院里面拿毕业证。去单位复印存档毕业证，去北京联系人事局，去交大就业中心拿介绍信，去上海高校就业中心去换报到证。然后用白单去交大档案馆转档案，兰单和户口迁移证去北京人事局开证明。拿人事局证明去公安局去换同意书还是迁移表格，最后在当地派出所落户。然后在派出所打户籍证明，拿到上海来和四联单，报到证，毕业证，体检表，住房证明去开居住证。再拿居住证去报道办录用……
大家明白了吗？明白了我详细解释每项的做法和过程……</description>
    </item>
    
    <item>
      <title>今天累死了</title>
      <link>//blog.shell909090.org/blog/archives/207/</link>
      <pubDate>Wed, 14 Sep 2005 03:39:42 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/207/</guid>
      <description>今天做javabean的第一个例子，累了个半死。先去DiabloII，等等再写。
OK,大致来说，今天算一个不错的日子。先是jsp示例跑起来了，还有整个的环境基本也熟悉了。用起来比较方便。（注意我说比较，因为混蛋tomcat经常要重起）。而且用户管理系统作为例子也可以使用了。先恭喜下。
不过今天累了个半死，到最后全是接口不严谨导致的错误。大小写，拼写错误，空格，转义符。搞到最后完全在拼debug能力。痛苦的要死。回家的时候还遇到杨浦大桥堵车，结果……堵了半个多钟头。</description>
    </item>
    
    <item>
      <title>Excel财务统计</title>
      <link>//blog.shell909090.org/blog/archives/206/</link>
      <pubDate>Mon, 05 Sep 2005 05:44:41 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/206/</guid>
      <description>最近自己赚钱了，所以要管理自己的开销了。用Excel做了一个财务统计系统，比不上专业的财会，不过至少蛮好用的。有兴趣的可以留个话，我Copy你份，保证好上手。
主要分两个部分，一个是财务明细，一个是财务报表。只要在明细里面填写上每笔收入支出的日期和类型，并且再填写用途和备注。报表中的宏就会自动统计所有类型的收支，自动算出每月收支，并且计算累积资金。（就是你现在手里应该有多少钱啦）然后还会自动计算支出的模式（例如消费多少比例，再投资用于学习多少比例等等），和收支比。最后就可以看出自己的钱是怎么花出去的，还有手头是否比较紧，或者是否可以考虑多花点钱或者把活钱存银行等等。
目前偶的平均每月收支比是0.6，而其中用于学习的开销只有一成……</description>
    </item>
    
    <item>
      <title>列一下我要学的东西</title>
      <link>//blog.shell909090.org/blog/archives/205/</link>
      <pubDate>Sun, 04 Sep 2005 10:31:40 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/205/</guid>
      <description>到了单位也不能固步自封，要学的东西太多，让我列个表然后慢慢学吧。
1.java编程技术，单位里面的吃饭家伙。
2.UML建模和模式，也是吃饭家伙。
3.linux使用维护，服务器组建要用的。
4.linux bash脚本编程，深入linux的台阶。
5.COM接口编程，算是一个漏洞吧。
6.项目管理，以后的大方向。
7.linux软件编程，兴趣吧。
8.linux内核分析，含金最高的东西，对了，还有minix。
9..net编程构架，多个路子。
上帝，我领悟学海无涯的意思了……</description>
    </item>
    
    <item>
      <title>IBM开发者大会</title>
      <link>//blog.shell909090.org/blog/archives/204/</link>
      <pubDate>Fri, 26 Aug 2005 21:44:18 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/204/</guid>
      <description>因为某个时间表上无法预料的意外，公司让我出席了IBM开发者大会。具体来说是这样的，Boss和Professor钱was surposed 2 attended the meeting。但是Professor钱临时出席了另外一个由Collage driver的meeting。所以公司内部就剩下了一个技术人员，不幸那就是小弟me。
总体来说，这个会议很无聊。头天早上是入场和checkin。每个人领了一个小本本，
which IBM call them 胸卡。it&amp;rsquo;s sounds string, isn&amp;rsquo;t it？里面有整天的安排，先是致辞，然后是两个大人物上去分别解释管理和技术的总理念。总的来说，这次等于是Rational系列产品的宣讲会。里面充斥了Rational系列产品解决问题的案例，无聊。中午的午餐在恒隆，咖哩羊肉，很好吃。可惜速度慢了点，可能是人太多了，造成瞬时响应延迟。然后下午是重头。讲解RSA的三个层面。我开始还当是RSA加密算法，后来发现不是。而是一个Rational家族的产品，构架平台吧，好像。听的我困的要死，不过主要思想明白了。大致来说就是两点，一个是逐步精化，追求可变的循环开发过程。一个是由顶至底，层层西分的构架模型。而IBM提供的就是自动化工具。
简单来说，首先由需求分析出业务模型，然后由模型建立UML的计算无关模型。再下去就是平台无关模型，加入了业务中的细节和计算。然后是平台相关模型，由转换师协同IBMRSA转换成一个平台（例如java或者net）相关模型。最后编译器转化成代码（这个也是当做模型的）。最后利用工具做黑盒和白盒测试，得到性能参数和业务吻合评价，再次调整业务模型，重复流程。这样在两个协调人员的帮助下，由eclipse贯穿，经由系统分析师，建模人员，转换师，测试工程师（还有一个我忘记了）叠代循环，得到最终的代码。
最后节课是电子商务的，我看是中级课程，没去。直接跑去楼下的上机区去玩linux，IBM用的是Redhat或者SuSE，看别人修系统密码结果被VMware虚拟出来的sda1弄的乱没办法。好玩。不过收获蛮多的。然后直接跑去了太平洋八百伴那里的分店，去买电脑，公司采购。CIV2.4D533CPU，KM512MDDR533RAM，ASUSP4S865-XMainBoard，GeForce4FX5200 128M128bits，ST7200.80G2M，嘿嘿，不错吧。4000，带送货。
然后今天起太早了，本来有来就不错了。我先去了一个UML2.0的讲解会议，总体来说就是元素建模嘛。然后是.net framework下面RSA的支持，不过不知道怎么讲着讲着变成黑盒白盒测试了。最后是软件工程和软件关系工程，不过怎么听都在宣传他们的某个产品RPM，完全和理论实践无关阿……无奈。
中午吃午饭，还是老地方，咖哩羊肉，这次速度快了。然后换手杨总进去听管理，我下午跑到公司，安装系统去。结果我和小马统统down在了installnation of winXPSP2VLK上海政府版上面。后来发现联想OEM的是好的，我Ft。连通了交换机，上网加了N多东西，最后基本全部完成了部署，就是死在了VmWare的安装上面。真见鬼，明天用自己用的版本上去试试。</description>
    </item>
    
    <item>
      <title>Value Of Knowledge</title>
      <link>//blog.shell909090.org/blog/archives/203/</link>
      <pubDate>Thu, 18 Aug 2005 20:26:49 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/203/</guid>
      <description>纯知识具备价值吗？也许对于我这种好奇心强烈的人来说是的。但是纯粹的知识不会变出金子，即使他可以，也需要人的参与介入。所以知识的价值在于加强人的效率的发挥。当然，作为等效的一个作用，降低知识水平要求或者降低知识结构要求也是其价值。因为知识水平越低，人力资源越丰富和廉价。但是如何衡量一个知识的价值呢？能将人的能力发挥的更大的知识就更具备价值吗？
我们先这么假设，如果需要的知识和技能不变，在付出同样体力，脑力和精神压力的前提下，社会平均意义上的生产力被某个知识提升了X倍。则认为这个知识的人力倍增系数为X。那么评判一个知识的最高价值M，可以考虑将知识的倍增系数乘上社会生产规模中的人数。不过事实上情况远远比这个复杂，知识推广中有推广成本，社会中可能对某个知识产生排斥，从而引起无谓浪费。还有如果知识掌握者垄断知识造成的非公平竞争，以及两个不同的知识垄断对抗造成的无谓损失。所以知识创造的价值要远远小于这个值，我们假定这个值比上上限为Alpha，那么Alpha肯定小于一。
我们先暂时停止对知识单一价值的考虑，让我们考虑下知识的社会价值。我们知道，社会中一般情况下稀缺资源是土地和生产资源，局部上可能是资金和管理，基本上不缺少人力。一般所谓的人力稀缺都指的是高知识水平和特定知识结构的。记得知识的作用吧，放大人力。那么好，我们现在相对过剩的人力资源再加以放大，会产生什么现象呢？就是失业增多，社会生产增多。换言，也就是贫富差距增大。
知识是如何造成贫富差异的？我们分析一个极端症状。假定我们某个发明，可以让世界上所有工人失业，那么理论上说，这个发明的所有者可以拿世界上所有工人的雇佣工资。事实上应该比这个少，因为发明的推广成本，社会效应成本等等。但是这就造成了无数的贫穷者和一个超级富翁。事实上，由于技术革新而造成的不断失业被两个效应弥补，一个是更多的人力资源进入了产生技术革新的领域，而不是生产领域，从而造成了工人相对减少。另外一个是不断的失业，政府拿走企业的部分利润（这个也有从发明者手里抽去的部分）去补贴下岗工人。前者正是现在知识爆炸的原因，因为我们从以前必须提供自己必须的生活用品的时代，进化到了一个我们可以在一生中提供数个人的生活所需的时代。（也许你感觉不到，因为这个根本不会反应在你的工资上，只是你的生产物品的价值远远高于以前）所以我们有更多的研究者，也就有更快的发展速度。后者正是现在发达国家的现状。
由于知识的人力加强作用，所以劳动力的作用被弱化了。所以更多的人正在争抢做知识的拥有者。作为集体，也可以争抢做资源的拥有者。因为资源和土地的相对稀缺被扩大了，所以他们的价值增大了。换作那个“无工人”的例子，国家的补贴肯定是按照资源分配给个人的。如果一个国家没有资源，那么这个国家里面的人肯定要饿死。而一个国家资源很多，那么这里面的人可以坐吃等死。如果知识的拥有者无法拥有资源怎么办？一般来说，知识的拥有者是拥有相对强大的武力的，只要借口接管资源所有者就可以。
但是我们可以预言，按照科技的发展，多数大规模使用的资源都会被廉价的解决掉。例如能源，金属等等。所以资源不是王道，知识才是。虽然从以上分析角度，我们往往会看到知识只是造成了失业，贫富差距加大，战争等等。
亚当吃了智慧果，所以人类犯了原罪。</description>
    </item>
    
    <item>
      <title>链式网络协议封装</title>
      <link>//blog.shell909090.org/blog/archives/202/</link>
      <pubDate>Fri, 12 Aug 2005 22:51:47 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/202/</guid>
      <description>今天设计了一个通讯接口，准备运行在TCP/IP上。实现反扫描，反通讯分析，反IDS，反嗅探。其中反扫描需要使用Sniffer来做侦听诱导或者是反穿诱导（我更倾向后者），反通讯分析需要封装整个协议到ICMP层或者一些比较不容易被察觉很跟踪的协议层上去，还要兼顾反IDS的行为分析。最后反嗅探需要数据加密。这些能力还要能动态叠加和消除，这样只有设计一个动态的通讯接口了。
我先设计了一个虚基类，保证用于每个子类继承后可以自动产生链。通过链式规则，我们从上层将数据层层递推。任何层都可以发出数据，并且终止链的递推。基类有六个虚方法，链接，监听，发送，接收，判断数据进入，关闭。构造函数可以接收一个基类指针作为参数，并且传递给基类构造函数。基类构造函数将会自动产生链，并且加以管理。每次我们调用某个方法时，虚方法会自动按照链的结构依次被调用。同时基类的管理作用也作用于缓冲区，使得所有子类构成链后共享同一个缓冲。当我们设定缓冲并且发送时，最上层的发送函数就被调用，然后处理缓冲内容（如果这个子类是反嗅探用的话）。然后调用下个链上的节点，下个节点继续处理。每个节点都可以决定是否要终止调用链。
我正在编写并且测试整个系统，如果运行良好的话，我准备将虚基类的代码和部分的实现代码公开。可能数据加密方法不会公开（我可能会使用一些比较巧妙而非严谨的方法来保证安全）。使用者可以利用整个接口来收发数据（即使不是网络通讯），并且自行扩展能力。当然，作为普通的网络通讯接口，这个东西也是比较好用的。</description>
    </item>
    
    <item>
      <title>论反利益潜规则的补偿</title>
      <link>//blog.shell909090.org/blog/archives/201/</link>
      <pubDate>Thu, 11 Aug 2005 22:36:25 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/201/</guid>
      <description>我们认为，人类是符合利益驱动模式的。如果一个人要做某个事情，那么必定有某种利益。也许是经济，也许是别的。或者仅仅是让自己觉得更好，例如献血（当然，在中国现在献血已经不是一种义务而更多是种功利行为。），或者资助失学儿童。
但是，在社会中，有一类的行为，是反利益的。这种行为不为当事人带来任何好处，并且没有任何明文推进这种行为，或者禁止相反的行为。例如，盗窃是可耻的，或者，再嫁的女人是可耻的，等等。并且，不但我们自己会被禁止这种行为，我们还会推进别人的这种行为，或者阻止相反的行为。这种行为我们称之为反利益潜规则。
举个例子来说，我们认为万般皆下品，唯有读书高。学而优则仕，当官好办事。那么，我们就推行了两个不符合利益的行为，一个是按照学历而不是能力来任用官吏，还有一个是官吏的权利是为了个人而不是群体来服务的。我们知道，这两个行为都不是有利的，但是我们确实的推行了这两个行为。其中不止因为权利的管理者和权利的所有者相异导致的权利集中所致。我们，作为权利的所有者，也推行了这种潜规则。想想当一个人没有学历而当官时，社会的评论。
没有利益的潜规则，必定存在某种个人的动力。我们认为反利益潜规则的动力有二。一个是人类的盲从现象，一个是报复和导向意识。首先我们有跟随大流的趋势，如果没有涉及切身利益，那么我们很容易对无辜的人喊过分的话。然后是报复和导向。大致就是，别人都让我这么做了，那么我一定要让别人这么做。当自己获利被规则阻止后，自己就会主动去阻止别人违反规则来获利。当自己通过某个规则获利了，那么就会推行这个规则。所以一旦规则存在了，那么他就不容易被打破。
这两个动力的结合，使得某人在推行一个规则时，一旦对某人实行了。并且这个规则具备延递性（就是说受者可以转换为施者，作为反例，如果超市店员有多收钱的潜规则，由于买者不会做超市店员，潜规则链就会断裂）。那么这个人就很可能成为规则的下个拥护者，这样规则的链条就产生了。同时可能产生大量的追随者。并且，如果规则形成很大规模，还有两个附加现象。规模保证和社会意识。所谓规模保证，指，如果一个小的规则，那么就有可能被违反，从而不会获得广泛的推行。而一个规模化的潜规则，则很难抵抗。例如如果我们说新的员工可以被戏弄，并且在很小的员工中实行。那么很可能造成新来的员工反抗，而我们是失败的一方。而如果整个公司有了这种风气，新的员工是不可能实行反抗措施的。同样的道理作用于社会意识，如果一个强潜规则大规模长期作用，那么我们很容易认为这个规则是天经地义的。例如君权神授，或者三纲五常等等。只要由君主去实施了，下个君主多数也会照做。所以打破这种潜在规则是很苦难的，因为多数人已经将这种潜在规则认为是一种常识，从而拒绝加以考虑或者抵抗。
由于以上几者对于反利益潜规则的补偿，使得反利益潜规则可以长期存在。并且作为一个群体行为使得群体趋于反常。</description>
    </item>
    
    <item>
      <title>ViaVoice初步试用评估</title>
      <link>//blog.shell909090.org/blog/archives/200/</link>
      <pubDate>Mon, 08 Aug 2005 23:20:10 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/200/</guid>
      <description>今天Boss打字累了，准备在公司内部加个加速输入的方法。说实在我对此没有啥想法，对于我来说打字说不定还比说话快。但是总不能因此就和Boss说以后我来打字吧。所以大致想下来有三个方案，一个是ViaVoice，一个是扫描笔，一个是写字板。
扫描笔看来是最好用的一个，只要不是手写体，一扫全部搞定，没有要动脑子的部分。但是也只能用于一般印刷体，手写体花体啥的都不行的。成本也是最高的。
其次就是写字板，不过这个东西纯属鸡肋。写字的话一般人还不如打字，只有老头老太这种学不会打字的人才考虑写字板。虽然还有签名画画的辅助功能，不过有多少机会能用到呢。
最后就是ViaVoice了，成本可高可低。（IBM原装USB话筒啥价钱啊）一般来说是最廉价的快速输入方法。不过就是还要费心念字，而且要经过语音训练。公司鉴于经济价值上的考虑，决定使用ViaVoice。（说明白就是便宜啦，毕竟不好用当二十白花还可以换别的。要用了扫描笔不好用也得用了） 家里用ED下了一个ViaVoice9.1Pro的光盘版，然后安装，现场就有一个高级话筒。经过将近一个钟头的测试，试用和训练。我总算掌握了成功让ViaVoice识别九成以上文字的方法。简单来说，就是说话要靠近话筒！每次我嘴向后移动一厘米，识别率立刻降低两成，我Ft……在离话筒一厘米左右，说话可以直接拾音但是气流又不直接接触话筒的时候效果是最好的。在良好的拾音条件和阅读速度基础上，识别率还是令人满意的。不过我很奇怪，ViaVoice的低系统耗用识别非常差，高耗用也没有增加多少耗用，为啥IBM还这么定位呢？尤其是默认还是低系统耗用……
总的来说，ViaVoice的试用结果还是让人满意的。如果正确使用，周岚的输入速度说不定尤在我上。但是如果运气不好，恐怕就……难说了。对于我们这种打字像吃饭一般的人来说，这种东西只是减轻负担的辅助工具，毕竟天天打字手还是会累的。（虽然念东西多了也会累，尤其是念那个训练文本的时候。）对于输入速度比较慢的人来说，这个不啻为一个非常好的输入手段。可惜他和扫描一样，要求你至少会一点的输入法。否则一旦出现根本不搭边的错误就无法修改了。而手写板就可以避免这点，理论上说手写板是不会遇到无法识别的东西的，除非你写的东西我都不认识。</description>
    </item>
    
    <item>
      <title>网络实施</title>
      <link>//blog.shell909090.org/blog/archives/199/</link>
      <pubDate>Wed, 03 Aug 2005 21:11:02 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/199/</guid>
      <description>最近上班了，实在很懒。回来没事做，上班没做事，累嘛累的要死，天天跑来跑去。为了拿钱阿……
很久没写过blog了，最近也没有时间研究啥技术的。就把在单位里面实施的一个网络系统描述下，权当技术文好咯。
首先是原来状况。一个路由连接外面，路由密码没有更改（太扯淡了）。内部一个10M的大HUB（还不是交换机，我可以嗅探的哦），九台机器，其中两台本本，不定量的本本随时接入。台式win2k，本本XP，结构很干净，不过补丁一个没打（汗……）。有一个服务器，主要打印使用，别的也用。OK，下面着手实施整体网络。
首先别的不说，路由密码我会放着就是白痴了。然后是一个个打补丁（还要看人家机器空不空，头痛阿）。然后用SSS扫描内部，果然漏洞少了。下面修改每个机器的配置，禁止SMB连接中的不严格现象（里面开了SMB文件共享哦，贝壳改成了允许的话使用加密形式），然后禁止客户机器的空连接和guest用户。打印服务器要打印，关闭了guest管理不大方便。这样客户上面基本没有漏洞了。
然后主机上面转换一个空盘到NTFS，实施大共享，做成文件服务器。给每个客户机做一个映射，这样基本可以将零散的文件共享集中到主机上，方便共享和备份。然后主机上面做一个FTP，路由上面开启部分路由映射进来，这样做成了远程FTP。严格来说，这样的FTP是瑕疵的，因为贝壳没有申请外网域名映射。FTP在被动方式时候发送的连接字符中IP是内网IP。如果FTP软件严格照来的话是连接不上的。但是FlashFXP等软件在PASV模式的时候只要返回数据中的端口部分，这个被映射了，所以可以正常使用。
然后在集中共享上放了很多软件，声明要装软件能从这里拿就必须从这里拿。找不到的下载安装后要放这里备份。这样削弱了软件后门的隐患。同时推荐了Mozllia，防止网页木马。使用Iris检测网络，防止内部攻击。其实这里应该放IDS的，而且应该更换成交换机，增快速度，防止嗅探。基本实施就结束了，等大家把文件整理到集成共享中，就可以备份刻盘出来了。</description>
    </item>
    
    <item>
      <title>无常</title>
      <link>//blog.shell909090.org/blog/archives/198/</link>
      <pubDate>Sun, 24 Jul 2005 23:56:25 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/198/</guid>
      <description>世界就是这么无常，种下一颗苗。人说，会得到一颗树。但是真实的世界里面，种下一颗树的结果可能是被雷劈了，然后在你不想种的地方张出个头。
人喊老吾老以及人之老，幼吾幼以及人之幼，天下大同，非攻兼爱。喊己所不欲勿施于人。恐怕已经喊了上千年了吧。我们都同意，人是一种动物。那么，按动物间斗争的天性，人为何会喊出爱这个词呢？怕是在为自己种树吧。种下冤冤想报何时了的苗，结下自己的后路。可是一如生活，种下的苗没有张出想要的树，反到经常在不要的地方张了个头。
有的人对此是反过来喊，物竞天择，适者生存。可是将来落魄漂泊时如何能忍受一身的萧索？有人明知无奈，却还只能种树。无形中形同靠天吃饭的无奈。有人以因果报应以解，可是世界即使有因果，又何尝是我们能揣测的呢？以自己的因果为世界的因果，刻舟求剑掩耳盗铃就是这种人了。
有志者不惮以数代人，试图构建一个大同。使得世界所无法贯彻的因果可以得到补偿，善有善报恶有恶报。但只要有几个关键人物在其中得到了自己没有种的树，大同世界立时便会瓦解。若要天下大同，先必天下无人为私。人类若实现大同，想必也是一种悲哀吧。
所谓大同，不过仅仅是种理想。我们一般认为为天下大同的，便是对的。是为了万民的，是高尚的。需倾天下而从之。即使自己需为天下而牺牲，亦要在所不辞。其实天下无定规，我们认为天经地义的东西，何尝不是我们加给自己的枷锁呢？例如兄妹不相婚，天下岂有天然的此种道理？此乃为了延续后代而订，若说广而流传会遗毒天下故必弃之。那无意中悉知秘密，又何必视之如蛇蝎非欲去之而后快。然而人就是无法褪去自己身上的枷锁，清末有人如此，坚持王天下必刘氏。帝王将相安有种乎？今天亦有人如此，以为位高必能，岂知富不过三泽不过五的道理。天下的规矩就是没有规矩。面对种种非我可解的因果，我何去何从？
罢了，还是搞我的计算机罢。</description>
    </item>
    
    <item>
      <title>磁悬浮列车</title>
      <link>//blog.shell909090.org/blog/archives/197/</link>
      <pubDate>Sat, 23 Jul 2005 19:58:04 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/197/</guid>
      <description>前两天小姚出国，十点的飞机。本来不准备去机场送行的。无奈去给孙Kaka和小明送钱的时候居然没带够钱，结果不去送行也不行了。查查时间，大Bus肯定来不及，坐出租过去也要50多。所以干脆奢侈一把，直接坐次磁悬浮，过过世界第一快的瘾。
说快也真的蛮快的，七点半出来，八点不到到龙阳磁悬浮站。八点二十五给小姚发了个消息说到龙阳了，三十分开车，三八分到机场，四二分已经找到人了。当时说从家出来多少时间，估计也就半个钟头的行车。如果不是时间算的太差，白白等了半个小时的话……然后一堆同学以为我开玩笑，还问是否是走过来的。（贝壳的神行功夫一流哦，和体形超不衬的。）最后拿出磁悬浮的票来，吓的N多人鬼叫鬼叫。
小姚出国的时候还真是麻烦多多，毕竟是头次，下次就好了。先是瞿感冒了，然后要喝水。接下来找不到人，天知道两个主角跑到M区去做甚，明明登机口在E区的说。还有通关时间啥的问题，零零碎碎一大套，小明的摄像机还临时没电凑凑热闹。然后通关前面瞿的行李居然超重，被迫临时拆包换重量（小姚的差很多……），还拆走堆书。勉强过关，希望他们旅途顺利吧。（貌似晚了，毕竟猥琐都到了……） 下面聊聊磁悬浮的感受吧。开始的时候非常平稳，后来速度超过300公里后有明显的震动。总的来说还是不错的，毕竟除了飞机，没有东西超过300公里运行。震动是在所难免的，飞机是通过种种方法来减轻的。转弯的时候，曲率半径和公路的三次转角曲率半径大致相当。但是转角倾斜高达三十到四十度（其实这样已经可以推算出速度了），仅仅略小于飞机。飞机这个家伙转角倾斜可以达到八十度以上，就不用说了。飞驰而过的时候东西全部都看不清楚，远处的东西还算凑合。至于啥电视上速度快了会有怎么怎么的多数是体感速度造成的主观感觉。也许飞机上看不清楚，磁悬浮可是430Km/h运行的，没有更快的车了吧。（如果你是超级汽车的试驾，当我没说）可是磁悬浮上看地面的时候只有快的感觉……没别的了。
不过说回来，磁悬浮的价钱还真是蛮贵的。单程五十来回八十，坐大巴估计是二十。磁悬浮的上座率大约是二到三成。回来的时候人比较多，不会超过五成，简直和过山车无异。如果价格下降一倍，达到单程二十五来回四十。那么估计坐大巴的人会跑过来六成以上，上座率铁定超过一百。这样回收的资金保持不变或者会更高，如此可能是比较有利的方式。不过磁悬浮的乘坐的却不方便。行李都要自己拉，居然还有X光检测……</description>
    </item>
    
    <item>
      <title>If</title>
      <link>//blog.shell909090.org/blog/archives/196/</link>
      <pubDate>Mon, 18 Jul 2005 09:37:18 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/196/</guid>
      <description>Lyrics:David Gates Music:David Gates
演唱:莫文蔚
If a man could be two places at one time, I&amp;rsquo;d be with you.
Tomorrow and today, beside you all the way.
If the world should stop revolving spinning slowly down to die, I&amp;rsquo;d spend the end with you.And when the world was through.
Then one by one the stars would all go out, and you and I would simply fly away.
If a picture paints a thousand words, Then why can&amp;rsquo;t I paint you?</description>
    </item>
    
    <item>
      <title>windows系统四、五</title>
      <link>//blog.shell909090.org/blog/archives/195/</link>
      <pubDate>Fri, 15 Jul 2005 10:27:02 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/195/</guid>
      <description>四，内核对象和句柄
调用API的过程中，有必要区分调用的目的和对象。说的通俗点，就是为什么调用和对谁调用。例如打开哪个文件，或者终止什么进程。调用的目的是根据不同的API和状态或者属性参数而变化的，而调用的对象则是根据句柄而选择的。
句柄大致分为内核句柄和对象句柄两种。一般来说，申请打开句柄时需要你传入安全令牌的就是内核句柄，内核句柄具有可继承性（inherit）。而像窗口等等东西就是对象句柄。SDK编程中，程序根据句柄的不同而操作不同对象，实现程序的种种目的。可以说，句柄和API组成了程序对下层的接口。
而在系统实现中，句柄则是某个内核对象，这个对象在系统中有个编号。句柄实际返回的多数是这个编号。大家可以申请两个句柄出来玩玩看，一般都是09XX之类的数字。从大小上看还属于NULL地址段（具体请看jefferey的windows核心编程），所以多数就是内核对象表项编号。这种一般以非内核句柄居多，因为这种句柄的特性可以从一个进程直接传递到另外一个进程。而有的则是某个在进程地址空间（这里插句，windows中进程和线程的区别可以理解成为，进程拥有独立空间和句柄，线程拥有独立CPU调度）内的某个数据块。这个块指向了某个确定的内核对象，这种句柄数字上一般大于4M。一般以内核句柄居多，进程间不可以传递只能继承。（其实也可以传递的，不过要用API主动复制，而不是Copy句柄过去了事）
五，通讯方法
通讯方法，通俗的讲，任何程序必定涉及和其他程序的通讯。windows中的通讯肯定是要通过API实现的。具体方法最简单的是消息通讯。需要对方的线程ID（进程ID没用的），或者进程创立的windows句柄。如果使用sendmseeage发送消息，接收方又是本线程创立的窗口，则将窗口处理函数作为子例调用（因为sendmessage是阻塞调用，本线程阻塞了来调用本线程的派生，当然，也只能，直接调用）。否则将消息挂到对方的接收区域去，然后要么阻塞，要么直接返回。（注意到为何sendmessage给本线程要直接调用了吧。阻塞的线程是无法通过messageloop的。）
如果不高兴使用消息，那么可以使用文件映射。这个方法本来是自虚拟内存中引入的，后来渐渐用来做文件的系统缓冲处理，也用来处理系统通讯。将一个文件同时映射到两个进程空间，则任何空间的变化会引发另外一个空间的变化。注意所谓文件的变化和虚拟内存一样，是未必写入磁盘的。使用这个方法需要注意同步问题。
另外，这个方法有个变形。可执行文件是PE格式时，文件载入内存时会自动做文件内存映射。此时设定属性，让某个section自动的作为同步映射，这样所有的自这个文件派生的进程在此section上是内存共享的。具体还是可以看jefferey的windows核心编程。
再差就是使用管道了，管道是用来套接标准输入输出的。去找找CUI界面重定向的问题就知道管道的用途了。除了定向到网络上，管道还可以定向到text框中。例如VC编译的时候……
再傻点？你两个程序各申请一个winsock通讯好咯，OLE，COM，都随便你用的阿。不过拿电脑间互相通讯的东西做进程通讯，你一定是头壳坏去了。</description>
    </item>
    
    <item>
      <title>windows系统二、三</title>
      <link>//blog.shell909090.org/blog/archives/194/</link>
      <pubDate>Thu, 14 Jul 2005 19:42:10 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/194/</guid>
      <description>二，从程序到内核 程序是被CreateProcess载入的，中间过程就略去不说了。不过程序为何可以在不同系统上运行呢？
首先每个程序会调用一系列的库函数，具体视使用语言和编译工具，编程框架而定。程序或者框架会调用系统的API，这个部分是SDK编程的内容。具体调用哪个API，在什么DLL里面，传入啥参数，在所有windows系统中都是一样的。不过每个windows系统对于具体实现就完全不同了。调用的API会在程序文件中载明。然后系统会将每个DLL载入进程空间，于是就实现了具体和系统的链接。每个DLL最终都会调用int 2eh（或者SYSENTER）陷入系统来完成各种使用。这部分就是内核的事情了。由刚刚的程序载入（每个系统都相同的动作），到内核实现（每个内核都不同的事情）。中间具体的过程就是系统附带的DLL的所完成的。
三，MM，不是美媚
MM是MemoryMangermant的简称，而非美媚。windows的内存管理在程序来看是透明的，因为对于程序来说，地址空间是连续的。主要原因是系统通过段寄存器索引了某个表，通过此表来映射你的“连续”内存地址到真实内存地址上来。当然，也有可能映射到了硬盘上的某个区域。Windows的每个内存块都对应某个硬盘上的区域。不过如果在内存中，则区域保留等待写入。如果不在内存中，需要的时候读出来而已。在你“透明”访问内存的时候，段寄存器会访问这张表（实际一般不访问，表的项目会在首次访问的时候载入某个缓冲用的快速寄存器），而后映射到真实的内存地址。如果“真实”的内存地址不存在，则会发生异常。windows的异常捕获会直接将硬盘内数据调入，然后继续程序执行。所以在访问内存过程中，程序看来是“透明”的。</description>
    </item>
    
    <item>
      <title>病毒编年史-当代</title>
      <link>//blog.shell909090.org/blog/archives/193/</link>
      <pubDate>Thu, 14 Jul 2005 00:15:35 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/193/</guid>
      <description>现代病毒的最大特征是混合化，商业化。可能同时具备文件病毒，木马，蠕虫的特征，很难界定其归属。也可能具备多种传播途径，在多方向传播。同时可能具备多个部分分别载入。病毒的意义也渐渐从无明确的多种意义渐渐转向商业化。
AD 2001.9.18，混合代码出现，代表作 W32.Nimda，作者未知。
蠕虫通过电子邮件发送自己，搜索开放的网络共享，试图将自己复制到未打补丁的或已经有漏洞的 Microsoft IIS 网站服务器上，是一种既影响本地文件又影响远程网络共享文件的病毒。
贝壳评论：
可以看出，蠕虫同时具备了邮件蠕虫，漏洞蠕虫，社会工程蠕虫三者的特征。并且蠕虫会在系统中留下一个后门，这又具备了木马的特征。这正是现代病毒非常明显的特征。
AD 2002.5，蠕虫中的病毒，W32.Klez中的W95.CIH.1049。上面曾经说BackOrifice2000感染过CIH，这次CIH又感染了W32.Klez蠕虫，W32.Klez的大规模流行使得CIH卷土重来。这是首次由大规模蠕虫引起的病毒流行。
AD 2003，IM混合型病毒大规模流行，代表作 QQ尾巴。
贝壳评论：
QQ尾巴是比较有趣的混合型IM病毒（虽然很多人不这么认为……）。通过IM传递一个消息，驱动你去某个网站访问，然后通过IE漏洞使你中毒。结合了IM传递，AcitveX或者脚本病毒，蠕虫三者的特征。这表明现代的病毒正逐渐融合各种技术，各个有害代码的严格分界线正在渐渐消失。
IM病毒有很多有趣的分支，无论技术如何变革。其核心都在IM传递的语言如何驱动人获得病毒。最近有直接发送病毒文件的例子，还有通过URL用户名结合的特定传染的（http://www.sina.com.cn:80@18.com/1.scr）。甚至有你回复是否中毒时对方自动应答没有啊的例子。这个过程中一般用的是社会工程攻击的知识，通过人的心理去驱动人。
AD 2003.2，W32.SQLExp.Worm SQL注入病毒，相信众多网管一定感触多多。
AD 2003.8，W32.Blaster.Worm 史上赫赫有名的“冲击波”病毒。步了红码的后尘，也是一个蠕虫。不过2K/XP双溢出的特性加上2K中一分钟重起的“有趣”特性造就了它的名声。曾经有人说病毒自动设计了一分钟重起，防止更新补丁。根据贝壳的分析，这个应该是溢出失败导致系统进程关闭，而后系统自行决定重起的。这种防止下补丁的方法既不实用风险也大，而且对于病毒传播没有贡献。只有呆子才用他。
AD 2003，“无法删除”的3721。3721是一家公司的网络实名解决方案。为了防止软件被删除，该公司使用底层驱动阻止核心文件和注册表键值被删除，导致系统效率低下。
老实说我对诸多解决方案没有啥兴趣，严格来说左解决右解决就是为了抢实名到底谁用的问题。但是这个事情引申出来一个问题，无法删除是否是恶意代码。如果说非恶意吧，他确实的违背了用户的意志。要说恶意吧，谁能说防删除就是恶意呢？如果这么说，防修改的保护卡是否是恶意呢？同时，这个技术也为诸多病毒提供了借鉴。可以想见将来的诸多病毒左右删不掉的场景，届时恐怕就头痛多多了。
另外贝壳插句话，谁写个linux引导专门对付3721之类的东西阿？我已经被问的脑袋大死了。这个东西DOS下删不了，上NTFS4DOS是ReadOnly的。linux支持了NTFS的RW挂载恐怕内核在软盘上已经放不下了，那就是说要光引导或者是USB引导咯……多软件也可以考虑。哪位大大，出一个吧。
PS.后记，病毒编年史的更新曾经一度中断。最后贝壳偶尔想起是否是文字中的某些病毒特征码导致的呢？结果果然如此，哎……此天意也（旁：又开始打太极了）。</description>
    </item>
    
    <item>
      <title>病毒编年史-近代</title>
      <link>//blog.shell909090.org/blog/archives/192/</link>
      <pubDate>Thu, 14 Jul 2005 00:05:58 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/192/</guid>
      <description>近代病毒的特征是多样化，结合化，跨平台。对社会工程的依赖大于对技术问题的依赖，传播中对于网络的依赖大于对软盘的依赖。种种病毒多数是通过社会工程方法或者漏洞来传播的。此时也大规模的兴起了后门运动。满世界飞的后门造就了很多Cracker，有害代码的破坏力展露无疑。
AD 1998，木马后门首次为大众所知，代表作 Back Orifice，作者 死牛崇拜(Cult Dead Cow)。
贝壳评论：
1998年真是电脑界风云之年，win98出世，BO发布，CIH流行，java病毒出现，到处充满了生机（如果这个算是生机的话）。BO作为木马，不是最早的一个。但是作为近代木马的鼻祖，BO当之无愧。木马自Unix产生以来就出现了，最早是管理员用来方便自己进出的后门，或者诱骗套取密码用。BO发布的木马可以在win9X系统上开个洞，使得别人任意操控机器。当今世界九成以上的破坏性代码（或者说恶意代码），均结合了这个特点，在侵入别人的机器后会留下后门方便作者进出，或者窃取用户各类密码。
说到死牛崇拜，还有个好笑的事情。在美国拉斯维加斯第七届“黑客”周年大会上，黑客组织“死牛崇拜” 推出特洛伊木马型黑客软件Back Orifice 2000。然而15日“死牛帮”证实其推出的正式版“BackOrifice2000”软件光盘确实感染了CIH病毒……
AD 1999，中国木马兴起，代表作 glacier，作者 西安电子科技大学 黄鑫。
冰河为国内相当优秀的木马，即使在国际上也非常有名。现今很多出名的黑客都是利用冰河迈向通往黑客道路的第一步的。黄鑫的冰河让很多人体会了做黑客的快感，更让很多人了解了网络安全的重要性。此人目前为网站“安全焦点” 的工作人员，水平极高。在安焦论坛上经常可以见到，大家不妨去过把名人瘾，要两个签名来留念……
AD 1999，Millenniu蠕虫出现，作者未知。这是迄今为止最没有名气的一种病毒，只有一个人报告受到感染。因此此病毒入选最没有名气病毒奖……
AD 1999，邮件蠕虫兴起，代表作 W97M/Melissa，作者 David L.
Smith。不要被骗了哦，W97M中指的是win97。时间大约是99年（贝壳在symantec的安全响应中心99年才找到它的资料）。
AD 2000.5，邮件蠕虫和脚本病毒的结合，代表作 VBS.LoveLetter，作者未知。
AD 2000.10，嵌入式系统病毒出现，代表作 Palm.Phage.Dropper，作者未知。这是一个感染PlamOS的病毒，感染能力很小。但是代表嵌入设备病毒首次出现。
AD 2000.11，PHP网页病毒出现，代表作 PHP.Pirus，作者未知。
AD 2000，史上最出名的本地漏洞出现，代表作 win2000，作者Bill.Gates。
贝壳评论：
windows2000的输入法漏洞可以号称是计算机史上最出名的漏洞了，直到去年还出现了一种新的表现形式。输入法漏洞以其简洁有效，立竿见影而著称。任何人都可以轻易学会，从而进入不是自己的系统里面去。漏洞总共有三种表现形式。一个是登陆时使用输入法，察看帮助，Internet属性。一个是登陆是等待，直到KV系列杀毒软件跳出来（怎么又是你）。一个是在特定输入法中按特定键序列，导致缓冲溢出。（这个去年才出来） AD 2001，史上最出名网络漏洞，UNICODE绕回漏洞出现，代表作 IIS5，作者Bill.Gates，发现者NSFOCUS。
贝壳评论：
这个漏洞是下面的红码的基础，红码在窜入新的机器前就扫描此漏洞。并且在远程下载病毒执行。漏洞简单来说就是在UNICODE解码的时候检验不严格，导致可以执行任何一个同盘上的文件。严格来说，如果在IIS或者NTFS安全属性上设置过的话，或者使用了安全策略和IPSEC，漏洞都不会作用。但是漏洞之所以出名就是因为连IIS都是大家糊里糊涂装上去的……
其攻击形式大致如下： （此处省略，否则无法发表） 想当年我的IIS上面一半都是这种扫描代码。虽然我开了各种安全配置，而且上了补丁，上了IISLock。不过机器不停跑这种东西还是非常讨厌的，最终导致了贝壳的个人网站的倒站（太麻烦了）。
AD 2001.8，新一代蠕虫，红色代码II出现。
贝壳评论：
红色代码不同于以往蠕虫的是，它不使用感染文件的方法驻留在系统内部，因此可以简单的通过重起解除感染。但是问题在于，如果没有打补丁，重起后会重新感染病毒。这点和Blaster很像，但是Blaster还会定时重起，导致无法下载补丁。由于很多默认安装的个人win2000系统安装了没有必要的IIS组件，导致了该病毒大量感染。其声势不在Morris之下。
AD 2001.9，反蠕虫蠕虫，W32.BlueCode.Worm出现。此病毒的目的是为了解除红码的流行。在利用和红码相同的漏洞入侵系统后，此病毒会去下载补丁并且清除红码。而后寻找下个中毒机器，并且消灭自身。作为反蠕虫蠕虫，早在磁芯大战(Core War)的年代就出来过了。不过其合法和有效性一直没有得到肯定。
近代的结束年月并无法详细划定，不过我将其定为2001年9月。因为此时出现了一种混合型的病毒，结合了蠕虫，后门，病毒的特征。此后的有害代码正向混合化的方向发展。</description>
    </item>
    
    <item>
      <title>windows系统一</title>
      <link>//blog.shell909090.org/blog/archives/191/</link>
      <pubDate>Wed, 13 Jul 2005 23:59:26 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/191/</guid>
      <description>一，启动
任何一个系统，一般都从启动讲起的。这里讲启动本来从NTLDR讲就好，可是怕有人不懂，所以简略概述加电后系统的启动流程。
系统加电后，会将CS:IP（注意不是EIP）设定为FFFF:0000。然后开始BIOS自检流程（Power-On Self Test,POST），最后初始化0地址的中断向量表，将引导盘CHS(0,0,1)读入系统0000:7C00开始执行。我们假定这是硬盘（软盘的没有MBR这步），并且没有安装LILO到MBR（否则流程不大一样）。于是MBR会先读取分区表（Disk Partition Table,DPT），寻找活动分区并且载入其第一扇区到000:7C00位置执行。这样MBR等于一个透明层，无论哪个分区（逻辑磁盘不行哦）获得了活动分区，其引导区（OS Boot Record,OBR）都可以当做自己是被BIOS读取执行的。而后如果是9X系统，引导区会读取系统文件（FAT32）头部来执行。这个就是我们非常熟悉的DOS启动流程。同时插句话，如果您无法format一个DOS系统盘出来。那么先彻底格式化（注意彻底，否则FAT遗留信息会让你失败）磁盘，然后COPY IO.SYS上去。照样可以产生系统盘，当然这种BT非常规手法只有了解系统才干的出来……
如果是NT系统嘛，就会按照某种方法载入NTLDR这个文件。具体方法我也不清楚。因为NTLDR文件没有位置要求支持NTFS和FAT两种格式。按理这么一来引导代码会超过引导区的容量。根据分析NT系统的引导区内容总共有六个连续扇区，分布在头六扇区中。当然第一个扇区还包含了文件系统相关信息BPB（BIOS Parameter Block，研究MFT的还有一个Extend）。这样的大小还是无法容纳整个文件系统的支持阿？要解决除非我愿意反向引导代码，不过为了这么一个问题反向引导代码……等我有空再说吧。
下面NTLDR会进入保护模式，设置了GDT,LDT等等东西，并且彻底支持了NTFS和FAT的读取（引导区只要能从两个格式盘上马找到一个文件就好）。然后会根据BOOT.ini中内容决定如何进行引导，如果出现文字，还可能需要bootfont.bin字体文件。一般来说，会直接调用NTDETECT.COM来检测硬件变化，继续系统加载过程。这个就是我们经常看到的黑色屏幕上有东西从左到右闪的那个……
后面的东西就是微软内部的资料，众人根据推理分析得来，所以不是很准确。不过可以肯定，后面的东西全在system32中打转。根据分析，首先加载的是NTOSKRNL.EXE（单处理器）或者NTKRNLPA.EXE（SMP，对称多处理器）。这个东西就是windows的微内核，由它导出了windows全部NativeAPI的实现。然后是SMSS.EXE，这是进程管理器，也可以说是头个系统派生的进程。后续所有进程可以视为它的子例。由它派生了CSRSS.EXE和WINLOGON.EXE。后者接管了系统的很多部分，例如GINA。它派生了SERVICES.EXE进程，系统开始加载各种服务。最后在登陆后由GINA启动EXPLORER.EXE。出现桌面等操作界面，启动基本完成。按照上述分析，多数服务的宿主进程都是SERVICES.EXE的派生进程（有特例，例如贝壳手里的RaidenFTPD守护进程就是先由SERVICES.EXE派生，再两次派生所成的）。而多数应用程序的进程都是EXPLORER.EXE的派生进程（当然，或者再派生进程）。EXPLORER.EXE负责的内容包括了开始菜单等等，所以除非你通过某个服务去启动程序，否则都是它的子孙。（特例包括Process Explorer工具作为Ctrl+Atl+Del启动时，是WINLOGON.EXE的子例。所以在上面启动一个CMD就成了服务派生，无服务身份。还有MSN弹出的邮件或者Space都是作为某个服务的派生的，所以也不是EXPLORER.EXE的子例。）</description>
    </item>
    
    <item>
      <title>Windows系统引论</title>
      <link>//blog.shell909090.org/blog/archives/190/</link>
      <pubDate>Wed, 13 Jul 2005 23:15:09 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/190/</guid>
      <description>最近在开linux系统，找找发现资料那个叫……哎。到不是说少，linux号称开放源码，想要什么没有阿。问题是精论系统结构和意义的很少，一般都是讨论某个技术点如何如何的。没有大略的瞻观（当然，也有可能是英文，贝壳的E文水平看了等于没看到）。而一般系统中要做某个应用，除了经验，就是根据系统的运作方法、构架、原理等等去模拟。例如了解了file
HANDLE这种东西后，自然会就如何将一个HiddenConsole的Output转Dump到一个windows的text中产生想法。或者了解了\.系列文件后，自然会想到如何制作的ISO。当然，其实还有ATAPI的方法。如果了解了winsock的层实现流程，自然会知道防火墙如何实现。所以了解一个系统，无须了解内核的每句代码（对于windows，根本无法了解。即使是linux，了解了全部也要数年。届时你了解的也该淘汰了。）。系统主要了解其构架和思想，关键部分才了解实现。
现在看linux系统，犹如隔纱而望。当然，系统的命令我了解了不少（其实了解了ls和man已经差不多了）。但是每个命令是哪里的？系统的目录如何设置？什么配置应该看什么地方。linux载入进程是如何实现的。（估计这个是ELF的范畴，不过肯定要先啃过内核在看的懂。否则就如同我当年不知道NativeAPI的时候看NE和PE一样）
所以现在写一个windows系统引论，希望抛砖引玉。毕竟windows的资料全，了解时间长。所以难保还有哪位大大也写过类似文章，大家姑且看之吧。</description>
    </item>
    
    <item>
      <title>史上最倒霉的一天</title>
      <link>//blog.shell909090.org/blog/archives/189/</link>
      <pubDate>Tue, 12 Jul 2005 07:27:34 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/189/</guid>
      <description>今天是俺历史上最倒霉的一天。先是上午，老师打电话过来，说毕设里面至少要有篇翻译。当场我大惊失色，不是原来说不需要吗？赶快提枪上马，抓篇文章过来翻译，五个钟头翻译了五千字中文。连带周岚一起上马，晕头转向外加金山快译，总算即时翻译完成。然后赶快打印把。结果打印机突然没墨水了……我Ft。干脆不打，跑到学校再说。
跑学校的时候，天气非常凉爽。嗯，如何凉爽呢？我这么说吧，我下车的时候已经开始下冷雨了……幸好带了伞。不过刚刚庆幸完就给偶换成滂沱大雨了，我哭。在这么赶的时候，要是碰不到老师毕设就算完蛋了。所以冒雨前进，衣服完好，鞋子报废了……
然后到了老师办公室，拿原来论文，要我拆封重装订。Oh My God，我的论文封面已经给我搬家的时候弄的不成人型了，重装的结果可不比计算机，估计是要废了。（结果果然破了……）不过事情还没有结束，装订好了跑过来，发现我给出去的四张经装进去一张。装订业的先生们，让我说什么呢？我可以保证我放了四张进去。算了，直接用胶水粘上去吧，否则书真的散架了。
装订好书，我倒霉的一天还没有结束。我懒的慢慢晃公交，所以直接去交大番禹门口拉Texi。其中变态的是，七辆空车从我面前飞驰而过，其中还有两个司机和我招手。我说大哥，我招手是要上车。您招手干吗？换我开车您下来？您闹肚子？还有三部车，在我面前停好后，重新启动，跑到别人面前……几位，我没得罪出租车公司吧。最倒霉的是，拦了部车，然后跑来一个MM，说那里有个大肚子。你说我有脸和孕妇抢车吗？
总算抢了部车子，开回来的时候一路红灯。当时让我想起交通模型的绿浪理论，其中的倒霉状况就让我碰上了。当时脑子里面就高唱“一路狂奔不回头”，而且是经过变形的“一路红灯不能走”。停车算车费，结果发票开不出来了……邪门吧。回来装好容易下完的冷门游戏发现需要特定软件，软件比游戏更难找。给人CopyMp3的时候发现差点Copy上了XX歌曲……呃，具体内容省略。最倒霉的是，写这个最倒霉的一天文章的时候，居然碰上了三次软件异常关闭和一次软件错手点关闭……
赶快上床睡觉吧……</description>
    </item>
    
    <item>
      <title>惊叹某MM大大的……</title>
      <link>//blog.shell909090.org/blog/archives/188/</link>
      <pubDate>Sun, 10 Jul 2005 23:00:56 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/188/</guid>
      <description>原文如下：
但是&amp;hellip;由于生理结构的先天性不同&amp;hellip;有经验的厨师都知道&amp;hellip;.洗干净一条黄瓜远远比洗干净一只鲍鱼来的容易上百倍。
就是“下馆子”，最多也就吃个凉菜，鲍鱼、象拔蚌之类的大菜就不用上了。
躲避吃“热菜”的可能性，先自己塞了两大包子，估计啥啥鲍鱼在几小时之内很难引起食欲了。
如果您正在吃饭，那么非常抱歉，您吐出去的东西我不负责。如果您已经年满18但还是看不懂，我更抱歉了，您将来的另一半想必是要活在黑暗中。如果您年满18，本来看不懂，看了这段文字还没看懂。然后去google上面找了半天，最后抓下N多菜谱开始做菜……我为您远弗无界的无知和千锤百炼的粗线条神经而悲哀。
引用：
http://www.blogcn.com/User2/lome/blog/22539888.html</description>
    </item>
    
    <item>
      <title>代码和数据</title>
      <link>//blog.shell909090.org/blog/archives/187/</link>
      <pubDate>Sat, 09 Jul 2005 23:14:42 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/187/</guid>
      <description>从某种意义上说，代码即数据，数据即代码。不仅仅是因为无论何种代码，何种系统，什么格式，什么CPU，代码都是以数据方式存储的。更重要的是，设计良好的数据会自动驱动程序的运行。使得精简的代码发挥意外的功能。最出名的例子有XML，MFC的MessageRoute。或者从某个意义讲，所以代码都是数据驱动的。
现在的所有数据结构都是基于三个内容，数据，列表，指针。数据，即内容本身，也可以认为是某个数字。毕竟电脑是按数字方式编码所有数据的。列表，指某个定长数据区域。指针，即使用某种方式指向的另外一个数据。例如寻址编码。按这三种内容，可以构建出多数的结构来。例如树，图，列表，等等。
如果基于另外的数据方式，是否能构建出另外的数据结构呢？这种结构是否能更好的驱动程序的运行，或者使得程序更智能化的运行呢？我不知道，不过按照我的预感，遗传算法可能是其中的突破口。</description>
    </item>
    
    <item>
      <title>毕设答辩</title>
      <link>//blog.shell909090.org/blog/archives/186/</link>
      <pubDate>Thu, 07 Jul 2005 20:49:38 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/186/</guid>
      <description>好久没写blog了。其实不是没写，而是都更新堆在了一个项下面。就是那个NTFS格式解析那个，回头还要继续看，新出一个项吧。
今天下午三点答辩，目前还有两个半小时（注意，不是两个“半小时”）。我不知道别人在答辩前面干些啥，不过我觉得很无聊。资料准备好了，演示和示例代码做好了，文档写的差不多了，就差N臭N长N烦琐的引用列表。我还特定找了个秒表（杀鸡用牛刀？）测了PPT的讲解时间，预期是十分钟。如果加上支线和突发，可以到十五到二十分钟。很好，偶很满意，然后呢？
突然发现，同学一个个都已经有确定的将来，只有偶还在这里迷茫。今天下午的答辩应该是过的去了（至少我没有听说答辩做了还过不去的……），补考也都合格了（嘿嘿，特别感谢马师姐）。还有呢？我的毕业手续也应该要办了。虽然烦琐点，但是总是要过去的。然后呢？
我不知道我将来准备干吗？读研和出国肯定不考虑的了。我不喜欢本系相关的研究生，出国到是可以读计算机，可惜我的英文差到在国外生存都是一个奇迹。这样的英文还在玩电脑，想必是一个更了不得的奇迹吧。那么我准备找工作吗？北京上海？什么类型？怎么发展？我统统不知道。
目前我的生活就是做一天和尚撞一天钟。如果这个和尚突然发现钟被偷了呢？他是找个木鱼来敲？找人重新弄个钟出来？还是还俗？我也不知道。不过我知道，我做和尚的岁月永远的过去了。那不闻窗外事，只读圣贤书的岁月过去了。那单纯无忧，自由自在的时光过去了。我们都要还俗，投身到俗世浊流中，直到死亡将我们带出。</description>
    </item>
    
    <item>
      <title>实践NTFS格式解析</title>
      <link>//blog.shell909090.org/blog/archives/185/</link>
      <pubDate>Sun, 03 Jul 2005 23:04:20 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/185/</guid>
      <description>刚刚在想NTFS格式的问题，感叹没有个实例拿来看看。然后在看小说的时候不知道怎么回事，想到点子上了。不由骂自己白痴，这个问题其实早就解决了阿。直接用CreateFile去读\.c:文件不就好了……
OK，明天写个程序看看NTFS的实质……也许还有别的用途，再说了。
另外写个想法，也许NTFS中很多MFT表项没有被某个目录引用成为文件，而其引用计数大于一（这样会被chkdsk查出来吗？等于0会吗？会删除吗？表问咯，偶都不知道……）。这样就会造成系统空间的神秘减少。例如上次系统文件复制时候空出来的硬盘，上面全空，但是使用了400M多的空间。估计就是这么搞出来的。具体要察看chkdsk的机理才知道，因为偶的硬盘经常chkdsk的。如果是属于能查的出来的错误，肯定就不会延迟到换硬盘才发现。可能是chkdsk不检查这个……
另外回头准备看看内核的机制，试试记录或者反木马能不能提前挂在内核态上……嘿嘿，里席必争，咏春的要诀……
这次仔细看了MFT的格式。有点心得，先写下来。
首先是从MBR定位到每个BOOT区的BPB，这样才可以获得BPB中的$MFT和$MFTMirr的LCN。并且会获得卷因子（多数都是0x08吧，4k的簇）。$MFT的LCN多数是4，定位就是32(0x20)。而后就会定位到MFT表上去。
MFT的表项分析起来是遵循链式结构的，不过为什么有那么好的性能和抗崩溃能力呢？可能在于USN和LSN吧。每个表项有个头部（详细看linux的ntfs/layout.h去），指明了大小，关联了相关MFT表项和上下MFT表项，以及这个MFT表项的全局属性。由其中可以引出首个属性的相对偏移。
每个属性都有个公用的属性头部，这个头部说明了属性的类型和大小，还有属性是否直接存储，如何存储等等信息。由上个属性可以推知下个属性偏移，所以属性应该是链式存储的。不知道这里是否具有超长链溢出的问题（长度超过最大值的一半）。
另外，在文件名称属性中具有引用目录项目，所以上面猜测的可能无法成立。不过引用目录和硬连接是违背的阿……下次再分析好了，困了困了……
OK,继续分析。根据刚刚的阅读，一个文件可以分散在多个MFT中，而后就会引入一个叫attribute
list的属性。这个属性指明了每个属性属于那个MFT引用中。其中VCN的换算关系比较特别，基本MFT算-1，下面依次排开，扩展MFT也算进去的。似乎一个MFT就算一簇。不过VCN和LCN的映射关系让我头痛了半个钟头，最后也没有在linux的头文件中找到。到是在NTFS.com中文件恢复上找到了说明。原文如下：
00012580 2E 00 70 00 70 00 74 00 80 00 00 00 48 00 00 00 ..p.p.t.Ђ...H... 00012590 01 00 00 00 00 00 04 00 00 00 00 00 00 00 00 00 ................ 000125A0 6D 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 m.......@....... 000125B0 00 DC 00 00 00 00 00 00 00 DC 00 00 00 00 00 00 .</description>
    </item>
    
    <item>
      <title>COM运作机理初探</title>
      <link>//blog.shell909090.org/blog/archives/184/</link>
      <pubDate>Sun, 03 Jul 2005 00:50:06 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/184/</guid>
      <description>今天偶看本COM的书，七搞八搞还是没有太搞明白COM的机理。先把看的差不多的写出来好了，省得下次忘记了。也不一定对，整理整理思路继续学……
COM在运行的时候有一个GetClassObject的导出函数，由这个函数负责生成对象实例并且返回合适的接口。所谓接口，就是派生于一些特定的基类的纯虚类。GetClassObject先构造某个类的实例（根据UUID），然后再获得这个类中的某个IUnknown派生接口，再向这个接口查询其他接口实例（又是根据UUID），这个查询函数名字就是QueryInterface。
根据MSDN的资料显示，QueryInterface具备三个理由。一个是每个接口都要 **** Identity，二是在对象实例中的接口集必须静态，三是每个接口都要能够查询到别的在同个对象实例中的接口。三还跟了很多例子，必须成功等等的。
同样从IUnknown中继承的还有Release和AddRef。每次引用一个接口都会有计数变化，这形成了接口的创立和析构。感觉上这个很类似于iNode和MFT中的引用计数，以及dll载入中的使用计数。
简单来说COM的机理上大致就是。通过GetClassObject寻找并且产生合适的对象实例。通过GetClassObject给出的接口QueryInterface返回其他接口。由于每个对象实例中QueryInterface都是自行编写的，所以可以轻易返回其他所有对象接口。于是通过一对UUID可以定位到某个特定的Interface，用C++术语说就是纯虚基类。</description>
    </item>
    
    <item>
      <title>纪念偶可怜的硬盘</title>
      <link>//blog.shell909090.org/blog/archives/183/</link>
      <pubDate>Mon, 27 Jun 2005 06:47:26 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/183/</guid>
      <description>今天偶的硬盘坏了，感觉是……终于坏了阿。嘿嘿……
偶的硬盘从两年前就开始不好了。其实也没啥好奇怪的，一天二十四小时工作，工作量奇大，天天拖BT。而且还没有好位置，都是用电源线悬挂利于散热（偶用双硬盘的）。能好的了才奇怪了。
不过这个硬盘也算比较奇怪的了，我在服务器上工作的硬盘还没有坏，他先去了。按说服务器上的硬盘无论工时还是工量都比较大，但是却坚持不坏。工作站养护的还算不错，但是又死机又坏硬盘的……看来下次这家DIY公司不能去。（还去啥，都关门了）
两年前，偶的硬盘经常可以听到敲击声，伴随服务器假死状态（整体挂在这个点状态上了）。同时某些部分的数据有CRC错误，读取这个数据时就会引发上述状态。于是偶按照坏区处理，先将整个硬盘格FAT32，重格NTFS，然后重分。将最容易引发的地方分离，然后Copy中等文件，将引发错误的文件保留。于是整理出一个还可以用的硬盘，勉强度日两年。
就在前些日子，偶机器从学校永久的带回家来。由于容易引发死机，所以整个机器经常就裸露在外，利于散热。恐怕加速了硬盘的老化。在一次Copy了大量的ED数据上去准备做压缩的时候（偶好容易从ED上拖下来的阿），硬盘突然狂响。重起后继续响，并且兰屏，再重起……没有了。硬盘整个从系统里面消失了，BIOS都找不到硬盘。看来是硬件电路一起废物了，彻底没救了。
算了算了，反正最近下ED+BT，下的我的硬盘小的要死，正想换个新的。新买个120G的得了。原来我是两个40G分别在两个电脑上，后来貌似就因为这个硬盘不稳定，所以买了个新的硬盘放在WorkStation上。然后Server为了扩容，又添加了一个80G。于是形成了惊人的双电脑双硬盘。然后今天在WorkStation上报废了一个SecondaryDisk40G。所以我买了一个希捷120G放到了Server上面，将原来最初40G的SecondaryDisk（最初是Server的PrimeryDisk）上面的数据移动过去，重新组织了下。和新的80G组成200G服务器双硬盘组，两个都是新的。WorkStation上面换上一个原来的40G作为SecondaryDisk，重新形成80G双硬盘。这样两边都比较稳定，没有大变动。
然后两边都是数据狂移动（40G的数据换位花了我两个钟头，平均数据传输速度是6M/s，实在慢了点，用我自己写的高速移动程序又不放心，嘿嘿，还没有测试完呢）。又重新整理所有硬盘（总算有空间了），打系统补丁（老死机），升级杀毒，整理系统。整整忙了一个晚上，总算将整个系统稳定了下来。
哎，好久没做系统维护的动作了，真的很不适应。八百伴电脑商场搬地方了，新的商家愣是没找到。维护上也头痛的要死……都记不起来了。最头痛的是我多了700的外债，目前已经达到2200，足足是将来三个月的薪水（当然，要吃饭先的）。不过无论怎么叹，硬盘也是回不来了，就像过去一般。所谓永恒和稳定只是虚无的东西，谨以此文纪念我的硬盘。
呜呼，尚觞。</description>
    </item>
    
    <item>
      <title>撑死我了……</title>
      <link>//blog.shell909090.org/blog/archives/182/</link>
      <pubDate>Sat, 25 Jun 2005 07:10:01 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/182/</guid>
      <description>今天真是忙碌，闵行到处跑。
先是答应了参加初中同学聚会，然后早上匆匆爬起来，坐两钟头车跑到闵行。结果据说中午不聚会了，我哭……
幸好班上同学正好有聚会，四个还没有请客的集体请客，去“小尾羊”撮顿好的。前几天在学院里面撮的够厉害的了，后来又跑KaKa家，实在撑的厉害。幸好在家一天消化了不少，撮就撮。于是跑到小尾羊去撮了顿赞的。然后席间小方跑过来问我有个师姐要请教问题（嘿嘿嘿嘿……我伟大吧），他已经同意了，问有时间吗？我说可以啊。后来小方说我运筹补考就是这个师姐代替监考和批阅，所以直接替我答应了，希望不要生气云云……
靠，我生啥气啊。简直是拯救我于危难中。哈哈，谢谢小方，谢谢陈峰，谢谢蒋祖华。马师姐，您爱问啥就问啥。保证知无不言，言无不尽，不知道的回去给你查。请教绝对不感当，只要你不当我就行……So两点多撮完后，跑到东食，解答师姐的问题。实在很简单哎，只是如何使用的问题。不过模型建不上去让我比较糗，有功夫问问KaKa好了。
解答完毕已经快四点了。打电话问过同学，他们跑到了兰坪路上一家叫自由港的KTV去K歌了。赶快从校门口拉了部QQ去那里。过去一看，结果还没有开始唱呢……嘿嘿，赶上去猥琐了番（不过没有贱人和老大两个猥琐），喝了点饮料（失误……），然后五点多接到荷马的短信，说要初中同学聚会，改在了晚上。嗯，地点在……还是“小尾羊”！
靠，我过去的时候，眼睛都不知道往哪里看。总觉得很尴尬。中午刚刚撮完，晚上又跑过去……有没有搞错？然后席上吃了点就over了，都不知道该怎么吃，中午实在吃的太饱了。不过吃东西的前段时间是大家抢啊，后面就是……谁吃啊，谁吃啊……看来大家近几天吃的都很辛苦。
聊了聊，发现有三个要出国的，N多准备出国的，还有e的N方多已经在国外的我认识不认识的大牛。怎么大家都往外跑啊……GiGi也是……小姚也是……老鼠也是……靠……都知道我外语不好。算了，自立自强，坚持自学计算机……
对了对了，先记录下来。鸡问了一个DB的问题，如何放置大规模二进制数据。现在估计下来是读写不正确，回头问问他加没有效验返回值和错误状态。还有要了所有同学的手机号码（嘿嘿……），可怜了我的手机卡。希望所有我加了MSN的friends看到本页的时候不要生气，不要惊讶，嘿嘿。
最后本来准备去物理王老师家玩的，结果发现不在家。然后商量怎么回去。鸡说他有车，我们大喜过望。然后他悠闲的补了句……不过要半个钟头……吐血ing。好你个鸡，回头我碰得到电脑了，整死你……！@#￥％^&amp;amp;×（。罢也罢也，就凑合坐个徐闵线吧。最后和顾功坤李白璐杨卿边聊边晃到车站，坐车回家。发现两个广电的都不知道我认识甄小璐……明明路上都会打招呼的说。真是……怪事天天有，毕业特别多。算了，不计较这个问题了，赶快上地铁吧，我热死了。哎，今天还真有意思，不过还是家里舒服。
最后地铁上，小方个家伙打过来问我要不要去养思亭。本来挺好的，我四年都没有去过说。（记得找个时间去次，否则抱憾终身，初中就没有去过，都十年了）但是很遗憾，我都在地铁上了。还因为把这个答案吼回给小方差点没有下车。我!@#$%^&amp;amp;*()_+}{&amp;quot;:?</description>
    </item>
    
    <item>
      <title>KaKa的家</title>
      <link>//blog.shell909090.org/blog/archives/181/</link>
      <pubDate>Thu, 23 Jun 2005 20:54:36 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/181/</guid>
      <description>昨天KaKa带我们去了她的家，我们终于见到了传说中的KaKa的父亲。果然能喝，居然要求男生两杯女生一杯，点名要求我三杯。幸好后来有事，把这个事情给揭了过去，否则我就回不来了……
对KaKa家的第三印象，好大，第二印象，环境好漂亮，第一印象，蚊子好多……晚上睡觉的时候没有被子也没有枕头，放我们在外面就是喂蚊子的。幸好小费买了瓶蚊补丁，打上后果然稳定多了……不是不是……是蚊子少多了。早上给大班叫起来，发现三个女生通宵到七点半。汗……好恐怖的精力，贝壳是困了就要睡觉了。
孙大班的家啥都好，就是路远了点（当然，蚊子也多了点……）。从学校过去是两个多钟头，偶跑回自己家又用了两个钟头，加上去学校的两个钟头，可以证明，三者形成等边三角型。贝壳出来的时候，孙大班还特意嘱咐在对面乘车。结果贝壳是属蚂蚁的，先爬会熟悉的地头，再走熟悉的路线。特意开回南汇，然后一部班车到家。省却不少麻烦，就是乘车时间稍微长了点。
昨天晚上喝酒当中不知道怎么提到的（好像是杨文卓喝酒不喝酒弄出来的），袁乐突然发神经，要在毕业一周内结婚，预定时间是七月一号，因为是党的生日。各位各位，如果我们全班没有被耍的话，七一贝壳就要去重庆玩两天了。虽然临近答辩，老师催的很紧的说。这些都不重要，但是……但是……但是我的钱包啊……负债已经一千五百了，再下去毕业前就要预支一个月的薪水了。</description>
    </item>
    
    <item>
      <title>大教堂</title>
      <link>//blog.shell909090.org/blog/archives/180/</link>
      <pubDate>Sun, 19 Jun 2005 04:36:02 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/180/</guid>
      <description>很久以前就听过巴利奥斯的大教堂，不过一直都不知道叫什么。（相信大家也听过吧，尤其是男生，CS中某关在教堂附近的音乐……）然后，我学了吉他，知道了名字。不过很抱歉也很遗憾，我弹不来。嘿嘿，好像我有点懒……
不过大教堂的却也够难……不但技术上要求技巧高，弹奏速度快，而且持续时间超长。技术差点，不是弹不出来，就是断断续续，或者根本弹不完。开始的时候就要用拇指食指中指交替快速弹奏，我现在连这段都无法连贯弹出来。看来弹完它这个梦想是终身无望了……
大教堂给人的感觉有点庄严不是那么特别的庄严。每次烦躁的时候听，心里面都会平静下来。但是静心仔细听，又给我一种蠢蠢欲动的感觉。上跳下窜的音符引发隐约的躁动，仿佛要发生什么，又什么都不会发生。每个走向都非常出人意料，就像人生，你永远不知道下一刻你会得到什么。</description>
    </item>
    
    <item>
      <title>blogs</title>
      <link>//blog.shell909090.org/blog/archives/179/</link>
      <pubDate>Sat, 18 Jun 2005 20:18:52 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/179/</guid>
      <description>今天觉得MSNSpace还不错，呃，我没有在做广告。刚刚发现上面可以加入音乐列表和图书列表……虽然这些都需要外置空间的支持，不过，it&amp;rsquo;s better then nothing。今天加了五首动漫曲和六首吉他曲。回头再改。我实在无法在更改IP的时候更换太多的URL的IP。也许我真的应该申请一个虚拟域名了。
OK，最近还不错，除了昨天晚上发神经的和real抱怨了通中国的软件业，还有和Gigi抱怨了通女人和结婚。其余一切OK，在此谢谢Gigi和real。
另外，最近开始分析NTFS格式了，看了MFT的说明，不过好头晕。现在下了一个linux内核中附带的NTFS解析部分在看。呵呵，也许我应该先吧前面的想法搞定，不是吗？不过现在不管这些了。反正我只是在玩电脑，快乐就好。也许几年后，连我自己都会忘记曾经有这么天，我在小小的房间里面，独自研究着NTFS。不过谁在意呢，千百年后，我们中的多少还能留下名字？与其将生命浪费在无谓的虚妄中，我更宁可做点现在就可以快乐的事情。而电脑，就是其中之一。
今天下了BitComet0.59用，终于支持用户列表交换和DHT了。感觉真好。不能不说，BC是目前国产软件中最有活力的一个。不是说推出的速度和宣传，而是各个软件的方面。例如支持XML，支持多语言扩展，各种新技术（像UDP内网穿越），广告，内嵌浏览器，内核定制和重用。让我想起以前的netant，winamp等等软件，充满了活力。也许软件维持活力和生命的关键，在于不断引入新鲜血液，并且加入市场来活化它。可能在几年后，现在BC的缔造者会成为将来的网络新贵。不过现在一切都还未知。</description>
    </item>
    
    <item>
      <title>抱怨</title>
      <link>//blog.shell909090.org/blog/archives/178/</link>
      <pubDate>Mon, 13 Jun 2005 21:41:55 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/178/</guid>
      <description>吃了人家的免费午餐，照例应该专程为人做做广告，致致贺词。不济也不应该抱怨连连。不过MSN的空间的却引我腹诽。过去的文章找不到……不知道是我方法不对还是什么。如果真的如此我干脆另觅它处，好过我珍贵的文章白白无人看……
OK，先放下MSN空间的问题吧。本周我分析了UPX的压缩原理分析结果亦不外如是。不过话说回来UPX毕竟不是专业的防跟踪壳，仅仅是资源压缩程序而已。好分析也没有什么值得意外的。
源程序如下，是最最出名的Hello,World.：
#include &amp;quot;stdafx.h&amp;quot; #include &amp;lt;windows.h&amp;gt; #pragma comment(linker, &amp;quot;/ENTRY:main&amp;quot;) //#pragma comment(linker, &amp;quot;/ALIGN:0x1000&amp;quot;)//这厮一上程序就变成3k党了，然后UPX就死气活样的不肯工作 #define put(x) WriteFile(hOutput, (x), sizeof(x), &amp;amp;amp;NumOfBytes, NULL) #define get(x) ReadFile(hInput, (x), sizeof(x), &amp;amp;amp;NumOfBytes, NULL) HANDLE hOutput, hInput; DWORD NumOfBytes; void main(){ char tmp[1]; hOutput=GetStdHandle(STD_OUTPUT_HANDLE); hInput=GetStdHandle(STD_INPUT_HANDLE); put(&amp;quot;Hello,World.n&amp;quot;); get(tmp); return ; } UPX压缩下来的程序，section会变成三个。UPX0,UPX1,UPX2。其中UPX0是虚段，具备实际的段名称和段地址，但是RawDateSize是0。所以这个段在载入后是全0数据。数据和解压代码合并在了UPX1段中，由UPX1的解压代码注入UPX0的段中。看样子解压代码是附在了最后，从入口点到段实际内容结束点之间的范围。而UPX3的段最是搞笑，是一个单独的ImportTable，仅仅导入了Kernel32.dll中ExitProcess,LoadLibrary和GetProcessAddr三个函数。UPX1在解压并且注入UPX0后，会调用这三个函数来分析和获得每个导入表项的地址，然后完成导入表的动作。
换言，程序在从UPX1段JMP入UPX0段的瞬间，从UPX0段DUMP出来的数据就是正常的数据，除了要重建Section，并且重建所有DateDirectory外。
OK，下面说说压缩算法的问题。上面可以看出，压缩动作不难，但是算法我可没有能力分析和实现。所以我脑筋就动到了zip算法上去。可是根据我以前看zip文档得到的经验，zip内部分多种格式。貌似rar也分多种格式。所以我不打算挑战极限，自行写出每种算法的代码。不过我打算做一个标准的扩展接口，可以让所有的压缩算法都容纳在这一个框架内。并且可以支持多种压缩文件的格式。对上可以封装成标准的文件读写函数，然后再写一个COM组件，让所有的人都可以任意的运用（嘿嘿，写网页的人估计最需要）。至于后面要不要写一个什么东西让整个windows可以把压缩文件无缝的当成文件夹处理，那就再说了。</description>
    </item>
    
    <item>
      <title>babylon</title>
      <link>//blog.shell909090.org/blog/archives/177/</link>
      <pubDate>Wed, 08 Jun 2005 00:40:42 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/177/</guid>
      <description>真TMD麻烦，从网络上下了一个babylon。上了破解补丁，然后发现不能安装词库。安装词库就会出现授权无效，然后八天一过就用不了了。毛主席说，自己动手，丰衣足食。拿出OllyDbg拆开研究看看。反正补丁的类型是文件改写型，不用担心太麻烦。
不过我还是低估了babylon的难度，从昨天晚上到今天下午，经过将近一天的努力，我还是绕在babylon里面出不来。关键是我找到了显示判别无效的代码，但是在附近没有找到判别代码。NND原来他的判别代码在很久以前执行的，然后放在全局变量里面。害的我好找。然后发现判别代码分了两部分，一个是判断是否有效，一个是判断是否过期。经过一天的修改，还是没有发现过期代码的识别。不过幸好后来想到有一个现成的key，只是因为词典安装太多给识别成无效。这个好解决的很，前面的判别自动判断为有效就好了。然后跟踪后发现修改一个字节就可以暂时解决这个问题。不错不错。
然后是写补丁的问题，我上了一个原来的补丁壳子。发现这个补丁壳子实在奇怪，明明写的是8，却按照B去编译，结果修改地址错误了，导致破解失败。更倒霉的是程序把备份文件的名字起的和网络上的补丁一样，结果按照补丁规则默认覆盖了。闹的我连原始文件都没有了……不得以只好将现在的程序备份重新安装，然后提取出一个主文件来。看来不重新写一个补丁壳子不行了，这次写的完美点……</description>
    </item>
    
    <item>
      <title>郁闷，发不了了……</title>
      <link>//blog.shell909090.org/blog/archives/176/</link>
      <pubDate>Mon, 06 Jun 2005 18:50:11 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/176/</guid>
      <description>病毒编年史已经写好了，不过奇怪的是空间不能用。怎么都发不上来。莫非是我东西太大，导致微软对我的抵制？
今天去参加讨论，得知毕设答辩如果在七月进行肯定没好分数。而且答辩如果过了七月中旬没有结束就直接结业没有毕业。老师还不紧不慢的和我说你不用着急……我快崩溃了。软件写好了就在家天天呆着闲闲没事干，这样如何能不着急。
算了算了，还是不说了。昨天破解了CCProxy6.0，很好的一个软件。不准备发出去，毕竟人家是软件公司，不能坏人家生意。不过挺高兴，软件破解技术终于可以搞点实际的东西了。破解的时候挺痛苦的，重起N次。
然后还发现一个木马蠕虫。通过LSASS的某个后门运行tftp下载代码，结果给天网截获了。然后用ProcessExplorer查出来，下载文件来分析。貌似被压缩过分析不出来，司机的在线引擎给的结果是Rbot。反正我不管这么多了，能下载就让我一身冷汗，本来还以为系统挺安全的。赶快下LSASS的补丁打上，然后又下了一个SSS扫描本身的系统。发现了五个严重漏洞，一个中等漏洞。那个中等是匿名ftp，不用理他。一个是winamp漏洞，要升级到最新。去，最新的winamp又大又难用，我才不干。还有一个是jet漏洞，上补丁后解决了。最后三个FTP绕回漏洞，现在在想办法……
真的是好久不玩安全技术了，居然被人打到家门口才发现。要不是这个服务器配置比较严格，就会被入侵了。我在想能不能开个公司，专门写程序检验你的系统和上面的软件，软件的版本。发现某个版本的软件就查漏洞数据库，找漏洞检验程序。然后扫描没有打的补丁，再专门下载补丁打。这样可以分担网管大部分的工作。不过在中国是否可行还是未知，毕竟中国的网管观念里面，出了问题再解决才能显得自己的重要。漏洞全让你自动打光了，我吃什么？</description>
    </item>
    
    <item>
      <title>病毒编年史-近古</title>
      <link>//blog.shell909090.org/blog/archives/175/</link>
      <pubDate>Sat, 04 Jun 2005 23:24:18 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/175/</guid>
      <description>近古时代是以win9X的兴起为代表的，这个时期后，人们对于保护模式编程有了相当的积累。更换系统变化的是系统结构，而保护模式的各个易于错漏之处一直保留到现在。同时病毒也开始向跨平台和多样化发展了。难倒病毒编写者也感受到了平台变换的阵痛？
AD 1995，宏病毒出现，代表作 Word Concept，作者未知。 贝壳评论：
这个病毒的意义是打破了人们对于非可执行文件不会中毒的认识。使得非可执行文件也成为了病毒的媒介。并且降低了病毒的技术门槛，使得病毒技术从生僻技术变成了人人都可以接受和理解的技术。制作者从必须懂得各种计算机内部机理变成只需要了解Word宏的编写，从客观上加速了病毒制造的普及。
同时这个也是典型的一个概念型病毒，病毒并不具备破坏性。更多程度上是和Fred Cohen一样为了证明自己的观点而做的。其症状是Word的Normal模板中会出现两个名字为AAAZAO和AAAZFS 的宏命令。另外还有一个PayLoad宏，该宏只包含一句话“这足以证明我的观点（That’s enough to prove my point.）”，而不做其他事情。
AD 1997.6.24，KV300L++事件。某种意义上说，KV300L++事件不是病毒。不过，这个事件在病毒技术，反病毒理念，反盗版理念上造成极大冲击。关于事件我摘录如下：
1997年6月24日王江民先生在其主页上发布了kv300l++版，内含逻辑炸弹。凡是在mk300v4制作的仿真盘（盗版盘）上执行kv300l++的用户硬盘数据均被破坏，同时硬盘被锁，软硬盘皆不能启动。从网上的求救信息可以看到，包括在校大学生的毕业论文被破坏，kv300的代理商的电脑遭到破坏，求救的人不计其数（网上的求救信息并不能作为证据，因为不能排除有人误判断及有假消息）。从常规上可做推断：kv300当时至少有几十万正版用户，盗版用户可能远远大于这一数字，可见此逻辑炸弹的影响之大。首先王江民不是执法者，无权对盗版用户进行打击，另外，被打击对象也不应该是用户，而应该是制作盗版的厂商。1997年9月8日，公安部门认定kv300L++事件违反计算机安全保护条例之23条,对其做出罚款3000元的决定！
另外还有这个事件的一个评论：http://www.chinabyte.com/20011224/1428573.shtml
贝壳评论：
原理上说，KV300L++逻辑炸弹是通过修改硬盘MBR区中分区表导致逻辑死锁所致。属于系统漏洞的一种应用，解法可以使用修改过的IO.sys等等，在此不赘言。就理论上说，KV300L++是严格的恶意代码，关于逻辑锁的解释根本不能成立。假如逻辑炸弹造成损失可以通过技术途径修复，那么就都不叫逻辑炸弹了？并且就行为上说。中国计算机保护条例中打击的范围是制作，传播，销售盗版。江民公司通过打击用户的方式制衡盗版。无论有无效果，客观上打击了客户。就角色上说就更离谱了，江民公司根本不是执法者，连直接打击盗版商的权利都没有，充其量就是能够起诉盗版商而已。最恶心人的是，江民公司在事先一字未提，其原因为何不说，本身绝对侵犯了消费者知情权。后期的很多评论各有偏向，不排除江民公司和对手在做商业宣传的可能。在此引出的问题是，软件保护究竟如何做？
AD 1998，java病毒出现，代表作 StrangeBrew，作者未知。 贝壳评论：
此种病毒代表病毒编写由平台相关迈向了平台无关。从某种意义上说，此种病毒和上面的宏病毒都属于源码病毒，更严格来说是脚本病毒。依靠脚本来传播，因此编写非常简单。当今流行的多数病毒都多少带有这种特征。
AD 1998.6，9X时代巅峰之作 CIH，作者 台湾大同工学院 陈盈豪。 贝壳评论：
说起此君真当是病毒史上又一传奇人物。CIH小小一个病毒，大小约1K，连续创下四个世界之最。最早的大规模硬件破坏病毒，最早的windows核心态感染病毒，流行事件最长，破坏最强。而且这个病毒本身不变形不加密，仅仅通过windows的段机制拆分重组来破坏特征扫描。堪称病毒史上的经典作品。其源码公开，有兴趣做windows核心研究的一定要下一个来看看。不过这个病毒的设定还有点搞笑，CIH取自作者的姓名台湾拼音，病毒发作的时间之所以定在4月26日，因为那是他的高中座号，也是他的绰号。
同时此病毒的解毒方法也成传奇了，五花八门的解毒方法另人瞠目结舌。因为病毒破坏了硬件，所以所有软件解毒方案全成了空话一句，反到是各种偏方效用非常。例如热插拔法就是在此时风行的。很多用户也首次接触了编程器和刷新BIOS的概念。BIOS刷新中的防刷死（BlackBlock方法）成为必备条件。硬盘数据恢复中常用的种种数据修复工具和数据修复方法也是从此时开始流行的。
就贝壳查找的资料显示，作者陈盈豪在99年4月曾经入狱，2000年被发展Linux操作系统的美商网虎公司聘请为工程师，负责硬件事业部门的研究工作。
近古时代就此终结，就传统意义上的种种病毒来说。至今尚无超过CIH的。</description>
    </item>
    
    <item>
      <title>病毒编年史-中古</title>
      <link>//blog.shell909090.org/blog/archives/174/</link>
      <pubDate>Sat, 04 Jun 2005 23:20:25 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/174/</guid>
      <description>1991年DOS盛行以来被划为中古时代，这个时代的各种病毒主要在dos和win3X上面折腾，win9X和保护模式还是未来的概念。贝壳就经历了这个时代。当时要杀解某种病毒基本是要用户手工去DeBug的。还有专门的小册子指导人怎么做。不过即使现在，能Debug方式杀毒的人又有多少呢？幸好现在有了反毒程序。
贝壳评论：
所谓反毒程序，其实就是感冒药。你吃了感冒药敢去流行性感冒的流行区吗？所以，防毒还是要靠自己小心。
AD 1991，首个多态病毒出现（好快），代表作 Tequila（龙舌兰），作者未知。
贝壳评论：
所谓多态，就是指同个东西的多个表现形式。在C++来讲，就是同个基类的多个行为。在病毒来讲，就是一个动作的多种代码写法。也可以称为变性病毒。基本原理是利用可替代代码，用不同的代码表达一个内容。或者利用变性子，变更病毒的形态，并且执行的时候动态变换回来。其中在DOS时代的皎皎者就是Natas，无穷变形。
插句话，前面所描述的病毒，经历了概念型，游戏型等等非经典形态。在Brain（小球）后才真正是破坏病毒。基本来说分为三个类型，开始的引导型，后来的文件型，和系统型蠕虫。前者出来不久就没了，连作者都没有赶上（赶这个干吗啊？），后者在当代还屡屡出现，生命力超强。最后者直到近年才在windows上广泛出现，由此可见Morris的远见。还有很多是以上的复合型病毒，真正DOS病毒的巅峰之作当数DirII（后文有述）。
AD 199X，Jerusalem病毒出现，又名黑色星期五。在十三号又是星期五的日子，这个病毒就会发作。
AD 1994，恶作剧邮件出现（重复一次，这不是病毒），作者未知。感觉上说，这个很像一个古老的循环。下面的信请在XX天内发给XX人，如果发了你会OOOO，如果没有则会XXXX。其实这个东西（姑且叫东西吧），思想绝对先进。他通过一个信件，发送一个病毒警告给用户，提醒他们小心病毒，并且要求你发送这个信件给所有你认识的人。大家感觉是不是很像邮件蠕虫病毒啊？不过这里并没有真正的病毒，信中提及提及的病毒在其后两年内没有人中过……
AD 199X年，防毒卡终结，DirII横空出世。代表作 DirII，作者未知。
这个病毒贝壳我在DOS病毒中着重描述，为什么呢？因为他有数个特点。首先是他将自身加入了DOS的设备驱动链，合法的修改了系统，导致硬件防毒的一蹶不振。详细请看《信息安全半世纪—一个程序员的简单回顾》江海客（http://netsafe.ayinfo.ha.cn/software/virus/article/teach/teach_25.htm）
贝壳曾经在防毒技术资料上看过病毒分析，非常佩服。同时这个病毒客观上也造成了文件系统格式的变化。当今这种变化可以被用来防御各种本地进攻。
DirII的出世也标志着中古时代的结束，此后的病毒就向win9X平台上迈进了。</description>
    </item>
    
    <item>
      <title>病毒编年史-上古</title>
      <link>//blog.shell909090.org/blog/archives/173/</link>
      <pubDate>Fri, 03 Jun 2005 17:46:54 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/173/</guid>
      <description>所谓病毒编年史-上古，指的是自AT&amp;amp;T的Unix出现后到BG的DOS刚刚冒出来的这段时间。这个时间里面我都没有出生，所以所有资料均举自网络。如果有抄袭重复还请见谅……毕竟要我说自己出生前的历史想不背书都不行…… AD1949 ，病毒概念诞生，代表作无，作者John Von Neumann。大家表和我说不知道这个人。冯。诺伊曼结构知道吧，近代计算机理论奠基人。 贝壳评论： 话说具体时间嘛，也不确定是1949年，这年恰也是计算机元年。据说同年John Von Neumann提出一篇论文，描述了病毒的机理和存在，不过没有实际代码，也没人信。但是鉴于病毒的基础理论已经出来了，我们同样定这年为“病毒元年”。而后大约十年的时间内在美国电脑电话电报公司(AT&amp;amp;T)的贝尔(Bell)实验室中，出现了磁芯大战。磁芯大战这个游戏现在还有模拟器可以跑，具体情况可以下载来看看，模拟器访问 http://www.xfocus.net 。里面有中文教程和下载，在此不再赘言。 AD 1959（大约） ，远古病毒诞生，代表作 磁芯大战(Core War) ，作者AT&amp;amp;T Bell 的Douglas Mcllroy、Victor Vysottsky以及Robert T.Morris 。最后一个人大家记住了，这个人是后来非常出名的Morris蠕虫的作者的老爸，当时正好掌管整个ARPANET网络，给儿子闹了个灰头土脸。 同时我要特别提到他的公开者。磁芯大战本来是在程序员间秘密流传的，不过1983年（嘿嘿，我诞生的年头） Ken Thompson在一项杰出电脑奖的颁奖典礼上，他作了一个演讲，不但公开地证实了电脑病毒的存在，而且还告诉所有听众怎样去写自己的病毒程序。这个Ken Thompson，如果我没有记忆错误的话，系Unix的缔造者之一。（致以无上敬意……）另外，Ken Thompson与Dennis Ritchie是唯一两位获得Turing Award(图灵奖，电脑界的诺贝尔)的工程师(其他都是学者)，后者是C的缔造者。 AD 1981，苹果病毒1 2 3诞生，近代公开病毒首例，作者未知，传播是通过一个得克萨斯州的盗版游戏传播的…… AD 1983，概念型病毒（不是病毒概念哦），首例病毒研究论文发表，病毒正式定名，作者Fred Cohen。 贝壳评论： 话说此君在南加州大学念书的时候，着重研究了一种导致系统死机的程序。（windows？）结果得不到某些教授的认同。于是此君愤怒之下，直接公开了论文和示例代码。其指导教授Len Adleman将其定名为病毒（virus），Cohen的程序，让电脑病毒具备破坏性的概念具体成形。 BTW，喜欢看近代密码学的人是否觉得哪里很眼熟啊？嘿嘿，Len Adleman的A和RSA加密算法的A是一个A哦…… AD 1986，引导型病毒出现，代表作 小球（巴基斯坦），作者 Basit Amjad兄弟。这个病毒的目的是为了防止盗版游戏。 贝壳评论： 某种意义上说，这个才是近代病毒第一人。笔者曾经研究过这个病毒，感觉非常远古。头部居然还有病毒作者的声明和地址（CIH的前辈啊……）。通过更改系统的BOOT区（0面0道1扇区）来获得系统权限，减小内存总量并且驻留，而后再次载入原始BOOT。目前此种病毒已经失传，原因是因为linux和windows抢MBR区抢的太凶，导致所有BOOT型病毒殃及池鱼……（玩笑……） 为了防止盗版而植入恶意代码的事情后来反复出现，现在形成了一个专门的问题。能否以暴易暴？ AD 1987 文件型病毒出现，代表作 Lehigh（这个是Pennsylvania宾夕法尼亚州东部的一个小镇），作者未知，感染对象是command.com。 AD 1988.11.2 ，蠕虫传播，病毒首次发威，代表作 Morris蠕虫，作者是 在康乃尔 (Cornell) 大学攻读学位的研究生，Robert T.Morris Jr，当年23岁（厉害哦，比我大一点而已……）。 1988年11月2日，Morris 蠕虫[8～12]发作，几天之内6000台以上的Internet服务器被感染，损失超过一千万美元。它造成的影响是如此之大，使它在后来的10几年里，被反病毒厂商作为经典病毒案例，虽然它是蠕虫而非病毒；1990年，Morris蠕虫的编写者Robert T. Morris被判有罪并处以3年缓刑、1万美元罚金和400小时的社区义务劳动。Morris蠕虫通过fingerd、sendmail、 rexec/rsh三种系统服务中存在漏洞进行传播。他的主要思路是通过构造缓冲区溢出获得远程管理员权限，并且载入一段引导代码（boot），下载远程的病毒主体并且编译连接，重复感染系统。 AD 1990，出现了首个大型公司的反毒程序，代表作 Norton AntiVirus，作者 Symantec。这个标志着病毒和反毒已经成为商业化的斗争。 远古时代大致到这里就结束了，其中涵盖了多个系统上的各种病毒。提供了最初的各种病毒理念。</description>
    </item>
    
    <item>
      <title>病毒编年史-前言</title>
      <link>//blog.shell909090.org/blog/archives/172/</link>
      <pubDate>Fri, 03 Jun 2005 17:18:39 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/172/</guid>
      <description>最近和人聊天，讲到病毒和系统，人家问我要资料了解下历史。我说貌似以前有个大牛人写过一个OS演义，详举了种种系统的历史。病毒就貌似没有了。想想有趣，决定跑回来写个病毒编年史，举各种史上出名的病毒，并且加以评论。不过史上出名四字极难担当。就病毒数目而言，尚远在系统数目之上。其中精品之作汗牛充栋，在此仅仅能分析一二。而且资料不全，有遗漏处还请告知。至于评论更是一家之言，姑且听之，莫笑莫笑……</description>
    </item>
    
    <item>
      <title>利用API插接替换破解软件</title>
      <link>//blog.shell909090.org/blog/archives/171/</link>
      <pubDate>Thu, 02 Jun 2005 12:07:53 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/171/</guid>
      <description>刚刚在看软件破解教程，看到一个人说怎么怎么破解软件。然后突然想到，许多软件破解其实不用修改出flag或者找注册算法。只要对话框不出来，软件照常好用就可以了。OK，基于这个原理，试试用DLL注入插接API的方法RIP破解软件。
首先是对话框弹出机理。先写了个MFC程序，然后跑一跑，在运行中按着DoModel()一路F11下去，跟进了CWnd::CreateDialogIndirectPreamA云云的一个函数里面（名字忘记了）。然后就是一个API调用了。（__IMP__Creat&amp;hellip;肯定是调用别的DLL的函数了）API内容看不到……我晕。编译一个Release版的出来，然后上Ollydbg。经过跟踪，确定了窗体句柄是在USER32.CreateDialogIndirectPreamAorW里面生成的。如果没有窗体句柄呢？
貌似有两种可能，一种是没事，对话框没了。一种是报错。按照试验，Readbook至少是没事情的。哈哈，这样简单多了。整理下顺序，基本就可以做RIP破解了。
首先是用OllyDbg等等软件定位USER32.CreateDialogIndirectPreamAorW（其实USER32.CreateDialogIndirectPreamA更好，如果只用这个的话比较好确定参数类型）。然后下断点，跑到软件里面触发窗口广告……然后记录对话框的模板位置，调试的任务就结束了。因为没有啥要判断的东西，这个应该说简单到顶点了。
然后写一个DLL注入程序，运行目标程序并且Suspend。然后注入DLL，挂接API。详细参看windows核心编程，现在我们假定挂接了USER32.CreateDialogIndirectPreamA。现在有了一个自主的处理函数，只要在里面判断模板是否为特定模板就好……这个是module的一个res，理论上不是动态生成的，所以位置不变。而且一个对话框一个模板，很好认不会出错。如果是特定模板就返回NULL，否则正常调用。这样程序的提示框就永远弹不出来了。
这个其实是将软件的对话框禁止技术搬到了API层去实现，由于API层代码相对稳定，通用性强，所以破解相对简单。不过也是有代价的。如果软件无法生成对话框会导致出错……这个就没戏了。而且要写注入程序（可以写个注入的模板，或者一次写好可以多次用……），毕竟不是直接运行程序，使用不大方便。而且速度会受影响，如果程序里面对话框满天飞的话……</description>
    </item>
    
    <item>
      <title>首次面试</title>
      <link>//blog.shell909090.org/blog/archives/170/</link>
      <pubDate>Thu, 02 Jun 2005 10:35:40 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/170/</guid>
      <description>首次面试，感觉非常怪异。先是过去玩，结果找不到地方。然后就在咖吧里面消磨时间，花了15块……我的钱啊……不过还好，有冷气，有美女（如果那个算的话），还有电插头。拿PDA看看书正好。旁边有音乐，外面看人来人往，风吹树动。真的有点偷得浮生半日闲的感觉。然后跑去吃麦当劳……那个叫出血啊，不过也没有办法，咖吧里面的快餐上手就要挨一刀，还是能省则省吧（虽然麦当劳也省不到哪里去）。
然后吃完，终于进去了。才发现刚刚我就站在门口没有敲门而已……我Ft。老板人还不错，工作有点无聊。后来来了个.net的程序员，号称在微软做的……那个.net的程序员让我感觉非常奇怪。当时问问题的时候感觉总答不上来，可是回来细想发现里面很多都有透换概念的迹象，而且还有错误。
例如问我ASM调用C的时候，压栈顺序问题，我想了半天，结果他没有没说对还是错。这个就算了。这个问题引申出来了一个栈堆增长问题，他居然告诉我栈堆是正增长的。如果栈堆真的正增长，那溢出问题怎么可能出的来？
就是CLR和.net支持多门语言的问题，的却，CLR的优点非常多。不过事实上，VS.NET支持的所有语言的却使用了.net framework，这个导致了语言传承的断链。C类语言不兼容ANSI C，VB类语言库都变了。所有使用过原始语言的人变成了新人重新训练……而且说的明白点，高级程序员学门语言的语法根本不用几分钟。如果用VB掌握了framework，那么换成C#又有多困难呢？这和完全的使用一门语言有区别吗？.net号称支持多门语言，虽然是事实，不过有意思吗？
还有那个winsock的问题就不说了，MSDN上能查到还问我。当我白痴还是背书机器啊？accpet在异步无连接的返回值可能有三种，INVAILD_HANDLE一种，特定错误一种，SEH一种。除此外还有可能（虽然不大可能）当场阻塞。此外还有啥可能？不过现在三选一，运气不大好……选择错误。应该是特定错误标志的选择成INVAILD_HANDLE用GetLastError()察看了。
那个按钮的问题到的却是我看的不够仔细，如果知道BM系列message的话应该答的上来的。不过关于SendMessage返回的问题，这么理所当然的事情还郑重其事的去问。我真是无语了。PostMessage当然没有返回值，因为是异步，对方甚至还可能处于阻塞状态，怎么返回值啊？至于使用Callback，可能不大。PostMessage本身逻辑同步问题不大的，要是Callback就要自行头痛同步问题，相信没啥人这么笨的……SendMessage的流程大约是（貌似有人和我说过，或者windows核心编程里面写过），首先如果是同进程接收的话直接调用接收函数，如果异线程先置标志，然后发出一个消息（和Post的不大一样），然后对方接收结束后返回一个消息，再开启运行。回头翻翻核心编程好了，貌似在那里的……
郁闷啊郁闷啊……</description>
    </item>
    
    <item>
      <title>Bittorrent</title>
      <link>//blog.shell909090.org/blog/archives/169/</link>
      <pubDate>Tue, 31 May 2005 21:34:32 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/169/</guid>
      <description>关于纯粹的BT技术，并没有啥好说的。BT的迅猛发展表明了这个技术的生命力。不过BT还要面对几个问题。首先，也是最大的一个，就是Copyright的问题。
嗯，先回顾下网络文件发布的方式和版权追究的历史。最开始的互联网是bbs形式的，而且比firebird一类的telnet形式还要落后。这种情况下要么是通过bbs交换文件，要么就是ftp。多数是大学在用，很少有追究版权的，而且多数东西用于研究时可以藐视版权法。所以这个时期根本没有所谓版权的问题。
然后就是欧洲某个研究所（似乎是欧洲核物理研究所）搞出的html协议，到今天成为了xml协议的基础。这个协议可以在客户端灵活的使用各种媒体对象表示，而不用管对方是啥系统。今天的xml可以保存和创建各种内存对象也不用管是啥系统，从某个意义上说，这是一脉相承的重大进步……呃，好像扯远了。这个时候出现的各种文档基本都是本人发布或者转载，多数也是大学使用，没有版权问题。
后来我们的网络渐渐转向民用，这个时候微软也搅合了进来，发布了IE。然后很多网站就搞了个人主页服务。还有部分小型网站根本就是大流量的个人主页。为了吸引访问量，经常东抄抄西搬搬。这个时候就有了盗版的概念，不过盗版的多数是文字，也经过修改。这个时期的后期渐渐演变成了盗版歌曲，Mp3格式之争由此而来，相信大家非常熟悉了。
网页毕竟比较好处理，盗版的人虽然多，不过稍成气候就可以一个警告让ISP关闭服务。唱片公司们虽然头痛还比较好处理。（当然，他们可能认为这已经是比较严重的问题了。但是和后来的境况相比，他们的却还没有见到啥大场面。）而后出现了分布式的歌曲共享系统和搜索引擎，这让各个公司大大的头痛了。两者的结合使得免费的歌曲在网络上满天飞，整个唱片行业据说损失惨重。唱片公司们为此甚至将歌曲共享先锋的Netisper（貌似这个名字，偶忘记了）告倒了。不过倒了一个人，起来千万个。反正目前来说，唱片公司已经放弃封杀所有免费歌曲流行的可能。改成授权下载了。用非常低廉的价格销售所谓“授权正版Copy”。老实说对于这个我非常的佩服，不但宣传了自己，减少了盗版损失。对于我们来说，合理合法，支持了自己喜欢的歌手，而且还方便查找。这手算是诸公司们非常成功的举措。
然后就是近代，Edonkey和Bittorrent为代表的两种DFS横空出世（其实ED是个老家伙了）。满世界乱飞的盗版根本没法解决，而且盗版的范畴从主要是音乐和文字扩展到了各个领域。从游戏到电影，啥都有。甚至严重的打击了盗版商，将中国多年未竟的反盗版销售的事业推向了顶点。一个卖盗版的朋友是这么评价的：“以后我们只卖三种软件光盘，系统，office，大众软件”。我今年的所有电视和电影都是从网络上下载的。由此可见我们的盗版正式进入了战国时代。
为盗版而生想必不是P2P软件的本意，不过去除盗版后P2P恐怕没啥明天可言。不信你可以上bt.btchina.net数数到底多少共享是有授权的，包括shareware，XXX授课录像Live这种就算授权过好了。照样是盗版比非盗版多。但是P2P极大的刺激了网络的发展，并且可能成为将来的一个核心技术。
当然我相信，立个法禁止P2P软件简单。但是，这是倒退，而不是进步。P2P软件现在逐渐分布化，BT可以自我组件平台，并且透网络运行，凡可上网处皆可BT。如此优良的技术弃而不用，岂非倒行逆施？但是相对，BT也无法参照歌曲运营的模式来个网络授权正版。如此一来，BT被告上法庭的机会就非常高。要是真的禁止了BT，相信会有新的共享软件应需求而生，状况非但没有好转，反而恶化。绝对不是立法禁了就解决的了的。
目前来说，寻求一种共享中盈利的模式是当务之急。不但是各个损失惨重的公司，而且是众多的BTFans。如果公司倒了，我们还能BT啥呢？
另外一个就是BT的共享方式。BT的算法仅仅可以用于静态文件，这点另我非常不齿。目前最需要分布运行的多数都是动态数据，例如电视广播，股票数据等等。BT不可以用于动态数据的原因我比较清楚，因为我曾经就算法设计问过运筹的老师。不过有分流比没有分流好，仔细看看当今诸多股票提供上捉襟见肘的状况就可以知道了。如果BT2.0协议提供包括动态数据流和认证下载，网络穿越在内的一系列能力，相信会非常具备竞争力的。这个我早在一年前就考虑过，不过奇怪的是，我预计一年可以实现，现在都快一年半了……根本没有声音。</description>
    </item>
    
    <item>
      <title>debain</title>
      <link>//blog.shell909090.org/blog/archives/168/</link>
      <pubDate>Tue, 31 May 2005 20:54:40 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/168/</guid>
      <description>根据babylon的结果，没有debian这个词。根据我的拼音加加的结果，debian打出来是“得便”的意思。而事实上……debian是一个linux的版本。
不过我很奇怪了，why所有的linux发行版本都这么大呢？windows2000的发行版本是4in1，四个版本合一张光盘。而RedHat9的发行版本是1in3，一个版本放了三张光盘……这个居然还好意思号称内核精简。windows的内核严格说起来也只有2M而已，smss大约100K，Csrss不知道多大，加上NTDLL.user32.Kernel32.win32k.gdi32也没有多大。不过windows组件模型比较大，搞得整个windows貌似比较庞大而已。一般来说，优化过后服务器上大约需要2-3G的分区空间。而一个正常可以跑的linux桌面大致也需要这么多的空间……界面和通用性上还不及。这厢真是郁闷大了。
不过仔细想想，linux和windows的传奇都貌似到了顶点。windows自从2003后就基本没有了声音，就算现在他出什么新版本我会不会买账还是回事情。（2003现在都没有试过呢……）linux出新版本总比windows落后一步，usb如此，摄像头亦如此。加上PDA或者智能手机一类的嵌入设备中越来越多的使用WinCE（就是PPC啦），ActiveSync和windows捆绑的迹象越发严重。linux的路不好走啊。
下面恐怕就是分布式系统了吧，如同我前面所讲。分布式系统相对正常系统具备极大的优势。例如硬盘空间共享，这样利用效率就会上升。软件的安装和维护集成，节约成本。CPU资源共用，有利于承担突发事件，并且方便利用用户使用不了的CPU时间。（例如一个在看网页的人的空闲CPU可以分配给运行大型程序的）不过最大的问题就是保密性、可维护性和网络速度问题。一般来说只有当网络速度和硬盘读写速度量级相当的时候才可以考虑分布系统。目前的接入普遍都不快，只有内部网络貌似可以达到这个级别。100Mbps=12.8MB/s，硬盘大约是30MB/s-60MB/s。尚可以考虑考虑。
分布系统的话首先应当选择微内核，否则不同的机器跑不同的内核岂不乱套。网络部分可能会编译到内核里面来加速。不过最大的问题就是，进程如何跨越机器？如果进程无法跨越机器，那么分布系统啥意思都没有了，干脆上一个DFS算了。如果进程要跨越机器，那么操作台占有，信号，等待，互斥等等就都成了问题。以前可能不明显的互斥问题在网络上就会产生明显效应，不同的互斥算法造成的效率差异会非常显著。
我设想分布系统可能如此实现。网络和文件系统编译入内核来加速。程序的运行都要在中央服务器上启动才行。每个进程会派生出控制端的概念，控制端对应不同的权限。严格来说，控制端是一个亚进程的概念。因为同样一个程序可能又多个机器要运行，例如IE一类的浏览器。如果放出多个进程恐怕太过浪费，但是如果放出一个进程，那么这个进程的权限又不好控制。考虑中是否可以将界面控制部分和程序分立开，成为控制端。控制端具备独立的变量空间和权限环境，对应不同终端上的用户窗口，可以容纳多个线程。或者进一步说，同样代码在不同机器上运行时候，环境理论上应当相同，除了控制端部分的数据应当不同（替换成本地的数据）。这样输出窗口的时候可以输出到不同的窗口上。
理论上说，每个程序应当只允许运行一个Instance。如果有人运行某个程序，则应当建立程序的私有空间，并且初始化程序，察看是否已经在运行中。如果在运行中则自网络上虚拟映射入整个程序。而后初始化控制端，并且派生出本地线程。由本地线程来运作整个程序。程序对非控制端部分的操作都要进行互斥访问……真麻烦。
如果某个机器具备空CPU，而另外一个机器CPU运行满，则将整个进程映射入空闲机器中，包括控制端部分。这样可以用空闲的CPU，当然前提必须是支持多线程，这样才可以移动一个线程过去。不过问题是保密性，还有如果空闲的机器也要运行这个程序了怎么办？这样恐怕就要将线程移动回去，然后清空控制端重新初始化。但是空闲的CPU就无法利用了。
呃……貌似扯的蛮远了，从linux安装失败一直扯到了分布系统……今天就这样吧，郁闷……</description>
    </item>
    
    <item>
      <title>la paloma</title>
      <link>//blog.shell909090.org/blog/archives/167/</link>
      <pubDate>Tue, 31 May 2005 07:37:40 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/167/</guid>
      <description>原本以为la paloma是法文的鸽子，前几天和Gigi谈起。她说……法文的鸽子，和英文有差别吗？我当时一愣，难倒是意大利文或者拉丁文？回来抄起工具，下了一个babylon pro5.05 tiral。然后找个破解补丁上去，再下载我看的到的本地词典，连接所有可行的网络词典。总共花费400M的磁盘空间，查了下，终于出来了。
la paloma是西班牙文，意思是……鸽子……</description>
    </item>
    
    <item>
      <title>郁闷</title>
      <link>//blog.shell909090.org/blog/archives/166/</link>
      <pubDate>Tue, 31 May 2005 06:56:19 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/166/</guid>
      <description>今天没事，看看大家的blog去。结果发现基本都没有更新。然后看到Gigi的上面写的郁闷宣言。然后万分悲惨的……我也郁闷了……
算算已经快六一了，当然我已经不是儿童，儿童节没啥好企盼的。不过答辩在6.13，目前核心算法还只写了一半，优化和美化完全没有做，文档动笔才3000字。最郁闷的就是，找不到老师，也找不到研究生。毕设还打不打算让我准时过去啊？
当然，要仅仅如此还不至于郁闷到死。那个做的太快导致老师来不及布置任务也就算了，反正我不着急毕业，也不准备拿啥奖。（不给我个最差劲学生奖就不错了）就算准时答辩照样还有30号的运筹学考试拦着，左右无法正常毕业，拖也无妨。问题是现在很无聊，所以家里就开始催我找工作。我说，这人是不是没有被某些人雇佣就不是人啦？那雇人的人呢？
我又不是很差（呃……不说我的成绩……），找个一千二千的工作肯定找的到。问题是好的工作不好找啊。一个个不知道啥理由的催催催，仿佛多催催就可以找到好工作似的。没有找到工作我也暴郁闷啊（在此再次BS中国的就业率）。
更郁闷的就是程序的问题了，呃，不是编程上的问题。最近看看行情，悲哀的发现，中国计算机还过的去的MM就如同秃子的头发，没几个。而且还要排除如花……干吗，BS我？BS我也要排除，我又不是周星星。剩下的人再排排队。然后，意料之中的发现……轮不到我。我周围计算机最顶尖的MM就算Gigi和zoomy了。不过按照程序员的角度来看问题的话，那个也没啥东西……其他的就更别提了，最基础的系统优化都做不好，写个程序头痛的要死。发嗲和骗GG代劳的本事比计算机水平要高，对于电脑的感觉就和对于体重计的感觉差不多。
虽然说我已经做好了没有人分享心理的准备，也决定了今后不相信任何一只动物，尤其是人。不过对于生命繁衍的需要和某些乐趣（呃，请诸MM不要扁我，扁我也不要拿东西，拿东西也别拿硬的，拿硬的也别扁我脸）的需要，一个共享空间和环境的对象是必须的。（写完才发现，上帝啊，系统引论真的看多了。越看越像不同程序共享同一进程空间……）目前状况来看，恐怕不是运气级好的撞上一个秃子的头发（去去，如花退散……），就是必须忍受一个讲话如同对XX谈琴的对象。
不过总总来说，这还不是郁闷之最。郁闷之最的是……我该干什么？迷茫啊……
呃……我没醉……我没醉，妈的，谁把啤酒换成香槟的……</description>
    </item>
    
    <item>
      <title>从游戏修改到程序优化</title>
      <link>//blog.shell909090.org/blog/archives/165/</link>
      <pubDate>Sat, 28 May 2005 00:33:43 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/165/</guid>
      <description>前几天在家没事情干，就写了一个通用游戏修改器。代码很简单，利用argv参数获取传入文件位置，然后反复调用EditFile。重复映射文件，并且定位目标位置，修改指定数量的数据，然后保存。然后，我为了某些特殊目的，决定赋予程序动态运行和可扩展的功能。并且加入搜索支持。其实后者并不困难，我们只要反复调用函数对比和赋值，并且逐步推进指针就好。但是前者的实现具有一定困难，为此我不得不增加了部分程序开销，来保存一个函数指针，并且可以动态的调用。这样我们就可以实现诸如轩辕剑中的物品修改。其过程大致如下所述。 轩辕剑中的物品是一个数组，但是数组头的RVA是不固定的，仅仅知道大致位置。我们必须先定位某个物品的代码（特征代码），然后修改后面紧跟的一个WORD，实现修改物品数量。程序会自动的建立一个指针，并且逐步推进。我们的实现函数仅仅需要判断当前指针指向的WORD对象是否等于一个特定值，等于的时候进行修改就好。主体框架如下： #define NOSEARCH 0x00000000 #define SEARCHALL 0xFFFFFFFF #define RADDR(x) (LPVOID)((DWORD)RVABase+(x)) typedef DWORD (*tpEditData)(LPVOID Data); struct _RVATable{ DWORD RVA; DWORD SearchEnd; int size; tpEditData pfnEditData; LPVOID OldData; LPVOID DataBuff; }; _RVATable RvaTab[]={ {0xBA4C, NOSEARCH, 01, NULL, NULL, &amp;ldquo;x09&amp;rdquo;}, {0xBA4E, NOSEARCH, 01, NULL, NULL, &amp;ldquo;x5B&amp;rdquo;}, {0x76AB, NOSEARCH, 01, NULL, NULL, &amp;ldquo;x09&amp;rdquo;}, {0x0000, NOSEARCH, 0, NULL, NULL, NULL} }; void EditFile(LPTSTR lpPath); int CompareMemory(LPVOID mem1, LPVOID mem2, int size); void main(int argc, TCHAR* argv[]){ for(int i=1;i&amp;lt;argc;i++) EditFile(argv[i]); return ; } void EditFile(LPTSTR lpPath){ int i; HANDLE hMap, hFile; LPVOID RVABase=NULL, DataByRva, DataEndRva, DataNow; DWORD FileSize; __try{ hFile=CreateFile(lpPath, GENERIC_READ | GENERIC_WRITE, 0, NULL, OPEN_EXISTING, 0, NULL); if( hFile==INVALID_HANDLE_VALUE ) return ; FileSize=GetFileSize(hFile, NULL); hMap=CreateFileMapping(hFile, NULL, PAGE_READWRITE | SEC_COMMIT, 0, 0, NULL); if( !</description>
    </item>
    
    <item>
      <title>光盘镜像Copy、底层文件读写和CreateFile</title>
      <link>//blog.shell909090.org/blog/archives/164/</link>
      <pubDate>Sat, 28 May 2005 00:22:58 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/164/</guid>
      <description>1.CreateFile读写文件，设备，网络。
刚刚看到有人在问，知道了数据的物理位置，如何读取光盘上的数据。于是我很纳闷，这有何难。看他的意思不会是要编程进行硬件交互读取吧。如果已知数据的偏移地址，那么使用CreateFile(&amp;quot;\.X:&amp;quot;&amp;hellip;)就可以直接读取某个盘上的数据了。（Windows 2000 Support Tools中DiskProbe就是用这种方法直接读写物理磁盘的，包括可以读写0面0道0扇区，不过他用的对象是\.PHYSICALDRIVEx而已）
还有可以打开的对象包括管道（会用的人一定知道），文件（废话），Consoles（简单来说就是命令行界面），通信资源（例如COM1）。据说还可以打开内存，似乎是PHYSICMEM资源，记不得了。
以上资源的打开都有限制的，多数都比较简单，就是在打开时候使用OPEN_EXISTING标志。另外还有些当然的限制，例如光盘不能做为GENERIC_WRITE打开（我是没有试过啦，不过想也知道，光盘哪里能写。）
举例来说，这次我做的ISO镜像制作程序（ISO可以是光盘的按字节镜像），代码大致就是这样的。（以下代码都是伪代码，不要拿去编译哦。）
GetLogicalDriveStrings(nBufferLength, lpBuffer); lpRootPathName=lpBuffer; while( lpRootPathName\[0\] ){ if(GetDriveType(lpRootPathName) &amp;amp; DRIVE\_CDROM ) break; lpRootPathName+=strlen(lpRootPathName)+1; }; if( !lpRootPathName\[0\] ) return -1; strcpy(RootPathName, &amp;quot;\\.&amp;quot;); strcat(RootPathName, lpRootPathName); RootPathName\[strlen(RootPathName)-1\]=0; hFileCDROM=CreateFile(RootPathName, GENERIC\_READ,//我要做镜像，不是刻盘（不知道能不能刻） FILE\_SHARE\_READ, NULL, //你这个用户有访问能力就是NULL，没有自己去看API编程去 OPEN\_EXISTING, //必须如此,这个是打开光盘的限制条件 FILE\_ATTRIBUTE\_NORMAL | FILE\_FLAG\_OVERLAPPED, //交叠模式 0); hFileISO=CreateFile(ISOpath, GENERIC\_WRITE, 0, NULL, OPEN\_ALWAYS, FILE\_ATTRIBUTE\_NORMAL, 0); Overlap.hEvent=CreateEvent(NULL, FALSE, FALSE, NULL); do{ Overlap.Offset=...; Overlap.OffsetHigh=...; ReadFile(hFileCDROM, lpBuffer, BUFF\_SIZE, &amp;amp;NumberOfBytes, &amp;amp;Overlap); WaitForSingleObject(olRead.hEvent, TimeOut); if(!GetOverlappedResult(hFileCDROM, &amp;amp;Overlap, &amp;amp;NumberOfBytes, FALSE) ){ switch( GetLastError() ){ case ERROR\_IO\_INCOMPLETE: CancelIo(hFileCDROM); break; default: break; } //error } WriteFile(hFileISO, lpBuffer, BUFF\_SIZE, &amp;amp;NumberOfBytes, NULL); }while( 1 ); CloseHandle(Overlap.</description>
    </item>
    
    <item>
      <title>搬家</title>
      <link>//blog.shell909090.org/blog/archives/163/</link>
      <pubDate>Thu, 26 May 2005 02:07:53 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/163/</guid>
      <description>今天蛮狼狈的，把学校的电脑搬回家来。先是高估了绳子的牢固程度，导致了搬运途中必须依靠手的力量来平衡电脑，而不是拎起来就好了。结果累的要死，甚至有的时候要在大庭广众下扛着电脑跑。后来又发现有个硬盘的螺丝没有敲。要死了，在机器里面逛逛狂磕，这个心疼啊……。最后发现带了电脑忘记带鼠标了，要用家里的破鼠标，学校里面的可是光电啊。
不过也有好事，搬的时候还是挺巧的。碰到一个初中同学，骑车到学校门口。正好顺风拉过去，省的走段路了。聊了聊，发现人家MM是去面试的……哎，自卑……想想自己学校不差，水平不差（虽然不是本专业水平），人品也不算太差。怎么就是找不到工作呢？（画外音：你根本没有找好不好。而且英语不好是你的原罪……）
昨天详细看了Witness2003的破解，感觉还是一样。写这个程序的人多数是个废柴。所有的函数全部打包到一起，没有任何保护措施，连壳都不加。判断非常凌乱，东一个西一个，虽然主要在一个函数里面，不过还有很多不是的。而且最让人鄙视的是，我连破解练习都过不去的水平，居然轻松拆掉了它的保护。由此可见，所谓的保护，其实就是告诉你，不能用，仅仅一个对话框而已。不过非常烦而已。
混帐的毕设终于开始了。其实程序设计不算难，一周的时间我构架和测试都做好了。还是一边看古田任三郎一边写的。不过……主核没做，算法不会。现在已经开始写程序设计说明了，发现其实说明比程序难写，早知道我当时写程序的时候就多写点注释好了。目前程序的每个节点已经非常像控件了，不过没有控件的事件驱动而已。各种操作界面也出来了，基本来说就这样了。看来赶上正常毕业答辩有希望哦。不过前提是我可以正常参加陈峰的考试……</description>
    </item>
    
    <item>
      <title>关于未来计算机思考</title>
      <link>//blog.shell909090.org/blog/archives/162/</link>
      <pubDate>Mon, 16 May 2005 07:31:42 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/162/</guid>
      <description>我认为，将来的计算机可能向两个方向发展。一个是嵌入化个人化，一个是集中化。
首先可能出现某种移动数码核心，类似当前PDA的作用。不过在安全方面的使用要完善的多。他可以将手机作为外部设备加载，进行可视电话，或者身份认证，或者仅仅是看看电视上上网。
而后分布系统的发展将会使这个设备不仅仅成为安全认证的核心，而且成为个人电脑的一部分，携带机密数据和软件版权。而各个电脑会成为这个设备的外部扩展，毕竟键盘和屏幕很难随身化的。包括笔记本也可能成为这个设备的一个外部延伸。
而家中的所有设备（或者办公室的）都会集成微芯片，和某个中心连接并且统一规划。该中心在认证（那个核心哦）后接受控制。这样在生活和工作上，人们都依赖于这个核心上。
而在高性能计算和集成应用上，趋势表现为分布化。但是集成中心的负荷不断加重（或者说这才导致了分布化）。说明未来集成的解决也会成为一个热点。
而目前的个人电脑，可能会退化为核心设备的外延。利用强大的网络在一个集成化的设备上工作（分布式系统连接了核心和集成设备），这样对于设备的效率有很好的利用。</description>
    </item>
    
    <item>
      <title>无题</title>
      <link>//blog.shell909090.org/blog/archives/161/</link>
      <pubDate>Mon, 16 May 2005 07:14:29 +0800</pubDate>
      
      <guid>//blog.shell909090.org/blog/archives/161/</guid>
      <description>今天心情不错，数码相机（姑且叫数码相机吧）到了。拿出去拍了N多东西，街道，美女，天空。我拍，我拍。啊，生活真美好。
刚刚想到一个问题，曾经在网络上看到一个文章，是在ring3如何运行ring0代码的。方法是利用Admin权限申请Token，访问DriverPhysicsMemory对象。而后修改进程表，从而隐藏自身。我刚刚突然想到，是否可以隐藏某个HANDLE呢？例如winsock HANDLE。或者直接注入某个sys去和网络连接。这样防火墙不就是一个废物了？
想想似乎可行，过两天找个机会做做看好了。呵呵，Kernel Debug真好玩。
另外想了一个问题，关于时空结构内在形成逻辑的考虑。我预期逻辑的成因是因为时空的特性。如果时空的特性变化就产生不同的逻辑。以因果律为例，如果静止的物体具备速度了。那么它必定被外力作用过。但是如果时空可以重组合，那么一个物体的加速未必存在动力原因。例如一个人留下一个可以穿越时空的方法，而后有人实现，将方法带到过去留下。如此组成循环，那么在未来会出现穿越时空的方法，但是却没有形成的原因。同理，目前的所有逻辑可能都是时空所造成的。如果逻辑不出错，则时空无法逆转。例如考虑超过光速会出现何等现象等等，首先推论的逻辑即无法使用。因为物体运动具备有限速度亦是时空的限制。
我们要假设考虑弯曲并且重新组合时空，则必须有两个条件。首先是存在第五维度，其次是时空可以黎曼形变，这样才有折叠回去的可能。假如时空交叉组合了。那么回到过去的反馈会产生什么效应呢？
我们假设时空的点状态在一个N维空间中，这个N可以无穷大。时空的状态就在N维中变化。时空的变化可能为三。
一个是耗散态，对过去的回馈在量级上等同于过去的量子不定性造成的热变化（布朗效应）。于是对过去的回馈不造成多余的结果。这个等于变性的时空流，没有对外的效应。说例子嘛，寻秦可能基于这个思路。
一个是稳定态，对于过去的回馈造成的结果阻碍对于过去的回馈。于是未来处在一个与原来不同的稳定状态。例如刚刚回到过去那个例子。
另外一个就是非稳定态，对于过去的回馈加大对于过去的回馈。除非时空在回馈中出现非线性的因素，否则如此回馈的结果必定导致未来的不唯一。换言就是没有一个稳恒的未来。例如一个人将金子带回过去，利用知识发财。则下次回到过去可以带更多的金子，等等等等。
不过实话来说，上述推论都仅仅为科幻推论。因为推理的基石，因果率在时空重组下即不成立了。所以一旦时空重组，会产生如何效应并非我们这些三维的人可以理解的。</description>
    </item>
    
  </channel>
</rss>
